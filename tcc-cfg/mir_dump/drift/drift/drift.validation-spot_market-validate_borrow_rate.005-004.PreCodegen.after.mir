// MIR for `validate_borrow_rate` after PreCodegen

fn validate_borrow_rate(_1: u32, _2: u32, _3: u32, _4: u32) -> std::result::Result<(), error::ErrorCode> {
    debug optimal_utilization => _1;
    debug optimal_borrow_rate => _2;
    debug max_borrow_rate => _3;
    debug min_borrow_rate => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _7: std::result::Result<(), error::ErrorCode>;
    let mut _8: bool;
    let mut _9: u32;
    let mut _10: ();
    let _11: error::ErrorCode;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 2];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &error::ErrorCode;
    let _30: &error::ErrorCode;
    let _31: ();
    let mut _32: &str;
    let _33: &str;
    let mut _34: &std::string::String;
    let _35: &std::string::String;
    let _36: std::string::String;
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[&str; 1];
    let _41: &[&str; 1];
    let _42: [&str; 1];
    let mut _43: &[core::fmt::rt::Argument<'_>];
    let mut _44: &[core::fmt::rt::Argument<'_>; 1];
    let _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: [core::fmt::rt::Argument<'_>; 1];
    let mut _47: core::fmt::rt::Argument<'_>;
    let mut _48: &u32;
    let _49: &u32;
    let _50: u32;
    let mut _51: error::ErrorCode;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _56: ();
    let _57: ();
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _59: std::result::Result<(), error::ErrorCode>;
    let mut _60: bool;
    let mut _61: u32;
    let mut _62: u32;
    let mut _63: ();
    let _64: error::ErrorCode;
    let _65: ();
    let mut _66: &str;
    let _67: &str;
    let mut _68: &std::string::String;
    let _69: &std::string::String;
    let _70: std::string::String;
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[&str; 2];
    let _75: &[&str; 2];
    let _76: [&str; 2];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let mut _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: &[core::fmt::rt::Argument<'_>; 1];
    let _80: [core::fmt::rt::Argument<'_>; 1];
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &error::ErrorCode;
    let _83: &error::ErrorCode;
    let _84: ();
    let mut _85: &str;
    let _86: &str;
    let mut _87: &std::string::String;
    let _88: &std::string::String;
    let _89: std::string::String;
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let mut _93: &[&str; 3];
    let _94: &[&str; 3];
    let _95: [&str; 3];
    let mut _96: &[core::fmt::rt::Argument<'_>];
    let mut _97: &[core::fmt::rt::Argument<'_>; 2];
    let _98: &[core::fmt::rt::Argument<'_>; 2];
    let _99: [core::fmt::rt::Argument<'_>; 2];
    let mut _100: core::fmt::rt::Argument<'_>;
    let mut _101: &u32;
    let _102: &u32;
    let mut _103: core::fmt::rt::Argument<'_>;
    let mut _104: &u32;
    let _105: &u32;
    let mut _106: error::ErrorCode;
    let mut _107: isize;
    let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _111: ();
    let _112: ();
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _114: std::result::Result<(), error::ErrorCode>;
    let mut _115: bool;
    let mut _116: u32;
    let mut _117: u32;
    let mut _118: ();
    let _119: error::ErrorCode;
    let _120: ();
    let mut _121: &str;
    let _122: &str;
    let mut _123: &std::string::String;
    let _124: &std::string::String;
    let _125: std::string::String;
    let mut _127: std::fmt::Arguments<'_>;
    let mut _128: &[&str];
    let mut _129: &[&str; 2];
    let _130: &[&str; 2];
    let _131: [&str; 2];
    let mut _132: &[core::fmt::rt::Argument<'_>];
    let mut _133: &[core::fmt::rt::Argument<'_>; 1];
    let _134: &[core::fmt::rt::Argument<'_>; 1];
    let _135: [core::fmt::rt::Argument<'_>; 1];
    let mut _136: core::fmt::rt::Argument<'_>;
    let mut _137: &error::ErrorCode;
    let _138: &error::ErrorCode;
    let _139: ();
    let mut _140: &str;
    let _141: &str;
    let mut _142: &std::string::String;
    let _143: &std::string::String;
    let _144: std::string::String;
    let mut _146: std::fmt::Arguments<'_>;
    let mut _147: &[&str];
    let mut _148: &[&str; 3];
    let _149: &[&str; 3];
    let _150: [&str; 3];
    let mut _151: &[core::fmt::rt::Argument<'_>];
    let mut _152: &[core::fmt::rt::Argument<'_>; 2];
    let _153: &[core::fmt::rt::Argument<'_>; 2];
    let _154: [core::fmt::rt::Argument<'_>; 2];
    let mut _155: core::fmt::rt::Argument<'_>;
    let mut _156: &u32;
    let _157: &u32;
    let mut _158: core::fmt::rt::Argument<'_>;
    let mut _159: &u32;
    let _160: &u32;
    let mut _161: error::ErrorCode;
    let mut _162: isize;
    let _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _164: !;
    let mut _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _166: ();
    let mut _167: ();
    scope 1 {
        debug error_code => _11;
        let _18: std::string::String;
        let _37: std::string::String;
        let mut _172: &u32;
        let mut _173: &[&str; 1];
        let mut _174: &[&str; 2];
        scope 2 {
            debug res => _18;
        }
        scope 3 {
            debug res => _37;
        }
    }
    scope 4 {
        debug residual => _53;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _56;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _64;
        let _71: std::string::String;
        let _90: std::string::String;
        let mut _170: &[&str; 3];
        let mut _171: &[&str; 2];
        scope 9 {
            debug res => _71;
        }
        scope 10 {
            debug res => _90;
        }
    }
    scope 11 {
        debug residual => _108;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _111;
        scope 14 {
        }
    }
    scope 15 {
        debug error_code => _119;
        let _126: std::string::String;
        let _145: std::string::String;
        let mut _168: &[&str; 3];
        let mut _169: &[&str; 2];
        scope 16 {
            debug res => _126;
        }
        scope 17 {
            debug res => _145;
        }
    }
    scope 18 {
        debug residual => _163;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _166;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        _8 = Le(move _9, const _);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = ();
        _7 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        goto -> bb15;
    }

    bb2: {
        StorageDead(_9);
        StorageLive(_11);
        _11 = error::ErrorCode::InvalidSpotMarketInitialization;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _174 = const _;
        _22 = &(*_174);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_11;
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _29) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_29);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_19);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb6, unwind: bb67];
    }

    bb6: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb7, unwind: bb67];
    }

    bb7: {
        StorageDead(_13);
        drop(_17) -> [return: bb8, unwind: bb68];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _173 = const _;
        _41 = &(*_173);
        _40 = &(*_41);
        _39 = move _40 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _172 = const _;
        _49 = &(*_172);
        _48 = &(*_49);
        _47 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _48) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_48);
        _46 = [move _47];
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = move _44 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_44);
        _38 = Arguments::<'_>::new_v1(move _39, move _43) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_43);
        StorageDead(_39);
        _37 = format(move _38) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_38);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        _36 = move _37;
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        _33 = <String as Deref>::deref(move _34) -> [return: bb12, unwind: bb66];
    }

    bb12: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = solana_program::log::sol_log(move _32) -> [return: bb13, unwind: bb66];
    }

    bb13: {
        StorageDead(_32);
        drop(_36) -> [return: bb14, unwind: bb68];
    }

    bb14: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_51);
        _51 = _11;
        _7 = std::result::Result::<(), error::ErrorCode>::Err(move _51);
        StorageDead(_51);
        StorageDead(_11);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_8);
        _6 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _7) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_7);
        _52 = discriminant(_6);
        switchInt(move _52) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_56);
        _56 = ((_6 as Continue).0: ());
        _5 = _56;
        StorageDead(_56);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _2;
        StorageLive(_62);
        _62 = _3;
        _60 = Le(move _61, move _62);
        switchInt(move _60) -> [0: bb22, otherwise: bb21];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_53);
        _53 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb61;
    }

    bb21: {
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_63);
        _63 = ();
        _59 = std::result::Result::<(), error::ErrorCode>::Ok(move _63);
        StorageDead(_63);
        goto -> bb36;
    }

    bb22: {
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_64);
        _64 = error::ErrorCode::InvalidSpotMarketInitialization;
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _171 = const _;
        _75 = &(*_171);
        _74 = &(*_75);
        _73 = move _74 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_64;
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _82) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_82);
        _80 = [move _81];
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = move _78 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_78);
        _72 = Arguments::<'_>::new_v1(move _73, move _77) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_77);
        StorageDead(_73);
        _71 = format(move _72) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_72);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_75);
        _70 = move _71;
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = <String as Deref>::deref(move _68) -> [return: bb26, unwind: bb65];
    }

    bb26: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = solana_program::log::sol_log(move _66) -> [return: bb27, unwind: bb65];
    }

    bb27: {
        StorageDead(_66);
        drop(_70) -> [return: bb28, unwind: bb68];
    }

    bb28: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _170 = const _;
        _94 = &(*_170);
        _93 = &(*_94);
        _92 = move _93 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_2;
        _101 = &(*_102);
        _100 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _101) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_101);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_3;
        _104 = &(*_105);
        _103 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _104) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_104);
        _99 = [move _100, move _103];
        StorageDead(_103);
        StorageDead(_100);
        _98 = &_99;
        _97 = &(*_98);
        _96 = move _97 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_97);
        _91 = Arguments::<'_>::new_v1(move _92, move _96) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_96);
        StorageDead(_92);
        _90 = format(move _91) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_91);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_94);
        _89 = move _90;
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = <String as Deref>::deref(move _87) -> [return: bb33, unwind: bb64];
    }

    bb33: {
        _85 = &(*_86);
        StorageDead(_87);
        _84 = solana_program::log::sol_log(move _85) -> [return: bb34, unwind: bb64];
    }

    bb34: {
        StorageDead(_85);
        drop(_89) -> [return: bb35, unwind: bb68];
    }

    bb35: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_106);
        _106 = _64;
        _59 = std::result::Result::<(), error::ErrorCode>::Err(move _106);
        StorageDead(_106);
        StorageDead(_64);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_60);
        _58 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _59) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_59);
        _107 = discriminant(_58);
        switchInt(move _107) -> [0: bb38, 1: bb39, otherwise: bb18];
    }

    bb38: {
        StorageLive(_111);
        _111 = ((_58 as Continue).0: ());
        _57 = _111;
        StorageDead(_111);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = _2;
        StorageLive(_117);
        _117 = _4;
        _115 = Ge(move _116, move _117);
        switchInt(move _115) -> [0: bb42, otherwise: bb41];
    }

    bb39: {
        StorageLive(_108);
        _108 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb61;
    }

    bb41: {
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_118);
        _118 = ();
        _114 = std::result::Result::<(), error::ErrorCode>::Ok(move _118);
        StorageDead(_118);
        goto -> bb56;
    }

    bb42: {
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_119);
        _119 = error::ErrorCode::InvalidSpotMarketInitialization;
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _169 = const _;
        _130 = &(*_169);
        _129 = &(*_130);
        _128 = move _129 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_129);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_119;
        _137 = &(*_138);
        _136 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _137) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_137);
        _135 = [move _136];
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = move _133 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_133);
        _127 = Arguments::<'_>::new_v1(move _128, move _132) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_132);
        StorageDead(_128);
        _126 = format(move _127) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_127);
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_130);
        _125 = move _126;
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = <String as Deref>::deref(move _123) -> [return: bb46, unwind: bb63];
    }

    bb46: {
        _121 = &(*_122);
        StorageDead(_123);
        _120 = solana_program::log::sol_log(move _121) -> [return: bb47, unwind: bb63];
    }

    bb47: {
        StorageDead(_121);
        drop(_125) -> [return: bb48, unwind: bb68];
    }

    bb48: {
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_120);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _168 = const _;
        _149 = &(*_168);
        _148 = &(*_149);
        _147 = move _148 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_148);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &_2;
        _156 = &(*_157);
        _155 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _156) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_156);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_4;
        _159 = &(*_160);
        _158 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _159) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_159);
        _154 = [move _155, move _158];
        StorageDead(_158);
        StorageDead(_155);
        _153 = &_154;
        _152 = &(*_153);
        _151 = move _152 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_152);
        _146 = Arguments::<'_>::new_v1(move _147, move _151) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_151);
        StorageDead(_147);
        _145 = format(move _146) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_146);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_149);
        _144 = move _145;
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        _141 = <String as Deref>::deref(move _142) -> [return: bb53, unwind: bb62];
    }

    bb53: {
        _140 = &(*_141);
        StorageDead(_142);
        _139 = solana_program::log::sol_log(move _140) -> [return: bb54, unwind: bb62];
    }

    bb54: {
        StorageDead(_140);
        drop(_144) -> [return: bb55, unwind: bb68];
    }

    bb55: {
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_139);
        StorageLive(_161);
        _161 = _119;
        _114 = std::result::Result::<(), error::ErrorCode>::Err(move _161);
        StorageDead(_161);
        StorageDead(_119);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_115);
        _113 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _114) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_114);
        _162 = discriminant(_113);
        switchInt(move _162) -> [0: bb58, 1: bb59, otherwise: bb18];
    }

    bb58: {
        StorageLive(_166);
        _166 = ((_113 as Continue).0: ());
        _112 = _166;
        StorageDead(_166);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_167);
        _167 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _167);
        StorageDead(_167);
        goto -> bb61;
    }

    bb59: {
        StorageLive(_163);
        _163 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_165);
        _165 = _163;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _165) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb61;
    }

    bb61: {
        return;
    }

    bb62 (cleanup): {
        drop(_144) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_125) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_89) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_70) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_36) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_17) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        resume;
    }
}
