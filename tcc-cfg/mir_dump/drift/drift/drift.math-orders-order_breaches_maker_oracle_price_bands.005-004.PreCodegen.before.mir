// MIR for `order_breaches_maker_oracle_price_bands` before PreCodegen

fn order_breaches_maker_oracle_price_bands(_1: &Order, _2: i64, _3: u64, _4: u64, _5: u32, _6: bool) -> std::result::Result<bool, error::ErrorCode> {
    debug order => _1;
    debug oracle_price => _2;
    debug slot => _3;
    debug tick_size => _4;
    debug margin_ratio_initial => _5;
    debug is_prediction_market => _6;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _7: u64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _9: std::result::Result<u64, error::ErrorCode>;
    let mut _10: &state::user::Order;
    let mut _11: std::option::Option<i64>;
    let mut _12: i64;
    let mut _13: std::option::Option<u64>;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: bool;
    let mut _17: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: u64;
    let mut _23: u64;
    let mut _24: controller::position::PositionDirection;
    let mut _25: i64;
    let mut _26: u32;
    scope 1 {
        debug order_limit_price => _7;
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _2;
        _11 = Option::<i64>::Some(move _12);
        StorageDead(_12);
        StorageLive(_13);
        _13 = Option::<u64>::None;
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        _15 = _4;
        StorageLive(_16);
        _16 = _6;
        StorageLive(_17);
        _17 = Option::<ProtectedMakerParams>::None;
        _9 = Order::force_get_limit_price(move _10, move _11, move _13, move _14, move _15, move _16, move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _18 = discriminant(_8);
        switchInt(move _18) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_22);
        _22 = ((_8 as Continue).0: u64);
        _7 = _22;
        StorageDead(_22);
        StorageDead(_8);
        StorageLive(_23);
        _23 = _7;
        StorageLive(_24);
        _24 = ((*_1).17: controller::position::PositionDirection);
        StorageLive(_25);
        _25 = _2;
        StorageLive(_26);
        _26 = _5;
        _0 = math::orders::limit_price_breaches_maker_oracle_price_bands(move _23, move _24, move _25, move _26) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_19);
        _19 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_7);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
