// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::update_perp_auction_params_limit_orders` before PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::update_perp_auction_params_limit_orders(_1: &mut order_params::OrderParams, _2: &PerpMarket, _3: i64, _4: bool) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    debug perp_market => _2;
    debug oracle_price => _3;
    debug is_signed_msg => _4;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: &state::order_params::PostOnlyParam;
    let mut _8: &state::order_params::PostOnlyParam;
    let _9: state::order_params::PostOnlyParam;
    let mut _10: !;
    let _11: std::option::Option<u8>;
    let mut _15: std::option::Option<i32>;
    let mut _17: i32;
    let _18: ();
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: u64;
    let mut _22: !;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _25: std::result::Result<i64, error::ErrorCode>;
    let mut _26: &state::perp_market::PerpMarket;
    let mut _27: controller::position::PositionDirection;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _35: std::result::Result<i64, error::ErrorCode>;
    let mut _36: i64;
    let mut _37: i64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: ();
    let mut _44: bool;
    let mut _45: &state::perp_market::PerpMarket;
    let mut _46: i64;
    let mut _47: i64;
    let _48: ();
    let mut _49: bool;
    let mut _50: u8;
    let mut _51: std::option::Option<u8>;
    let mut _52: isize;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _55: std::result::Result<i64, error::ErrorCode>;
    let mut _56: &state::perp_market::AMM;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _64: std::result::Result<u64, error::ErrorCode>;
    let mut _65: i64;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _67: std::result::Result<i64, error::ErrorCode>;
    let mut _68: i64;
    let mut _69: i64;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _81: bool;
    let mut _82: i64;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _84: std::result::Result<i64, error::ErrorCode>;
    let mut _85: i32;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: i64;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _93: std::result::Result<i64, error::ErrorCode>;
    let mut _94: i64;
    let mut _95: u64;
    let mut _96: i64;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: u64;
    let mut _103: u64;
    let mut _104: bool;
    let mut _105: !;
    let mut _107: i64;
    let mut _108: i64;
    let mut _109: u64;
    let mut _110: bool;
    let mut _111: i64;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _113: std::result::Result<i64, error::ErrorCode>;
    let mut _114: i64;
    let mut _115: i64;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _121: ();
    let mut _122: &str;
    let _123: &str;
    let mut _124: &std::string::String;
    let _125: &std::string::String;
    let _126: std::string::String;
    let mut _128: std::fmt::Arguments<'_>;
    let mut _129: &[&str];
    let mut _130: &[&str; 1];
    let _131: &[&str; 1];
    let _132: [&str; 1];
    let mut _133: &[core::fmt::rt::Argument<'_>];
    let mut _134: &[core::fmt::rt::Argument<'_>; 1];
    let _135: &[core::fmt::rt::Argument<'_>; 1];
    let _136: [core::fmt::rt::Argument<'_>; 1];
    let mut _137: core::fmt::rt::Argument<'_>;
    let mut _138: &i64;
    let _139: &i64;
    let mut _140: std::option::Option<i64>;
    let mut _141: i64;
    let _142: ();
    let mut _143: &str;
    let _144: &str;
    let mut _145: &std::string::String;
    let _146: &std::string::String;
    let _147: std::string::String;
    let mut _149: std::fmt::Arguments<'_>;
    let mut _150: &[&str];
    let mut _151: &[&str; 1];
    let _152: &[&str; 1];
    let _153: [&str; 1];
    let mut _154: &[core::fmt::rt::Argument<'_>];
    let mut _155: &[core::fmt::rt::Argument<'_>; 1];
    let _156: &[core::fmt::rt::Argument<'_>; 1];
    let _157: [core::fmt::rt::Argument<'_>; 1];
    let mut _158: core::fmt::rt::Argument<'_>;
    let mut _159: &i32;
    let _160: &i32;
    let mut _161: std::option::Option<i64>;
    let mut _162: i64;
    let mut _163: i32;
    let _164: ();
    let mut _165: &str;
    let _166: &str;
    let mut _167: &std::string::String;
    let _168: &std::string::String;
    let _169: std::string::String;
    let mut _171: std::fmt::Arguments<'_>;
    let mut _172: &[&str];
    let mut _173: &[&str; 1];
    let _174: &[&str; 1];
    let _175: [&str; 1];
    let mut _176: &[core::fmt::rt::Argument<'_>];
    let mut _177: &[core::fmt::rt::Argument<'_>; 1];
    let _178: &[core::fmt::rt::Argument<'_>; 1];
    let _179: [core::fmt::rt::Argument<'_>; 1];
    let mut _180: core::fmt::rt::Argument<'_>;
    let mut _181: &i64;
    let _182: &i64;
    let mut _183: std::option::Option<i64>;
    let mut _184: i64;
    let _185: ();
    let mut _186: &str;
    let _187: &str;
    let mut _188: &std::string::String;
    let _189: &std::string::String;
    let _190: std::string::String;
    let mut _192: std::fmt::Arguments<'_>;
    let mut _193: &[&str];
    let mut _194: &[&str; 1];
    let _195: &[&str; 1];
    let _196: [&str; 1];
    let mut _197: &[core::fmt::rt::Argument<'_>];
    let mut _198: &[core::fmt::rt::Argument<'_>; 1];
    let _199: &[core::fmt::rt::Argument<'_>; 1];
    let _200: [core::fmt::rt::Argument<'_>; 1];
    let mut _201: core::fmt::rt::Argument<'_>;
    let mut _202: &u64;
    let _203: &u64;
    let mut _204: std::option::Option<i64>;
    let mut _205: i64;
    let mut _206: u64;
    let mut _208: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _209: std::result::Result<i64, error::ErrorCode>;
    let mut _210: &state::perp_market::AMM;
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _218: std::result::Result<u64, error::ErrorCode>;
    let mut _219: i64;
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _221: std::result::Result<i64, error::ErrorCode>;
    let mut _222: i64;
    let mut _223: i64;
    let mut _224: isize;
    let mut _226: !;
    let mut _227: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _235: bool;
    let mut _236: i64;
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _238: std::result::Result<i64, error::ErrorCode>;
    let mut _239: i32;
    let mut _240: isize;
    let mut _242: !;
    let mut _243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _245: i64;
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _247: std::result::Result<i64, error::ErrorCode>;
    let mut _248: i64;
    let mut _249: u64;
    let mut _250: i64;
    let mut _251: isize;
    let mut _253: !;
    let mut _254: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _256: u64;
    let mut _257: u64;
    let mut _258: bool;
    let mut _259: !;
    let mut _261: i64;
    let mut _262: i64;
    let mut _263: u64;
    let mut _264: bool;
    let mut _265: i64;
    let mut _266: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _267: std::result::Result<i64, error::ErrorCode>;
    let mut _268: i64;
    let mut _269: i64;
    let mut _270: isize;
    let mut _272: !;
    let mut _273: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _275: ();
    let mut _276: &str;
    let _277: &str;
    let mut _278: &std::string::String;
    let _279: &std::string::String;
    let _280: std::string::String;
    let mut _282: std::fmt::Arguments<'_>;
    let mut _283: &[&str];
    let mut _284: &[&str; 1];
    let _285: &[&str; 1];
    let _286: [&str; 1];
    let mut _287: &[core::fmt::rt::Argument<'_>];
    let mut _288: &[core::fmt::rt::Argument<'_>; 1];
    let _289: &[core::fmt::rt::Argument<'_>; 1];
    let _290: [core::fmt::rt::Argument<'_>; 1];
    let mut _291: core::fmt::rt::Argument<'_>;
    let mut _292: &i64;
    let _293: &i64;
    let mut _294: std::option::Option<i64>;
    let mut _295: i64;
    let _296: ();
    let mut _297: &str;
    let _298: &str;
    let mut _299: &std::string::String;
    let _300: &std::string::String;
    let _301: std::string::String;
    let mut _303: std::fmt::Arguments<'_>;
    let mut _304: &[&str];
    let mut _305: &[&str; 1];
    let _306: &[&str; 1];
    let _307: [&str; 1];
    let mut _308: &[core::fmt::rt::Argument<'_>];
    let mut _309: &[core::fmt::rt::Argument<'_>; 1];
    let _310: &[core::fmt::rt::Argument<'_>; 1];
    let _311: [core::fmt::rt::Argument<'_>; 1];
    let mut _312: core::fmt::rt::Argument<'_>;
    let mut _313: &i32;
    let _314: &i32;
    let mut _315: std::option::Option<i64>;
    let mut _316: i64;
    let mut _317: i32;
    let _318: ();
    let mut _319: &str;
    let _320: &str;
    let mut _321: &std::string::String;
    let _322: &std::string::String;
    let _323: std::string::String;
    let mut _325: std::fmt::Arguments<'_>;
    let mut _326: &[&str];
    let mut _327: &[&str; 1];
    let _328: &[&str; 1];
    let _329: [&str; 1];
    let mut _330: &[core::fmt::rt::Argument<'_>];
    let mut _331: &[core::fmt::rt::Argument<'_>; 1];
    let _332: &[core::fmt::rt::Argument<'_>; 1];
    let _333: [core::fmt::rt::Argument<'_>; 1];
    let mut _334: core::fmt::rt::Argument<'_>;
    let mut _335: &i64;
    let _336: &i64;
    let mut _337: std::option::Option<i64>;
    let mut _338: i64;
    let _339: ();
    let mut _340: &str;
    let _341: &str;
    let mut _342: &std::string::String;
    let _343: &std::string::String;
    let _344: std::string::String;
    let mut _346: std::fmt::Arguments<'_>;
    let mut _347: &[&str];
    let mut _348: &[&str; 1];
    let _349: &[&str; 1];
    let _350: [&str; 1];
    let mut _351: &[core::fmt::rt::Argument<'_>];
    let mut _352: &[core::fmt::rt::Argument<'_>; 1];
    let _353: &[core::fmt::rt::Argument<'_>; 1];
    let _354: [core::fmt::rt::Argument<'_>; 1];
    let mut _355: core::fmt::rt::Argument<'_>;
    let mut _356: &u64;
    let _357: &u64;
    let mut _358: std::option::Option<i64>;
    let mut _359: i64;
    let mut _360: u64;
    let _361: ();
    let mut _362: isize;
    let mut _365: bool;
    let mut _366: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _367: std::result::Result<i64, error::ErrorCode>;
    let mut _368: i64;
    let mut _369: i64;
    let mut _370: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _371: std::result::Result<i64, error::ErrorCode>;
    let mut _372: i64;
    let mut _373: i64;
    let mut _374: isize;
    let mut _376: !;
    let mut _377: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _379: isize;
    let mut _381: !;
    let mut _382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _385: bool;
    let mut _386: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _387: std::result::Result<i64, error::ErrorCode>;
    let mut _388: i64;
    let mut _389: i64;
    let mut _390: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _391: std::result::Result<i64, error::ErrorCode>;
    let mut _392: i64;
    let mut _393: i64;
    let mut _394: isize;
    let mut _396: !;
    let mut _397: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _399: isize;
    let mut _401: !;
    let mut _402: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _405: bool;
    let mut _406: &controller::position::PositionDirection;
    let mut _407: &controller::position::PositionDirection;
    let _408: controller::position::PositionDirection;
    let mut _409: i64;
    let mut _410: i64;
    let mut _412: bool;
    let mut _413: &controller::position::PositionDirection;
    let mut _414: &controller::position::PositionDirection;
    let _415: controller::position::PositionDirection;
    let mut _416: i64;
    let mut _417: i64;
    let mut _418: bool;
    let mut _419: bool;
    let mut _420: bool;
    let _421: ();
    let mut _422: &str;
    let _423: &str;
    let mut _424: &std::string::String;
    let _425: &std::string::String;
    let _426: std::string::String;
    let mut _428: std::fmt::Arguments<'_>;
    let mut _429: &[&str];
    let mut _430: &[&str; 1];
    let _431: &[&str; 1];
    let _432: [&str; 1];
    let mut _433: &[core::fmt::rt::Argument<'_>];
    let mut _434: &[core::fmt::rt::Argument<'_>; 1];
    let _435: &[core::fmt::rt::Argument<'_>; 1];
    let _436: [core::fmt::rt::Argument<'_>; 1];
    let mut _437: core::fmt::rt::Argument<'_>;
    let mut _438: &i64;
    let _439: &i64;
    let mut _440: std::option::Option<i64>;
    let mut _441: i64;
    let _442: ();
    let mut _443: &str;
    let _444: &str;
    let mut _445: &std::string::String;
    let _446: &std::string::String;
    let _447: std::string::String;
    let mut _449: std::fmt::Arguments<'_>;
    let mut _450: &[&str];
    let mut _451: &[&str; 1];
    let _452: &[&str; 1];
    let _453: [&str; 1];
    let mut _454: &[core::fmt::rt::Argument<'_>];
    let mut _455: &[core::fmt::rt::Argument<'_>; 1];
    let _456: &[core::fmt::rt::Argument<'_>; 1];
    let _457: [core::fmt::rt::Argument<'_>; 1];
    let mut _458: core::fmt::rt::Argument<'_>;
    let mut _459: &i64;
    let _460: &i64;
    let mut _461: std::option::Option<i64>;
    let mut _462: i64;
    let mut _463: bool;
    let _464: ();
    let mut _465: &str;
    let _466: &str;
    let mut _467: &std::string::String;
    let _468: &std::string::String;
    let _469: std::string::String;
    let mut _471: std::fmt::Arguments<'_>;
    let mut _472: &[&str];
    let mut _473: &[&str; 1];
    let _474: &[&str; 1];
    let _475: [&str; 1];
    let mut _476: &[core::fmt::rt::Argument<'_>];
    let mut _477: &[core::fmt::rt::Argument<'_>; 1];
    let _478: &[core::fmt::rt::Argument<'_>; 1];
    let _479: [core::fmt::rt::Argument<'_>; 1];
    let mut _480: core::fmt::rt::Argument<'_>;
    let mut _481: &i64;
    let _482: &i64;
    let mut _483: std::option::Option<i64>;
    let mut _484: i64;
    let _485: ();
    let mut _486: &str;
    let _487: &str;
    let mut _488: &std::string::String;
    let _489: &std::string::String;
    let _490: std::string::String;
    let mut _492: std::fmt::Arguments<'_>;
    let mut _493: &[&str];
    let mut _494: &[&str; 1];
    let _495: &[&str; 1];
    let _496: [&str; 1];
    let mut _497: &[core::fmt::rt::Argument<'_>];
    let mut _498: &[core::fmt::rt::Argument<'_>; 1];
    let _499: &[core::fmt::rt::Argument<'_>; 1];
    let _500: [core::fmt::rt::Argument<'_>; 1];
    let mut _501: core::fmt::rt::Argument<'_>;
    let mut _502: &i64;
    let _503: &i64;
    let mut _504: std::option::Option<i64>;
    let mut _505: i64;
    let mut _506: bool;
    let mut _507: &std::option::Option<i64>;
    let mut _508: bool;
    let _509: ();
    let mut _510: &str;
    let _511: &str;
    let mut _512: &std::string::String;
    let _513: &std::string::String;
    let _514: std::string::String;
    let mut _516: std::fmt::Arguments<'_>;
    let mut _517: &[&str];
    let mut _518: &[&str; 1];
    let _519: &[&str; 1];
    let _520: [&str; 1];
    let mut _521: &[core::fmt::rt::Argument<'_>];
    let mut _522: &[core::fmt::rt::Argument<'_>; 1];
    let _523: &[core::fmt::rt::Argument<'_>; 1];
    let _524: [core::fmt::rt::Argument<'_>; 1];
    let mut _525: core::fmt::rt::Argument<'_>;
    let mut _526: &i32;
    let _527: &i32;
    let mut _528: std::option::Option<i64>;
    let mut _529: i64;
    let mut _530: i32;
    let _531: ();
    let mut _532: &str;
    let _533: &str;
    let mut _534: &std::string::String;
    let _535: &std::string::String;
    let _536: std::string::String;
    let mut _538: std::fmt::Arguments<'_>;
    let mut _539: &[&str];
    let mut _540: &[&str; 1];
    let _541: &[&str; 1];
    let _542: [&str; 1];
    let mut _543: &[core::fmt::rt::Argument<'_>];
    let mut _544: &[core::fmt::rt::Argument<'_>; 1];
    let _545: &[core::fmt::rt::Argument<'_>; 1];
    let _546: [core::fmt::rt::Argument<'_>; 1];
    let mut _547: core::fmt::rt::Argument<'_>;
    let mut _548: &u64;
    let _549: &u64;
    let mut _550: std::option::Option<i64>;
    let mut _551: i64;
    let mut _552: u64;
    let mut _554: bool;
    let mut _555: i32;
    let mut _556: u64;
    let _557: ();
    let mut _558: bool;
    let mut _559: &controller::position::PositionDirection;
    let mut _560: &controller::position::PositionDirection;
    let _561: controller::position::PositionDirection;
    let _562: ();
    let mut _563: isize;
    let mut _565: std::option::Option<i64>;
    let mut _566: i64;
    let mut _567: i64;
    let mut _568: i64;
    let mut _569: isize;
    let mut _571: std::option::Option<i64>;
    let mut _572: i64;
    let mut _573: i64;
    let mut _574: i64;
    let _575: ();
    let mut _576: isize;
    let mut _578: std::option::Option<i64>;
    let mut _579: i64;
    let mut _580: i64;
    let mut _581: i64;
    let mut _582: isize;
    let mut _584: std::option::Option<i64>;
    let mut _585: i64;
    let mut _586: i64;
    let mut _587: i64;
    let mut _590: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _591: std::result::Result<u8, error::ErrorCode>;
    let mut _592: u64;
    let mut _593: i64;
    let mut _594: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _595: std::result::Result<i64, error::ErrorCode>;
    let mut _596: i64;
    let mut _597: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _598: std::result::Result<i64, error::ErrorCode>;
    let mut _599: std::option::Option<i64>;
    let mut _600: isize;
    let mut _602: !;
    let mut _603: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _605: i64;
    let mut _606: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _607: std::result::Result<i64, error::ErrorCode>;
    let mut _608: std::option::Option<i64>;
    let mut _609: isize;
    let mut _611: !;
    let mut _612: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _614: isize;
    let mut _616: !;
    let mut _617: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _619: u64;
    let mut _620: i64;
    let mut _621: state::perp_market::ContractTier;
    let mut _622: isize;
    let mut _624: !;
    let mut _625: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _627: ();
    let mut _628: bool;
    let mut _629: u8;
    let mut _630: u8;
    let mut _631: std::option::Option<u8>;
    let mut _632: u8;
    let mut _633: bool;
    let mut _634: std::option::Option<u8>;
    let mut _635: u8;
    let mut _636: u8;
    let mut _637: std::option::Option<u8>;
    let mut _638: u8;
    let _639: ();
    let mut _640: &str;
    let _641: &str;
    let mut _642: &std::string::String;
    let _643: &std::string::String;
    let _644: std::string::String;
    let mut _646: std::fmt::Arguments<'_>;
    let mut _647: &[&str];
    let mut _648: &[&str; 1];
    let _649: &[&str; 1];
    let _650: [&str; 1];
    let mut _651: &[core::fmt::rt::Argument<'_>];
    let mut _652: &[core::fmt::rt::Argument<'_>; 1];
    let _653: &[core::fmt::rt::Argument<'_>; 1];
    let _654: [core::fmt::rt::Argument<'_>; 1];
    let mut _655: core::fmt::rt::Argument<'_>;
    let mut _656: &u8;
    let _657: &u8;
    let _658: u8;
    let mut _659: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _660: std::result::Result<u8, error::ErrorCode>;
    let mut _661: std::option::Option<u8>;
    let mut _662: isize;
    let mut _664: !;
    let mut _665: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _667: bool;
    let mut _668: bool;
    let mut _669: &std::option::Option<u8>;
    let mut _670: &std::option::Option<u8>;
    let mut _671: bool;
    let mut _672: &std::option::Option<i64>;
    let mut _673: &std::option::Option<i64>;
    let mut _674: &std::option::Option<i64>;
    let mut _675: &std::option::Option<i64>;
    let mut _694: &state::order_params::PostOnlyParam;
    scope 1 {
        debug auction_duration => _11;
        let _12: std::option::Option<i64>;
        scope 2 {
            debug auction_start_price => _12;
            let _13: std::option::Option<i64>;
            scope 3 {
                debug auction_end_price => _13;
                let _14: i32;
                scope 4 {
                    debug oracle_price_offset => _14;
                    let _16: bool;
                    scope 5 {
                        debug is_oracle_offset_oracle => _16;
                        let _23: i64;
                        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _32: i64;
                        scope 6 {
                            debug auction_start_price_offset => _23;
                            let mut _33: i64;
                            let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _42: i64;
                            scope 11 {
                                debug new_auction_start_price => _33;
                                let _53: i64;
                                let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _61: i64;
                                let _207: i64;
                                let _212: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _215: i64;
                                let _363: i64;
                                let _470: std::string::String;
                                let _491: std::string::String;
                                let _515: std::string::String;
                                let _537: std::string::String;
                                let _553: i64;
                                let mut _686: &[&str; 1];
                                let mut _687: &[&str; 1];
                                let mut _688: &[&str; 1];
                                let mut _689: &[&str; 1];
                                scope 16 {
                                    debug ask_premium => _53;
                                    let _62: u64;
                                    let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _74: i64;
                                    let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _79: u64;
                                    scope 21 {
                                        debug est_ask => _62;
                                        let _80: bool;
                                        let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _90: i64;
                                        let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _101: i64;
                                        scope 30 {
                                            debug crosses => _80;
                                            let mut _106: i64;
                                            scope 39 {
                                                debug new_auction_start_price => _106;
                                                let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _120: i64;
                                                let _127: std::string::String;
                                                let _148: std::string::String;
                                                let _170: std::string::String;
                                                let _191: std::string::String;
                                                let mut _682: &[&str; 1];
                                                let mut _683: &[&str; 1];
                                                let mut _684: &[&str; 1];
                                                let mut _685: &[&str; 1];
                                                scope 40 {
                                                    debug residual => _117;
                                                    scope 41 {
                                                    }
                                                }
                                                scope 42 {
                                                    debug val => _120;
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug res => _127;
                                                }
                                                scope 45 {
                                                    debug res => _148;
                                                }
                                                scope 46 {
                                                    debug res => _170;
                                                }
                                                scope 47 {
                                                    debug res => _191;
                                                }
                                            }
                                        }
                                        scope 31 {
                                            debug residual => _87;
                                            scope 32 {
                                            }
                                        }
                                        scope 33 {
                                            debug val => _90;
                                            scope 34 {
                                            }
                                        }
                                        scope 35 {
                                            debug residual => _98;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _101;
                                            scope 38 {
                                            }
                                        }
                                    }
                                    scope 22 {
                                        debug residual => _71;
                                        scope 23 {
                                        }
                                    }
                                    scope 24 {
                                        debug val => _74;
                                        scope 25 {
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _76;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _79;
                                        scope 29 {
                                        }
                                    }
                                }
                                scope 17 {
                                    debug residual => _58;
                                    scope 18 {
                                    }
                                }
                                scope 19 {
                                    debug val => _61;
                                    scope 20 {
                                    }
                                }
                                scope 48 {
                                    debug bid_discount => _207;
                                    let _216: u64;
                                    let _225: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _228: i64;
                                    let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _233: u64;
                                    scope 53 {
                                        debug est_bid => _216;
                                        let _234: bool;
                                        let _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _244: i64;
                                        let _252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _255: i64;
                                        scope 62 {
                                            debug crosses => _234;
                                            let mut _260: i64;
                                            scope 71 {
                                                debug new_auction_start_price => _260;
                                                let _271: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _274: i64;
                                                let _281: std::string::String;
                                                let _302: std::string::String;
                                                let _324: std::string::String;
                                                let _345: std::string::String;
                                                let mut _678: &[&str; 1];
                                                let mut _679: &[&str; 1];
                                                let mut _680: &[&str; 1];
                                                let mut _681: &[&str; 1];
                                                scope 72 {
                                                    debug residual => _271;
                                                    scope 73 {
                                                    }
                                                }
                                                scope 74 {
                                                    debug val => _274;
                                                    scope 75 {
                                                    }
                                                }
                                                scope 76 {
                                                    debug res => _281;
                                                }
                                                scope 77 {
                                                    debug res => _302;
                                                }
                                                scope 78 {
                                                    debug res => _324;
                                                }
                                                scope 79 {
                                                    debug res => _345;
                                                }
                                            }
                                        }
                                        scope 63 {
                                            debug residual => _241;
                                            scope 64 {
                                            }
                                        }
                                        scope 65 {
                                            debug val => _244;
                                            scope 66 {
                                            }
                                        }
                                        scope 67 {
                                            debug residual => _252;
                                            scope 68 {
                                            }
                                        }
                                        scope 69 {
                                            debug val => _255;
                                            scope 70 {
                                            }
                                        }
                                    }
                                    scope 54 {
                                        debug residual => _225;
                                        scope 55 {
                                        }
                                    }
                                    scope 56 {
                                        debug val => _228;
                                        scope 57 {
                                        }
                                    }
                                    scope 58 {
                                        debug residual => _230;
                                        scope 59 {
                                        }
                                    }
                                    scope 60 {
                                        debug val => _233;
                                        scope 61 {
                                        }
                                    }
                                }
                                scope 49 {
                                    debug residual => _212;
                                    scope 50 {
                                    }
                                }
                                scope 51 {
                                    debug val => _215;
                                    scope 52 {
                                    }
                                }
                                scope 80 {
                                    debug auction_start_price => _363;
                                    let _364: i64;
                                    let _375: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _378: i64;
                                    let _380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _383: i64;
                                    scope 81 {
                                        debug threshold_long => _364;
                                        let _384: i64;
                                        let _395: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _398: i64;
                                        let _400: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _403: i64;
                                        scope 90 {
                                            debug threshold_short => _384;
                                            let _404: bool;
                                            let mut _693: &controller::position::PositionDirection;
                                            scope 99 {
                                                debug improves_long => _404;
                                                let _411: bool;
                                                let mut _692: &controller::position::PositionDirection;
                                                scope 100 {
                                                    debug improves_short => _411;
                                                    let _427: std::string::String;
                                                    let _448: std::string::String;
                                                    let mut _690: &[&str; 1];
                                                    let mut _691: &[&str; 1];
                                                    scope 101 {
                                                        debug res => _427;
                                                    }
                                                    scope 102 {
                                                        debug res => _448;
                                                    }
                                                }
                                            }
                                        }
                                        scope 91 {
                                            debug residual => _395;
                                            scope 92 {
                                            }
                                        }
                                        scope 93 {
                                            debug val => _398;
                                            scope 94 {
                                            }
                                        }
                                        scope 95 {
                                            debug residual => _400;
                                            scope 96 {
                                            }
                                        }
                                        scope 97 {
                                            debug val => _403;
                                            scope 98 {
                                            }
                                        }
                                    }
                                    scope 82 {
                                        debug residual => _375;
                                        scope 83 {
                                        }
                                    }
                                    scope 84 {
                                        debug val => _378;
                                        scope 85 {
                                        }
                                    }
                                    scope 86 {
                                        debug residual => _380;
                                        scope 87 {
                                        }
                                    }
                                    scope 88 {
                                        debug val => _383;
                                        scope 89 {
                                        }
                                    }
                                }
                                scope 103 {
                                    debug res => _470;
                                }
                                scope 104 {
                                    debug res => _491;
                                }
                                scope 105 {
                                    debug res => _515;
                                }
                                scope 106 {
                                    debug res => _537;
                                }
                                scope 107 {
                                    debug worst_price => _553;
                                    let _588: std::option::Option<u8>;
                                    let mut _677: &controller::position::PositionDirection;
                                    scope 108 {
                                        debug auction_start_price => _564;
                                        let _564: i64;
                                    }
                                    scope 109 {
                                        debug auction_end_price => _570;
                                        let _570: i64;
                                    }
                                    scope 110 {
                                        debug auction_start_price => _577;
                                        let _577: i64;
                                    }
                                    scope 111 {
                                        debug auction_end_price => _583;
                                        let _583: i64;
                                    }
                                    scope 112 {
                                        debug auction_duration_before => _588;
                                        let _589: u8;
                                        let _601: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _604: i64;
                                        let _610: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _613: i64;
                                        let _615: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _618: i64;
                                        let _623: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _626: u8;
                                        scope 113 {
                                            debug new_auction_duration => _589;
                                            let _645: std::string::String;
                                            let _663: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _666: u8;
                                            let mut _676: &[&str; 1];
                                            scope 130 {
                                                debug res => _645;
                                            }
                                            scope 131 {
                                                debug residual => _663;
                                                scope 132 {
                                                }
                                            }
                                            scope 133 {
                                                debug val => _666;
                                                scope 134 {
                                                }
                                            }
                                        }
                                        scope 114 {
                                            debug residual => _601;
                                            scope 115 {
                                            }
                                        }
                                        scope 116 {
                                            debug val => _604;
                                            scope 117 {
                                            }
                                        }
                                        scope 118 {
                                            debug residual => _610;
                                            scope 119 {
                                            }
                                        }
                                        scope 120 {
                                            debug val => _613;
                                            scope 121 {
                                            }
                                        }
                                        scope 122 {
                                            debug residual => _615;
                                            scope 123 {
                                            }
                                        }
                                        scope 124 {
                                            debug val => _618;
                                            scope 125 {
                                            }
                                        }
                                        scope 126 {
                                            debug residual => _623;
                                            scope 127 {
                                            }
                                        }
                                        scope 128 {
                                            debug val => _626;
                                            scope 129 {
                                            }
                                        }
                                    }
                                }
                            }
                            scope 12 {
                                debug residual => _39;
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug val => _42;
                                scope 15 {
                                }
                            }
                        }
                        scope 7 {
                            debug residual => _29;
                            scope 8 {
                            }
                        }
                        scope 9 {
                            debug val => _32;
                            scope 10 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).8: state::order_params::PostOnlyParam);
        StorageLive(_8);
        _694 = const _;
        _8 = &(*_694);
        _6 = <PostOnlyParam as PartialEq>::ne(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb343;
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_11);
        _11 = ((*_1).14: std::option::Option<u8>);
        StorageLive(_12);
        _12 = ((*_1).15: std::option::Option<i64>);
        StorageLive(_13);
        _13 = ((*_1).16: std::option::Option<i64>);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).13: std::option::Option<i32>);
        _14 = Option::<i32>::unwrap_or(move _15, const 0_i32) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _14;
        _16 = Ne(move _17, const 0_i32);
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _16;
        switchInt(move _19) -> [0: bb5, otherwise: bb8];
    }

    bb5: {
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_1).5: u64);
        _20 = Eq(move _21, const 0_u64);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_21);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb342;
    }

    bb7: {
        StorageDead(_21);
        goto -> bb8;
    }

    bb8: {
        _18 = const ();
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_2);
        StorageLive(_27);
        _27 = ((*_1).2: controller::position::PositionDirection);
        _25 = order_params::OrderParams::get_perp_baseline_start_price_offset(move _26, move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        _28 = discriminant(_24);
        switchInt(move _28) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_32);
        _32 = ((_24 as Continue).0: i64);
        _23 = _32;
        StorageDead(_32);
        StorageDead(_24);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _3;
        StorageLive(_37);
        _37 = _23;
        _35 = <i64 as SafeMath>::safe_add(move _36, move _37) -> [return: bb15, unwind continue];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_29);
        _29 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        goto -> bb341;
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb17, 1: bb18, otherwise: bb12];
    }

    bb17: {
        StorageLive(_42);
        _42 = ((_34 as Continue).0: i64);
        _33 = _42;
        StorageDead(_42);
        StorageDead(_34);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_2);
        _44 = PerpMarket::is_prediction_market(move _45) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_39);
        _39 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        goto -> bb340;
    }

    bb20: {
        switchInt(move _44) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _33;
        _46 = <i64 as Ord>::min(move _47, const _) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_47);
        _33 = move _46;
        StorageDead(_46);
        _43 = const ();
        goto -> bb24;
    }

    bb23: {
        StorageDead(_45);
        _43 = const ();
        goto -> bb24;
    }

    bb24: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = ((*_1).14: std::option::Option<u8>);
        _50 = Option::<u8>::unwrap_or(move _51, const 0_u8) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_51);
        _49 = Eq(move _50, const 0_u8);
        switchInt(move _49) -> [0: bb155, otherwise: bb26];
    }

    bb26: {
        StorageDead(_50);
        _52 = discriminant(((*_1).2: controller::position::PositionDirection));
        switchInt(move _52) -> [0: bb28, 1: bb27, otherwise: bb12];
    }

    bb27: {
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &((*_2).1: state::perp_market::AMM);
        _209 = AMM::last_bid_discount(move _210) -> [return: bb92, unwind continue];
    }

    bb28: {
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &((*_2).1: state::perp_market::AMM);
        _55 = AMM::last_ask_premium(move _56) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_56);
        _54 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _55) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb31, 1: bb32, otherwise: bb12];
    }

    bb31: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: i64);
        _53 = _61;
        StorageDead(_61);
        StorageDead(_54);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _3;
        StorageLive(_69);
        _69 = _53;
        _67 = <i64 as SafeMath>::safe_add(move _68, move _69) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_54);
        goto -> bb338;
    }

    bb34: {
        StorageDead(_69);
        StorageDead(_68);
        _66 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _67) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_67);
        _70 = discriminant(_66);
        switchInt(move _70) -> [0: bb36, 1: bb37, otherwise: bb12];
    }

    bb36: {
        StorageLive(_74);
        _74 = ((_66 as Continue).0: i64);
        _65 = _74;
        StorageDead(_74);
        _64 = <i64 as Cast>::cast::<u64>(move _65) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_71);
        _71 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb336;
    }

    bb39: {
        StorageDead(_65);
        _63 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _64) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_64);
        _75 = discriminant(_63);
        switchInt(move _75) -> [0: bb41, 1: bb42, otherwise: bb12];
    }

    bb41: {
        StorageLive(_79);
        _79 = ((_63 as Continue).0: u64);
        _62 = _79;
        StorageDead(_79);
        StorageDead(_66);
        StorageDead(_63);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _16;
        switchInt(move _81) -> [0: bb45, otherwise: bb44];
    }

    bb42: {
        StorageLive(_76);
        _76 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_78);
        StorageDead(_76);
        goto -> bb336;
    }

    bb44: {
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _14;
        _84 = <i32 as Cast>::cast::<i64>(move _85) -> [return: bb46, unwind continue];
    }

    bb45: {
        StorageLive(_102);
        _102 = ((*_1).5: u64);
        StorageLive(_103);
        _103 = _62;
        _80 = Gt(move _102, move _103);
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb56;
    }

    bb46: {
        StorageDead(_85);
        _83 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _84) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_84);
        _86 = discriminant(_83);
        switchInt(move _86) -> [0: bb48, 1: bb49, otherwise: bb12];
    }

    bb48: {
        StorageLive(_90);
        _90 = ((_83 as Continue).0: i64);
        _82 = _90;
        StorageDead(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _62;
        _94 = move _95 as i64 (IntToInt);
        StorageDead(_95);
        StorageLive(_96);
        _96 = _3;
        _93 = <i64 as SafeMath>::safe_sub(move _94, move _96) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_87);
        _87 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_82);
        goto -> bb334;
    }

    bb51: {
        StorageDead(_96);
        StorageDead(_94);
        _92 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _93) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_93);
        _97 = discriminant(_92);
        switchInt(move _97) -> [0: bb53, 1: bb54, otherwise: bb12];
    }

    bb53: {
        StorageLive(_101);
        _101 = ((_92 as Continue).0: i64);
        _91 = _101;
        StorageDead(_101);
        _80 = Gt(move _82, move _91);
        StorageDead(_91);
        StorageDead(_82);
        StorageDead(_92);
        StorageDead(_83);
        goto -> bb56;
    }

    bb54: {
        StorageLive(_98);
        _98 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_91);
        StorageDead(_82);
        StorageDead(_92);
        goto -> bb334;
    }

    bb56: {
        StorageDead(_81);
        StorageLive(_104);
        _104 = _80;
        switchInt(move _104) -> [0: bb57, otherwise: bb58];
    }

    bb57: {
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        goto -> bb333;
    }

    bb58: {
        StorageLive(_106);
        StorageLive(_107);
        _107 = _33;
        StorageLive(_108);
        StorageLive(_109);
        _109 = _62;
        _108 = move _109 as i64 (IntToInt);
        StorageDead(_109);
        _106 = <i64 as Ord>::min(move _107, move _108) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_110);
        _110 = _16;
        switchInt(move _110) -> [0: bb78, otherwise: bb60];
    }

    bb60: {
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _106;
        StorageLive(_115);
        _115 = _3;
        _113 = <i64 as SafeMath>::safe_sub(move _114, move _115) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_115);
        StorageDead(_114);
        _112 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _113) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_113);
        _116 = discriminant(_112);
        switchInt(move _116) -> [0: bb63, 1: bb64, otherwise: bb12];
    }

    bb63: {
        StorageLive(_120);
        _120 = ((_112 as Continue).0: i64);
        _111 = _120;
        StorageDead(_120);
        _106 = move _111;
        StorageDead(_111);
        StorageDead(_112);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _683 = const _;
        _131 = &(*_683);
        _130 = &(*_131);
        _129 = move _130 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_130);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_106;
        _138 = &(*_139);
        _137 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _138) -> [return: bb66, unwind continue];
    }

    bb64: {
        StorageLive(_117);
        _117 = ((_112 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_111);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_106);
        goto -> bb333;
    }

    bb66: {
        StorageDead(_138);
        _136 = [move _137];
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = move _134 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_134);
        _128 = Arguments::<'_>::new_v1(move _129, move _133) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_133);
        StorageDead(_129);
        _127 = format(move _128) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_128);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_131);
        _126 = move _127;
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = <String as Deref>::deref(move _124) -> [return: bb69, unwind: bb358];
    }

    bb69: {
        _122 = &(*_123);
        StorageDead(_124);
        _121 = solana_program::log::sol_log(move _122) -> [return: bb70, unwind: bb358];
    }

    bb70: {
        StorageDead(_122);
        drop(_126) -> [return: bb71, unwind: bb359];
    }

    bb71: {
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageLive(_140);
        StorageLive(_141);
        _141 = _106;
        _140 = Option::<i64>::Some(move _141);
        StorageDead(_141);
        ((*_1).15: std::option::Option<i64>) = move _140;
        StorageDead(_140);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _682 = const _;
        _152 = &(*_682);
        _151 = &(*_152);
        _150 = move _151 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_151);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_14;
        _159 = &(*_160);
        _158 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _159) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_159);
        _157 = [move _158];
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = move _155 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_155);
        _149 = Arguments::<'_>::new_v1(move _150, move _154) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_154);
        StorageDead(_150);
        _148 = format(move _149) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_149);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_152);
        _147 = move _148;
        StorageDead(_148);
        _146 = &_147;
        _145 = &(*_146);
        _144 = <String as Deref>::deref(move _145) -> [return: bb75, unwind: bb357];
    }

    bb75: {
        _143 = &(*_144);
        StorageDead(_145);
        _142 = solana_program::log::sol_log(move _143) -> [return: bb76, unwind: bb357];
    }

    bb76: {
        StorageDead(_143);
        drop(_147) -> [return: bb77, unwind: bb359];
    }

    bb77: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _14;
        _162 = move _163 as i64 (IntToInt);
        StorageDead(_163);
        _161 = Option::<i64>::Some(move _162);
        StorageDead(_162);
        ((*_1).16: std::option::Option<i64>) = move _161;
        StorageDead(_161);
        _48 = const ();
        goto -> bb91;
    }

    bb78: {
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _685 = const _;
        _174 = &(*_685);
        _173 = &(*_174);
        _172 = move _173 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_173);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_106;
        _181 = &(*_182);
        _180 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _181) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_181);
        _179 = [move _180];
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        _176 = move _177 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_177);
        _171 = Arguments::<'_>::new_v1(move _172, move _176) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_176);
        StorageDead(_172);
        _170 = format(move _171) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_171);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_174);
        _169 = move _170;
        StorageDead(_170);
        _168 = &_169;
        _167 = &(*_168);
        _166 = <String as Deref>::deref(move _167) -> [return: bb82, unwind: bb356];
    }

    bb82: {
        _165 = &(*_166);
        StorageDead(_167);
        _164 = solana_program::log::sol_log(move _165) -> [return: bb83, unwind: bb356];
    }

    bb83: {
        StorageDead(_165);
        drop(_169) -> [return: bb84, unwind: bb359];
    }

    bb84: {
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageLive(_183);
        StorageLive(_184);
        _184 = _106;
        _183 = Option::<i64>::Some(move _184);
        StorageDead(_184);
        ((*_1).15: std::option::Option<i64>) = move _183;
        StorageDead(_183);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _684 = const _;
        _195 = &(*_684);
        _194 = &(*_195);
        _193 = move _194 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_194);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = &((*_1).5: u64);
        _202 = &(*_203);
        _201 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _202) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_202);
        _200 = [move _201];
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = move _198 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_198);
        _192 = Arguments::<'_>::new_v1(move _193, move _197) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_197);
        StorageDead(_193);
        _191 = format(move _192) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_192);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_195);
        _190 = move _191;
        StorageDead(_191);
        _189 = &_190;
        _188 = &(*_189);
        _187 = <String as Deref>::deref(move _188) -> [return: bb88, unwind: bb355];
    }

    bb88: {
        _186 = &(*_187);
        StorageDead(_188);
        _185 = solana_program::log::sol_log(move _186) -> [return: bb89, unwind: bb355];
    }

    bb89: {
        StorageDead(_186);
        drop(_190) -> [return: bb90, unwind: bb359];
    }

    bb90: {
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_185);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = ((*_1).5: u64);
        _205 = move _206 as i64 (IntToInt);
        StorageDead(_206);
        _204 = Option::<i64>::Some(move _205);
        StorageDead(_205);
        ((*_1).16: std::option::Option<i64>) = move _204;
        StorageDead(_204);
        _48 = const ();
        goto -> bb91;
    }

    bb91: {
        StorageDead(_110);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_80);
        StorageDead(_62);
        StorageDead(_53);
        goto -> bb248;
    }

    bb92: {
        StorageDead(_210);
        _208 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _209) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_209);
        _211 = discriminant(_208);
        switchInt(move _211) -> [0: bb94, 1: bb95, otherwise: bb12];
    }

    bb94: {
        StorageLive(_215);
        _215 = ((_208 as Continue).0: i64);
        _207 = _215;
        StorageDead(_215);
        StorageDead(_208);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = _3;
        StorageLive(_223);
        _223 = _207;
        _221 = <i64 as SafeMath>::safe_sub(move _222, move _223) -> [return: bb97, unwind continue];
    }

    bb95: {
        StorageLive(_212);
        _212 = ((_208 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_214);
        _214 = _212;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _214) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_208);
        goto -> bb332;
    }

    bb97: {
        StorageDead(_223);
        StorageDead(_222);
        _220 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _221) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_221);
        _224 = discriminant(_220);
        switchInt(move _224) -> [0: bb99, 1: bb100, otherwise: bb12];
    }

    bb99: {
        StorageLive(_228);
        _228 = ((_220 as Continue).0: i64);
        _219 = _228;
        StorageDead(_228);
        _218 = <i64 as Cast>::cast::<u64>(move _219) -> [return: bb102, unwind continue];
    }

    bb100: {
        StorageLive(_225);
        _225 = ((_220 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_227);
        _227 = _225;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _227) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_219);
        StorageDead(_218);
        goto -> bb330;
    }

    bb102: {
        StorageDead(_219);
        _217 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _218) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_218);
        _229 = discriminant(_217);
        switchInt(move _229) -> [0: bb104, 1: bb105, otherwise: bb12];
    }

    bb104: {
        StorageLive(_233);
        _233 = ((_217 as Continue).0: u64);
        _216 = _233;
        StorageDead(_233);
        StorageDead(_220);
        StorageDead(_217);
        StorageLive(_234);
        StorageLive(_235);
        _235 = _16;
        switchInt(move _235) -> [0: bb108, otherwise: bb107];
    }

    bb105: {
        StorageLive(_230);
        _230 = ((_217 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_232);
        StorageDead(_230);
        goto -> bb330;
    }

    bb107: {
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = _14;
        _238 = <i32 as Cast>::cast::<i64>(move _239) -> [return: bb109, unwind continue];
    }

    bb108: {
        StorageLive(_256);
        _256 = ((*_1).5: u64);
        StorageLive(_257);
        _257 = _216;
        _234 = Lt(move _256, move _257);
        StorageDead(_257);
        StorageDead(_256);
        goto -> bb119;
    }

    bb109: {
        StorageDead(_239);
        _237 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _238) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_238);
        _240 = discriminant(_237);
        switchInt(move _240) -> [0: bb111, 1: bb112, otherwise: bb12];
    }

    bb111: {
        StorageLive(_244);
        _244 = ((_237 as Continue).0: i64);
        _236 = _244;
        StorageDead(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = _216;
        _248 = move _249 as i64 (IntToInt);
        StorageDead(_249);
        StorageLive(_250);
        _250 = _3;
        _247 = <i64 as SafeMath>::safe_sub(move _248, move _250) -> [return: bb114, unwind continue];
    }

    bb112: {
        StorageLive(_241);
        _241 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_243);
        _243 = _241;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _243) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_236);
        goto -> bb328;
    }

    bb114: {
        StorageDead(_250);
        StorageDead(_248);
        _246 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _247) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_247);
        _251 = discriminant(_246);
        switchInt(move _251) -> [0: bb116, 1: bb117, otherwise: bb12];
    }

    bb116: {
        StorageLive(_255);
        _255 = ((_246 as Continue).0: i64);
        _245 = _255;
        StorageDead(_255);
        _234 = Lt(move _236, move _245);
        StorageDead(_245);
        StorageDead(_236);
        StorageDead(_246);
        StorageDead(_237);
        goto -> bb119;
    }

    bb117: {
        StorageLive(_252);
        _252 = ((_246 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_254);
        _254 = _252;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _254) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_254);
        StorageDead(_252);
        StorageDead(_245);
        StorageDead(_236);
        StorageDead(_246);
        goto -> bb328;
    }

    bb119: {
        StorageDead(_235);
        StorageLive(_258);
        _258 = _234;
        switchInt(move _258) -> [0: bb120, otherwise: bb121];
    }

    bb120: {
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        goto -> bb327;
    }

    bb121: {
        StorageLive(_260);
        StorageLive(_261);
        _261 = _33;
        StorageLive(_262);
        StorageLive(_263);
        _263 = _216;
        _262 = move _263 as i64 (IntToInt);
        StorageDead(_263);
        _260 = <i64 as Ord>::max(move _261, move _262) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_264);
        _264 = _16;
        switchInt(move _264) -> [0: bb141, otherwise: bb123];
    }

    bb123: {
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = _260;
        StorageLive(_269);
        _269 = _3;
        _267 = <i64 as SafeMath>::safe_sub(move _268, move _269) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_269);
        StorageDead(_268);
        _266 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _267) -> [return: bb125, unwind continue];
    }

    bb125: {
        StorageDead(_267);
        _270 = discriminant(_266);
        switchInt(move _270) -> [0: bb126, 1: bb127, otherwise: bb12];
    }

    bb126: {
        StorageLive(_274);
        _274 = ((_266 as Continue).0: i64);
        _265 = _274;
        StorageDead(_274);
        _260 = move _265;
        StorageDead(_265);
        StorageDead(_266);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _679 = const _;
        _285 = &(*_679);
        _284 = &(*_285);
        _283 = move _284 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_284);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_260;
        _292 = &(*_293);
        _291 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _292) -> [return: bb129, unwind continue];
    }

    bb127: {
        StorageLive(_271);
        _271 = ((_266 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_273);
        _273 = _271;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _273) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_265);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_260);
        goto -> bb327;
    }

    bb129: {
        StorageDead(_292);
        _290 = [move _291];
        StorageDead(_291);
        _289 = &_290;
        _288 = &(*_289);
        _287 = move _288 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_288);
        _282 = Arguments::<'_>::new_v1(move _283, move _287) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_287);
        StorageDead(_283);
        _281 = format(move _282) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_282);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_285);
        _280 = move _281;
        StorageDead(_281);
        _279 = &_280;
        _278 = &(*_279);
        _277 = <String as Deref>::deref(move _278) -> [return: bb132, unwind: bb354];
    }

    bb132: {
        _276 = &(*_277);
        StorageDead(_278);
        _275 = solana_program::log::sol_log(move _276) -> [return: bb133, unwind: bb354];
    }

    bb133: {
        StorageDead(_276);
        drop(_280) -> [return: bb134, unwind: bb359];
    }

    bb134: {
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_275);
        StorageLive(_294);
        StorageLive(_295);
        _295 = _260;
        _294 = Option::<i64>::Some(move _295);
        StorageDead(_295);
        ((*_1).15: std::option::Option<i64>) = move _294;
        StorageDead(_294);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _678 = const _;
        _306 = &(*_678);
        _305 = &(*_306);
        _304 = move _305 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_305);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &_14;
        _313 = &(*_314);
        _312 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _313) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_313);
        _311 = [move _312];
        StorageDead(_312);
        _310 = &_311;
        _309 = &(*_310);
        _308 = move _309 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_309);
        _303 = Arguments::<'_>::new_v1(move _304, move _308) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_308);
        StorageDead(_304);
        _302 = format(move _303) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_303);
        StorageDead(_314);
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_306);
        _301 = move _302;
        StorageDead(_302);
        _300 = &_301;
        _299 = &(*_300);
        _298 = <String as Deref>::deref(move _299) -> [return: bb138, unwind: bb353];
    }

    bb138: {
        _297 = &(*_298);
        StorageDead(_299);
        _296 = solana_program::log::sol_log(move _297) -> [return: bb139, unwind: bb353];
    }

    bb139: {
        StorageDead(_297);
        drop(_301) -> [return: bb140, unwind: bb359];
    }

    bb140: {
        StorageDead(_301);
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_296);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        _317 = _14;
        _316 = move _317 as i64 (IntToInt);
        StorageDead(_317);
        _315 = Option::<i64>::Some(move _316);
        StorageDead(_316);
        ((*_1).16: std::option::Option<i64>) = move _315;
        StorageDead(_315);
        _48 = const ();
        goto -> bb154;
    }

    bb141: {
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _681 = const _;
        _328 = &(*_681);
        _327 = &(*_328);
        _326 = move _327 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_327);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = &_260;
        _335 = &(*_336);
        _334 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _335) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_335);
        _333 = [move _334];
        StorageDead(_334);
        _332 = &_333;
        _331 = &(*_332);
        _330 = move _331 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_331);
        _325 = Arguments::<'_>::new_v1(move _326, move _330) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_330);
        StorageDead(_326);
        _324 = format(move _325) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_325);
        StorageDead(_336);
        StorageDead(_333);
        StorageDead(_332);
        StorageDead(_328);
        _323 = move _324;
        StorageDead(_324);
        _322 = &_323;
        _321 = &(*_322);
        _320 = <String as Deref>::deref(move _321) -> [return: bb145, unwind: bb352];
    }

    bb145: {
        _319 = &(*_320);
        StorageDead(_321);
        _318 = solana_program::log::sol_log(move _319) -> [return: bb146, unwind: bb352];
    }

    bb146: {
        StorageDead(_319);
        drop(_323) -> [return: bb147, unwind: bb359];
    }

    bb147: {
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_318);
        StorageLive(_337);
        StorageLive(_338);
        _338 = _260;
        _337 = Option::<i64>::Some(move _338);
        StorageDead(_338);
        ((*_1).15: std::option::Option<i64>) = move _337;
        StorageDead(_337);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _680 = const _;
        _349 = &(*_680);
        _348 = &(*_349);
        _347 = move _348 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_348);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = &((*_1).5: u64);
        _356 = &(*_357);
        _355 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _356) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_356);
        _354 = [move _355];
        StorageDead(_355);
        _353 = &_354;
        _352 = &(*_353);
        _351 = move _352 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_352);
        _346 = Arguments::<'_>::new_v1(move _347, move _351) -> [return: bb149, unwind continue];
    }

    bb149: {
        StorageDead(_351);
        StorageDead(_347);
        _345 = format(move _346) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_346);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_353);
        StorageDead(_349);
        _344 = move _345;
        StorageDead(_345);
        _343 = &_344;
        _342 = &(*_343);
        _341 = <String as Deref>::deref(move _342) -> [return: bb151, unwind: bb351];
    }

    bb151: {
        _340 = &(*_341);
        StorageDead(_342);
        _339 = solana_program::log::sol_log(move _340) -> [return: bb152, unwind: bb351];
    }

    bb152: {
        StorageDead(_340);
        drop(_344) -> [return: bb153, unwind: bb359];
    }

    bb153: {
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_341);
        StorageDead(_339);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _360 = ((*_1).5: u64);
        _359 = move _360 as i64 (IntToInt);
        StorageDead(_360);
        _358 = Option::<i64>::Some(move _359);
        StorageDead(_359);
        ((*_1).16: std::option::Option<i64>) = move _358;
        StorageDead(_358);
        _48 = const ();
        goto -> bb154;
    }

    bb154: {
        StorageDead(_264);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_234);
        StorageDead(_216);
        StorageDead(_207);
        goto -> bb248;
    }

    bb155: {
        StorageDead(_50);
        StorageLive(_361);
        _362 = discriminant(((*_1).15: std::option::Option<i64>));
        switchInt(move _362) -> [0: bb156, 1: bb157, otherwise: bb12];
    }

    bb156: {
        StorageLive(_463);
        _463 = _16;
        switchInt(move _463) -> [0: bb220, otherwise: bb213];
    }

    bb157: {
        StorageLive(_363);
        _363 = ((((*_1).15: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_364);
        StorageLive(_365);
        _365 = _4;
        switchInt(move _365) -> [0: bb170, otherwise: bb158];
    }

    bb158: {
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = _363;
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        _373 = _363;
        _372 = core::num::<impl i64>::abs(move _373) -> [return: bb159, unwind continue];
    }

    bb159: {
        StorageDead(_373);
        _371 = <i64 as SafeMath>::safe_div(move _372, const 1000_i64) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_372);
        _370 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _371) -> [return: bb161, unwind continue];
    }

    bb161: {
        StorageDead(_371);
        _374 = discriminant(_370);
        switchInt(move _374) -> [0: bb162, 1: bb163, otherwise: bb12];
    }

    bb162: {
        StorageLive(_378);
        _378 = ((_370 as Continue).0: i64);
        _369 = _378;
        StorageDead(_378);
        _367 = <i64 as SafeMath>::safe_sub(move _368, move _369) -> [return: bb165, unwind continue];
    }

    bb163: {
        StorageLive(_375);
        _375 = ((_370 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_377);
        _377 = _375;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _377) -> [return: bb164, unwind continue];
    }

    bb164: {
        StorageDead(_377);
        StorageDead(_375);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_367);
        goto -> bb325;
    }

    bb165: {
        StorageDead(_369);
        StorageDead(_368);
        _366 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _367) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_367);
        _379 = discriminant(_366);
        switchInt(move _379) -> [0: bb167, 1: bb168, otherwise: bb12];
    }

    bb167: {
        StorageLive(_383);
        _383 = ((_366 as Continue).0: i64);
        _364 = _383;
        StorageDead(_383);
        StorageDead(_370);
        StorageDead(_366);
        goto -> bb171;
    }

    bb168: {
        StorageLive(_380);
        _380 = ((_366 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_382);
        _382 = _380;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _382) -> [return: bb169, unwind continue];
    }

    bb169: {
        StorageDead(_382);
        StorageDead(_380);
        goto -> bb325;
    }

    bb170: {
        _364 = _363;
        goto -> bb171;
    }

    bb171: {
        StorageDead(_365);
        StorageLive(_384);
        StorageLive(_385);
        _385 = _4;
        switchInt(move _385) -> [0: bb184, otherwise: bb172];
    }

    bb172: {
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        _388 = _363;
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = _363;
        _392 = core::num::<impl i64>::abs(move _393) -> [return: bb173, unwind continue];
    }

    bb173: {
        StorageDead(_393);
        _391 = <i64 as SafeMath>::safe_div(move _392, const 1000_i64) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_392);
        _390 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _391) -> [return: bb175, unwind continue];
    }

    bb175: {
        StorageDead(_391);
        _394 = discriminant(_390);
        switchInt(move _394) -> [0: bb176, 1: bb177, otherwise: bb12];
    }

    bb176: {
        StorageLive(_398);
        _398 = ((_390 as Continue).0: i64);
        _389 = _398;
        StorageDead(_398);
        _387 = <i64 as SafeMath>::safe_add(move _388, move _389) -> [return: bb179, unwind continue];
    }

    bb177: {
        StorageLive(_395);
        _395 = ((_390 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_397);
        _397 = _395;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _397) -> [return: bb178, unwind continue];
    }

    bb178: {
        StorageDead(_397);
        StorageDead(_395);
        StorageDead(_389);
        StorageDead(_388);
        StorageDead(_387);
        goto -> bb324;
    }

    bb179: {
        StorageDead(_389);
        StorageDead(_388);
        _386 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _387) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_387);
        _399 = discriminant(_386);
        switchInt(move _399) -> [0: bb181, 1: bb182, otherwise: bb12];
    }

    bb181: {
        StorageLive(_403);
        _403 = ((_386 as Continue).0: i64);
        _384 = _403;
        StorageDead(_403);
        StorageDead(_390);
        StorageDead(_386);
        goto -> bb185;
    }

    bb182: {
        StorageLive(_400);
        _400 = ((_386 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_402);
        _402 = _400;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _402) -> [return: bb183, unwind continue];
    }

    bb183: {
        StorageDead(_402);
        StorageDead(_400);
        goto -> bb324;
    }

    bb184: {
        _384 = _363;
        goto -> bb185;
    }

    bb185: {
        StorageDead(_385);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = &((*_1).2: controller::position::PositionDirection);
        StorageLive(_407);
        _693 = const _;
        _407 = &(*_693);
        _405 = <controller::position::PositionDirection as PartialEq>::eq(move _406, move _407) -> [return: bb186, unwind continue];
    }

    bb186: {
        switchInt(move _405) -> [0: bb188, otherwise: bb187];
    }

    bb187: {
        StorageDead(_407);
        StorageDead(_406);
        StorageLive(_409);
        _409 = _33;
        StorageLive(_410);
        _410 = _364;
        _404 = Lt(move _409, move _410);
        StorageDead(_410);
        StorageDead(_409);
        goto -> bb189;
    }

    bb188: {
        StorageDead(_407);
        StorageDead(_406);
        _404 = const false;
        goto -> bb189;
    }

    bb189: {
        StorageDead(_405);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &((*_1).2: controller::position::PositionDirection);
        StorageLive(_414);
        _692 = const _;
        _414 = &(*_692);
        _412 = <controller::position::PositionDirection as PartialEq>::eq(move _413, move _414) -> [return: bb190, unwind continue];
    }

    bb190: {
        switchInt(move _412) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        StorageDead(_414);
        StorageDead(_413);
        StorageLive(_416);
        _416 = _33;
        StorageLive(_417);
        _417 = _384;
        _411 = Gt(move _416, move _417);
        StorageDead(_417);
        StorageDead(_416);
        goto -> bb193;
    }

    bb192: {
        StorageDead(_414);
        StorageDead(_413);
        _411 = const false;
        goto -> bb193;
    }

    bb193: {
        StorageDead(_412);
        StorageLive(_418);
        _418 = _404;
        switchInt(move _418) -> [0: bb194, otherwise: bb195];
    }

    bb194: {
        StorageLive(_419);
        _419 = _411;
        switchInt(move _419) -> [0: bb211, otherwise: bb195];
    }

    bb195: {
        StorageLive(_420);
        _420 = _16;
        switchInt(move _420) -> [0: bb203, otherwise: bb196];
    }

    bb196: {
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _690 = const _;
        _431 = &(*_690);
        _430 = &(*_431);
        _429 = move _430 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_430);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _439 = &_23;
        _438 = &(*_439);
        _437 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _438) -> [return: bb197, unwind continue];
    }

    bb197: {
        StorageDead(_438);
        _436 = [move _437];
        StorageDead(_437);
        _435 = &_436;
        _434 = &(*_435);
        _433 = move _434 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_434);
        _428 = Arguments::<'_>::new_v1(move _429, move _433) -> [return: bb198, unwind continue];
    }

    bb198: {
        StorageDead(_433);
        StorageDead(_429);
        _427 = format(move _428) -> [return: bb199, unwind continue];
    }

    bb199: {
        StorageDead(_428);
        StorageDead(_439);
        StorageDead(_436);
        StorageDead(_435);
        StorageDead(_431);
        _426 = move _427;
        StorageDead(_427);
        _425 = &_426;
        _424 = &(*_425);
        _423 = <String as Deref>::deref(move _424) -> [return: bb200, unwind: bb350];
    }

    bb200: {
        _422 = &(*_423);
        StorageDead(_424);
        _421 = solana_program::log::sol_log(move _422) -> [return: bb201, unwind: bb350];
    }

    bb201: {
        StorageDead(_422);
        drop(_426) -> [return: bb202, unwind: bb359];
    }

    bb202: {
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_421);
        StorageLive(_440);
        StorageLive(_441);
        _441 = _23;
        _440 = Option::<i64>::Some(move _441);
        StorageDead(_441);
        ((*_1).15: std::option::Option<i64>) = move _440;
        StorageDead(_440);
        _361 = const ();
        goto -> bb210;
    }

    bb203: {
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _691 = const _;
        _452 = &(*_691);
        _451 = &(*_452);
        _450 = move _451 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_451);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = &_33;
        _459 = &(*_460);
        _458 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _459) -> [return: bb204, unwind continue];
    }

    bb204: {
        StorageDead(_459);
        _457 = [move _458];
        StorageDead(_458);
        _456 = &_457;
        _455 = &(*_456);
        _454 = move _455 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_455);
        _449 = Arguments::<'_>::new_v1(move _450, move _454) -> [return: bb205, unwind continue];
    }

    bb205: {
        StorageDead(_454);
        StorageDead(_450);
        _448 = format(move _449) -> [return: bb206, unwind continue];
    }

    bb206: {
        StorageDead(_449);
        StorageDead(_460);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_452);
        _447 = move _448;
        StorageDead(_448);
        _446 = &_447;
        _445 = &(*_446);
        _444 = <String as Deref>::deref(move _445) -> [return: bb207, unwind: bb349];
    }

    bb207: {
        _443 = &(*_444);
        StorageDead(_445);
        _442 = solana_program::log::sol_log(move _443) -> [return: bb208, unwind: bb349];
    }

    bb208: {
        StorageDead(_443);
        drop(_447) -> [return: bb209, unwind: bb359];
    }

    bb209: {
        StorageDead(_447);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_442);
        StorageLive(_461);
        StorageLive(_462);
        _462 = _33;
        _461 = Option::<i64>::Some(move _462);
        StorageDead(_462);
        ((*_1).15: std::option::Option<i64>) = move _461;
        StorageDead(_461);
        _361 = const ();
        goto -> bb210;
    }

    bb210: {
        StorageDead(_420);
        goto -> bb212;
    }

    bb211: {
        _361 = const ();
        goto -> bb212;
    }

    bb212: {
        StorageDead(_419);
        StorageDead(_418);
        StorageDead(_411);
        StorageDead(_404);
        StorageDead(_384);
        StorageDead(_364);
        StorageDead(_363);
        goto -> bb228;
    }

    bb213: {
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        _688 = const _;
        _474 = &(*_688);
        _473 = &(*_474);
        _472 = move _473 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_473);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &_23;
        _481 = &(*_482);
        _480 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _481) -> [return: bb214, unwind continue];
    }

    bb214: {
        StorageDead(_481);
        _479 = [move _480];
        StorageDead(_480);
        _478 = &_479;
        _477 = &(*_478);
        _476 = move _477 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_477);
        _471 = Arguments::<'_>::new_v1(move _472, move _476) -> [return: bb215, unwind continue];
    }

    bb215: {
        StorageDead(_476);
        StorageDead(_472);
        _470 = format(move _471) -> [return: bb216, unwind continue];
    }

    bb216: {
        StorageDead(_471);
        StorageDead(_482);
        StorageDead(_479);
        StorageDead(_478);
        StorageDead(_474);
        _469 = move _470;
        StorageDead(_470);
        _468 = &_469;
        _467 = &(*_468);
        _466 = <String as Deref>::deref(move _467) -> [return: bb217, unwind: bb348];
    }

    bb217: {
        _465 = &(*_466);
        StorageDead(_467);
        _464 = solana_program::log::sol_log(move _465) -> [return: bb218, unwind: bb348];
    }

    bb218: {
        StorageDead(_465);
        drop(_469) -> [return: bb219, unwind: bb359];
    }

    bb219: {
        StorageDead(_469);
        StorageDead(_468);
        StorageDead(_466);
        StorageDead(_464);
        StorageLive(_483);
        StorageLive(_484);
        _484 = _23;
        _483 = Option::<i64>::Some(move _484);
        StorageDead(_484);
        ((*_1).15: std::option::Option<i64>) = move _483;
        StorageDead(_483);
        _361 = const ();
        goto -> bb227;
    }

    bb220: {
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        _689 = const _;
        _495 = &(*_689);
        _494 = &(*_495);
        _493 = move _494 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_494);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = &_33;
        _502 = &(*_503);
        _501 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _502) -> [return: bb221, unwind continue];
    }

    bb221: {
        StorageDead(_502);
        _500 = [move _501];
        StorageDead(_501);
        _499 = &_500;
        _498 = &(*_499);
        _497 = move _498 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_498);
        _492 = Arguments::<'_>::new_v1(move _493, move _497) -> [return: bb222, unwind continue];
    }

    bb222: {
        StorageDead(_497);
        StorageDead(_493);
        _491 = format(move _492) -> [return: bb223, unwind continue];
    }

    bb223: {
        StorageDead(_492);
        StorageDead(_503);
        StorageDead(_500);
        StorageDead(_499);
        StorageDead(_495);
        _490 = move _491;
        StorageDead(_491);
        _489 = &_490;
        _488 = &(*_489);
        _487 = <String as Deref>::deref(move _488) -> [return: bb224, unwind: bb347];
    }

    bb224: {
        _486 = &(*_487);
        StorageDead(_488);
        _485 = solana_program::log::sol_log(move _486) -> [return: bb225, unwind: bb347];
    }

    bb225: {
        StorageDead(_486);
        drop(_490) -> [return: bb226, unwind: bb359];
    }

    bb226: {
        StorageDead(_490);
        StorageDead(_489);
        StorageDead(_487);
        StorageDead(_485);
        StorageLive(_504);
        StorageLive(_505);
        _505 = _33;
        _504 = Option::<i64>::Some(move _505);
        StorageDead(_505);
        ((*_1).15: std::option::Option<i64>) = move _504;
        StorageDead(_504);
        _361 = const ();
        goto -> bb227;
    }

    bb227: {
        StorageDead(_463);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_361);
        StorageLive(_506);
        StorageLive(_507);
        _507 = &((*_1).16: std::option::Option<i64>);
        _506 = Option::<i64>::is_none(move _507) -> [return: bb229, unwind continue];
    }

    bb229: {
        switchInt(move _506) -> [0: bb246, otherwise: bb230];
    }

    bb230: {
        StorageDead(_507);
        StorageLive(_508);
        _508 = _16;
        switchInt(move _508) -> [0: bb238, otherwise: bb231];
    }

    bb231: {
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        _686 = const _;
        _519 = &(*_686);
        _518 = &(*_519);
        _517 = move _518 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_518);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = &_14;
        _526 = &(*_527);
        _525 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _526) -> [return: bb232, unwind continue];
    }

    bb232: {
        StorageDead(_526);
        _524 = [move _525];
        StorageDead(_525);
        _523 = &_524;
        _522 = &(*_523);
        _521 = move _522 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_522);
        _516 = Arguments::<'_>::new_v1(move _517, move _521) -> [return: bb233, unwind continue];
    }

    bb233: {
        StorageDead(_521);
        StorageDead(_517);
        _515 = format(move _516) -> [return: bb234, unwind continue];
    }

    bb234: {
        StorageDead(_516);
        StorageDead(_527);
        StorageDead(_524);
        StorageDead(_523);
        StorageDead(_519);
        _514 = move _515;
        StorageDead(_515);
        _513 = &_514;
        _512 = &(*_513);
        _511 = <String as Deref>::deref(move _512) -> [return: bb235, unwind: bb346];
    }

    bb235: {
        _510 = &(*_511);
        StorageDead(_512);
        _509 = solana_program::log::sol_log(move _510) -> [return: bb236, unwind: bb346];
    }

    bb236: {
        StorageDead(_510);
        drop(_514) -> [return: bb237, unwind: bb359];
    }

    bb237: {
        StorageDead(_514);
        StorageDead(_513);
        StorageDead(_511);
        StorageDead(_509);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = _14;
        _529 = move _530 as i64 (IntToInt);
        StorageDead(_530);
        _528 = Option::<i64>::Some(move _529);
        StorageDead(_529);
        ((*_1).16: std::option::Option<i64>) = move _528;
        StorageDead(_528);
        _48 = const ();
        goto -> bb245;
    }

    bb238: {
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _687 = const _;
        _541 = &(*_687);
        _540 = &(*_541);
        _539 = move _540 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_540);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        _549 = &((*_1).5: u64);
        _548 = &(*_549);
        _547 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _548) -> [return: bb239, unwind continue];
    }

    bb239: {
        StorageDead(_548);
        _546 = [move _547];
        StorageDead(_547);
        _545 = &_546;
        _544 = &(*_545);
        _543 = move _544 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_544);
        _538 = Arguments::<'_>::new_v1(move _539, move _543) -> [return: bb240, unwind continue];
    }

    bb240: {
        StorageDead(_543);
        StorageDead(_539);
        _537 = format(move _538) -> [return: bb241, unwind continue];
    }

    bb241: {
        StorageDead(_538);
        StorageDead(_549);
        StorageDead(_546);
        StorageDead(_545);
        StorageDead(_541);
        _536 = move _537;
        StorageDead(_537);
        _535 = &_536;
        _534 = &(*_535);
        _533 = <String as Deref>::deref(move _534) -> [return: bb242, unwind: bb345];
    }

    bb242: {
        _532 = &(*_533);
        StorageDead(_534);
        _531 = solana_program::log::sol_log(move _532) -> [return: bb243, unwind: bb345];
    }

    bb243: {
        StorageDead(_532);
        drop(_536) -> [return: bb244, unwind: bb359];
    }

    bb244: {
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_531);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        _552 = ((*_1).5: u64);
        _551 = move _552 as i64 (IntToInt);
        StorageDead(_552);
        _550 = Option::<i64>::Some(move _551);
        StorageDead(_551);
        ((*_1).16: std::option::Option<i64>) = move _550;
        StorageDead(_550);
        _48 = const ();
        goto -> bb245;
    }

    bb245: {
        StorageDead(_508);
        goto -> bb247;
    }

    bb246: {
        StorageDead(_507);
        _48 = const ();
        goto -> bb247;
    }

    bb247: {
        StorageDead(_506);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_553);
        StorageLive(_554);
        _554 = _16;
        switchInt(move _554) -> [0: bb250, otherwise: bb249];
    }

    bb249: {
        StorageLive(_555);
        _555 = _14;
        _553 = move _555 as i64 (IntToInt);
        StorageDead(_555);
        goto -> bb251;
    }

    bb250: {
        StorageLive(_556);
        _556 = ((*_1).5: u64);
        _553 = move _556 as i64 (IntToInt);
        StorageDead(_556);
        goto -> bb251;
    }

    bb251: {
        StorageDead(_554);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _559 = &((*_1).2: controller::position::PositionDirection);
        StorageLive(_560);
        _677 = const _;
        _560 = &(*_677);
        _558 = <controller::position::PositionDirection as PartialEq>::eq(move _559, move _560) -> [return: bb252, unwind continue];
    }

    bb252: {
        switchInt(move _558) -> [0: bb261, otherwise: bb253];
    }

    bb253: {
        StorageDead(_560);
        StorageDead(_559);
        StorageLive(_562);
        _563 = discriminant(((*_1).15: std::option::Option<i64>));
        switchInt(move _563) -> [1: bb254, otherwise: bb256];
    }

    bb254: {
        StorageLive(_564);
        _564 = ((((*_1).15: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        _567 = _564;
        StorageLive(_568);
        _568 = _553;
        _566 = <i64 as Ord>::min(move _567, move _568) -> [return: bb255, unwind continue];
    }

    bb255: {
        StorageDead(_568);
        StorageDead(_567);
        _565 = Option::<i64>::Some(move _566);
        StorageDead(_566);
        ((*_1).15: std::option::Option<i64>) = move _565;
        StorageDead(_565);
        _562 = const ();
        StorageDead(_564);
        goto -> bb257;
    }

    bb256: {
        _562 = const ();
        goto -> bb257;
    }

    bb257: {
        StorageDead(_562);
        _569 = discriminant(((*_1).16: std::option::Option<i64>));
        switchInt(move _569) -> [1: bb258, otherwise: bb260];
    }

    bb258: {
        StorageLive(_570);
        _570 = ((((*_1).16: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        _573 = _570;
        StorageLive(_574);
        _574 = _553;
        _572 = <i64 as Ord>::min(move _573, move _574) -> [return: bb259, unwind continue];
    }

    bb259: {
        StorageDead(_574);
        StorageDead(_573);
        _571 = Option::<i64>::Some(move _572);
        StorageDead(_572);
        ((*_1).16: std::option::Option<i64>) = move _571;
        StorageDead(_571);
        _557 = const ();
        StorageDead(_570);
        goto -> bb269;
    }

    bb260: {
        _557 = const ();
        goto -> bb269;
    }

    bb261: {
        StorageDead(_560);
        StorageDead(_559);
        StorageLive(_575);
        _576 = discriminant(((*_1).15: std::option::Option<i64>));
        switchInt(move _576) -> [1: bb262, otherwise: bb264];
    }

    bb262: {
        StorageLive(_577);
        _577 = ((((*_1).15: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        _580 = _577;
        StorageLive(_581);
        _581 = _553;
        _579 = <i64 as Ord>::max(move _580, move _581) -> [return: bb263, unwind continue];
    }

    bb263: {
        StorageDead(_581);
        StorageDead(_580);
        _578 = Option::<i64>::Some(move _579);
        StorageDead(_579);
        ((*_1).15: std::option::Option<i64>) = move _578;
        StorageDead(_578);
        _575 = const ();
        StorageDead(_577);
        goto -> bb265;
    }

    bb264: {
        _575 = const ();
        goto -> bb265;
    }

    bb265: {
        StorageDead(_575);
        _582 = discriminant(((*_1).16: std::option::Option<i64>));
        switchInt(move _582) -> [1: bb266, otherwise: bb268];
    }

    bb266: {
        StorageLive(_583);
        _583 = ((((*_1).16: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        _586 = _583;
        StorageLive(_587);
        _587 = _553;
        _585 = <i64 as Ord>::max(move _586, move _587) -> [return: bb267, unwind continue];
    }

    bb267: {
        StorageDead(_587);
        StorageDead(_586);
        _584 = Option::<i64>::Some(move _585);
        StorageDead(_585);
        ((*_1).16: std::option::Option<i64>) = move _584;
        StorageDead(_584);
        _557 = const ();
        StorageDead(_583);
        goto -> bb269;
    }

    bb268: {
        _557 = const ();
        goto -> bb269;
    }

    bb269: {
        StorageDead(_558);
        StorageDead(_557);
        StorageLive(_588);
        _588 = ((*_1).14: std::option::Option<u8>);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        _599 = ((*_1).16: std::option::Option<i64>);
        _598 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _599) -> [return: bb270, unwind continue];
    }

    bb270: {
        StorageDead(_599);
        _597 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _598) -> [return: bb271, unwind continue];
    }

    bb271: {
        StorageDead(_598);
        _600 = discriminant(_597);
        switchInt(move _600) -> [0: bb272, 1: bb273, otherwise: bb12];
    }

    bb272: {
        StorageLive(_604);
        _604 = ((_597 as Continue).0: i64);
        _596 = _604;
        StorageDead(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        _608 = ((*_1).15: std::option::Option<i64>);
        _607 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _608) -> [return: bb275, unwind continue];
    }

    bb273: {
        StorageLive(_601);
        _601 = ((_597 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_603);
        _603 = _601;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _603) -> [return: bb274, unwind continue];
    }

    bb274: {
        StorageDead(_603);
        StorageDead(_601);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_593);
        StorageDead(_592);
        StorageDead(_591);
        goto -> bb322;
    }

    bb275: {
        StorageDead(_608);
        _606 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _607) -> [return: bb276, unwind continue];
    }

    bb276: {
        StorageDead(_607);
        _609 = discriminant(_606);
        switchInt(move _609) -> [0: bb277, 1: bb278, otherwise: bb12];
    }

    bb277: {
        StorageLive(_613);
        _613 = ((_606 as Continue).0: i64);
        _605 = _613;
        StorageDead(_613);
        _595 = <i64 as SafeMath>::safe_sub(move _596, move _605) -> [return: bb280, unwind continue];
    }

    bb278: {
        StorageLive(_610);
        _610 = ((_606 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_612);
        _612 = _610;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _612) -> [return: bb279, unwind continue];
    }

    bb279: {
        StorageDead(_612);
        StorageDead(_610);
        StorageDead(_605);
        StorageDead(_596);
        StorageDead(_595);
        goto -> bb320;
    }

    bb280: {
        StorageDead(_605);
        StorageDead(_596);
        _594 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _595) -> [return: bb281, unwind continue];
    }

    bb281: {
        StorageDead(_595);
        _614 = discriminant(_594);
        switchInt(move _614) -> [0: bb282, 1: bb283, otherwise: bb12];
    }

    bb282: {
        StorageLive(_618);
        _618 = ((_594 as Continue).0: i64);
        _593 = _618;
        StorageDead(_618);
        _592 = core::num::<impl i64>::unsigned_abs(move _593) -> [return: bb285, unwind continue];
    }

    bb283: {
        StorageLive(_615);
        _615 = ((_594 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_617);
        _617 = _615;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _617) -> [return: bb284, unwind continue];
    }

    bb284: {
        StorageDead(_617);
        StorageDead(_615);
        goto -> bb320;
    }

    bb285: {
        StorageDead(_593);
        StorageLive(_619);
        StorageLive(_620);
        _620 = _3;
        _619 = core::num::<impl i64>::unsigned_abs(move _620) -> [return: bb286, unwind continue];
    }

    bb286: {
        StorageDead(_620);
        StorageLive(_621);
        _621 = ((*_2).24: state::perp_market::ContractTier);
        _591 = get_auction_duration(move _592, move _619, move _621) -> [return: bb287, unwind continue];
    }

    bb287: {
        StorageDead(_621);
        StorageDead(_619);
        StorageDead(_592);
        _590 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _591) -> [return: bb288, unwind continue];
    }

    bb288: {
        StorageDead(_591);
        _622 = discriminant(_590);
        switchInt(move _622) -> [0: bb289, 1: bb290, otherwise: bb12];
    }

    bb289: {
        StorageLive(_626);
        _626 = ((_590 as Continue).0: u8);
        _589 = _626;
        StorageDead(_626);
        StorageDead(_606);
        StorageDead(_597);
        StorageDead(_594);
        StorageDead(_590);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        _631 = _588;
        _630 = Option::<u8>::unwrap_or(move _631, const 0_u8) -> [return: bb292, unwind continue];
    }

    bb290: {
        StorageLive(_623);
        _623 = ((_590 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_625);
        _625 = _623;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _625) -> [return: bb291, unwind continue];
    }

    bb291: {
        StorageDead(_625);
        StorageDead(_623);
        goto -> bb321;
    }

    bb292: {
        StorageDead(_631);
        StorageLive(_632);
        _632 = _589;
        _629 = core::num::<impl u8>::abs_diff(move _630, move _632) -> [return: bb293, unwind continue];
    }

    bb293: {
        StorageDead(_632);
        StorageDead(_630);
        _628 = Gt(move _629, const 10_u8);
        switchInt(move _628) -> [0: bb295, otherwise: bb294];
    }

    bb294: {
        StorageDead(_629);
        goto -> bb296;
    }

    bb295: {
        StorageDead(_629);
        StorageLive(_633);
        _633 = _4;
        switchInt(move _633) -> [0: bb296, otherwise: bb310];
    }

    bb296: {
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        _637 = _588;
        _636 = Option::<u8>::unwrap_or(move _637, const 0_u8) -> [return: bb297, unwind continue];
    }

    bb297: {
        StorageDead(_637);
        StorageLive(_638);
        _638 = _589;
        _635 = <u8 as Ord>::max(move _636, move _638) -> [return: bb298, unwind continue];
    }

    bb298: {
        StorageDead(_638);
        StorageDead(_636);
        _634 = Option::<u8>::Some(move _635);
        StorageDead(_635);
        ((*_1).14: std::option::Option<u8>) = move _634;
        StorageDead(_634);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        _676 = const _;
        _649 = &(*_676);
        _648 = &(*_649);
        _647 = move _648 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_648);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        _661 = ((*_1).14: std::option::Option<u8>);
        _660 = <Option<u8> as SafeUnwrap>::safe_unwrap(move _661) -> [return: bb299, unwind continue];
    }

    bb299: {
        StorageDead(_661);
        _659 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _660) -> [return: bb300, unwind continue];
    }

    bb300: {
        StorageDead(_660);
        _662 = discriminant(_659);
        switchInt(move _662) -> [0: bb301, 1: bb302, otherwise: bb12];
    }

    bb301: {
        StorageLive(_666);
        _666 = ((_659 as Continue).0: u8);
        _658 = _666;
        StorageDead(_666);
        _657 = &_658;
        _656 = &(*_657);
        _655 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _656) -> [return: bb304, unwind continue];
    }

    bb302: {
        StorageLive(_663);
        _663 = ((_659 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_665);
        _665 = _663;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _665) -> [return: bb303, unwind continue];
    }

    bb303: {
        StorageDead(_665);
        StorageDead(_663);
        StorageDead(_656);
        StorageDead(_655);
        StorageDead(_652);
        StorageDead(_651);
        StorageDead(_647);
        StorageDead(_646);
        StorageDead(_659);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_654);
        StorageDead(_653);
        StorageDead(_649);
        StorageDead(_645);
        StorageDead(_642);
        StorageDead(_640);
        StorageDead(_644);
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_639);
        StorageDead(_633);
        StorageDead(_628);
        StorageDead(_627);
        goto -> bb323;
    }

    bb304: {
        StorageDead(_656);
        _654 = [move _655];
        StorageDead(_655);
        _653 = &_654;
        _652 = &(*_653);
        _651 = move _652 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_652);
        _646 = Arguments::<'_>::new_v1(move _647, move _651) -> [return: bb305, unwind continue];
    }

    bb305: {
        StorageDead(_651);
        StorageDead(_647);
        _645 = format(move _646) -> [return: bb306, unwind continue];
    }

    bb306: {
        StorageDead(_646);
        StorageDead(_659);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_654);
        StorageDead(_653);
        StorageDead(_649);
        _644 = move _645;
        StorageDead(_645);
        _643 = &_644;
        _642 = &(*_643);
        _641 = <String as Deref>::deref(move _642) -> [return: bb307, unwind: bb344];
    }

    bb307: {
        _640 = &(*_641);
        StorageDead(_642);
        _639 = solana_program::log::sol_log(move _640) -> [return: bb308, unwind: bb344];
    }

    bb308: {
        StorageDead(_640);
        drop(_644) -> [return: bb309, unwind: bb359];
    }

    bb309: {
        StorageDead(_644);
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_639);
        _627 = const ();
        goto -> bb311;
    }

    bb310: {
        _627 = const ();
        goto -> bb311;
    }

    bb311: {
        StorageDead(_633);
        StorageDead(_628);
        StorageDead(_627);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        _669 = &_11;
        StorageLive(_670);
        _670 = &((*_1).14: std::option::Option<u8>);
        _668 = <Option<u8> as PartialEq>::ne(move _669, move _670) -> [return: bb312, unwind continue];
    }

    bb312: {
        switchInt(move _668) -> [0: bb314, otherwise: bb313];
    }

    bb313: {
        StorageDead(_670);
        StorageDead(_669);
        goto -> bb316;
    }

    bb314: {
        StorageDead(_670);
        StorageDead(_669);
        StorageLive(_671);
        StorageLive(_672);
        _672 = &_12;
        StorageLive(_673);
        _673 = &((*_1).15: std::option::Option<i64>);
        _671 = <Option<i64> as PartialEq>::ne(move _672, move _673) -> [return: bb315, unwind continue];
    }

    bb315: {
        switchInt(move _671) -> [0: bb317, otherwise: bb316];
    }

    bb316: {
        StorageDead(_673);
        StorageDead(_672);
        _667 = const true;
        goto -> bb319;
    }

    bb317: {
        StorageDead(_673);
        StorageDead(_672);
        StorageLive(_674);
        _674 = &_13;
        StorageLive(_675);
        _675 = &((*_1).16: std::option::Option<i64>);
        _667 = <Option<i64> as PartialEq>::ne(move _674, move _675) -> [return: bb318, unwind continue];
    }

    bb318: {
        StorageDead(_675);
        StorageDead(_674);
        goto -> bb319;
    }

    bb319: {
        StorageDead(_671);
        StorageDead(_668);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _667);
        StorageDead(_667);
        StorageDead(_589);
        StorageDead(_588);
        StorageDead(_553);
        StorageDead(_33);
        StorageDead(_23);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb343;
    }

    bb320: {
        StorageDead(_593);
        StorageDead(_592);
        StorageDead(_591);
        goto -> bb321;
    }

    bb321: {
        StorageDead(_606);
        goto -> bb322;
    }

    bb322: {
        StorageDead(_597);
        StorageDead(_594);
        StorageDead(_590);
        goto -> bb323;
    }

    bb323: {
        StorageDead(_589);
        StorageDead(_588);
        StorageDead(_553);
        goto -> bb340;
    }

    bb324: {
        StorageDead(_390);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_384);
        goto -> bb326;
    }

    bb325: {
        StorageDead(_370);
        StorageDead(_366);
        StorageDead(_365);
        goto -> bb326;
    }

    bb326: {
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_361);
        goto -> bb339;
    }

    bb327: {
        StorageDead(_258);
        goto -> bb329;
    }

    bb328: {
        StorageDead(_237);
        StorageDead(_235);
        goto -> bb329;
    }

    bb329: {
        StorageDead(_234);
        goto -> bb331;
    }

    bb330: {
        StorageDead(_220);
        StorageDead(_217);
        goto -> bb331;
    }

    bb331: {
        StorageDead(_216);
        goto -> bb332;
    }

    bb332: {
        StorageDead(_207);
        goto -> bb339;
    }

    bb333: {
        StorageDead(_104);
        goto -> bb335;
    }

    bb334: {
        StorageDead(_83);
        StorageDead(_81);
        goto -> bb335;
    }

    bb335: {
        StorageDead(_80);
        goto -> bb337;
    }

    bb336: {
        StorageDead(_66);
        StorageDead(_63);
        goto -> bb337;
    }

    bb337: {
        StorageDead(_62);
        goto -> bb338;
    }

    bb338: {
        StorageDead(_53);
        goto -> bb339;
    }

    bb339: {
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb340;
    }

    bb340: {
        StorageDead(_33);
        goto -> bb341;
    }

    bb341: {
        StorageDead(_23);
        goto -> bb342;
    }

    bb342: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb343;
    }

    bb343: {
        return;
    }

    bb344 (cleanup): {
        drop(_644) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb345 (cleanup): {
        drop(_536) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb346 (cleanup): {
        drop(_514) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb347 (cleanup): {
        drop(_490) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb348 (cleanup): {
        drop(_469) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb349 (cleanup): {
        drop(_447) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb350 (cleanup): {
        drop(_426) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb351 (cleanup): {
        drop(_344) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb352 (cleanup): {
        drop(_323) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb353 (cleanup): {
        drop(_301) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb354 (cleanup): {
        drop(_280) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb355 (cleanup): {
        drop(_190) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb356 (cleanup): {
        drop(_169) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb357 (cleanup): {
        drop(_147) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb358 (cleanup): {
        drop(_126) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb359 (cleanup): {
        resume;
    }
}
