// MIR for `admin::handle_update_if_rebalance_config` before PreCodegen

fn admin::handle_update_if_rebalance_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::UpdateIfRebalanceConfig<'_>>, _2: if_rebalance_config::IfRebalanceConfigParams) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _3: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>, error::ErrorCode>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _8: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _14: u64;
    let mut _15: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _16: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _17: u64;
    let mut _18: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _19: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _20: i64;
    let mut _21: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _22: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _23: u16;
    let mut _24: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _25: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let _26: ();
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _28: std::result::Result<(), error::ErrorCode>;
    let mut _29: &state::if_rebalance_config::IfRebalanceConfig;
    let _30: &state::if_rebalance_config::IfRebalanceConfig;
    let mut _31: &std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: ();
    let mut _38: &mut instructions::admin::UpdateIfRebalanceConfig<'_>;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    scope 1 {
        debug config => _3;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: ();
        scope 6 {
            debug residual => _33;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _36;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _38 = deref_copy (_1.1: &mut instructions::admin::UpdateIfRebalanceConfig<'_>);
        _7 = &((*_38).1: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, IfRebalanceConfig>::load_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _5 = std::result::Result::<RefMut<'_, IfRebalanceConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _6, move _8) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, IfRebalanceConfig>, error::ErrorCode> as Try>::branch(move _5) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _3 = move _13;
        StorageDead(_13);
        _41 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_14);
        _14 = (_2.0: u64);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut _3;
        _15 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _16) -> [return: bb8, unwind: bb21];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        _39 = discriminant(_4);
        StorageDead(_4);
        goto -> bb19;
    }

    bb8: {
        StorageDead(_16);
        ((*_15).1: u64) = move _14;
        StorageDead(_14);
        StorageDead(_15);
        StorageLive(_17);
        _17 = (_2.1: u64);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _3;
        _18 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _19) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        StorageDead(_19);
        ((*_18).8: u64) = move _17;
        StorageDead(_17);
        StorageDead(_18);
        StorageLive(_20);
        _20 = (_2.2: i64);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &mut _3;
        _21 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _22) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        StorageDead(_22);
        ((*_21).9: i64) = move _20;
        StorageDead(_20);
        StorageDead(_21);
        StorageLive(_23);
        _23 = (_2.5: u16);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut _3;
        _24 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _25) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        StorageDead(_25);
        ((*_24).12: u16) = move _23;
        StorageDead(_23);
        StorageDead(_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_3;
        _30 = <RefMut<'_, IfRebalanceConfig> as Deref>::deref(move _31) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = IfRebalanceConfig::validate(move _29) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        StorageDead(_29);
        _27 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _28) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        StorageDead(_28);
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_36);
        _36 = ((_27 as Continue).0: ());
        _26 = _36;
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_37);
        _37 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _37);
        StorageDead(_37);
        drop(_3) -> [return: bb18, unwind: bb22];
    }

    bb16: {
        StorageLive(_33);
        _33 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        drop(_3) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        StorageDead(_3);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_3);
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        _43 = discriminant(_4);
        goto -> bb22;
    }
}
