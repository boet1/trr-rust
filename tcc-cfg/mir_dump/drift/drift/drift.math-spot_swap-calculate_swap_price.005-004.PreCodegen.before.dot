digraph Mir_0_2819 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_swap_price(_1: u128, _2: u128, _3: u32, _4: u32) -&gt; std::result::Result&lt;u128, error::ErrorCode&gt;<br align="left"/>let mut _5: u128;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _7: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _10: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _13: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _19: u128;<br align="left"/>let mut _20: u128;<br align="left"/>let mut _21: u32;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: u128;<br align="left"/>let mut _27: u128;<br align="left"/>let mut _28: u32;<br align="left"/>let mut _29: isize;<br align="left"/>let _30: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _31: !;<br align="left"/>let mut _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _33: u128;<br align="left"/>let mut _34: u128;<br align="left"/>debug amount_out =&gt; _1;<br align="left"/>debug amount_in =&gt; _2;<br align="left"/>debug out_decimals =&gt; _3;<br align="left"/>debug in_decimals =&gt; _4;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>debug residual =&gt; _30;<br align="left"/>debug val =&gt; _33;<br align="left"/>>;
    bb0__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _1<br/></td></tr><tr><td align="left">_13 = &lt;u128 as SafeMath&gt;::safe_mul(move _14, const _)</td></tr></table>>];
    bb1__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb2__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_15 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb3__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_12 as Continue).0: u128)<br/>_11 = _19<br/>StorageDead(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _3<br/></td></tr><tr><td align="left">_20 = core::num::&lt;impl u128&gt;::pow(const 10_u128, move _21)</td></tr></table>>];
    bb4__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb6__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">_10 = &lt;u128 as SafeMath&gt;::safe_div(move _11, move _20)</td></tr></table>>];
    bb8__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb9__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_22 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb10__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_9 as Continue).0: u128)<br/>_8 = _26<br/>StorageDead(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = _4<br/></td></tr><tr><td align="left">_27 = core::num::&lt;impl u128&gt;::pow(const 10_u128, move _28)</td></tr></table>>];
    bb11__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb12__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/></td></tr><tr><td align="left">_7 = &lt;u128 as SafeMath&gt;::safe_mul(move _8, move _27)</td></tr></table>>];
    bb14__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb15__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_29 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _29)</td></tr></table>>];
    bb16__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = ((_6 as Continue).0: u128)<br/>_5 = _33<br/>StorageDead(_33)<br/>StorageLive(_34)<br/>_34 = _2<br/></td></tr><tr><td align="left">_0 = &lt;u128 as SafeMath&gt;::safe_div(move _5, move _34)</td></tr></table>>];
    bb17__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_32)<br/>_32 = _30<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _32)</td></tr></table>>];
    bb18__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_5)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2819 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2819 -> bb1__0_2819 [label="return"];
    bb1__0_2819 -> bb2__0_2819 [label="return"];
    bb2__0_2819 -> bb3__0_2819 [label="0"];
    bb2__0_2819 -> bb5__0_2819 [label="1"];
    bb2__0_2819 -> bb4__0_2819 [label="otherwise"];
    bb3__0_2819 -> bb7__0_2819 [label="return"];
    bb5__0_2819 -> bb6__0_2819 [label="return"];
    bb6__0_2819 -> bb20__0_2819 [label=""];
    bb7__0_2819 -> bb8__0_2819 [label="return"];
    bb8__0_2819 -> bb9__0_2819 [label="return"];
    bb9__0_2819 -> bb10__0_2819 [label="0"];
    bb9__0_2819 -> bb11__0_2819 [label="1"];
    bb9__0_2819 -> bb4__0_2819 [label="otherwise"];
    bb10__0_2819 -> bb13__0_2819 [label="return"];
    bb11__0_2819 -> bb12__0_2819 [label="return"];
    bb12__0_2819 -> bb20__0_2819 [label=""];
    bb13__0_2819 -> bb14__0_2819 [label="return"];
    bb14__0_2819 -> bb15__0_2819 [label="return"];
    bb15__0_2819 -> bb16__0_2819 [label="0"];
    bb15__0_2819 -> bb17__0_2819 [label="1"];
    bb15__0_2819 -> bb4__0_2819 [label="otherwise"];
    bb16__0_2819 -> bb19__0_2819 [label="return"];
    bb17__0_2819 -> bb18__0_2819 [label="return"];
    bb18__0_2819 -> bb21__0_2819 [label=""];
    bb19__0_2819 -> bb22__0_2819 [label=""];
    bb20__0_2819 -> bb21__0_2819 [label=""];
    bb21__0_2819 -> bb22__0_2819 [label=""];
}
