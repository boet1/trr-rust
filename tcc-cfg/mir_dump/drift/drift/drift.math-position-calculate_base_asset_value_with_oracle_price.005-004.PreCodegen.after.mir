// MIR for `calculate_base_asset_value_with_oracle_price` after PreCodegen

fn calculate_base_asset_value_with_oracle_price(_1: i128, _2: i64) -> std::result::Result<u128, error::ErrorCode> {
    debug base_asset_amount => _1;
    debug oracle_price => _2;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: i128;
    let mut _6: !;
    let _7: u64;
    let mut _8: bool;
    let mut _9: i64;
    let mut _10: i64;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: i128;
    let mut _16: u128;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _18: std::result::Result<u128, error::ErrorCode>;
    let mut _19: u64;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug oracle_price => _7;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: u128;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: u128;
        scope 2 {
            debug residual => _21;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _24;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _26;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _29;
            scope 9 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        _4 = Eq(move _5, const 0_i128);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(const 0_u128);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb21;
    }

    bb2: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = Gt(move _9, const 0_i64);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = _2;
        _7 = core::num::<impl i64>::unsigned_abs(move _10) -> [return: bb5, unwind continue];
    }

    bb4: {
        StorageDead(_9);
        _7 = const 0_u64;
        goto -> bb6;
    }

    bb5: {
        StorageDead(_10);
        goto -> bb6;
    }

    bb6: {
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _1;
        _14 = core::num::<impl i128>::unsigned_abs(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _7;
        _18 = <u64 as Cast>::cast::<u128>(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _17 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: u128);
        _16 = _24;
        StorageDead(_24);
        _13 = <u128 as SafeMath>::safe_mul(move _14, move _16) -> [return: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb20;
    }

    bb14: {
        StorageDead(_16);
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_13);
        _25 = discriminant(_12);
        switchInt(move _25) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        StorageLive(_29);
        _29 = ((_12 as Continue).0: u128);
        _11 = _29;
        StorageDead(_29);
        _0 = <u128 as SafeMath>::safe_div(move _11, const _) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_26);
        _26 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_17);
        StorageDead(_12);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_17);
        StorageDead(_12);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}
