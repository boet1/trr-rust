// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4108:10: 4108:18>::try_accounts` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4108:10: 4108:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeReferrerNameBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::user::InitializeReferrerName<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeReferrerNameBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::user::InitializeReferrerName<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeReferrerNameBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::user::InitializeReferrerName<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeReferrerNameBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::user::InitializeReferrerName<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeReferrerNameBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let _20: ();
    let mut _21: bool;
    let mut _22: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _23: !;
    let mut _24: anchor_lang::error::Error;
    let mut _25: anchor_lang::error::ErrorCode;
    let _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: &[anchor_lang::prelude::AccountInfo<'_>];
    let _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: std::ops::RangeFrom<usize>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::user::InitializeReferrerNameBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _52: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::user::InitializeReferrerNameBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _67: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::user::InitializeReferrerNameBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _82: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::user::InitializeReferrerNameBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _97: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut instructions::user::InitializeReferrerNameBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _112: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _113: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let mut _115: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[u8];
    let mut _117: &mut instructions::user::InitializeReferrerNameBumps;
    let mut _118: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _119: {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _127: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _135: (anchor_lang::prelude::Pubkey, u8);
    let mut _136: &[&[u8]];
    let mut _137: &[&[u8]; 2];
    let _138: &[&[u8]; 2];
    let _139: [&[u8]; 2];
    let mut _140: &[u8];
    let mut _141: &[u8; 13];
    let _142: &[u8; 13];
    let mut _143: &[u8];
    let _144: &[u8];
    let mut _145: &[u8; 32];
    let mut _146: &anchor_lang::prelude::Pubkey;
    let mut _147: u8;
    let _148: ();
    let mut _149: bool;
    let mut _150: &anchor_lang::prelude::Pubkey;
    let _151: anchor_lang::prelude::Pubkey;
    let mut _152: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _153: &anchor_lang::prelude::Pubkey;
    let mut _154: !;
    let mut _155: anchor_lang::error::Error;
    let mut _156: anchor_lang::error::Error;
    let mut _157: anchor_lang::error::Error;
    let mut _158: anchor_lang::error::ErrorCode;
    let mut _159: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _160: anchor_lang::prelude::Pubkey;
    let mut _161: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _162: anchor_lang::prelude::Pubkey;
    let mut _165: &&anchor_lang::prelude::AccountInfo<'_>;
    let _166: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _170: bool;
    let mut _171: bool;
    let mut _172: &&anchor_lang::prelude::Pubkey;
    let mut _173: &&anchor_lang::prelude::Pubkey;
    let _174: &anchor_lang::prelude::Pubkey;
    let _175: anchor_lang::prelude::Pubkey;
    let mut _177: &anchor_lang::prelude::AccountInfo<'_>;
    let _178: ();
    let mut _179: bool;
    let mut _180: u64;
    let mut _183: &anchor_lang::prelude::Rent;
    let mut _184: usize;
    let mut _186: anchor_lang::prelude::AccountInfo<'_>;
    let mut _187: &anchor_lang::prelude::Signer<'_>;
    let mut _188: anchor_lang::prelude::AccountInfo<'_>;
    let mut _189: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _191: anchor_lang::prelude::AccountInfo<'_>;
    let mut _192: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _193: anchor_lang::system_program::CreateAccount<'_>;
    let _194: ();
    let mut _195: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _196: std::result::Result<(), anchor_lang::error::Error>;
    let mut _197: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _198: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _199: &[&[&[u8]]];
    let mut _200: &[&[&[u8]]; 1];
    let _201: &[&[&[u8]]; 1];
    let _202: [&[&[u8]]; 1];
    let mut _203: &[&[u8]];
    let _204: &[&[u8]];
    let _205: &[&[u8]];
    let mut _206: &[&[u8]; 3];
    let _207: [&[u8]; 3];
    let mut _208: &[u8];
    let mut _209: &[u8; 13];
    let _210: &[u8; 13];
    let mut _211: &[u8];
    let mut _212: &[u8; 32];
    let mut _213: &[u8];
    let _214: &[u8];
    let _215: &[u8];
    let mut _216: &[u8; 1];
    let _217: [u8; 1];
    let mut _218: u8;
    let mut _219: std::ops::RangeFull;
    let mut _220: std::ops::RangeFull;
    let mut _221: u64;
    let mut _222: u64;
    let mut _223: usize;
    let mut _224: &anchor_lang::prelude::Pubkey;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _230: ();
    let mut _231: bool;
    let mut _232: &anchor_lang::prelude::Pubkey;
    let _233: anchor_lang::prelude::Pubkey;
    let mut _234: &anchor_lang::prelude::Signer<'_>;
    let mut _235: &anchor_lang::prelude::Pubkey;
    let _236: anchor_lang::prelude::Pubkey;
    let mut _237: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _238: !;
    let mut _239: anchor_lang::error::Error;
    let mut _240: anchor_lang::error::Error;
    let mut _241: anchor_lang::error::AnchorError;
    let mut _242: std::string::String;
    let mut _243: &anchor_lang::error::ErrorCode;
    let _244: anchor_lang::error::ErrorCode;
    let mut _245: u32;
    let mut _246: anchor_lang::error::ErrorCode;
    let mut _247: std::string::String;
    let mut _248: &anchor_lang::error::ErrorCode;
    let _249: anchor_lang::error::ErrorCode;
    let mut _250: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _251: anchor_lang::error::ErrorOrigin;
    let mut _252: anchor_lang::error::Source;
    let mut _253: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _254: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _255: anchor_lang::prelude::Pubkey;
    let mut _256: &anchor_lang::prelude::Signer<'_>;
    let mut _257: anchor_lang::prelude::Pubkey;
    let mut _258: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _260: u64;
    let mut _261: u64;
    let mut _262: &anchor_lang::prelude::Rent;
    let mut _263: usize;
    let mut _264: u64;
    let _265: ();
    let mut _266: bool;
    let mut _267: u64;
    let mut _269: anchor_lang::prelude::AccountInfo<'_>;
    let mut _270: &anchor_lang::prelude::Signer<'_>;
    let mut _271: anchor_lang::prelude::AccountInfo<'_>;
    let mut _272: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _274: anchor_lang::prelude::AccountInfo<'_>;
    let mut _275: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _276: anchor_lang::system_program::Transfer<'_>;
    let _277: ();
    let mut _278: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _279: std::result::Result<(), anchor_lang::error::Error>;
    let mut _280: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _281: u64;
    let mut _282: isize;
    let mut _284: !;
    let mut _285: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _288: anchor_lang::prelude::AccountInfo<'_>;
    let mut _289: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _291: anchor_lang::prelude::AccountInfo<'_>;
    let mut _292: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _293: anchor_lang::system_program::Allocate<'_>;
    let _294: ();
    let mut _295: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _296: std::result::Result<(), anchor_lang::error::Error>;
    let mut _297: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _298: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _299: &[&[&[u8]]];
    let mut _300: &[&[&[u8]]; 1];
    let _301: &[&[&[u8]]; 1];
    let _302: [&[&[u8]]; 1];
    let mut _303: &[&[u8]];
    let _304: &[&[u8]];
    let _305: &[&[u8]];
    let mut _306: &[&[u8]; 3];
    let _307: [&[u8]; 3];
    let mut _308: &[u8];
    let mut _309: &[u8; 13];
    let _310: &[u8; 13];
    let mut _311: &[u8];
    let mut _312: &[u8; 32];
    let mut _313: &[u8];
    let _314: &[u8];
    let _315: &[u8];
    let mut _316: &[u8; 1];
    let _317: [u8; 1];
    let mut _318: u8;
    let mut _319: std::ops::RangeFull;
    let mut _320: std::ops::RangeFull;
    let mut _321: u64;
    let mut _322: usize;
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _329: anchor_lang::prelude::AccountInfo<'_>;
    let mut _330: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _332: anchor_lang::prelude::AccountInfo<'_>;
    let mut _333: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _334: anchor_lang::system_program::Assign<'_>;
    let _335: ();
    let mut _336: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _337: std::result::Result<(), anchor_lang::error::Error>;
    let mut _338: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _339: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _340: &[&[&[u8]]];
    let mut _341: &[&[&[u8]]; 1];
    let _342: &[&[&[u8]]; 1];
    let _343: [&[&[u8]]; 1];
    let mut _344: &[&[u8]];
    let _345: &[&[u8]];
    let _346: &[&[u8]];
    let mut _347: &[&[u8]; 3];
    let _348: [&[u8]; 3];
    let mut _349: &[u8];
    let mut _350: &[u8; 13];
    let _351: &[u8; 13];
    let mut _352: &[u8];
    let mut _353: &[u8; 32];
    let mut _354: &[u8];
    let _355: &[u8];
    let _356: &[u8];
    let mut _357: &[u8; 1];
    let _358: [u8; 1];
    let mut _359: u8;
    let mut _360: std::ops::RangeFull;
    let mut _361: std::ops::RangeFull;
    let mut _362: &anchor_lang::prelude::Pubkey;
    let mut _363: isize;
    let mut _365: !;
    let mut _366: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _368: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>, anchor_lang::error::Error>;
    let mut _369: &anchor_lang::prelude::Pubkey;
    let mut _370: &anchor_lang::prelude::AccountInfo<'_>;
    let _371: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _372: isize;
    let mut _375: !;
    let mut _376: anchor_lang::error::Error;
    let mut _377: anchor_lang::error::Error;
    let mut _378: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>, anchor_lang::error::Error>;
    let mut _379: &anchor_lang::prelude::AccountInfo<'_>;
    let _380: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _381: isize;
    let mut _384: !;
    let mut _385: anchor_lang::error::Error;
    let mut _386: anchor_lang::error::Error;
    let _387: ();
    let mut _388: bool;
    let _389: ();
    let mut _390: bool;
    let mut _391: usize;
    let mut _392: usize;
    let mut _393: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _394: !;
    let mut _395: anchor_lang::error::Error;
    let mut _396: anchor_lang::error::Error;
    let mut _397: anchor_lang::error::Error;
    let mut _398: anchor_lang::error::ErrorCode;
    let mut _399: (usize, usize);
    let mut _400: usize;
    let mut _401: usize;
    let mut _402: &anchor_lang::prelude::AccountInfo<'_>;
    let _403: ();
    let mut _404: bool;
    let mut _405: &&anchor_lang::prelude::Pubkey;
    let mut _406: &&anchor_lang::prelude::Pubkey;
    let mut _407: !;
    let mut _408: anchor_lang::error::Error;
    let mut _409: anchor_lang::error::Error;
    let mut _410: anchor_lang::error::Error;
    let mut _411: anchor_lang::error::ErrorCode;
    let mut _412: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _413: anchor_lang::prelude::Pubkey;
    let mut _414: anchor_lang::prelude::Pubkey;
    let mut _416: &anchor_lang::prelude::Rent;
    let mut _417: usize;
    let mut _418: bool;
    let mut _419: u64;
    let mut _420: &anchor_lang::prelude::AccountInfo<'_>;
    let _421: anchor_lang::prelude::AccountInfo<'_>;
    let mut _422: &anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
    let mut _423: u64;
    let mut _424: !;
    let mut _425: anchor_lang::error::Error;
    let mut _426: anchor_lang::error::Error;
    let mut _427: anchor_lang::error::ErrorCode;
    let _428: ();
    let mut _429: bool;
    let mut _430: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _431: &anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
    let _432: &anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
    let mut _433: !;
    let mut _434: anchor_lang::error::Error;
    let mut _435: anchor_lang::error::Error;
    let mut _436: anchor_lang::error::ErrorCode;
    let _437: ();
    let mut _438: bool;
    let mut _439: &anchor_lang::prelude::Rent;
    let mut _440: u64;
    let mut _441: &anchor_lang::prelude::AccountInfo<'_>;
    let _442: anchor_lang::prelude::AccountInfo<'_>;
    let mut _443: &anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
    let mut _444: usize;
    let mut _445: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _446: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _447: &anchor_lang::prelude::AccountInfo<'_>;
    let _448: anchor_lang::prelude::AccountInfo<'_>;
    let mut _449: &anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
    let mut _450: isize;
    let mut _452: !;
    let mut _453: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _455: !;
    let mut _456: anchor_lang::error::Error;
    let mut _457: anchor_lang::error::Error;
    let mut _458: anchor_lang::error::ErrorCode;
    let _459: ();
    let mut _460: bool;
    let mut _461: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _462: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _463: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _464: !;
    let mut _465: anchor_lang::error::Error;
    let mut _466: anchor_lang::error::Error;
    let mut _467: anchor_lang::error::ErrorCode;
    let _468: ();
    let mut _469: bool;
    let mut _470: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _471: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _472: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _473: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _474: &anchor_lang::prelude::Signer<'_>;
    let _475: &anchor_lang::prelude::Signer<'_>;
    let mut _476: isize;
    let mut _478: !;
    let mut _479: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _481: !;
    let mut _482: anchor_lang::error::Error;
    let mut _483: anchor_lang::error::Error;
    let mut _484: anchor_lang::error::ErrorCode;
    let _485: ();
    let mut _486: bool;
    let mut _487: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _488: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _489: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _490: !;
    let mut _491: anchor_lang::error::Error;
    let mut _492: anchor_lang::error::Error;
    let mut _493: anchor_lang::error::ErrorCode;
    let _494: ();
    let mut _495: bool;
    let mut _496: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _497: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _498: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _499: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _500: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _501: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _502: isize;
    let mut _504: !;
    let mut _505: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _507: !;
    let mut _508: anchor_lang::error::Error;
    let mut _509: anchor_lang::error::Error;
    let mut _510: anchor_lang::error::ErrorCode;
    let _511: ();
    let mut _512: bool;
    let mut _513: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _514: &anchor_lang::prelude::Signer<'_>;
    let _515: &anchor_lang::prelude::Signer<'_>;
    let mut _516: !;
    let mut _517: anchor_lang::error::Error;
    let mut _518: anchor_lang::error::Error;
    let mut _519: anchor_lang::error::ErrorCode;
    let mut _520: instructions::user::InitializeReferrerName<'_>;
    let mut _521: anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
    let mut _522: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _523: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _524: anchor_lang::prelude::Signer<'_>;
    let mut _525: anchor_lang::prelude::Signer<'_>;
    let mut _526: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _527: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _531: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _532: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _533: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _534: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _535: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _536: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _537: bool;
    let mut _538: bool;
    let mut _539: bool;
    let mut _540: bool;
    let mut _541: bool;
    let mut _542: bool;
    let mut _543: bool;
    let mut _544: bool;
    let mut _545: bool;
    let mut _546: bool;
    let mut _547: bool;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    let mut _559: isize;
    let mut _560: isize;
    let mut _561: isize;
    let mut _562: isize;
    let mut _563: isize;
    let mut _564: isize;
    let mut _565: isize;
    let mut _566: isize;
    let mut _567: isize;
    let mut _568: isize;
    let mut _569: isize;
    let mut _570: isize;
    let mut _571: isize;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: isize;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: isize;
    let mut _605: isize;
    let mut _606: isize;
    let mut _607: isize;
    let mut _608: isize;
    let mut _609: isize;
    let mut _610: isize;
    let mut _611: isize;
    let mut _612: isize;
    let mut _613: isize;
    let mut _614: isize;
    let mut _615: isize;
    let mut _616: isize;
    let mut _617: isize;
    let mut _618: isize;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: [u8; 32];
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::user::InitializeReferrerName<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeReferrerNameBumps>>::try_accounts::__Args;
        scope 2 {
            debug name => _7;
            let _26: &anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug referrer_name => _26;
                let _35: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                scope 8 {
                    debug user => _35;
                    let _50: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    scope 13 {
                        debug user_stats => _50;
                        let _65: anchor_lang::prelude::Signer<'_>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::Signer<'_>;
                        scope 18 {
                            debug authority => _65;
                            let _80: anchor_lang::prelude::Signer<'_>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::Signer<'_>;
                            scope 23 {
                                debug payer => _80;
                                let _95: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                scope 28 {
                                    debug rent => _95;
                                    let _110: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                    let _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _124: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                    scope 33 {
                                        debug system_program => _110;
                                        let _125: anchor_lang::prelude::Rent;
                                        let _129: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _132: anchor_lang::prelude::Rent;
                                        scope 38 {
                                            debug __anchor_rent => _125;
                                            let _133: anchor_lang::prelude::Pubkey;
                                            let _134: u8;
                                            scope 43 {
                                                debug __pda_address => _133;
                                                debug __bump => _134;
                                                let _163: anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
                                                let _164: &anchor_lang::prelude::AccountInfo<'_>;
                                                scope 44 {
                                                    debug referrer_name => _163;
                                                    let _451: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                    let _454: usize;
                                                    let _477: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _480: bool;
                                                    let _503: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _506: bool;
                                                    scope 82 {
                                                        debug residual => _451;
                                                        scope 83 {
                                                        }
                                                    }
                                                    scope 84 {
                                                        debug val => _454;
                                                        scope 85 {
                                                        }
                                                    }
                                                    scope 86 {
                                                        debug residual => _477;
                                                        scope 87 {
                                                        }
                                                    }
                                                    scope 88 {
                                                        debug val => _480;
                                                        scope 89 {
                                                        }
                                                    }
                                                    scope 90 {
                                                        debug residual => _503;
                                                        scope 91 {
                                                        }
                                                    }
                                                    scope 92 {
                                                        debug val => _506;
                                                        scope 93 {
                                                        }
                                                    }
                                                }
                                                scope 45 {
                                                    debug actual_field => _164;
                                                    let _167: &anchor_lang::prelude::Pubkey;
                                                    scope 46 {
                                                        debug actual_owner => _167;
                                                        let _168: usize;
                                                        scope 47 {
                                                            debug space => _168;
                                                            let _169: anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
                                                            let _176: u64;
                                                            let _382: anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
                                                            let _383: anchor_lang::error::Error;
                                                            let mut _530: &&anchor_lang::prelude::Pubkey;
                                                            scope 48 {
                                                                debug pa => _169;
                                                                let _415: u64;
                                                                scope 81 {
                                                                    debug required_lamports => _415;
                                                                }
                                                            }
                                                            scope 49 {
                                                                debug __current_lamports => _176;
                                                                let _181: usize;
                                                                let _259: u64;
                                                                let _373: anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
                                                                let _374: anchor_lang::error::Error;
                                                                let mut _528: &anchor_lang::error::ErrorCode;
                                                                let mut _529: &anchor_lang::error::ErrorCode;
                                                                scope 50 {
                                                                    debug space => _181;
                                                                    let _182: u64;
                                                                    scope 51 {
                                                                        debug lamports => _182;
                                                                        let _185: anchor_lang::system_program::CreateAccount<'_>;
                                                                        scope 52 {
                                                                            debug cpi_accounts => _185;
                                                                            let _190: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                            scope 53 {
                                                                                debug cpi_context => _190;
                                                                                let _226: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _229: ();
                                                                                scope 54 {
                                                                                    debug residual => _226;
                                                                                    scope 55 {
                                                                                    }
                                                                                }
                                                                                scope 56 {
                                                                                    debug val => _229;
                                                                                    scope 57 {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 58 {
                                                                    debug required_lamports => _259;
                                                                    let _268: anchor_lang::system_program::Transfer<'_>;
                                                                    let _287: anchor_lang::system_program::Allocate<'_>;
                                                                    scope 59 {
                                                                        debug cpi_accounts => _268;
                                                                        let _273: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                        scope 60 {
                                                                            debug cpi_context => _273;
                                                                            let _283: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _286: ();
                                                                            scope 61 {
                                                                                debug residual => _283;
                                                                                scope 62 {
                                                                                }
                                                                            }
                                                                            scope 63 {
                                                                                debug val => _286;
                                                                                scope 64 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 65 {
                                                                        debug cpi_accounts => _287;
                                                                        let _290: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                        scope 66 {
                                                                            debug cpi_context => _290;
                                                                            let _324: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _327: ();
                                                                            let _328: anchor_lang::system_program::Assign<'_>;
                                                                            scope 67 {
                                                                                debug residual => _324;
                                                                                scope 68 {
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug val => _327;
                                                                                scope 70 {
                                                                                }
                                                                            }
                                                                            scope 71 {
                                                                                debug cpi_accounts => _328;
                                                                                let _331: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                scope 72 {
                                                                                    debug cpi_context => _331;
                                                                                    let _364: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _367: ();
                                                                                    scope 73 {
                                                                                        debug residual => _364;
                                                                                        scope 74 {
                                                                                        }
                                                                                    }
                                                                                    scope 75 {
                                                                                        debug val => _367;
                                                                                        scope 76 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 77 {
                                                                    debug val => _373;
                                                                }
                                                                scope 78 {
                                                                    debug e => _374;
                                                                }
                                                            }
                                                            scope 79 {
                                                                debug val => _382;
                                                            }
                                                            scope 80 {
                                                                debug e => _383;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _129;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _132;
                                            scope 42 {
                                            }
                                        }
                                    }
                                    scope 34 {
                                        debug residual => _121;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug val => _124;
                                        scope 37 {
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _106;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _109;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _91;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _94;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _76;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _79;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _61;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _64;
                        scope 17 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _46;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _49;
                    scope 12 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _547 = const false;
        _546 = const false;
        _545 = const false;
        _544 = const false;
        _543 = const false;
        _542 = const false;
        _541 = const false;
        _540 = const false;
        _539 = const false;
        _538 = const false;
        _537 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<instructions::user::InitializeReferrerName<'info> as anchor_lang::Accounts<'info, InitializeReferrerNameBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
        _10 = std::result::Result::<<instructions::user::InitializeReferrerName<'info> as anchor_lang::Accounts<'info, InitializeReferrerNameBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18}>(move _11, move _14) -> [return: bb2, unwind: bb253];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<instructions::user::InitializeReferrerName<'info> as anchor_lang::Accounts<'info, InitializeReferrerNameBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::user::InitializeReferrerName<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeReferrerNameBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: [u8; 32]);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _531 = deref_copy (*_2);
        _22 = &(*_531);
        _21 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _22) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb245;
    }

    bb8: {
        switchInt(move _21) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = AccountNotEnoughKeys;
        _24 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _24);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb244;
    }

    bb11: {
        StorageDead(_22);
        _20 = const ();
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_26);
        StorageLive(_27);
        _27 = const 0_usize;
        _532 = deref_copy (*_2);
        _28 = Len((*_532));
        _29 = Lt(_27, _28);
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb12, unwind continue];
    }

    bb12: {
        _533 = deref_copy (*_2);
        _26 = &(*_533)[_27];
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _534 = deref_copy (*_2);
        _33 = &(*_534);
        StorageLive(_34);
        _34 = RangeFrom::<usize> { start: const 1_usize };
        _32 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _33, move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = &(*_32);
        _30 = &(*_31);
        (*_2) = move _30;
        StorageDead(_30);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, InitializeReferrerNameBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
        _37 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18}>(move _38, move _44) -> [return: bb15, unwind: bb253];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb253];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _35 = move _49;
        StorageDead(_49);
        _548 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, InitializeReferrerNameBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb293];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _616 = discriminant(_36);
        StorageDead(_36);
        goto -> bb243;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
        _52 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18}>(move _53, move _59) -> [return: bb21, unwind: bb253];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb253];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _50 = move _64;
        StorageDead(_64);
        _550 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeReferrerNameBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb292];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _614 = discriminant(_51);
        StorageDead(_51);
        goto -> bb242;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
        _67 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18}>(move _68, move _74) -> [return: bb27, unwind: bb253];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb253];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _65 = move _79;
        StorageDead(_79);
        _552 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeReferrerNameBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb291];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _612 = discriminant(_66);
        StorageDead(_66);
        goto -> bb241;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
        _82 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18}>(move _83, move _89) -> [return: bb33, unwind: bb253];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb253];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _80 = move _94;
        StorageDead(_94);
        _554 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeReferrerNameBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb290];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _610 = discriminant(_81);
        StorageDead(_81);
        goto -> bb240;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
        _97 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18}>(move _98, move _104) -> [return: bb39, unwind: bb253];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb253];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _95 = move _109;
        StorageDead(_109);
        _556 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &(*_1);
        StorageLive(_115);
        _115 = &mut (*_2);
        StorageLive(_116);
        _116 = &(*_6);
        StorageLive(_117);
        _117 = &mut (*_4);
        StorageLive(_118);
        _118 = &mut (*_5);
        _113 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeReferrerNameBumps>>::try_accounts(move _114, move _115, move _116, move _117, move _118) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb289];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _608 = discriminant(_96);
        StorageDead(_96);
        goto -> bb239;
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_119);
        _119 = {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18};
        _112 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4108:10: 4108:18}>(move _113, move _119) -> [return: bb45, unwind: bb253];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_113);
        _111 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb46, unwind: bb253];
    }

    bb46: {
        StorageDead(_112);
        _120 = discriminant(_111);
        switchInt(move _120) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_124);
        _124 = move ((_111 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _110 = move _124;
        StorageDead(_124);
        _558 = discriminant(_111);
        StorageDead(_111);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_121);
        _121 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_123);
        _123 = move _121;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _123) -> [return: bb49, unwind: bb288];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_121);
        _606 = discriminant(_111);
        StorageDead(_111);
        goto -> bb238;
    }

    bb50: {
        _126 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _127) -> [return: bb51, unwind: bb253];
    }

    bb51: {
        StorageDead(_127);
        _128 = discriminant(_126);
        switchInt(move _128) -> [0: bb52, 1: bb53, otherwise: bb5];
    }

    bb52: {
        StorageLive(_132);
        _132 = ((_126 as Continue).0: anchor_lang::prelude::Rent);
        _125 = _132;
        StorageDead(_132);
        _560 = discriminant(_126);
        StorageDead(_126);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = const b"referrer_name";
        _141 = &(*_142);
        _140 = move _141 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_7;
        _144 = <[u8; 32] as AsRef<[u8]>>::as_ref(move _145) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_129);
        _129 = move ((_126 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_131);
        _131 = move _129;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _131) -> [return: bb54, unwind: bb287];
    }

    bb54: {
        StorageDead(_131);
        StorageDead(_129);
        _604 = discriminant(_126);
        StorageDead(_126);
        goto -> bb237;
    }

    bb55: {
        _143 = &(*_144);
        StorageDead(_145);
        _139 = [move _140, move _143];
        StorageDead(_143);
        StorageDead(_140);
        _138 = &_139;
        _137 = &(*_138);
        _136 = move _137 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_137);
        StorageLive(_146);
        _146 = &(*_1);
        _135 = anchor_lang::prelude::Pubkey::find_program_address(move _136, move _146) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_146);
        StorageDead(_136);
        StorageLive(_133);
        _133 = (_135.0: anchor_lang::prelude::Pubkey);
        StorageLive(_134);
        _134 = (_135.1: u8);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_135);
        StorageLive(_147);
        _147 = _134;
        ((*_4).0: u8) = move _147;
        StorageDead(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &(*_26);
        _151 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _152) -> [return: bb57, unwind continue];
    }

    bb57: {
        _150 = &_151;
        StorageDead(_152);
        StorageLive(_153);
        _153 = &_133;
        _149 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _150, move _153) -> [return: bb58, unwind continue];
    }

    bb58: {
        switchInt(move _149) -> [0: bb64, otherwise: bb59];
    }

    bb59: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = ConstraintSeeds;
        _157 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _158) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_158);
        _156 = anchor_lang::error::Error::with_account_name::<&str>(move _157, const "referrer_name") -> [return: bb61, unwind: bb253];
    }

    bb61: {
        _547 = const true;
        StorageDead(_157);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &(*_26);
        _160 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _161) -> [return: bb62, unwind: bb286];
    }

    bb62: {
        StorageDead(_161);
        StorageLive(_162);
        _162 = _133;
        _159 = (move _160, move _162);
        StorageDead(_162);
        StorageDead(_160);
        _547 = const false;
        _155 = anchor_lang::error::Error::with_pubkeys(move _156, move _159) -> [return: bb63, unwind: bb286];
    }

    bb63: {
        StorageDead(_159);
        _547 = const false;
        StorageDead(_156);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _155);
        StorageDead(_155);
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb236;
    }

    bb64: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_150);
        _148 = const ();
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &_26;
        _165 = &(*_166);
        _164 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _165) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_165);
        StorageDead(_166);
        StorageLive(_167);
        _167 = ((*_164).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_168);
        _168 = const _;
        StorageLive(_169);
        StorageLive(_170);
        _170 = const false;
        switchInt(move _170) -> [0: bb68, otherwise: bb66];
    }

    bb66: {
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_167;
        StorageLive(_173);
        _530 = const _;
        _173 = &(*_530);
        _171 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _172, move _173) -> [return: bb67, unwind continue];
    }

    bb67: {
        switchInt(move _171) -> [0: bb142, otherwise: bb68];
    }

    bb68: {
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &(*_26);
        _176 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _177) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = _176;
        _179 = Eq(move _180, const 0_u64);
        switchInt(move _179) -> [0: bb85, otherwise: bb70];
    }

    bb70: {
        StorageDead(_180);
        StorageLive(_181);
        _181 = _168;
        StorageLive(_182);
        StorageLive(_183);
        _183 = &_125;
        StorageLive(_184);
        _184 = _181;
        _182 = anchor_lang::prelude::Rent::minimum_balance(move _183, move _184) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_184);
        StorageDead(_183);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_80;
        _186 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _187) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &(*_26);
        _188 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _189) -> [return: bb73, unwind: bb252];
    }

    bb73: {
        StorageDead(_189);
        _546 = const true;
        _185 = anchor_lang::system_program::CreateAccount::<'_> { from: move _186, to: move _188 };
        StorageDead(_188);
        StorageDead(_186);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &_110;
        _191 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _192) -> [return: bb74, unwind: bb284];
    }

    bb74: {
        StorageDead(_192);
        StorageLive(_193);
        _546 = const false;
        _193 = move _185;
        _190 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _191, move _193) -> [return: bb75, unwind: bb284];
    }

    bb75: {
        StorageDead(_193);
        StorageDead(_191);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _545 = const true;
        _198 = move _190;
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = const b"referrer_name";
        _209 = &(*_210);
        _208 = move _209 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_209);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_7;
        _211 = <[u8; 32] as AsRef<[u8]>>::as_ref(move _212) -> [return: bb76, unwind: bb282];
    }

    bb76: {
        StorageDead(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = _134;
        _217 = [move _218];
        _216 = &_217;
        StorageDead(_218);
        StorageLive(_219);
        _219 = RangeFull;
        _215 = <[u8; 1] as Index<RangeFull>>::index(move _216, move _219) -> [return: bb77, unwind: bb282];
    }

    bb77: {
        StorageDead(_219);
        StorageDead(_216);
        _214 = &(*_215);
        _213 = &(*_214);
        _207 = [move _208, move _211, move _213];
        _206 = &_207;
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_208);
        StorageLive(_220);
        _220 = RangeFull;
        _205 = <[&[u8]; 3] as Index<RangeFull>>::index(move _206, move _220) -> [return: bb78, unwind: bb282];
    }

    bb78: {
        StorageDead(_220);
        StorageDead(_206);
        _204 = &(*_205);
        _203 = &(*_204);
        _202 = [move _203];
        StorageDead(_203);
        _201 = &_202;
        _200 = &(*_201);
        _199 = move _200 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_200);
        _545 = const false;
        _197 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _198, move _199) -> [return: bb79, unwind: bb282];
    }

    bb79: {
        StorageDead(_199);
        _545 = const false;
        StorageDead(_198);
        StorageLive(_221);
        _221 = _182;
        StorageLive(_222);
        StorageLive(_223);
        _223 = _181;
        _222 = move _223 as u64 (IntToInt);
        StorageDead(_223);
        StorageLive(_224);
        _224 = &(*_1);
        _196 = anchor_lang::system_program::create_account(move _197, move _221, move _222, move _224) -> [return: bb80, unwind: bb284];
    }

    bb80: {
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_197);
        _195 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _196) -> [return: bb81, unwind: bb284];
    }

    bb81: {
        StorageDead(_196);
        _225 = discriminant(_195);
        switchInt(move _225) -> [0: bb82, 1: bb83, otherwise: bb5];
    }

    bb82: {
        StorageLive(_229);
        _229 = ((_195 as Continue).0: ());
        _194 = _229;
        StorageDead(_229);
        _562 = discriminant(_195);
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_195);
        StorageDead(_194);
        _178 = const ();
        StorageDead(_190);
        _546 = const false;
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb137;
    }

    bb83: {
        StorageLive(_226);
        _226 = move ((_195 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_228);
        _228 = move _226;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _228) -> [return: bb84, unwind: bb280];
    }

    bb84: {
        StorageDead(_228);
        StorageDead(_226);
        _602 = discriminant(_195);
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_190);
        _546 = const false;
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb232;
    }

    bb85: {
        StorageDead(_180);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &_80;
        _233 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _234) -> [return: bb86, unwind continue];
    }

    bb86: {
        _232 = &_233;
        StorageDead(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &(*_26);
        _236 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _237) -> [return: bb87, unwind continue];
    }

    bb87: {
        _235 = &_236;
        StorageDead(_237);
        _231 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _232, move _235) -> [return: bb88, unwind continue];
    }

    bb88: {
        switchInt(move _231) -> [0: bb97, otherwise: bb89];
    }

    bb89: {
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_232);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _529 = const _;
        _243 = &(*_529);
        _242 = anchor_lang::error::ErrorCode::name(move _243) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_243);
        StorageLive(_245);
        StorageLive(_246);
        _246 = TryingToInitPayerAsProgramAccount;
        _245 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _246) -> [return: bb91, unwind: bb251];
    }

    bb91: {
        StorageDead(_246);
        StorageLive(_247);
        StorageLive(_248);
        _528 = const _;
        _248 = &(*_528);
        _247 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _248) -> [return: bb92, unwind: bb251];
    }

    bb92: {
        StorageDead(_248);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/user.rs", line: const 4108_u32 };
        _251 = anchor_lang::error::ErrorOrigin::Source(move _252);
        StorageDead(_252);
        _250 = Option::<ErrorOrigin>::Some(move _251);
        StorageDead(_251);
        StorageLive(_253);
        _253 = Option::<ComparedValues>::None;
        _241 = anchor_lang::error::AnchorError { error_name: move _242, error_code_number: move _245, error_msg: move _247, error_origin: move _250, compared_values: move _253 };
        StorageDead(_253);
        StorageDead(_250);
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_242);
        _240 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _241) -> [return: bb93, unwind: bb253];
    }

    bb93: {
        _544 = const true;
        StorageDead(_241);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &_80;
        _255 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _256) -> [return: bb94, unwind: bb279];
    }

    bb94: {
        StorageDead(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &(*_26);
        _257 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _258) -> [return: bb95, unwind: bb279];
    }

    bb95: {
        StorageDead(_258);
        _254 = (move _255, move _257);
        StorageDead(_257);
        StorageDead(_255);
        _544 = const false;
        _239 = anchor_lang::error::Error::with_pubkeys(move _240, move _254) -> [return: bb96, unwind: bb279];
    }

    bb96: {
        StorageDead(_254);
        _544 = const false;
        StorageDead(_240);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _239);
        StorageDead(_239);
        StorageDead(_231);
        StorageDead(_230);
        goto -> bb232;
    }

    bb97: {
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_232);
        _230 = const ();
        StorageDead(_231);
        StorageDead(_230);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &_125;
        StorageLive(_263);
        _263 = _168;
        _261 = anchor_lang::prelude::Rent::minimum_balance(move _262, move _263) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_263);
        StorageDead(_262);
        _260 = <u64 as Ord>::max(move _261, const 1_u64) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_261);
        StorageLive(_264);
        _264 = _176;
        _259 = core::num::<impl u64>::saturating_sub(move _260, move _264) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_264);
        StorageDead(_260);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = _259;
        _266 = Gt(move _267, const 0_u64);
        switchInt(move _266) -> [0: bb111, otherwise: bb101];
    }

    bb101: {
        StorageDead(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &_80;
        _269 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _270) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &(*_26);
        _271 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _272) -> [return: bb103, unwind: bb250];
    }

    bb103: {
        StorageDead(_272);
        _543 = const true;
        _268 = anchor_lang::system_program::Transfer::<'_> { from: move _269, to: move _271 };
        StorageDead(_271);
        StorageDead(_269);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &_110;
        _274 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _275) -> [return: bb104, unwind: bb277];
    }

    bb104: {
        StorageDead(_275);
        StorageLive(_276);
        _543 = const false;
        _276 = move _268;
        _273 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _274, move _276) -> [return: bb105, unwind: bb277];
    }

    bb105: {
        StorageDead(_276);
        StorageDead(_274);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = move _273;
        StorageLive(_281);
        _281 = _259;
        _279 = anchor_lang::system_program::transfer(move _280, move _281) -> [return: bb106, unwind: bb277];
    }

    bb106: {
        StorageDead(_281);
        StorageDead(_280);
        _278 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _279) -> [return: bb107, unwind: bb277];
    }

    bb107: {
        StorageDead(_279);
        _282 = discriminant(_278);
        switchInt(move _282) -> [0: bb108, 1: bb109, otherwise: bb5];
    }

    bb108: {
        StorageLive(_286);
        _286 = ((_278 as Continue).0: ());
        _277 = _286;
        StorageDead(_286);
        _564 = discriminant(_278);
        StorageDead(_278);
        StorageDead(_277);
        _265 = const ();
        StorageDead(_273);
        _543 = const false;
        StorageDead(_268);
        goto -> bb112;
    }

    bb109: {
        StorageLive(_283);
        _283 = move ((_278 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_285);
        _285 = move _283;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _285) -> [return: bb110, unwind: bb275];
    }

    bb110: {
        StorageDead(_285);
        StorageDead(_283);
        _600 = discriminant(_278);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_273);
        _543 = const false;
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_265);
        goto -> bb231;
    }

    bb111: {
        StorageDead(_267);
        _265 = const ();
        goto -> bb112;
    }

    bb112: {
        StorageDead(_266);
        StorageDead(_265);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &(*_26);
        _288 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _289) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_289);
        _542 = const true;
        _287 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _288 };
        StorageDead(_288);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _292 = &_110;
        _291 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _292) -> [return: bb114, unwind: bb274];
    }

    bb114: {
        StorageDead(_292);
        StorageLive(_293);
        _542 = const false;
        _293 = move _287;
        _290 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _291, move _293) -> [return: bb115, unwind: bb274];
    }

    bb115: {
        StorageDead(_293);
        StorageDead(_291);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        _541 = const true;
        _298 = move _290;
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = const b"referrer_name";
        _309 = &(*_310);
        _308 = move _309 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_309);
        StorageLive(_311);
        StorageLive(_312);
        _312 = &_7;
        _311 = <[u8; 32] as AsRef<[u8]>>::as_ref(move _312) -> [return: bb116, unwind: bb272];
    }

    bb116: {
        StorageDead(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = _134;
        _317 = [move _318];
        _316 = &_317;
        StorageDead(_318);
        StorageLive(_319);
        _319 = RangeFull;
        _315 = <[u8; 1] as Index<RangeFull>>::index(move _316, move _319) -> [return: bb117, unwind: bb272];
    }

    bb117: {
        StorageDead(_319);
        StorageDead(_316);
        _314 = &(*_315);
        _313 = &(*_314);
        _307 = [move _308, move _311, move _313];
        _306 = &_307;
        StorageDead(_313);
        StorageDead(_311);
        StorageDead(_308);
        StorageLive(_320);
        _320 = RangeFull;
        _305 = <[&[u8]; 3] as Index<RangeFull>>::index(move _306, move _320) -> [return: bb118, unwind: bb272];
    }

    bb118: {
        StorageDead(_320);
        StorageDead(_306);
        _304 = &(*_305);
        _303 = &(*_304);
        _302 = [move _303];
        StorageDead(_303);
        _301 = &_302;
        _300 = &(*_301);
        _299 = move _300 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_300);
        _541 = const false;
        _297 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _298, move _299) -> [return: bb119, unwind: bb272];
    }

    bb119: {
        StorageDead(_299);
        _541 = const false;
        StorageDead(_298);
        StorageLive(_321);
        StorageLive(_322);
        _322 = _168;
        _321 = move _322 as u64 (IntToInt);
        StorageDead(_322);
        _296 = anchor_lang::system_program::allocate(move _297, move _321) -> [return: bb120, unwind: bb274];
    }

    bb120: {
        StorageDead(_321);
        StorageDead(_297);
        _295 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _296) -> [return: bb121, unwind: bb274];
    }

    bb121: {
        StorageDead(_296);
        _323 = discriminant(_295);
        switchInt(move _323) -> [0: bb122, 1: bb123, otherwise: bb5];
    }

    bb122: {
        StorageLive(_327);
        _327 = ((_295 as Continue).0: ());
        _294 = _327;
        StorageDead(_327);
        _566 = discriminant(_295);
        StorageDead(_317);
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_310);
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_295);
        StorageDead(_294);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        _330 = &(*_26);
        _329 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _330) -> [return: bb125, unwind: bb274];
    }

    bb123: {
        StorageLive(_324);
        _324 = move ((_295 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_326);
        _326 = move _324;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _326) -> [return: bb124, unwind: bb270];
    }

    bb124: {
        StorageDead(_326);
        StorageDead(_324);
        _598 = discriminant(_295);
        StorageDead(_317);
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_310);
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_295);
        StorageDead(_294);
        goto -> bb230;
    }

    bb125: {
        StorageDead(_330);
        _540 = const true;
        _328 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _329 };
        StorageDead(_329);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _333 = &_110;
        _332 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _333) -> [return: bb126, unwind: bb269];
    }

    bb126: {
        StorageDead(_333);
        StorageLive(_334);
        _540 = const false;
        _334 = move _328;
        _331 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _332, move _334) -> [return: bb127, unwind: bb269];
    }

    bb127: {
        StorageDead(_334);
        StorageDead(_332);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _539 = const true;
        _339 = move _331;
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = const b"referrer_name";
        _350 = &(*_351);
        _349 = move _350 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_350);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_7;
        _352 = <[u8; 32] as AsRef<[u8]>>::as_ref(move _353) -> [return: bb128, unwind: bb267];
    }

    bb128: {
        StorageDead(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = _134;
        _358 = [move _359];
        _357 = &_358;
        StorageDead(_359);
        StorageLive(_360);
        _360 = RangeFull;
        _356 = <[u8; 1] as Index<RangeFull>>::index(move _357, move _360) -> [return: bb129, unwind: bb267];
    }

    bb129: {
        StorageDead(_360);
        StorageDead(_357);
        _355 = &(*_356);
        _354 = &(*_355);
        _348 = [move _349, move _352, move _354];
        _347 = &_348;
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_349);
        StorageLive(_361);
        _361 = RangeFull;
        _346 = <[&[u8]; 3] as Index<RangeFull>>::index(move _347, move _361) -> [return: bb130, unwind: bb267];
    }

    bb130: {
        StorageDead(_361);
        StorageDead(_347);
        _345 = &(*_346);
        _344 = &(*_345);
        _343 = [move _344];
        StorageDead(_344);
        _342 = &_343;
        _341 = &(*_342);
        _340 = move _341 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_341);
        _539 = const false;
        _338 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _339, move _340) -> [return: bb131, unwind: bb267];
    }

    bb131: {
        StorageDead(_340);
        _539 = const false;
        StorageDead(_339);
        StorageLive(_362);
        _362 = &(*_1);
        _337 = anchor_lang::system_program::assign(move _338, move _362) -> [return: bb132, unwind: bb269];
    }

    bb132: {
        StorageDead(_362);
        StorageDead(_338);
        _336 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _337) -> [return: bb133, unwind: bb269];
    }

    bb133: {
        StorageDead(_337);
        _363 = discriminant(_336);
        switchInt(move _363) -> [0: bb134, 1: bb135, otherwise: bb5];
    }

    bb134: {
        StorageLive(_367);
        _367 = ((_336 as Continue).0: ());
        _335 = _367;
        StorageDead(_367);
        _568 = discriminant(_336);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_351);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_336);
        StorageDead(_335);
        _178 = const ();
        StorageDead(_331);
        _540 = const false;
        StorageDead(_328);
        StorageDead(_290);
        _542 = const false;
        StorageDead(_287);
        StorageDead(_259);
        goto -> bb137;
    }

    bb135: {
        StorageLive(_364);
        _364 = move ((_336 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_366);
        _366 = move _364;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _366) -> [return: bb136, unwind: bb265];
    }

    bb136: {
        StorageDead(_366);
        StorageDead(_364);
        _596 = discriminant(_336);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_351);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_331);
        _540 = const false;
        StorageDead(_328);
        goto -> bb230;
    }

    bb137: {
        StorageDead(_179);
        StorageDead(_178);
        StorageLive(_368);
        StorageLive(_369);
        _369 = &(*_1);
        StorageLive(_370);
        StorageLive(_371);
        _371 = &_26;
        _535 = deref_copy (*_371);
        _370 = &(*_535);
        _368 = anchor_lang::prelude::AccountLoader::<'_, ReferrerName>::try_from_unchecked(move _369, move _370) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_370);
        StorageDead(_369);
        _372 = discriminant(_368);
        switchInt(move _372) -> [0: bb140, 1: bb139, otherwise: bb5];
    }

    bb139: {
        StorageLive(_374);
        _374 = move ((_368 as Err).0: anchor_lang::error::Error);
        StorageLive(_376);
        StorageLive(_377);
        _377 = move _374;
        _376 = anchor_lang::error::Error::with_account_name::<&str>(move _377, const "referrer_name") -> [return: bb141, unwind: bb264];
    }

    bb140: {
        StorageLive(_373);
        _373 = move ((_368 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>);
        _169 = move _373;
        StorageDead(_373);
        StorageDead(_176);
        _570 = discriminant(_368);
        StorageDead(_371);
        StorageDead(_368);
        goto -> bb147;
    }

    bb141: {
        StorageDead(_377);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _376);
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_176);
        _594 = discriminant(_368);
        StorageDead(_371);
        StorageDead(_368);
        goto -> bb233;
    }

    bb142: {
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _380 = &_26;
        _536 = deref_copy (*_380);
        _379 = &(*_536);
        _378 = anchor_lang::prelude::AccountLoader::<'_, ReferrerName>::try_from(move _379) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_379);
        _381 = discriminant(_378);
        switchInt(move _381) -> [0: bb145, 1: bb144, otherwise: bb5];
    }

    bb144: {
        StorageLive(_383);
        _383 = move ((_378 as Err).0: anchor_lang::error::Error);
        StorageLive(_385);
        StorageLive(_386);
        _386 = move _383;
        _385 = anchor_lang::error::Error::with_account_name::<&str>(move _386, const "referrer_name") -> [return: bb146, unwind: bb263];
    }

    bb145: {
        StorageLive(_382);
        _382 = move ((_378 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>);
        _169 = move _382;
        StorageDead(_382);
        _572 = discriminant(_378);
        StorageDead(_380);
        StorageDead(_378);
        goto -> bb147;
    }

    bb146: {
        StorageDead(_386);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _385);
        StorageDead(_385);
        StorageDead(_383);
        _592 = discriminant(_378);
        StorageDead(_380);
        StorageDead(_378);
        goto -> bb233;
    }

    bb147: {
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_387);
        StorageLive(_388);
        _388 = const false;
        switchInt(move _388) -> [0: bb171, otherwise: bb148];
    }

    bb148: {
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = _168;
        StorageLive(_392);
        StorageLive(_393);
        _393 = &(*_164);
        _392 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _393) -> [return: bb149, unwind continue];
    }

    bb149: {
        StorageDead(_393);
        _390 = Ne(move _391, move _392);
        switchInt(move _390) -> [0: bb155, otherwise: bb150];
    }

    bb150: {
        StorageDead(_392);
        StorageDead(_391);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = ConstraintSpace;
        _397 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _398) -> [return: bb151, unwind continue];
    }

    bb151: {
        StorageDead(_398);
        _396 = anchor_lang::error::Error::with_account_name::<&str>(move _397, const "referrer_name") -> [return: bb152, unwind: bb253];
    }

    bb152: {
        _538 = const true;
        StorageDead(_397);
        StorageLive(_399);
        StorageLive(_400);
        _400 = _168;
        StorageLive(_401);
        StorageLive(_402);
        _402 = &(*_164);
        _401 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _402) -> [return: bb153, unwind: bb262];
    }

    bb153: {
        StorageDead(_402);
        _399 = (move _400, move _401);
        StorageDead(_401);
        StorageDead(_400);
        _538 = const false;
        _395 = anchor_lang::error::Error::with_values::<usize, usize>(move _396, move _399) -> [return: bb154, unwind: bb262];
    }

    bb154: {
        StorageDead(_399);
        _538 = const false;
        StorageDead(_396);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _395);
        StorageDead(_395);
        StorageDead(_390);
        StorageDead(_389);
        goto -> bb229;
    }

    bb155: {
        StorageDead(_392);
        StorageDead(_391);
        _389 = const ();
        StorageDead(_390);
        StorageDead(_389);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &_167;
        StorageLive(_406);
        _406 = &_1;
        _404 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _405, move _406) -> [return: bb156, unwind continue];
    }

    bb156: {
        switchInt(move _404) -> [0: bb161, otherwise: bb157];
    }

    bb157: {
        StorageDead(_406);
        StorageDead(_405);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = ConstraintOwner;
        _410 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _411) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_411);
        _409 = anchor_lang::error::Error::with_account_name::<&str>(move _410, const "referrer_name") -> [return: bb159, unwind: bb253];
    }

    bb159: {
        StorageDead(_410);
        StorageLive(_412);
        StorageLive(_413);
        _413 = (*_167);
        StorageLive(_414);
        _414 = (*_1);
        _412 = (move _413, move _414);
        StorageDead(_414);
        StorageDead(_413);
        _408 = anchor_lang::error::Error::with_pubkeys(move _409, move _412) -> [return: bb160, unwind: bb253];
    }

    bb160: {
        StorageDead(_412);
        StorageDead(_409);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _408);
        StorageDead(_408);
        StorageDead(_404);
        StorageDead(_403);
        goto -> bb229;
    }

    bb161: {
        StorageDead(_406);
        StorageDead(_405);
        _403 = const ();
        StorageDead(_404);
        StorageDead(_403);
        StorageLive(_415);
        StorageLive(_416);
        _416 = &_125;
        StorageLive(_417);
        _417 = _168;
        _415 = anchor_lang::prelude::Rent::minimum_balance(move _416, move _417) -> [return: bb162, unwind continue];
    }

    bb162: {
        StorageDead(_417);
        StorageDead(_416);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = &_169;
        _421 = <anchor_lang::prelude::AccountLoader<'_, ReferrerName> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _422) -> [return: bb163, unwind continue];
    }

    bb163: {
        _420 = &_421;
        StorageDead(_422);
        _419 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _420) -> [return: bb164, unwind: bb249];
    }

    bb164: {
        StorageDead(_420);
        StorageLive(_423);
        _423 = _415;
        _418 = Lt(move _419, move _423);
        switchInt(move _418) -> [0: bb169, otherwise: bb165];
    }

    bb165: {
        StorageDead(_423);
        drop(_421) -> [return: bb166, unwind: bb253];
    }

    bb166: {
        StorageDead(_421);
        StorageDead(_419);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        _427 = ConstraintRentExempt;
        _426 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _427) -> [return: bb167, unwind continue];
    }

    bb167: {
        StorageDead(_427);
        _425 = anchor_lang::error::Error::with_account_name::<&str>(move _426, const "referrer_name") -> [return: bb168, unwind: bb253];
    }

    bb168: {
        StorageDead(_426);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _425);
        StorageDead(_425);
        StorageDead(_418);
        StorageDead(_415);
        goto -> bb229;
    }

    bb169: {
        StorageDead(_423);
        drop(_421) -> [return: bb170, unwind: bb253];
    }

    bb170: {
        StorageDead(_421);
        StorageDead(_419);
        _387 = const ();
        StorageDead(_418);
        StorageDead(_415);
        goto -> bb172;
    }

    bb171: {
        _387 = const ();
        goto -> bb172;
    }

    bb172: {
        StorageDead(_388);
        StorageDead(_387);
        _163 = move _169;
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_164);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = &_163;
        _431 = &(*_432);
        _430 = <anchor_lang::prelude::AccountLoader<'_, ReferrerName> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _431) -> [return: bb173, unwind continue];
    }

    bb173: {
        StorageDead(_431);
        _429 = ((*_430).6: bool);
        switchInt(move _429) -> [0: bb174, otherwise: bb177];
    }

    bb174: {
        StorageDead(_432);
        StorageDead(_430);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = ConstraintMut;
        _435 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _436) -> [return: bb175, unwind continue];
    }

    bb175: {
        StorageDead(_436);
        _434 = anchor_lang::error::Error::with_account_name::<&str>(move _435, const "referrer_name") -> [return: bb176, unwind: bb253];
    }

    bb176: {
        StorageDead(_435);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _434);
        StorageDead(_434);
        StorageDead(_429);
        StorageDead(_428);
        goto -> bb235;
    }

    bb177: {
        StorageDead(_432);
        StorageDead(_430);
        _428 = const ();
        StorageDead(_429);
        StorageDead(_428);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _439 = &_125;
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &_163;
        _442 = <anchor_lang::prelude::AccountLoader<'_, ReferrerName> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _443) -> [return: bb178, unwind continue];
    }

    bb178: {
        _441 = &_442;
        StorageDead(_443);
        _440 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _441) -> [return: bb179, unwind: bb248];
    }

    bb179: {
        StorageDead(_441);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = &_163;
        _448 = <anchor_lang::prelude::AccountLoader<'_, ReferrerName> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _449) -> [return: bb180, unwind: bb248];
    }

    bb180: {
        _447 = &_448;
        StorageDead(_449);
        _446 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _447) -> [return: bb181, unwind: bb247];
    }

    bb181: {
        StorageDead(_447);
        _445 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _446) -> [return: bb182, unwind: bb247];
    }

    bb182: {
        _537 = const true;
        StorageDead(_446);
        _450 = discriminant(_445);
        switchInt(move _450) -> [0: bb183, 1: bb184, otherwise: bb5];
    }

    bb183: {
        StorageLive(_454);
        _454 = ((_445 as Continue).0: usize);
        _444 = _454;
        StorageDead(_454);
        _438 = anchor_lang::prelude::Rent::is_exempt(move _439, move _440, move _444) -> [return: bb186, unwind: bb260];
    }

    bb184: {
        StorageLive(_451);
        _451 = move ((_445 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_453);
        _453 = move _451;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _453) -> [return: bb185, unwind: bb260];
    }

    bb185: {
        StorageDead(_453);
        StorageDead(_451);
        StorageDead(_444);
        StorageDead(_440);
        StorageDead(_439);
        _590 = discriminant(_445);
        drop(_448) -> [return: bb226, unwind: bb248];
    }

    bb186: {
        switchInt(move _438) -> [0: bb188, otherwise: bb187];
    }

    bb187: {
        StorageDead(_444);
        StorageDead(_440);
        StorageDead(_439);
        _574 = discriminant(_445);
        drop(_448) -> [return: bb193, unwind: bb248];
    }

    bb188: {
        StorageDead(_444);
        StorageDead(_440);
        StorageDead(_439);
        _576 = discriminant(_445);
        drop(_448) -> [return: bb189, unwind: bb248];
    }

    bb189: {
        StorageDead(_448);
        _537 = const false;
        StorageDead(_445);
        drop(_442) -> [return: bb190, unwind: bb253];
    }

    bb190: {
        StorageDead(_442);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = ConstraintRentExempt;
        _457 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _458) -> [return: bb191, unwind continue];
    }

    bb191: {
        StorageDead(_458);
        _456 = anchor_lang::error::Error::with_account_name::<&str>(move _457, const "referrer_name") -> [return: bb192, unwind: bb253];
    }

    bb192: {
        StorageDead(_457);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _456);
        StorageDead(_456);
        goto -> bb228;
    }

    bb193: {
        StorageDead(_448);
        _537 = const false;
        StorageDead(_445);
        drop(_442) -> [return: bb194, unwind: bb253];
    }

    bb194: {
        StorageDead(_442);
        _437 = const ();
        StorageDead(_438);
        StorageDead(_437);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        _463 = &_35;
        _462 = &(*_463);
        _461 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _462) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_462);
        _460 = ((*_461).6: bool);
        switchInt(move _460) -> [0: bb196, otherwise: bb199];
    }

    bb196: {
        StorageDead(_463);
        StorageDead(_461);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = ConstraintMut;
        _466 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _467) -> [return: bb197, unwind continue];
    }

    bb197: {
        StorageDead(_467);
        _465 = anchor_lang::error::Error::with_account_name::<&str>(move _466, const "user") -> [return: bb198, unwind: bb253];
    }

    bb198: {
        StorageDead(_466);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _465);
        StorageDead(_465);
        StorageDead(_460);
        StorageDead(_459);
        goto -> bb235;
    }

    bb199: {
        StorageDead(_463);
        StorageDead(_461);
        _459 = const ();
        StorageDead(_460);
        StorageDead(_459);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _473 = &_35;
        _472 = &(*_473);
        StorageLive(_474);
        StorageLive(_475);
        _475 = &_65;
        _474 = &(*_475);
        _471 = constraints::can_sign_for_user(move _472, move _474) -> [return: bb200, unwind continue];
    }

    bb200: {
        StorageDead(_474);
        StorageDead(_472);
        _470 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _471) -> [return: bb201, unwind: bb253];
    }

    bb201: {
        StorageDead(_471);
        _476 = discriminant(_470);
        switchInt(move _476) -> [0: bb202, 1: bb203, otherwise: bb5];
    }

    bb202: {
        StorageLive(_480);
        _480 = ((_470 as Continue).0: bool);
        _469 = _480;
        StorageDead(_480);
        switchInt(move _469) -> [0: bb255, otherwise: bb254];
    }

    bb203: {
        StorageLive(_477);
        _477 = move ((_470 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_479);
        _479 = move _477;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _479) -> [return: bb204, unwind: bb259];
    }

    bb204: {
        StorageDead(_479);
        StorageDead(_477);
        _588 = discriminant(_470);
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_470);
        goto -> bb225;
    }

    bb205: {
        StorageDead(_484);
        _482 = anchor_lang::error::Error::with_account_name::<&str>(move _483, const "user") -> [return: bb206, unwind: bb253];
    }

    bb206: {
        StorageDead(_483);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _482);
        StorageDead(_482);
        goto -> bb225;
    }

    bb207: {
        StorageDead(_488);
        _486 = ((*_487).6: bool);
        switchInt(move _486) -> [0: bb208, otherwise: bb211];
    }

    bb208: {
        StorageDead(_489);
        StorageDead(_487);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        _493 = ConstraintMut;
        _492 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _493) -> [return: bb209, unwind continue];
    }

    bb209: {
        StorageDead(_493);
        _491 = anchor_lang::error::Error::with_account_name::<&str>(move _492, const "user_stats") -> [return: bb210, unwind: bb253];
    }

    bb210: {
        StorageDead(_492);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _491);
        StorageDead(_491);
        StorageDead(_486);
        StorageDead(_485);
        goto -> bb235;
    }

    bb211: {
        StorageDead(_489);
        StorageDead(_487);
        _485 = const ();
        StorageDead(_486);
        StorageDead(_485);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = &_35;
        _498 = &(*_499);
        StorageLive(_500);
        StorageLive(_501);
        _501 = &_50;
        _500 = &(*_501);
        _497 = constraints::is_stats_for_user(move _498, move _500) -> [return: bb212, unwind continue];
    }

    bb212: {
        StorageDead(_500);
        StorageDead(_498);
        _496 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _497) -> [return: bb213, unwind: bb253];
    }

    bb213: {
        StorageDead(_497);
        _502 = discriminant(_496);
        switchInt(move _502) -> [0: bb214, 1: bb215, otherwise: bb5];
    }

    bb214: {
        StorageLive(_506);
        _506 = ((_496 as Continue).0: bool);
        _495 = _506;
        StorageDead(_506);
        switchInt(move _495) -> [0: bb257, otherwise: bb256];
    }

    bb215: {
        StorageLive(_503);
        _503 = move ((_496 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_505);
        _505 = move _503;
        _0 = <std::result::Result<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _505) -> [return: bb216, unwind: bb258];
    }

    bb216: {
        StorageDead(_505);
        StorageDead(_503);
        _586 = discriminant(_496);
        StorageDead(_501);
        StorageDead(_499);
        StorageDead(_496);
        goto -> bb224;
    }

    bb217: {
        StorageDead(_510);
        _508 = anchor_lang::error::Error::with_account_name::<&str>(move _509, const "user_stats") -> [return: bb218, unwind: bb253];
    }

    bb218: {
        StorageDead(_509);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _508);
        StorageDead(_508);
        goto -> bb224;
    }

    bb219: {
        StorageDead(_514);
        _512 = ((*_513).6: bool);
        switchInt(move _512) -> [0: bb220, otherwise: bb223];
    }

    bb220: {
        StorageDead(_515);
        StorageDead(_513);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        _519 = ConstraintMut;
        _518 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _519) -> [return: bb221, unwind continue];
    }

    bb221: {
        StorageDead(_519);
        _517 = anchor_lang::error::Error::with_account_name::<&str>(move _518, const "payer") -> [return: bb222, unwind: bb253];
    }

    bb222: {
        StorageDead(_518);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Err(move _517);
        StorageDead(_517);
        StorageDead(_512);
        StorageDead(_511);
        goto -> bb235;
    }

    bb223: {
        StorageDead(_515);
        StorageDead(_513);
        _511 = const ();
        StorageDead(_512);
        StorageDead(_511);
        StorageLive(_520);
        StorageLive(_521);
        _521 = move _163;
        StorageLive(_522);
        _522 = move _35;
        StorageLive(_523);
        _523 = move _50;
        StorageLive(_524);
        _524 = move _65;
        StorageLive(_525);
        _525 = move _80;
        StorageLive(_526);
        _526 = move _95;
        StorageLive(_527);
        _527 = move _110;
        _520 = instructions::user::InitializeReferrerName::<'_> { referrer_name: move _521, user: move _522, user_stats: move _523, authority: move _524, payer: move _525, rent: move _526, system_program: move _527 };
        StorageDead(_527);
        StorageDead(_526);
        StorageDead(_525);
        StorageDead(_524);
        StorageDead(_523);
        StorageDead(_522);
        StorageDead(_521);
        _0 = std::result::Result::<instructions::user::InitializeReferrerName<'_>, anchor_lang::error::Error>::Ok(move _520);
        StorageDead(_520);
        StorageDead(_163);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_125);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb246;
    }

    bb224: {
        StorageDead(_495);
        StorageDead(_494);
        goto -> bb235;
    }

    bb225: {
        StorageDead(_469);
        StorageDead(_468);
        goto -> bb235;
    }

    bb226: {
        StorageDead(_448);
        _537 = const false;
        StorageDead(_445);
        drop(_442) -> [return: bb227, unwind: bb253];
    }

    bb227: {
        StorageDead(_442);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_438);
        StorageDead(_437);
        goto -> bb235;
    }

    bb229: {
        StorageDead(_388);
        StorageDead(_387);
        goto -> bb234;
    }

    bb230: {
        StorageDead(_290);
        _542 = const false;
        StorageDead(_287);
        goto -> bb231;
    }

    bb231: {
        StorageDead(_259);
        goto -> bb232;
    }

    bb232: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_176);
        goto -> bb233;
    }

    bb233: {
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb234;
    }

    bb234: {
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_164);
        goto -> bb235;
    }

    bb235: {
        StorageDead(_163);
        goto -> bb236;
    }

    bb236: {
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb237;
    }

    bb237: {
        StorageDead(_125);
        goto -> bb238;
    }

    bb238: {
        StorageDead(_110);
        goto -> bb239;
    }

    bb239: {
        StorageDead(_95);
        goto -> bb240;
    }

    bb240: {
        StorageDead(_80);
        goto -> bb241;
    }

    bb241: {
        StorageDead(_65);
        goto -> bb242;
    }

    bb242: {
        StorageDead(_50);
        goto -> bb243;
    }

    bb243: {
        StorageDead(_35);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb244;
    }

    bb244: {
        StorageDead(_7);
        goto -> bb245;
    }

    bb245: {
        StorageDead(_6);
        goto -> bb246;
    }

    bb246: {
        return;
    }

    bb247 (cleanup): {
        drop(_448) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        drop(_442) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        drop(_421) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb250 (cleanup): {
        drop(_269) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        drop(_242) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb252 (cleanup): {
        drop(_186) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb253 (cleanup): {
        resume;
    }

    bb254: {
        _578 = discriminant(_470);
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_470);
        _468 = const ();
        StorageDead(_469);
        StorageDead(_468);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        _489 = &_50;
        _488 = &(*_489);
        _487 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _488) -> [return: bb207, unwind continue];
    }

    bb255: {
        _580 = discriminant(_470);
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_470);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        _484 = ConstraintRaw;
        _483 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _484) -> [return: bb205, unwind continue];
    }

    bb256: {
        _582 = discriminant(_496);
        StorageDead(_501);
        StorageDead(_499);
        StorageDead(_496);
        _494 = const ();
        StorageDead(_495);
        StorageDead(_494);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        _515 = &_80;
        _514 = &(*_515);
        _513 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _514) -> [return: bb219, unwind continue];
    }

    bb257: {
        _584 = discriminant(_496);
        StorageDead(_501);
        StorageDead(_499);
        StorageDead(_496);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        _510 = ConstraintRaw;
        _509 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _510) -> [return: bb217, unwind continue];
    }

    bb258 (cleanup): {
        _618 = discriminant(_496);
        goto -> bb253;
    }

    bb259 (cleanup): {
        _619 = discriminant(_470);
        goto -> bb253;
    }

    bb260 (cleanup): {
        _620 = discriminant(_445);
        goto -> bb247;
    }

    bb261 (cleanup): {
        drop(_396) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb262 (cleanup): {
        switchInt(_538) -> [0: bb253, otherwise: bb261];
    }

    bb263 (cleanup): {
        _621 = discriminant(_378);
        goto -> bb253;
    }

    bb264 (cleanup): {
        _622 = discriminant(_368);
        goto -> bb253;
    }

    bb265 (cleanup): {
        _623 = discriminant(_336);
        goto -> bb269;
    }

    bb266 (cleanup): {
        drop(_339) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        switchInt(_539) -> [0: bb269, otherwise: bb266];
    }

    bb268 (cleanup): {
        drop(_328) -> [return: bb274, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        switchInt(_540) -> [0: bb274, otherwise: bb268];
    }

    bb270 (cleanup): {
        _624 = discriminant(_295);
        goto -> bb274;
    }

    bb271 (cleanup): {
        drop(_298) -> [return: bb274, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        switchInt(_541) -> [0: bb274, otherwise: bb271];
    }

    bb273 (cleanup): {
        drop(_287) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        switchInt(_542) -> [0: bb253, otherwise: bb273];
    }

    bb275 (cleanup): {
        _625 = discriminant(_278);
        goto -> bb277;
    }

    bb276 (cleanup): {
        drop(_268) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        switchInt(_543) -> [0: bb253, otherwise: bb276];
    }

    bb278 (cleanup): {
        drop(_240) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb279 (cleanup): {
        switchInt(_544) -> [0: bb253, otherwise: bb278];
    }

    bb280 (cleanup): {
        _626 = discriminant(_195);
        goto -> bb284;
    }

    bb281 (cleanup): {
        drop(_198) -> [return: bb284, unwind terminate(cleanup)];
    }

    bb282 (cleanup): {
        switchInt(_545) -> [0: bb284, otherwise: bb281];
    }

    bb283 (cleanup): {
        drop(_185) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb284 (cleanup): {
        switchInt(_546) -> [0: bb253, otherwise: bb283];
    }

    bb285 (cleanup): {
        drop(_156) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb286 (cleanup): {
        switchInt(_547) -> [0: bb253, otherwise: bb285];
    }

    bb287 (cleanup): {
        _627 = discriminant(_126);
        goto -> bb253;
    }

    bb288 (cleanup): {
        _628 = discriminant(_111);
        goto -> bb253;
    }

    bb289 (cleanup): {
        _629 = discriminant(_96);
        goto -> bb253;
    }

    bb290 (cleanup): {
        _630 = discriminant(_81);
        goto -> bb253;
    }

    bb291 (cleanup): {
        _631 = discriminant(_66);
        goto -> bb253;
    }

    bb292 (cleanup): {
        _632 = discriminant(_51);
        goto -> bb253;
    }

    bb293 (cleanup): {
        _633 = discriminant(_36);
        goto -> bb253;
    }
}

alloc306 (size: 13, align: 1) {
    72 65 66 65 72 72 65 72 5f 6e 61 6d 65          │ referrer_name
}

alloc305 (size: 13, align: 1) {
    72 65 66 65 72 72 65 72 5f 6e 61 6d 65          │ referrer_name
}

alloc304 (size: 13, align: 1) {
    72 65 66 65 72 72 65 72 5f 6e 61 6d 65          │ referrer_name
}

alloc303 (size: 13, align: 1) {
    72 65 66 65 72 72 65 72 5f 6e 61 6d 65          │ referrer_name
}
