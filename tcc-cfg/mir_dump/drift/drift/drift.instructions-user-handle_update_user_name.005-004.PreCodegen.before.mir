// MIR for `instructions::user::handle_update_user_name` before PreCodegen

fn instructions::user::handle_update_user_name(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::UpdateUser<'_>>, _2: u16, _3: [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug _sub_account_id => _2;
    debug name => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: std::cell::RefMut<'_, state::user::User>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _9: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: std::cell::RefMut<'_, state::user::User>;
    let mut _15: [u8; 32];
    let mut _16: &mut state::user::User;
    let mut _17: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _18: ();
    let mut _19: &mut instructions::user::UpdateUser<'_>;
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: isize;
    scope 1 {
        debug user => _4;
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _19 = deref_copy (_1.1: &mut instructions::user::UpdateUser<'_>);
        _8 = &((*_19).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _6 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _7, move _9) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _6) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _4 = move _14;
        StorageDead(_14);
        _22 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_15);
        _15 = _3;
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut _4;
        _16 = <RefMut<'_, User> as DerefMut>::deref_mut(move _17) -> [return: bb8, unwind: bb11];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _20 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb10;
    }

    bb8: {
        StorageDead(_17);
        ((*_16).2: [u8; 32]) = move _15;
        StorageDead(_15);
        StorageDead(_16);
        StorageLive(_18);
        _18 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _18);
        StorageDead(_18);
        drop(_4) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        StorageDead(_4);
        goto -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        _24 = discriminant(_5);
        goto -> bb12;
    }
}
