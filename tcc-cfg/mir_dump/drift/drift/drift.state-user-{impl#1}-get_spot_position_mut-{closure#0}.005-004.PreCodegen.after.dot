digraph Mir_0_4283 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn User::get_spot_position_mut::{closure#0}(_1: Closure(DefId(0:4283 ~ drift[d311]::state::user::{impl#1}::get_spot_position_mut::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((usize,)) -&gt; &amp;ReErased mut state::user::SpotPosition, []), (&amp;ReErased mut state::user::User,)]), _2: usize) -&gt; &amp;ReErased mut state::user::SpotPosition<br align="left"/>let _3: usize;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: &amp;ReErased mut state::user::User;<br align="left"/>let mut _7: &amp;ReErased mut state::user::User;<br align="left"/>debug market_index =&gt; _2;<br align="left"/>debug self =&gt; (_1.0: &amp;mut state::user::User);<br align="left"/>>;
    bb0__0_4283 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = _2<br/>_6 = deref_copy (_1.0: &amp;mut state::user::User)<br/>_4 = Len(((*_6).3: [state::user::SpotPosition; 8]))<br/>_5 = Lt(_3, _4)<br/></td></tr><tr><td align="left">assert(move _5, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _4, _3)</td></tr></table>>];
    bb1__0_4283 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = deref_copy (_1.0: &amp;mut state::user::User)<br/>_0 = &amp;mut ((*_7).3: [state::user::SpotPosition; 8])[_3]<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4283 -> bb1__0_4283 [label="success"];
}
