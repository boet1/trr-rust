digraph Mir_0_2839 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_max_borrow_token_amount(_1: u128, _2: u128, _3: u128, _4: u128, _5: u128, _6: u8) -&gt; std::result::Result&lt;u128, error::ErrorCode&gt;<br align="left"/>let _7: u128;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: u128;<br align="left"/>let _10: u128;<br align="left"/>let mut _11: bool;<br align="left"/>let mut _12: u8;<br align="left"/>let mut _13: u128;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: u128;<br align="left"/>let mut _16: u128;<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: u128;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: u128;<br align="left"/>let mut _21: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _22: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _23: u128;<br align="left"/>let mut _24: u128;<br align="left"/>let mut _25: u128;<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: isize;<br align="left"/>let _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _29: !;<br align="left"/>let mut _30: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _31: u128;<br align="left"/>let mut _32: u128;<br align="left"/>let mut _33: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _34: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _35: u128;<br align="left"/>let mut _36: u128;<br align="left"/>let mut _37: u128;<br align="left"/>let mut _38: bool;<br align="left"/>let mut _39: isize;<br align="left"/>let _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _41: !;<br align="left"/>let mut _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _43: u128;<br align="left"/>let mut _44: u128;<br align="left"/>let mut _45: u128;<br align="left"/>let mut _46: u128;<br align="left"/>let mut _47: u128;<br align="left"/>let mut _48: u128;<br align="left"/>let mut _49: u128;<br align="left"/>let mut _50: u128;<br align="left"/>let mut _51: bool;<br align="left"/>let mut _52: u128;<br align="left"/>let mut _53: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _54: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _55: u128;<br align="left"/>let mut _56: u128;<br align="left"/>let mut _57: u128;<br align="left"/>let mut _58: bool;<br align="left"/>let mut _59: isize;<br align="left"/>let _60: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _61: !;<br align="left"/>let mut _62: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _63: u128;<br align="left"/>let mut _64: u128;<br align="left"/>let mut _65: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _66: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _67: u128;<br align="left"/>let mut _68: u128;<br align="left"/>let mut _69: u128;<br align="left"/>let mut _70: bool;<br align="left"/>let mut _71: isize;<br align="left"/>let _72: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _73: !;<br align="left"/>let mut _74: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _75: u128;<br align="left"/>let mut _76: u128;<br align="left"/>let mut _77: u128;<br align="left"/>debug deposit_token_amount =&gt; _1;<br align="left"/>debug deposit_token_twap =&gt; _2;<br align="left"/>debug borrow_token_twap =&gt; _3;<br align="left"/>debug withdraw_guard_threshold =&gt; _4;<br align="left"/>debug max_token_borrows =&gt; _5;<br align="left"/>debug pool_id =&gt; _6;<br align="left"/>debug lesser_deposit_amount =&gt; _7;<br align="left"/>debug max_borrow_token =&gt; _10;<br align="left"/>debug residual =&gt; _28;<br align="left"/>debug val =&gt; _31;<br align="left"/>debug residual =&gt; _40;<br align="left"/>debug val =&gt; _43;<br align="left"/>debug residual =&gt; _60;<br align="left"/>debug val =&gt; _63;<br align="left"/>debug residual =&gt; _72;<br align="left"/>debug val =&gt; _75;<br align="left"/>>;
    bb0__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _1<br/>StorageLive(_9)<br/>_9 = _2<br/></td></tr><tr><td align="left">_7 = &lt;u128 as Ord&gt;::min(move _8, move _9)</td></tr></table>>];
    bb1__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _6<br/>_11 = Eq(move _12, const 0_u8)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb2__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _4<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _7<br/>_19 = Eq(const 3_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _19, &quot;attempt to divide `{}` by zero&quot;, _18)</td></tr></table>>];
    bb3__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_17 = Div(move _18, const 3_u128)<br/>StorageDead(_18)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _3<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = _7<br/>_26 = Eq(const 5_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _26, &quot;attempt to divide `{}` by zero&quot;, _25)</td></tr></table>>];
    bb4__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_24 = Div(move _25, const 5_u128)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_22 = &lt;u128 as SafeMath&gt;::safe_add(move _23, move _24)</td></tr></table>>];
    bb5__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_21 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _22)</td></tr></table>>];
    bb6__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>_27 = discriminant(_21)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb7__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_21 as Continue).0: u128)<br/>_20 = _31<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">_16 = &lt;u128 as Ord&gt;::max(move _17, move _20)</td></tr></table>>];
    bb8__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_21 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_30)<br/>_30 = _28<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _30)</td></tr></table>>];
    bb10__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/>StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_17)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = _7<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = _7<br/>_38 = Eq(const 14_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _38, &quot;attempt to divide `{}` by zero&quot;, _37)</td></tr></table>>];
    bb12__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_36 = Div(move _37, const 14_u128)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">_34 = &lt;u128 as SafeMath&gt;::safe_sub(move _35, move _36)</td></tr></table>>];
    bb13__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_33 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _34)</td></tr></table>>];
    bb14__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>_39 = discriminant(_33)<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb15__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_33 as Continue).0: u128)<br/>_32 = _43<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">_15 = &lt;u128 as Ord&gt;::min(move _16, move _32)</td></tr></table>>];
    bb16__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_33 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_42)<br/>_42 = _40<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _42)</td></tr></table>>];
    bb17__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_32)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_13 = &lt;u128 as Ord&gt;::max(move _14, move _15)</td></tr></table>>];
    bb19__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_44)<br/>_44 = _5<br/></td></tr><tr><td align="left">_10 = &lt;u128 as Ord&gt;::min(move _13, move _44)</td></tr></table>>];
    bb20__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_13)<br/>StorageDead(_33)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>_46 = _4<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = _7<br/>_51 = Eq(const 2_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _51, &quot;attempt to divide `{}` by zero&quot;, _50)</td></tr></table>>];
    bb22__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_49 = Div(move _50, const 2_u128)<br/>StorageDead(_50)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = _3<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = _7<br/>_58 = Eq(const 3_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _58, &quot;attempt to divide `{}` by zero&quot;, _57)</td></tr></table>>];
    bb23__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_56 = Div(move _57, const 3_u128)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">_54 = &lt;u128 as SafeMath&gt;::safe_add(move _55, move _56)</td></tr></table>>];
    bb24__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">_53 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _54)</td></tr></table>>];
    bb25__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>_59 = discriminant(_53)<br/></td></tr><tr><td align="left">switchInt(move _59)</td></tr></table>>];
    bb26__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = ((_53 as Continue).0: u128)<br/>_52 = _63<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">_48 = &lt;u128 as Ord&gt;::max(move _49, move _52)</td></tr></table>>];
    bb27__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_60)<br/>_60 = ((_53 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_62)<br/>_62 = _60<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _62)</td></tr></table>>];
    bb28__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_60)<br/>StorageDead(_52)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_49)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>_67 = _7<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = _7<br/>_70 = Eq(const 20_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _70, &quot;attempt to divide `{}` by zero&quot;, _69)</td></tr></table>>];
    bb30__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_68 = Div(move _69, const 20_u128)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">_66 = &lt;u128 as SafeMath&gt;::safe_sub(move _67, move _68)</td></tr></table>>];
    bb31__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">_65 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _66)</td></tr></table>>];
    bb32__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>_71 = discriminant(_65)<br/></td></tr><tr><td align="left">switchInt(move _71)</td></tr></table>>];
    bb33__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_75)<br/>_75 = ((_65 as Continue).0: u128)<br/>_64 = _75<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">_47 = &lt;u128 as Ord&gt;::min(move _48, move _64)</td></tr></table>>];
    bb34__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageLive(_72)<br/>_72 = ((_65 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_74)<br/>_74 = _72<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _74)</td></tr></table>>];
    bb35__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageDead(_72)<br/>StorageDead(_64)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">_45 = &lt;u128 as Ord&gt;::max(move _46, move _47)</td></tr></table>>];
    bb37__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_46)<br/>StorageLive(_76)<br/>_76 = _5<br/></td></tr><tr><td align="left">_10 = &lt;u128 as Ord&gt;::min(move _45, move _76)</td></tr></table>>];
    bb38__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_45)<br/>StorageDead(_65)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageLive(_77)<br/>_77 = _10<br/>_0 = std::result::Result::&lt;u128, error::ErrorCode&gt;::Ok(move _77)<br/>StorageDead(_77)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_2839 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2839 -> bb1__0_2839 [label="return"];
    bb1__0_2839 -> bb21__0_2839 [label="0"];
    bb1__0_2839 -> bb2__0_2839 [label="otherwise"];
    bb2__0_2839 -> bb3__0_2839 [label="success"];
    bb3__0_2839 -> bb4__0_2839 [label="success"];
    bb4__0_2839 -> bb5__0_2839 [label="return"];
    bb5__0_2839 -> bb6__0_2839 [label="return"];
    bb6__0_2839 -> bb7__0_2839 [label="0"];
    bb6__0_2839 -> bb9__0_2839 [label="1"];
    bb6__0_2839 -> bb8__0_2839 [label="otherwise"];
    bb7__0_2839 -> bb11__0_2839 [label="return"];
    bb9__0_2839 -> bb10__0_2839 [label="return"];
    bb10__0_2839 -> bb41__0_2839 [label=""];
    bb11__0_2839 -> bb12__0_2839 [label="success"];
    bb12__0_2839 -> bb13__0_2839 [label="return"];
    bb13__0_2839 -> bb14__0_2839 [label="return"];
    bb14__0_2839 -> bb15__0_2839 [label="0"];
    bb14__0_2839 -> bb16__0_2839 [label="1"];
    bb14__0_2839 -> bb8__0_2839 [label="otherwise"];
    bb15__0_2839 -> bb18__0_2839 [label="return"];
    bb16__0_2839 -> bb17__0_2839 [label="return"];
    bb17__0_2839 -> bb41__0_2839 [label=""];
    bb18__0_2839 -> bb19__0_2839 [label="return"];
    bb19__0_2839 -> bb20__0_2839 [label="return"];
    bb20__0_2839 -> bb39__0_2839 [label=""];
    bb21__0_2839 -> bb22__0_2839 [label="success"];
    bb22__0_2839 -> bb23__0_2839 [label="success"];
    bb23__0_2839 -> bb24__0_2839 [label="return"];
    bb24__0_2839 -> bb25__0_2839 [label="return"];
    bb25__0_2839 -> bb26__0_2839 [label="0"];
    bb25__0_2839 -> bb27__0_2839 [label="1"];
    bb25__0_2839 -> bb8__0_2839 [label="otherwise"];
    bb26__0_2839 -> bb29__0_2839 [label="return"];
    bb27__0_2839 -> bb28__0_2839 [label="return"];
    bb28__0_2839 -> bb40__0_2839 [label=""];
    bb29__0_2839 -> bb30__0_2839 [label="success"];
    bb30__0_2839 -> bb31__0_2839 [label="return"];
    bb31__0_2839 -> bb32__0_2839 [label="return"];
    bb32__0_2839 -> bb33__0_2839 [label="0"];
    bb32__0_2839 -> bb34__0_2839 [label="1"];
    bb32__0_2839 -> bb8__0_2839 [label="otherwise"];
    bb33__0_2839 -> bb36__0_2839 [label="return"];
    bb34__0_2839 -> bb35__0_2839 [label="return"];
    bb35__0_2839 -> bb40__0_2839 [label=""];
    bb36__0_2839 -> bb37__0_2839 [label="return"];
    bb37__0_2839 -> bb38__0_2839 [label="return"];
    bb38__0_2839 -> bb39__0_2839 [label=""];
    bb39__0_2839 -> bb43__0_2839 [label=""];
    bb40__0_2839 -> bb42__0_2839 [label=""];
    bb41__0_2839 -> bb42__0_2839 [label=""];
    bb42__0_2839 -> bb43__0_2839 [label=""];
}
