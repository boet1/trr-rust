// MIR for `admin::handle_recenter_perp_market_amm` before PreCodegen

fn admin::handle_recenter_perp_market_amm(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u128, _3: u128) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug peg_multiplier => _2;
    debug sqrt_k => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _20: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _26: ();
    let mut _27: &str;
    let _28: &str;
    let mut _29: &std::string::String;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[&str; 1];
    let _36: &[&str; 1];
    let _37: [&str; 1];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let mut _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let mut _43: &u16;
    let _44: &u16;
    let _45: &state::perp_market::PerpMarket;
    let mut _46: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _48: &state::perp_market::PerpMarket;
    let mut _49: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _51: &state::perp_market::PerpMarket;
    let mut _52: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _54: &state::perp_market::PerpMarket;
    let mut _55: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _57: &state::perp_market::PerpMarket;
    let mut _58: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _60: &state::perp_market::PerpMarket;
    let mut _61: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _63: &state::perp_market::PerpMarket;
    let mut _64: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _65: ();
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _67: std::result::Result<(), error::ErrorCode>;
    let mut _68: &mut state::perp_market::PerpMarket;
    let mut _69: &mut state::perp_market::PerpMarket;
    let mut _70: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _71: u128;
    let mut _72: u128;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _78: ();
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _80: std::result::Result<(), error::ErrorCode>;
    let mut _81: &state::perp_market::PerpMarket;
    let _82: &state::perp_market::PerpMarket;
    let mut _83: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: &state::perp_market::PerpMarket;
    let mut _91: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _93: &state::perp_market::PerpMarket;
    let mut _94: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _96: &state::perp_market::PerpMarket;
    let mut _97: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _99: &state::perp_market::PerpMarket;
    let mut _100: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _102: &state::perp_market::PerpMarket;
    let mut _103: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _105: &state::perp_market::PerpMarket;
    let mut _106: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _107: ();
    let mut _108: &str;
    let _109: &str;
    let mut _110: &std::string::String;
    let _111: &std::string::String;
    let _112: std::string::String;
    let mut _114: std::fmt::Arguments<'_>;
    let mut _115: &[&str];
    let mut _116: &[&str; 2];
    let _117: &[&str; 2];
    let _118: [&str; 2];
    let mut _119: &[core::fmt::rt::Argument<'_>];
    let mut _120: &[core::fmt::rt::Argument<'_>; 2];
    let _121: &[core::fmt::rt::Argument<'_>; 2];
    let _122: [core::fmt::rt::Argument<'_>; 2];
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &u128;
    let _125: &u128;
    let mut _126: core::fmt::rt::Argument<'_>;
    let mut _127: &u128;
    let _128: &u128;
    let _129: ();
    let mut _130: &str;
    let _131: &str;
    let mut _132: &std::string::String;
    let _133: &std::string::String;
    let _134: std::string::String;
    let mut _136: std::fmt::Arguments<'_>;
    let mut _137: &[&str];
    let mut _138: &[&str; 2];
    let _139: &[&str; 2];
    let _140: [&str; 2];
    let mut _141: &[core::fmt::rt::Argument<'_>];
    let mut _142: &[core::fmt::rt::Argument<'_>; 2];
    let _143: &[core::fmt::rt::Argument<'_>; 2];
    let _144: [core::fmt::rt::Argument<'_>; 2];
    let mut _145: core::fmt::rt::Argument<'_>;
    let mut _146: &u128;
    let _147: &u128;
    let mut _148: core::fmt::rt::Argument<'_>;
    let mut _149: &u128;
    let _150: &u128;
    let _151: ();
    let mut _152: &str;
    let _153: &str;
    let mut _154: &std::string::String;
    let _155: &std::string::String;
    let _156: std::string::String;
    let mut _158: std::fmt::Arguments<'_>;
    let mut _159: &[&str];
    let mut _160: &[&str; 2];
    let _161: &[&str; 2];
    let _162: [&str; 2];
    let mut _163: &[core::fmt::rt::Argument<'_>];
    let mut _164: &[core::fmt::rt::Argument<'_>; 2];
    let _165: &[core::fmt::rt::Argument<'_>; 2];
    let _166: [core::fmt::rt::Argument<'_>; 2];
    let mut _167: core::fmt::rt::Argument<'_>;
    let mut _168: &u128;
    let _169: &u128;
    let mut _170: core::fmt::rt::Argument<'_>;
    let mut _171: &u128;
    let _172: &u128;
    let _173: ();
    let mut _174: &str;
    let _175: &str;
    let mut _176: &std::string::String;
    let _177: &std::string::String;
    let _178: std::string::String;
    let mut _180: std::fmt::Arguments<'_>;
    let mut _181: &[&str];
    let mut _182: &[&str; 2];
    let _183: &[&str; 2];
    let _184: [&str; 2];
    let mut _185: &[core::fmt::rt::Argument<'_>];
    let mut _186: &[core::fmt::rt::Argument<'_>; 2];
    let _187: &[core::fmt::rt::Argument<'_>; 2];
    let _188: [core::fmt::rt::Argument<'_>; 2];
    let mut _189: core::fmt::rt::Argument<'_>;
    let mut _190: &u128;
    let _191: &u128;
    let mut _192: core::fmt::rt::Argument<'_>;
    let mut _193: &u128;
    let _194: &u128;
    let _195: ();
    let mut _196: &str;
    let _197: &str;
    let mut _198: &std::string::String;
    let _199: &std::string::String;
    let _200: std::string::String;
    let mut _202: std::fmt::Arguments<'_>;
    let mut _203: &[&str];
    let mut _204: &[&str; 2];
    let _205: &[&str; 2];
    let _206: [&str; 2];
    let mut _207: &[core::fmt::rt::Argument<'_>];
    let mut _208: &[core::fmt::rt::Argument<'_>; 2];
    let _209: &[core::fmt::rt::Argument<'_>; 2];
    let _210: [core::fmt::rt::Argument<'_>; 2];
    let mut _211: core::fmt::rt::Argument<'_>;
    let mut _212: &u128;
    let _213: &u128;
    let mut _214: core::fmt::rt::Argument<'_>;
    let mut _215: &u128;
    let _216: &u128;
    let _217: ();
    let mut _218: &str;
    let _219: &str;
    let mut _220: &std::string::String;
    let _221: &std::string::String;
    let _222: std::string::String;
    let mut _224: std::fmt::Arguments<'_>;
    let mut _225: &[&str];
    let mut _226: &[&str; 2];
    let _227: &[&str; 2];
    let _228: [&str; 2];
    let mut _229: &[core::fmt::rt::Argument<'_>];
    let mut _230: &[core::fmt::rt::Argument<'_>; 2];
    let _231: &[core::fmt::rt::Argument<'_>; 2];
    let _232: [core::fmt::rt::Argument<'_>; 2];
    let mut _233: core::fmt::rt::Argument<'_>;
    let mut _234: &u128;
    let _235: &u128;
    let mut _236: core::fmt::rt::Argument<'_>;
    let mut _237: &u128;
    let _238: &u128;
    let mut _239: ();
    let mut _247: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _248: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _14;
        let _32: std::string::String;
        let _47: u128;
        let mut _246: &[&str; 1];
        scope 10 {
            debug res => _32;
        }
        scope 11 {
            debug base_asset_reserve_before => _47;
            let _50: u128;
            scope 12 {
                debug quote_asset_reserve_before => _50;
                let _53: u128;
                scope 13 {
                    debug sqrt_k_before => _53;
                    let _56: u128;
                    scope 14 {
                        debug peg_multiplier_before => _56;
                        let _59: u128;
                        scope 15 {
                            debug max_base_asset_reserve_before => _59;
                            let _62: u128;
                            scope 16 {
                                debug min_base_asset_reserve_before => _62;
                                let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _77: ();
                                let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _88: ();
                                let _89: u128;
                                scope 17 {
                                    debug residual => _74;
                                    scope 18 {
                                    }
                                }
                                scope 19 {
                                    debug val => _77;
                                    scope 20 {
                                    }
                                }
                                scope 21 {
                                    debug residual => _85;
                                    scope 22 {
                                    }
                                }
                                scope 23 {
                                    debug val => _88;
                                    scope 24 {
                                    }
                                }
                                scope 25 {
                                    debug base_asset_reserve_after => _89;
                                    let _92: u128;
                                    scope 26 {
                                        debug quote_asset_reserve_after => _92;
                                        let _95: u128;
                                        scope 27 {
                                            debug sqrt_k_after => _95;
                                            let _98: u128;
                                            scope 28 {
                                                debug peg_multiplier_after => _98;
                                                let _101: u128;
                                                scope 29 {
                                                    debug max_base_asset_reserve_after => _101;
                                                    let _104: u128;
                                                    scope 30 {
                                                        debug min_base_asset_reserve_after => _104;
                                                        let _113: std::string::String;
                                                        let _135: std::string::String;
                                                        let _157: std::string::String;
                                                        let _179: std::string::String;
                                                        let _201: std::string::String;
                                                        let _223: std::string::String;
                                                        let mut _240: &[&str; 2];
                                                        let mut _241: &[&str; 2];
                                                        let mut _242: &[&str; 2];
                                                        let mut _243: &[&str; 2];
                                                        let mut _244: &[&str; 2];
                                                        let mut _245: &[&str; 2];
                                                        scope 31 {
                                                            debug res => _113;
                                                        }
                                                        scope 32 {
                                                            debug res => _135;
                                                        }
                                                        scope 33 {
                                                            debug res => _157;
                                                        }
                                                        scope 34 {
                                                            debug res => _179;
                                                        }
                                                        scope 35 {
                                                            debug res => _201;
                                                        }
                                                        scope 36 {
                                                            debug res => _223;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _22;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _247 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _8 = &((*_247).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _7 = &(*_8);
        _6 = constraints::perp_market_valid(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb98];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _249 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _248 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _19 = &((*_248).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _18 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb100];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _255 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb89;
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _17 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _18, move _20) -> [return: bb8, unwind: bb98];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb9, unwind: bb98];
    }

    bb9: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _15 = move _25;
        StorageDead(_25);
        _14 = &mut _15;
        _253 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _246 = const _;
        _36 = &(*_246);
        _35 = &(*_36);
        _34 = move _35 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_14);
        _45 = <RefMut<'_, PerpMarket> as Deref>::deref(move _46) -> [return: bb13, unwind: bb97];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb12, unwind: bb99];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _251 = discriminant(_16);
        StorageDead(_16);
        goto -> bb88;
    }

    bb13: {
        StorageDead(_46);
        _44 = &((*_45).21: u16);
        _43 = &(*_44);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _43) -> [return: bb14, unwind: bb97];
    }

    bb14: {
        StorageDead(_43);
        _41 = [move _42];
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = move _39 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_39);
        _33 = Arguments::<'_>::new_v1(move _34, move _38) -> [return: bb15, unwind: bb97];
    }

    bb15: {
        StorageDead(_38);
        StorageDead(_34);
        _32 = format(move _33) -> [return: bb16, unwind: bb97];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_36);
        _31 = move _32;
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = <String as Deref>::deref(move _29) -> [return: bb17, unwind: bb96];
    }

    bb17: {
        _27 = &(*_28);
        StorageDead(_29);
        _26 = solana_program::log::sol_log(move _27) -> [return: bb18, unwind: bb96];
    }

    bb18: {
        StorageDead(_27);
        drop(_31) -> [return: bb19, unwind: bb97];
    }

    bb19: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_14);
        _48 = <RefMut<'_, PerpMarket> as Deref>::deref(move _49) -> [return: bb20, unwind: bb97];
    }

    bb20: {
        StorageDead(_49);
        _47 = (((*_48).1: state::perp_market::AMM).5: u128);
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &(*_14);
        _51 = <RefMut<'_, PerpMarket> as Deref>::deref(move _52) -> [return: bb21, unwind: bb97];
    }

    bb21: {
        StorageDead(_52);
        _50 = (((*_51).1: state::perp_market::AMM).6: u128);
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_14);
        _54 = <RefMut<'_, PerpMarket> as Deref>::deref(move _55) -> [return: bb22, unwind: bb97];
    }

    bb22: {
        StorageDead(_55);
        _53 = (((*_54).1: state::perp_market::AMM).10: u128);
        StorageDead(_54);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &(*_14);
        _57 = <RefMut<'_, PerpMarket> as Deref>::deref(move _58) -> [return: bb23, unwind: bb97];
    }

    bb23: {
        StorageDead(_58);
        _56 = (((*_57).1: state::perp_market::AMM).11: u128);
        StorageDead(_57);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_14);
        _60 = <RefMut<'_, PerpMarket> as Deref>::deref(move _61) -> [return: bb24, unwind: bb97];
    }

    bb24: {
        StorageDead(_61);
        _59 = (((*_60).1: state::perp_market::AMM).9: u128);
        StorageDead(_60);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &(*_14);
        _63 = <RefMut<'_, PerpMarket> as Deref>::deref(move _64) -> [return: bb25, unwind: bb97];
    }

    bb25: {
        StorageDead(_64);
        _62 = (((*_63).1: state::perp_market::AMM).8: u128);
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &mut (*_14);
        _69 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _70) -> [return: bb26, unwind: bb97];
    }

    bb26: {
        _68 = &mut (*_69);
        StorageDead(_70);
        StorageLive(_71);
        _71 = _2;
        StorageLive(_72);
        _72 = _3;
        _67 = controller::amm::recenter_perp_market_amm(move _68, move _71, move _72) -> [return: bb27, unwind: bb97];
    }

    bb27: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_68);
        _66 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _67) -> [return: bb28, unwind: bb97];
    }

    bb28: {
        StorageDead(_67);
        _73 = discriminant(_66);
        switchInt(move _73) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_77);
        _77 = ((_66 as Continue).0: ());
        _65 = _77;
        StorageDead(_77);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &(*_14);
        _82 = <RefMut<'_, PerpMarket> as Deref>::deref(move _83) -> [return: bb32, unwind: bb97];
    }

    bb30: {
        StorageLive(_74);
        _74 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb31, unwind: bb97];
    }

    bb31: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb87;
    }

    bb32: {
        _81 = &(*_82);
        StorageDead(_83);
        _80 = validate_perp_market(move _81) -> [return: bb33, unwind: bb97];
    }

    bb33: {
        StorageDead(_81);
        _79 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _80) -> [return: bb34, unwind: bb97];
    }

    bb34: {
        StorageDead(_80);
        _84 = discriminant(_79);
        switchInt(move _84) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_88);
        _88 = ((_79 as Continue).0: ());
        _78 = _88;
        StorageDead(_88);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_14);
        _90 = <RefMut<'_, PerpMarket> as Deref>::deref(move _91) -> [return: bb38, unwind: bb97];
    }

    bb36: {
        StorageLive(_85);
        _85 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb37, unwind: bb97];
    }

    bb37: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb87;
    }

    bb38: {
        StorageDead(_91);
        _89 = (((*_90).1: state::perp_market::AMM).5: u128);
        StorageDead(_90);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &(*_14);
        _93 = <RefMut<'_, PerpMarket> as Deref>::deref(move _94) -> [return: bb39, unwind: bb97];
    }

    bb39: {
        StorageDead(_94);
        _92 = (((*_93).1: state::perp_market::AMM).6: u128);
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &(*_14);
        _96 = <RefMut<'_, PerpMarket> as Deref>::deref(move _97) -> [return: bb40, unwind: bb97];
    }

    bb40: {
        StorageDead(_97);
        _95 = (((*_96).1: state::perp_market::AMM).10: u128);
        StorageDead(_96);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_14);
        _99 = <RefMut<'_, PerpMarket> as Deref>::deref(move _100) -> [return: bb41, unwind: bb97];
    }

    bb41: {
        StorageDead(_100);
        _98 = (((*_99).1: state::perp_market::AMM).11: u128);
        StorageDead(_99);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(*_14);
        _102 = <RefMut<'_, PerpMarket> as Deref>::deref(move _103) -> [return: bb42, unwind: bb97];
    }

    bb42: {
        StorageDead(_103);
        _101 = (((*_102).1: state::perp_market::AMM).9: u128);
        StorageDead(_102);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_14);
        _105 = <RefMut<'_, PerpMarket> as Deref>::deref(move _106) -> [return: bb43, unwind: bb97];
    }

    bb43: {
        StorageDead(_106);
        _104 = (((*_105).1: state::perp_market::AMM).8: u128);
        StorageDead(_105);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _245 = const _;
        _117 = &(*_245);
        _116 = &(*_117);
        _115 = move _116 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_47;
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _124) -> [return: bb44, unwind: bb97];
    }

    bb44: {
        StorageDead(_124);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &_89;
        _127 = &(*_128);
        _126 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _127) -> [return: bb45, unwind: bb97];
    }

    bb45: {
        StorageDead(_127);
        _122 = [move _123, move _126];
        StorageDead(_126);
        StorageDead(_123);
        _121 = &_122;
        _120 = &(*_121);
        _119 = move _120 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_120);
        _114 = Arguments::<'_>::new_v1(move _115, move _119) -> [return: bb46, unwind: bb97];
    }

    bb46: {
        StorageDead(_119);
        StorageDead(_115);
        _113 = format(move _114) -> [return: bb47, unwind: bb97];
    }

    bb47: {
        StorageDead(_114);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_117);
        _112 = move _113;
        StorageDead(_113);
        _111 = &_112;
        _110 = &(*_111);
        _109 = <String as Deref>::deref(move _110) -> [return: bb48, unwind: bb95];
    }

    bb48: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = solana_program::log::sol_log(move _108) -> [return: bb49, unwind: bb95];
    }

    bb49: {
        StorageDead(_108);
        drop(_112) -> [return: bb50, unwind: bb97];
    }

    bb50: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _244 = const _;
        _139 = &(*_244);
        _138 = &(*_139);
        _137 = move _138 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_50;
        _146 = &(*_147);
        _145 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _146) -> [return: bb51, unwind: bb97];
    }

    bb51: {
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_92;
        _149 = &(*_150);
        _148 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _149) -> [return: bb52, unwind: bb97];
    }

    bb52: {
        StorageDead(_149);
        _144 = [move _145, move _148];
        StorageDead(_148);
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        _141 = move _142 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_142);
        _136 = Arguments::<'_>::new_v1(move _137, move _141) -> [return: bb53, unwind: bb97];
    }

    bb53: {
        StorageDead(_141);
        StorageDead(_137);
        _135 = format(move _136) -> [return: bb54, unwind: bb97];
    }

    bb54: {
        StorageDead(_136);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_139);
        _134 = move _135;
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _131 = <String as Deref>::deref(move _132) -> [return: bb55, unwind: bb94];
    }

    bb55: {
        _130 = &(*_131);
        StorageDead(_132);
        _129 = solana_program::log::sol_log(move _130) -> [return: bb56, unwind: bb94];
    }

    bb56: {
        StorageDead(_130);
        drop(_134) -> [return: bb57, unwind: bb97];
    }

    bb57: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _243 = const _;
        _161 = &(*_243);
        _160 = &(*_161);
        _159 = move _160 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_160);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &_53;
        _168 = &(*_169);
        _167 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _168) -> [return: bb58, unwind: bb97];
    }

    bb58: {
        StorageDead(_168);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_95;
        _171 = &(*_172);
        _170 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _171) -> [return: bb59, unwind: bb97];
    }

    bb59: {
        StorageDead(_171);
        _166 = [move _167, move _170];
        StorageDead(_170);
        StorageDead(_167);
        _165 = &_166;
        _164 = &(*_165);
        _163 = move _164 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_164);
        _158 = Arguments::<'_>::new_v1(move _159, move _163) -> [return: bb60, unwind: bb97];
    }

    bb60: {
        StorageDead(_163);
        StorageDead(_159);
        _157 = format(move _158) -> [return: bb61, unwind: bb97];
    }

    bb61: {
        StorageDead(_158);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_161);
        _156 = move _157;
        StorageDead(_157);
        _155 = &_156;
        _154 = &(*_155);
        _153 = <String as Deref>::deref(move _154) -> [return: bb62, unwind: bb93];
    }

    bb62: {
        _152 = &(*_153);
        StorageDead(_154);
        _151 = solana_program::log::sol_log(move _152) -> [return: bb63, unwind: bb93];
    }

    bb63: {
        StorageDead(_152);
        drop(_156) -> [return: bb64, unwind: bb97];
    }

    bb64: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_151);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _242 = const _;
        _183 = &(*_242);
        _182 = &(*_183);
        _181 = move _182 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_182);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_56;
        _190 = &(*_191);
        _189 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _190) -> [return: bb65, unwind: bb97];
    }

    bb65: {
        StorageDead(_190);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &_98;
        _193 = &(*_194);
        _192 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _193) -> [return: bb66, unwind: bb97];
    }

    bb66: {
        StorageDead(_193);
        _188 = [move _189, move _192];
        StorageDead(_192);
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = move _186 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_186);
        _180 = Arguments::<'_>::new_v1(move _181, move _185) -> [return: bb67, unwind: bb97];
    }

    bb67: {
        StorageDead(_185);
        StorageDead(_181);
        _179 = format(move _180) -> [return: bb68, unwind: bb97];
    }

    bb68: {
        StorageDead(_180);
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_183);
        _178 = move _179;
        StorageDead(_179);
        _177 = &_178;
        _176 = &(*_177);
        _175 = <String as Deref>::deref(move _176) -> [return: bb69, unwind: bb92];
    }

    bb69: {
        _174 = &(*_175);
        StorageDead(_176);
        _173 = solana_program::log::sol_log(move _174) -> [return: bb70, unwind: bb92];
    }

    bb70: {
        StorageDead(_174);
        drop(_178) -> [return: bb71, unwind: bb97];
    }

    bb71: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_173);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _241 = const _;
        _205 = &(*_241);
        _204 = &(*_205);
        _203 = move _204 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_204);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_59;
        _212 = &(*_213);
        _211 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _212) -> [return: bb72, unwind: bb97];
    }

    bb72: {
        StorageDead(_212);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &_101;
        _215 = &(*_216);
        _214 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _215) -> [return: bb73, unwind: bb97];
    }

    bb73: {
        StorageDead(_215);
        _210 = [move _211, move _214];
        StorageDead(_214);
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = move _208 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_208);
        _202 = Arguments::<'_>::new_v1(move _203, move _207) -> [return: bb74, unwind: bb97];
    }

    bb74: {
        StorageDead(_207);
        StorageDead(_203);
        _201 = format(move _202) -> [return: bb75, unwind: bb97];
    }

    bb75: {
        StorageDead(_202);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_205);
        _200 = move _201;
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = <String as Deref>::deref(move _198) -> [return: bb76, unwind: bb91];
    }

    bb76: {
        _196 = &(*_197);
        StorageDead(_198);
        _195 = solana_program::log::sol_log(move _196) -> [return: bb77, unwind: bb91];
    }

    bb77: {
        StorageDead(_196);
        drop(_200) -> [return: bb78, unwind: bb97];
    }

    bb78: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _240 = const _;
        _227 = &(*_240);
        _226 = &(*_227);
        _225 = move _226 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_226);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_62;
        _234 = &(*_235);
        _233 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _234) -> [return: bb79, unwind: bb97];
    }

    bb79: {
        StorageDead(_234);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &_104;
        _237 = &(*_238);
        _236 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _237) -> [return: bb80, unwind: bb97];
    }

    bb80: {
        StorageDead(_237);
        _232 = [move _233, move _236];
        StorageDead(_236);
        StorageDead(_233);
        _231 = &_232;
        _230 = &(*_231);
        _229 = move _230 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_230);
        _224 = Arguments::<'_>::new_v1(move _225, move _229) -> [return: bb81, unwind: bb97];
    }

    bb81: {
        StorageDead(_229);
        StorageDead(_225);
        _223 = format(move _224) -> [return: bb82, unwind: bb97];
    }

    bb82: {
        StorageDead(_224);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_227);
        _222 = move _223;
        StorageDead(_223);
        _221 = &_222;
        _220 = &(*_221);
        _219 = <String as Deref>::deref(move _220) -> [return: bb83, unwind: bb90];
    }

    bb83: {
        _218 = &(*_219);
        StorageDead(_220);
        _217 = solana_program::log::sol_log(move _218) -> [return: bb84, unwind: bb90];
    }

    bb84: {
        StorageDead(_218);
        drop(_222) -> [return: bb85, unwind: bb97];
    }

    bb85: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_217);
        StorageLive(_239);
        _239 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _239);
        StorageDead(_239);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_47);
        drop(_15) -> [return: bb86, unwind: bb98];
    }

    bb86: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb89;
    }

    bb87: {
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_47);
        drop(_15) -> [return: bb88, unwind: bb98];
    }

    bb88: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb89;
    }

    bb89: {
        return;
    }

    bb90 (cleanup): {
        drop(_222) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_200) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_178) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_156) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_134) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_112) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_31) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_15) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        resume;
    }

    bb99 (cleanup): {
        _257 = discriminant(_16);
        goto -> bb98;
    }

    bb100 (cleanup): {
        _258 = discriminant(_5);
        goto -> bb98;
    }
}
