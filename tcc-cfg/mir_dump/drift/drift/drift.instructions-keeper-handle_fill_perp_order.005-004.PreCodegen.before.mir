// MIR for `keeper::handle_fill_perp_order` before PreCodegen

fn keeper::handle_fill_perp_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::FillOrder<'_>>, _2: Option<u32>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug order_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: u32;
    let _14: u16;
    let mut _15: (u32, u16);
    let _16: &std::cell::Ref<'_, state::user::User>;
    let _17: std::cell::Ref<'_, state::user::User>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _19: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _20: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _21: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _22: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: std::cell::Ref<'_, state::user::User>;
    let mut _29: std::option::Option<u32>;
    let mut _30: {closure@programs/drift/src/instructions/keeper.rs:96:48: 96:50};
    let mut _31: &&std::cell::Ref<'_, state::user::User>;
    let mut _33: std::option::Option<&state::user::Order>;
    let mut _34: &state::user::User;
    let _35: &state::user::User;
    let mut _36: &std::cell::Ref<'_, state::user::User>;
    let mut _37: u32;
    let mut _38: isize;
    let mut _40: !;
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: &std::string::String;
    let _45: &std::string::String;
    let _46: std::string::String;
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let mut _50: &[&str; 1];
    let _51: &[&str; 1];
    let _52: [&str; 1];
    let mut _53: &[core::fmt::rt::Argument<'_>];
    let mut _54: &[core::fmt::rt::Argument<'_>; 1];
    let _55: &[core::fmt::rt::Argument<'_>; 1];
    let _56: [core::fmt::rt::Argument<'_>; 1];
    let mut _57: core::fmt::rt::Argument<'_>;
    let mut _58: &u32;
    let _59: &u32;
    let mut _60: ();
    let mut _61: u32;
    let mut _62: u16;
    let _64: anchor_lang::prelude::Pubkey;
    let mut _65: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _66: ();
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _68: std::result::Result<(), anchor_lang::error::Error>;
    let mut _69: std::result::Result<(), anchor_lang::error::Error>;
    let mut _70: anchor_lang::context::Context<'_, '_, '_, '_, instructions::keeper::FillOrder<'_>>;
    let mut _71: u32;
    let mut _72: u16;
    let mut _73: {closure@programs/drift/src/instructions/keeper.rs:108:53: 108:56};
    let mut _74: &u32;
    let mut _75: &&anchor_lang::prelude::Pubkey;
    let mut _76: &u16;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: ();
    let mut _84: &mut instructions::keeper::FillOrder<'_>;
    let mut _85: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _86: &mut instructions::keeper::FillOrder<'_>;
    let mut _87: &mut instructions::keeper::FillOrder<'_>;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug order_id => _13;
        debug market_index => _14;
        let _63: &anchor_lang::prelude::Pubkey;
        scope 15 {
            debug user_key => _63;
            let _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _81: ();
            scope 16 {
                debug residual => _78;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _81;
                scope 19 {
                }
            }
        }
    }
    scope 6 {
        debug user => _16;
        let _28: u32;
        scope 11 {
            debug order_id => _28;
            let _32: u16;
            let _39: &state::user::Order;
            let _47: std::string::String;
            let mut _83: &[&str; 1];
            scope 12 {
                debug market_index => _32;
            }
            scope 13 {
                debug order => _39;
            }
            scope 14 {
                debug res => _47;
            }
        }
    }
    scope 7 {
        debug residual => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _27;
        scope 10 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _84 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _7 = &((*_84).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _85 = deref_copy (*_7);
        _103 = (((_85.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_103);
        _5 = constraints::fill_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _88 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _86 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _21 = &((*_86).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _20 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _98 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb33;
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _19 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _20, move _22) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_20);
        _18 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _19) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        StorageDead(_19);
        _23 = discriminant(_18);
        switchInt(move _23) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_27);
        _27 = move ((_18 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _17 = move _27;
        StorageDead(_27);
        _16 = &_17;
        _92 = discriminant(_18);
        StorageDead(_18);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _2;
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_16;
        _30 = {closure@programs/drift/src/instructions/keeper.rs:96:48: 96:50} { user: move _31 };
        StorageDead(_31);
        _28 = Option::<u32>::unwrap_or_else::<{closure@programs/drift/src/instructions/keeper.rs:96:48: 96:50}>(move _29, move _30) -> [return: bb13, unwind: bb35];
    }

    bb11: {
        StorageLive(_24);
        _24 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb12, unwind: bb38];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_24);
        _90 = discriminant(_18);
        StorageDead(_18);
        goto -> bb32;
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &(*_16);
        _35 = <Ref<'_, User> as Deref>::deref(move _36) -> [return: bb14, unwind: bb35];
    }

    bb14: {
        _34 = &(*_35);
        StorageDead(_36);
        StorageLive(_37);
        _37 = _28;
        _33 = User::get_order(move _34, move _37) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_34);
        _38 = discriminant(_33);
        switchInt(move _38) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _83 = const _;
        _51 = &(*_83);
        _50 = &(*_51);
        _49 = move _50 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_50);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_28;
        _58 = &(*_59);
        _57 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _58) -> [return: bb18, unwind: bb35];
    }

    bb17: {
        StorageLive(_39);
        _39 = ((_33 as Some).0: &state::user::Order);
        _32 = ((*_39).11: u16);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_61);
        _61 = _28;
        StorageLive(_62);
        _62 = _32;
        _15 = (move _61, move _62);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_32);
        StorageDead(_28);
        drop(_17) -> [return: bb24, unwind: bb36];
    }

    bb18: {
        StorageDead(_58);
        _56 = [move _57];
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = move _54 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_54);
        _48 = Arguments::<'_>::new_v1(move _49, move _53) -> [return: bb19, unwind: bb35];
    }

    bb19: {
        StorageDead(_53);
        StorageDead(_49);
        _47 = format(move _48) -> [return: bb20, unwind: bb35];
    }

    bb20: {
        StorageDead(_48);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        _46 = move _47;
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = <String as Deref>::deref(move _44) -> [return: bb21, unwind: bb34];
    }

    bb21: {
        _42 = &(*_43);
        StorageDead(_44);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        StorageDead(_42);
        drop(_46) -> [return: bb23, unwind: bb35];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_60);
        _60 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _60);
        StorageDead(_60);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        drop(_17) -> [return: bb32, unwind: bb36];
    }

    bb24: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_13);
        _13 = (_15.0: u32);
        StorageLive(_14);
        _14 = (_15.1: u16);
        StorageDead(_15);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _87 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _65 = &((*_87).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _64 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _65) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_65);
        _63 = &_64;
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = move _1;
        StorageLive(_71);
        _71 = _13;
        StorageLive(_72);
        _72 = _14;
        _69 = fill_order::<'_, '_>(move _70, move _71, move _72) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_13;
        StorageLive(_75);
        _75 = &_63;
        StorageLive(_76);
        _76 = &_14;
        _73 = {closure@programs/drift/src/instructions/keeper.rs:108:53: 108:56} { order_id: move _74, user_key: move _75, market_index: move _76 };
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        _68 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:108:53: 108:56}>(move _69, move _73) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        StorageDead(_73);
        StorageDead(_69);
        _67 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb36];
    }

    bb28: {
        StorageDead(_68);
        _77 = discriminant(_67);
        switchInt(move _77) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_81);
        _81 = ((_67 as Continue).0: ());
        _66 = _81;
        StorageDead(_81);
        _94 = discriminant(_67);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_82);
        _82 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _82);
        StorageDead(_82);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb33;
    }

    bb30: {
        StorageLive(_78);
        _78 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_80);
        _80 = move _78;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _80) -> [return: bb31, unwind: bb37];
    }

    bb31: {
        StorageDead(_80);
        StorageDead(_78);
        _96 = discriminant(_67);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_46) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_17) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }

    bb37 (cleanup): {
        _100 = discriminant(_67);
        goto -> bb36;
    }

    bb38 (cleanup): {
        _101 = discriminant(_18);
        goto -> bb36;
    }

    bb39 (cleanup): {
        _102 = discriminant(_4);
        goto -> bb36;
    }
}
