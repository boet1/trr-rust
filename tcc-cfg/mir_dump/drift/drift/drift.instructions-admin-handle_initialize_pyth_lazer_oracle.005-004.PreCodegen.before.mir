// MIR for `admin::handle_initialize_pyth_lazer_oracle` before PreCodegen

fn admin::handle_initialize_pyth_lazer_oracle(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitPythLazerOracle<'_>>, _2: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug feed_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &anchor_lang::prelude::Pubkey;
    let mut _4: anchor_lang::prelude::AccountInfo<'_>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let _6: ();
    let mut _7: &str;
    let _8: &str;
    let mut _9: &std::string::String;
    let _10: &std::string::String;
    let _11: std::string::String;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[&str; 2];
    let _16: &[&str; 2];
    let _17: [&str; 2];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let mut _19: &[core::fmt::rt::Argument<'_>; 2];
    let _20: &[core::fmt::rt::Argument<'_>; 2];
    let _21: [core::fmt::rt::Argument<'_>; 2];
    let mut _22: core::fmt::rt::Argument<'_>;
    let mut _23: &&anchor_lang::prelude::Pubkey;
    let _24: &&anchor_lang::prelude::Pubkey;
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &u32;
    let _27: &u32;
    let mut _28: ();
    let mut _30: &mut instructions::admin::InitPythLazerOracle<'_>;
    scope 1 {
        debug pubkey => _3;
        let _12: std::string::String;
        let mut _29: &[&str; 2];
        scope 2 {
            debug res => _12;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _30 = deref_copy (_1.1: &mut instructions::admin::InitPythLazerOracle<'_>);
        _5 = &((*_30).1: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>);
        _4 = <anchor_lang::prelude::AccountLoader<'_, PythLazerOracle> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = (_4.0: &anchor_lang::prelude::Pubkey);
        drop(_4) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _29 = const _;
        _16 = &(*_29);
        _15 = &(*_16);
        _14 = move _15 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_3;
        _23 = &(*_24);
        _22 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _23) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_2;
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _26) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_26);
        _21 = [move _22, move _25];
        StorageDead(_25);
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = move _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_19);
        _13 = Arguments::<'_>::new_v1(move _14, move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        StorageDead(_14);
        _12 = format(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_16);
        _11 = move _12;
        StorageDead(_12);
        _10 = &_11;
        _9 = &(*_10);
        _8 = <String as Deref>::deref(move _9) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = solana_program::log::sol_log(move _7) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        StorageDead(_7);
        drop(_11) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_28);
        _28 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _28);
        StorageDead(_28);
        StorageDead(_3);
        return;
    }

    bb10 (cleanup): {
        drop(_11) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}
