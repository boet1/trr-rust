// MIR for `admin::handle_update_exchange_status` before PreCodegen

fn admin::handle_update_exchange_status(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateState<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug exchange_status => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: &str;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: &std::string::String;
    let _8: std::string::String;
    let _9: std::string::String;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[&str; 2];
    let _13: &[&str; 2];
    let _14: [&str; 2];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let mut _16: &[core::fmt::rt::Argument<'_>; 2];
    let _17: &[core::fmt::rt::Argument<'_>; 2];
    let _18: [core::fmt::rt::Argument<'_>; 2];
    let mut _19: core::fmt::rt::Argument<'_>;
    let mut _20: &u8;
    let _21: &u8;
    let _22: &state::state::State;
    let mut _23: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _24: core::fmt::rt::Argument<'_>;
    let mut _25: &u8;
    let _26: &u8;
    let mut _27: u8;
    let mut _28: &mut state::state::State;
    let mut _29: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _30: ();
    let mut _31: &[&str; 2];
    let mut _32: &mut instructions::admin::AdminUpdateState<'_>;
    let mut _33: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _34: &mut instructions::admin::AdminUpdateState<'_>;
    let mut _35: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _36: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _37: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug res => _9;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _31 = const _;
        _13 = &(*_31);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _32 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateState<'_>);
        _33 = deref_copy ((*_32).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _36 = (((_33.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _23 = &(*_36);
        _22 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _23) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_23);
        _21 = &((*_22).19: u8);
        _20 = &(*_21);
        _19 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _20) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_20);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &_2;
        _25 = &(*_26);
        _24 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _25) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_25);
        _18 = [move _19, move _24];
        StorageDead(_24);
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = move _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_16);
        _10 = Arguments::<'_>::new_v1(move _11, move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        StorageDead(_11);
        _9 = format(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_13);
        _8 = move _9;
        StorageDead(_9);
        _7 = &_8;
        _6 = &(*_7);
        _5 = <String as Deref>::deref(move _6) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _4 = &(*_5);
        StorageDead(_6);
        _3 = solana_program::log::sol_log(move _4) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_4);
        drop(_8) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_27);
        _27 = _2;
        StorageLive(_28);
        StorageLive(_29);
        _34 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateState<'_>);
        _35 = deref_copy ((*_34).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _37 = (((_35.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _29 = &mut (*_37);
        _28 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _29) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_29);
        ((*_28).19: u8) = move _27;
        StorageDead(_27);
        StorageDead(_28);
        StorageLive(_30);
        _30 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _30);
        StorageDead(_30);
        return;
    }

    bb10 (cleanup): {
        drop(_8) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}
