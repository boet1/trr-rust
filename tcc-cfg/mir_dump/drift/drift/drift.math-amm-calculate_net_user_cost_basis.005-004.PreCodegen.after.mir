// MIR for `calculate_net_user_cost_basis` after PreCodegen

fn calculate_net_user_cost_basis(_1: &AMM) -> std::result::Result<i128, error::ErrorCode> {
    debug amm => _1;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let mut _2: i128;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _4: std::result::Result<i128, error::ErrorCode>;
    let mut _5: i128;
    let mut _6: i128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _8: std::result::Result<i128, error::ErrorCode>;
    let mut _9: i64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: i128;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: i128;
    let mut _20: i128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _22: std::result::Result<i128, error::ErrorCode>;
    let mut _23: i64;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: i128;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _16;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _19;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _25;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _28;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).18: i128);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).81: i64);
        _8 = <i64 as Cast>::cast::<i128>(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: i128);
        _6 = _14;
        StorageDead(_14);
        _4 = <i128 as SafeMath>::safe_add(move _5, move _6) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb18;
    }

    bb7: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _4) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_4);
        _15 = discriminant(_3);
        switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_19);
        _19 = ((_3 as Continue).0: i128);
        _2 = _19;
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = ((*_1).80: i64);
        _22 = <i64 as Cast>::cast::<i128>(move _23) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_16);
        _16 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_16);
        goto -> bb18;
    }

    bb12: {
        StorageDead(_23);
        _21 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_22);
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_28);
        _28 = ((_21 as Continue).0: i128);
        _20 = _28;
        StorageDead(_28);
        _0 = <i128 as SafeMath>::safe_add(move _2, move _20) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_25);
        _25 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_2);
        StorageDead(_21);
        goto -> bb19;
    }

    bb17: {
        StorageDead(_20);
        StorageDead(_2);
        StorageDead(_21);
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb20;
    }

    bb18: {
        StorageDead(_2);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}
