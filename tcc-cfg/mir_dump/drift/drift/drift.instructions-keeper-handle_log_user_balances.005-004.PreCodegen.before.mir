// MIR for `keeper::handle_log_user_balances` before PreCodegen

fn keeper::handle_log_user_balances(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::LogUserBalances<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _6: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: anchor_lang::prelude::Pubkey;
    let mut _13: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _16: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _19: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: instructions::optional_accounts::AccountMaps<'_>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _30: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _31: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _32: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _33: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _34: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _35: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _36: &std::collections::BTreeSet<u16>;
    let _37: &std::collections::BTreeSet<u16>;
    let _38: std::collections::BTreeSet<u16>;
    let mut _39: &std::collections::BTreeSet<u16>;
    let _40: &std::collections::BTreeSet<u16>;
    let _41: std::collections::BTreeSet<u16>;
    let mut _42: u64;
    let mut _43: anchor_lang::prelude::Clock;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _45: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _51: std::option::Option<state::state::OracleGuardRails>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: (i128, bool);
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, bool)>;
    let mut _60: std::result::Result<(i128, bool), error::ErrorCode>;
    let mut _61: &state::user::User;
    let _62: &state::user::User;
    let mut _63: &std::cell::Ref<'_, state::user::User>;
    let _64: &std::cell::Ref<'_, state::user::User>;
    let mut _65: &state::perp_market_map::PerpMarketMap<'_>;
    let _66: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _67: &state::spot_market_map::SpotMarketMap<'_>;
    let _68: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _69: &mut state::oracle_map::OracleMap<'_>;
    let mut _70: &mut state::oracle_map::OracleMap<'_>;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _76: ();
    let mut _77: &str;
    let _78: &str;
    let mut _79: &std::string::String;
    let _80: &std::string::String;
    let _81: std::string::String;
    let mut _83: std::fmt::Arguments<'_>;
    let mut _84: &[&str];
    let mut _85: &[&str; 3];
    let _86: &[&str; 3];
    let _87: [&str; 3];
    let mut _88: &[core::fmt::rt::Argument<'_>];
    let mut _89: &[core::fmt::rt::Argument<'_>; 3];
    let _90: &[core::fmt::rt::Argument<'_>; 3];
    let _91: [core::fmt::rt::Argument<'_>; 3];
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: &anchor_lang::prelude::Pubkey;
    let _94: &anchor_lang::prelude::Pubkey;
    let _95: &state::user::User;
    let mut _96: &std::cell::Ref<'_, state::user::User>;
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &u16;
    let _99: &u16;
    let _100: &state::user::User;
    let mut _101: &std::cell::Ref<'_, state::user::User>;
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &anchor_lang::prelude::Pubkey;
    let _104: &anchor_lang::prelude::Pubkey;
    let _105: ();
    let mut _106: &str;
    let _107: &str;
    let mut _108: &std::string::String;
    let _109: &std::string::String;
    let _110: std::string::String;
    let mut _112: std::fmt::Arguments<'_>;
    let mut _113: &[&str];
    let mut _114: &[&str; 1];
    let _115: &[&str; 1];
    let _116: [&str; 1];
    let mut _117: &[core::fmt::rt::Argument<'_>];
    let mut _118: &[core::fmt::rt::Argument<'_>; 1];
    let _119: &[core::fmt::rt::Argument<'_>; 1];
    let _120: [core::fmt::rt::Argument<'_>; 1];
    let mut _121: core::fmt::rt::Argument<'_>;
    let mut _122: &i128;
    let _123: &i128;
    let _124: ();
    let mut _125: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _126: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _127: &[state::user::SpotPosition];
    let mut _128: &[state::user::SpotPosition; 8];
    let _129: &state::user::User;
    let mut _130: &std::cell::Ref<'_, state::user::User>;
    let mut _132: ();
    let _133: ();
    let mut _134: std::option::Option<&state::user::SpotPosition>;
    let mut _135: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _136: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _137: isize;
    let mut _138: !;
    let _140: ();
    let mut _141: bool;
    let mut _142: u64;
    let mut _143: !;
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _146: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _147: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _148: &u16;
    let _149: &u16;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _156: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _157: std::result::Result<i128, error::ErrorCode>;
    let mut _158: &state::user::SpotPosition;
    let mut _159: &state::spot_market::SpotMarket;
    let _160: &state::spot_market::SpotMarket;
    let mut _161: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _162: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _168: ();
    let mut _169: &str;
    let _170: &str;
    let mut _171: &std::string::String;
    let _172: &std::string::String;
    let _173: std::string::String;
    let mut _175: std::fmt::Arguments<'_>;
    let mut _176: &[&str];
    let mut _177: &[&str; 2];
    let _178: &[&str; 2];
    let _179: [&str; 2];
    let mut _180: &[core::fmt::rt::Argument<'_>];
    let mut _181: &[core::fmt::rt::Argument<'_>; 2];
    let _182: &[core::fmt::rt::Argument<'_>; 2];
    let _183: [core::fmt::rt::Argument<'_>; 2];
    let mut _184: core::fmt::rt::Argument<'_>;
    let mut _185: &u16;
    let _186: &u16;
    let mut _187: core::fmt::rt::Argument<'_>;
    let mut _188: &i128;
    let _189: &i128;
    let _190: ();
    let mut _191: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _192: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _193: &[state::user::PerpPosition];
    let mut _194: &[state::user::PerpPosition; 8];
    let _195: &state::user::User;
    let mut _196: &std::cell::Ref<'_, state::user::User>;
    let _198: ();
    let mut _199: std::option::Option<&state::user::PerpPosition>;
    let mut _200: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _201: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _202: isize;
    let mut _203: !;
    let _205: ();
    let mut _206: bool;
    let mut _207: &state::user::PerpPosition;
    let mut _208: !;
    let mut _210: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _211: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _212: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _213: &u16;
    let _214: &u16;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _221: &state::oracle::OraclePriceData;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _223: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _224: &mut state::oracle_map::OracleMap<'_>;
    let mut _225: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _226: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _227: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _228: &state::perp_market::PerpMarket;
    let _229: &state::perp_market::PerpMarket;
    let mut _230: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _231: isize;
    let mut _233: !;
    let mut _234: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _237: (u128, i128);
    let mut _238: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128)>;
    let mut _239: std::result::Result<(u128, i128), error::ErrorCode>;
    let mut _240: &state::user::PerpPosition;
    let _241: &&state::user::PerpPosition;
    let mut _242: i64;
    let mut _243: isize;
    let mut _245: !;
    let mut _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _248: ();
    let mut _249: bool;
    let mut _250: i128;
    let mut _251: !;
    let _252: ();
    let mut _253: &str;
    let _254: &str;
    let mut _255: &std::string::String;
    let _256: &std::string::String;
    let _257: std::string::String;
    let mut _259: std::fmt::Arguments<'_>;
    let mut _260: &[&str];
    let mut _261: &[&str; 2];
    let _262: &[&str; 2];
    let _263: [&str; 2];
    let mut _264: &[core::fmt::rt::Argument<'_>];
    let mut _265: &[core::fmt::rt::Argument<'_>; 2];
    let _266: &[core::fmt::rt::Argument<'_>; 2];
    let _267: [core::fmt::rt::Argument<'_>; 2];
    let mut _268: core::fmt::rt::Argument<'_>;
    let mut _269: &u16;
    let _270: &u16;
    let mut _271: core::fmt::rt::Argument<'_>;
    let mut _272: &i128;
    let _273: &i128;
    let mut _274: ();
    let mut _279: &mut instructions::keeper::LogUserBalances<'_>;
    let mut _280: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _281: &mut instructions::keeper::LogUserBalances<'_>;
    let mut _282: &mut instructions::keeper::LogUserBalances<'_>;
    let mut _283: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _284: &state::user::PerpPosition;
    let mut _285: bool;
    let mut _286: bool;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug user_key => _12;
        let _14: std::cell::Ref<'_, state::user::User>;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: std::cell::Ref<'_, state::user::User>;
        scope 6 {
            debug user => _14;
            let _25: state::perp_market_map::PerpMarketMap<'_>;
            let _26: state::spot_market_map::SpotMarketMap<'_>;
            let mut _27: state::oracle_map::OracleMap<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _50: anchor_lang::prelude::Clock;
            let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _56: instructions::optional_accounts::AccountMaps<'_>;
            scope 11 {
                debug perp_market_map => _25;
                debug spot_market_map => _26;
                debug oracle_map => _27;
                let _57: i128;
                let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _75: (i128, bool);
                scope 20 {
                    debug equity => _57;
                    let _82: std::string::String;
                    let _111: std::string::String;
                    let mut _131: std::slice::Iter<'_, state::user::SpotPosition>;
                    let mut _197: std::slice::Iter<'_, state::user::PerpPosition>;
                    let mut _277: &[&str; 1];
                    let mut _278: &[&str; 3];
                    scope 25 {
                        debug res => _82;
                    }
                    scope 26 {
                        debug res => _111;
                    }
                    scope 27 {
                        debug iter => _131;
                        let _139: &state::user::SpotPosition;
                        scope 28 {
                            debug spot_position => _139;
                            let _144: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _154: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            scope 29 {
                                debug spot_market => _144;
                                let _155: i128;
                                let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _167: i128;
                                scope 34 {
                                    debug token_amount => _155;
                                    let _174: std::string::String;
                                    let mut _275: &[&str; 2];
                                    scope 39 {
                                        debug res => _174;
                                    }
                                }
                                scope 35 {
                                    debug residual => _164;
                                    scope 36 {
                                    }
                                }
                                scope 37 {
                                    debug val => _167;
                                    scope 38 {
                                    }
                                }
                            }
                            scope 30 {
                                debug residual => _151;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug val => _154;
                                scope 33 {
                                }
                            }
                        }
                    }
                    scope 40 {
                        debug iter => _197;
                        let _204: &state::user::PerpPosition;
                        scope 41 {
                            debug perp_position => _204;
                            let _209: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                            let _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _219: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                            scope 42 {
                                debug perp_market => _209;
                                let _220: i64;
                                let _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _235: &state::oracle::OraclePriceData;
                                scope 47 {
                                    debug oracle_price => _220;
                                    let _236: i128;
                                    let _244: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _247: (u128, i128);
                                    scope 52 {
                                        debug unrealized_pnl => _236;
                                        let _258: std::string::String;
                                        let mut _276: &[&str; 2];
                                        scope 57 {
                                            debug res => _258;
                                        }
                                    }
                                    scope 53 {
                                        debug residual => _244;
                                        scope 54 {
                                        }
                                    }
                                    scope 55 {
                                        debug val => _247;
                                        scope 56 {
                                        }
                                    }
                                }
                                scope 48 {
                                    debug residual => _232;
                                    scope 49 {
                                    }
                                }
                                scope 50 {
                                    debug val => _235;
                                    scope 51 {
                                    }
                                }
                            }
                            scope 43 {
                                debug residual => _216;
                                scope 44 {
                                }
                            }
                            scope 45 {
                                debug val => _219;
                                scope 46 {
                                }
                            }
                        }
                    }
                }
                scope 21 {
                    debug residual => _72;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _75;
                    scope 24 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _53;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _56;
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _21;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _24;
            scope 10 {
            }
        }
    }

    bb0: {
        _286 = const false;
        _285 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _279 = deref_copy (_1.1: &mut instructions::keeper::LogUserBalances<'_>);
        _6 = &((*_279).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _280 = deref_copy (*_6);
        _319 = (((_280.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _5 = &(*_319);
        _4 = constraints::exchange_not_paused(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb150];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _287 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        _281 = deref_copy (_1.1: &mut instructions::keeper::LogUserBalances<'_>);
        _13 = &((*_281).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _12 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _13) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb156];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _309 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb136;
    }

    bb7: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _282 = deref_copy (_1.1: &mut instructions::keeper::LogUserBalances<'_>);
        _18 = &((*_282).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _16 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _17, move _19) -> [return: bb9, unwind: bb150];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb10, unwind: bb150];
    }

    bb10: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _14 = move _24;
        StorageDead(_24);
        _291 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _283 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _35 = &(*_283);
        _34 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _35) -> [return: bb14, unwind: bb149];
    }

    bb12: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb13, unwind: bb155];
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_21);
        _289 = discriminant(_15);
        StorageDead(_15);
        goto -> bb135;
    }

    bb14: {
        StorageDead(_35);
        _33 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _34) -> [return: bb15, unwind: bb149];
    }

    bb15: {
        StorageDead(_34);
        _32 = &mut _33;
        _31 = &mut (*_32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = BTreeSet::<u16>::new() -> [return: bb16, unwind: bb149];
    }

    bb16: {
        _37 = &_38;
        _36 = &(*_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = BTreeSet::<u16>::new() -> [return: bb17, unwind: bb148];
    }

    bb17: {
        _40 = &_41;
        _39 = &(*_40);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb18, unwind: bb147];
    }

    bb18: {
        _44 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _45) -> [return: bb19, unwind: bb147];
    }

    bb19: {
        _285 = const true;
        _286 = const true;
        StorageDead(_45);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_50);
        _50 = move ((_44 as Continue).0: anchor_lang::prelude::Clock);
        _43 = move _50;
        StorageDead(_50);
        _42 = (_43.0: u64);
        StorageLive(_51);
        _51 = Option::<state::state::OracleGuardRails>::None;
        _30 = load_maps(move _31, move _36, move _39, move _42, move _51) -> [return: bb23, unwind: bb154];
    }

    bb21: {
        StorageLive(_47);
        _47 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _49) -> [return: bb22, unwind: bb154];
    }

    bb22: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb131;
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_31);
        _29 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _30) -> [return: bb24, unwind: bb154];
    }

    bb24: {
        StorageDead(_30);
        _52 = discriminant(_29);
        switchInt(move _52) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_56);
        _56 = move ((_29 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _28 = move _56;
        StorageDead(_56);
        StorageLive(_25);
        _25 = move (_28.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_26);
        _26 = move (_28.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_27);
        _27 = move (_28.2: state::oracle_map::OracleMap<'_>);
        _295 = discriminant(_29);
        _297 = discriminant(_44);
        _285 = const false;
        _286 = const false;
        StorageDead(_44);
        StorageDead(_43);
        drop(_41) -> [return: bb28, unwind: bb143];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb27, unwind: bb153];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_53);
        _293 = discriminant(_29);
        goto -> bb131;
    }

    bb28: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_38) -> [return: bb29, unwind: bb144];
    }

    bb29: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_14;
        _63 = &(*_64);
        _62 = <Ref<'_, User> as Deref>::deref(move _63) -> [return: bb30, unwind: bb144];
    }

    bb30: {
        _61 = &(*_62);
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_25;
        _65 = &(*_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_26;
        _67 = &(*_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &mut _27;
        _69 = &mut (*_70);
        _60 = calculate_user_equity(move _61, move _65, move _67, move _69) -> [return: bb31, unwind: bb144];
    }

    bb31: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_61);
        _59 = <std::result::Result<(i128, bool), error::ErrorCode> as Try>::branch(move _60) -> [return: bb32, unwind: bb144];
    }

    bb32: {
        StorageDead(_60);
        _71 = discriminant(_59);
        switchInt(move _71) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_75);
        _75 = ((_59 as Continue).0: (i128, bool));
        _58 = _75;
        StorageDead(_75);
        StorageLive(_57);
        _57 = (_58.0: i128);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _278 = const _;
        _86 = &(*_278);
        _85 = &(*_86);
        _84 = move _85 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_85);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_14;
        _95 = <Ref<'_, User> as Deref>::deref(move _96) -> [return: bb36, unwind: bb144];
    }

    bb34: {
        StorageLive(_72);
        _72 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb35, unwind: bb144];
    }

    bb35: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb127;
    }

    bb36: {
        StorageDead(_96);
        _94 = &((*_95).0: anchor_lang::prelude::Pubkey);
        _93 = &(*_94);
        _92 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _93) -> [return: bb37, unwind: bb144];
    }

    bb37: {
        StorageDead(_93);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_14;
        _100 = <Ref<'_, User> as Deref>::deref(move _101) -> [return: bb38, unwind: bb144];
    }

    bb38: {
        StorageDead(_101);
        _99 = &((*_100).18: u16);
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _98) -> [return: bb39, unwind: bb144];
    }

    bb39: {
        StorageDead(_98);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_12;
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _103) -> [return: bb40, unwind: bb144];
    }

    bb40: {
        StorageDead(_103);
        _91 = [move _92, move _97, move _102];
        StorageDead(_102);
        StorageDead(_97);
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = move _89 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_89);
        _83 = Arguments::<'_>::new_v1(move _84, move _88) -> [return: bb41, unwind: bb144];
    }

    bb41: {
        StorageDead(_88);
        StorageDead(_84);
        _82 = format(move _83) -> [return: bb42, unwind: bb144];
    }

    bb42: {
        StorageDead(_83);
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        _81 = move _82;
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = <String as Deref>::deref(move _79) -> [return: bb43, unwind: bb142];
    }

    bb43: {
        _77 = &(*_78);
        StorageDead(_79);
        _76 = solana_program::log::sol_log(move _77) -> [return: bb44, unwind: bb142];
    }

    bb44: {
        StorageDead(_77);
        drop(_81) -> [return: bb45, unwind: bb144];
    }

    bb45: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _277 = const _;
        _115 = &(*_277);
        _114 = &(*_115);
        _113 = move _114 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_114);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_57;
        _122 = &(*_123);
        _121 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _122) -> [return: bb46, unwind: bb144];
    }

    bb46: {
        StorageDead(_122);
        _120 = [move _121];
        StorageDead(_121);
        _119 = &_120;
        _118 = &(*_119);
        _117 = move _118 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_118);
        _112 = Arguments::<'_>::new_v1(move _113, move _117) -> [return: bb47, unwind: bb144];
    }

    bb47: {
        StorageDead(_117);
        StorageDead(_113);
        _111 = format(move _112) -> [return: bb48, unwind: bb144];
    }

    bb48: {
        StorageDead(_112);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_115);
        _110 = move _111;
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = <String as Deref>::deref(move _108) -> [return: bb49, unwind: bb141];
    }

    bb49: {
        _106 = &(*_107);
        StorageDead(_108);
        _105 = solana_program::log::sol_log(move _106) -> [return: bb50, unwind: bb141];
    }

    bb50: {
        StorageDead(_106);
        drop(_110) -> [return: bb51, unwind: bb144];
    }

    bb51: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_14;
        _129 = <Ref<'_, User> as Deref>::deref(move _130) -> [return: bb52, unwind: bb144];
    }

    bb52: {
        StorageDead(_130);
        _128 = &((*_129).3: [state::user::SpotPosition; 8]);
        _127 = move _128 as &[state::user::SpotPosition] (PointerCoercion(Unsize));
        StorageDead(_128);
        _126 = core::slice::<impl [SpotPosition]>::iter(move _127) -> [return: bb53, unwind: bb144];
    }

    bb53: {
        StorageDead(_127);
        _125 = <std::slice::Iter<'_, SpotPosition> as IntoIterator>::into_iter(move _126) -> [return: bb54, unwind: bb144];
    }

    bb54: {
        StorageDead(_126);
        StorageLive(_131);
        _131 = move _125;
        goto -> bb55;
    }

    bb55: {
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &mut _131;
        _135 = &mut (*_136);
        _134 = <std::slice::Iter<'_, SpotPosition> as Iterator>::next(move _135) -> [return: bb56, unwind: bb144];
    }

    bb56: {
        StorageDead(_135);
        _137 = discriminant(_134);
        switchInt(move _137) -> [0: bb58, 1: bb57, otherwise: bb4];
    }

    bb57: {
        StorageLive(_139);
        _139 = ((_134 as Some).0: &state::user::SpotPosition);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = ((*_139).0: u64);
        _141 = Eq(move _142, const 0_u64);
        switchInt(move _141) -> [0: bb60, otherwise: bb59];
    }

    bb58: {
        _124 = const ();
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &_14;
        _195 = <Ref<'_, User> as Deref>::deref(move _196) -> [return: bb80, unwind: bb144];
    }

    bb59: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb55;
    }

    bb60: {
        StorageDead(_142);
        _140 = const ();
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_26;
        StorageLive(_148);
        StorageLive(_149);
        _149 = &((*_139).4: u16);
        _148 = &(*_149);
        _146 = SpotMarketMap::<'_>::get_ref(move _147, move _148) -> [return: bb61, unwind: bb144];
    }

    bb61: {
        StorageDead(_148);
        StorageDead(_147);
        _145 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _146) -> [return: bb62, unwind: bb144];
    }

    bb62: {
        StorageDead(_146);
        _150 = discriminant(_145);
        switchInt(move _150) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_154);
        _154 = move ((_145 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _144 = move _154;
        StorageDead(_154);
        _301 = discriminant(_145);
        StorageDead(_149);
        StorageDead(_145);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &(*_139);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_144;
        _161 = &(*_162);
        _160 = <Ref<'_, SpotMarket> as Deref>::deref(move _161) -> [return: bb66, unwind: bb140];
    }

    bb64: {
        StorageLive(_151);
        _151 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb65, unwind: bb152];
    }

    bb65: {
        StorageDead(_153);
        StorageDead(_151);
        _299 = discriminant(_145);
        StorageDead(_149);
        StorageDead(_145);
        goto -> bb125;
    }

    bb66: {
        _159 = &(*_160);
        StorageDead(_161);
        _157 = SpotPosition::get_signed_token_amount(move _158, move _159) -> [return: bb67, unwind: bb140];
    }

    bb67: {
        StorageDead(_159);
        StorageDead(_158);
        _156 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _157) -> [return: bb68, unwind: bb140];
    }

    bb68: {
        StorageDead(_157);
        _163 = discriminant(_156);
        switchInt(move _163) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_167);
        _167 = ((_156 as Continue).0: i128);
        _155 = _167;
        StorageDead(_167);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_156);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _275 = const _;
        _178 = &(*_275);
        _177 = &(*_178);
        _176 = move _177 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_177);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &((*_139).4: u16);
        _185 = &(*_186);
        _184 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _185) -> [return: bb72, unwind: bb140];
    }

    bb70: {
        StorageLive(_164);
        _164 = ((_156 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb71, unwind: bb140];
    }

    bb71: {
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_156);
        StorageDead(_155);
        drop(_144) -> [return: bb125, unwind: bb144];
    }

    bb72: {
        StorageDead(_185);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &_155;
        _188 = &(*_189);
        _187 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _188) -> [return: bb73, unwind: bb140];
    }

    bb73: {
        StorageDead(_188);
        _183 = [move _184, move _187];
        StorageDead(_187);
        StorageDead(_184);
        _182 = &_183;
        _181 = &(*_182);
        _180 = move _181 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_181);
        _175 = Arguments::<'_>::new_v1(move _176, move _180) -> [return: bb74, unwind: bb140];
    }

    bb74: {
        StorageDead(_180);
        StorageDead(_176);
        _174 = format(move _175) -> [return: bb75, unwind: bb140];
    }

    bb75: {
        StorageDead(_175);
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_178);
        _173 = move _174;
        StorageDead(_174);
        _172 = &_173;
        _171 = &(*_172);
        _170 = <String as Deref>::deref(move _171) -> [return: bb76, unwind: bb139];
    }

    bb76: {
        _169 = &(*_170);
        StorageDead(_171);
        _168 = solana_program::log::sol_log(move _169) -> [return: bb77, unwind: bb139];
    }

    bb77: {
        StorageDead(_169);
        drop(_173) -> [return: bb78, unwind: bb140];
    }

    bb78: {
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        _133 = const ();
        StorageDead(_155);
        drop(_144) -> [return: bb79, unwind: bb144];
    }

    bb79: {
        StorageDead(_144);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_133);
        _132 = const ();
        goto -> bb55;
    }

    bb80: {
        StorageDead(_196);
        _194 = &((*_195).4: [state::user::PerpPosition; 8]);
        _193 = move _194 as &[state::user::PerpPosition] (PointerCoercion(Unsize));
        StorageDead(_194);
        _192 = core::slice::<impl [PerpPosition]>::iter(move _193) -> [return: bb81, unwind: bb144];
    }

    bb81: {
        StorageDead(_193);
        _191 = <std::slice::Iter<'_, PerpPosition> as IntoIterator>::into_iter(move _192) -> [return: bb82, unwind: bb144];
    }

    bb82: {
        StorageDead(_192);
        StorageLive(_197);
        _197 = move _191;
        goto -> bb83;
    }

    bb83: {
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &mut _197;
        _200 = &mut (*_201);
        _199 = <std::slice::Iter<'_, PerpPosition> as Iterator>::next(move _200) -> [return: bb84, unwind: bb144];
    }

    bb84: {
        StorageDead(_200);
        _202 = discriminant(_199);
        switchInt(move _202) -> [0: bb86, 1: bb85, otherwise: bb4];
    }

    bb85: {
        StorageLive(_204);
        _204 = ((_199 as Some).0: &state::user::PerpPosition);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &(*_204);
        _206 = PerpPosition::is_available(move _207) -> [return: bb87, unwind: bb144];
    }

    bb86: {
        _190 = const ();
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_274);
        _274 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _274);
        StorageDead(_274);
        StorageDead(_57);
        drop(_27) -> [return: bb119, unwind: bb145];
    }

    bb87: {
        switchInt(move _206) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb118;
    }

    bb89: {
        StorageDead(_207);
        _205 = const ();
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_25;
        StorageLive(_213);
        StorageLive(_214);
        _214 = &((*_204).13: u16);
        _213 = &(*_214);
        _211 = PerpMarketMap::<'_>::get_ref(move _212, move _213) -> [return: bb90, unwind: bb144];
    }

    bb90: {
        StorageDead(_213);
        StorageDead(_212);
        _210 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _211) -> [return: bb91, unwind: bb144];
    }

    bb91: {
        StorageDead(_211);
        _215 = discriminant(_210);
        switchInt(move _215) -> [0: bb92, 1: bb93, otherwise: bb4];
    }

    bb92: {
        StorageLive(_219);
        _219 = move ((_210 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _209 = move _219;
        StorageDead(_219);
        _305 = discriminant(_210);
        StorageDead(_214);
        StorageDead(_210);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &mut _27;
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &_209;
        _229 = <Ref<'_, PerpMarket> as Deref>::deref(move _230) -> [return: bb95, unwind: bb138];
    }

    bb93: {
        StorageLive(_216);
        _216 = ((_210 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_218);
        _218 = _216;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _218) -> [return: bb94, unwind: bb151];
    }

    bb94: {
        StorageDead(_218);
        StorageDead(_216);
        _303 = discriminant(_210);
        StorageDead(_214);
        StorageDead(_210);
        goto -> bb124;
    }

    bb95: {
        _228 = &(*_229);
        StorageDead(_230);
        _227 = PerpMarket::oracle_id(move _228) -> [return: bb96, unwind: bb138];
    }

    bb96: {
        StorageDead(_228);
        _226 = &_227;
        _225 = &(*_226);
        _223 = OracleMap::<'_>::get_price_data(move _224, move _225) -> [return: bb97, unwind: bb138];
    }

    bb97: {
        StorageDead(_225);
        StorageDead(_224);
        _222 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _223) -> [return: bb98, unwind: bb138];
    }

    bb98: {
        StorageDead(_223);
        _231 = discriminant(_222);
        switchInt(move _231) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        StorageLive(_235);
        _235 = ((_222 as Continue).0: &state::oracle::OraclePriceData);
        _221 = _235;
        StorageDead(_235);
        _220 = ((*_221).0: i64);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_222);
        StorageDead(_221);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &_204;
        _284 = deref_copy (*_241);
        _240 = &(*_284);
        StorageLive(_242);
        _242 = _220;
        _239 = calculate_base_asset_value_and_pnl_with_oracle_price(move _240, move _242) -> [return: bb102, unwind: bb138];
    }

    bb100: {
        StorageLive(_232);
        _232 = ((_222 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_234);
        _234 = _232;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _234) -> [return: bb101, unwind: bb138];
    }

    bb101: {
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_222);
        StorageDead(_221);
        goto -> bb123;
    }

    bb102: {
        StorageDead(_242);
        StorageDead(_240);
        _238 = <std::result::Result<(u128, i128), error::ErrorCode> as Try>::branch(move _239) -> [return: bb103, unwind: bb138];
    }

    bb103: {
        StorageDead(_239);
        _243 = discriminant(_238);
        switchInt(move _243) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_247);
        _247 = ((_238 as Continue).0: (u128, i128));
        _237 = _247;
        StorageDead(_247);
        StorageLive(_236);
        _236 = (_237.1: i128);
        StorageDead(_241);
        StorageDead(_238);
        StorageDead(_237);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = _236;
        _249 = Eq(move _250, const 0_i128);
        switchInt(move _249) -> [0: bb108, otherwise: bb107];
    }

    bb105: {
        StorageLive(_244);
        _244 = ((_238 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_246);
        _246 = _244;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _246) -> [return: bb106, unwind: bb138];
    }

    bb106: {
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_238);
        StorageDead(_237);
        goto -> bb123;
    }

    bb107: {
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_236);
        StorageDead(_220);
        drop(_209) -> [return: bb117, unwind: bb144];
    }

    bb108: {
        StorageDead(_250);
        _248 = const ();
        StorageDead(_249);
        StorageDead(_248);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _276 = const _;
        _262 = &(*_276);
        _261 = &(*_262);
        _260 = move _261 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_261);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &((*_204).13: u16);
        _269 = &(*_270);
        _268 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _269) -> [return: bb109, unwind: bb138];
    }

    bb109: {
        StorageDead(_269);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &_236;
        _272 = &(*_273);
        _271 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _272) -> [return: bb110, unwind: bb138];
    }

    bb110: {
        StorageDead(_272);
        _267 = [move _268, move _271];
        StorageDead(_271);
        StorageDead(_268);
        _266 = &_267;
        _265 = &(*_266);
        _264 = move _265 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_265);
        _259 = Arguments::<'_>::new_v1(move _260, move _264) -> [return: bb111, unwind: bb138];
    }

    bb111: {
        StorageDead(_264);
        StorageDead(_260);
        _258 = format(move _259) -> [return: bb112, unwind: bb138];
    }

    bb112: {
        StorageDead(_259);
        StorageDead(_273);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_262);
        _257 = move _258;
        StorageDead(_258);
        _256 = &_257;
        _255 = &(*_256);
        _254 = <String as Deref>::deref(move _255) -> [return: bb113, unwind: bb137];
    }

    bb113: {
        _253 = &(*_254);
        StorageDead(_255);
        _252 = solana_program::log::sol_log(move _253) -> [return: bb114, unwind: bb137];
    }

    bb114: {
        StorageDead(_253);
        drop(_257) -> [return: bb115, unwind: bb138];
    }

    bb115: {
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_252);
        _198 = const ();
        StorageDead(_236);
        StorageDead(_220);
        drop(_209) -> [return: bb116, unwind: bb144];
    }

    bb116: {
        StorageDead(_209);
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        _132 = const ();
        goto -> bb83;
    }

    bb117: {
        StorageDead(_209);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb83;
    }

    bb119: {
        StorageDead(_27);
        drop(_26) -> [return: bb120, unwind: bb146];
    }

    bb120: {
        StorageDead(_26);
        drop(_25) -> [return: bb121, unwind: bb149];
    }

    bb121: {
        StorageDead(_25);
        drop(_14) -> [return: bb122, unwind: bb150];
    }

    bb122: {
        StorageDead(_14);
        StorageDead(_12);
        goto -> bb136;
    }

    bb123: {
        StorageDead(_220);
        drop(_209) -> [return: bb124, unwind: bb144];
    }

    bb124: {
        StorageDead(_209);
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb126;
    }

    bb125: {
        StorageDead(_144);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_57);
        goto -> bb127;
    }

    bb127: {
        drop(_27) -> [return: bb128, unwind: bb145];
    }

    bb128: {
        StorageDead(_27);
        drop(_26) -> [return: bb129, unwind: bb146];
    }

    bb129: {
        StorageDead(_26);
        drop(_25) -> [return: bb130, unwind: bb149];
    }

    bb130: {
        StorageDead(_25);
        goto -> bb134;
    }

    bb131: {
        _307 = discriminant(_44);
        _285 = const false;
        _286 = const false;
        StorageDead(_44);
        StorageDead(_43);
        drop(_41) -> [return: bb132, unwind: bb148];
    }

    bb132: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_38) -> [return: bb133, unwind: bb149];
    }

    bb133: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb134;
    }

    bb134: {
        drop(_14) -> [return: bb135, unwind: bb150];
    }

    bb135: {
        StorageDead(_14);
        StorageDead(_12);
        goto -> bb136;
    }

    bb136: {
        return;
    }

    bb137 (cleanup): {
        drop(_257) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_209) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_173) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_144) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_110) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_81) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_38) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_27) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_26) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_25) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_41) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_38) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_14) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        resume;
    }

    bb151 (cleanup): {
        _311 = discriminant(_210);
        goto -> bb144;
    }

    bb152 (cleanup): {
        _312 = discriminant(_145);
        goto -> bb144;
    }

    bb153 (cleanup): {
        _315 = discriminant(_29);
        goto -> bb154;
    }

    bb154 (cleanup): {
        _316 = discriminant(_44);
        goto -> bb147;
    }

    bb155 (cleanup): {
        _317 = discriminant(_15);
        goto -> bb150;
    }

    bb156 (cleanup): {
        _318 = discriminant(_3);
        goto -> bb150;
    }
}
