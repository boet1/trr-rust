digraph Mir_0_6611 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'info&gt; as anchor_lang::Accounts&lt;'info, SettleExpiredMarketPoolsToRevenuePoolBumps&gt;&gt;::try_accounts(_1: &amp;ReErased anchor_lang::prelude::Pubkey, _2: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;], _3: &amp;ReErased [u8], _4: &amp;ReErased mut instructions::admin::SettleExpiredMarketPoolsToRevenuePoolBumps, _5: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;) -&gt; std::result::Result&lt;instructions::admin::SettleExpiredMarketPoolsToRevenuePool&lt;ReErased&gt;, anchor_lang::error::Error&gt;<br align="left"/>let _6: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;&gt;;<br align="left"/>let mut _8: std::result::Result&lt;std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _9: std::result::Result&lt;std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _10: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _11: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _12: &amp;ReErased [u8];<br align="left"/>let mut _13: &amp;ReErased mut instructions::admin::SettleExpiredMarketPoolsToRevenuePoolBumps;<br align="left"/>let mut _14: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _15: Closure(DefId(0:6612 ~ drift[d311]::instructions::admin::{impl#100}::try_accounts::{closure#0}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _20: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let _21: anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, anchor_lang::prelude::Signer&lt;ReErased&gt;&gt;;<br align="left"/>let mut _23: std::result::Result&lt;anchor_lang::prelude::Signer&lt;ReErased&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _24: std::result::Result&lt;anchor_lang::prelude::Signer&lt;ReErased&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _25: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _26: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _27: &amp;ReErased [u8];<br align="left"/>let mut _28: &amp;ReErased mut instructions::admin::SettleExpiredMarketPoolsToRevenuePoolBumps;<br align="left"/>let mut _29: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _30: Closure(DefId(0:6613 ~ drift[d311]::instructions::admin::{impl#100}::try_accounts::{closure#1}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _35: anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let _36: anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _37: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;&gt;;<br align="left"/>let mut _38: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _39: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _40: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _41: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _42: &amp;ReErased [u8];<br align="left"/>let mut _43: &amp;ReErased mut instructions::admin::SettleExpiredMarketPoolsToRevenuePoolBumps;<br align="left"/>let mut _44: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _45: Closure(DefId(0:6614 ~ drift[d311]::instructions::admin::{impl#100}::try_accounts::{closure#2}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _46: isize;<br align="left"/>let _47: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _48: !;<br align="left"/>let mut _49: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _50: anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _51: anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _52: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _53: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _54: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _55: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _56: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _57: &amp;ReErased [u8];<br align="left"/>let mut _58: &amp;ReErased mut instructions::admin::SettleExpiredMarketPoolsToRevenuePoolBumps;<br align="left"/>let mut _59: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _60: Closure(DefId(0:6615 ~ drift[d311]::instructions::admin::{impl#100}::try_accounts::{closure#3}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _61: isize;<br align="left"/>let _62: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _63: !;<br align="left"/>let mut _64: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _65: anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _66: ();<br align="left"/>let _67: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _68: &amp;ReErased state::state::State;<br align="left"/>let mut _69: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let _70: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _71: &amp;ReErased anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _72: bool;<br align="left"/>let mut _73: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _74: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _75: !;<br align="left"/>let mut _76: anchor_lang::error::Error;<br align="left"/>let mut _77: anchor_lang::error::Error;<br align="left"/>let mut _78: anchor_lang::error::Error;<br align="left"/>let mut _79: anchor_lang::error::ErrorCode;<br align="left"/>let mut _80: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);<br align="left"/>let mut _81: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _82: anchor_lang::prelude::Pubkey;<br align="left"/>let _83: anchor_lang::prelude::Pubkey;<br align="left"/>let _84: u8;<br align="left"/>let mut _85: (anchor_lang::prelude::Pubkey, u8);<br align="left"/>let mut _86: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _87: &amp;ReErased [&amp;ReErased [u8]; 2_usize];<br align="left"/>let _88: &amp;ReErased [&amp;ReErased [u8]; 2_usize];<br align="left"/>let _89: [&amp;ReErased [u8]; 2_usize];<br align="left"/>let mut _90: &amp;ReErased [u8];<br align="left"/>let mut _91: &amp;ReErased [u8; 11_usize];<br align="left"/>let _92: &amp;ReErased [u8; 11_usize];<br align="left"/>let mut _93: &amp;ReErased [u8];<br align="left"/>let _94: &amp;ReErased [u8];<br align="left"/>let mut _95: &amp;ReErased [u8; 2_usize];<br align="left"/>let _96: [u8; 2_usize];<br align="left"/>let mut _97: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _98: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _99: u8;<br align="left"/>let _100: ();<br align="left"/>let mut _101: bool;<br align="left"/>let mut _102: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _103: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _104: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _105: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _106: !;<br align="left"/>let mut _107: anchor_lang::error::Error;<br align="left"/>let mut _108: anchor_lang::error::Error;<br align="left"/>let mut _109: anchor_lang::error::Error;<br align="left"/>let mut _110: anchor_lang::error::ErrorCode;<br align="left"/>let mut _111: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);<br align="left"/>let mut _112: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _113: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _114: anchor_lang::prelude::Pubkey;<br align="left"/>let _115: ();<br align="left"/>let mut _116: bool;<br align="left"/>let mut _117: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _118: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _119: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _120: !;<br align="left"/>let mut _121: anchor_lang::error::Error;<br align="left"/>let mut _122: anchor_lang::error::Error;<br align="left"/>let mut _123: anchor_lang::error::ErrorCode;<br align="left"/>let _124: ();<br align="left"/>let mut _125: bool;<br align="left"/>let mut _126: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _127: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _128: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _129: !;<br align="left"/>let mut _130: anchor_lang::error::Error;<br align="left"/>let mut _131: anchor_lang::error::Error;<br align="left"/>let mut _132: anchor_lang::error::ErrorCode;<br align="left"/>let mut _133: instructions::admin::SettleExpiredMarketPoolsToRevenuePool&lt;ReErased&gt;;<br align="left"/>let mut _134: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _135: anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _136: anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _137: anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _138: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _139: bool;<br align="left"/>let mut _140: isize;<br align="left"/>let mut _141: isize;<br align="left"/>let mut _142: isize;<br align="left"/>let mut _143: isize;<br align="left"/>let mut _144: isize;<br align="left"/>let mut _145: isize;<br align="left"/>let mut _146: isize;<br align="left"/>let mut _147: isize;<br align="left"/>let mut _148: isize;<br align="left"/>let mut _149: isize;<br align="left"/>let mut _150: isize;<br align="left"/>let mut _151: isize;<br align="left"/>let mut _152: isize;<br align="left"/>let mut _153: isize;<br align="left"/>let mut _154: isize;<br align="left"/>let mut _155: isize;<br align="left"/>let mut _156: isize;<br align="left"/>let mut _157: isize;<br align="left"/>let mut _158: isize;<br align="left"/>let mut _159: isize;<br align="left"/>let mut _160: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>debug __program_id =&gt; _1;<br align="left"/>debug __accounts =&gt; _2;<br align="left"/>debug __ix_data =&gt; _3;<br align="left"/>debug __bumps =&gt; _4;<br align="left"/>debug __reallocs =&gt; _5;<br align="left"/>debug state =&gt; _6;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug admin =&gt; _21;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug spot_market =&gt; _36;<br align="left"/>debug residual =&gt; _47;<br align="left"/>debug val =&gt; _50;<br align="left"/>debug perp_market =&gt; _51;<br align="left"/>debug residual =&gt; _62;<br align="left"/>debug val =&gt; _65;<br align="left"/>debug my_key =&gt; _67;<br align="left"/>debug target_key =&gt; _70;<br align="left"/>debug __pda_address =&gt; _83;<br align="left"/>debug __bump =&gt; _84;<br align="left"/>>;
    bb0__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_139 = const false<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;(*_1)<br/>StorageLive(_11)<br/>_11 = &amp;mut (*_2)<br/>StorageLive(_12)<br/>_12 = &amp;(*_3)<br/>StorageLive(_13)<br/>_13 = &amp;mut (*_4)<br/>StorageLive(_14)<br/>_14 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_9 = &lt;Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt; as anchor_lang::Accounts&lt;'_, SettleExpiredMarketPoolsToRevenuePoolBumps&gt;&gt;::try_accounts(move _10, move _11, move _12, move _13, move _14)</td></tr></table>>];
    bb1__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageLive(_15)<br/>_15 = {closure@programs/drift/src/instructions/admin.rs:5216:10: 5216:18}<br/></td></tr><tr><td align="left">_8 = std::result::Result::&lt;Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5216:10: 5216:18}&gt;(move _9, move _15)</td></tr></table>>];
    bb2__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb3__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_16 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb4__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = move ((_7 as Continue).0: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>_6 = move _20<br/>StorageDead(_20)<br/>_140 = discriminant(_7)<br/>StorageDead(_7)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = &amp;(*_1)<br/>StorageLive(_26)<br/>_26 = &amp;mut (*_2)<br/>StorageLive(_27)<br/>_27 = &amp;(*_3)<br/>StorageLive(_28)<br/>_28 = &amp;mut (*_4)<br/>StorageLive(_29)<br/>_29 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_24 = &lt;anchor_lang::prelude::Signer&lt;'_&gt; as anchor_lang::Accounts&lt;'_, SettleExpiredMarketPoolsToRevenuePoolBumps&gt;&gt;::try_accounts(move _25, move _26, move _27, move _28, move _29)</td></tr></table>>];
    bb5__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = move ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_19)<br/>_19 = move _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb7__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>_154 = discriminant(_7)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_30)<br/>_30 = {closure@programs/drift/src/instructions/admin.rs:5216:10: 5216:18}<br/></td></tr><tr><td align="left">_23 = std::result::Result::&lt;anchor_lang::prelude::Signer&lt;'_&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5216:10: 5216:18}&gt;(move _24, move _30)</td></tr></table>>];
    bb9__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;anchor_lang::prelude::Signer&lt;'_&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb10__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_31 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb11__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = move ((_22 as Continue).0: anchor_lang::prelude::Signer&lt;'_&gt;)<br/>_21 = move _35<br/>StorageDead(_35)<br/>_142 = discriminant(_22)<br/>StorageDead(_22)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = &amp;(*_1)<br/>StorageLive(_41)<br/>_41 = &amp;mut (*_2)<br/>StorageLive(_42)<br/>_42 = &amp;(*_3)<br/>StorageLive(_43)<br/>_43 = &amp;mut (*_4)<br/>StorageLive(_44)<br/>_44 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_39 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt; as anchor_lang::Accounts&lt;'_, SettleExpiredMarketPoolsToRevenuePoolBumps&gt;&gt;::try_accounts(move _40, move _41, move _42, move _43, move _44)</td></tr></table>>];
    bb12__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = move ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_34)<br/>_34 = move _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb13__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>_152 = discriminant(_22)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageLive(_45)<br/>_45 = {closure@programs/drift/src/instructions/admin.rs:5216:10: 5216:18}<br/></td></tr><tr><td align="left">_38 = std::result::Result::&lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5216:10: 5216:18}&gt;(move _39, move _45)</td></tr></table>>];
    bb15__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">_37 = &lt;std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _38)</td></tr></table>>];
    bb16__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_46 = discriminant(_37)<br/></td></tr><tr><td align="left">switchInt(move _46)</td></tr></table>>];
    bb17__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader&lt;'_, state::spot_market::SpotMarket&gt;)<br/>_36 = move _50<br/>StorageDead(_50)<br/>_144 = discriminant(_37)<br/>StorageDead(_37)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = &amp;(*_1)<br/>StorageLive(_56)<br/>_56 = &amp;mut (*_2)<br/>StorageLive(_57)<br/>_57 = &amp;(*_3)<br/>StorageLive(_58)<br/>_58 = &amp;mut (*_4)<br/>StorageLive(_59)<br/>_59 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_54 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt; as anchor_lang::Accounts&lt;'_, SettleExpiredMarketPoolsToRevenuePoolBumps&gt;&gt;::try_accounts(move _55, move _56, move _57, move _58, move _59)</td></tr></table>>];
    bb18__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = move ((_37 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_49)<br/>_49 = move _47<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _49)</td></tr></table>>];
    bb19__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/>_150 = discriminant(_37)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageLive(_60)<br/>_60 = {closure@programs/drift/src/instructions/admin.rs:5216:10: 5216:18}<br/></td></tr><tr><td align="left">_53 = std::result::Result::&lt;anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5216:10: 5216:18}&gt;(move _54, move _60)</td></tr></table>>];
    bb21__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = &lt;std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _53)</td></tr></table>>];
    bb22__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>_61 = discriminant(_52)<br/></td></tr><tr><td align="left">switchInt(move _61)</td></tr></table>>];
    bb23__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_65)<br/>_65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountLoader&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_51 = move _65<br/>StorageDead(_65)<br/>_146 = discriminant(_52)<br/>StorageDead(_52)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_160 = (((_6.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_69 = &amp;(*_160)<br/></td></tr><tr><td align="left">_68 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _69)</td></tr></table>>];
    bb24__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = move ((_52 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_64)<br/>_64 = move _62<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _64)</td></tr></table>>];
    bb25__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageDead(_62)<br/>_148 = discriminant(_52)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>_67 = ((*_68).0: anchor_lang::prelude::Pubkey)<br/>StorageDead(_68)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;_21<br/></td></tr><tr><td align="left">_70 = &lt;anchor_lang::prelude::Signer&lt;'_&gt; as anchor_lang::Key&gt;::key(move _71)</td></tr></table>>];
    bb27__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = &amp;_67<br/>StorageLive(_74)<br/>_74 = &amp;_70<br/></td></tr><tr><td align="left">_72 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _73, move _74)</td></tr></table>>];
    bb28__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left">switchInt(move _72)</td></tr></table>>];
    bb29__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageDead(_73)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = ConstraintHasOne<br/></td></tr><tr><td align="left">_78 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _79)</td></tr></table>>];
    bb30__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/></td></tr><tr><td align="left">_77 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _78, const &quot;state&quot;)</td></tr></table>>];
    bb31__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>_81 = _67<br/>StorageLive(_82)<br/>_82 = _70<br/>_80 = (move _81, move _82)<br/>StorageDead(_82)<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">_76 = anchor_lang::error::Error::with_pubkeys(move _77, move _80)</td></tr></table>>];
    bb32__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_77)<br/>_0 = std::result::Result::&lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _76)<br/>StorageDead(_76)<br/>StorageDead(_72)<br/>StorageDead(_70)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageDead(_73)<br/>_66 = const ()<br/>StorageDead(_72)<br/>StorageDead(_70)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>_92 = const b&quot;spot_market&quot;<br/>_91 = &amp;(*_92)<br/>_90 = move _91 as &amp;[u8] (PointerCoercion(Unsize))<br/>StorageDead(_91)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/></td></tr><tr><td align="left">_96 = core::num::&lt;impl u16&gt;::to_le_bytes(const 0_u16)</td></tr></table>>];
    bb34__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_95 = &amp;_96<br/></td></tr><tr><td align="left">_94 = &lt;[u8; 2] as AsRef&lt;[u8]&gt;&gt;::as_ref(move _95)</td></tr></table>>];
    bb35__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_93 = &amp;(*_94)<br/>StorageDead(_95)<br/>_89 = [move _90, move _93]<br/>StorageDead(_93)<br/>StorageDead(_90)<br/>_88 = &amp;_89<br/>_87 = &amp;(*_88)<br/>_86 = move _87 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_87)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>_98 = &amp;_1<br/>_138 = deref_copy (*_98)<br/>_97 = &amp;(*_138)<br/></td></tr><tr><td align="left">_85 = anchor_lang::prelude::Pubkey::find_program_address(move _86, move _97)</td></tr></table>>];
    bb36__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>StorageDead(_86)<br/>StorageLive(_83)<br/>_83 = (_85.0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_84)<br/>_84 = (_85.1: u8)<br/>StorageDead(_98)<br/>StorageDead(_96)<br/>StorageDead(_94)<br/>StorageDead(_92)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/>StorageDead(_85)<br/>StorageLive(_99)<br/>_99 = _84<br/>((*_4).0: u8) = move _99<br/>StorageDead(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>_104 = &amp;_36<br/></td></tr><tr><td align="left">_103 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt; as anchor_lang::Key&gt;::key(move _104)</td></tr></table>>];
    bb37__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_102 = &amp;_103<br/>StorageDead(_104)<br/>StorageLive(_105)<br/>_105 = &amp;_83<br/></td></tr><tr><td align="left">_101 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _102, move _105)</td></tr></table>>];
    bb38__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">switchInt(move _101)</td></tr></table>>];
    bb39__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/>StorageDead(_103)<br/>StorageDead(_102)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>_110 = ConstraintSeeds<br/></td></tr><tr><td align="left">_109 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _110)</td></tr></table>>];
    bb40__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/></td></tr><tr><td align="left">_108 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _109, const &quot;spot_market&quot;)</td></tr></table>>];
    bb41__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">_139 = const true<br/>StorageDead(_109)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>_113 = &amp;_36<br/></td></tr><tr><td align="left">_112 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt; as anchor_lang::Key&gt;::key(move _113)</td></tr></table>>];
    bb42__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_113)<br/>StorageLive(_114)<br/>_114 = _83<br/>_111 = (move _112, move _114)<br/>StorageDead(_114)<br/>StorageDead(_112)<br/>_139 = const false<br/></td></tr><tr><td align="left">_107 = anchor_lang::error::Error::with_pubkeys(move _108, move _111)</td></tr></table>>];
    bb43__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>_139 = const false<br/>StorageDead(_108)<br/>_0 = std::result::Result::&lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _107)<br/>StorageDead(_107)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/>StorageDead(_103)<br/>StorageDead(_102)<br/>_100 = const ()<br/>StorageDead(_101)<br/>StorageDead(_100)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>_119 = &amp;_36<br/>_118 = &amp;(*_119)<br/></td></tr><tr><td align="left">_117 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt; as AsRef&lt;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt;::as_ref(move _118)</td></tr></table>>];
    bb45__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>_116 = ((*_117).6: bool)<br/></td></tr><tr><td align="left">switchInt(move _116)</td></tr></table>>];
    bb46__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_117)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>_123 = ConstraintMut<br/></td></tr><tr><td align="left">_122 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _123)</td></tr></table>>];
    bb47__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/></td></tr><tr><td align="left">_121 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _122, const &quot;spot_market&quot;)</td></tr></table>>];
    bb48__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_122)<br/>_0 = std::result::Result::&lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _121)<br/>StorageDead(_121)<br/>StorageDead(_116)<br/>StorageDead(_115)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_117)<br/>_115 = const ()<br/>StorageDead(_116)<br/>StorageDead(_115)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>_128 = &amp;_51<br/>_127 = &amp;(*_128)<br/></td></tr><tr><td align="left">_126 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt; as AsRef&lt;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt;::as_ref(move _127)</td></tr></table>>];
    bb50__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_127)<br/>_125 = ((*_126).6: bool)<br/></td></tr><tr><td align="left">switchInt(move _125)</td></tr></table>>];
    bb51__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>StorageDead(_126)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>_132 = ConstraintMut<br/></td></tr><tr><td align="left">_131 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _132)</td></tr></table>>];
    bb52__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_132)<br/></td></tr><tr><td align="left">_130 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _131, const &quot;perp_market&quot;)</td></tr></table>>];
    bb53__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_131)<br/>_0 = std::result::Result::&lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _130)<br/>StorageDead(_130)<br/>StorageDead(_125)<br/>StorageDead(_124)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>StorageDead(_126)<br/>_124 = const ()<br/>StorageDead(_125)<br/>StorageDead(_124)<br/>StorageLive(_133)<br/>StorageLive(_134)<br/>_134 = move _6<br/>StorageLive(_135)<br/>_135 = move _21<br/>StorageLive(_136)<br/>_136 = move _36<br/>StorageLive(_137)<br/>_137 = move _51<br/>_133 = admin::SettleExpiredMarketPoolsToRevenuePool::&lt;'_&gt; { state: move _134, admin: move _135, spot_market: move _136, perp_market: move _137 }<br/>StorageDead(_137)<br/>StorageDead(_136)<br/>StorageDead(_135)<br/>StorageDead(_134)<br/>_0 = std::result::Result::&lt;admin::SettleExpiredMarketPoolsToRevenuePool&lt;'_&gt;, anchor_lang::error::Error&gt;::Ok(move _133)<br/>StorageDead(_133)<br/>StorageDead(_84)<br/>StorageDead(_83)<br/>StorageDead(_51)<br/>StorageDead(_36)<br/>StorageDead(_21)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb59__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left">return</td></tr></table>>];
    bb61__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">61 (cleanup)</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb62__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">62 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb63__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">63 (cleanup)</td></tr><tr><td align="left">drop(_108)</td></tr></table>>];
    bb64__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">64 (cleanup)</td></tr><tr><td align="left">switchInt(_139)</td></tr></table>>];
    bb65__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">65 (cleanup)</td></tr><tr><td align="left" balign="left">_156 = discriminant(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">66 (cleanup)</td></tr><tr><td align="left" balign="left">_157 = discriminant(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">67 (cleanup)</td></tr><tr><td align="left" balign="left">_158 = discriminant(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb68__0_6611 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">68 (cleanup)</td></tr><tr><td align="left" balign="left">_159 = discriminant(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_6611 -> bb1__0_6611 [label="return"];
    bb1__0_6611 -> bb2__0_6611 [label="return"];
    bb1__0_6611 -> bb62__0_6611 [label="unwind"];
    bb2__0_6611 -> bb3__0_6611 [label="return"];
    bb2__0_6611 -> bb62__0_6611 [label="unwind"];
    bb3__0_6611 -> bb4__0_6611 [label="0"];
    bb3__0_6611 -> bb6__0_6611 [label="1"];
    bb3__0_6611 -> bb5__0_6611 [label="otherwise"];
    bb4__0_6611 -> bb8__0_6611 [label="return"];
    bb4__0_6611 -> bb61__0_6611 [label="unwind"];
    bb6__0_6611 -> bb7__0_6611 [label="return"];
    bb6__0_6611 -> bb68__0_6611 [label="unwind"];
    bb7__0_6611 -> bb59__0_6611 [label=""];
    bb8__0_6611 -> bb9__0_6611 [label="return"];
    bb8__0_6611 -> bb61__0_6611 [label="unwind"];
    bb9__0_6611 -> bb10__0_6611 [label="return"];
    bb9__0_6611 -> bb61__0_6611 [label="unwind"];
    bb10__0_6611 -> bb11__0_6611 [label="0"];
    bb10__0_6611 -> bb12__0_6611 [label="1"];
    bb10__0_6611 -> bb5__0_6611 [label="otherwise"];
    bb11__0_6611 -> bb14__0_6611 [label="return"];
    bb11__0_6611 -> bb61__0_6611 [label="unwind"];
    bb12__0_6611 -> bb13__0_6611 [label="return"];
    bb12__0_6611 -> bb67__0_6611 [label="unwind"];
    bb13__0_6611 -> bb58__0_6611 [label=""];
    bb14__0_6611 -> bb15__0_6611 [label="return"];
    bb14__0_6611 -> bb61__0_6611 [label="unwind"];
    bb15__0_6611 -> bb16__0_6611 [label="return"];
    bb15__0_6611 -> bb61__0_6611 [label="unwind"];
    bb16__0_6611 -> bb17__0_6611 [label="0"];
    bb16__0_6611 -> bb18__0_6611 [label="1"];
    bb16__0_6611 -> bb5__0_6611 [label="otherwise"];
    bb17__0_6611 -> bb20__0_6611 [label="return"];
    bb17__0_6611 -> bb61__0_6611 [label="unwind"];
    bb18__0_6611 -> bb19__0_6611 [label="return"];
    bb18__0_6611 -> bb66__0_6611 [label="unwind"];
    bb19__0_6611 -> bb57__0_6611 [label=""];
    bb20__0_6611 -> bb21__0_6611 [label="return"];
    bb20__0_6611 -> bb61__0_6611 [label="unwind"];
    bb21__0_6611 -> bb22__0_6611 [label="return"];
    bb21__0_6611 -> bb61__0_6611 [label="unwind"];
    bb22__0_6611 -> bb23__0_6611 [label="0"];
    bb22__0_6611 -> bb24__0_6611 [label="1"];
    bb22__0_6611 -> bb5__0_6611 [label="otherwise"];
    bb23__0_6611 -> bb26__0_6611 [label="return"];
    bb23__0_6611 -> bb61__0_6611 [label="unwind"];
    bb24__0_6611 -> bb25__0_6611 [label="return"];
    bb24__0_6611 -> bb65__0_6611 [label="unwind"];
    bb25__0_6611 -> bb56__0_6611 [label=""];
    bb26__0_6611 -> bb27__0_6611 [label="return"];
    bb26__0_6611 -> bb61__0_6611 [label="unwind"];
    bb27__0_6611 -> bb28__0_6611 [label="return"];
    bb27__0_6611 -> bb61__0_6611 [label="unwind"];
    bb28__0_6611 -> bb33__0_6611 [label="0"];
    bb28__0_6611 -> bb29__0_6611 [label="otherwise"];
    bb29__0_6611 -> bb30__0_6611 [label="return"];
    bb29__0_6611 -> bb61__0_6611 [label="unwind"];
    bb30__0_6611 -> bb31__0_6611 [label="return"];
    bb30__0_6611 -> bb61__0_6611 [label="unwind"];
    bb31__0_6611 -> bb32__0_6611 [label="return"];
    bb31__0_6611 -> bb61__0_6611 [label="unwind"];
    bb32__0_6611 -> bb56__0_6611 [label=""];
    bb33__0_6611 -> bb34__0_6611 [label="return"];
    bb33__0_6611 -> bb61__0_6611 [label="unwind"];
    bb34__0_6611 -> bb35__0_6611 [label="return"];
    bb34__0_6611 -> bb61__0_6611 [label="unwind"];
    bb35__0_6611 -> bb36__0_6611 [label="return"];
    bb35__0_6611 -> bb61__0_6611 [label="unwind"];
    bb36__0_6611 -> bb37__0_6611 [label="return"];
    bb36__0_6611 -> bb61__0_6611 [label="unwind"];
    bb37__0_6611 -> bb38__0_6611 [label="return"];
    bb37__0_6611 -> bb61__0_6611 [label="unwind"];
    bb38__0_6611 -> bb44__0_6611 [label="0"];
    bb38__0_6611 -> bb39__0_6611 [label="otherwise"];
    bb39__0_6611 -> bb40__0_6611 [label="return"];
    bb39__0_6611 -> bb61__0_6611 [label="unwind"];
    bb40__0_6611 -> bb41__0_6611 [label="return"];
    bb40__0_6611 -> bb61__0_6611 [label="unwind"];
    bb41__0_6611 -> bb42__0_6611 [label="return"];
    bb41__0_6611 -> bb64__0_6611 [label="unwind"];
    bb42__0_6611 -> bb43__0_6611 [label="return"];
    bb42__0_6611 -> bb64__0_6611 [label="unwind"];
    bb43__0_6611 -> bb55__0_6611 [label=""];
    bb44__0_6611 -> bb45__0_6611 [label="return"];
    bb44__0_6611 -> bb61__0_6611 [label="unwind"];
    bb45__0_6611 -> bb46__0_6611 [label="0"];
    bb45__0_6611 -> bb49__0_6611 [label="otherwise"];
    bb46__0_6611 -> bb47__0_6611 [label="return"];
    bb46__0_6611 -> bb61__0_6611 [label="unwind"];
    bb47__0_6611 -> bb48__0_6611 [label="return"];
    bb47__0_6611 -> bb61__0_6611 [label="unwind"];
    bb48__0_6611 -> bb55__0_6611 [label=""];
    bb49__0_6611 -> bb50__0_6611 [label="return"];
    bb49__0_6611 -> bb61__0_6611 [label="unwind"];
    bb50__0_6611 -> bb51__0_6611 [label="0"];
    bb50__0_6611 -> bb54__0_6611 [label="otherwise"];
    bb51__0_6611 -> bb52__0_6611 [label="return"];
    bb51__0_6611 -> bb61__0_6611 [label="unwind"];
    bb52__0_6611 -> bb53__0_6611 [label="return"];
    bb52__0_6611 -> bb61__0_6611 [label="unwind"];
    bb53__0_6611 -> bb55__0_6611 [label=""];
    bb54__0_6611 -> bb60__0_6611 [label=""];
    bb55__0_6611 -> bb56__0_6611 [label=""];
    bb56__0_6611 -> bb57__0_6611 [label=""];
    bb57__0_6611 -> bb58__0_6611 [label=""];
    bb58__0_6611 -> bb59__0_6611 [label="return"];
    bb58__0_6611 -> bb62__0_6611 [label="unwind"];
    bb59__0_6611 -> bb60__0_6611 [label=""];
    bb61__0_6611 -> bb62__0_6611 [label="return"];
    bb63__0_6611 -> bb61__0_6611 [label="return"];
    bb64__0_6611 -> bb61__0_6611 [label="0"];
    bb64__0_6611 -> bb63__0_6611 [label="otherwise"];
    bb65__0_6611 -> bb61__0_6611 [label=""];
    bb66__0_6611 -> bb61__0_6611 [label=""];
    bb67__0_6611 -> bb61__0_6611 [label=""];
    bb68__0_6611 -> bb62__0_6611 [label=""];
}
