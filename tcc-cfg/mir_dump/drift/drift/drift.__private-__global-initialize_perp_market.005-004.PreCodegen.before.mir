// MIR for `__global::initialize_perp_market` before PreCodegen

fn __global::initialize_perp_market(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let _7: instruction::InitializePerpMarket;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, instruction::InitializePerpMarket>;
    let mut _9: std::result::Result<instruction::InitializePerpMarket, anchor_lang::error::ErrorCode>;
    let mut _10: std::result::Result<instruction::InitializePerpMarket, std::io::Error>;
    let mut _11: &mut &[u8];
    let mut _12: &mut &[u8];
    let mut _13: &[u8];
    let _14: &[u8];
    let mut _15: &[u8];
    let mut _16: std::ops::RangeFull;
    let mut _17: {closure@programs/drift/src/lib.rs:69:1: 69:11};
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let _22: instruction::InitializePerpMarket;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, instructions::admin::InitializePerpMarket<'_>>;
    let mut _53: std::result::Result<instructions::admin::InitializePerpMarket<'_>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::admin::InitializePerpMarketBumps;
    let mut _59: &mut instructions::admin::InitializePerpMarketBumps;
    let mut _60: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _61: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _69: std::result::Result<(), anchor_lang::error::Error>;
    let mut _70: anchor_lang::context::Context<'_, '_, '_, '_, instructions::admin::InitializePerpMarket<'_>>;
    let mut _71: &anchor_lang::prelude::Pubkey;
    let mut _72: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _73: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _74: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _75: instructions::admin::InitializePerpMarketBumps;
    let mut _76: u16;
    let mut _77: u128;
    let mut _78: u128;
    let mut _79: i64;
    let mut _80: u128;
    let mut _81: state::oracle::OracleSource;
    let mut _82: state::perp_market::ContractTier;
    let mut _83: u32;
    let mut _84: u32;
    let mut _85: u32;
    let mut _86: u32;
    let mut _87: u32;
    let mut _88: bool;
    let mut _89: u32;
    let mut _90: u32;
    let mut _91: u128;
    let mut _92: u64;
    let mut _93: u64;
    let mut _94: u64;
    let mut _95: u64;
    let mut _96: u64;
    let mut _97: u128;
    let mut _98: u8;
    let mut _99: u8;
    let mut _100: [u8; 32];
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _106: &instructions::admin::InitializePerpMarket<'_>;
    let mut _107: &anchor_lang::prelude::Pubkey;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    scope 1 {
        debug ix => _7;
        let _23: u16;
        let _24: u128;
        let _25: u128;
        let _26: i64;
        let _27: u128;
        let _28: state::oracle::OracleSource;
        let _29: state::perp_market::ContractTier;
        let _30: u32;
        let _31: u32;
        let _32: u32;
        let _33: u32;
        let _34: u32;
        let _35: bool;
        let _36: u32;
        let _37: u32;
        let _38: u128;
        let _39: u64;
        let _40: u64;
        let _41: u64;
        let _42: u64;
        let _43: u64;
        let _44: u128;
        let _45: u8;
        let _46: u8;
        let _47: [u8; 32];
        scope 6 {
            debug market_index => _23;
            debug amm_base_asset_reserve => _24;
            debug amm_quote_asset_reserve => _25;
            debug amm_periodicity => _26;
            debug amm_peg_multiplier => _27;
            debug oracle_source => _28;
            debug contract_tier => _29;
            debug margin_ratio_initial => _30;
            debug margin_ratio_maintenance => _31;
            debug liquidator_fee => _32;
            debug if_liquidation_fee => _33;
            debug imf_factor => _34;
            debug active_status => _35;
            debug base_spread => _36;
            debug max_spread => _37;
            debug max_open_interest => _38;
            debug max_revenue_withdraw_per_period => _39;
            debug quote_max_insurance => _40;
            debug order_step_size => _41;
            debug order_tick_size => _42;
            debug min_order_size => _43;
            debug concentration_coef_scale => _44;
            debug curve_update_intensity => _45;
            debug amm_jit_intensity => _46;
            debug name => _47;
            let mut _48: instructions::admin::InitializePerpMarketBumps;
            scope 7 {
                debug __bumps => _48;
                let mut _49: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                scope 8 {
                    debug __reallocs => _49;
                    let mut _50: &[anchor_lang::prelude::AccountInfo<'_>];
                    scope 9 {
                        debug __remaining_accounts => _50;
                        let mut _51: instructions::admin::InitializePerpMarket<'_>;
                        let _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _66: instructions::admin::InitializePerpMarket<'_>;
                        scope 10 {
                            debug __accounts => _51;
                            let _67: ();
                            let _102: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _105: ();
                            scope 15 {
                                debug result => _67;
                            }
                            scope 16 {
                                debug residual => _102;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _105;
                                scope 19 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _63;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _66;
                            scope 14 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Instruction: InitializePerpMarket";
        _5 = &(*_6);
        _4 = solana_program::log::sol_log(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        StorageLive(_16);
        _16 = RangeFull;
        _14 = <[u8] as Index<RangeFull>>::index(move _15, move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = &(*_14);
        _12 = &mut _13;
        _11 = &mut (*_12);
        _10 = <instruction::InitializePerpMarket as BorshDeserialize>::deserialize(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/lib.rs:69:1: 69:11};
        _9 = std::result::Result::<instruction::InitializePerpMarket, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/lib.rs:69:1: 69:11}>(move _10, move _17) -> [return: bb4, unwind: bb32];
    }

    bb4: {
        StorageDead(_17);
        StorageDead(_10);
        _8 = <std::result::Result<instruction::InitializePerpMarket, anchor_lang::error::ErrorCode> as Try>::branch(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_9);
        _18 = discriminant(_8);
        switchInt(move _18) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_22);
        _22 = move ((_8 as Continue).0: instruction::InitializePerpMarket);
        _7 = move _22;
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_8);
        StorageLive(_23);
        _23 = (_7.0: u16);
        StorageLive(_24);
        _24 = (_7.1: u128);
        StorageLive(_25);
        _25 = (_7.2: u128);
        StorageLive(_26);
        _26 = (_7.3: i64);
        StorageLive(_27);
        _27 = (_7.4: u128);
        StorageLive(_28);
        _28 = (_7.5: state::oracle::OracleSource);
        StorageLive(_29);
        _29 = (_7.6: state::perp_market::ContractTier);
        StorageLive(_30);
        _30 = (_7.7: u32);
        StorageLive(_31);
        _31 = (_7.8: u32);
        StorageLive(_32);
        _32 = (_7.9: u32);
        StorageLive(_33);
        _33 = (_7.10: u32);
        StorageLive(_34);
        _34 = (_7.11: u32);
        StorageLive(_35);
        _35 = (_7.12: bool);
        StorageLive(_36);
        _36 = (_7.13: u32);
        StorageLive(_37);
        _37 = (_7.14: u32);
        StorageLive(_38);
        _38 = (_7.15: u128);
        StorageLive(_39);
        _39 = (_7.16: u64);
        StorageLive(_40);
        _40 = (_7.17: u64);
        StorageLive(_41);
        _41 = (_7.18: u64);
        StorageLive(_42);
        _42 = (_7.19: u64);
        StorageLive(_43);
        _43 = (_7.20: u64);
        StorageLive(_44);
        _44 = (_7.21: u128);
        StorageLive(_45);
        _45 = (_7.22: u8);
        StorageLive(_46);
        _46 = (_7.23: u8);
        StorageLive(_47);
        _47 = (_7.24: [u8; 32]);
        StorageLive(_48);
        _48 = <InitializePerpMarketBumps as Default>::default() -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_8);
        goto -> bb28;
    }

    bb10: {
        StorageLive(_49);
        _49 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_50);
        _50 = &(*_2);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &mut _50;
        _55 = &mut (*_56);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &mut _48;
        _58 = &mut (*_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut _49;
        _60 = &mut (*_61);
        _53 = <admin::InitializePerpMarket<'_> as anchor_lang::Accounts<'_, InitializePerpMarketBumps>>::try_accounts(move _54, move _55, move _57, move _58, move _60) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_54);
        _52 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb13, unwind: bb31];
    }

    bb13: {
        StorageDead(_53);
        _62 = discriminant(_52);
        switchInt(move _62) -> [0: bb14, 1: bb15, otherwise: bb7];
    }

    bb14: {
        StorageLive(_66);
        _66 = move ((_52 as Continue).0: instructions::admin::InitializePerpMarket<'_>);
        _51 = move _66;
        StorageDead(_66);
        _108 = discriminant(_52);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_52);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_1);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &mut _51;
        _72 = &mut (*_73);
        StorageLive(_74);
        _74 = &(*_50);
        StorageLive(_75);
        _75 = move _48;
        _70 = anchor_lang::context::Context::<'_, '_, '_, '_, admin::InitializePerpMarket<'_>>::new(move _71, move _72, move _74, move _75) -> [return: bb17, unwind: bb30];
    }

    bb15: {
        StorageLive(_63);
        _63 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_65);
        _65 = move _63;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _65) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        StorageDead(_65);
        StorageDead(_63);
        _114 = discriminant(_52);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_52);
        goto -> bb26;
    }

    bb17: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_76);
        _76 = _23;
        StorageLive(_77);
        _77 = _24;
        StorageLive(_78);
        _78 = _25;
        StorageLive(_79);
        _79 = _26;
        StorageLive(_80);
        _80 = _27;
        StorageLive(_81);
        _81 = _28;
        StorageLive(_82);
        _82 = _29;
        StorageLive(_83);
        _83 = _30;
        StorageLive(_84);
        _84 = _31;
        StorageLive(_85);
        _85 = _32;
        StorageLive(_86);
        _86 = _33;
        StorageLive(_87);
        _87 = _34;
        StorageLive(_88);
        _88 = _35;
        StorageLive(_89);
        _89 = _36;
        StorageLive(_90);
        _90 = _37;
        StorageLive(_91);
        _91 = _38;
        StorageLive(_92);
        _92 = _39;
        StorageLive(_93);
        _93 = _40;
        StorageLive(_94);
        _94 = _41;
        StorageLive(_95);
        _95 = _42;
        StorageLive(_96);
        _96 = _43;
        StorageLive(_97);
        _97 = _44;
        StorageLive(_98);
        _98 = _45;
        StorageLive(_99);
        _99 = _46;
        StorageLive(_100);
        _100 = _47;
        _69 = drift::initialize_perp_market::<'_, '_>(move _70, move _76, move _77, move _78, move _79, move _80, move _81, move _82, move _83, move _84, move _85, move _86, move _87, move _88, move _89, move _90, move _91, move _92, move _93, move _94, move _95, move _96, move _97, move _98, move _99, move _100) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_70);
        _68 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _69) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        StorageDead(_69);
        _101 = discriminant(_68);
        switchInt(move _101) -> [0: bb20, 1: bb21, otherwise: bb7];
    }

    bb20: {
        StorageLive(_105);
        _105 = ((_68 as Continue).0: ());
        _67 = _105;
        StorageDead(_105);
        _110 = discriminant(_68);
        StorageDead(_73);
        StorageDead(_68);
        StorageLive(_106);
        _106 = &_51;
        StorageLive(_107);
        _107 = &(*_1);
        _0 = <admin::InitializePerpMarket<'_> as anchor_lang::AccountsExit<'_>>::exit(move _106, move _107) -> [return: bb23, unwind: bb30];
    }

    bb21: {
        StorageLive(_102);
        _102 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_104);
        _104 = move _102;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _104) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        StorageDead(_104);
        StorageDead(_102);
        _112 = discriminant(_68);
        StorageDead(_73);
        StorageDead(_68);
        StorageDead(_67);
        drop(_51) -> [return: bb26, unwind: bb31];
    }

    bb23: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_67);
        drop(_51) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        StorageDead(_51);
        StorageDead(_50);
        drop(_49) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_7);
        goto -> bb29;
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_50);
        drop(_49) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb28;
    }

    bb28: {
        StorageDead(_7);
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_51) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_49) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }

    bb33 (cleanup): {
        _116 = discriminant(_68);
        goto -> bb30;
    }

    bb34 (cleanup): {
        _117 = discriminant(_52);
        goto -> bb31;
    }
}
