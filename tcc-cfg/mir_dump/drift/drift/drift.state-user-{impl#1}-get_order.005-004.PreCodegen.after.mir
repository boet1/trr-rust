// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::get_order` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::get_order(_1: &User, _2: u32) -> Option<&Order> {
    debug self => _1;
    debug order_id => _2;
    let mut _0: std::option::Option<&state::user::Order>;
    let mut _3: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _4: std::slice::Iter<'_, state::user::Order>;
    let mut _5: &[state::user::Order];
    let mut _6: &[state::user::Order; 32];
    let mut _7: {closure@programs/drift/src/state/user.rs:279:19: 279:26};
    let mut _8: &u32;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &((*_1).5: [state::user::Order; 32]);
        _5 = move _6 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_6);
        _4 = core::slice::<impl [Order]>::iter(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _4;
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_2;
        _7 = {closure@programs/drift/src/state/user.rs:279:19: 279:26} { order_id: move _8 };
        StorageDead(_8);
        _0 = <std::slice::Iter<'_, Order> as Iterator>::find::<{closure@programs/drift/src/state/user.rs:279:19: 279:26}>(move _3, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_3);
        StorageDead(_4);
        return;
    }
}
