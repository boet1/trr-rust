// MIR for `calculate_serum_max_native_pc_quantity` before PreCodegen

fn calculate_serum_max_native_pc_quantity(_1: u64, _2: u64, _3: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug serum_limit_price => _1;
    debug serum_coin_qty => _2;
    debug pc_lot_size => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: u64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _9: std::result::Result<u64, error::ErrorCode>;
    let mut _10: u64;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _12: std::result::Result<u64, error::ErrorCode>;
    let mut _13: u64;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _15: std::result::Result<u64, error::ErrorCode>;
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: u64;
    let mut _19: bool;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: u64;
    let mut _25: u64;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: u64;
    let mut _31: u64;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: u64;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: u64;
    scope 1 {
        debug residual => _21;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _24;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _27;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _30;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _33;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _36;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _38;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _41;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _3;
        StorageLive(_17);
        StorageLive(_18);
        _18 = _3;
        _19 = Eq(const 2500_u64, const 0_u64);
        assert(!move _19, "attempt to divide `{}` by zero", _18) -> [success: bb1, unwind continue];
    }

    bb1: {
        _17 = Div(move _18, const 2500_u64);
        StorageDead(_18);
        _15 = <u64 as SafeMath>::safe_add(move _16, move _17) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        _20 = discriminant(_14);
        switchInt(move _20) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_24);
        _24 = ((_14 as Continue).0: u64);
        _13 = _24;
        StorageDead(_24);
        StorageLive(_25);
        _25 = _1;
        _12 = <u64 as SafeMath>::safe_mul(move _13, move _25) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_21);
        _21 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb24;
    }

    bb8: {
        StorageDead(_25);
        StorageDead(_13);
        _11 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _12) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_12);
        _26 = discriminant(_11);
        switchInt(move _26) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_30);
        _30 = ((_11 as Continue).0: u64);
        _10 = _30;
        StorageDead(_30);
        StorageLive(_31);
        _31 = _2;
        _9 = <u64 as SafeMath>::safe_mul(move _10, move _31) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_27);
        goto -> bb24;
    }

    bb13: {
        StorageDead(_31);
        StorageDead(_10);
        _8 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_9);
        _32 = discriminant(_8);
        switchInt(move _32) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_36);
        _36 = ((_8 as Continue).0: u64);
        _7 = _36;
        StorageDead(_36);
        _6 = <u64 as SafeMath>::safe_mul(move _7, const 10004_u64) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_33);
        _33 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb25;
    }

    bb18: {
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_6);
        _37 = discriminant(_5);
        switchInt(move _37) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_41);
        _41 = ((_5 as Continue).0: u64);
        _4 = _41;
        StorageDead(_41);
        _0 = <u64 as SafeMath>::safe_div(move _4, const 10000_u64) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_38);
        _38 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_38);
        goto -> bb26;
    }

    bb23: {
        StorageDead(_4);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb27;
    }

    bb24: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_4);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb27;
    }

    bb27: {
        return;
    }
}
