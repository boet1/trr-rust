// MIR for `validate_mint_fee` before PreCodegen

fn validate_mint_fee(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug account_info => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: std::cell::Ref<'_, &mut [u8]>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _4: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _10: std::cell::Ref<'_, &mut [u8]>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _13: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _14: &[u8];
    let _15: &&mut [u8];
    let mut _16: &std::cell::Ref<'_, &mut [u8]>;
    let _17: &std::cell::Ref<'_, &mut [u8]>;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _23: ();
    let mut _24: std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig, anchor_lang::prelude::ProgramError>;
    let mut _25: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _26: isize;
    let mut _29: spl_pod::primitives::PodU16;
    let mut _30: &anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFee;
    let mut _31: &anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig;
    let mut _32: u64;
    let mut _33: anchor_lang::prelude::Clock;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _35: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _42: std::result::Result<(), error::ErrorCode>;
    let mut _43: bool;
    let mut _44: u16;
    let mut _45: ();
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: &std::string::String;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 2];
    let _57: &[&str; 2];
    let _58: [&str; 2];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let mut _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: &[core::fmt::rt::Argument<'_>; 1];
    let _62: [core::fmt::rt::Argument<'_>; 1];
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &error::ErrorCode;
    let _65: &error::ErrorCode;
    let mut _66: error::ErrorCode;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: ();
    let mut _74: &mut [u8];
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    scope 1 {
        debug mint_data => _2;
        let _11: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
        let _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _22: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
        scope 6 {
            debug mint_with_extension => _11;
            scope 11 {
                debug fee_config => _27;
                let _27: &anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig;
                let _28: u16;
                let _37: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _40: anchor_lang::prelude::Clock;
                scope 12 {
                    debug fee => _28;
                    let _46: error::ErrorCode;
                    let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _71: ();
                    scope 17 {
                        debug error_code => _46;
                        let _53: std::string::String;
                        let mut _73: &[&str; 2];
                        scope 18 {
                            debug res => _53;
                        }
                    }
                    scope 19 {
                        debug residual => _68;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _71;
                        scope 22 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _37;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _40;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _19;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _22;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _76 = const false;
        _75 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _4) -> [return: bb2, unwind: bb47];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_3 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _2 = move _10;
        StorageDead(_10);
        _77 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &_2;
        _16 = &(*_17);
        _15 = <Ref<'_, &mut [u8]> as Deref>::deref(move _16) -> [return: bb7, unwind: bb46];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb50];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _87 = discriminant(_3);
        StorageDead(_3);
        goto -> bb42;
    }

    bb7: {
        _74 = deref_copy (*_15);
        _14 = &(*_74);
        StorageDead(_16);
        _13 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _14) -> [return: bb8, unwind: bb46];
    }

    bb8: {
        StorageDead(_14);
        _12 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _13) -> [return: bb9, unwind: bb46];
    }

    bb9: {
        StorageDead(_13);
        _18 = discriminant(_12);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_22);
        _22 = move ((_12 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _11 = move _22;
        StorageDead(_22);
        _79 = discriminant(_12);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_12);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_11;
        _24 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension::<anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig>(move _25) -> [return: bb13, unwind: bb46];
    }

    bb11: {
        StorageLive(_19);
        _19 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _21) -> [return: bb12, unwind: bb49];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        _85 = discriminant(_12);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_12);
        goto -> bb41;
    }

    bb13: {
        StorageDead(_25);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb14, otherwise: bb35];
    }

    bb14: {
        StorageLive(_27);
        _27 = ((_24 as Ok).0: &anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_27);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb15, unwind: bb45];
    }

    bb15: {
        _34 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _35) -> [return: bb16, unwind: bb45];
    }

    bb16: {
        _75 = const true;
        _76 = const true;
        StorageDead(_35);
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_40);
        _40 = move ((_34 as Continue).0: anchor_lang::prelude::Clock);
        _33 = move _40;
        StorageDead(_40);
        _32 = (_33.2: u64);
        _30 = anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig::get_epoch_fee(move _31, move _32) -> [return: bb20, unwind: bb48];
    }

    bb18: {
        StorageLive(_37);
        _37 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _39) -> [return: bb19, unwind: bb48];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        _83 = discriminant(_34);
        _75 = const false;
        _76 = const false;
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        goto -> bb39;
    }

    bb20: {
        StorageDead(_32);
        StorageDead(_31);
        _29 = ((*_30).2: spl_pod::primitives::PodU16);
        _28 = <u16 as From<spl_pod::primitives::PodU16>>::from(move _29) -> [return: bb21, unwind: bb48];
    }

    bb21: {
        StorageDead(_29);
        _81 = discriminant(_34);
        _75 = const false;
        _76 = const false;
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_30);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _28;
        _43 = Eq(move _44, const 0_u16);
        switchInt(move _43) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_44);
        StorageLive(_45);
        _45 = ();
        _42 = std::result::Result::<(), error::ErrorCode>::Ok(move _45);
        StorageDead(_45);
        goto -> bb30;
    }

    bb23: {
        StorageDead(_44);
        StorageLive(_46);
        _46 = error::ErrorCode::NonZeroTransferFee;
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _73 = const _;
        _57 = &(*_73);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_46;
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _64) -> [return: bb24, unwind: bb45];
    }

    bb24: {
        StorageDead(_64);
        _62 = [move _63];
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = move _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_60);
        _54 = Arguments::<'_>::new_v1(move _55, move _59) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_55);
        _53 = format(move _54) -> [return: bb26, unwind: bb45];
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        _52 = move _53;
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = <String as Deref>::deref(move _50) -> [return: bb27, unwind: bb44];
    }

    bb27: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb28, unwind: bb44];
    }

    bb28: {
        StorageDead(_48);
        drop(_52) -> [return: bb29, unwind: bb45];
    }

    bb29: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_66);
        _66 = _46;
        _42 = std::result::Result::<(), error::ErrorCode>::Err(move _66);
        StorageDead(_66);
        StorageDead(_46);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_43);
        _41 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _42) -> [return: bb31, unwind: bb45];
    }

    bb31: {
        StorageDead(_42);
        _67 = discriminant(_41);
        switchInt(move _67) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_71);
        _71 = ((_41 as Continue).0: ());
        _23 = _71;
        StorageDead(_71);
        StorageDead(_28);
        StorageDead(_41);
        StorageDead(_27);
        goto -> bb36;
    }

    bb33: {
        StorageLive(_68);
        _68 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb34, unwind: bb45];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_28);
        StorageDead(_41);
        goto -> bb39;
    }

    bb35: {
        _23 = const ();
        goto -> bb36;
    }

    bb36: {
        drop(_24) -> [return: bb37, unwind: bb46];
    }

    bb37: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_72);
        _72 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _72);
        StorageDead(_72);
        StorageDead(_11);
        drop(_2) -> [return: bb38, unwind: bb47];
    }

    bb38: {
        StorageDead(_2);
        goto -> bb43;
    }

    bb39: {
        StorageDead(_27);
        drop(_24) -> [return: bb40, unwind: bb46];
    }

    bb40: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_11);
        drop(_2) -> [return: bb42, unwind: bb47];
    }

    bb42: {
        StorageDead(_2);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_52) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_24) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_2) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        _89 = discriminant(_34);
        goto -> bb45;
    }

    bb49 (cleanup): {
        _90 = discriminant(_12);
        goto -> bb46;
    }

    bb50 (cleanup): {
        _91 = discriminant(_3);
        goto -> bb47;
    }
}
