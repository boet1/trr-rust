// MIR for `instructions::user::handle_delete_user` after PreCodegen

fn instructions::user::handle_delete_user(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::DeleteUser<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &std::cell::Ref<'_, state::user::User>;
    let _3: std::cell::Ref<'_, state::user::User>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _5: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _6: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _8: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: std::cell::Ref<'_, state::user::User>;
    let mut _15: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _20: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: ();
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _28: std::result::Result<(), error::ErrorCode>;
    let mut _29: &state::user::User;
    let _30: &state::user::User;
    let mut _31: &std::cell::Ref<'_, state::user::User>;
    let mut _32: &state::user::UserStats;
    let _33: &state::user::UserStats;
    let mut _34: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _35: &state::state::State;
    let _36: &state::state::State;
    let mut _37: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _38: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _39: i64;
    let mut _40: anchor_lang::prelude::Clock;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _42: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _53: ();
    let mut _54: u16;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _56: std::result::Result<u16, error::ErrorCode>;
    let mut _57: std::option::Option<u16>;
    let mut _58: u16;
    let mut _59: &state::user::UserStats;
    let mut _60: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _61: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: &mut state::user::UserStats;
    let mut _68: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let _70: ();
    let mut _71: u64;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _73: std::result::Result<u64, error::ErrorCode>;
    let mut _74: std::option::Option<u64>;
    let mut _75: u64;
    let mut _76: &state::state::State;
    let mut _77: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _78: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: &mut state::state::State;
    let mut _85: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _86: ();
    let mut _87: &mut instructions::user::DeleteUser<'_>;
    let mut _88: &mut instructions::user::DeleteUser<'_>;
    let mut _89: &mut instructions::user::DeleteUser<'_>;
    let mut _90: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _91: &mut instructions::user::DeleteUser<'_>;
    let mut _92: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _93: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _112: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _113: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug user => _2;
        let _14: &mut std::cell::RefMut<'_, state::user::UserStats>;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: std::cell::RefMut<'_, state::user::UserStats>;
        scope 6 {
            debug user_stats => _14;
            let _44: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _47: anchor_lang::prelude::Clock;
            let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _52: ();
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: u16;
            let _69: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 11 {
                debug residual => _44;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _47;
                scope 14 {
                }
            }
            scope 15 {
                debug residual => _49;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _52;
                scope 18 {
                }
            }
            scope 19 {
                debug residual => _63;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _66;
                scope 22 {
                }
            }
            scope 23 {
                debug state => _69;
                let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _83: u64;
                scope 24 {
                    debug residual => _80;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _83;
                    scope 27 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _22;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _25;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        _95 = const false;
        _94 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _87 = deref_copy (_1.1: &mut instructions::user::DeleteUser<'_>);
        _7 = &((*_87).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _5 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _6, move _8) -> [return: bb2, unwind: bb51];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _5) -> [return: bb3, unwind: bb51];
    }

    bb3: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = move ((_4 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _3 = move _13;
        StorageDead(_13);
        _2 = &_3;
        _98 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _88 = deref_copy (_1.1: &mut instructions::user::DeleteUser<'_>);
        _19 = &((*_88).1: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _18 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _19) -> [return: bb8, unwind: bb50];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind: bb55];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        _96 = discriminant(_4);
        StorageDead(_4);
        goto -> bb47;
    }

    bb8: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _17 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _18, move _20) -> [return: bb9, unwind: bb50];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb10, unwind: bb50];
    }

    bb10: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_25);
        _25 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _15 = move _25;
        StorageDead(_25);
        _14 = &mut _15;
        _102 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_2);
        _30 = <Ref<'_, User> as Deref>::deref(move _31) -> [return: bb14, unwind: bb49];
    }

    bb12: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        _100 = discriminant(_16);
        StorageDead(_16);
        goto -> bb46;
    }

    bb14: {
        _29 = &(*_30);
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_14);
        _33 = <RefMut<'_, UserStats> as Deref>::deref(move _34) -> [return: bb15, unwind: bb49];
    }

    bb15: {
        _32 = &(*_33);
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _89 = deref_copy (_1.1: &mut instructions::user::DeleteUser<'_>);
        _38 = &((*_89).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _90 = deref_copy (*_38);
        _111 = (((_90.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _37 = &(*_111);
        _36 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _37) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        _35 = &(*_36);
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _41 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _42) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        _94 = const true;
        _95 = const true;
        StorageDead(_42);
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        StorageLive(_47);
        _47 = move ((_41 as Continue).0: anchor_lang::prelude::Clock);
        _40 = move _47;
        StorageDead(_47);
        _39 = (_40.4: i64);
        _28 = validate_user_deletion(move _29, move _32, move _35, move _39) -> [return: bb22, unwind: bb53];
    }

    bb20: {
        StorageLive(_44);
        _44 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _46) -> [return: bb21, unwind: bb53];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb52;
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        _27 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _28) -> [return: bb23, unwind: bb53];
    }

    bb23: {
        StorageDead(_28);
        _48 = discriminant(_27);
        switchInt(move _48) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_52);
        _52 = ((_27 as Continue).0: ());
        _26 = _52;
        StorageDead(_52);
        _104 = discriminant(_41);
        _94 = const false;
        _95 = const false;
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_14);
        _59 = <RefMut<'_, UserStats> as Deref>::deref(move _60) -> [return: bb27, unwind: bb49];
    }

    bb25: {
        StorageLive(_49);
        _49 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb26, unwind: bb53];
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_49);
        goto -> bb52;
    }

    bb27: {
        StorageDead(_60);
        _58 = ((*_59).11: u16);
        _57 = core::num::<impl u16>::checked_sub(move _58, const 1_u16) -> [return: bb28, unwind: bb49];
    }

    bb28: {
        StorageDead(_58);
        StorageLive(_61);
        _61 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _56 = Option::<u16>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _57, move _61) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_57);
        _55 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _56) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        StorageDead(_56);
        _62 = discriminant(_55);
        switchInt(move _62) -> [0: bb31, 1: bb32, otherwise: bb5];
    }

    bb31: {
        StorageLive(_66);
        _66 = ((_55 as Continue).0: u16);
        _54 = _66;
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &mut (*_14);
        _67 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _68) -> [return: bb34, unwind: bb49];
    }

    bb32: {
        StorageLive(_63);
        _63 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb33, unwind: bb49];
    }

    bb33: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_54);
        StorageDead(_59);
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb45;
    }

    bb34: {
        StorageDead(_68);
        ((*_67).11: u16) = move _54;
        _53 = const ();
        StorageDead(_54);
        StorageDead(_67);
        StorageDead(_59);
        StorageDead(_55);
        StorageDead(_53);
        StorageLive(_69);
        _91 = deref_copy (_1.1: &mut instructions::user::DeleteUser<'_>);
        _69 = &mut ((*_91).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _92 = deref_copy (*_69);
        _112 = (((_92.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _77 = &(*_112);
        _76 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _77) -> [return: bb35, unwind: bb49];
    }

    bb35: {
        StorageDead(_77);
        _75 = ((*_76).9: u64);
        _74 = core::num::<impl u64>::checked_sub(move _75, const 1_u64) -> [return: bb36, unwind: bb49];
    }

    bb36: {
        StorageDead(_75);
        StorageLive(_78);
        _78 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _73 = Option::<u64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _74, move _78) -> [return: bb37, unwind: bb49];
    }

    bb37: {
        StorageDead(_78);
        StorageDead(_74);
        _72 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _73) -> [return: bb38, unwind: bb49];
    }

    bb38: {
        StorageDead(_73);
        _79 = discriminant(_72);
        switchInt(move _79) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_83);
        _83 = ((_72 as Continue).0: u64);
        _71 = _83;
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        _93 = deref_copy (*_69);
        _113 = (((_93.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _85 = &mut (*_113);
        _84 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _85) -> [return: bb42, unwind: bb49];
    }

    bb40: {
        StorageLive(_80);
        _80 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb41, unwind: bb49];
    }

    bb41: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_71);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb45;
    }

    bb42: {
        StorageDead(_85);
        ((*_84).9: u64) = move _71;
        _70 = const ();
        StorageDead(_71);
        StorageDead(_84);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_86);
        _86 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _86);
        StorageDead(_86);
        StorageDead(_69);
        drop(_15) -> [return: bb43, unwind: bb50];
    }

    bb43: {
        StorageDead(_15);
        StorageDead(_14);
        drop(_3) -> [return: bb44, unwind: bb51];
    }

    bb44: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb48;
    }

    bb45: {
        drop(_15) -> [return: bb46, unwind: bb50];
    }

    bb46: {
        StorageDead(_15);
        StorageDead(_14);
        drop(_3) -> [return: bb47, unwind: bb51];
    }

    bb47: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb48;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_15) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_3) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        resume;
    }

    bb52: {
        _106 = discriminant(_41);
        _94 = const false;
        _95 = const false;
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb45;
    }

    bb53 (cleanup): {
        _108 = discriminant(_41);
        goto -> bb49;
    }

    bb54 (cleanup): {
        _109 = discriminant(_16);
        goto -> bb50;
    }

    bb55 (cleanup): {
        _110 = discriminant(_4);
        goto -> bb51;
    }
}
