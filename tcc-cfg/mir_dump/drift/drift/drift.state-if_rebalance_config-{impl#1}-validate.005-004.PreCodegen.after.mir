// MIR for `if_rebalance_config::<impl at programs/drift/src/state/if_rebalance_config.rs:63:1: 63:23>::validate` after PreCodegen

fn if_rebalance_config::<impl at programs/drift/src/state/if_rebalance_config.rs:63:1: 63:23>::validate(_1: &IfRebalanceConfig) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _4: std::result::Result<(), error::ErrorCode>;
    let mut _5: bool;
    let mut _6: u16;
    let mut _7: ();
    let _8: error::ErrorCode;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let _13: &std::string::String;
    let _14: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[&str; 2];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let mut _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &error::ErrorCode;
    let _27: &error::ErrorCode;
    let mut _28: error::ErrorCode;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: ();
    let _34: ();
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _36: std::result::Result<(), error::ErrorCode>;
    let mut _37: bool;
    let mut _38: u16;
    let mut _39: u16;
    let mut _40: ();
    let _41: error::ErrorCode;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: &std::string::String;
    let _46: &std::string::String;
    let _47: std::string::String;
    let mut _49: std::fmt::Arguments<'_>;
    let mut _50: &[&str];
    let mut _51: &[&str; 2];
    let _52: &[&str; 2];
    let _53: [&str; 2];
    let mut _54: &[core::fmt::rt::Argument<'_>];
    let mut _55: &[core::fmt::rt::Argument<'_>; 1];
    let _56: &[core::fmt::rt::Argument<'_>; 1];
    let _57: [core::fmt::rt::Argument<'_>; 1];
    let mut _58: core::fmt::rt::Argument<'_>;
    let mut _59: &error::ErrorCode;
    let _60: &error::ErrorCode;
    let mut _61: error::ErrorCode;
    let mut _62: isize;
    let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _66: ();
    let _67: ();
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _69: std::result::Result<(), error::ErrorCode>;
    let mut _70: bool;
    let mut _71: u64;
    let mut _72: u64;
    let mut _73: ();
    let _74: error::ErrorCode;
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: &std::string::String;
    let _79: &std::string::String;
    let _80: std::string::String;
    let mut _82: std::fmt::Arguments<'_>;
    let mut _83: &[&str];
    let mut _84: &[&str; 2];
    let _85: &[&str; 2];
    let _86: [&str; 2];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let mut _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: &[core::fmt::rt::Argument<'_>; 1];
    let _90: [core::fmt::rt::Argument<'_>; 1];
    let mut _91: core::fmt::rt::Argument<'_>;
    let mut _92: &error::ErrorCode;
    let _93: &error::ErrorCode;
    let mut _94: error::ErrorCode;
    let mut _95: isize;
    let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _99: ();
    let _100: ();
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _102: std::result::Result<(), error::ErrorCode>;
    let mut _103: bool;
    let mut _104: u64;
    let mut _105: u64;
    let mut _106: ();
    let _107: error::ErrorCode;
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _111: &std::string::String;
    let _112: &std::string::String;
    let _113: std::string::String;
    let mut _115: std::fmt::Arguments<'_>;
    let mut _116: &[&str];
    let mut _117: &[&str; 2];
    let _118: &[&str; 2];
    let _119: [&str; 2];
    let mut _120: &[core::fmt::rt::Argument<'_>];
    let mut _121: &[core::fmt::rt::Argument<'_>; 1];
    let _122: &[core::fmt::rt::Argument<'_>; 1];
    let _123: [core::fmt::rt::Argument<'_>; 1];
    let mut _124: core::fmt::rt::Argument<'_>;
    let mut _125: &error::ErrorCode;
    let _126: &error::ErrorCode;
    let mut _127: error::ErrorCode;
    let mut _128: isize;
    let _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _132: ();
    let mut _133: ();
    scope 1 {
        debug error_code => _8;
        let _15: std::string::String;
        let mut _137: &[&str; 2];
        scope 2 {
            debug res => _15;
        }
    }
    scope 3 {
        debug residual => _30;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _33;
        scope 6 {
        }
    }
    scope 7 {
        debug error_code => _41;
        let _48: std::string::String;
        let mut _136: &[&str; 2];
        scope 8 {
            debug res => _48;
        }
    }
    scope 9 {
        debug residual => _63;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _66;
        scope 12 {
        }
    }
    scope 13 {
        debug error_code => _74;
        let _81: std::string::String;
        let mut _135: &[&str; 2];
        scope 14 {
            debug res => _81;
        }
    }
    scope 15 {
        debug residual => _96;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _99;
        scope 18 {
        }
    }
    scope 19 {
        debug error_code => _107;
        let _114: std::string::String;
        let mut _134: &[&str; 2];
        scope 20 {
            debug res => _114;
        }
    }
    scope 21 {
        debug residual => _129;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _132;
        scope 24 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).11: u16);
        _5 = Eq(move _6, const 0_u16);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = ();
        _4 = std::result::Result::<(), error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        goto -> bb9;
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = error::ErrorCode::InvalidIfRebalanceConfig;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _137 = const _;
        _19 = &(*_137);
        _18 = &(*_19);
        _17 = move _18 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_8;
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _26) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        _24 = [move _25];
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = Arguments::<'_>::new_v1(move _17, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = format(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_19);
        _14 = move _15;
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = <String as Deref>::deref(move _12) -> [return: bb6, unwind: bb58];
    }

    bb6: {
        _10 = &(*_11);
        StorageDead(_12);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb7, unwind: bb58];
    }

    bb7: {
        StorageDead(_10);
        drop(_14) -> [return: bb8, unwind: bb59];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_28);
        _28 = _8;
        _4 = std::result::Result::<(), error::ErrorCode>::Err(move _28);
        StorageDead(_28);
        StorageDead(_8);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_5);
        _3 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _4) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_4);
        _29 = discriminant(_3);
        switchInt(move _29) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_33);
        _33 = ((_3 as Continue).0: ());
        _2 = _33;
        StorageDead(_33);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = ((*_1).10: u16);
        StorageLive(_39);
        _39 = ((*_1).11: u16);
        _37 = Ne(move _38, move _39);
        switchInt(move _37) -> [0: bb16, otherwise: bb15];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_30);
        _30 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb54;
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_40);
        _40 = ();
        _36 = std::result::Result::<(), error::ErrorCode>::Ok(move _40);
        StorageDead(_40);
        goto -> bb23;
    }

    bb16: {
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_41);
        _41 = error::ErrorCode::InvalidIfRebalanceConfig;
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _136 = const _;
        _52 = &(*_136);
        _51 = &(*_52);
        _50 = move _51 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_51);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &_41;
        _59 = &(*_60);
        _58 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _59) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_59);
        _57 = [move _58];
        StorageDead(_58);
        _56 = &_57;
        _55 = &(*_56);
        _54 = move _55 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_55);
        _49 = Arguments::<'_>::new_v1(move _50, move _54) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_54);
        StorageDead(_50);
        _48 = format(move _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_52);
        _47 = move _48;
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = <String as Deref>::deref(move _45) -> [return: bb20, unwind: bb57];
    }

    bb20: {
        _43 = &(*_44);
        StorageDead(_45);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb21, unwind: bb57];
    }

    bb21: {
        StorageDead(_43);
        drop(_47) -> [return: bb22, unwind: bb59];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_61);
        _61 = _41;
        _36 = std::result::Result::<(), error::ErrorCode>::Err(move _61);
        StorageDead(_61);
        StorageDead(_41);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_37);
        _35 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _36) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_36);
        _62 = discriminant(_35);
        switchInt(move _62) -> [0: bb25, 1: bb26, otherwise: bb12];
    }

    bb25: {
        StorageLive(_66);
        _66 = ((_35 as Continue).0: ());
        _34 = _66;
        StorageDead(_66);
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = ((*_1).1: u64);
        StorageLive(_72);
        _72 = ((*_1).2: u64);
        _70 = Ge(move _71, move _72);
        switchInt(move _70) -> [0: bb29, otherwise: bb28];
    }

    bb26: {
        StorageLive(_63);
        _63 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb54;
    }

    bb28: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_73);
        _73 = ();
        _69 = std::result::Result::<(), error::ErrorCode>::Ok(move _73);
        StorageDead(_73);
        goto -> bb36;
    }

    bb29: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_74);
        _74 = error::ErrorCode::InvalidIfRebalanceConfig;
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _135 = const _;
        _85 = &(*_135);
        _84 = &(*_85);
        _83 = move _84 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_74;
        _92 = &(*_93);
        _91 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _92) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_92);
        _90 = [move _91];
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = move _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_88);
        _82 = Arguments::<'_>::new_v1(move _83, move _87) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_87);
        StorageDead(_83);
        _81 = format(move _82) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_82);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_85);
        _80 = move _81;
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = <String as Deref>::deref(move _78) -> [return: bb33, unwind: bb56];
    }

    bb33: {
        _76 = &(*_77);
        StorageDead(_78);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb34, unwind: bb56];
    }

    bb34: {
        StorageDead(_76);
        drop(_80) -> [return: bb35, unwind: bb59];
    }

    bb35: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_94);
        _94 = _74;
        _69 = std::result::Result::<(), error::ErrorCode>::Err(move _94);
        StorageDead(_94);
        StorageDead(_74);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_70);
        _68 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _69) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_69);
        _95 = discriminant(_68);
        switchInt(move _95) -> [0: bb38, 1: bb39, otherwise: bb12];
    }

    bb38: {
        StorageLive(_99);
        _99 = ((_68 as Continue).0: ());
        _67 = _99;
        StorageDead(_99);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = ((*_1).8: u64);
        StorageLive(_105);
        _105 = ((*_1).1: u64);
        _103 = Le(move _104, move _105);
        switchInt(move _103) -> [0: bb42, otherwise: bb41];
    }

    bb39: {
        StorageLive(_96);
        _96 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb54;
    }

    bb41: {
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_106);
        _106 = ();
        _102 = std::result::Result::<(), error::ErrorCode>::Ok(move _106);
        StorageDead(_106);
        goto -> bb49;
    }

    bb42: {
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_107);
        _107 = error::ErrorCode::InvalidIfRebalanceConfig;
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _134 = const _;
        _118 = &(*_134);
        _117 = &(*_118);
        _116 = move _117 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_117);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_107;
        _125 = &(*_126);
        _124 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _125) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_125);
        _123 = [move _124];
        StorageDead(_124);
        _122 = &_123;
        _121 = &(*_122);
        _120 = move _121 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_121);
        _115 = Arguments::<'_>::new_v1(move _116, move _120) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_120);
        StorageDead(_116);
        _114 = format(move _115) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_115);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_118);
        _113 = move _114;
        StorageDead(_114);
        _112 = &_113;
        _111 = &(*_112);
        _110 = <String as Deref>::deref(move _111) -> [return: bb46, unwind: bb55];
    }

    bb46: {
        _109 = &(*_110);
        StorageDead(_111);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb47, unwind: bb55];
    }

    bb47: {
        StorageDead(_109);
        drop(_113) -> [return: bb48, unwind: bb59];
    }

    bb48: {
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_108);
        StorageLive(_127);
        _127 = _107;
        _102 = std::result::Result::<(), error::ErrorCode>::Err(move _127);
        StorageDead(_127);
        StorageDead(_107);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_103);
        _101 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _102) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_102);
        _128 = discriminant(_101);
        switchInt(move _128) -> [0: bb51, 1: bb52, otherwise: bb12];
    }

    bb51: {
        StorageLive(_132);
        _132 = ((_101 as Continue).0: ());
        _100 = _132;
        StorageDead(_132);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_133);
        _133 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _133);
        StorageDead(_133);
        goto -> bb54;
    }

    bb52: {
        StorageLive(_129);
        _129 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_131);
        _131 = _129;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _131) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb54;
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_113) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_80) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_47) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_14) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        resume;
    }
}
