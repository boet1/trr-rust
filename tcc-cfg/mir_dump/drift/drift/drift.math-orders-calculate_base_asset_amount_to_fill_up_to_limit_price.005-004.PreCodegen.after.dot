digraph Mir_0_2588 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_base_asset_amount_to_fill_up_to_limit_price(_1: &amp;ReErased state::user::Order, _2: &amp;ReErased state::perp_market::PerpMarket, _3: std::option::Option&lt;u64&gt;, _4: std::option::Option&lt;i64&gt;) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _5: u64;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _7: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _8: &amp;ReErased state::user::Order;<br align="left"/>let mut _9: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _14: u64;<br align="left"/>let _15: u64;<br align="left"/>let _16: controller::position::PositionDirection;<br align="left"/>let mut _17: (u64, controller::position::PositionDirection);<br align="left"/>let mut _18: isize;<br align="left"/>let _19: u64;<br align="left"/>let _20: u64;<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _23: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: u64;<br align="left"/>let mut _31: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _32: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _33: u64;<br align="left"/>let mut _34: u64;<br align="left"/>let mut _35: isize;<br align="left"/>let _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _37: !;<br align="left"/>let mut _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _39: u64;<br align="left"/>let mut _40: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, controller::position::PositionDirection)&gt;;<br align="left"/>let mut _41: std::result::Result&lt;(u64, controller::position::PositionDirection), error::ErrorCode&gt;;<br align="left"/>let mut _42: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _43: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _44: u64;<br align="left"/>let mut _45: controller::position::PositionDirection;<br align="left"/>let mut _46: isize;<br align="left"/>let _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _48: !;<br align="left"/>let mut _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _50: (u64, controller::position::PositionDirection);<br align="left"/>let mut _51: u64;<br align="left"/>let mut _52: controller::position::PositionDirection;<br align="left"/>let _53: ();<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _56: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _57: bool;<br align="left"/>let mut _58: u64;<br align="left"/>let mut _59: !;<br align="left"/>let mut _60: u64;<br align="left"/>let mut _61: u64;<br align="left"/>let mut _62: u64;<br align="left"/>let mut _63: u64;<br align="left"/>debug order =&gt; _1;<br align="left"/>debug market =&gt; _2;<br align="left"/>debug limit_price =&gt; _3;<br align="left"/>debug existing_base_asset_amount =&gt; _4;<br align="left"/>debug base_asset_amount_unfilled =&gt; _5;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>debug max_trade_base_asset_amount =&gt; _15;<br align="left"/>debug max_trade_direction =&gt; _16;<br align="left"/>debug limit_price =&gt; _19;<br align="left"/>debug adjusted_limit_price =&gt; _20;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug residual =&gt; _36;<br align="left"/>debug val =&gt; _39;<br align="left"/>debug residual =&gt; _47;<br align="left"/>debug val =&gt; _50;<br align="left"/>>;
    bb0__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;(*_1)<br/>StorageLive(_9)<br/>_9 = _4<br/></td></tr><tr><td align="left">_7 = Order::get_base_asset_amount_unfilled(move _8, move _9)</td></tr></table>>];
    bb1__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb2__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_10 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb3__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_6 as Continue).0: u64)<br/>_5 = _14<br/>StorageDead(_14)<br/>StorageDead(_6)<br/>StorageLive(_17)<br/>_18 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb4__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_13)<br/>_13 = _11<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb6__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = _5<br/>StorageLive(_52)<br/>_52 = ((*_1).17: controller::position::PositionDirection)<br/>_17 = (move _51, move _52)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_3 as Some).0: u64)<br/>StorageLive(_20)<br/>_21 = discriminant(((*_1).17: controller::position::PositionDirection))<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb9__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _19<br/>StorageLive(_34)<br/>_34 = (((*_2).1: state::perp_market::AMM).53: u64)<br/></td></tr><tr><td align="left">_32 = &lt;u64 as SafeMath&gt;::safe_add(move _33, move _34)</td></tr></table>>];
    bb10__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = _19<br/>StorageLive(_25)<br/>_25 = (((*_2).1: state::perp_market::AMM).53: u64)<br/></td></tr><tr><td align="left">_23 = &lt;u64 as SafeMath&gt;::safe_sub(move _24, move _25)</td></tr></table>>];
    bb11__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb12__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_26 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb13__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_22 as Continue).0: u64)<br/>_20 = _30<br/>StorageDead(_30)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb15__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">_31 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _32)</td></tr></table>>];
    bb17__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>_35 = discriminant(_31)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb18__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_31 as Continue).0: u64)<br/>_20 = _39<br/>StorageDead(_39)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_31 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_38)<br/>_38 = _36<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _38)</td></tr></table>>];
    bb20__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = &amp;((*_2).1: state::perp_market::AMM)<br/>_42 = &amp;(*_43)<br/>StorageLive(_44)<br/>_44 = _20<br/>StorageLive(_45)<br/>_45 = ((*_1).17: controller::position::PositionDirection)<br/></td></tr><tr><td align="left">_41 = calculate_base_asset_amount_to_trade_to_price(move _42, move _44, move _45)</td></tr></table>>];
    bb22__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">_40 = &lt;std::result::Result&lt;(u64, controller::position::PositionDirection), error::ErrorCode&gt; as Try&gt;::branch(move _41)</td></tr></table>>];
    bb23__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>_46 = discriminant(_40)<br/></td></tr><tr><td align="left">switchInt(move _46)</td></tr></table>>];
    bb24__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_40 as Continue).0: (u64, controller::position::PositionDirection))<br/>_17 = _50<br/>StorageDead(_50)<br/>StorageDead(_20)<br/>StorageDead(_43)<br/>StorageDead(_40)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_40 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_49)<br/>_49 = _47<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _49)</td></tr></table>>];
    bb26__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_20)<br/>StorageDead(_43)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = (_17.0: u64)<br/>StorageLive(_16)<br/>_16 = (_17.1: controller::position::PositionDirection)<br/>StorageDead(_17)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = &amp;_16<br/>StorageLive(_56)<br/>_56 = &amp;((*_1).17: controller::position::PositionDirection)<br/></td></tr><tr><td align="left">_54 = &lt;controller::position::PositionDirection as PartialEq&gt;::ne(move _55, move _56)</td></tr></table>>];
    bb28__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left">switchInt(move _54)</td></tr></table>>];
    bb29__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_55)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>_58 = _15<br/>_57 = Eq(move _58, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb31__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>_0 = std::result::Result::&lt;u64, error::ErrorCode&gt;::Ok(const 0_u64)<br/>StorageDead(_57)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>_53 = const ()<br/>StorageDead(_57)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = _5<br/>StorageLive(_62)<br/>_62 = _15<br/></td></tr><tr><td align="left">_60 = std::cmp::min::&lt;u64&gt;(move _61, move _62)</td></tr></table>>];
    bb33__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_61)<br/>StorageLive(_63)<br/>_63 = (((*_2).1: state::perp_market::AMM).52: u64)<br/></td></tr><tr><td align="left">_0 = math::orders::standardize_base_asset_amount(move _60, move _63)</td></tr></table>>];
    bb34__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_60)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_2588 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2588 -> bb1__0_2588 [label="return"];
    bb1__0_2588 -> bb2__0_2588 [label="return"];
    bb2__0_2588 -> bb3__0_2588 [label="0"];
    bb2__0_2588 -> bb5__0_2588 [label="1"];
    bb2__0_2588 -> bb4__0_2588 [label="otherwise"];
    bb3__0_2588 -> bb8__0_2588 [label="1"];
    bb3__0_2588 -> bb7__0_2588 [label="otherwise"];
    bb5__0_2588 -> bb6__0_2588 [label="return"];
    bb6__0_2588 -> bb37__0_2588 [label=""];
    bb7__0_2588 -> bb27__0_2588 [label=""];
    bb8__0_2588 -> bb10__0_2588 [label="0"];
    bb8__0_2588 -> bb9__0_2588 [label="1"];
    bb8__0_2588 -> bb4__0_2588 [label="otherwise"];
    bb9__0_2588 -> bb16__0_2588 [label="return"];
    bb10__0_2588 -> bb11__0_2588 [label="return"];
    bb11__0_2588 -> bb12__0_2588 [label="return"];
    bb12__0_2588 -> bb13__0_2588 [label="0"];
    bb12__0_2588 -> bb14__0_2588 [label="1"];
    bb12__0_2588 -> bb4__0_2588 [label="otherwise"];
    bb13__0_2588 -> bb21__0_2588 [label=""];
    bb14__0_2588 -> bb15__0_2588 [label="return"];
    bb15__0_2588 -> bb35__0_2588 [label=""];
    bb16__0_2588 -> bb17__0_2588 [label="return"];
    bb17__0_2588 -> bb18__0_2588 [label="0"];
    bb17__0_2588 -> bb19__0_2588 [label="1"];
    bb17__0_2588 -> bb4__0_2588 [label="otherwise"];
    bb18__0_2588 -> bb21__0_2588 [label=""];
    bb19__0_2588 -> bb20__0_2588 [label="return"];
    bb20__0_2588 -> bb35__0_2588 [label=""];
    bb21__0_2588 -> bb22__0_2588 [label="return"];
    bb22__0_2588 -> bb23__0_2588 [label="return"];
    bb23__0_2588 -> bb24__0_2588 [label="0"];
    bb23__0_2588 -> bb25__0_2588 [label="1"];
    bb23__0_2588 -> bb4__0_2588 [label="otherwise"];
    bb24__0_2588 -> bb27__0_2588 [label=""];
    bb25__0_2588 -> bb26__0_2588 [label="return"];
    bb26__0_2588 -> bb36__0_2588 [label=""];
    bb27__0_2588 -> bb28__0_2588 [label="return"];
    bb28__0_2588 -> bb30__0_2588 [label="0"];
    bb28__0_2588 -> bb29__0_2588 [label="otherwise"];
    bb29__0_2588 -> bb31__0_2588 [label=""];
    bb30__0_2588 -> bb32__0_2588 [label="0"];
    bb30__0_2588 -> bb31__0_2588 [label="otherwise"];
    bb31__0_2588 -> bb37__0_2588 [label=""];
    bb32__0_2588 -> bb33__0_2588 [label="return"];
    bb33__0_2588 -> bb34__0_2588 [label="return"];
    bb34__0_2588 -> bb38__0_2588 [label=""];
    bb35__0_2588 -> bb36__0_2588 [label=""];
    bb36__0_2588 -> bb37__0_2588 [label=""];
    bb37__0_2588 -> bb38__0_2588 [label=""];
}
