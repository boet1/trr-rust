digraph Mir_0_528 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn insert_maker_order_info(_1: &amp;ReErased mut std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;, _2: (anchor_lang::prelude::Pubkey, usize, u64), _3: controller::position::PositionDirection) -&gt; ()<br align="left"/>let _4: u64;<br align="left"/>let _5: usize;<br align="left"/>let mut _6: std::result::Result&lt;usize, usize&gt;;<br align="left"/>let mut _7: &amp;ReErased [(anchor_lang::prelude::Pubkey, usize, u64)];<br align="left"/>let _8: &amp;ReErased [(anchor_lang::prelude::Pubkey, usize, u64)];<br align="left"/>let mut _9: &amp;ReErased std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;;<br align="left"/>let mut _10: Closure(DefId(0:529 ~ drift[d311]::controller::orders::insert_maker_order_info::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased (anchor_lang::prelude::Pubkey, usize, u64),)) -&gt; std::cmp::Ordering, []), (&amp;ReErased controller::position::PositionDirection, &amp;ReErased u64)]);<br align="left"/>let mut _11: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _12: &amp;ReErased u64;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: usize;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: &amp;ReErased std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;;<br align="left"/>let _20: ();<br align="left"/>let mut _21: &amp;ReErased mut std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;;<br align="left"/>let mut _22: usize;<br align="left"/>let mut _23: (anchor_lang::prelude::Pubkey, usize, u64);<br align="left"/>debug maker_orders_info =&gt; _1;<br align="left"/>debug maker_order_info =&gt; _2;<br align="left"/>debug direction =&gt; _3;<br align="left"/>debug price =&gt; _4;<br align="left"/>debug index =&gt; _5;<br align="left"/>debug index =&gt; _14;<br align="left"/>debug index =&gt; _15;<br align="left"/>>;
    bb0__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>_4 = (_2.2: u64)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_1)<br/></td></tr><tr><td align="left">_8 = &lt;Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64)&gt; as Deref&gt;::deref(move _9)</td></tr></table>>];
    bb1__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = &amp;(*_8)<br/>StorageDead(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;_3<br/>StorageLive(_12)<br/>_12 = &amp;_4<br/>_10 = {closure@programs/drift/src/controller/orders.rs:1668:58: 1668:64} { direction: move _11, price: move _12 }<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_6 = core::slice::&lt;impl [(anchor_lang::prelude::Pubkey, usize, u64)]&gt;::binary_search_by::&lt;'_, {closure@programs/drift/src/controller/orders.rs:1668:58: 1668:64}&gt;(move _7, move _10)</td></tr></table>>];
    bb2__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_7)<br/>_13 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb3__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_6 as Err).0: usize)<br/>_5 = _15<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_6 as Ok).0: usize)<br/>_5 = _14<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_6)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _5<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;(*_1)<br/></td></tr><tr><td align="left">_18 = Vec::&lt;(anchor_lang::prelude::Pubkey, usize, u64)&gt;::capacity(move _19)</td></tr></table>>];
    bb7__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_16 = Lt(move _17, move _18)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb8__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;mut (*_1)<br/>StorageLive(_22)<br/>_22 = _5<br/>StorageLive(_23)<br/>_23 = _2<br/></td></tr><tr><td align="left">_20 = Vec::&lt;(anchor_lang::prelude::Pubkey, usize, u64)&gt;::insert(move _21, move _22, move _23)</td></tr></table>>];
    bb9__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>_0 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>_0 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_528 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_528 -> bb1__0_528 [label="return"];
    bb1__0_528 -> bb2__0_528 [label="return"];
    bb2__0_528 -> bb5__0_528 [label="0"];
    bb2__0_528 -> bb3__0_528 [label="1"];
    bb2__0_528 -> bb4__0_528 [label="otherwise"];
    bb3__0_528 -> bb6__0_528 [label=""];
    bb5__0_528 -> bb6__0_528 [label=""];
    bb6__0_528 -> bb7__0_528 [label="return"];
    bb7__0_528 -> bb10__0_528 [label="0"];
    bb7__0_528 -> bb8__0_528 [label="otherwise"];
    bb8__0_528 -> bb9__0_528 [label="return"];
    bb9__0_528 -> bb11__0_528 [label=""];
    bb10__0_528 -> bb11__0_528 [label=""];
}
