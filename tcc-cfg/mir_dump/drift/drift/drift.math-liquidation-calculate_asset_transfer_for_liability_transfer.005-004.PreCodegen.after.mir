// MIR for `calculate_asset_transfer_for_liability_transfer` after PreCodegen

fn calculate_asset_transfer_for_liability_transfer(_1: u128, _2: u32, _3: u32, _4: i64, _5: u128, _6: u32, _7: u32, _8: i64) -> std::result::Result<u128, error::ErrorCode> {
    debug asset_amount => _1;
    debug asset_liquidation_multiplier => _2;
    debug asset_decimals => _3;
    debug asset_price => _4;
    debug liability_amount => _5;
    debug liability_liquidation_multiplier => _6;
    debug liability_decimals => _7;
    debug liability_price => _8;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _9: u128;
    let _10: u128;
    let mut _11: (u128, u128);
    let mut _12: bool;
    let mut _13: u32;
    let mut _14: u32;
    let mut _15: u128;
    let mut _16: u32;
    let mut _17: u32;
    let mut _18: u32;
    let mut _19: (u32, bool);
    let mut _20: u128;
    let mut _21: u32;
    let mut _22: u32;
    let mut _23: u32;
    let mut _24: (u32, bool);
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u128;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _31: std::result::Result<u128, error::ErrorCode>;
    let mut _32: u128;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _34: std::result::Result<u128, error::ErrorCode>;
    let mut _35: u128;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _37: std::result::Result<u128, error::ErrorCode>;
    let mut _38: u128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: u128;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: u128;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _50: std::result::Result<u128, error::ErrorCode>;
    let mut _51: i64;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: u128;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _64: std::result::Result<u128, error::ErrorCode>;
    let mut _65: u32;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: u128;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _78: std::result::Result<u128, error::ErrorCode>;
    let mut _79: u128;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _81: std::result::Result<u128, error::ErrorCode>;
    let mut _82: i64;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: u128;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _90: std::result::Result<u128, error::ErrorCode>;
    let mut _91: u32;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: u128;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: (u128, u128);
    let mut _116: bool;
    let mut _117: u32;
    let mut _118: u128;
    let mut _119: u32;
    let mut _120: u32;
    let mut _121: (u32, bool);
    let mut _122: u128;
    let mut _123: u32;
    let mut _124: u32;
    let mut _125: (u32, bool);
    let mut _127: bool;
    let mut _128: u128;
    let mut _129: u128;
    let mut _130: u128;
    let mut _131: u128;
    let mut _132: (u128, bool);
    let mut _133: u128;
    let mut _134: u128;
    let mut _135: (u128, bool);
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _138: std::result::Result<u128, error::ErrorCode>;
    let mut _139: u128;
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _141: std::result::Result<u128, error::ErrorCode>;
    let mut _142: u128;
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _144: std::result::Result<u128, error::ErrorCode>;
    let mut _145: u128;
    let mut _146: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _147: std::result::Result<u128, error::ErrorCode>;
    let mut _148: u128;
    let mut _149: u128;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _151: std::result::Result<u128, error::ErrorCode>;
    let mut _152: i64;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _168: u128;
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _174: u128;
    let mut _175: isize;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _180: ();
    let mut _181: bool;
    let mut _182: u128;
    let mut _183: u128;
    let mut _184: u128;
    scope 1 {
        debug numerator_scale => _9;
        debug denominator_scale => _10;
        let mut _25: u128;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: u128;
        let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _56: u128;
        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _61: u128;
        let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _70: u128;
        let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _75: u128;
        let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _87: u128;
        let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _96: u128;
        let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _101: u128;
        let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _106: u128;
        let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _112: u128;
        scope 2 {
            debug asset_transfer => _25;
            let _113: u128;
            let _114: u128;
            scope 43 {
                debug asset_value_numerator_scale => _113;
                debug asset_value_denominator_scale => _114;
                let _126: u128;
                scope 44 {
                    debug asset_delta => _126;
                    let _136: u128;
                    let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _157: u128;
                    let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _162: u128;
                    let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _167: u128;
                    let _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _173: u128;
                    let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _179: u128;
                    scope 45 {
                        debug asset_value_delta => _136;
                    }
                    scope 46 {
                        debug residual => _154;
                        scope 47 {
                        }
                    }
                    scope 48 {
                        debug val => _157;
                        scope 49 {
                        }
                    }
                    scope 50 {
                        debug residual => _159;
                        scope 51 {
                        }
                    }
                    scope 52 {
                        debug val => _162;
                        scope 53 {
                        }
                    }
                    scope 54 {
                        debug residual => _164;
                        scope 55 {
                        }
                    }
                    scope 56 {
                        debug val => _167;
                        scope 57 {
                        }
                    }
                    scope 58 {
                        debug residual => _170;
                        scope 59 {
                        }
                    }
                    scope 60 {
                        debug val => _173;
                        scope 61 {
                        }
                    }
                    scope 62 {
                        debug residual => _176;
                        scope 63 {
                        }
                    }
                    scope 64 {
                        debug val => _179;
                        scope 65 {
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _44;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _47;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _53;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _56;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _58;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _61;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _67;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _70;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _72;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _75;
            scope 22 {
            }
        }
        scope 23 {
            debug residual => _84;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _87;
            scope 26 {
            }
        }
        scope 27 {
            debug residual => _93;
            scope 28 {
            }
        }
        scope 29 {
            debug val => _96;
            scope 30 {
            }
        }
        scope 31 {
            debug residual => _98;
            scope 32 {
            }
        }
        scope 33 {
            debug val => _101;
            scope 34 {
            }
        }
        scope 35 {
            debug residual => _103;
            scope 36 {
            }
        }
        scope 37 {
            debug val => _106;
            scope 38 {
            }
        }
        scope 39 {
            debug residual => _109;
            scope 40 {
            }
        }
        scope 41 {
            debug val => _112;
            scope 42 {
            }
        }
    }

    bb0: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _3;
        StorageLive(_14);
        _14 = _7;
        _12 = Gt(move _13, move _14);
        switchInt(move _12) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _3;
        StorageLive(_18);
        _18 = _7;
        _19 = CheckedSub(_17, _18);
        assert(!move (_19.1: bool), "attempt to compute `{} - {}`, which would overflow", move _17, move _18) -> [success: bb2, unwind continue];
    }

    bb2: {
        _16 = move (_19.0: u32);
        StorageDead(_18);
        StorageDead(_17);
        _15 = core::num::<impl u128>::pow(const 10_u128, move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        _11 = (move _15, const 1_u128);
        StorageDead(_15);
        goto -> bb7;
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _7;
        StorageLive(_23);
        _23 = _3;
        _24 = CheckedSub(_22, _23);
        assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _22, move _23) -> [success: bb5, unwind continue];
    }

    bb5: {
        _21 = move (_24.0: u32);
        StorageDead(_23);
        StorageDead(_22);
        _20 = core::num::<impl u128>::pow(const 10_u128, move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_21);
        _11 = (const 1_u128, move _20);
        StorageDead(_20);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_12);
        StorageLive(_9);
        _9 = (_11.0: u128);
        StorageLive(_10);
        _10 = (_11.1: u128);
        StorageDead(_11);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _5;
        StorageLive(_42);
        _42 = _9;
        _40 = <u128 as SafeMath>::safe_mul(move _41, move _42) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_40);
        _43 = discriminant(_39);
        switchInt(move _43) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_47);
        _47 = ((_39 as Continue).0: u128);
        _38 = _47;
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = _8;
        _50 = <i64 as Cast>::cast::<u128>(move _51) -> [return: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_44);
        _44 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb112;
    }

    bb14: {
        StorageDead(_51);
        _49 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _50) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        StorageLive(_56);
        _56 = ((_49 as Continue).0: u128);
        _48 = _56;
        StorageDead(_56);
        _37 = <u128 as SafeMath>::safe_mul(move _38, move _48) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_53);
        _53 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb110;
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_38);
        _36 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _37) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_37);
        _57 = discriminant(_36);
        switchInt(move _57) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_61);
        _61 = ((_36 as Continue).0: u128);
        _35 = _61;
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _2;
        _64 = <u32 as Cast>::cast::<u128>(move _65) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_58);
        _58 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb110;
    }

    bb24: {
        StorageDead(_65);
        _63 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _64) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_64);
        _66 = discriminant(_63);
        switchInt(move _66) -> [0: bb26, 1: bb27, otherwise: bb11];
    }

    bb26: {
        StorageLive(_70);
        _70 = ((_63 as Continue).0: u128);
        _62 = _70;
        StorageDead(_70);
        _34 = <u128 as SafeMath>::safe_mul(move _35, move _62) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_67);
        _67 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_62);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb108;
    }

    bb29: {
        StorageDead(_62);
        StorageDead(_35);
        _33 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _34) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_34);
        _71 = discriminant(_33);
        switchInt(move _71) -> [0: bb31, 1: bb32, otherwise: bb11];
    }

    bb31: {
        StorageLive(_75);
        _75 = ((_33 as Continue).0: u128);
        _32 = _75;
        StorageDead(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _4;
        _81 = <i64 as Cast>::cast::<u128>(move _82) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_72);
        _72 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb108;
    }

    bb34: {
        StorageDead(_82);
        _80 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _81) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb36, 1: bb37, otherwise: bb11];
    }

    bb36: {
        StorageLive(_87);
        _87 = ((_80 as Continue).0: u128);
        _79 = _87;
        StorageDead(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _6;
        _90 = <u32 as Cast>::cast::<u128>(move _91) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_84);
        _84 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb107;
    }

    bb39: {
        StorageDead(_91);
        _89 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _90) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_90);
        _92 = discriminant(_89);
        switchInt(move _92) -> [0: bb41, 1: bb42, otherwise: bb11];
    }

    bb41: {
        StorageLive(_96);
        _96 = ((_89 as Continue).0: u128);
        _88 = _96;
        StorageDead(_96);
        _78 = <u128 as SafeMath>::safe_mul(move _79, move _88) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_93);
        _93 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_88);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb104;
    }

    bb44: {
        StorageDead(_88);
        StorageDead(_79);
        _77 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _78) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_78);
        _97 = discriminant(_77);
        switchInt(move _97) -> [0: bb46, 1: bb47, otherwise: bb11];
    }

    bb46: {
        StorageLive(_101);
        _101 = ((_77 as Continue).0: u128);
        _76 = _101;
        StorageDead(_101);
        _31 = <u128 as SafeMath>::safe_div(move _32, move _76) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_98);
        _98 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_100);
        StorageDead(_98);
        goto -> bb104;
    }

    bb49: {
        StorageDead(_76);
        StorageDead(_32);
        _30 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _31) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_31);
        _102 = discriminant(_30);
        switchInt(move _102) -> [0: bb51, 1: bb52, otherwise: bb11];
    }

    bb51: {
        StorageLive(_106);
        _106 = ((_30 as Continue).0: u128);
        _29 = _106;
        StorageDead(_106);
        StorageLive(_107);
        _107 = _10;
        _28 = <u128 as SafeMath>::safe_div(move _29, move _107) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_103);
        _103 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_105);
        StorageDead(_103);
        goto -> bb105;
    }

    bb54: {
        StorageDead(_107);
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_28);
        _108 = discriminant(_27);
        switchInt(move _108) -> [0: bb56, 1: bb57, otherwise: bb11];
    }

    bb56: {
        StorageLive(_112);
        _112 = ((_27 as Continue).0: u128);
        _26 = _112;
        StorageDead(_112);
        _25 = <u128 as Ord>::max(move _26, const 1_u128) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_109);
        _109 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_111);
        StorageDead(_109);
        goto -> bb106;
    }

    bb59: {
        StorageDead(_26);
        StorageDead(_89);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_63);
        StorageDead(_49);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = _3;
        _116 = Gt(move _117, const 6_u32);
        switchInt(move _116) -> [0: bb63, otherwise: bb60];
    }

    bb60: {
        StorageDead(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = _3;
        _121 = CheckedSub(_120, const 6_u32);
        assert(!move (_121.1: bool), "attempt to compute `{} - {}`, which would overflow", move _120, const 6_u32) -> [success: bb61, unwind continue];
    }

    bb61: {
        _119 = move (_121.0: u32);
        StorageDead(_120);
        _118 = core::num::<impl u128>::pow(const 10_u128, move _119) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_119);
        _115 = (move _118, const 1_u128);
        StorageDead(_118);
        goto -> bb66;
    }

    bb63: {
        StorageDead(_117);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = _3;
        _125 = CheckedSub(const 6_u32, _124);
        assert(!move (_125.1: bool), "attempt to compute `{} - {}`, which would overflow", const 6_u32, move _124) -> [success: bb64, unwind continue];
    }

    bb64: {
        _123 = move (_125.0: u32);
        StorageDead(_124);
        _122 = core::num::<impl u128>::pow(const 10_u128, move _123) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_123);
        _115 = (const 1_u128, move _122);
        StorageDead(_122);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_116);
        StorageLive(_113);
        _113 = (_115.0: u128);
        StorageLive(_114);
        _114 = (_115.1: u128);
        StorageDead(_115);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _25;
        StorageLive(_129);
        _129 = _1;
        _127 = Gt(move _128, move _129);
        switchInt(move _127) -> [0: bb69, otherwise: bb67];
    }

    bb67: {
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_130);
        _130 = _25;
        StorageLive(_131);
        _131 = _1;
        _132 = CheckedSub(_130, _131);
        assert(!move (_132.1: bool), "attempt to compute `{} - {}`, which would overflow", move _130, move _131) -> [success: bb68, unwind continue];
    }

    bb68: {
        _126 = move (_132.0: u128);
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb71;
    }

    bb69: {
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_133);
        _133 = _1;
        StorageLive(_134);
        _134 = _25;
        _135 = CheckedSub(_133, _134);
        assert(!move (_135.1: bool), "attempt to compute `{} - {}`, which would overflow", move _133, move _134) -> [success: bb70, unwind continue];
    }

    bb70: {
        _126 = move (_135.0: u128);
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_127);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = _126;
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = _4;
        _151 = <i64 as Cast>::cast::<u128>(move _152) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_152);
        _150 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _151) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_151);
        _153 = discriminant(_150);
        switchInt(move _153) -> [0: bb74, 1: bb75, otherwise: bb11];
    }

    bb74: {
        StorageLive(_157);
        _157 = ((_150 as Continue).0: u128);
        _149 = _157;
        StorageDead(_157);
        _147 = <u128 as SafeMath>::safe_mul(move _148, move _149) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_154);
        _154 = ((_150 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        goto -> bb100;
    }

    bb77: {
        StorageDead(_149);
        StorageDead(_148);
        _146 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _147) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_147);
        _158 = discriminant(_146);
        switchInt(move _158) -> [0: bb79, 1: bb80, otherwise: bb11];
    }

    bb79: {
        StorageLive(_162);
        _162 = ((_146 as Continue).0: u128);
        _145 = _162;
        StorageDead(_162);
        _144 = <u128 as SafeMath>::safe_div(move _145, const _) -> [return: bb82, unwind continue];
    }

    bb80: {
        StorageLive(_159);
        _159 = ((_146 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_161);
        StorageDead(_159);
        goto -> bb100;
    }

    bb82: {
        StorageDead(_145);
        _143 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _144) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_144);
        _163 = discriminant(_143);
        switchInt(move _163) -> [0: bb84, 1: bb85, otherwise: bb11];
    }

    bb84: {
        StorageLive(_167);
        _167 = ((_143 as Continue).0: u128);
        _142 = _167;
        StorageDead(_167);
        StorageLive(_168);
        _168 = _113;
        _141 = <u128 as SafeMath>::safe_mul(move _142, move _168) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_164);
        _164 = ((_143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_166);
        StorageDead(_164);
        goto -> bb101;
    }

    bb87: {
        StorageDead(_168);
        StorageDead(_142);
        _140 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _141) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_141);
        _169 = discriminant(_140);
        switchInt(move _169) -> [0: bb89, 1: bb90, otherwise: bb11];
    }

    bb89: {
        StorageLive(_173);
        _173 = ((_140 as Continue).0: u128);
        _139 = _173;
        StorageDead(_173);
        StorageLive(_174);
        _174 = _114;
        _138 = <u128 as SafeMath>::safe_div(move _139, move _174) -> [return: bb92, unwind continue];
    }

    bb90: {
        StorageLive(_170);
        _170 = ((_140 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_172);
        _172 = _170;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _172) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_172);
        StorageDead(_170);
        goto -> bb102;
    }

    bb92: {
        StorageDead(_174);
        StorageDead(_139);
        _137 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _138) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_138);
        _175 = discriminant(_137);
        switchInt(move _175) -> [0: bb94, 1: bb95, otherwise: bb11];
    }

    bb94: {
        StorageLive(_179);
        _179 = ((_137 as Continue).0: u128);
        _136 = _179;
        StorageDead(_179);
        StorageDead(_150);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_137);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _136;
        _181 = Lt(move _182, const _);
        switchInt(move _181) -> [0: bb98, otherwise: bb97];
    }

    bb95: {
        StorageLive(_176);
        _176 = ((_137 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_178);
        StorageDead(_176);
        goto -> bb103;
    }

    bb97: {
        StorageDead(_182);
        StorageLive(_183);
        _183 = _1;
        _25 = move _183;
        StorageDead(_183);
        _180 = const ();
        goto -> bb99;
    }

    bb98: {
        StorageDead(_182);
        _180 = const ();
        goto -> bb99;
    }

    bb99: {
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_184);
        _184 = _25;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _184);
        StorageDead(_184);
        StorageDead(_136);
        StorageDead(_126);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_25);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb114;
    }

    bb100: {
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_142);
        StorageDead(_141);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb103;
    }

    bb103: {
        StorageDead(_150);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_126);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb113;
    }

    bb104: {
        StorageDead(_76);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb105;
    }

    bb105: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_26);
        StorageDead(_89);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_80);
        StorageDead(_77);
        goto -> bb109;
    }

    bb108: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb109;
    }

    bb109: {
        StorageDead(_63);
        goto -> bb111;
    }

    bb110: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb111;
    }

    bb111: {
        StorageDead(_49);
        goto -> bb112;
    }

    bb112: {
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        goto -> bb113;
    }

    bb113: {
        StorageDead(_25);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb114;
    }

    bb114: {
        return;
    }
}
