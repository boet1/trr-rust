// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::get_fuel_bonus_numerator` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::get_fuel_bonus_numerator(_1: UserStats, _2: i64, _3: i64) -> std::result::Result<i64, error::ErrorCode> {
    debug self => _1;
    debug last_fuel_bonus_update_ts => _2;
    debug now => _3;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: i64;
    let mut _7: !;
    let _8: i64;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _10: std::result::Result<i64, error::ErrorCode>;
    let mut _11: i64;
    let mut _12: i64;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: i64;
    let mut _18: i64;
    scope 1 {
        debug since_last => _8;
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Ne(move _6, const 0_i64);
        switchInt(move _5) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _3;
        StorageLive(_12);
        _12 = _2;
        _10 = <i64 as SafeMath>::safe_sub(move _11, move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: i64);
        _8 = _17;
        StorageDead(_17);
        StorageDead(_9);
        StorageLive(_18);
        _18 = _8;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _18);
        StorageDead(_18);
        goto -> bb9;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_14);
        _14 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        goto -> bb9;
    }

    bb8: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(const 0_i64);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}
