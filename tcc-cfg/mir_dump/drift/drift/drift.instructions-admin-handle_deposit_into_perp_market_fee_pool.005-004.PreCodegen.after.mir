// MIR for `admin::handle_deposit_into_perp_market_fee_pool` after PreCodegen

fn admin::handle_deposit_into_perp_market_fee_pool(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::DepositIntoMarketFeePool<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _14: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _26: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _27: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _28: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _31: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _32: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: ();
    let mut _39: &str;
    let _40: &str;
    let mut _41: &std::string::String;
    let _42: &std::string::String;
    let _43: std::string::String;
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let mut _47: &[&str; 3];
    let _48: &[&str; 3];
    let _49: [&str; 3];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let mut _51: &[core::fmt::rt::Argument<'_>; 2];
    let _52: &[core::fmt::rt::Argument<'_>; 2];
    let _53: [core::fmt::rt::Argument<'_>; 2];
    let mut _54: core::fmt::rt::Argument<'_>;
    let mut _55: &u64;
    let _56: &u64;
    let mut _57: core::fmt::rt::Argument<'_>;
    let mut _58: &u16;
    let _59: &u16;
    let _60: &state::perp_market::PerpMarket;
    let mut _61: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _62: ();
    let mut _63: &str;
    let _64: &str;
    let mut _65: &std::string::String;
    let _66: &std::string::String;
    let _67: std::string::String;
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let mut _71: &[&str; 2];
    let _72: &[&str; 2];
    let _73: [&str; 2];
    let mut _74: &[core::fmt::rt::Argument<'_>];
    let mut _75: &[core::fmt::rt::Argument<'_>; 2];
    let _76: &[core::fmt::rt::Argument<'_>; 2];
    let _77: [core::fmt::rt::Argument<'_>; 2];
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &i128;
    let _80: &i128;
    let _81: &state::perp_market::PerpMarket;
    let mut _82: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &i128;
    let _85: &i128;
    let _86: i128;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _88: std::result::Result<i128, error::ErrorCode>;
    let mut _89: i128;
    let mut _90: &state::perp_market::PerpMarket;
    let mut _91: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _92: i128;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _94: std::result::Result<i128, error::ErrorCode>;
    let mut _95: u64;
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: i128;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _108: std::result::Result<i128, error::ErrorCode>;
    let mut _109: i128;
    let mut _110: &state::perp_market::PerpMarket;
    let mut _111: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _112: i128;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _114: std::result::Result<i128, error::ErrorCode>;
    let mut _115: u64;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: &mut state::perp_market::PerpMarket;
    let mut _127: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _129: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _131: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _132: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _133: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _134: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _140: ();
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _142: std::result::Result<(), error::ErrorCode>;
    let mut _143: u128;
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _145: std::result::Result<u128, error::ErrorCode>;
    let mut _146: u64;
    let mut _147: isize;
    let mut _149: !;
    let mut _150: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _152: &state::spot_market::SpotBalanceType;
    let _153: &state::spot_market::SpotBalanceType;
    let _154: state::spot_market::SpotBalanceType;
    let mut _155: &mut state::spot_market::SpotMarket;
    let mut _156: &mut state::spot_market::SpotMarket;
    let mut _157: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _158: &mut dyn state::spot_market::SpotBalance;
    let mut _159: &mut state::perp_market::PoolBalance;
    let mut _160: &mut state::perp_market::PoolBalance;
    let mut _161: &mut state::perp_market::PerpMarket;
    let mut _162: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _168: ();
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _170: std::result::Result<(), anchor_lang::error::Error>;
    let mut _171: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _172: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _173: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _174: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _175: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _176: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _177: &anchor_lang::prelude::AccountInfo<'_>;
    let _178: &anchor_lang::prelude::AccountInfo<'_>;
    let _179: anchor_lang::prelude::AccountInfo<'_>;
    let mut _180: &anchor_lang::prelude::Signer<'_>;
    let mut _181: u64;
    let mut _182: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _183: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _184: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _185: bool;
    let mut _186: &state::spot_market::SpotMarket;
    let _187: &state::spot_market::SpotMarket;
    let mut _188: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _189: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _195: ();
    let mut _199: &mut instructions::admin::DepositIntoMarketFeePool<'_>;
    let mut _200: &mut instructions::admin::DepositIntoMarketFeePool<'_>;
    let mut _201: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _202: &mut instructions::admin::DepositIntoMarketFeePool<'_>;
    let mut _203: &mut instructions::admin::DepositIntoMarketFeePool<'_>;
    let mut _204: &mut instructions::admin::DepositIntoMarketFeePool<'_>;
    let mut _205: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _206: &mut instructions::admin::DepositIntoMarketFeePool<'_>;
    let mut _207: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _208: &mut instructions::admin::DepositIntoMarketFeePool<'_>;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _230: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _13;
        let _25: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
        scope 10 {
            debug remaining_accounts_iter => _25;
            let _29: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
            let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _37: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
            scope 11 {
                debug mint => _29;
                let _44: std::string::String;
                let _68: std::string::String;
                let _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _100: i128;
                let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _105: i128;
                let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _120: i128;
                let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _125: i128;
                let _128: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _139: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                let mut _197: &[&str; 2];
                let mut _198: &[&str; 3];
                scope 16 {
                    debug res => _44;
                }
                scope 17 {
                    debug res => _68;
                }
                scope 18 {
                    debug residual => _97;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _100;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug residual => _102;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _105;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug residual => _117;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug val => _120;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug residual => _122;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug val => _125;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug quote_spot_market => _128;
                    let _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _151: u128;
                    let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _167: ();
                    let _191: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _194: ();
                    let mut _196: &state::spot_market::SpotBalanceType;
                    scope 39 {
                        debug residual => _148;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug val => _151;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug residual => _164;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug val => _167;
                        scope 46 {
                        }
                    }
                    scope 47 {
                        debug residual => _191;
                        scope 48 {
                        }
                    }
                    scope 49 {
                        debug val => _194;
                        scope 50 {
                        }
                    }
                }
                scope 35 {
                    debug residual => _136;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug val => _139;
                    scope 38 {
                    }
                }
            }
            scope 12 {
                debug residual => _34;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _37;
                scope 15 {
                }
            }
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _199 = deref_copy (_1.1: &mut instructions::admin::DepositIntoMarketFeePool<'_>);
        _7 = &((*_199).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb105];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _209 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _200 = deref_copy (_1.1: &mut instructions::admin::DepositIntoMarketFeePool<'_>);
        _18 = &((*_200).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb109];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _223 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb99;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb105];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb105];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _213 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _201 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _28 = &(*_201);
        _27 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _28) -> [return: bb13, unwind: bb104];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb108];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _211 = discriminant(_15);
        StorageDead(_15);
        goto -> bb98;
    }

    bb13: {
        StorageDead(_28);
        _26 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _27) -> [return: bb14, unwind: bb104];
    }

    bb14: {
        StorageDead(_27);
        _25 = &mut _26;
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &mut (*_25);
        _31 = get_token_mint(move _32) -> [return: bb15, unwind: bb104];
    }

    bb15: {
        StorageDead(_32);
        _30 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _31) -> [return: bb16, unwind: bb104];
    }

    bb16: {
        StorageDead(_31);
        _33 = discriminant(_30);
        switchInt(move _33) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_37);
        _37 = move ((_30 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _29 = move _37;
        StorageDead(_37);
        StorageDead(_30);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _198 = const _;
        _48 = &(*_198);
        _47 = &(*_48);
        _46 = move _47 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_2;
        _55 = &(*_56);
        _54 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _55) -> [return: bb20, unwind: bb104];
    }

    bb18: {
        StorageLive(_34);
        _34 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb19, unwind: bb104];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_30);
        goto -> bb97;
    }

    bb20: {
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_13);
        _60 = <RefMut<'_, PerpMarket> as Deref>::deref(move _61) -> [return: bb21, unwind: bb104];
    }

    bb21: {
        StorageDead(_61);
        _59 = &((*_60).21: u16);
        _58 = &(*_59);
        _57 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _58) -> [return: bb22, unwind: bb104];
    }

    bb22: {
        StorageDead(_58);
        _53 = [move _54, move _57];
        StorageDead(_57);
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = move _51 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_51);
        _45 = Arguments::<'_>::new_v1(move _46, move _50) -> [return: bb23, unwind: bb104];
    }

    bb23: {
        StorageDead(_50);
        StorageDead(_46);
        _44 = format(move _45) -> [return: bb24, unwind: bb104];
    }

    bb24: {
        StorageDead(_45);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        _43 = move _44;
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = <String as Deref>::deref(move _41) -> [return: bb25, unwind: bb103];
    }

    bb25: {
        _39 = &(*_40);
        StorageDead(_41);
        _38 = solana_program::log::sol_log(move _39) -> [return: bb26, unwind: bb103];
    }

    bb26: {
        StorageDead(_39);
        drop(_43) -> [return: bb27, unwind: bb104];
    }

    bb27: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _197 = const _;
        _72 = &(*_197);
        _71 = &(*_72);
        _70 = move _71 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_71);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &(*_13);
        _81 = <RefMut<'_, PerpMarket> as Deref>::deref(move _82) -> [return: bb28, unwind: bb104];
    }

    bb28: {
        StorageDead(_82);
        _80 = &(((*_81).1: state::perp_market::AMM).31: i128);
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_debug::<i128>(move _79) -> [return: bb29, unwind: bb104];
    }

    bb29: {
        StorageDead(_79);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_13);
        _90 = <RefMut<'_, PerpMarket> as Deref>::deref(move _91) -> [return: bb30, unwind: bb104];
    }

    bb30: {
        StorageDead(_91);
        _89 = (((*_90).1: state::perp_market::AMM).31: i128);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _2;
        _94 = <u64 as Cast>::cast::<i128>(move _95) -> [return: bb31, unwind: bb104];
    }

    bb31: {
        StorageDead(_95);
        _93 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _94) -> [return: bb32, unwind: bb104];
    }

    bb32: {
        StorageDead(_94);
        _96 = discriminant(_93);
        switchInt(move _96) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_100);
        _100 = ((_93 as Continue).0: i128);
        _92 = _100;
        StorageDead(_100);
        _88 = <i128 as SafeMath>::safe_add(move _89, move _92) -> [return: bb36, unwind: bb104];
    }

    bb34: {
        StorageLive(_97);
        _97 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_99);
        _99 = _97;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _99) -> [return: bb35, unwind: bb104];
    }

    bb35: {
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb96;
    }

    bb36: {
        StorageDead(_92);
        StorageDead(_89);
        _87 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _88) -> [return: bb37, unwind: bb104];
    }

    bb37: {
        StorageDead(_88);
        _101 = discriminant(_87);
        switchInt(move _101) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_105);
        _105 = ((_87 as Continue).0: i128);
        _86 = _105;
        StorageDead(_105);
        _85 = &_86;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_debug::<i128>(move _84) -> [return: bb41, unwind: bb104];
    }

    bb39: {
        StorageLive(_102);
        _102 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb40, unwind: bb104];
    }

    bb40: {
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb96;
    }

    bb41: {
        StorageDead(_84);
        _77 = [move _78, move _83];
        StorageDead(_83);
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = move _75 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_75);
        _69 = Arguments::<'_>::new_v1(move _70, move _74) -> [return: bb42, unwind: bb104];
    }

    bb42: {
        StorageDead(_74);
        StorageDead(_70);
        _68 = format(move _69) -> [return: bb43, unwind: bb104];
    }

    bb43: {
        StorageDead(_69);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_72);
        _67 = move _68;
        StorageDead(_68);
        _66 = &_67;
        _65 = &(*_66);
        _64 = <String as Deref>::deref(move _65) -> [return: bb44, unwind: bb102];
    }

    bb44: {
        _63 = &(*_64);
        StorageDead(_65);
        _62 = solana_program::log::sol_log(move _63) -> [return: bb45, unwind: bb102];
    }

    bb45: {
        StorageDead(_63);
        drop(_67) -> [return: bb46, unwind: bb104];
    }

    bb46: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &(*_13);
        _110 = <RefMut<'_, PerpMarket> as Deref>::deref(move _111) -> [return: bb47, unwind: bb104];
    }

    bb47: {
        StorageDead(_111);
        _109 = (((*_110).1: state::perp_market::AMM).31: i128);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = _2;
        _114 = <u64 as Cast>::cast::<i128>(move _115) -> [return: bb48, unwind: bb104];
    }

    bb48: {
        StorageDead(_115);
        _113 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _114) -> [return: bb49, unwind: bb104];
    }

    bb49: {
        StorageDead(_114);
        _116 = discriminant(_113);
        switchInt(move _116) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_120);
        _120 = ((_113 as Continue).0: i128);
        _112 = _120;
        StorageDead(_120);
        _108 = <i128 as SafeMath>::safe_add(move _109, move _112) -> [return: bb53, unwind: bb104];
    }

    bb51: {
        StorageLive(_117);
        _117 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb52, unwind: bb104];
    }

    bb52: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb95;
    }

    bb53: {
        StorageDead(_112);
        StorageDead(_109);
        _107 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _108) -> [return: bb54, unwind: bb104];
    }

    bb54: {
        StorageDead(_108);
        _121 = discriminant(_107);
        switchInt(move _121) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_125);
        _125 = ((_107 as Continue).0: i128);
        _106 = _125;
        StorageDead(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &mut (*_13);
        _126 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _127) -> [return: bb58, unwind: bb104];
    }

    bb56: {
        StorageLive(_122);
        _122 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb57, unwind: bb104];
    }

    bb57: {
        StorageDead(_124);
        StorageDead(_122);
        goto -> bb95;
    }

    bb58: {
        StorageDead(_127);
        (((*_126).1: state::perp_market::AMM).31: i128) = move _106;
        StorageDead(_106);
        StorageDead(_126);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _202 = deref_copy (_1.1: &mut instructions::admin::DepositIntoMarketFeePool<'_>);
        _133 = &((*_202).5: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _132 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _133) -> [return: bb59, unwind: bb104];
    }

    bb59: {
        StorageDead(_133);
        StorageLive(_134);
        _134 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _131 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _132, move _134) -> [return: bb60, unwind: bb104];
    }

    bb60: {
        StorageDead(_134);
        StorageDead(_132);
        _130 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _131) -> [return: bb61, unwind: bb104];
    }

    bb61: {
        StorageDead(_131);
        _135 = discriminant(_130);
        switchInt(move _135) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_139);
        _139 = move ((_130 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _129 = move _139;
        StorageDead(_139);
        _128 = &mut _129;
        _217 = discriminant(_130);
        StorageDead(_130);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = _2;
        _145 = <u64 as Cast>::cast::<u128>(move _146) -> [return: bb65, unwind: bb101];
    }

    bb63: {
        StorageLive(_136);
        _136 = ((_130 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb64, unwind: bb107];
    }

    bb64: {
        StorageDead(_138);
        StorageDead(_136);
        _215 = discriminant(_130);
        StorageDead(_130);
        goto -> bb94;
    }

    bb65: {
        StorageDead(_146);
        _144 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _145) -> [return: bb66, unwind: bb101];
    }

    bb66: {
        StorageDead(_145);
        _147 = discriminant(_144);
        switchInt(move _147) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_151);
        _151 = ((_144 as Continue).0: u128);
        _143 = _151;
        StorageDead(_151);
        StorageLive(_152);
        StorageLive(_153);
        _196 = const _;
        _153 = &(*_196);
        _152 = &(*_153);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &mut (*_128);
        _156 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _157) -> [return: bb70, unwind: bb101];
    }

    bb68: {
        StorageLive(_148);
        _148 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_150);
        _150 = _148;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _150) -> [return: bb69, unwind: bb101];
    }

    bb69: {
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_143);
        StorageDead(_142);
        goto -> bb92;
    }

    bb70: {
        _155 = &mut (*_156);
        StorageDead(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &mut (*_13);
        _161 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _162) -> [return: bb71, unwind: bb101];
    }

    bb71: {
        StorageDead(_162);
        _160 = &mut (((*_161).1: state::perp_market::AMM).4: state::perp_market::PoolBalance);
        _159 = &mut (*_160);
        _158 = move _159 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_159);
        _142 = update_spot_balances(move _143, move _152, move _155, move _158, const false) -> [return: bb72, unwind: bb101];
    }

    bb72: {
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_143);
        _141 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _142) -> [return: bb73, unwind: bb101];
    }

    bb73: {
        StorageDead(_142);
        _163 = discriminant(_141);
        switchInt(move _163) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_167);
        _167 = ((_141 as Continue).0: ());
        _140 = _167;
        StorageDead(_167);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _203 = deref_copy (_1.1: &mut instructions::admin::DepositIntoMarketFeePool<'_>);
        _172 = &((*_203).7: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _171 = &(*_172);
        StorageLive(_173);
        StorageLive(_174);
        _204 = deref_copy (_1.1: &mut instructions::admin::DepositIntoMarketFeePool<'_>);
        _174 = &((*_204).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _205 = deref_copy (*_174);
        _229 = (((_205.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _173 = &(*_229);
        StorageLive(_175);
        StorageLive(_176);
        _206 = deref_copy (_1.1: &mut instructions::admin::DepositIntoMarketFeePool<'_>);
        _176 = &((*_206).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _207 = deref_copy (*_176);
        _230 = (((_207.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _175 = &(*_230);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _208 = deref_copy (_1.1: &mut instructions::admin::DepositIntoMarketFeePool<'_>);
        _180 = &((*_208).2: anchor_lang::prelude::Signer<'_>);
        _179 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _180) -> [return: bb77, unwind: bb101];
    }

    bb75: {
        StorageLive(_164);
        _164 = ((_141 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb76, unwind: bb101];
    }

    bb76: {
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_156);
        StorageDead(_153);
        goto -> bb92;
    }

    bb77: {
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        StorageLive(_181);
        _181 = _2;
        StorageLive(_182);
        StorageLive(_183);
        _183 = &_29;
        _182 = &(*_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &(*_128);
        _187 = <RefMut<'_, SpotMarket> as Deref>::deref(move _188) -> [return: bb78, unwind: bb100];
    }

    bb78: {
        _186 = &(*_187);
        StorageDead(_188);
        _185 = SpotMarket::has_transfer_hook(move _186) -> [return: bb79, unwind: bb100];
    }

    bb79: {
        switchInt(move _185) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_189);
        _189 = &mut (*_25);
        _184 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _189);
        StorageDead(_189);
        goto -> bb82;
    }

    bb81: {
        StorageDead(_187);
        StorageDead(_186);
        _184 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb82;
    }

    bb82: {
        StorageDead(_185);
        _170 = receive(move _171, move _173, move _175, move _177, move _181, move _182, move _184) -> [return: bb83, unwind: bb100];
    }

    bb83: {
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_171);
        _169 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _170) -> [return: bb84, unwind: bb100];
    }

    bb84: {
        StorageDead(_170);
        _190 = discriminant(_169);
        switchInt(move _190) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_194);
        _194 = ((_169 as Continue).0: ());
        _168 = _194;
        StorageDead(_194);
        _219 = discriminant(_169);
        StorageDead(_183);
        drop(_179) -> [return: bb88, unwind: bb101];
    }

    bb86: {
        StorageLive(_191);
        _191 = move ((_169 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_193);
        _193 = move _191;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _193) -> [return: bb87, unwind: bb106];
    }

    bb87: {
        StorageDead(_193);
        StorageDead(_191);
        _221 = discriminant(_169);
        StorageDead(_183);
        drop(_179) -> [return: bb91, unwind: bb101];
    }

    bb88: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_195);
        _195 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _195);
        StorageDead(_195);
        drop(_129) -> [return: bb89, unwind: bb104];
    }

    bb89: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        drop(_14) -> [return: bb90, unwind: bb105];
    }

    bb90: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb99;
    }

    bb91: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb93;
    }

    bb92: {
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb93;
    }

    bb93: {
        drop(_129) -> [return: bb94, unwind: bb104];
    }

    bb94: {
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb97;
    }

    bb95: {
        StorageDead(_106);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb97;
    }

    bb96: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        drop(_14) -> [return: bb98, unwind: bb105];
    }

    bb98: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb99;
    }

    bb99: {
        return;
    }

    bb100 (cleanup): {
        drop(_179) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_129) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_67) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_43) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_14) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        resume;
    }

    bb106 (cleanup): {
        _225 = discriminant(_169);
        goto -> bb100;
    }

    bb107 (cleanup): {
        _226 = discriminant(_130);
        goto -> bb104;
    }

    bb108 (cleanup): {
        _227 = discriminant(_15);
        goto -> bb105;
    }

    bb109 (cleanup): {
        _228 = discriminant(_4);
        goto -> bb105;
    }
}
