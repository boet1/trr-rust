// MIR for `instructions::user::handle_place_perp_order` before PreCodegen

fn instructions::user::handle_place_perp_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::PlaceOrder<'_>>, _2: order_params::OrderParams) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &anchor_lang::prelude::Clock;
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: anchor_lang::prelude::Clock;
    let mut _24: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _25: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _29: instructions::optional_accounts::AccountMaps<'_>;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _31: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _32: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _33: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _34: &std::collections::BTreeSet<u16>;
    let _35: &std::collections::BTreeSet<u16>;
    let _36: std::collections::BTreeSet<u16>;
    let mut _37: &std::collections::BTreeSet<u16>;
    let _38: &std::collections::BTreeSet<u16>;
    let _39: std::collections::BTreeSet<u16>;
    let mut _40: u64;
    let mut _41: std::option::Option<state::state::OracleGuardRails>;
    let mut _42: state::state::OracleGuardRails;
    let mut _43: &state::state::State;
    let mut _44: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>>;
    let mut _52: std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>, error::ErrorCode>;
    let mut _53: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _54: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: ();
    let mut _61: bool;
    let mut _62: &state::order_params::OrderParams;
    let mut _63: !;
    let _64: ();
    let mut _65: &str;
    let _66: &str;
    let mut _67: anchor_lang::error::Error;
    let mut _68: error::ErrorCode;
    let mut _69: &{closure@programs/drift/src/error.rs:647:9: 647:11};
    let _70: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _71: ();
    let mut _73: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _76: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _77: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _78: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _79: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _85: ();
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _87: std::result::Result<(), error::ErrorCode>;
    let mut _88: &state::state::State;
    let _89: &state::state::State;
    let mut _90: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _91: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _92: &mut state::user::User;
    let mut _93: &mut state::user::User;
    let mut _94: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _95: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _96: anchor_lang::prelude::Pubkey;
    let mut _97: &state::perp_market_map::PerpMarketMap<'_>;
    let _98: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _99: &state::spot_market_map::SpotMarketMap<'_>;
    let _100: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _101: &mut state::oracle_map::OracleMap<'_>;
    let mut _102: &mut state::oracle_map::OracleMap<'_>;
    let mut _103: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _104: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _105: &anchor_lang::prelude::Clock;
    let mut _106: state::order_params::OrderParams;
    let mut _107: state::order_params::PlaceOrderOptions;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _113: ();
    let mut _115: &mut instructions::user::PlaceOrder<'_>;
    let mut _116: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _117: &mut instructions::user::PlaceOrder<'_>;
    let mut _118: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _119: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _120: &mut instructions::user::PlaceOrder<'_>;
    let mut _121: &mut instructions::user::PlaceOrder<'_>;
    let mut _122: &mut instructions::user::PlaceOrder<'_>;
    let mut _123: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _146: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _147: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _13;
        let _22: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _22;
            let mut _23: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
            scope 11 {
                debug remaining_accounts => _23;
                let _26: state::perp_market_map::PerpMarketMap<'_>;
                let _27: state::spot_market_map::SpotMarketMap<'_>;
                let mut _28: state::oracle_map::OracleMap<'_>;
                let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _49: instructions::optional_accounts::AccountMaps<'_>;
                scope 12 {
                    debug perp_market_map => _26;
                    debug spot_market_map => _27;
                    debug oracle_map => _28;
                    let _50: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _59: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                    scope 17 {
                        debug high_leverage_mode_config => _50;
                        let _72: anchor_lang::prelude::Pubkey;
                        let mut _114: &{closure@programs/drift/src/error.rs:647:9: 647:11};
                        scope 22 {
                            debug user_key => _72;
                            let mut _74: std::cell::RefMut<'_, state::user::User>;
                            let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _84: std::cell::RefMut<'_, state::user::User>;
                            scope 23 {
                                debug user => _74;
                                let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _112: ();
                                scope 28 {
                                    debug residual => _109;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug val => _112;
                                    scope 31 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _81;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _84;
                                scope 27 {
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _56;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _59;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _115 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _7 = &((*_115).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _116 = deref_copy (*_7);
        _145 = (((_116.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_145);
        _5 = constraints::exchange_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb71];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _124 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb75];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _138 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb63;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb71];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _13 = &_14;
        _126 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _117 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _22 = &((*_117).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _118 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _25 = &(*_118);
        _24 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _25) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb74];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _136 = discriminant(_15);
        StorageDead(_15);
        goto -> bb62;
    }

    bb12: {
        StorageDead(_25);
        _23 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _23;
        _32 = &mut (*_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = BTreeSet::<u16>::new() -> [return: bb14, unwind continue];
    }

    bb14: {
        _35 = &_36;
        _34 = &(*_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = BTreeSet::<u16>::new() -> [return: bb15, unwind: bb70];
    }

    bb15: {
        _38 = &_39;
        _37 = &(*_38);
        StorageLive(_40);
        _40 = ((*_13).0: u64);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _119 = deref_copy (*_22);
        _146 = (((_119.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _44 = &(*_146);
        _43 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _44) -> [return: bb16, unwind: bb69];
    }

    bb16: {
        StorageDead(_44);
        _42 = ((*_43).7: state::state::OracleGuardRails);
        _41 = Option::<state::state::OracleGuardRails>::Some(move _42);
        StorageDead(_42);
        _31 = load_maps(move _32, move _34, move _37, move _40, move _41) -> [return: bb17, unwind: bb69];
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_32);
        _30 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _31) -> [return: bb18, unwind: bb69];
    }

    bb18: {
        StorageDead(_31);
        _45 = discriminant(_30);
        switchInt(move _45) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_49);
        _49 = move ((_30 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _29 = move _49;
        StorageDead(_49);
        StorageLive(_26);
        _26 = move (_29.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_27);
        _27 = move (_29.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_28);
        _28 = move (_29.2: state::oracle_map::OracleMap<'_>);
        _130 = discriminant(_30);
        StorageDead(_43);
        drop(_39) -> [return: bb22, unwind: bb65];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb21, unwind: bb73];
    }

    bb21: {
        StorageDead(_48);
        StorageDead(_46);
        _128 = discriminant(_30);
        StorageDead(_43);
        drop(_39) -> [return: bb59, unwind: bb70];
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_38);
        drop(_36) -> [return: bb23, unwind: bb66];
    }

    bb23: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &mut _23;
        _53 = &mut (*_54);
        _52 = get_high_leverage_mode_config(move _53) -> [return: bb24, unwind: bb66];
    }

    bb24: {
        StorageDead(_53);
        _51 = <std::result::Result<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode> as Try>::branch(move _52) -> [return: bb25, unwind: bb66];
    }

    bb25: {
        StorageDead(_52);
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_59);
        _59 = move ((_51 as Continue).0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>);
        _50 = move _59;
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_51);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_2;
        _61 = order_params::OrderParams::is_immediate_or_cancel(move _62) -> [return: bb29, unwind: bb66];
    }

    bb27: {
        StorageLive(_56);
        _56 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb28, unwind: bb66];
    }

    bb28: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_51);
        goto -> bb55;
    }

    bb29: {
        switchInt(move _61) -> [0: bb34, otherwise: bb30];
    }

    bb30: {
        StorageDead(_62);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = const "immediate_or_cancel order must be in place_and_make or place_and_take";
        _65 = &(*_66);
        _64 = solana_program::log::sol_log(move _65) -> [return: bb31, unwind: bb66];
    }

    bb31: {
        StorageDead(_65);
        StorageDead(_66);
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _114 = const _;
        _69 = &(*_114);
        StorageLive(_71);
        _71 = ();
        _68 = <{closure@programs/drift/src/error.rs:647:9: 647:11} as Fn<()>>::call(move _69, move _71) -> [return: bb32, unwind: bb66];
    }

    bb32: {
        StorageDead(_71);
        StorageDead(_69);
        _67 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _68) -> [return: bb33, unwind: bb66];
    }

    bb33: {
        StorageDead(_68);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _67);
        StorageDead(_67);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb55;
    }

    bb34: {
        StorageDead(_62);
        _60 = const ();
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_72);
        StorageLive(_73);
        _120 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _73 = &((*_120).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _72 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _73) -> [return: bb35, unwind: bb66];
    }

    bb35: {
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _121 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _78 = &((*_121).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _77 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _78) -> [return: bb36, unwind: bb66];
    }

    bb36: {
        StorageDead(_78);
        StorageLive(_79);
        _79 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _76 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _77, move _79) -> [return: bb37, unwind: bb66];
    }

    bb37: {
        StorageDead(_79);
        StorageDead(_77);
        _75 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _76) -> [return: bb38, unwind: bb66];
    }

    bb38: {
        StorageDead(_76);
        _80 = discriminant(_75);
        switchInt(move _80) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_84);
        _84 = move ((_75 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _74 = move _84;
        StorageDead(_84);
        _134 = discriminant(_75);
        StorageDead(_75);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _122 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _91 = &((*_122).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _123 = deref_copy (*_91);
        _147 = (((_123.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _90 = &(*_147);
        _89 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _90) -> [return: bb42, unwind: bb64];
    }

    bb40: {
        StorageLive(_81);
        _81 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb41, unwind: bb72];
    }

    bb41: {
        StorageDead(_83);
        StorageDead(_81);
        _132 = discriminant(_75);
        StorageDead(_75);
        goto -> bb54;
    }

    bb42: {
        _88 = &(*_89);
        StorageDead(_90);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &mut _74;
        _94 = &mut (*_95);
        _93 = <RefMut<'_, User> as DerefMut>::deref_mut(move _94) -> [return: bb43, unwind: bb64];
    }

    bb43: {
        _92 = &mut (*_93);
        StorageDead(_94);
        StorageLive(_96);
        _96 = _72;
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_26;
        _97 = &(*_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &_27;
        _99 = &(*_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &mut _28;
        _101 = &mut (*_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_50;
        _103 = &(*_104);
        StorageLive(_105);
        _105 = &(*_13);
        StorageLive(_106);
        _106 = _2;
        StorageLive(_107);
        _107 = <PlaceOrderOptions as Default>::default() -> [return: bb44, unwind: bb64];
    }

    bb44: {
        _87 = controller::orders::place_perp_order(move _88, move _92, move _96, move _97, move _99, move _101, move _103, move _105, move _106, move _107) -> [return: bb45, unwind: bb64];
    }

    bb45: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_88);
        _86 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _87) -> [return: bb46, unwind: bb64];
    }

    bb46: {
        StorageDead(_87);
        _108 = discriminant(_86);
        switchInt(move _108) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_112);
        _112 = ((_86 as Continue).0: ());
        _85 = _112;
        StorageDead(_112);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_113);
        _113 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _113);
        StorageDead(_113);
        drop(_74) -> [return: bb50, unwind: bb66];
    }

    bb48: {
        StorageLive(_109);
        _109 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb49, unwind: bb64];
    }

    bb49: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_85);
        drop(_74) -> [return: bb54, unwind: bb66];
    }

    bb50: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_50);
        drop(_28) -> [return: bb51, unwind: bb67];
    }

    bb51: {
        StorageDead(_28);
        drop(_27) -> [return: bb52, unwind: bb68];
    }

    bb52: {
        StorageDead(_27);
        drop(_26) -> [return: bb53, unwind: bb71];
    }

    bb53: {
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb63;
    }

    bb54: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_50);
        drop(_28) -> [return: bb56, unwind: bb67];
    }

    bb56: {
        StorageDead(_28);
        drop(_27) -> [return: bb57, unwind: bb68];
    }

    bb57: {
        StorageDead(_27);
        drop(_26) -> [return: bb58, unwind: bb71];
    }

    bb58: {
        StorageDead(_26);
        goto -> bb61;
    }

    bb59: {
        StorageDead(_39);
        StorageDead(_38);
        drop(_36) -> [return: bb60, unwind: bb71];
    }

    bb60: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb63;
    }

    bb63: {
        return;
    }

    bb64 (cleanup): {
        drop(_74) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_36) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_28) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_27) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_26) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_39) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_36) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        resume;
    }

    bb72 (cleanup): {
        _140 = discriminant(_75);
        goto -> bb66;
    }

    bb73 (cleanup): {
        _142 = discriminant(_30);
        goto -> bb69;
    }

    bb74 (cleanup): {
        _143 = discriminant(_15);
        goto -> bb71;
    }

    bb75 (cleanup): {
        _144 = discriminant(_4);
        goto -> bb71;
    }
}
