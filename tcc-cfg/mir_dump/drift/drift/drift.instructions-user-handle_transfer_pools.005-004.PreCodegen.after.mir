// MIR for `instructions::user::handle_transfer_pools` after PreCodegen

fn instructions::user::handle_transfer_pools(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::TransferPools<'_>>, _2: u16, _3: u16, _4: u16, _5: u16, _6: Option<u64>, _7: Option<u64>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug deposit_from_market_index => _2;
    debug deposit_to_market_index => _3;
    debug borrow_from_market_index => _4;
    debug borrow_to_market_index => _5;
    debug deposit_amount => _6;
    debug borrow_amount => _7;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _8: ();
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _10: std::result::Result<(), anchor_lang::error::Error>;
    let mut _11: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _12: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _17: ();
    let _18: ();
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _20: std::result::Result<(), anchor_lang::error::Error>;
    let mut _21: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _22: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _27: ();
    let _28: &anchor_lang::prelude::Pubkey;
    let mut _29: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _30: &anchor_lang::prelude::Signer<'_>;
    let mut _32: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _34: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _38: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _46: std::cell::RefMut<'_, state::user::User>;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _48: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _49: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _50: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _51: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: std::cell::RefMut<'_, state::user::User>;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _60: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _61: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _62: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _63: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _72: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _73: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _74: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _75: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _83: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _89: ();
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _91: std::result::Result<(), error::ErrorCode>;
    let mut _92: bool;
    let mut _93: &state::user::User;
    let _94: &state::user::User;
    let mut _95: &std::cell::RefMut<'_, state::user::User>;
    let mut _96: ();
    let _98: ();
    let mut _99: &str;
    let _100: &str;
    let mut _101: &std::string::String;
    let _102: &std::string::String;
    let _103: std::string::String;
    let mut _105: std::fmt::Arguments<'_>;
    let mut _106: &[&str];
    let mut _107: &[&str; 2];
    let _108: &[&str; 2];
    let _109: [&str; 2];
    let mut _110: &[core::fmt::rt::Argument<'_>];
    let mut _111: &[core::fmt::rt::Argument<'_>; 1];
    let _112: &[core::fmt::rt::Argument<'_>; 1];
    let _113: [core::fmt::rt::Argument<'_>; 1];
    let mut _114: core::fmt::rt::Argument<'_>;
    let mut _115: &error::ErrorCode;
    let _116: &error::ErrorCode;
    let _117: ();
    let mut _118: &str;
    let _119: &str;
    let mut _120: error::ErrorCode;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _126: ();
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _128: std::result::Result<(), error::ErrorCode>;
    let mut _129: bool;
    let mut _130: &state::user::User;
    let _131: &state::user::User;
    let mut _132: &std::cell::RefMut<'_, state::user::User>;
    let mut _133: ();
    let _135: ();
    let mut _136: &str;
    let _137: &str;
    let mut _138: &std::string::String;
    let _139: &std::string::String;
    let _140: std::string::String;
    let mut _142: std::fmt::Arguments<'_>;
    let mut _143: &[&str];
    let mut _144: &[&str; 2];
    let _145: &[&str; 2];
    let _146: [&str; 2];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let mut _148: &[core::fmt::rt::Argument<'_>; 1];
    let _149: &[core::fmt::rt::Argument<'_>; 1];
    let _150: [core::fmt::rt::Argument<'_>; 1];
    let mut _151: core::fmt::rt::Argument<'_>;
    let mut _152: &error::ErrorCode;
    let _153: &error::ErrorCode;
    let _154: ();
    let mut _155: &str;
    let _156: &str;
    let mut _157: error::ErrorCode;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _163: ();
    let mut _164: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _165: std::result::Result<(), error::ErrorCode>;
    let mut _166: bool;
    let mut _167: &anchor_lang::prelude::Pubkey;
    let mut _168: &anchor_lang::prelude::Pubkey;
    let mut _169: ();
    let _171: ();
    let mut _172: &str;
    let _173: &str;
    let mut _174: &std::string::String;
    let _175: &std::string::String;
    let _176: std::string::String;
    let mut _178: std::fmt::Arguments<'_>;
    let mut _179: &[&str];
    let mut _180: &[&str; 2];
    let _181: &[&str; 2];
    let _182: [&str; 2];
    let mut _183: &[core::fmt::rt::Argument<'_>];
    let mut _184: &[core::fmt::rt::Argument<'_>; 1];
    let _185: &[core::fmt::rt::Argument<'_>; 1];
    let _186: [core::fmt::rt::Argument<'_>; 1];
    let mut _187: core::fmt::rt::Argument<'_>;
    let mut _188: &error::ErrorCode;
    let _189: &error::ErrorCode;
    let _190: ();
    let mut _191: &str;
    let _192: &str;
    let mut _193: error::ErrorCode;
    let mut _194: isize;
    let mut _196: !;
    let mut _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _199: ();
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _201: std::result::Result<(), error::ErrorCode>;
    let mut _202: bool;
    let mut _203: u8;
    let mut _204: &state::user::User;
    let mut _205: &std::cell::RefMut<'_, state::user::User>;
    let mut _206: u8;
    let mut _207: &state::user::User;
    let mut _208: &std::cell::RefMut<'_, state::user::User>;
    let mut _209: ();
    let _211: ();
    let mut _212: &str;
    let _213: &str;
    let mut _214: &std::string::String;
    let _215: &std::string::String;
    let _216: std::string::String;
    let mut _218: std::fmt::Arguments<'_>;
    let mut _219: &[&str];
    let mut _220: &[&str; 2];
    let _221: &[&str; 2];
    let _222: [&str; 2];
    let mut _223: &[core::fmt::rt::Argument<'_>];
    let mut _224: &[core::fmt::rt::Argument<'_>; 1];
    let _225: &[core::fmt::rt::Argument<'_>; 1];
    let _226: [core::fmt::rt::Argument<'_>; 1];
    let mut _227: core::fmt::rt::Argument<'_>;
    let mut _228: &error::ErrorCode;
    let _229: &error::ErrorCode;
    let _230: ();
    let mut _231: &str;
    let _232: &str;
    let mut _233: error::ErrorCode;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _242: instructions::optional_accounts::AccountMaps<'_>;
    let mut _243: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _244: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _245: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _246: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _247: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _248: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _249: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _250: &std::collections::BTreeSet<u16>;
    let _251: &std::collections::BTreeSet<u16>;
    let _252: std::collections::BTreeSet<u16>;
    let mut _253: &std::collections::BTreeSet<u16>;
    let _254: &std::collections::BTreeSet<u16>;
    let _255: std::collections::BTreeSet<u16>;
    let mut _256: std::vec::Vec<u16>;
    let mut _257: std::boxed::Box<[u16]>;
    let mut _258: std::boxed::Box<[u16; 4]>;
    let mut _259: usize;
    let mut _260: usize;
    let mut _261: *mut u8;
    let mut _262: std::boxed::Box<[u16; 4]>;
    let mut _263: u16;
    let mut _264: u16;
    let mut _265: u16;
    let mut _266: u16;
    let mut _267: u64;
    let mut _268: std::option::Option<state::state::OracleGuardRails>;
    let mut _269: state::state::OracleGuardRails;
    let mut _270: &state::state::State;
    let mut _271: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _272: isize;
    let mut _274: !;
    let mut _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _278: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _279: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _280: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _281: &u16;
    let _282: &u16;
    let mut _283: isize;
    let mut _285: !;
    let mut _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _289: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _290: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _291: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _292: &u16;
    let _293: &u16;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _300: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _301: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _302: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _303: &u16;
    let _304: &u16;
    let mut _305: isize;
    let mut _307: !;
    let mut _308: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _311: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _312: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _313: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _314: &u16;
    let _315: &u16;
    let mut _316: isize;
    let mut _318: !;
    let mut _319: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _321: ();
    let mut _322: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _323: std::result::Result<(), error::ErrorCode>;
    let mut _324: bool;
    let mut _325: &anchor_lang::prelude::Pubkey;
    let _326: &state::spot_market::SpotMarket;
    let mut _327: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _328: &anchor_lang::prelude::Pubkey;
    let _329: &state::spot_market::SpotMarket;
    let mut _330: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _331: ();
    let _333: ();
    let mut _334: &str;
    let _335: &str;
    let mut _336: &std::string::String;
    let _337: &std::string::String;
    let _338: std::string::String;
    let mut _340: std::fmt::Arguments<'_>;
    let mut _341: &[&str];
    let mut _342: &[&str; 2];
    let _343: &[&str; 2];
    let _344: [&str; 2];
    let mut _345: &[core::fmt::rt::Argument<'_>];
    let mut _346: &[core::fmt::rt::Argument<'_>; 1];
    let _347: &[core::fmt::rt::Argument<'_>; 1];
    let _348: [core::fmt::rt::Argument<'_>; 1];
    let mut _349: core::fmt::rt::Argument<'_>;
    let mut _350: &error::ErrorCode;
    let _351: &error::ErrorCode;
    let _352: ();
    let mut _353: &str;
    let _354: &str;
    let mut _355: error::ErrorCode;
    let mut _356: isize;
    let mut _358: !;
    let mut _359: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _361: ();
    let mut _362: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _363: std::result::Result<(), error::ErrorCode>;
    let mut _364: bool;
    let mut _365: &anchor_lang::prelude::Pubkey;
    let _366: &state::spot_market::SpotMarket;
    let mut _367: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _368: &anchor_lang::prelude::Pubkey;
    let _369: &state::spot_market::SpotMarket;
    let mut _370: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _371: ();
    let _373: ();
    let mut _374: &str;
    let _375: &str;
    let mut _376: &std::string::String;
    let _377: &std::string::String;
    let _378: std::string::String;
    let mut _380: std::fmt::Arguments<'_>;
    let mut _381: &[&str];
    let mut _382: &[&str; 2];
    let _383: &[&str; 2];
    let _384: [&str; 2];
    let mut _385: &[core::fmt::rt::Argument<'_>];
    let mut _386: &[core::fmt::rt::Argument<'_>; 1];
    let _387: &[core::fmt::rt::Argument<'_>; 1];
    let _388: [core::fmt::rt::Argument<'_>; 1];
    let mut _389: core::fmt::rt::Argument<'_>;
    let mut _390: &error::ErrorCode;
    let _391: &error::ErrorCode;
    let _392: ();
    let mut _393: &str;
    let _394: &str;
    let mut _395: error::ErrorCode;
    let mut _396: isize;
    let mut _398: !;
    let mut _399: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _401: ();
    let mut _402: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _403: std::result::Result<(), error::ErrorCode>;
    let mut _404: bool;
    let mut _405: u8;
    let mut _406: &state::spot_market::SpotMarket;
    let mut _407: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _408: u8;
    let mut _409: &state::spot_market::SpotMarket;
    let mut _410: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _411: ();
    let _413: ();
    let mut _414: &str;
    let _415: &str;
    let mut _416: &std::string::String;
    let _417: &std::string::String;
    let _418: std::string::String;
    let mut _420: std::fmt::Arguments<'_>;
    let mut _421: &[&str];
    let mut _422: &[&str; 2];
    let _423: &[&str; 2];
    let _424: [&str; 2];
    let mut _425: &[core::fmt::rt::Argument<'_>];
    let mut _426: &[core::fmt::rt::Argument<'_>; 1];
    let _427: &[core::fmt::rt::Argument<'_>; 1];
    let _428: [core::fmt::rt::Argument<'_>; 1];
    let mut _429: core::fmt::rt::Argument<'_>;
    let mut _430: &error::ErrorCode;
    let _431: &error::ErrorCode;
    let _432: ();
    let mut _433: &str;
    let _434: &str;
    let mut _435: error::ErrorCode;
    let mut _436: isize;
    let mut _438: !;
    let mut _439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _441: ();
    let mut _442: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _443: std::result::Result<(), error::ErrorCode>;
    let mut _444: bool;
    let mut _445: u8;
    let mut _446: &state::spot_market::SpotMarket;
    let mut _447: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _448: u8;
    let mut _449: &state::spot_market::SpotMarket;
    let mut _450: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _451: ();
    let _453: ();
    let mut _454: &str;
    let _455: &str;
    let mut _456: &std::string::String;
    let _457: &std::string::String;
    let _458: std::string::String;
    let mut _460: std::fmt::Arguments<'_>;
    let mut _461: &[&str];
    let mut _462: &[&str; 2];
    let _463: &[&str; 2];
    let _464: [&str; 2];
    let mut _465: &[core::fmt::rt::Argument<'_>];
    let mut _466: &[core::fmt::rt::Argument<'_>; 1];
    let _467: &[core::fmt::rt::Argument<'_>; 1];
    let _468: [core::fmt::rt::Argument<'_>; 1];
    let mut _469: core::fmt::rt::Argument<'_>;
    let mut _470: &error::ErrorCode;
    let _471: &error::ErrorCode;
    let _472: ();
    let mut _473: &str;
    let _474: &str;
    let mut _475: error::ErrorCode;
    let mut _476: isize;
    let mut _478: !;
    let mut _479: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _481: ();
    let mut _482: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _483: std::result::Result<(), error::ErrorCode>;
    let mut _484: bool;
    let mut _485: u8;
    let mut _486: &state::spot_market::SpotMarket;
    let mut _487: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _488: u8;
    let mut _489: &state::spot_market::SpotMarket;
    let mut _490: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _491: ();
    let _493: ();
    let mut _494: &str;
    let _495: &str;
    let mut _496: &std::string::String;
    let _497: &std::string::String;
    let _498: std::string::String;
    let mut _500: std::fmt::Arguments<'_>;
    let mut _501: &[&str];
    let mut _502: &[&str; 2];
    let _503: &[&str; 2];
    let _504: [&str; 2];
    let mut _505: &[core::fmt::rt::Argument<'_>];
    let mut _506: &[core::fmt::rt::Argument<'_>; 1];
    let _507: &[core::fmt::rt::Argument<'_>; 1];
    let _508: [core::fmt::rt::Argument<'_>; 1];
    let mut _509: core::fmt::rt::Argument<'_>;
    let mut _510: &error::ErrorCode;
    let _511: &error::ErrorCode;
    let _512: ();
    let mut _513: &str;
    let _514: &str;
    let mut _515: error::ErrorCode;
    let mut _516: isize;
    let mut _518: !;
    let mut _519: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _522: &state::oracle::OraclePriceData;
    let mut _523: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _524: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _525: &mut state::oracle_map::OracleMap<'_>;
    let mut _526: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _527: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _528: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _529: &state::spot_market::SpotMarket;
    let _530: &state::spot_market::SpotMarket;
    let mut _531: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _532: isize;
    let mut _534: !;
    let mut _535: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _538: &state::oracle::OraclePriceData;
    let mut _539: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _540: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _541: &mut state::oracle_map::OracleMap<'_>;
    let mut _542: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _543: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _544: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _545: &state::spot_market::SpotMarket;
    let _546: &state::spot_market::SpotMarket;
    let mut _547: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _548: isize;
    let mut _550: !;
    let mut _551: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _554: &state::oracle::OraclePriceData;
    let mut _555: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _556: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _557: &mut state::oracle_map::OracleMap<'_>;
    let mut _558: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _559: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _560: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _561: &state::spot_market::SpotMarket;
    let _562: &state::spot_market::SpotMarket;
    let mut _563: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _564: isize;
    let mut _566: !;
    let mut _567: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _570: &state::oracle::OraclePriceData;
    let mut _571: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _572: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _573: &mut state::oracle_map::OracleMap<'_>;
    let mut _574: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _575: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _576: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _577: &state::spot_market::SpotMarket;
    let _578: &state::spot_market::SpotMarket;
    let mut _579: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _580: isize;
    let mut _582: !;
    let mut _583: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _585: ();
    let mut _586: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _587: std::result::Result<(), error::ErrorCode>;
    let mut _588: &mut state::spot_market::SpotMarket;
    let mut _589: &mut state::spot_market::SpotMarket;
    let mut _590: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _591: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _592: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _593: &state::oracle::OraclePriceData;
    let _594: &state::oracle::OraclePriceData;
    let mut _595: i64;
    let mut _596: isize;
    let mut _598: !;
    let mut _599: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _601: ();
    let mut _602: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _603: std::result::Result<(), error::ErrorCode>;
    let mut _604: &mut state::spot_market::SpotMarket;
    let mut _605: &mut state::spot_market::SpotMarket;
    let mut _606: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _607: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _608: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _609: &state::oracle::OraclePriceData;
    let _610: &state::oracle::OraclePriceData;
    let mut _611: i64;
    let mut _612: isize;
    let mut _614: !;
    let mut _615: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _617: ();
    let mut _618: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _619: std::result::Result<(), error::ErrorCode>;
    let mut _620: &mut state::spot_market::SpotMarket;
    let mut _621: &mut state::spot_market::SpotMarket;
    let mut _622: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _623: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _624: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _625: &state::oracle::OraclePriceData;
    let _626: &state::oracle::OraclePriceData;
    let mut _627: i64;
    let mut _628: isize;
    let mut _630: !;
    let mut _631: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _633: ();
    let mut _634: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _635: std::result::Result<(), error::ErrorCode>;
    let mut _636: &mut state::spot_market::SpotMarket;
    let mut _637: &mut state::spot_market::SpotMarket;
    let mut _638: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _639: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _640: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _641: &state::oracle::OraclePriceData;
    let _642: &state::oracle::OraclePriceData;
    let mut _643: i64;
    let mut _644: isize;
    let mut _646: !;
    let mut _647: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _650: isize;
    let mut _652: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _653: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _654: &mut state::user::User;
    let mut _655: &mut state::user::User;
    let mut _656: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _657: u16;
    let mut _658: isize;
    let mut _660: !;
    let mut _661: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _663: ();
    let mut _664: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _665: std::result::Result<(), error::ErrorCode>;
    let mut _666: bool;
    let mut _667: &state::spot_market::SpotBalanceType;
    let mut _668: &state::spot_market::SpotBalanceType;
    let _669: state::spot_market::SpotBalanceType;
    let mut _670: ();
    let _672: ();
    let mut _673: &str;
    let _674: &str;
    let mut _675: &std::string::String;
    let _676: &std::string::String;
    let _677: std::string::String;
    let mut _679: std::fmt::Arguments<'_>;
    let mut _680: &[&str];
    let mut _681: &[&str; 2];
    let _682: &[&str; 2];
    let _683: [&str; 2];
    let mut _684: &[core::fmt::rt::Argument<'_>];
    let mut _685: &[core::fmt::rt::Argument<'_>; 1];
    let _686: &[core::fmt::rt::Argument<'_>; 1];
    let _687: [core::fmt::rt::Argument<'_>; 1];
    let mut _688: core::fmt::rt::Argument<'_>;
    let mut _689: &error::ErrorCode;
    let _690: &error::ErrorCode;
    let _691: ();
    let mut _692: &str;
    let _693: &str;
    let mut _694: error::ErrorCode;
    let mut _695: isize;
    let mut _697: !;
    let mut _698: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _701: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _702: std::result::Result<u64, error::ErrorCode>;
    let mut _703: u128;
    let mut _704: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _705: std::result::Result<u128, error::ErrorCode>;
    let mut _706: &state::user::SpotPosition;
    let mut _707: &state::spot_market::SpotMarket;
    let _708: &state::spot_market::SpotMarket;
    let mut _709: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _710: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _711: isize;
    let mut _713: !;
    let mut _714: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _716: isize;
    let mut _718: !;
    let mut _719: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _722: isize;
    let _724: ();
    let mut _725: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _726: std::result::Result<(), error::ErrorCode>;
    let mut _727: bool;
    let mut _728: u64;
    let mut _729: u64;
    let mut _730: ();
    let _732: ();
    let mut _733: &str;
    let _734: &str;
    let mut _735: &std::string::String;
    let _736: &std::string::String;
    let _737: std::string::String;
    let mut _739: std::fmt::Arguments<'_>;
    let mut _740: &[&str];
    let mut _741: &[&str; 2];
    let _742: &[&str; 2];
    let _743: [&str; 2];
    let mut _744: &[core::fmt::rt::Argument<'_>];
    let mut _745: &[core::fmt::rt::Argument<'_>; 1];
    let _746: &[core::fmt::rt::Argument<'_>; 1];
    let _747: [core::fmt::rt::Argument<'_>; 1];
    let mut _748: core::fmt::rt::Argument<'_>;
    let mut _749: &error::ErrorCode;
    let _750: &error::ErrorCode;
    let _751: ();
    let mut _752: &str;
    let _753: &str;
    let mut _754: error::ErrorCode;
    let mut _755: isize;
    let mut _757: !;
    let mut _758: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _760: ();
    let mut _761: bool;
    let mut _762: u64;
    let _763: ();
    let mut _764: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _765: std::result::Result<(), error::ErrorCode>;
    let mut _766: &mut state::user::User;
    let mut _767: &mut state::user::User;
    let mut _768: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _769: u64;
    let mut _770: i64;
    let mut _771: u128;
    let mut _772: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _773: std::result::Result<u128, error::ErrorCode>;
    let mut _774: u64;
    let mut _775: state::spot_market::SpotMarket;
    let mut _776: &state::spot_market::SpotMarket;
    let mut _777: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _778: isize;
    let mut _780: !;
    let mut _781: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _783: isize;
    let mut _785: !;
    let mut _786: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _788: ();
    let mut _789: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _790: std::result::Result<(), error::ErrorCode>;
    let mut _791: u128;
    let mut _792: u64;
    let mut _793: &state::spot_market::SpotBalanceType;
    let _794: &state::spot_market::SpotBalanceType;
    let _795: state::spot_market::SpotBalanceType;
    let mut _796: &mut state::spot_market::SpotMarket;
    let mut _797: &mut state::spot_market::SpotMarket;
    let mut _798: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _799: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _800: &mut state::user::User;
    let mut _801: &mut state::user::User;
    let mut _802: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _803: isize;
    let mut _805: !;
    let mut _806: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _810: &state::spot_market::SpotMarket;
    let mut _811: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _812: u64;
    let mut _813: std::option::Option<u64>;
    let mut _814: std::option::Option<u64>;
    let mut _815: u64;
    let mut _816: std::option::Option<u64>;
    let mut _817: &mut state::spot_market::SpotMarket;
    let mut _818: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _820: i64;
    let mut _821: u64;
    let mut _822: anchor_lang::prelude::Pubkey;
    let mut _823: anchor_lang::prelude::Pubkey;
    let mut _824: state::events::DepositDirection;
    let mut _825: u64;
    let mut _826: i64;
    let mut _827: u16;
    let mut _828: u128;
    let mut _829: &state::spot_market::SpotMarket;
    let mut _830: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _831: u128;
    let mut _832: &state::spot_market::SpotMarket;
    let mut _833: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _834: u128;
    let mut _835: &state::spot_market::SpotMarket;
    let mut _836: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _837: u128;
    let mut _838: &state::spot_market::SpotMarket;
    let mut _839: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _840: u64;
    let mut _841: &state::user::User;
    let mut _842: &std::cell::RefMut<'_, state::user::User>;
    let mut _843: u64;
    let mut _844: &state::user::User;
    let mut _845: &std::cell::RefMut<'_, state::user::User>;
    let mut _846: state::events::DepositExplanation;
    let mut _847: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _848: anchor_lang::prelude::Pubkey;
    let _849: ();
    let _850: ();
    let mut _851: &[&[u8]];
    let mut _852: &[&[u8]; 1];
    let _853: &[&[u8]; 1];
    let _854: [&[u8]; 1];
    let mut _855: &[u8];
    let _856: &[u8];
    let mut _857: &std::vec::Vec<u8>;
    let _858: &std::vec::Vec<u8>;
    let _859: std::vec::Vec<u8>;
    let mut _860: &state::events::DepositRecord;
    let _861: &state::events::DepositRecord;
    let _862: ();
    let mut _863: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _864: std::result::Result<(), error::ErrorCode>;
    let mut _865: &mut state::user::User;
    let mut _866: &mut state::user::User;
    let mut _867: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _868: u64;
    let mut _869: i64;
    let mut _870: u128;
    let mut _871: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _872: std::result::Result<u128, error::ErrorCode>;
    let mut _873: u64;
    let mut _874: state::spot_market::SpotMarket;
    let mut _875: &state::spot_market::SpotMarket;
    let mut _876: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _877: isize;
    let mut _879: !;
    let mut _880: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _882: isize;
    let mut _884: !;
    let mut _885: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _887: ();
    let mut _888: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _889: std::result::Result<(), error::ErrorCode>;
    let mut _890: u128;
    let mut _891: u64;
    let mut _892: &state::spot_market::SpotBalanceType;
    let _893: &state::spot_market::SpotBalanceType;
    let _894: state::spot_market::SpotBalanceType;
    let mut _895: &mut state::spot_market::SpotMarket;
    let mut _896: &mut state::spot_market::SpotMarket;
    let mut _897: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _898: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _899: &mut state::user::User;
    let mut _900: &mut state::user::User;
    let mut _901: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _902: isize;
    let mut _904: !;
    let mut _905: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _909: &state::spot_market::SpotMarket;
    let mut _910: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _911: u64;
    let mut _912: std::option::Option<u64>;
    let mut _913: std::option::Option<u64>;
    let mut _914: u64;
    let mut _915: std::option::Option<u64>;
    let mut _916: &mut state::spot_market::SpotMarket;
    let mut _917: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _919: i64;
    let mut _920: u64;
    let mut _921: anchor_lang::prelude::Pubkey;
    let mut _922: anchor_lang::prelude::Pubkey;
    let mut _923: state::events::DepositDirection;
    let mut _924: u64;
    let mut _925: i64;
    let mut _926: u16;
    let mut _927: u128;
    let mut _928: &state::spot_market::SpotMarket;
    let mut _929: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _930: u128;
    let mut _931: &state::spot_market::SpotMarket;
    let mut _932: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _933: u128;
    let mut _934: &state::spot_market::SpotMarket;
    let mut _935: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _936: u128;
    let mut _937: &state::spot_market::SpotMarket;
    let mut _938: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _939: u64;
    let mut _940: &state::user::User;
    let mut _941: &std::cell::RefMut<'_, state::user::User>;
    let mut _942: u64;
    let mut _943: &state::user::User;
    let mut _944: &std::cell::RefMut<'_, state::user::User>;
    let mut _945: state::events::DepositExplanation;
    let mut _946: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _947: anchor_lang::prelude::Pubkey;
    let _948: ();
    let _949: ();
    let mut _950: &[&[u8]];
    let mut _951: &[&[u8]; 1];
    let _952: &[&[u8]; 1];
    let _953: [&[u8]; 1];
    let mut _954: &[u8];
    let _955: &[u8];
    let mut _956: &std::vec::Vec<u8>;
    let _957: &std::vec::Vec<u8>;
    let _958: std::vec::Vec<u8>;
    let mut _959: &state::events::DepositRecord;
    let _960: &state::events::DepositRecord;
    let mut _962: isize;
    let mut _964: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _965: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _966: &mut state::user::User;
    let mut _967: &mut state::user::User;
    let mut _968: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _969: u16;
    let mut _970: isize;
    let mut _972: !;
    let mut _973: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _975: ();
    let mut _976: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _977: std::result::Result<(), error::ErrorCode>;
    let mut _978: bool;
    let mut _979: &state::spot_market::SpotBalanceType;
    let mut _980: &state::spot_market::SpotBalanceType;
    let _981: state::spot_market::SpotBalanceType;
    let mut _982: ();
    let _984: ();
    let mut _985: &str;
    let _986: &str;
    let mut _987: &std::string::String;
    let _988: &std::string::String;
    let _989: std::string::String;
    let mut _991: std::fmt::Arguments<'_>;
    let mut _992: &[&str];
    let mut _993: &[&str; 2];
    let _994: &[&str; 2];
    let _995: [&str; 2];
    let mut _996: &[core::fmt::rt::Argument<'_>];
    let mut _997: &[core::fmt::rt::Argument<'_>; 1];
    let _998: &[core::fmt::rt::Argument<'_>; 1];
    let _999: [core::fmt::rt::Argument<'_>; 1];
    let mut _1000: core::fmt::rt::Argument<'_>;
    let mut _1001: &error::ErrorCode;
    let _1002: &error::ErrorCode;
    let _1003: ();
    let mut _1004: &str;
    let _1005: &str;
    let mut _1006: error::ErrorCode;
    let mut _1007: isize;
    let mut _1009: !;
    let mut _1010: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1013: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1014: std::result::Result<u64, error::ErrorCode>;
    let mut _1015: u128;
    let mut _1016: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1017: std::result::Result<u128, error::ErrorCode>;
    let mut _1018: &state::user::SpotPosition;
    let mut _1019: &state::spot_market::SpotMarket;
    let _1020: &state::spot_market::SpotMarket;
    let mut _1021: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1022: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1023: isize;
    let mut _1025: !;
    let mut _1026: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1028: isize;
    let mut _1030: !;
    let mut _1031: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1034: isize;
    let _1036: ();
    let mut _1037: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1038: std::result::Result<(), error::ErrorCode>;
    let mut _1039: bool;
    let mut _1040: u64;
    let mut _1041: u64;
    let mut _1042: ();
    let _1044: ();
    let mut _1045: &str;
    let _1046: &str;
    let mut _1047: &std::string::String;
    let _1048: &std::string::String;
    let _1049: std::string::String;
    let mut _1051: std::fmt::Arguments<'_>;
    let mut _1052: &[&str];
    let mut _1053: &[&str; 2];
    let _1054: &[&str; 2];
    let _1055: [&str; 2];
    let mut _1056: &[core::fmt::rt::Argument<'_>];
    let mut _1057: &[core::fmt::rt::Argument<'_>; 1];
    let _1058: &[core::fmt::rt::Argument<'_>; 1];
    let _1059: [core::fmt::rt::Argument<'_>; 1];
    let mut _1060: core::fmt::rt::Argument<'_>;
    let mut _1061: &error::ErrorCode;
    let _1062: &error::ErrorCode;
    let _1063: ();
    let mut _1064: &str;
    let _1065: &str;
    let mut _1066: error::ErrorCode;
    let mut _1067: isize;
    let mut _1069: !;
    let mut _1070: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1072: ();
    let mut _1073: bool;
    let mut _1074: u64;
    let _1075: ();
    let mut _1076: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1077: std::result::Result<(), error::ErrorCode>;
    let mut _1078: &mut state::user::User;
    let mut _1079: &mut state::user::User;
    let mut _1080: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1081: u64;
    let mut _1082: i64;
    let mut _1083: u128;
    let mut _1084: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1085: std::result::Result<u128, error::ErrorCode>;
    let mut _1086: u64;
    let mut _1087: state::spot_market::SpotMarket;
    let mut _1088: &state::spot_market::SpotMarket;
    let mut _1089: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1090: isize;
    let mut _1092: !;
    let mut _1093: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1095: isize;
    let mut _1097: !;
    let mut _1098: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1100: ();
    let mut _1101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1102: std::result::Result<(), error::ErrorCode>;
    let mut _1103: u128;
    let mut _1104: u64;
    let mut _1105: &state::spot_market::SpotBalanceType;
    let _1106: &state::spot_market::SpotBalanceType;
    let _1107: state::spot_market::SpotBalanceType;
    let mut _1108: &mut state::spot_market::SpotMarket;
    let mut _1109: &mut state::spot_market::SpotMarket;
    let mut _1110: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1111: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1112: &mut state::user::User;
    let mut _1113: &mut state::user::User;
    let mut _1114: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1115: isize;
    let mut _1117: !;
    let mut _1118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1122: &state::spot_market::SpotMarket;
    let mut _1123: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1124: u64;
    let mut _1125: std::option::Option<u64>;
    let mut _1126: std::option::Option<u64>;
    let mut _1127: u64;
    let mut _1128: std::option::Option<u64>;
    let mut _1129: &mut state::spot_market::SpotMarket;
    let mut _1130: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1132: i64;
    let mut _1133: u64;
    let mut _1134: anchor_lang::prelude::Pubkey;
    let mut _1135: anchor_lang::prelude::Pubkey;
    let mut _1136: state::events::DepositDirection;
    let mut _1137: u64;
    let mut _1138: i64;
    let mut _1139: u16;
    let mut _1140: u128;
    let mut _1141: &state::spot_market::SpotMarket;
    let mut _1142: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1143: u128;
    let mut _1144: &state::spot_market::SpotMarket;
    let mut _1145: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1146: u128;
    let mut _1147: &state::spot_market::SpotMarket;
    let mut _1148: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1149: u128;
    let mut _1150: &state::spot_market::SpotMarket;
    let mut _1151: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1152: u64;
    let mut _1153: &state::user::User;
    let mut _1154: &std::cell::RefMut<'_, state::user::User>;
    let mut _1155: u64;
    let mut _1156: &state::user::User;
    let mut _1157: &std::cell::RefMut<'_, state::user::User>;
    let mut _1158: state::events::DepositExplanation;
    let mut _1159: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _1160: anchor_lang::prelude::Pubkey;
    let _1161: ();
    let _1162: ();
    let mut _1163: &[&[u8]];
    let mut _1164: &[&[u8]; 1];
    let _1165: &[&[u8]; 1];
    let _1166: [&[u8]; 1];
    let mut _1167: &[u8];
    let _1168: &[u8];
    let mut _1169: &std::vec::Vec<u8>;
    let _1170: &std::vec::Vec<u8>;
    let _1171: std::vec::Vec<u8>;
    let mut _1172: &state::events::DepositRecord;
    let _1173: &state::events::DepositRecord;
    let _1174: ();
    let mut _1175: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1176: std::result::Result<(), error::ErrorCode>;
    let mut _1177: &mut state::user::User;
    let mut _1178: &mut state::user::User;
    let mut _1179: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1180: u64;
    let mut _1181: i64;
    let mut _1182: u128;
    let mut _1183: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1184: std::result::Result<u128, error::ErrorCode>;
    let mut _1185: u64;
    let mut _1186: state::spot_market::SpotMarket;
    let mut _1187: &state::spot_market::SpotMarket;
    let mut _1188: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1189: isize;
    let mut _1191: !;
    let mut _1192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1194: isize;
    let mut _1196: !;
    let mut _1197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1199: ();
    let mut _1200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1201: std::result::Result<(), error::ErrorCode>;
    let mut _1202: u128;
    let mut _1203: u64;
    let mut _1204: &state::spot_market::SpotBalanceType;
    let _1205: &state::spot_market::SpotBalanceType;
    let _1206: state::spot_market::SpotBalanceType;
    let mut _1207: &mut state::spot_market::SpotMarket;
    let mut _1208: &mut state::spot_market::SpotMarket;
    let mut _1209: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1210: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1211: &mut state::user::User;
    let mut _1212: &mut state::user::User;
    let mut _1213: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1214: isize;
    let mut _1216: !;
    let mut _1217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1221: &state::spot_market::SpotMarket;
    let mut _1222: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1223: u64;
    let mut _1224: std::option::Option<u64>;
    let mut _1225: std::option::Option<u64>;
    let mut _1226: u64;
    let mut _1227: std::option::Option<u64>;
    let mut _1228: &mut state::spot_market::SpotMarket;
    let mut _1229: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1231: i64;
    let mut _1232: u64;
    let mut _1233: anchor_lang::prelude::Pubkey;
    let mut _1234: anchor_lang::prelude::Pubkey;
    let mut _1235: state::events::DepositDirection;
    let mut _1236: u64;
    let mut _1237: i64;
    let mut _1238: u16;
    let mut _1239: u128;
    let mut _1240: &state::spot_market::SpotMarket;
    let mut _1241: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1242: u128;
    let mut _1243: &state::spot_market::SpotMarket;
    let mut _1244: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1245: u128;
    let mut _1246: &state::spot_market::SpotMarket;
    let mut _1247: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1248: u128;
    let mut _1249: &state::spot_market::SpotMarket;
    let mut _1250: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1251: u64;
    let mut _1252: &state::user::User;
    let mut _1253: &std::cell::RefMut<'_, state::user::User>;
    let mut _1254: u64;
    let mut _1255: &state::user::User;
    let mut _1256: &std::cell::RefMut<'_, state::user::User>;
    let mut _1257: state::events::DepositExplanation;
    let mut _1258: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _1259: anchor_lang::prelude::Pubkey;
    let _1260: ();
    let _1261: ();
    let mut _1262: &[&[u8]];
    let mut _1263: &[&[u8]; 1];
    let _1264: &[&[u8]; 1];
    let _1265: [&[u8]; 1];
    let mut _1266: &[u8];
    let _1267: &[u8];
    let mut _1268: &std::vec::Vec<u8>;
    let _1269: &std::vec::Vec<u8>;
    let _1270: std::vec::Vec<u8>;
    let mut _1271: &state::events::DepositRecord;
    let _1272: &state::events::DepositRecord;
    let _1273: ();
    let mut _1274: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1275: ();
    let mut _1276: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1277: ();
    let mut _1278: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1279: ();
    let mut _1280: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1281: bool;
    let mut _1282: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1283: std::result::Result<bool, error::ErrorCode>;
    let mut _1284: &mut state::user::User;
    let mut _1285: &mut state::user::User;
    let mut _1286: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1287: &state::perp_market_map::PerpMarketMap<'_>;
    let _1288: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1289: &state::spot_market_map::SpotMarketMap<'_>;
    let _1290: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1291: &mut state::oracle_map::OracleMap<'_>;
    let mut _1292: &mut state::oracle_map::OracleMap<'_>;
    let mut _1293: math::margin::MarginRequirementType;
    let mut _1294: u16;
    let mut _1295: i128;
    let mut _1296: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1297: std::result::Result<i128, error::ErrorCode>;
    let mut _1298: u64;
    let mut _1299: isize;
    let mut _1301: !;
    let mut _1302: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1304: u16;
    let mut _1305: i128;
    let mut _1306: i128;
    let mut _1307: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1308: std::result::Result<i128, error::ErrorCode>;
    let mut _1309: u64;
    let mut _1310: isize;
    let mut _1312: !;
    let mut _1313: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1315: bool;
    let mut _1316: &mut state::user::UserStats;
    let mut _1317: &mut state::user::UserStats;
    let mut _1318: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _1319: i64;
    let mut _1320: isize;
    let mut _1322: !;
    let mut _1323: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1325: bool;
    let mut _1326: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1327: std::result::Result<bool, error::ErrorCode>;
    let mut _1328: &mut state::user::User;
    let mut _1329: &mut state::user::User;
    let mut _1330: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1331: &state::perp_market_map::PerpMarketMap<'_>;
    let _1332: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1333: &state::spot_market_map::SpotMarketMap<'_>;
    let _1334: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1335: &mut state::oracle_map::OracleMap<'_>;
    let mut _1336: &mut state::oracle_map::OracleMap<'_>;
    let mut _1337: math::margin::MarginRequirementType;
    let mut _1338: u16;
    let mut _1339: i128;
    let mut _1340: i128;
    let mut _1341: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1342: std::result::Result<i128, error::ErrorCode>;
    let mut _1343: u64;
    let mut _1344: isize;
    let mut _1346: !;
    let mut _1347: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1349: bool;
    let mut _1350: u16;
    let mut _1351: i128;
    let mut _1352: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1353: std::result::Result<i128, error::ErrorCode>;
    let mut _1354: u64;
    let mut _1355: isize;
    let mut _1357: !;
    let mut _1358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1360: &mut state::user::UserStats;
    let mut _1361: &mut state::user::UserStats;
    let mut _1362: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _1363: i64;
    let mut _1364: isize;
    let mut _1366: !;
    let mut _1367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1369: ();
    let mut _1370: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1371: std::result::Result<(), error::ErrorCode>;
    let mut _1372: &state::user::User;
    let _1373: &state::user::User;
    let mut _1374: &std::cell::RefMut<'_, state::user::User>;
    let mut _1375: &state::perp_market_map::PerpMarketMap<'_>;
    let _1376: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1377: &state::spot_market_map::SpotMarketMap<'_>;
    let _1378: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1379: &mut state::oracle_map::OracleMap<'_>;
    let mut _1380: &mut state::oracle_map::OracleMap<'_>;
    let mut _1381: isize;
    let mut _1383: !;
    let mut _1384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1386: ();
    let mut _1387: &mut state::user::User;
    let mut _1388: &mut state::user::User;
    let mut _1389: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1390: u64;
    let _1391: ();
    let mut _1392: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1393: std::result::Result<(), error::ErrorCode>;
    let mut _1394: &state::user::User;
    let _1395: &state::user::User;
    let mut _1396: &std::cell::RefMut<'_, state::user::User>;
    let mut _1397: &state::perp_market_map::PerpMarketMap<'_>;
    let _1398: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1399: &state::spot_market_map::SpotMarketMap<'_>;
    let _1400: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1401: &mut state::oracle_map::OracleMap<'_>;
    let mut _1402: &mut state::oracle_map::OracleMap<'_>;
    let mut _1403: isize;
    let mut _1405: !;
    let mut _1406: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1408: ();
    let mut _1409: &mut state::user::User;
    let mut _1410: &mut state::user::User;
    let mut _1411: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1412: u64;
    let _1413: ();
    let mut _1414: bool;
    let mut _1415: &state::user::User;
    let _1416: &state::user::User;
    let mut _1417: &std::cell::RefMut<'_, state::user::User>;
    let _1418: ();
    let mut _1419: &mut state::user::User;
    let mut _1420: &mut state::user::User;
    let mut _1421: &mut std::cell::RefMut<'_, state::user::User>;
    let _1422: ();
    let mut _1423: bool;
    let mut _1424: &state::user::User;
    let _1425: &state::user::User;
    let mut _1426: &std::cell::RefMut<'_, state::user::User>;
    let _1427: ();
    let mut _1428: &mut state::user::User;
    let mut _1429: &mut state::user::User;
    let mut _1430: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1432: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1433: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1434: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1435: &u16;
    let _1436: &u16;
    let mut _1437: isize;
    let mut _1439: !;
    let mut _1440: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1443: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1444: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1445: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1446: &u16;
    let _1447: &u16;
    let mut _1448: isize;
    let mut _1450: !;
    let mut _1451: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1454: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1455: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1456: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1457: &u16;
    let _1458: &u16;
    let mut _1459: isize;
    let mut _1461: !;
    let mut _1462: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1465: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1466: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1467: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1468: &u16;
    let _1469: &u16;
    let mut _1470: isize;
    let mut _1472: !;
    let mut _1473: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1475: ();
    let mut _1476: bool;
    let mut _1477: u64;
    let mut _1479: &state::spot_market::SpotMarket;
    let _1480: &state::spot_market::SpotMarket;
    let mut _1481: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1483: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1484: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _1485: std::option::Option<std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>>;
    let mut _1486: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1487: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1488: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1489: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1490: {closure@programs/drift/src/instructions/user.rs:1474:19: 1474:24};
    let mut _1491: &anchor_lang::prelude::Pubkey;
    let mut _1492: {closure@programs/drift/src/instructions/user.rs:1475:18: 1475:23};
    let _1494: &state::spot_market::SpotMarket;
    let mut _1495: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1497: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1498: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1499: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1500: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1501: {closure@programs/drift/src/instructions/user.rs:1483:19: 1483:24};
    let mut _1502: &&anchor_lang::prelude::Pubkey;
    let mut _1503: {closure@programs/drift/src/instructions/user.rs:1484:18: 1484:23};
    let _1504: ();
    let mut _1505: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1506: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1507: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1508: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _1509: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1510: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _1511: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1512: &anchor_lang::prelude::AccountInfo<'_>;
    let _1513: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1514: u8;
    let mut _1515: &state::state::State;
    let mut _1516: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1517: u64;
    let mut _1518: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _1519: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _1520: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _1521: isize;
    let mut _1523: !;
    let mut _1524: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _1526: ();
    let mut _1527: bool;
    let mut _1528: u64;
    let mut _1530: &state::spot_market::SpotMarket;
    let _1531: &state::spot_market::SpotMarket;
    let mut _1532: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1534: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1535: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _1536: std::option::Option<std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>>;
    let mut _1537: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1538: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1539: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1540: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1541: {closure@programs/drift/src/instructions/user.rs:1504:19: 1504:24};
    let mut _1542: &anchor_lang::prelude::Pubkey;
    let mut _1543: {closure@programs/drift/src/instructions/user.rs:1505:18: 1505:23};
    let _1545: &state::spot_market::SpotMarket;
    let mut _1546: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1548: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1549: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1550: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _1551: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1552: {closure@programs/drift/src/instructions/user.rs:1513:19: 1513:24};
    let mut _1553: &&anchor_lang::prelude::Pubkey;
    let mut _1554: {closure@programs/drift/src/instructions/user.rs:1514:18: 1514:23};
    let _1555: ();
    let mut _1556: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1557: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1558: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1559: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _1560: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1561: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _1562: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1563: &anchor_lang::prelude::AccountInfo<'_>;
    let _1564: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1565: u8;
    let mut _1566: &state::state::State;
    let mut _1567: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1568: u64;
    let mut _1569: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _1570: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _1571: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _1572: isize;
    let mut _1574: !;
    let mut _1575: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _1577: ();
    let mut _1578: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1579: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1580: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1581: isize;
    let mut _1583: !;
    let mut _1584: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _1586: i64;
    let mut _1587: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1588: std::result::Result<i64, error::ErrorCode>;
    let mut _1589: &state::spot_market::SpotMarket;
    let _1590: &state::spot_market::SpotMarket;
    let mut _1591: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1592: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1593: u64;
    let mut _1594: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1595: &anchor_spl::token_interface::TokenAccount;
    let _1596: &anchor_spl::token_interface::TokenAccount;
    let mut _1597: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1598: isize;
    let mut _1600: !;
    let mut _1601: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1603: ();
    let mut _1604: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1605: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1606: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1607: isize;
    let mut _1609: !;
    let mut _1610: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _1612: i64;
    let mut _1613: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1614: std::result::Result<i64, error::ErrorCode>;
    let mut _1615: &state::spot_market::SpotMarket;
    let _1616: &state::spot_market::SpotMarket;
    let mut _1617: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1618: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1619: u64;
    let mut _1620: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1621: &anchor_spl::token_interface::TokenAccount;
    let _1622: &anchor_spl::token_interface::TokenAccount;
    let mut _1623: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1624: isize;
    let mut _1626: !;
    let mut _1627: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1629: ();
    let mut _1630: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1631: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1632: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1633: isize;
    let mut _1635: !;
    let mut _1636: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _1638: i64;
    let mut _1639: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1640: std::result::Result<i64, error::ErrorCode>;
    let mut _1641: &state::spot_market::SpotMarket;
    let _1642: &state::spot_market::SpotMarket;
    let mut _1643: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1644: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1645: u64;
    let mut _1646: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1647: &anchor_spl::token_interface::TokenAccount;
    let _1648: &anchor_spl::token_interface::TokenAccount;
    let mut _1649: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1650: isize;
    let mut _1652: !;
    let mut _1653: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1655: ();
    let mut _1656: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1657: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1658: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1659: isize;
    let mut _1661: !;
    let mut _1662: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _1664: i64;
    let mut _1665: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1666: std::result::Result<i64, error::ErrorCode>;
    let mut _1667: &state::spot_market::SpotMarket;
    let _1668: &state::spot_market::SpotMarket;
    let mut _1669: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1670: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1671: u64;
    let mut _1672: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1673: &anchor_spl::token_interface::TokenAccount;
    let _1674: &anchor_spl::token_interface::TokenAccount;
    let mut _1675: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1676: isize;
    let mut _1678: !;
    let mut _1679: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1681: ();
    let mut _1701: &mut instructions::user::TransferPools<'_>;
    let mut _1702: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1703: &mut instructions::user::TransferPools<'_>;
    let mut _1704: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1705: &mut instructions::user::TransferPools<'_>;
    let mut _1706: &mut instructions::user::TransferPools<'_>;
    let mut _1707: &mut instructions::user::TransferPools<'_>;
    let mut _1708: &mut instructions::user::TransferPools<'_>;
    let mut _1709: &mut instructions::user::TransferPools<'_>;
    let mut _1710: &mut instructions::user::TransferPools<'_>;
    let mut _1711: &mut instructions::user::TransferPools<'_>;
    let mut _1712: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1713: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1714: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1715: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1716: &mut instructions::user::TransferPools<'_>;
    let mut _1717: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1718: &mut instructions::user::TransferPools<'_>;
    let mut _1719: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1720: &mut instructions::user::TransferPools<'_>;
    let mut _1721: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1722: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1723: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1724: &mut instructions::user::TransferPools<'_>;
    let mut _1725: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1726: &mut instructions::user::TransferPools<'_>;
    let mut _1727: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1728: &mut instructions::user::TransferPools<'_>;
    let mut _1729: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1730: &mut instructions::user::TransferPools<'_>;
    let mut _1731: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1732: &mut instructions::user::TransferPools<'_>;
    let mut _1733: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1734: &mut instructions::user::TransferPools<'_>;
    let mut _1735: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1736: &mut instructions::user::TransferPools<'_>;
    let mut _1737: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1738: &mut instructions::user::TransferPools<'_>;
    let mut _1739: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1740: &mut instructions::user::TransferPools<'_>;
    let mut _1741: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1742: &mut instructions::user::TransferPools<'_>;
    let mut _1743: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1744: &mut instructions::user::TransferPools<'_>;
    let mut _1745: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1746: bool;
    let mut _1747: bool;
    let mut _1748: bool;
    let mut _1749: bool;
    let mut _1750: isize;
    let mut _1751: isize;
    let mut _1752: isize;
    let mut _1753: isize;
    let mut _1754: isize;
    let mut _1755: isize;
    let mut _1756: isize;
    let mut _1757: isize;
    let mut _1758: isize;
    let mut _1759: isize;
    let mut _1760: isize;
    let mut _1761: isize;
    let mut _1762: isize;
    let mut _1763: isize;
    let mut _1764: isize;
    let mut _1765: isize;
    let mut _1766: isize;
    let mut _1767: isize;
    let mut _1768: isize;
    let mut _1769: isize;
    let mut _1770: isize;
    let mut _1771: isize;
    let mut _1772: isize;
    let mut _1773: isize;
    let mut _1774: isize;
    let mut _1775: isize;
    let mut _1776: isize;
    let mut _1777: isize;
    let mut _1778: isize;
    let mut _1779: isize;
    let mut _1780: isize;
    let mut _1781: isize;
    let mut _1782: isize;
    let mut _1783: isize;
    let mut _1784: isize;
    let mut _1785: isize;
    let mut _1786: isize;
    let mut _1787: isize;
    let mut _1788: isize;
    let mut _1789: isize;
    let mut _1790: isize;
    let mut _1791: isize;
    let mut _1792: isize;
    let mut _1793: isize;
    let mut _1794: isize;
    let mut _1795: isize;
    let mut _1796: isize;
    let mut _1797: isize;
    let mut _1798: isize;
    let mut _1799: isize;
    let mut _1800: isize;
    let mut _1801: isize;
    let mut _1802: isize;
    let mut _1803: isize;
    let mut _1804: isize;
    let mut _1805: isize;
    let mut _1806: isize;
    let mut _1807: isize;
    let mut _1808: isize;
    let mut _1809: isize;
    let mut _1810: isize;
    let mut _1811: isize;
    let mut _1812: isize;
    let mut _1813: isize;
    let mut _1814: isize;
    let mut _1815: isize;
    let mut _1816: isize;
    let mut _1817: isize;
    let mut _1818: isize;
    let mut _1819: isize;
    let mut _1820: isize;
    let mut _1821: isize;
    let mut _1822: isize;
    let mut _1823: isize;
    let mut _1824: isize;
    let mut _1825: isize;
    let mut _1826: isize;
    let mut _1827: isize;
    let mut _1828: isize;
    let mut _1829: isize;
    let mut _1830: isize;
    let mut _1831: isize;
    let mut _1832: isize;
    let mut _1833: isize;
    let mut _1834: isize;
    let mut _1835: isize;
    let mut _1836: isize;
    let mut _1837: isize;
    let mut _1838: isize;
    let mut _1839: isize;
    let mut _1840: isize;
    let mut _1841: isize;
    let mut _1842: isize;
    let mut _1843: isize;
    let mut _1844: isize;
    let mut _1845: isize;
    let mut _1846: isize;
    let mut _1847: isize;
    let mut _1848: isize;
    let mut _1849: isize;
    let mut _1850: isize;
    let mut _1851: isize;
    let mut _1852: isize;
    let mut _1853: isize;
    let mut _1854: isize;
    let mut _1855: isize;
    let mut _1856: isize;
    let mut _1857: isize;
    let mut _1858: isize;
    let mut _1859: isize;
    let mut _1860: isize;
    let mut _1861: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1862: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1863: *const [u16; 4];
    let mut _1864: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1865: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1866: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1867: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1868: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1869: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1870: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1871: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1872: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1873: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1874: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1875: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1876: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1877: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1878: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _14;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _17;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _24;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _27;
        scope 8 {
        }
    }
    scope 9 {
        debug authority_key => _28;
        let _31: anchor_lang::prelude::Pubkey;
        scope 10 {
            debug to_user_key => _31;
            let _33: anchor_lang::prelude::Pubkey;
            scope 11 {
                debug from_user_key => _33;
                let _35: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                scope 12 {
                    debug state => _35;
                    let _36: anchor_lang::prelude::Clock;
                    let _40: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _43: anchor_lang::prelude::Clock;
                    scope 13 {
                        debug clock => _36;
                        let _44: u64;
                        scope 18 {
                            debug slot => _44;
                            let _45: &mut std::cell::RefMut<'_, state::user::User>;
                            let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _56: std::cell::RefMut<'_, state::user::User>;
                            scope 19 {
                                debug to_user => _45;
                                let _57: &mut std::cell::RefMut<'_, state::user::User>;
                                let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _68: std::cell::RefMut<'_, state::user::User>;
                                scope 24 {
                                    debug from_user => _57;
                                    let _69: &mut std::cell::RefMut<'_, state::user::UserStats>;
                                    let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _80: std::cell::RefMut<'_, state::user::UserStats>;
                                    scope 29 {
                                        debug user_stats => _69;
                                        let _81: anchor_lang::prelude::Clock;
                                        let _85: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _88: anchor_lang::prelude::Clock;
                                        scope 34 {
                                            debug clock => _81;
                                            let _97: error::ErrorCode;
                                            let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _125: ();
                                            let _134: error::ErrorCode;
                                            let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _162: ();
                                            let _170: error::ErrorCode;
                                            let _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _198: ();
                                            let _210: error::ErrorCode;
                                            let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _238: ();
                                            let _239: state::perp_market_map::PerpMarketMap<'_>;
                                            let _240: state::spot_market_map::SpotMarketMap<'_>;
                                            let mut _241: state::oracle_map::OracleMap<'_>;
                                            let _273: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _276: instructions::optional_accounts::AccountMaps<'_>;
                                            let mut _1879: *const ();
                                            let mut _1880: usize;
                                            let mut _1881: usize;
                                            let mut _1882: usize;
                                            let mut _1883: usize;
                                            let mut _1884: bool;
                                            scope 39 {
                                                debug error_code => _97;
                                                let _104: std::string::String;
                                                let mut _1700: &[&str; 2];
                                                scope 40 {
                                                    debug res => _104;
                                                }
                                            }
                                            scope 41 {
                                                debug residual => _122;
                                                scope 42 {
                                                }
                                            }
                                            scope 43 {
                                                debug val => _125;
                                                scope 44 {
                                                }
                                            }
                                            scope 45 {
                                                debug error_code => _134;
                                                let _141: std::string::String;
                                                let mut _1699: &[&str; 2];
                                                scope 46 {
                                                    debug res => _141;
                                                }
                                            }
                                            scope 47 {
                                                debug residual => _159;
                                                scope 48 {
                                                }
                                            }
                                            scope 49 {
                                                debug val => _162;
                                                scope 50 {
                                                }
                                            }
                                            scope 51 {
                                                debug error_code => _170;
                                                let _177: std::string::String;
                                                let mut _1698: &[&str; 2];
                                                scope 52 {
                                                    debug res => _177;
                                                }
                                            }
                                            scope 53 {
                                                debug residual => _195;
                                                scope 54 {
                                                }
                                            }
                                            scope 55 {
                                                debug val => _198;
                                                scope 56 {
                                                }
                                            }
                                            scope 57 {
                                                debug error_code => _210;
                                                let _217: std::string::String;
                                                let mut _1697: &[&str; 2];
                                                scope 58 {
                                                    debug res => _217;
                                                }
                                            }
                                            scope 59 {
                                                debug residual => _235;
                                                scope 60 {
                                                }
                                            }
                                            scope 61 {
                                                debug val => _238;
                                                scope 62 {
                                                }
                                            }
                                            scope 63 {
                                                debug perp_market_map => _239;
                                                debug spot_market_map => _240;
                                                debug oracle_map => _241;
                                                let mut _277: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                let _284: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _287: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                scope 69 {
                                                    debug deposit_from_spot_market => _277;
                                                    let mut _288: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                    let _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _298: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                    scope 74 {
                                                        debug deposit_to_spot_market => _288;
                                                        let mut _299: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _306: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _309: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        scope 79 {
                                                            debug borrow_from_spot_market => _299;
                                                            let mut _310: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                            let _317: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _320: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                            scope 84 {
                                                                debug borrow_to_spot_market => _310;
                                                                let _332: error::ErrorCode;
                                                                let _357: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _360: ();
                                                                let _372: error::ErrorCode;
                                                                let _397: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _400: ();
                                                                let _412: error::ErrorCode;
                                                                let _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _440: ();
                                                                let _452: error::ErrorCode;
                                                                let _477: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _480: ();
                                                                let _492: error::ErrorCode;
                                                                let _517: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _520: ();
                                                                let _521: state::oracle::OraclePriceData;
                                                                let _533: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _536: &state::oracle::OraclePriceData;
                                                                scope 89 {
                                                                    debug error_code => _332;
                                                                    let _339: std::string::String;
                                                                    let mut _1696: &[&str; 2];
                                                                    scope 90 {
                                                                        debug res => _339;
                                                                    }
                                                                }
                                                                scope 91 {
                                                                    debug residual => _357;
                                                                    scope 92 {
                                                                    }
                                                                }
                                                                scope 93 {
                                                                    debug val => _360;
                                                                    scope 94 {
                                                                    }
                                                                }
                                                                scope 95 {
                                                                    debug error_code => _372;
                                                                    let _379: std::string::String;
                                                                    let mut _1695: &[&str; 2];
                                                                    scope 96 {
                                                                        debug res => _379;
                                                                    }
                                                                }
                                                                scope 97 {
                                                                    debug residual => _397;
                                                                    scope 98 {
                                                                    }
                                                                }
                                                                scope 99 {
                                                                    debug val => _400;
                                                                    scope 100 {
                                                                    }
                                                                }
                                                                scope 101 {
                                                                    debug error_code => _412;
                                                                    let _419: std::string::String;
                                                                    let mut _1694: &[&str; 2];
                                                                    scope 102 {
                                                                        debug res => _419;
                                                                    }
                                                                }
                                                                scope 103 {
                                                                    debug residual => _437;
                                                                    scope 104 {
                                                                    }
                                                                }
                                                                scope 105 {
                                                                    debug val => _440;
                                                                    scope 106 {
                                                                    }
                                                                }
                                                                scope 107 {
                                                                    debug error_code => _452;
                                                                    let _459: std::string::String;
                                                                    let mut _1693: &[&str; 2];
                                                                    scope 108 {
                                                                        debug res => _459;
                                                                    }
                                                                }
                                                                scope 109 {
                                                                    debug residual => _477;
                                                                    scope 110 {
                                                                    }
                                                                }
                                                                scope 111 {
                                                                    debug val => _480;
                                                                    scope 112 {
                                                                    }
                                                                }
                                                                scope 113 {
                                                                    debug error_code => _492;
                                                                    let _499: std::string::String;
                                                                    let mut _1692: &[&str; 2];
                                                                    scope 114 {
                                                                        debug res => _499;
                                                                    }
                                                                }
                                                                scope 115 {
                                                                    debug residual => _517;
                                                                    scope 116 {
                                                                    }
                                                                }
                                                                scope 117 {
                                                                    debug val => _520;
                                                                    scope 118 {
                                                                    }
                                                                }
                                                                scope 119 {
                                                                    debug deposit_from_oracle_price_data => _521;
                                                                    let _537: state::oracle::OraclePriceData;
                                                                    let _549: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _552: &state::oracle::OraclePriceData;
                                                                    scope 124 {
                                                                        debug deposit_to_oracle_price_data => _537;
                                                                        let _553: state::oracle::OraclePriceData;
                                                                        let _565: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _568: &state::oracle::OraclePriceData;
                                                                        scope 129 {
                                                                            debug borrow_from_oracle_price_data => _553;
                                                                            let _569: state::oracle::OraclePriceData;
                                                                            let _581: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _584: &state::oracle::OraclePriceData;
                                                                            scope 134 {
                                                                                debug borrow_to_oracle_price_data => _569;
                                                                                let _597: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _600: ();
                                                                                let _613: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _616: ();
                                                                                let _629: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _632: ();
                                                                                let _645: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _648: ();
                                                                                let _649: u64;
                                                                                let _651: &mut state::user::SpotPosition;
                                                                                let _659: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _662: &mut state::user::SpotPosition;
                                                                                scope 139 {
                                                                                    debug residual => _597;
                                                                                    scope 140 {
                                                                                    }
                                                                                }
                                                                                scope 141 {
                                                                                    debug val => _600;
                                                                                    scope 142 {
                                                                                    }
                                                                                }
                                                                                scope 143 {
                                                                                    debug residual => _613;
                                                                                    scope 144 {
                                                                                    }
                                                                                }
                                                                                scope 145 {
                                                                                    debug val => _616;
                                                                                    scope 146 {
                                                                                    }
                                                                                }
                                                                                scope 147 {
                                                                                    debug residual => _629;
                                                                                    scope 148 {
                                                                                    }
                                                                                }
                                                                                scope 149 {
                                                                                    debug val => _632;
                                                                                    scope 150 {
                                                                                    }
                                                                                }
                                                                                scope 151 {
                                                                                    debug residual => _645;
                                                                                    scope 152 {
                                                                                    }
                                                                                }
                                                                                scope 153 {
                                                                                    debug val => _648;
                                                                                    scope 154 {
                                                                                    }
                                                                                }
                                                                                scope 155 {
                                                                                    debug deposit_transfer => _649;
                                                                                    let _779: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _782: u128;
                                                                                    let _784: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _787: ();
                                                                                    let _804: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _807: ();
                                                                                    let _808: u64;
                                                                                    let _809: u64;
                                                                                    let _961: u64;
                                                                                    let _963: &mut state::user::SpotPosition;
                                                                                    let _971: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _974: &mut state::user::SpotPosition;
                                                                                    let mut _1688: &state::spot_market::SpotBalanceType;
                                                                                    scope 185 {
                                                                                        debug residual => _779;
                                                                                        scope 186 {
                                                                                        }
                                                                                    }
                                                                                    scope 187 {
                                                                                        debug val => _782;
                                                                                        scope 188 {
                                                                                        }
                                                                                    }
                                                                                    scope 189 {
                                                                                        debug residual => _784;
                                                                                        scope 190 {
                                                                                        }
                                                                                    }
                                                                                    scope 191 {
                                                                                        debug val => _787;
                                                                                        scope 192 {
                                                                                        }
                                                                                    }
                                                                                    scope 193 {
                                                                                        debug residual => _804;
                                                                                        scope 194 {
                                                                                        }
                                                                                    }
                                                                                    scope 195 {
                                                                                        debug val => _807;
                                                                                        scope 196 {
                                                                                        }
                                                                                    }
                                                                                    scope 197 {
                                                                                        debug deposit_record_id => _808;
                                                                                        let _819: state::events::DepositRecord;
                                                                                        scope 199 {
                                                                                            debug deposit_record => _819;
                                                                                            let _878: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _881: u128;
                                                                                            let _883: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _886: ();
                                                                                            let _903: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _906: ();
                                                                                            let _907: u64;
                                                                                            let _908: u64;
                                                                                            let mut _1687: &state::spot_market::SpotBalanceType;
                                                                                            scope 200 {
                                                                                                debug residual => _878;
                                                                                                scope 201 {
                                                                                                }
                                                                                            }
                                                                                            scope 202 {
                                                                                                debug val => _881;
                                                                                                scope 203 {
                                                                                                }
                                                                                            }
                                                                                            scope 204 {
                                                                                                debug residual => _883;
                                                                                                scope 205 {
                                                                                                }
                                                                                            }
                                                                                            scope 206 {
                                                                                                debug val => _886;
                                                                                                scope 207 {
                                                                                                }
                                                                                            }
                                                                                            scope 208 {
                                                                                                debug residual => _903;
                                                                                                scope 209 {
                                                                                                }
                                                                                            }
                                                                                            scope 210 {
                                                                                                debug val => _906;
                                                                                                scope 211 {
                                                                                                }
                                                                                            }
                                                                                            scope 212 {
                                                                                                debug deposit_record_id => _907;
                                                                                                let _918: state::events::DepositRecord;
                                                                                                scope 214 {
                                                                                                    debug deposit_record => _918;
                                                                                                }
                                                                                            }
                                                                                            scope 213 {
                                                                                                debug current_id => _908;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 198 {
                                                                                        debug current_id => _809;
                                                                                    }
                                                                                    scope 215 {
                                                                                        debug borrow_transfer => _961;
                                                                                        let _1091: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1094: u128;
                                                                                        let _1096: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1099: ();
                                                                                        let _1116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1119: ();
                                                                                        let _1120: u64;
                                                                                        let _1121: u64;
                                                                                        let _1300: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1303: i128;
                                                                                        let _1311: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1314: i128;
                                                                                        let _1321: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1324: bool;
                                                                                        let _1345: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1348: i128;
                                                                                        let _1356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1359: i128;
                                                                                        let _1365: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1368: bool;
                                                                                        let _1382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1385: ();
                                                                                        let _1404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1407: ();
                                                                                        let _1431: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                        let _1438: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1441: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                        let mut _1683: &state::spot_market::SpotBalanceType;
                                                                                        scope 245 {
                                                                                            debug residual => _1091;
                                                                                            scope 246 {
                                                                                            }
                                                                                        }
                                                                                        scope 247 {
                                                                                            debug val => _1094;
                                                                                            scope 248 {
                                                                                            }
                                                                                        }
                                                                                        scope 249 {
                                                                                            debug residual => _1096;
                                                                                            scope 250 {
                                                                                            }
                                                                                        }
                                                                                        scope 251 {
                                                                                            debug val => _1099;
                                                                                            scope 252 {
                                                                                            }
                                                                                        }
                                                                                        scope 253 {
                                                                                            debug residual => _1116;
                                                                                            scope 254 {
                                                                                            }
                                                                                        }
                                                                                        scope 255 {
                                                                                            debug val => _1119;
                                                                                            scope 256 {
                                                                                            }
                                                                                        }
                                                                                        scope 257 {
                                                                                            debug deposit_record_id => _1120;
                                                                                            let _1131: state::events::DepositRecord;
                                                                                            scope 259 {
                                                                                                debug deposit_record => _1131;
                                                                                                let _1190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1193: u128;
                                                                                                let _1195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1198: ();
                                                                                                let _1215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1218: ();
                                                                                                let _1219: u64;
                                                                                                let _1220: u64;
                                                                                                let mut _1682: &state::spot_market::SpotBalanceType;
                                                                                                scope 260 {
                                                                                                    debug residual => _1190;
                                                                                                    scope 261 {
                                                                                                    }
                                                                                                }
                                                                                                scope 262 {
                                                                                                    debug val => _1193;
                                                                                                    scope 263 {
                                                                                                    }
                                                                                                }
                                                                                                scope 264 {
                                                                                                    debug residual => _1195;
                                                                                                    scope 265 {
                                                                                                    }
                                                                                                }
                                                                                                scope 266 {
                                                                                                    debug val => _1198;
                                                                                                    scope 267 {
                                                                                                    }
                                                                                                }
                                                                                                scope 268 {
                                                                                                    debug residual => _1215;
                                                                                                    scope 269 {
                                                                                                    }
                                                                                                }
                                                                                                scope 270 {
                                                                                                    debug val => _1218;
                                                                                                    scope 271 {
                                                                                                    }
                                                                                                }
                                                                                                scope 272 {
                                                                                                    debug deposit_record_id => _1219;
                                                                                                    let _1230: state::events::DepositRecord;
                                                                                                    scope 274 {
                                                                                                        debug deposit_record => _1230;
                                                                                                    }
                                                                                                }
                                                                                                scope 273 {
                                                                                                    debug current_id => _1220;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 258 {
                                                                                            debug current_id => _1121;
                                                                                        }
                                                                                        scope 275 {
                                                                                            debug residual => _1300;
                                                                                            scope 276 {
                                                                                            }
                                                                                        }
                                                                                        scope 277 {
                                                                                            debug val => _1303;
                                                                                            scope 278 {
                                                                                            }
                                                                                        }
                                                                                        scope 279 {
                                                                                            debug residual => _1311;
                                                                                            scope 280 {
                                                                                            }
                                                                                        }
                                                                                        scope 281 {
                                                                                            debug val => _1314;
                                                                                            scope 282 {
                                                                                            }
                                                                                        }
                                                                                        scope 283 {
                                                                                            debug residual => _1321;
                                                                                            scope 284 {
                                                                                            }
                                                                                        }
                                                                                        scope 285 {
                                                                                            debug val => _1324;
                                                                                            scope 286 {
                                                                                            }
                                                                                        }
                                                                                        scope 287 {
                                                                                            debug residual => _1345;
                                                                                            scope 288 {
                                                                                            }
                                                                                        }
                                                                                        scope 289 {
                                                                                            debug val => _1348;
                                                                                            scope 290 {
                                                                                            }
                                                                                        }
                                                                                        scope 291 {
                                                                                            debug residual => _1356;
                                                                                            scope 292 {
                                                                                            }
                                                                                        }
                                                                                        scope 293 {
                                                                                            debug val => _1359;
                                                                                            scope 294 {
                                                                                            }
                                                                                        }
                                                                                        scope 295 {
                                                                                            debug residual => _1365;
                                                                                            scope 296 {
                                                                                            }
                                                                                        }
                                                                                        scope 297 {
                                                                                            debug val => _1368;
                                                                                            scope 298 {
                                                                                            }
                                                                                        }
                                                                                        scope 299 {
                                                                                            debug residual => _1382;
                                                                                            scope 300 {
                                                                                            }
                                                                                        }
                                                                                        scope 301 {
                                                                                            debug val => _1385;
                                                                                            scope 302 {
                                                                                            }
                                                                                        }
                                                                                        scope 303 {
                                                                                            debug residual => _1404;
                                                                                            scope 304 {
                                                                                            }
                                                                                        }
                                                                                        scope 305 {
                                                                                            debug val => _1407;
                                                                                            scope 306 {
                                                                                            }
                                                                                        }
                                                                                        scope 307 {
                                                                                            debug deposit_from_spot_market => _1431;
                                                                                            let _1442: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                            let _1449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1452: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                            scope 312 {
                                                                                                debug deposit_to_spot_market => _1442;
                                                                                                let _1453: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                let _1460: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1463: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                scope 317 {
                                                                                                    debug borrow_from_spot_market => _1453;
                                                                                                    let _1464: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                    let _1471: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _1474: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                    scope 322 {
                                                                                                        debug borrow_to_spot_market => _1464;
                                                                                                        let _1478: anchor_lang::prelude::Pubkey;
                                                                                                        let _1529: anchor_lang::prelude::Pubkey;
                                                                                                        let _1582: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                        let _1585: ();
                                                                                                        let _1599: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _1602: i64;
                                                                                                        let _1608: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                        let _1611: ();
                                                                                                        let _1625: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _1628: i64;
                                                                                                        let _1634: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                        let _1637: ();
                                                                                                        let _1651: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _1654: i64;
                                                                                                        let _1660: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                        let _1663: ();
                                                                                                        let _1677: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _1680: i64;
                                                                                                        scope 327 {
                                                                                                            debug token_program_pubkey => _1478;
                                                                                                            let _1482: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                                                                            scope 328 {
                                                                                                                debug token_program => _1482;
                                                                                                                let _1493: &anchor_lang::prelude::Pubkey;
                                                                                                                scope 329 {
                                                                                                                    debug spot_market_mint => _1493;
                                                                                                                    let _1496: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                                                                                                    scope 330 {
                                                                                                                        debug mint_account_info => _1496;
                                                                                                                        let _1522: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                        let _1525: ();
                                                                                                                        scope 331 {
                                                                                                                            debug residual => _1522;
                                                                                                                            scope 332 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 333 {
                                                                                                                            debug val => _1525;
                                                                                                                            scope 334 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 335 {
                                                                                                            debug token_program_pubkey => _1529;
                                                                                                            let _1533: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                                                                            scope 336 {
                                                                                                                debug token_program => _1533;
                                                                                                                let _1544: &anchor_lang::prelude::Pubkey;
                                                                                                                scope 337 {
                                                                                                                    debug spot_market_mint => _1544;
                                                                                                                    let _1547: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                                                                                                    scope 338 {
                                                                                                                        debug mint_account_info => _1547;
                                                                                                                        let _1573: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                        let _1576: ();
                                                                                                                        scope 339 {
                                                                                                                            debug residual => _1573;
                                                                                                                            scope 340 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 341 {
                                                                                                                            debug val => _1576;
                                                                                                                            scope 342 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 343 {
                                                                                                            debug residual => _1582;
                                                                                                            scope 344 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 345 {
                                                                                                            debug val => _1585;
                                                                                                            scope 346 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 347 {
                                                                                                            debug residual => _1599;
                                                                                                            scope 348 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 349 {
                                                                                                            debug val => _1602;
                                                                                                            scope 350 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 351 {
                                                                                                            debug residual => _1608;
                                                                                                            scope 352 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 353 {
                                                                                                            debug val => _1611;
                                                                                                            scope 354 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 355 {
                                                                                                            debug residual => _1625;
                                                                                                            scope 356 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 357 {
                                                                                                            debug val => _1628;
                                                                                                            scope 358 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 359 {
                                                                                                            debug residual => _1634;
                                                                                                            scope 360 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 361 {
                                                                                                            debug val => _1637;
                                                                                                            scope 362 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 363 {
                                                                                                            debug residual => _1651;
                                                                                                            scope 364 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 365 {
                                                                                                            debug val => _1654;
                                                                                                            scope 366 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 367 {
                                                                                                            debug residual => _1660;
                                                                                                            scope 368 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 369 {
                                                                                                            debug val => _1663;
                                                                                                            scope 370 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 371 {
                                                                                                            debug residual => _1677;
                                                                                                            scope 372 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 373 {
                                                                                                            debug val => _1680;
                                                                                                            scope 374 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 323 {
                                                                                                        debug residual => _1471;
                                                                                                        scope 324 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 325 {
                                                                                                        debug val => _1474;
                                                                                                        scope 326 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 318 {
                                                                                                    debug residual => _1460;
                                                                                                    scope 319 {
                                                                                                    }
                                                                                                }
                                                                                                scope 320 {
                                                                                                    debug val => _1463;
                                                                                                    scope 321 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 313 {
                                                                                                debug residual => _1449;
                                                                                                scope 314 {
                                                                                                }
                                                                                            }
                                                                                            scope 315 {
                                                                                                debug val => _1452;
                                                                                                scope 316 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 308 {
                                                                                            debug residual => _1438;
                                                                                            scope 309 {
                                                                                            }
                                                                                        }
                                                                                        scope 310 {
                                                                                            debug val => _1441;
                                                                                            scope 311 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 216 {
                                                                                    }
                                                                                    scope 217 {
                                                                                        debug spot_position => _963;
                                                                                        let _983: error::ErrorCode;
                                                                                        let _1008: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1011: ();
                                                                                        let _1012: u64;
                                                                                        let _1024: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1027: u128;
                                                                                        let _1029: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1032: u64;
                                                                                        let mut _1686: &state::spot_market::SpotBalanceType;
                                                                                        scope 222 {
                                                                                            debug error_code => _983;
                                                                                            let _990: std::string::String;
                                                                                            let mut _1685: &[&str; 2];
                                                                                            scope 223 {
                                                                                                debug res => _990;
                                                                                            }
                                                                                        }
                                                                                        scope 224 {
                                                                                            debug residual => _1008;
                                                                                            scope 225 {
                                                                                            }
                                                                                        }
                                                                                        scope 226 {
                                                                                            debug val => _1011;
                                                                                            scope 227 {
                                                                                            }
                                                                                        }
                                                                                        scope 228 {
                                                                                            debug token_amount => _1012;
                                                                                            let _1033: u64;
                                                                                            let _1035: u64;
                                                                                            scope 237 {
                                                                                                debug amount => _1033;
                                                                                                let _1043: error::ErrorCode;
                                                                                                let _1068: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1071: ();
                                                                                                scope 239 {
                                                                                                    debug error_code => _1043;
                                                                                                    let _1050: std::string::String;
                                                                                                    let mut _1684: &[&str; 2];
                                                                                                    scope 240 {
                                                                                                        debug res => _1050;
                                                                                                    }
                                                                                                }
                                                                                                scope 241 {
                                                                                                    debug residual => _1068;
                                                                                                    scope 242 {
                                                                                                    }
                                                                                                }
                                                                                                scope 243 {
                                                                                                    debug val => _1071;
                                                                                                    scope 244 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 238 {
                                                                                                debug amount => _1035;
                                                                                            }
                                                                                        }
                                                                                        scope 229 {
                                                                                            debug residual => _1024;
                                                                                            scope 230 {
                                                                                            }
                                                                                        }
                                                                                        scope 231 {
                                                                                            debug val => _1027;
                                                                                            scope 232 {
                                                                                            }
                                                                                        }
                                                                                        scope 233 {
                                                                                            debug residual => _1029;
                                                                                            scope 234 {
                                                                                            }
                                                                                        }
                                                                                        scope 235 {
                                                                                            debug val => _1032;
                                                                                            scope 236 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 218 {
                                                                                        debug residual => _971;
                                                                                        scope 219 {
                                                                                        }
                                                                                    }
                                                                                    scope 220 {
                                                                                        debug val => _974;
                                                                                        scope 221 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 156 {
                                                                                }
                                                                                scope 157 {
                                                                                    debug spot_position => _651;
                                                                                    let _671: error::ErrorCode;
                                                                                    let _696: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _699: ();
                                                                                    let _700: u64;
                                                                                    let _712: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _715: u128;
                                                                                    let _717: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _720: u64;
                                                                                    let mut _1691: &state::spot_market::SpotBalanceType;
                                                                                    scope 162 {
                                                                                        debug error_code => _671;
                                                                                        let _678: std::string::String;
                                                                                        let mut _1690: &[&str; 2];
                                                                                        scope 163 {
                                                                                            debug res => _678;
                                                                                        }
                                                                                    }
                                                                                    scope 164 {
                                                                                        debug residual => _696;
                                                                                        scope 165 {
                                                                                        }
                                                                                    }
                                                                                    scope 166 {
                                                                                        debug val => _699;
                                                                                        scope 167 {
                                                                                        }
                                                                                    }
                                                                                    scope 168 {
                                                                                        debug token_amount => _700;
                                                                                        let _721: u64;
                                                                                        let _723: u64;
                                                                                        scope 177 {
                                                                                            debug amount => _721;
                                                                                            let _731: error::ErrorCode;
                                                                                            let _756: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _759: ();
                                                                                            scope 179 {
                                                                                                debug error_code => _731;
                                                                                                let _738: std::string::String;
                                                                                                let mut _1689: &[&str; 2];
                                                                                                scope 180 {
                                                                                                    debug res => _738;
                                                                                                }
                                                                                            }
                                                                                            scope 181 {
                                                                                                debug residual => _756;
                                                                                                scope 182 {
                                                                                                }
                                                                                            }
                                                                                            scope 183 {
                                                                                                debug val => _759;
                                                                                                scope 184 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 178 {
                                                                                            debug amount => _723;
                                                                                        }
                                                                                    }
                                                                                    scope 169 {
                                                                                        debug residual => _712;
                                                                                        scope 170 {
                                                                                        }
                                                                                    }
                                                                                    scope 171 {
                                                                                        debug val => _715;
                                                                                        scope 172 {
                                                                                        }
                                                                                    }
                                                                                    scope 173 {
                                                                                        debug residual => _717;
                                                                                        scope 174 {
                                                                                        }
                                                                                    }
                                                                                    scope 175 {
                                                                                        debug val => _720;
                                                                                        scope 176 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 158 {
                                                                                    debug residual => _659;
                                                                                    scope 159 {
                                                                                    }
                                                                                }
                                                                                scope 160 {
                                                                                    debug val => _662;
                                                                                    scope 161 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 135 {
                                                                                debug residual => _581;
                                                                                scope 136 {
                                                                                }
                                                                            }
                                                                            scope 137 {
                                                                                debug val => _584;
                                                                                scope 138 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 130 {
                                                                            debug residual => _565;
                                                                            scope 131 {
                                                                            }
                                                                        }
                                                                        scope 132 {
                                                                            debug val => _568;
                                                                            scope 133 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 125 {
                                                                        debug residual => _549;
                                                                        scope 126 {
                                                                        }
                                                                    }
                                                                    scope 127 {
                                                                        debug val => _552;
                                                                        scope 128 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 120 {
                                                                    debug residual => _533;
                                                                    scope 121 {
                                                                    }
                                                                }
                                                                scope 122 {
                                                                    debug val => _536;
                                                                    scope 123 {
                                                                    }
                                                                }
                                                            }
                                                            scope 85 {
                                                                debug residual => _317;
                                                                scope 86 {
                                                                }
                                                            }
                                                            scope 87 {
                                                                debug val => _320;
                                                                scope 88 {
                                                                }
                                                            }
                                                        }
                                                        scope 80 {
                                                            debug residual => _306;
                                                            scope 81 {
                                                            }
                                                        }
                                                        scope 82 {
                                                            debug val => _309;
                                                            scope 83 {
                                                            }
                                                        }
                                                    }
                                                    scope 75 {
                                                        debug residual => _295;
                                                        scope 76 {
                                                        }
                                                    }
                                                    scope 77 {
                                                        debug val => _298;
                                                        scope 78 {
                                                        }
                                                    }
                                                }
                                                scope 70 {
                                                    debug residual => _284;
                                                    scope 71 {
                                                    }
                                                }
                                                scope 72 {
                                                    debug val => _287;
                                                    scope 73 {
                                                    }
                                                }
                                            }
                                            scope 64 {
                                            }
                                            scope 65 {
                                                debug residual => _273;
                                                scope 66 {
                                                }
                                            }
                                            scope 67 {
                                                debug val => _276;
                                                scope 68 {
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug residual => _85;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _88;
                                            scope 38 {
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug residual => _77;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug val => _80;
                                        scope 33 {
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _65;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _68;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _53;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _56;
                                scope 23 {
                                }
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _40;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _43;
                        scope 17 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1749 = const false;
        _1748 = const false;
        _1747 = const false;
        _1746 = const false;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _1701 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _12 = &((*_1701).4: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _1702 = deref_copy (*_12);
        _1861 = (((_1702.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _11 = &(*_1861);
        _10 = constraints::deposit_not_paused(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        _9 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _10) -> [return: bb2, unwind: bb792];
    }

    bb2: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: ());
        _8 = _17;
        StorageDead(_17);
        _1750 = discriminant(_9);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _1703 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _22 = &((*_1703).4: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _1704 = deref_copy (*_22);
        _1862 = (((_1704.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _21 = &(*_1862);
        _20 = constraints::withdraw_not_paused(move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _16) -> [return: bb6, unwind: bb827];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        _1836 = discriminant(_9);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb761;
    }

    bb7: {
        StorageDead(_21);
        _19 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _20) -> [return: bb8, unwind: bb792];
    }

    bb8: {
        StorageDead(_20);
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_27);
        _27 = ((_19 as Continue).0: ());
        _18 = _27;
        StorageDead(_27);
        _1752 = discriminant(_19);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _1705 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _30 = &((*_1705).3: anchor_lang::prelude::Signer<'_>);
        _29 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_26);
        _26 = move _24;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _26) -> [return: bb11, unwind: bb826];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_24);
        _1834 = discriminant(_19);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb761;
    }

    bb12: {
        StorageDead(_30);
        _28 = ((*_29).0: &anchor_lang::prelude::Pubkey);
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        _1706 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _32 = &((*_1706).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _31 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        _1707 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _34 = &((*_1707).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _33 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        StorageLive(_35);
        _1708 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _35 = &((*_1708).4: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb15, unwind continue];
    }

    bb15: {
        _37 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _38) -> [return: bb16, unwind: bb792];
    }

    bb16: {
        StorageDead(_38);
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_43);
        _43 = move ((_37 as Continue).0: anchor_lang::prelude::Clock);
        _36 = move _43;
        StorageDead(_43);
        _1754 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_44);
        _44 = (_36.0: u64);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _1709 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _50 = &((*_1709).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _49 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _50) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_40);
        _40 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _42) -> [return: bb19, unwind: bb825];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_40);
        _1832 = discriminant(_37);
        StorageDead(_37);
        goto -> bb760;
    }

    bb20: {
        StorageDead(_50);
        StorageLive(_51);
        _51 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _48 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _49, move _51) -> [return: bb21, unwind: bb792];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_49);
        _47 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _48) -> [return: bb22, unwind: bb792];
    }

    bb22: {
        StorageDead(_48);
        _52 = discriminant(_47);
        switchInt(move _52) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_56);
        _56 = move ((_47 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _46 = move _56;
        StorageDead(_56);
        _45 = &mut _46;
        _1758 = discriminant(_47);
        StorageDead(_47);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _1710 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _62 = &((*_1710).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _61 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _62) -> [return: bb26, unwind: bb791];
    }

    bb24: {
        StorageLive(_53);
        _53 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb25, unwind: bb824];
    }

    bb25: {
        StorageDead(_55);
        StorageDead(_53);
        _1756 = discriminant(_47);
        StorageDead(_47);
        goto -> bb759;
    }

    bb26: {
        StorageDead(_62);
        StorageLive(_63);
        _63 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _60 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _61, move _63) -> [return: bb27, unwind: bb791];
    }

    bb27: {
        StorageDead(_63);
        StorageDead(_61);
        _59 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _60) -> [return: bb28, unwind: bb791];
    }

    bb28: {
        StorageDead(_60);
        _64 = discriminant(_59);
        switchInt(move _64) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_68);
        _68 = move ((_59 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _58 = move _68;
        StorageDead(_68);
        _57 = &mut _58;
        _1762 = discriminant(_59);
        StorageDead(_59);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _1711 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _74 = &((*_1711).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _73 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _74) -> [return: bb32, unwind: bb790];
    }

    bb30: {
        StorageLive(_65);
        _65 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb31, unwind: bb823];
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_65);
        _1760 = discriminant(_59);
        StorageDead(_59);
        goto -> bb758;
    }

    bb32: {
        StorageDead(_74);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _72 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _73, move _75) -> [return: bb33, unwind: bb790];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_73);
        _71 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _72) -> [return: bb34, unwind: bb790];
    }

    bb34: {
        StorageDead(_72);
        _76 = discriminant(_71);
        switchInt(move _76) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_80);
        _80 = move ((_71 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _70 = move _80;
        StorageDead(_80);
        _69 = &mut _70;
        _1766 = discriminant(_71);
        StorageDead(_71);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb38, unwind: bb789];
    }

    bb36: {
        StorageLive(_77);
        _77 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb37, unwind: bb822];
    }

    bb37: {
        StorageDead(_79);
        StorageDead(_77);
        _1764 = discriminant(_71);
        StorageDead(_71);
        goto -> bb757;
    }

    bb38: {
        _82 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _83) -> [return: bb39, unwind: bb789];
    }

    bb39: {
        StorageDead(_83);
        _84 = discriminant(_82);
        switchInt(move _84) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_88);
        _88 = move ((_82 as Continue).0: anchor_lang::prelude::Clock);
        _81 = move _88;
        StorageDead(_88);
        _1768 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &(*_45);
        _94 = <RefMut<'_, User> as Deref>::deref(move _95) -> [return: bb43, unwind: bb789];
    }

    bb41: {
        StorageLive(_85);
        _85 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_87);
        _87 = move _85;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _87) -> [return: bb42, unwind: bb821];
    }

    bb42: {
        StorageDead(_87);
        StorageDead(_85);
        _1830 = discriminant(_82);
        StorageDead(_82);
        goto -> bb756;
    }

    bb43: {
        _93 = &(*_94);
        StorageDead(_95);
        _92 = User::is_bankrupt(move _93) -> [return: bb44, unwind: bb789];
    }

    bb44: {
        switchInt(move _92) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_94);
        StorageLive(_97);
        _97 = error::ErrorCode::UserBankrupt;
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _1700 = const _;
        _108 = &(*_1700);
        _107 = &(*_108);
        _106 = move _107 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_107);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &_97;
        _115 = &(*_116);
        _114 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _115) -> [return: bb47, unwind: bb789];
    }

    bb46: {
        StorageDead(_93);
        StorageDead(_94);
        StorageLive(_96);
        _96 = ();
        _91 = std::result::Result::<(), error::ErrorCode>::Ok(move _96);
        StorageDead(_96);
        goto -> bb54;
    }

    bb47: {
        StorageDead(_115);
        _113 = [move _114];
        StorageDead(_114);
        _112 = &_113;
        _111 = &(*_112);
        _110 = move _111 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_111);
        _105 = Arguments::<'_>::new_v1(move _106, move _110) -> [return: bb48, unwind: bb789];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_106);
        _104 = format(move _105) -> [return: bb49, unwind: bb789];
    }

    bb49: {
        StorageDead(_105);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_108);
        _103 = move _104;
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        _100 = <String as Deref>::deref(move _101) -> [return: bb50, unwind: bb788];
    }

    bb50: {
        _99 = &(*_100);
        StorageDead(_101);
        _98 = solana_program::log::sol_log(move _99) -> [return: bb51, unwind: bb788];
    }

    bb51: {
        StorageDead(_99);
        drop(_103) -> [return: bb52, unwind: bb789];
    }

    bb52: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = const "to_user bankrupt";
        _118 = &(*_119);
        _117 = solana_program::log::sol_log(move _118) -> [return: bb53, unwind: bb789];
    }

    bb53: {
        StorageDead(_118);
        StorageDead(_119);
        StorageDead(_117);
        StorageLive(_120);
        _120 = _97;
        _91 = std::result::Result::<(), error::ErrorCode>::Err(move _120);
        StorageDead(_120);
        StorageDead(_97);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_92);
        _90 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _91) -> [return: bb55, unwind: bb789];
    }

    bb55: {
        StorageDead(_91);
        _121 = discriminant(_90);
        switchInt(move _121) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_125);
        _125 = ((_90 as Continue).0: ());
        _89 = _125;
        StorageDead(_125);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &(*_57);
        _131 = <RefMut<'_, User> as Deref>::deref(move _132) -> [return: bb59, unwind: bb789];
    }

    bb57: {
        StorageLive(_122);
        _122 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb58, unwind: bb789];
    }

    bb58: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb756;
    }

    bb59: {
        _130 = &(*_131);
        StorageDead(_132);
        _129 = User::is_bankrupt(move _130) -> [return: bb60, unwind: bb789];
    }

    bb60: {
        switchInt(move _129) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_130);
        StorageDead(_131);
        StorageLive(_134);
        _134 = error::ErrorCode::UserBankrupt;
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _1699 = const _;
        _145 = &(*_1699);
        _144 = &(*_145);
        _143 = move _144 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_134;
        _152 = &(*_153);
        _151 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _152) -> [return: bb63, unwind: bb789];
    }

    bb62: {
        StorageDead(_130);
        StorageDead(_131);
        StorageLive(_133);
        _133 = ();
        _128 = std::result::Result::<(), error::ErrorCode>::Ok(move _133);
        StorageDead(_133);
        goto -> bb70;
    }

    bb63: {
        StorageDead(_152);
        _150 = [move _151];
        StorageDead(_151);
        _149 = &_150;
        _148 = &(*_149);
        _147 = move _148 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_148);
        _142 = Arguments::<'_>::new_v1(move _143, move _147) -> [return: bb64, unwind: bb789];
    }

    bb64: {
        StorageDead(_147);
        StorageDead(_143);
        _141 = format(move _142) -> [return: bb65, unwind: bb789];
    }

    bb65: {
        StorageDead(_142);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_145);
        _140 = move _141;
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = <String as Deref>::deref(move _138) -> [return: bb66, unwind: bb787];
    }

    bb66: {
        _136 = &(*_137);
        StorageDead(_138);
        _135 = solana_program::log::sol_log(move _136) -> [return: bb67, unwind: bb787];
    }

    bb67: {
        StorageDead(_136);
        drop(_140) -> [return: bb68, unwind: bb789];
    }

    bb68: {
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = const "from_user bankrupt";
        _155 = &(*_156);
        _154 = solana_program::log::sol_log(move _155) -> [return: bb69, unwind: bb789];
    }

    bb69: {
        StorageDead(_155);
        StorageDead(_156);
        StorageDead(_154);
        StorageLive(_157);
        _157 = _134;
        _128 = std::result::Result::<(), error::ErrorCode>::Err(move _157);
        StorageDead(_157);
        StorageDead(_134);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_129);
        _127 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _128) -> [return: bb71, unwind: bb789];
    }

    bb71: {
        StorageDead(_128);
        _158 = discriminant(_127);
        switchInt(move _158) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_162);
        _162 = ((_127 as Continue).0: ());
        _126 = _162;
        StorageDead(_162);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_33;
        StorageLive(_168);
        _168 = &_31;
        _166 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _167, move _168) -> [return: bb75, unwind: bb789];
    }

    bb73: {
        StorageLive(_159);
        _159 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb74, unwind: bb789];
    }

    bb74: {
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb756;
    }

    bb75: {
        switchInt(move _166) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        StorageDead(_168);
        StorageDead(_167);
        StorageLive(_169);
        _169 = ();
        _165 = std::result::Result::<(), error::ErrorCode>::Ok(move _169);
        StorageDead(_169);
        goto -> bb85;
    }

    bb77: {
        StorageDead(_168);
        StorageDead(_167);
        StorageLive(_170);
        _170 = error::ErrorCode::CantTransferBetweenSameUserAccount;
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _1698 = const _;
        _181 = &(*_1698);
        _180 = &(*_181);
        _179 = move _180 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_180);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &_170;
        _188 = &(*_189);
        _187 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _188) -> [return: bb78, unwind: bb789];
    }

    bb78: {
        StorageDead(_188);
        _186 = [move _187];
        StorageDead(_187);
        _185 = &_186;
        _184 = &(*_185);
        _183 = move _184 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_184);
        _178 = Arguments::<'_>::new_v1(move _179, move _183) -> [return: bb79, unwind: bb789];
    }

    bb79: {
        StorageDead(_183);
        StorageDead(_179);
        _177 = format(move _178) -> [return: bb80, unwind: bb789];
    }

    bb80: {
        StorageDead(_178);
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_181);
        _176 = move _177;
        StorageDead(_177);
        _175 = &_176;
        _174 = &(*_175);
        _173 = <String as Deref>::deref(move _174) -> [return: bb81, unwind: bb786];
    }

    bb81: {
        _172 = &(*_173);
        StorageDead(_174);
        _171 = solana_program::log::sol_log(move _172) -> [return: bb82, unwind: bb786];
    }

    bb82: {
        StorageDead(_172);
        drop(_176) -> [return: bb83, unwind: bb789];
    }

    bb83: {
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_171);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = const "cant transfer between the same user account";
        _191 = &(*_192);
        _190 = solana_program::log::sol_log(move _191) -> [return: bb84, unwind: bb789];
    }

    bb84: {
        StorageDead(_191);
        StorageDead(_192);
        StorageDead(_190);
        StorageLive(_193);
        _193 = _170;
        _165 = std::result::Result::<(), error::ErrorCode>::Err(move _193);
        StorageDead(_193);
        StorageDead(_170);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_166);
        _164 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _165) -> [return: bb86, unwind: bb789];
    }

    bb86: {
        StorageDead(_165);
        _194 = discriminant(_164);
        switchInt(move _194) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_198);
        _198 = ((_164 as Continue).0: ());
        _163 = _198;
        StorageDead(_198);
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_57);
        _204 = <RefMut<'_, User> as Deref>::deref(move _205) -> [return: bb90, unwind: bb789];
    }

    bb88: {
        StorageLive(_195);
        _195 = ((_164 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_197);
        _197 = _195;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _197) -> [return: bb89, unwind: bb789];
    }

    bb89: {
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb756;
    }

    bb90: {
        StorageDead(_205);
        _203 = ((*_204).27: u8);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &(*_45);
        _207 = <RefMut<'_, User> as Deref>::deref(move _208) -> [return: bb91, unwind: bb789];
    }

    bb91: {
        StorageDead(_208);
        _206 = ((*_207).27: u8);
        _202 = Ne(move _203, move _206);
        switchInt(move _202) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_209);
        _209 = ();
        _201 = std::result::Result::<(), error::ErrorCode>::Ok(move _209);
        StorageDead(_209);
        goto -> bb101;
    }

    bb93: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_210);
        _210 = error::ErrorCode::InvalidPoolId;
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _1697 = const _;
        _221 = &(*_1697);
        _220 = &(*_221);
        _219 = move _220 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_220);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_210;
        _228 = &(*_229);
        _227 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _228) -> [return: bb94, unwind: bb789];
    }

    bb94: {
        StorageDead(_228);
        _226 = [move _227];
        StorageDead(_227);
        _225 = &_226;
        _224 = &(*_225);
        _223 = move _224 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_224);
        _218 = Arguments::<'_>::new_v1(move _219, move _223) -> [return: bb95, unwind: bb789];
    }

    bb95: {
        StorageDead(_223);
        StorageDead(_219);
        _217 = format(move _218) -> [return: bb96, unwind: bb789];
    }

    bb96: {
        StorageDead(_218);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_221);
        _216 = move _217;
        StorageDead(_217);
        _215 = &_216;
        _214 = &(*_215);
        _213 = <String as Deref>::deref(move _214) -> [return: bb97, unwind: bb785];
    }

    bb97: {
        _212 = &(*_213);
        StorageDead(_214);
        _211 = solana_program::log::sol_log(move _212) -> [return: bb98, unwind: bb785];
    }

    bb98: {
        StorageDead(_212);
        drop(_216) -> [return: bb99, unwind: bb789];
    }

    bb99: {
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_211);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = const "cant transfer between the same pool";
        _231 = &(*_232);
        _230 = solana_program::log::sol_log(move _231) -> [return: bb100, unwind: bb789];
    }

    bb100: {
        StorageDead(_231);
        StorageDead(_232);
        StorageDead(_230);
        StorageLive(_233);
        _233 = _210;
        _201 = std::result::Result::<(), error::ErrorCode>::Err(move _233);
        StorageDead(_233);
        StorageDead(_210);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_202);
        _200 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _201) -> [return: bb102, unwind: bb789];
    }

    bb102: {
        StorageDead(_201);
        _234 = discriminant(_200);
        switchInt(move _234) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_238);
        _238 = ((_200 as Continue).0: ());
        _199 = _238;
        StorageDead(_238);
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _1712 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _249 = &(*_1712);
        _248 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _249) -> [return: bb106, unwind: bb789];
    }

    bb104: {
        StorageLive(_235);
        _235 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb105, unwind: bb789];
    }

    bb105: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb756;
    }

    bb106: {
        StorageDead(_249);
        _247 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _248) -> [return: bb107, unwind: bb789];
    }

    bb107: {
        StorageDead(_248);
        _246 = &mut _247;
        _245 = &mut (*_246);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = BTreeSet::<u16>::new() -> [return: bb108, unwind: bb789];
    }

    bb108: {
        _251 = &_252;
        _250 = &(*_251);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _259 = SizeOf([u16; 4]);
        _260 = AlignOf([u16; 4]);
        _261 = alloc::alloc::exchange_malloc(move _259, move _260) -> [return: bb109, unwind: bb784];
    }

    bb109: {
        StorageLive(_262);
        _262 = ShallowInitBox(move _261, [u16; 4]);
        StorageLive(_263);
        _263 = _2;
        StorageLive(_264);
        _264 = _3;
        StorageLive(_265);
        _265 = _4;
        StorageLive(_266);
        _266 = _5;
        _1863 = (((_262.0: std::ptr::Unique<[u16; 4]>).0: std::ptr::NonNull<[u16; 4]>).0: *const [u16; 4]);
        _1879 = _1863 as *const () (PtrToPtr);
        _1880 = _1879 as usize (Transmute);
        _1881 = AlignOf([u16; 4]);
        _1882 = Sub(_1881, const 1_usize);
        _1883 = BitAnd(_1880, _1882);
        _1884 = Eq(_1883, const 0_usize);
        assert(_1884, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1881, _1880) -> [success: bb828, unwind unreachable];
    }

    bb110: {
        StorageDead(_257);
        _255 = get_writable_spot_market_set_from_many(move _256) -> [return: bb111, unwind: bb784];
    }

    bb111: {
        StorageDead(_256);
        _254 = &_255;
        _253 = &(*_254);
        StorageLive(_267);
        _267 = (_81.0: u64);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _1713 = deref_copy (*_35);
        _1864 = (((_1713.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _271 = &(*_1864);
        _270 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _271) -> [return: bb112, unwind: bb783];
    }

    bb112: {
        StorageDead(_271);
        _269 = ((*_270).7: state::state::OracleGuardRails);
        _268 = Option::<state::state::OracleGuardRails>::Some(move _269);
        StorageDead(_269);
        _244 = load_maps(move _245, move _250, move _253, move _267, move _268) -> [return: bb113, unwind: bb783];
    }

    bb113: {
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_253);
        StorageDead(_250);
        StorageDead(_245);
        _243 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _244) -> [return: bb114, unwind: bb783];
    }

    bb114: {
        StorageDead(_244);
        _272 = discriminant(_243);
        switchInt(move _272) -> [0: bb115, 1: bb116, otherwise: bb4];
    }

    bb115: {
        StorageLive(_276);
        _276 = move ((_243 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _242 = move _276;
        StorageDead(_276);
        StorageLive(_239);
        _239 = move (_242.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_240);
        _240 = move (_242.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_241);
        _241 = move (_242.2: state::oracle_map::OracleMap<'_>);
        _1772 = discriminant(_243);
        StorageDead(_270);
        drop(_255) -> [return: bb118, unwind: bb779];
    }

    bb116: {
        StorageLive(_273);
        _273 = ((_243 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_275);
        _275 = _273;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _275) -> [return: bb117, unwind: bb820];
    }

    bb117: {
        StorageDead(_275);
        StorageDead(_273);
        _1770 = discriminant(_243);
        StorageDead(_270);
        drop(_255) -> [return: bb754, unwind: bb784];
    }

    bb118: {
        StorageDead(_255);
        StorageDead(_254);
        drop(_252) -> [return: bb119, unwind: bb780];
    }

    bb119: {
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &_240;
        StorageLive(_281);
        StorageLive(_282);
        _282 = &_2;
        _281 = &(*_282);
        _279 = SpotMarketMap::<'_>::get_ref_mut(move _280, move _281) -> [return: bb120, unwind: bb780];
    }

    bb120: {
        StorageDead(_281);
        StorageDead(_280);
        _278 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _279) -> [return: bb121, unwind: bb780];
    }

    bb121: {
        StorageDead(_279);
        _283 = discriminant(_278);
        switchInt(move _283) -> [0: bb122, 1: bb123, otherwise: bb4];
    }

    bb122: {
        StorageLive(_287);
        _287 = move ((_278 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1749 = const true;
        _277 = move _287;
        StorageDead(_287);
        _1776 = discriminant(_278);
        StorageDead(_282);
        StorageDead(_278);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &_240;
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_3;
        _292 = &(*_293);
        _290 = SpotMarketMap::<'_>::get_ref_mut(move _291, move _292) -> [return: bb125, unwind: bb818];
    }

    bb123: {
        StorageLive(_284);
        _284 = ((_278 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_286);
        _286 = _284;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _286) -> [return: bb124, unwind: bb819];
    }

    bb124: {
        StorageDead(_286);
        StorageDead(_284);
        _1774 = discriminant(_278);
        StorageDead(_282);
        StorageDead(_278);
        goto -> bb750;
    }

    bb125: {
        StorageDead(_292);
        StorageDead(_291);
        _289 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _290) -> [return: bb126, unwind: bb818];
    }

    bb126: {
        StorageDead(_290);
        _294 = discriminant(_289);
        switchInt(move _294) -> [0: bb127, 1: bb128, otherwise: bb4];
    }

    bb127: {
        StorageLive(_298);
        _298 = move ((_289 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1748 = const true;
        _288 = move _298;
        StorageDead(_298);
        _1780 = discriminant(_289);
        StorageDead(_293);
        StorageDead(_289);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &_240;
        StorageLive(_303);
        StorageLive(_304);
        _304 = &_4;
        _303 = &(*_304);
        _301 = SpotMarketMap::<'_>::get_ref_mut(move _302, move _303) -> [return: bb130, unwind: bb815];
    }

    bb128: {
        StorageLive(_295);
        _295 = ((_289 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_297);
        _297 = _295;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _297) -> [return: bb129, unwind: bb816];
    }

    bb129: {
        StorageDead(_297);
        StorageDead(_295);
        _1778 = discriminant(_289);
        StorageDead(_293);
        StorageDead(_289);
        goto -> bb749;
    }

    bb130: {
        StorageDead(_303);
        StorageDead(_302);
        _300 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _301) -> [return: bb131, unwind: bb815];
    }

    bb131: {
        StorageDead(_301);
        _305 = discriminant(_300);
        switchInt(move _305) -> [0: bb132, 1: bb133, otherwise: bb4];
    }

    bb132: {
        StorageLive(_309);
        _309 = move ((_300 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1747 = const true;
        _299 = move _309;
        StorageDead(_309);
        _1784 = discriminant(_300);
        StorageDead(_304);
        StorageDead(_300);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &_240;
        StorageLive(_314);
        StorageLive(_315);
        _315 = &_5;
        _314 = &(*_315);
        _312 = SpotMarketMap::<'_>::get_ref_mut(move _313, move _314) -> [return: bb135, unwind: bb812];
    }

    bb133: {
        StorageLive(_306);
        _306 = ((_300 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_308);
        _308 = _306;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _308) -> [return: bb134, unwind: bb813];
    }

    bb134: {
        StorageDead(_308);
        StorageDead(_306);
        _1782 = discriminant(_300);
        StorageDead(_304);
        StorageDead(_300);
        goto -> bb748;
    }

    bb135: {
        StorageDead(_314);
        StorageDead(_313);
        _311 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _312) -> [return: bb136, unwind: bb812];
    }

    bb136: {
        StorageDead(_312);
        _316 = discriminant(_311);
        switchInt(move _316) -> [0: bb137, 1: bb138, otherwise: bb4];
    }

    bb137: {
        StorageLive(_320);
        _320 = move ((_311 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1746 = const true;
        _310 = move _320;
        StorageDead(_320);
        _1788 = discriminant(_311);
        StorageDead(_315);
        StorageDead(_311);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = &_277;
        _326 = <RefMut<'_, SpotMarket> as Deref>::deref(move _327) -> [return: bb140, unwind: bb809];
    }

    bb138: {
        StorageLive(_317);
        _317 = ((_311 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_319);
        _319 = _317;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _319) -> [return: bb139, unwind: bb810];
    }

    bb139: {
        StorageDead(_319);
        StorageDead(_317);
        _1786 = discriminant(_311);
        StorageDead(_315);
        StorageDead(_311);
        goto -> bb747;
    }

    bb140: {
        StorageDead(_327);
        _325 = &((*_326).2: anchor_lang::prelude::Pubkey);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        _330 = &_288;
        _329 = <RefMut<'_, SpotMarket> as Deref>::deref(move _330) -> [return: bb141, unwind: bb809];
    }

    bb141: {
        StorageDead(_330);
        _328 = &((*_329).2: anchor_lang::prelude::Pubkey);
        _324 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _325, move _328) -> [return: bb142, unwind: bb809];
    }

    bb142: {
        switchInt(move _324) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_326);
        StorageDead(_325);
        StorageLive(_331);
        _331 = ();
        _323 = std::result::Result::<(), error::ErrorCode>::Ok(move _331);
        StorageDead(_331);
        goto -> bb152;
    }

    bb144: {
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_326);
        StorageDead(_325);
        StorageLive(_332);
        _332 = error::ErrorCode::InvalidPoolId;
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _1696 = const _;
        _343 = &(*_1696);
        _342 = &(*_343);
        _341 = move _342 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_342);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &_332;
        _350 = &(*_351);
        _349 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _350) -> [return: bb145, unwind: bb809];
    }

    bb145: {
        StorageDead(_350);
        _348 = [move _349];
        StorageDead(_349);
        _347 = &_348;
        _346 = &(*_347);
        _345 = move _346 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_346);
        _340 = Arguments::<'_>::new_v1(move _341, move _345) -> [return: bb146, unwind: bb809];
    }

    bb146: {
        StorageDead(_345);
        StorageDead(_341);
        _339 = format(move _340) -> [return: bb147, unwind: bb809];
    }

    bb147: {
        StorageDead(_340);
        StorageDead(_351);
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_343);
        _338 = move _339;
        StorageDead(_339);
        _337 = &_338;
        _336 = &(*_337);
        _335 = <String as Deref>::deref(move _336) -> [return: bb148, unwind: bb778];
    }

    bb148: {
        _334 = &(*_335);
        StorageDead(_336);
        _333 = solana_program::log::sol_log(move _334) -> [return: bb149, unwind: bb778];
    }

    bb149: {
        StorageDead(_334);
        drop(_338) -> [return: bb150, unwind: bb809];
    }

    bb150: {
        StorageDead(_338);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_333);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = const "deposit from and to spot markets must have the same mint";
        _353 = &(*_354);
        _352 = solana_program::log::sol_log(move _353) -> [return: bb151, unwind: bb809];
    }

    bb151: {
        StorageDead(_353);
        StorageDead(_354);
        StorageDead(_352);
        StorageLive(_355);
        _355 = _332;
        _323 = std::result::Result::<(), error::ErrorCode>::Err(move _355);
        StorageDead(_355);
        StorageDead(_332);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_324);
        _322 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _323) -> [return: bb153, unwind: bb809];
    }

    bb153: {
        StorageDead(_323);
        _356 = discriminant(_322);
        switchInt(move _356) -> [0: bb154, 1: bb155, otherwise: bb4];
    }

    bb154: {
        StorageLive(_360);
        _360 = ((_322 as Continue).0: ());
        _321 = _360;
        StorageDead(_360);
        StorageDead(_322);
        StorageDead(_321);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _367 = &_299;
        _366 = <RefMut<'_, SpotMarket> as Deref>::deref(move _367) -> [return: bb157, unwind: bb809];
    }

    bb155: {
        StorageLive(_357);
        _357 = ((_322 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_359);
        _359 = _357;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _359) -> [return: bb156, unwind: bb809];
    }

    bb156: {
        StorageDead(_359);
        StorageDead(_357);
        StorageDead(_322);
        StorageDead(_321);
        goto -> bb794;
    }

    bb157: {
        StorageDead(_367);
        _365 = &((*_366).2: anchor_lang::prelude::Pubkey);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &_310;
        _369 = <RefMut<'_, SpotMarket> as Deref>::deref(move _370) -> [return: bb158, unwind: bb809];
    }

    bb158: {
        StorageDead(_370);
        _368 = &((*_369).2: anchor_lang::prelude::Pubkey);
        _364 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _365, move _368) -> [return: bb159, unwind: bb809];
    }

    bb159: {
        switchInt(move _364) -> [0: bb161, otherwise: bb160];
    }

    bb160: {
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_366);
        StorageDead(_365);
        StorageLive(_371);
        _371 = ();
        _363 = std::result::Result::<(), error::ErrorCode>::Ok(move _371);
        StorageDead(_371);
        goto -> bb169;
    }

    bb161: {
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_366);
        StorageDead(_365);
        StorageLive(_372);
        _372 = error::ErrorCode::InvalidPoolId;
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _1695 = const _;
        _383 = &(*_1695);
        _382 = &(*_383);
        _381 = move _382 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_382);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &_372;
        _390 = &(*_391);
        _389 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _390) -> [return: bb162, unwind: bb809];
    }

    bb162: {
        StorageDead(_390);
        _388 = [move _389];
        StorageDead(_389);
        _387 = &_388;
        _386 = &(*_387);
        _385 = move _386 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_386);
        _380 = Arguments::<'_>::new_v1(move _381, move _385) -> [return: bb163, unwind: bb809];
    }

    bb163: {
        StorageDead(_385);
        StorageDead(_381);
        _379 = format(move _380) -> [return: bb164, unwind: bb809];
    }

    bb164: {
        StorageDead(_380);
        StorageDead(_391);
        StorageDead(_388);
        StorageDead(_387);
        StorageDead(_383);
        _378 = move _379;
        StorageDead(_379);
        _377 = &_378;
        _376 = &(*_377);
        _375 = <String as Deref>::deref(move _376) -> [return: bb165, unwind: bb777];
    }

    bb165: {
        _374 = &(*_375);
        StorageDead(_376);
        _373 = solana_program::log::sol_log(move _374) -> [return: bb166, unwind: bb777];
    }

    bb166: {
        StorageDead(_374);
        drop(_378) -> [return: bb167, unwind: bb809];
    }

    bb167: {
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_375);
        StorageDead(_373);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        _394 = const "borrow from and to spot markets must have the same mint";
        _393 = &(*_394);
        _392 = solana_program::log::sol_log(move _393) -> [return: bb168, unwind: bb809];
    }

    bb168: {
        StorageDead(_393);
        StorageDead(_394);
        StorageDead(_392);
        StorageLive(_395);
        _395 = _372;
        _363 = std::result::Result::<(), error::ErrorCode>::Err(move _395);
        StorageDead(_395);
        StorageDead(_372);
        goto -> bb169;
    }

    bb169: {
        StorageDead(_364);
        _362 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _363) -> [return: bb170, unwind: bb809];
    }

    bb170: {
        StorageDead(_363);
        _396 = discriminant(_362);
        switchInt(move _396) -> [0: bb171, 1: bb172, otherwise: bb4];
    }

    bb171: {
        StorageLive(_400);
        _400 = ((_362 as Continue).0: ());
        _361 = _400;
        StorageDead(_400);
        StorageDead(_362);
        StorageDead(_361);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = &_277;
        _406 = <RefMut<'_, SpotMarket> as Deref>::deref(move _407) -> [return: bb174, unwind: bb809];
    }

    bb172: {
        StorageLive(_397);
        _397 = ((_362 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_399);
        _399 = _397;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _399) -> [return: bb173, unwind: bb809];
    }

    bb173: {
        StorageDead(_399);
        StorageDead(_397);
        StorageDead(_362);
        StorageDead(_361);
        goto -> bb794;
    }

    bb174: {
        StorageDead(_407);
        _405 = ((*_406).62: u8);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &_299;
        _409 = <RefMut<'_, SpotMarket> as Deref>::deref(move _410) -> [return: bb175, unwind: bb809];
    }

    bb175: {
        StorageDead(_410);
        _408 = ((*_409).62: u8);
        _404 = Eq(move _405, move _408);
        switchInt(move _404) -> [0: bb177, otherwise: bb176];
    }

    bb176: {
        StorageDead(_409);
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_405);
        StorageLive(_411);
        _411 = ();
        _403 = std::result::Result::<(), error::ErrorCode>::Ok(move _411);
        StorageDead(_411);
        goto -> bb185;
    }

    bb177: {
        StorageDead(_409);
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_405);
        StorageLive(_412);
        _412 = error::ErrorCode::InvalidPoolId;
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _1694 = const _;
        _423 = &(*_1694);
        _422 = &(*_423);
        _421 = move _422 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_422);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &_412;
        _430 = &(*_431);
        _429 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _430) -> [return: bb178, unwind: bb809];
    }

    bb178: {
        StorageDead(_430);
        _428 = [move _429];
        StorageDead(_429);
        _427 = &_428;
        _426 = &(*_427);
        _425 = move _426 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_426);
        _420 = Arguments::<'_>::new_v1(move _421, move _425) -> [return: bb179, unwind: bb809];
    }

    bb179: {
        StorageDead(_425);
        StorageDead(_421);
        _419 = format(move _420) -> [return: bb180, unwind: bb809];
    }

    bb180: {
        StorageDead(_420);
        StorageDead(_431);
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_423);
        _418 = move _419;
        StorageDead(_419);
        _417 = &_418;
        _416 = &(*_417);
        _415 = <String as Deref>::deref(move _416) -> [return: bb181, unwind: bb776];
    }

    bb181: {
        _414 = &(*_415);
        StorageDead(_416);
        _413 = solana_program::log::sol_log(move _414) -> [return: bb182, unwind: bb776];
    }

    bb182: {
        StorageDead(_414);
        drop(_418) -> [return: bb183, unwind: bb809];
    }

    bb183: {
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_413);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = const "deposit from and borrow from spot markets must have the same pool id";
        _433 = &(*_434);
        _432 = solana_program::log::sol_log(move _433) -> [return: bb184, unwind: bb809];
    }

    bb184: {
        StorageDead(_433);
        StorageDead(_434);
        StorageDead(_432);
        StorageLive(_435);
        _435 = _412;
        _403 = std::result::Result::<(), error::ErrorCode>::Err(move _435);
        StorageDead(_435);
        StorageDead(_412);
        goto -> bb185;
    }

    bb185: {
        StorageDead(_404);
        _402 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _403) -> [return: bb186, unwind: bb809];
    }

    bb186: {
        StorageDead(_403);
        _436 = discriminant(_402);
        switchInt(move _436) -> [0: bb187, 1: bb188, otherwise: bb4];
    }

    bb187: {
        StorageLive(_440);
        _440 = ((_402 as Continue).0: ());
        _401 = _440;
        StorageDead(_440);
        StorageDead(_402);
        StorageDead(_401);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _447 = &_288;
        _446 = <RefMut<'_, SpotMarket> as Deref>::deref(move _447) -> [return: bb190, unwind: bb809];
    }

    bb188: {
        StorageLive(_437);
        _437 = ((_402 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_439);
        _439 = _437;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _439) -> [return: bb189, unwind: bb809];
    }

    bb189: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_402);
        StorageDead(_401);
        goto -> bb794;
    }

    bb190: {
        StorageDead(_447);
        _445 = ((*_446).62: u8);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        _450 = &_310;
        _449 = <RefMut<'_, SpotMarket> as Deref>::deref(move _450) -> [return: bb191, unwind: bb809];
    }

    bb191: {
        StorageDead(_450);
        _448 = ((*_449).62: u8);
        _444 = Eq(move _445, move _448);
        switchInt(move _444) -> [0: bb193, otherwise: bb192];
    }

    bb192: {
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_445);
        StorageLive(_451);
        _451 = ();
        _443 = std::result::Result::<(), error::ErrorCode>::Ok(move _451);
        StorageDead(_451);
        goto -> bb201;
    }

    bb193: {
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_445);
        StorageLive(_452);
        _452 = error::ErrorCode::InvalidPoolId;
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        _1693 = const _;
        _463 = &(*_1693);
        _462 = &(*_463);
        _461 = move _462 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_462);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = &_452;
        _470 = &(*_471);
        _469 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _470) -> [return: bb194, unwind: bb809];
    }

    bb194: {
        StorageDead(_470);
        _468 = [move _469];
        StorageDead(_469);
        _467 = &_468;
        _466 = &(*_467);
        _465 = move _466 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_466);
        _460 = Arguments::<'_>::new_v1(move _461, move _465) -> [return: bb195, unwind: bb809];
    }

    bb195: {
        StorageDead(_465);
        StorageDead(_461);
        _459 = format(move _460) -> [return: bb196, unwind: bb809];
    }

    bb196: {
        StorageDead(_460);
        StorageDead(_471);
        StorageDead(_468);
        StorageDead(_467);
        StorageDead(_463);
        _458 = move _459;
        StorageDead(_459);
        _457 = &_458;
        _456 = &(*_457);
        _455 = <String as Deref>::deref(move _456) -> [return: bb197, unwind: bb775];
    }

    bb197: {
        _454 = &(*_455);
        StorageDead(_456);
        _453 = solana_program::log::sol_log(move _454) -> [return: bb198, unwind: bb775];
    }

    bb198: {
        StorageDead(_454);
        drop(_458) -> [return: bb199, unwind: bb809];
    }

    bb199: {
        StorageDead(_458);
        StorageDead(_457);
        StorageDead(_455);
        StorageDead(_453);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        _474 = const "deposit to and borrow to spot markets must have the same pool id";
        _473 = &(*_474);
        _472 = solana_program::log::sol_log(move _473) -> [return: bb200, unwind: bb809];
    }

    bb200: {
        StorageDead(_473);
        StorageDead(_474);
        StorageDead(_472);
        StorageLive(_475);
        _475 = _452;
        _443 = std::result::Result::<(), error::ErrorCode>::Err(move _475);
        StorageDead(_475);
        StorageDead(_452);
        goto -> bb201;
    }

    bb201: {
        StorageDead(_444);
        _442 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _443) -> [return: bb202, unwind: bb809];
    }

    bb202: {
        StorageDead(_443);
        _476 = discriminant(_442);
        switchInt(move _476) -> [0: bb203, 1: bb204, otherwise: bb4];
    }

    bb203: {
        StorageLive(_480);
        _480 = ((_442 as Continue).0: ());
        _441 = _480;
        StorageDead(_480);
        StorageDead(_442);
        StorageDead(_441);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        _487 = &_277;
        _486 = <RefMut<'_, SpotMarket> as Deref>::deref(move _487) -> [return: bb206, unwind: bb809];
    }

    bb204: {
        StorageLive(_477);
        _477 = ((_442 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_479);
        _479 = _477;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _479) -> [return: bb205, unwind: bb809];
    }

    bb205: {
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_442);
        StorageDead(_441);
        goto -> bb794;
    }

    bb206: {
        StorageDead(_487);
        _485 = ((*_486).62: u8);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        _490 = &_288;
        _489 = <RefMut<'_, SpotMarket> as Deref>::deref(move _490) -> [return: bb207, unwind: bb809];
    }

    bb207: {
        StorageDead(_490);
        _488 = ((*_489).62: u8);
        _484 = Ne(move _485, move _488);
        switchInt(move _484) -> [0: bb209, otherwise: bb208];
    }

    bb208: {
        StorageDead(_489);
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_485);
        StorageLive(_491);
        _491 = ();
        _483 = std::result::Result::<(), error::ErrorCode>::Ok(move _491);
        StorageDead(_491);
        goto -> bb217;
    }

    bb209: {
        StorageDead(_489);
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_485);
        StorageLive(_492);
        _492 = error::ErrorCode::InvalidPoolId;
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _1692 = const _;
        _503 = &(*_1692);
        _502 = &(*_503);
        _501 = move _502 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_502);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &_492;
        _510 = &(*_511);
        _509 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _510) -> [return: bb210, unwind: bb809];
    }

    bb210: {
        StorageDead(_510);
        _508 = [move _509];
        StorageDead(_509);
        _507 = &_508;
        _506 = &(*_507);
        _505 = move _506 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_506);
        _500 = Arguments::<'_>::new_v1(move _501, move _505) -> [return: bb211, unwind: bb809];
    }

    bb211: {
        StorageDead(_505);
        StorageDead(_501);
        _499 = format(move _500) -> [return: bb212, unwind: bb809];
    }

    bb212: {
        StorageDead(_500);
        StorageDead(_511);
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_503);
        _498 = move _499;
        StorageDead(_499);
        _497 = &_498;
        _496 = &(*_497);
        _495 = <String as Deref>::deref(move _496) -> [return: bb213, unwind: bb774];
    }

    bb213: {
        _494 = &(*_495);
        StorageDead(_496);
        _493 = solana_program::log::sol_log(move _494) -> [return: bb214, unwind: bb774];
    }

    bb214: {
        StorageDead(_494);
        drop(_498) -> [return: bb215, unwind: bb809];
    }

    bb215: {
        StorageDead(_498);
        StorageDead(_497);
        StorageDead(_495);
        StorageDead(_493);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = const "deposit from and to spot markets must have different pool ids";
        _513 = &(*_514);
        _512 = solana_program::log::sol_log(move _513) -> [return: bb216, unwind: bb809];
    }

    bb216: {
        StorageDead(_513);
        StorageDead(_514);
        StorageDead(_512);
        StorageLive(_515);
        _515 = _492;
        _483 = std::result::Result::<(), error::ErrorCode>::Err(move _515);
        StorageDead(_515);
        StorageDead(_492);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_484);
        _482 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _483) -> [return: bb218, unwind: bb809];
    }

    bb218: {
        StorageDead(_483);
        _516 = discriminant(_482);
        switchInt(move _516) -> [0: bb219, 1: bb220, otherwise: bb4];
    }

    bb219: {
        StorageLive(_520);
        _520 = ((_482 as Continue).0: ());
        _481 = _520;
        StorageDead(_520);
        StorageDead(_482);
        StorageDead(_481);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        _525 = &mut _241;
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        _531 = &_277;
        _530 = <RefMut<'_, SpotMarket> as Deref>::deref(move _531) -> [return: bb222, unwind: bb809];
    }

    bb220: {
        StorageLive(_517);
        _517 = ((_482 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_519);
        _519 = _517;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _519) -> [return: bb221, unwind: bb809];
    }

    bb221: {
        StorageDead(_519);
        StorageDead(_517);
        StorageDead(_482);
        StorageDead(_481);
        goto -> bb794;
    }

    bb222: {
        _529 = &(*_530);
        StorageDead(_531);
        _528 = SpotMarket::oracle_id(move _529) -> [return: bb223, unwind: bb809];
    }

    bb223: {
        StorageDead(_529);
        _527 = &_528;
        _526 = &(*_527);
        _524 = OracleMap::<'_>::get_price_data(move _525, move _526) -> [return: bb224, unwind: bb809];
    }

    bb224: {
        StorageDead(_526);
        StorageDead(_525);
        _523 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _524) -> [return: bb225, unwind: bb809];
    }

    bb225: {
        StorageDead(_524);
        _532 = discriminant(_523);
        switchInt(move _532) -> [0: bb226, 1: bb227, otherwise: bb4];
    }

    bb226: {
        StorageLive(_536);
        _536 = ((_523 as Continue).0: &state::oracle::OraclePriceData);
        _522 = _536;
        StorageDead(_536);
        _521 = (*_522);
        StorageDead(_530);
        StorageDead(_528);
        StorageDead(_527);
        StorageDead(_523);
        StorageDead(_522);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = &mut _241;
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        _547 = &_288;
        _546 = <RefMut<'_, SpotMarket> as Deref>::deref(move _547) -> [return: bb229, unwind: bb809];
    }

    bb227: {
        StorageLive(_533);
        _533 = ((_523 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_535);
        _535 = _533;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _535) -> [return: bb228, unwind: bb809];
    }

    bb228: {
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_530);
        StorageDead(_528);
        StorageDead(_527);
        StorageDead(_523);
        StorageDead(_522);
        goto -> bb746;
    }

    bb229: {
        _545 = &(*_546);
        StorageDead(_547);
        _544 = SpotMarket::oracle_id(move _545) -> [return: bb230, unwind: bb809];
    }

    bb230: {
        StorageDead(_545);
        _543 = &_544;
        _542 = &(*_543);
        _540 = OracleMap::<'_>::get_price_data(move _541, move _542) -> [return: bb231, unwind: bb809];
    }

    bb231: {
        StorageDead(_542);
        StorageDead(_541);
        _539 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _540) -> [return: bb232, unwind: bb809];
    }

    bb232: {
        StorageDead(_540);
        _548 = discriminant(_539);
        switchInt(move _548) -> [0: bb233, 1: bb234, otherwise: bb4];
    }

    bb233: {
        StorageLive(_552);
        _552 = ((_539 as Continue).0: &state::oracle::OraclePriceData);
        _538 = _552;
        StorageDead(_552);
        _537 = (*_538);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_543);
        StorageDead(_539);
        StorageDead(_538);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        _557 = &mut _241;
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        _563 = &_299;
        _562 = <RefMut<'_, SpotMarket> as Deref>::deref(move _563) -> [return: bb236, unwind: bb809];
    }

    bb234: {
        StorageLive(_549);
        _549 = ((_539 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_551);
        _551 = _549;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _551) -> [return: bb235, unwind: bb809];
    }

    bb235: {
        StorageDead(_551);
        StorageDead(_549);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_543);
        StorageDead(_539);
        StorageDead(_538);
        goto -> bb745;
    }

    bb236: {
        _561 = &(*_562);
        StorageDead(_563);
        _560 = SpotMarket::oracle_id(move _561) -> [return: bb237, unwind: bb809];
    }

    bb237: {
        StorageDead(_561);
        _559 = &_560;
        _558 = &(*_559);
        _556 = OracleMap::<'_>::get_price_data(move _557, move _558) -> [return: bb238, unwind: bb809];
    }

    bb238: {
        StorageDead(_558);
        StorageDead(_557);
        _555 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _556) -> [return: bb239, unwind: bb809];
    }

    bb239: {
        StorageDead(_556);
        _564 = discriminant(_555);
        switchInt(move _564) -> [0: bb240, 1: bb241, otherwise: bb4];
    }

    bb240: {
        StorageLive(_568);
        _568 = ((_555 as Continue).0: &state::oracle::OraclePriceData);
        _554 = _568;
        StorageDead(_568);
        _553 = (*_554);
        StorageDead(_562);
        StorageDead(_560);
        StorageDead(_559);
        StorageDead(_555);
        StorageDead(_554);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        _573 = &mut _241;
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        _579 = &_310;
        _578 = <RefMut<'_, SpotMarket> as Deref>::deref(move _579) -> [return: bb243, unwind: bb809];
    }

    bb241: {
        StorageLive(_565);
        _565 = ((_555 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_567);
        _567 = _565;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _567) -> [return: bb242, unwind: bb809];
    }

    bb242: {
        StorageDead(_567);
        StorageDead(_565);
        StorageDead(_562);
        StorageDead(_560);
        StorageDead(_559);
        StorageDead(_555);
        StorageDead(_554);
        goto -> bb744;
    }

    bb243: {
        _577 = &(*_578);
        StorageDead(_579);
        _576 = SpotMarket::oracle_id(move _577) -> [return: bb244, unwind: bb809];
    }

    bb244: {
        StorageDead(_577);
        _575 = &_576;
        _574 = &(*_575);
        _572 = OracleMap::<'_>::get_price_data(move _573, move _574) -> [return: bb245, unwind: bb809];
    }

    bb245: {
        StorageDead(_574);
        StorageDead(_573);
        _571 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _572) -> [return: bb246, unwind: bb809];
    }

    bb246: {
        StorageDead(_572);
        _580 = discriminant(_571);
        switchInt(move _580) -> [0: bb247, 1: bb248, otherwise: bb4];
    }

    bb247: {
        StorageLive(_584);
        _584 = ((_571 as Continue).0: &state::oracle::OraclePriceData);
        _570 = _584;
        StorageDead(_584);
        _569 = (*_570);
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_575);
        StorageDead(_571);
        StorageDead(_570);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        _591 = &mut _277;
        _590 = &mut (*_591);
        _589 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _590) -> [return: bb250, unwind: bb809];
    }

    bb248: {
        StorageLive(_581);
        _581 = ((_571 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_583);
        _583 = _581;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _583) -> [return: bb249, unwind: bb809];
    }

    bb249: {
        StorageDead(_583);
        StorageDead(_581);
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_575);
        StorageDead(_571);
        StorageDead(_570);
        goto -> bb743;
    }

    bb250: {
        _588 = &mut (*_589);
        StorageDead(_590);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        _594 = &_521;
        _593 = &(*_594);
        _592 = Option::<&OraclePriceData>::Some(move _593);
        StorageDead(_593);
        StorageLive(_595);
        _595 = (_81.4: i64);
        _587 = controller::spot_balance::update_spot_market_cumulative_interest(move _588, move _592, move _595) -> [return: bb251, unwind: bb809];
    }

    bb251: {
        StorageDead(_595);
        StorageDead(_592);
        StorageDead(_588);
        _586 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _587) -> [return: bb252, unwind: bb809];
    }

    bb252: {
        StorageDead(_587);
        _596 = discriminant(_586);
        switchInt(move _596) -> [0: bb253, 1: bb254, otherwise: bb4];
    }

    bb253: {
        StorageLive(_600);
        _600 = ((_586 as Continue).0: ());
        _585 = _600;
        StorageDead(_600);
        StorageDead(_594);
        StorageDead(_591);
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_585);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        _607 = &mut _288;
        _606 = &mut (*_607);
        _605 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _606) -> [return: bb256, unwind: bb809];
    }

    bb254: {
        StorageLive(_597);
        _597 = ((_586 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_599);
        _599 = _597;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _599) -> [return: bb255, unwind: bb809];
    }

    bb255: {
        StorageDead(_599);
        StorageDead(_597);
        StorageDead(_594);
        StorageDead(_591);
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_585);
        goto -> bb743;
    }

    bb256: {
        _604 = &mut (*_605);
        StorageDead(_606);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        _610 = &_537;
        _609 = &(*_610);
        _608 = Option::<&OraclePriceData>::Some(move _609);
        StorageDead(_609);
        StorageLive(_611);
        _611 = (_81.4: i64);
        _603 = controller::spot_balance::update_spot_market_cumulative_interest(move _604, move _608, move _611) -> [return: bb257, unwind: bb809];
    }

    bb257: {
        StorageDead(_611);
        StorageDead(_608);
        StorageDead(_604);
        _602 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _603) -> [return: bb258, unwind: bb809];
    }

    bb258: {
        StorageDead(_603);
        _612 = discriminant(_602);
        switchInt(move _612) -> [0: bb259, 1: bb260, otherwise: bb4];
    }

    bb259: {
        StorageLive(_616);
        _616 = ((_602 as Continue).0: ());
        _601 = _616;
        StorageDead(_616);
        StorageDead(_610);
        StorageDead(_607);
        StorageDead(_605);
        StorageDead(_602);
        StorageDead(_601);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = &mut _299;
        _622 = &mut (*_623);
        _621 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _622) -> [return: bb262, unwind: bb809];
    }

    bb260: {
        StorageLive(_613);
        _613 = ((_602 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_615);
        _615 = _613;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _615) -> [return: bb261, unwind: bb809];
    }

    bb261: {
        StorageDead(_615);
        StorageDead(_613);
        StorageDead(_610);
        StorageDead(_607);
        StorageDead(_605);
        StorageDead(_602);
        StorageDead(_601);
        goto -> bb743;
    }

    bb262: {
        _620 = &mut (*_621);
        StorageDead(_622);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        _626 = &_553;
        _625 = &(*_626);
        _624 = Option::<&OraclePriceData>::Some(move _625);
        StorageDead(_625);
        StorageLive(_627);
        _627 = (_81.4: i64);
        _619 = controller::spot_balance::update_spot_market_cumulative_interest(move _620, move _624, move _627) -> [return: bb263, unwind: bb809];
    }

    bb263: {
        StorageDead(_627);
        StorageDead(_624);
        StorageDead(_620);
        _618 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _619) -> [return: bb264, unwind: bb809];
    }

    bb264: {
        StorageDead(_619);
        _628 = discriminant(_618);
        switchInt(move _628) -> [0: bb265, 1: bb266, otherwise: bb4];
    }

    bb265: {
        StorageLive(_632);
        _632 = ((_618 as Continue).0: ());
        _617 = _632;
        StorageDead(_632);
        StorageDead(_626);
        StorageDead(_623);
        StorageDead(_621);
        StorageDead(_618);
        StorageDead(_617);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        _639 = &mut _310;
        _638 = &mut (*_639);
        _637 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _638) -> [return: bb268, unwind: bb809];
    }

    bb266: {
        StorageLive(_629);
        _629 = ((_618 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_631);
        _631 = _629;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _631) -> [return: bb267, unwind: bb809];
    }

    bb267: {
        StorageDead(_631);
        StorageDead(_629);
        StorageDead(_626);
        StorageDead(_623);
        StorageDead(_621);
        StorageDead(_618);
        StorageDead(_617);
        goto -> bb743;
    }

    bb268: {
        _636 = &mut (*_637);
        StorageDead(_638);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = &_569;
        _641 = &(*_642);
        _640 = Option::<&OraclePriceData>::Some(move _641);
        StorageDead(_641);
        StorageLive(_643);
        _643 = (_81.4: i64);
        _635 = controller::spot_balance::update_spot_market_cumulative_interest(move _636, move _640, move _643) -> [return: bb269, unwind: bb809];
    }

    bb269: {
        StorageDead(_643);
        StorageDead(_640);
        StorageDead(_636);
        _634 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _635) -> [return: bb270, unwind: bb809];
    }

    bb270: {
        StorageDead(_635);
        _644 = discriminant(_634);
        switchInt(move _644) -> [0: bb271, 1: bb272, otherwise: bb4];
    }

    bb271: {
        StorageLive(_648);
        _648 = ((_634 as Continue).0: ());
        _633 = _648;
        StorageDead(_648);
        StorageDead(_642);
        StorageDead(_639);
        StorageDead(_637);
        StorageDead(_634);
        StorageDead(_633);
        StorageLive(_649);
        _650 = discriminant(_6);
        switchInt(move _650) -> [1: bb275, otherwise: bb274];
    }

    bb272: {
        StorageLive(_645);
        _645 = ((_634 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_647);
        _647 = _645;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _647) -> [return: bb273, unwind: bb809];
    }

    bb273: {
        StorageDead(_647);
        StorageDead(_645);
        StorageDead(_642);
        StorageDead(_639);
        StorageDead(_637);
        StorageDead(_634);
        StorageDead(_633);
        goto -> bb743;
    }

    bb274: {
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        _656 = &mut (*_57);
        _655 = <RefMut<'_, User> as DerefMut>::deref_mut(move _656) -> [return: bb277, unwind: bb809];
    }

    bb275: {
        switchInt(((_6 as Some).0: u64)) -> [0: bb276, otherwise: bb274];
    }

    bb276: {
        _649 = const 0_u64;
        goto -> bb326;
    }

    bb277: {
        _654 = &mut (*_655);
        StorageDead(_656);
        StorageLive(_657);
        _657 = _2;
        _653 = User::force_get_spot_position_mut(move _654, move _657) -> [return: bb278, unwind: bb809];
    }

    bb278: {
        StorageDead(_657);
        StorageDead(_654);
        _652 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _653) -> [return: bb279, unwind: bb809];
    }

    bb279: {
        StorageDead(_653);
        _658 = discriminant(_652);
        switchInt(move _658) -> [0: bb280, 1: bb281, otherwise: bb4];
    }

    bb280: {
        StorageLive(_662);
        _662 = move ((_652 as Continue).0: &mut state::user::SpotPosition);
        _651 = move _662;
        StorageDead(_662);
        StorageDead(_655);
        StorageDead(_652);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        _667 = &((*_651).5: state::spot_market::SpotBalanceType);
        StorageLive(_668);
        _1691 = const _;
        _668 = &(*_1691);
        _666 = <SpotBalanceType as PartialEq>::eq(move _667, move _668) -> [return: bb283, unwind: bb809];
    }

    bb281: {
        StorageLive(_659);
        _659 = ((_652 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_661);
        _661 = _659;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _661) -> [return: bb282, unwind: bb809];
    }

    bb282: {
        StorageDead(_661);
        StorageDead(_659);
        StorageDead(_655);
        StorageDead(_652);
        goto -> bb741;
    }

    bb283: {
        switchInt(move _666) -> [0: bb285, otherwise: bb284];
    }

    bb284: {
        StorageDead(_668);
        StorageDead(_667);
        StorageLive(_670);
        _670 = ();
        _665 = std::result::Result::<(), error::ErrorCode>::Ok(move _670);
        StorageDead(_670);
        goto -> bb293;
    }

    bb285: {
        StorageDead(_668);
        StorageDead(_667);
        StorageLive(_671);
        _671 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        _1690 = const _;
        _682 = &(*_1690);
        _681 = &(*_682);
        _680 = move _681 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_681);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        _690 = &_671;
        _689 = &(*_690);
        _688 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _689) -> [return: bb286, unwind: bb809];
    }

    bb286: {
        StorageDead(_689);
        _687 = [move _688];
        StorageDead(_688);
        _686 = &_687;
        _685 = &(*_686);
        _684 = move _685 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_685);
        _679 = Arguments::<'_>::new_v1(move _680, move _684) -> [return: bb287, unwind: bb809];
    }

    bb287: {
        StorageDead(_684);
        StorageDead(_680);
        _678 = format(move _679) -> [return: bb288, unwind: bb809];
    }

    bb288: {
        StorageDead(_679);
        StorageDead(_690);
        StorageDead(_687);
        StorageDead(_686);
        StorageDead(_682);
        _677 = move _678;
        StorageDead(_678);
        _676 = &_677;
        _675 = &(*_676);
        _674 = <String as Deref>::deref(move _675) -> [return: bb289, unwind: bb773];
    }

    bb289: {
        _673 = &(*_674);
        StorageDead(_675);
        _672 = solana_program::log::sol_log(move _673) -> [return: bb290, unwind: bb773];
    }

    bb290: {
        StorageDead(_673);
        drop(_677) -> [return: bb291, unwind: bb809];
    }

    bb291: {
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_674);
        StorageDead(_672);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        _693 = const "deposit from market must be a deposit spot position";
        _692 = &(*_693);
        _691 = solana_program::log::sol_log(move _692) -> [return: bb292, unwind: bb809];
    }

    bb292: {
        StorageDead(_692);
        StorageDead(_693);
        StorageDead(_691);
        StorageLive(_694);
        _694 = _671;
        _665 = std::result::Result::<(), error::ErrorCode>::Err(move _694);
        StorageDead(_694);
        StorageDead(_671);
        goto -> bb293;
    }

    bb293: {
        StorageDead(_666);
        _664 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _665) -> [return: bb294, unwind: bb809];
    }

    bb294: {
        StorageDead(_665);
        _695 = discriminant(_664);
        switchInt(move _695) -> [0: bb295, 1: bb296, otherwise: bb4];
    }

    bb295: {
        StorageLive(_699);
        _699 = ((_664 as Continue).0: ());
        _663 = _699;
        StorageDead(_699);
        StorageDead(_664);
        StorageDead(_663);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        _706 = &(*_651);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        _710 = &_277;
        _709 = &(*_710);
        _708 = <RefMut<'_, SpotMarket> as Deref>::deref(move _709) -> [return: bb298, unwind: bb809];
    }

    bb296: {
        StorageLive(_696);
        _696 = ((_664 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_698);
        _698 = _696;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _698) -> [return: bb297, unwind: bb809];
    }

    bb297: {
        StorageDead(_698);
        StorageDead(_696);
        StorageDead(_664);
        StorageDead(_663);
        goto -> bb741;
    }

    bb298: {
        _707 = &(*_708);
        StorageDead(_709);
        _705 = SpotPosition::get_token_amount(move _706, move _707) -> [return: bb299, unwind: bb809];
    }

    bb299: {
        StorageDead(_707);
        StorageDead(_706);
        _704 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _705) -> [return: bb300, unwind: bb809];
    }

    bb300: {
        StorageDead(_705);
        _711 = discriminant(_704);
        switchInt(move _711) -> [0: bb301, 1: bb302, otherwise: bb4];
    }

    bb301: {
        StorageLive(_715);
        _715 = ((_704 as Continue).0: u128);
        _703 = _715;
        StorageDead(_715);
        _702 = <u128 as Cast>::cast::<u64>(move _703) -> [return: bb304, unwind: bb809];
    }

    bb302: {
        StorageLive(_712);
        _712 = ((_704 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_714);
        _714 = _712;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _714) -> [return: bb303, unwind: bb809];
    }

    bb303: {
        StorageDead(_714);
        StorageDead(_712);
        StorageDead(_703);
        StorageDead(_702);
        goto -> bb739;
    }

    bb304: {
        StorageDead(_703);
        _701 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _702) -> [return: bb305, unwind: bb809];
    }

    bb305: {
        StorageDead(_702);
        _716 = discriminant(_701);
        switchInt(move _716) -> [0: bb306, 1: bb307, otherwise: bb4];
    }

    bb306: {
        StorageLive(_720);
        _720 = ((_701 as Continue).0: u64);
        _700 = _720;
        StorageDead(_720);
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_704);
        StorageDead(_701);
        StorageLive(_721);
        _722 = discriminant(_6);
        switchInt(move _722) -> [0: bb309, 1: bb310, otherwise: bb4];
    }

    bb307: {
        StorageLive(_717);
        _717 = ((_701 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_719);
        _719 = _717;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _719) -> [return: bb308, unwind: bb809];
    }

    bb308: {
        StorageDead(_719);
        StorageDead(_717);
        goto -> bb739;
    }

    bb309: {
        _721 = _700;
        goto -> bb311;
    }

    bb310: {
        StorageLive(_723);
        _723 = ((_6 as Some).0: u64);
        _721 = _723;
        StorageDead(_723);
        goto -> bb311;
    }

    bb311: {
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        _728 = _721;
        StorageLive(_729);
        _729 = _700;
        _727 = Le(move _728, move _729);
        switchInt(move _727) -> [0: bb313, otherwise: bb312];
    }

    bb312: {
        StorageDead(_729);
        StorageDead(_728);
        StorageLive(_730);
        _730 = ();
        _726 = std::result::Result::<(), error::ErrorCode>::Ok(move _730);
        StorageDead(_730);
        goto -> bb321;
    }

    bb313: {
        StorageDead(_729);
        StorageDead(_728);
        StorageLive(_731);
        _731 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        _1689 = const _;
        _742 = &(*_1689);
        _741 = &(*_742);
        _740 = move _741 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_741);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        _750 = &_731;
        _749 = &(*_750);
        _748 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _749) -> [return: bb314, unwind: bb809];
    }

    bb314: {
        StorageDead(_749);
        _747 = [move _748];
        StorageDead(_748);
        _746 = &_747;
        _745 = &(*_746);
        _744 = move _745 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_745);
        _739 = Arguments::<'_>::new_v1(move _740, move _744) -> [return: bb315, unwind: bb809];
    }

    bb315: {
        StorageDead(_744);
        StorageDead(_740);
        _738 = format(move _739) -> [return: bb316, unwind: bb809];
    }

    bb316: {
        StorageDead(_739);
        StorageDead(_750);
        StorageDead(_747);
        StorageDead(_746);
        StorageDead(_742);
        _737 = move _738;
        StorageDead(_738);
        _736 = &_737;
        _735 = &(*_736);
        _734 = <String as Deref>::deref(move _735) -> [return: bb317, unwind: bb772];
    }

    bb317: {
        _733 = &(*_734);
        StorageDead(_735);
        _732 = solana_program::log::sol_log(move _733) -> [return: bb318, unwind: bb772];
    }

    bb318: {
        StorageDead(_733);
        drop(_737) -> [return: bb319, unwind: bb809];
    }

    bb319: {
        StorageDead(_737);
        StorageDead(_736);
        StorageDead(_734);
        StorageDead(_732);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        _753 = const "deposit amount is greater than the spot position token amount";
        _752 = &(*_753);
        _751 = solana_program::log::sol_log(move _752) -> [return: bb320, unwind: bb809];
    }

    bb320: {
        StorageDead(_752);
        StorageDead(_753);
        StorageDead(_751);
        StorageLive(_754);
        _754 = _731;
        _726 = std::result::Result::<(), error::ErrorCode>::Err(move _754);
        StorageDead(_754);
        StorageDead(_731);
        goto -> bb321;
    }

    bb321: {
        StorageDead(_727);
        _725 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _726) -> [return: bb322, unwind: bb809];
    }

    bb322: {
        StorageDead(_726);
        _755 = discriminant(_725);
        switchInt(move _755) -> [0: bb323, 1: bb324, otherwise: bb4];
    }

    bb323: {
        StorageLive(_759);
        _759 = ((_725 as Continue).0: ());
        _724 = _759;
        StorageDead(_759);
        StorageDead(_725);
        StorageDead(_724);
        _649 = _721;
        StorageDead(_721);
        StorageDead(_700);
        StorageDead(_651);
        goto -> bb326;
    }

    bb324: {
        StorageLive(_756);
        _756 = ((_725 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_758);
        _758 = _756;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _758) -> [return: bb325, unwind: bb809];
    }

    bb325: {
        StorageDead(_758);
        StorageDead(_756);
        StorageDead(_725);
        StorageDead(_724);
        StorageDead(_721);
        goto -> bb740;
    }

    bb326: {
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        _762 = _649;
        _761 = Gt(move _762, const 0_u64);
        switchInt(move _761) -> [0: bb398, otherwise: bb327];
    }

    bb327: {
        StorageDead(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        _768 = &mut (*_57);
        _767 = <RefMut<'_, User> as DerefMut>::deref_mut(move _768) -> [return: bb328, unwind: bb809];
    }

    bb328: {
        _766 = &mut (*_767);
        StorageDead(_768);
        StorageLive(_769);
        _769 = _649;
        StorageLive(_770);
        _770 = (_521.0: i64);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        _777 = &_277;
        _776 = <RefMut<'_, SpotMarket> as Deref>::deref(move _777) -> [return: bb329, unwind: bb809];
    }

    bb329: {
        _775 = (*_776);
        StorageDead(_777);
        _774 = SpotMarket::get_precision(move _775) -> [return: bb330, unwind: bb809];
    }

    bb330: {
        StorageDead(_775);
        _773 = <u64 as Cast>::cast::<u128>(move _774) -> [return: bb331, unwind: bb809];
    }

    bb331: {
        StorageDead(_774);
        _772 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _773) -> [return: bb332, unwind: bb809];
    }

    bb332: {
        StorageDead(_773);
        _778 = discriminant(_772);
        switchInt(move _778) -> [0: bb333, 1: bb334, otherwise: bb4];
    }

    bb333: {
        StorageLive(_782);
        _782 = ((_772 as Continue).0: u128);
        _771 = _782;
        StorageDead(_782);
        _765 = User::increment_total_withdraws(move _766, move _769, move _770, move _771) -> [return: bb336, unwind: bb809];
    }

    bb334: {
        StorageLive(_779);
        _779 = ((_772 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_781);
        _781 = _779;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _781) -> [return: bb335, unwind: bb809];
    }

    bb335: {
        StorageDead(_781);
        StorageDead(_779);
        StorageDead(_771);
        StorageDead(_770);
        StorageDead(_769);
        StorageDead(_766);
        StorageDead(_765);
        goto -> bb737;
    }

    bb336: {
        StorageDead(_771);
        StorageDead(_770);
        StorageDead(_769);
        StorageDead(_766);
        _764 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _765) -> [return: bb337, unwind: bb809];
    }

    bb337: {
        StorageDead(_765);
        _783 = discriminant(_764);
        switchInt(move _783) -> [0: bb338, 1: bb339, otherwise: bb4];
    }

    bb338: {
        StorageLive(_787);
        _787 = ((_764 as Continue).0: ());
        _763 = _787;
        StorageDead(_787);
        StorageDead(_776);
        StorageDead(_772);
        StorageDead(_767);
        StorageDead(_764);
        StorageDead(_763);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        _792 = _649;
        _791 = move _792 as u128 (IntToInt);
        StorageDead(_792);
        StorageLive(_793);
        StorageLive(_794);
        _1688 = const _;
        _794 = &(*_1688);
        _793 = &(*_794);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _799 = &mut _277;
        _798 = &mut (*_799);
        _797 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _798) -> [return: bb341, unwind: bb809];
    }

    bb339: {
        StorageLive(_784);
        _784 = ((_764 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_786);
        _786 = _784;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _786) -> [return: bb340, unwind: bb809];
    }

    bb340: {
        StorageDead(_786);
        StorageDead(_784);
        goto -> bb737;
    }

    bb341: {
        _796 = &mut (*_797);
        StorageDead(_798);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        _802 = &mut (*_57);
        _801 = <RefMut<'_, User> as DerefMut>::deref_mut(move _802) -> [return: bb342, unwind: bb809];
    }

    bb342: {
        _800 = &mut (*_801);
        StorageDead(_802);
        _790 = update_spot_balances_and_cumulative_deposits_with_limits(move _791, move _793, move _796, move _800) -> [return: bb343, unwind: bb809];
    }

    bb343: {
        StorageDead(_800);
        StorageDead(_796);
        StorageDead(_793);
        StorageDead(_791);
        _789 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _790) -> [return: bb344, unwind: bb809];
    }

    bb344: {
        StorageDead(_790);
        _803 = discriminant(_789);
        switchInt(move _803) -> [0: bb345, 1: bb346, otherwise: bb4];
    }

    bb345: {
        StorageLive(_807);
        _807 = ((_789 as Continue).0: ());
        _788 = _807;
        StorageDead(_807);
        StorageDead(_801);
        StorageDead(_799);
        StorageDead(_797);
        StorageDead(_794);
        StorageDead(_789);
        StorageDead(_788);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        _811 = &_277;
        _810 = <RefMut<'_, SpotMarket> as Deref>::deref(move _811) -> [return: bb348, unwind: bb809];
    }

    bb346: {
        StorageLive(_804);
        _804 = ((_789 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_806);
        _806 = _804;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _806) -> [return: bb347, unwind: bb809];
    }

    bb347: {
        StorageDead(_806);
        StorageDead(_804);
        StorageDead(_801);
        StorageDead(_799);
        StorageDead(_797);
        StorageDead(_794);
        StorageDead(_789);
        StorageDead(_788);
        goto -> bb738;
    }

    bb348: {
        StorageDead(_811);
        _809 = ((*_810).30: u64);
        StorageDead(_810);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        _815 = _809;
        _814 = core::num::<impl u64>::checked_add(move _815, const 1_u64) -> [return: bb349, unwind: bb809];
    }

    bb349: {
        StorageDead(_815);
        StorageLive(_816);
        _816 = Option::<u64>::Some(const 1_u64);
        _813 = Option::<u64>::or(move _814, move _816) -> [return: bb350, unwind: bb809];
    }

    bb350: {
        StorageDead(_816);
        StorageDead(_814);
        _812 = Option::<u64>::unwrap(move _813) -> [return: bb351, unwind: bb809];
    }

    bb351: {
        StorageDead(_813);
        StorageLive(_817);
        StorageLive(_818);
        _818 = &mut _277;
        _817 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _818) -> [return: bb352, unwind: bb809];
    }

    bb352: {
        StorageDead(_818);
        ((*_817).30: u64) = move _812;
        StorageDead(_812);
        StorageDead(_817);
        _808 = _809;
        StorageDead(_809);
        StorageLive(_819);
        StorageLive(_820);
        _820 = (_81.4: i64);
        StorageLive(_821);
        _821 = _808;
        StorageLive(_822);
        _822 = (*_28);
        StorageLive(_823);
        _823 = _33;
        StorageLive(_824);
        _824 = DepositDirection::Withdraw;
        StorageLive(_825);
        _825 = _649;
        StorageLive(_826);
        _826 = (_521.0: i64);
        StorageLive(_827);
        _827 = _2;
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        _830 = &_277;
        _829 = <RefMut<'_, SpotMarket> as Deref>::deref(move _830) -> [return: bb353, unwind: bb809];
    }

    bb353: {
        StorageDead(_830);
        _828 = ((*_829).11: u128);
        StorageLive(_831);
        StorageLive(_832);
        StorageLive(_833);
        _833 = &_277;
        _832 = <RefMut<'_, SpotMarket> as Deref>::deref(move _833) -> [return: bb354, unwind: bb809];
    }

    bb354: {
        StorageDead(_833);
        _831 = ((*_832).12: u128);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        _836 = &_277;
        _835 = <RefMut<'_, SpotMarket> as Deref>::deref(move _836) -> [return: bb355, unwind: bb809];
    }

    bb355: {
        StorageDead(_836);
        _834 = ((*_835).13: u128);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        _839 = &_277;
        _838 = <RefMut<'_, SpotMarket> as Deref>::deref(move _839) -> [return: bb356, unwind: bb809];
    }

    bb356: {
        StorageDead(_839);
        _837 = ((*_838).14: u128);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        _842 = &(*_57);
        _841 = <RefMut<'_, User> as Deref>::deref(move _842) -> [return: bb357, unwind: bb809];
    }

    bb357: {
        StorageDead(_842);
        _840 = ((*_841).7: u64);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        _845 = &(*_57);
        _844 = <RefMut<'_, User> as Deref>::deref(move _845) -> [return: bb358, unwind: bb809];
    }

    bb358: {
        StorageDead(_845);
        _843 = ((*_844).8: u64);
        StorageLive(_846);
        _846 = DepositExplanation::Transfer;
        StorageLive(_847);
        StorageLive(_848);
        _848 = _31;
        _847 = Option::<anchor_lang::prelude::Pubkey>::Some(move _848);
        StorageDead(_848);
        _819 = DepositRecord { ts: move _820, user_authority: move _822, user: move _823, direction: move _824, deposit_record_id: move _821, amount: move _825, market_index: move _827, oracle_price: move _826, market_deposit_balance: move _828, market_withdraw_balance: move _831, market_cumulative_deposit_interest: move _834, market_cumulative_borrow_interest: move _837, total_deposits_after: move _840, total_withdraws_after: move _843, explanation: move _846, transfer_user: move _847 };
        StorageDead(_847);
        StorageDead(_846);
        StorageDead(_843);
        StorageDead(_840);
        StorageDead(_837);
        StorageDead(_834);
        StorageDead(_831);
        StorageDead(_828);
        StorageDead(_827);
        StorageDead(_826);
        StorageDead(_825);
        StorageDead(_824);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_821);
        StorageDead(_820);
        StorageDead(_844);
        StorageDead(_841);
        StorageDead(_838);
        StorageDead(_835);
        StorageDead(_832);
        StorageDead(_829);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        _861 = &_819;
        _860 = &(*_861);
        _859 = <DepositRecord as anchor_lang::Event>::data(move _860) -> [return: bb359, unwind: bb809];
    }

    bb359: {
        StorageDead(_860);
        _858 = &_859;
        _857 = &(*_858);
        _856 = <Vec<u8> as Deref>::deref(move _857) -> [return: bb360, unwind: bb771];
    }

    bb360: {
        _855 = &(*_856);
        StorageDead(_857);
        _854 = [move _855];
        StorageDead(_855);
        _853 = &_854;
        _852 = &(*_853);
        _851 = move _852 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_852);
        _850 = solana_program::log::sol_log_data(move _851) -> [return: bb361, unwind: bb771];
    }

    bb361: {
        StorageDead(_851);
        drop(_859) -> [return: bb362, unwind: bb809];
    }

    bb362: {
        StorageDead(_861);
        StorageDead(_859);
        StorageDead(_858);
        StorageDead(_856);
        StorageDead(_854);
        StorageDead(_853);
        StorageDead(_850);
        _849 = const ();
        StorageDead(_849);
        StorageLive(_862);
        StorageLive(_863);
        StorageLive(_864);
        StorageLive(_865);
        StorageLive(_866);
        StorageLive(_867);
        _867 = &mut (*_45);
        _866 = <RefMut<'_, User> as DerefMut>::deref_mut(move _867) -> [return: bb363, unwind: bb809];
    }

    bb363: {
        _865 = &mut (*_866);
        StorageDead(_867);
        StorageLive(_868);
        _868 = _649;
        StorageLive(_869);
        _869 = (_537.0: i64);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        _876 = &_288;
        _875 = <RefMut<'_, SpotMarket> as Deref>::deref(move _876) -> [return: bb364, unwind: bb809];
    }

    bb364: {
        _874 = (*_875);
        StorageDead(_876);
        _873 = SpotMarket::get_precision(move _874) -> [return: bb365, unwind: bb809];
    }

    bb365: {
        StorageDead(_874);
        _872 = <u64 as Cast>::cast::<u128>(move _873) -> [return: bb366, unwind: bb809];
    }

    bb366: {
        StorageDead(_873);
        _871 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _872) -> [return: bb367, unwind: bb809];
    }

    bb367: {
        StorageDead(_872);
        _877 = discriminant(_871);
        switchInt(move _877) -> [0: bb368, 1: bb369, otherwise: bb4];
    }

    bb368: {
        StorageLive(_881);
        _881 = ((_871 as Continue).0: u128);
        _870 = _881;
        StorageDead(_881);
        _864 = User::increment_total_deposits(move _865, move _868, move _869, move _870) -> [return: bb371, unwind: bb809];
    }

    bb369: {
        StorageLive(_878);
        _878 = ((_871 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_880);
        _880 = _878;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _880) -> [return: bb370, unwind: bb809];
    }

    bb370: {
        StorageDead(_880);
        StorageDead(_878);
        StorageDead(_870);
        StorageDead(_869);
        StorageDead(_868);
        StorageDead(_865);
        StorageDead(_864);
        goto -> bb735;
    }

    bb371: {
        StorageDead(_870);
        StorageDead(_869);
        StorageDead(_868);
        StorageDead(_865);
        _863 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _864) -> [return: bb372, unwind: bb809];
    }

    bb372: {
        StorageDead(_864);
        _882 = discriminant(_863);
        switchInt(move _882) -> [0: bb373, 1: bb374, otherwise: bb4];
    }

    bb373: {
        StorageLive(_886);
        _886 = ((_863 as Continue).0: ());
        _862 = _886;
        StorageDead(_886);
        StorageDead(_875);
        StorageDead(_871);
        StorageDead(_866);
        StorageDead(_863);
        StorageDead(_862);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        StorageLive(_891);
        _891 = _649;
        _890 = move _891 as u128 (IntToInt);
        StorageDead(_891);
        StorageLive(_892);
        StorageLive(_893);
        _1687 = const _;
        _893 = &(*_1687);
        _892 = &(*_893);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        _898 = &mut _288;
        _897 = &mut (*_898);
        _896 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _897) -> [return: bb376, unwind: bb809];
    }

    bb374: {
        StorageLive(_883);
        _883 = ((_863 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_885);
        _885 = _883;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _885) -> [return: bb375, unwind: bb809];
    }

    bb375: {
        StorageDead(_885);
        StorageDead(_883);
        goto -> bb735;
    }

    bb376: {
        _895 = &mut (*_896);
        StorageDead(_897);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        _901 = &mut (*_45);
        _900 = <RefMut<'_, User> as DerefMut>::deref_mut(move _901) -> [return: bb377, unwind: bb809];
    }

    bb377: {
        _899 = &mut (*_900);
        StorageDead(_901);
        _889 = update_spot_balances_and_cumulative_deposits_with_limits(move _890, move _892, move _895, move _899) -> [return: bb378, unwind: bb809];
    }

    bb378: {
        StorageDead(_899);
        StorageDead(_895);
        StorageDead(_892);
        StorageDead(_890);
        _888 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _889) -> [return: bb379, unwind: bb809];
    }

    bb379: {
        StorageDead(_889);
        _902 = discriminant(_888);
        switchInt(move _902) -> [0: bb380, 1: bb381, otherwise: bb4];
    }

    bb380: {
        StorageLive(_906);
        _906 = ((_888 as Continue).0: ());
        _887 = _906;
        StorageDead(_906);
        StorageDead(_900);
        StorageDead(_898);
        StorageDead(_896);
        StorageDead(_893);
        StorageDead(_888);
        StorageDead(_887);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        _910 = &_288;
        _909 = <RefMut<'_, SpotMarket> as Deref>::deref(move _910) -> [return: bb383, unwind: bb809];
    }

    bb381: {
        StorageLive(_903);
        _903 = ((_888 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_905);
        _905 = _903;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _905) -> [return: bb382, unwind: bb809];
    }

    bb382: {
        StorageDead(_905);
        StorageDead(_903);
        StorageDead(_900);
        StorageDead(_898);
        StorageDead(_896);
        StorageDead(_893);
        StorageDead(_888);
        StorageDead(_887);
        goto -> bb736;
    }

    bb383: {
        StorageDead(_910);
        _908 = ((*_909).30: u64);
        StorageDead(_909);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        _914 = _908;
        _913 = core::num::<impl u64>::checked_add(move _914, const 1_u64) -> [return: bb384, unwind: bb809];
    }

    bb384: {
        StorageDead(_914);
        StorageLive(_915);
        _915 = Option::<u64>::Some(const 1_u64);
        _912 = Option::<u64>::or(move _913, move _915) -> [return: bb385, unwind: bb809];
    }

    bb385: {
        StorageDead(_915);
        StorageDead(_913);
        _911 = Option::<u64>::unwrap(move _912) -> [return: bb386, unwind: bb809];
    }

    bb386: {
        StorageDead(_912);
        StorageLive(_916);
        StorageLive(_917);
        _917 = &mut _288;
        _916 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _917) -> [return: bb387, unwind: bb809];
    }

    bb387: {
        StorageDead(_917);
        ((*_916).30: u64) = move _911;
        StorageDead(_911);
        StorageDead(_916);
        _907 = _908;
        StorageDead(_908);
        StorageLive(_918);
        StorageLive(_919);
        _919 = (_81.4: i64);
        StorageLive(_920);
        _920 = _907;
        StorageLive(_921);
        _921 = (*_28);
        StorageLive(_922);
        _922 = _31;
        StorageLive(_923);
        _923 = DepositDirection::Deposit;
        StorageLive(_924);
        _924 = _649;
        StorageLive(_925);
        _925 = (_537.0: i64);
        StorageLive(_926);
        _926 = _3;
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        _929 = &_288;
        _928 = <RefMut<'_, SpotMarket> as Deref>::deref(move _929) -> [return: bb388, unwind: bb809];
    }

    bb388: {
        StorageDead(_929);
        _927 = ((*_928).11: u128);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        _932 = &_288;
        _931 = <RefMut<'_, SpotMarket> as Deref>::deref(move _932) -> [return: bb389, unwind: bb809];
    }

    bb389: {
        StorageDead(_932);
        _930 = ((*_931).12: u128);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        _935 = &_288;
        _934 = <RefMut<'_, SpotMarket> as Deref>::deref(move _935) -> [return: bb390, unwind: bb809];
    }

    bb390: {
        StorageDead(_935);
        _933 = ((*_934).13: u128);
        StorageLive(_936);
        StorageLive(_937);
        StorageLive(_938);
        _938 = &_288;
        _937 = <RefMut<'_, SpotMarket> as Deref>::deref(move _938) -> [return: bb391, unwind: bb809];
    }

    bb391: {
        StorageDead(_938);
        _936 = ((*_937).14: u128);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        _941 = &(*_45);
        _940 = <RefMut<'_, User> as Deref>::deref(move _941) -> [return: bb392, unwind: bb809];
    }

    bb392: {
        StorageDead(_941);
        _939 = ((*_940).7: u64);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        _944 = &(*_45);
        _943 = <RefMut<'_, User> as Deref>::deref(move _944) -> [return: bb393, unwind: bb809];
    }

    bb393: {
        StorageDead(_944);
        _942 = ((*_943).8: u64);
        StorageLive(_945);
        _945 = DepositExplanation::Transfer;
        StorageLive(_946);
        StorageLive(_947);
        _947 = _33;
        _946 = Option::<anchor_lang::prelude::Pubkey>::Some(move _947);
        StorageDead(_947);
        _918 = DepositRecord { ts: move _919, user_authority: move _921, user: move _922, direction: move _923, deposit_record_id: move _920, amount: move _924, market_index: move _926, oracle_price: move _925, market_deposit_balance: move _927, market_withdraw_balance: move _930, market_cumulative_deposit_interest: move _933, market_cumulative_borrow_interest: move _936, total_deposits_after: move _939, total_withdraws_after: move _942, explanation: move _945, transfer_user: move _946 };
        StorageDead(_946);
        StorageDead(_945);
        StorageDead(_942);
        StorageDead(_939);
        StorageDead(_936);
        StorageDead(_933);
        StorageDead(_930);
        StorageDead(_927);
        StorageDead(_926);
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_923);
        StorageDead(_922);
        StorageDead(_921);
        StorageDead(_920);
        StorageDead(_919);
        StorageDead(_943);
        StorageDead(_940);
        StorageDead(_937);
        StorageDead(_934);
        StorageDead(_931);
        StorageDead(_928);
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        StorageLive(_958);
        StorageLive(_959);
        StorageLive(_960);
        _960 = &_918;
        _959 = &(*_960);
        _958 = <DepositRecord as anchor_lang::Event>::data(move _959) -> [return: bb394, unwind: bb809];
    }

    bb394: {
        StorageDead(_959);
        _957 = &_958;
        _956 = &(*_957);
        _955 = <Vec<u8> as Deref>::deref(move _956) -> [return: bb395, unwind: bb770];
    }

    bb395: {
        _954 = &(*_955);
        StorageDead(_956);
        _953 = [move _954];
        StorageDead(_954);
        _952 = &_953;
        _951 = &(*_952);
        _950 = move _951 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_951);
        _949 = solana_program::log::sol_log_data(move _950) -> [return: bb396, unwind: bb770];
    }

    bb396: {
        StorageDead(_950);
        drop(_958) -> [return: bb397, unwind: bb809];
    }

    bb397: {
        StorageDead(_960);
        StorageDead(_958);
        StorageDead(_957);
        StorageDead(_955);
        StorageDead(_953);
        StorageDead(_952);
        StorageDead(_949);
        _948 = const ();
        StorageDead(_948);
        _760 = const ();
        StorageDead(_918);
        StorageDead(_907);
        StorageDead(_819);
        StorageDead(_808);
        goto -> bb399;
    }

    bb398: {
        StorageDead(_762);
        _760 = const ();
        goto -> bb399;
    }

    bb399: {
        StorageDead(_761);
        StorageDead(_760);
        StorageLive(_961);
        _962 = discriminant(_7);
        switchInt(move _962) -> [1: bb400, otherwise: bb402];
    }

    bb400: {
        switchInt(((_7 as Some).0: u64)) -> [0: bb401, otherwise: bb402];
    }

    bb401: {
        _961 = const 0_u64;
        goto -> bb452;
    }

    bb402: {
        StorageLive(_963);
        StorageLive(_964);
        StorageLive(_965);
        StorageLive(_966);
        StorageLive(_967);
        StorageLive(_968);
        _968 = &mut (*_57);
        _967 = <RefMut<'_, User> as DerefMut>::deref_mut(move _968) -> [return: bb403, unwind: bb809];
    }

    bb403: {
        _966 = &mut (*_967);
        StorageDead(_968);
        StorageLive(_969);
        _969 = _4;
        _965 = User::force_get_spot_position_mut(move _966, move _969) -> [return: bb404, unwind: bb809];
    }

    bb404: {
        StorageDead(_969);
        StorageDead(_966);
        _964 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _965) -> [return: bb405, unwind: bb809];
    }

    bb405: {
        StorageDead(_965);
        _970 = discriminant(_964);
        switchInt(move _970) -> [0: bb406, 1: bb407, otherwise: bb4];
    }

    bb406: {
        StorageLive(_974);
        _974 = move ((_964 as Continue).0: &mut state::user::SpotPosition);
        _963 = move _974;
        StorageDead(_974);
        StorageDead(_967);
        StorageDead(_964);
        StorageLive(_975);
        StorageLive(_976);
        StorageLive(_977);
        StorageLive(_978);
        StorageLive(_979);
        _979 = &((*_963).5: state::spot_market::SpotBalanceType);
        StorageLive(_980);
        _1686 = const _;
        _980 = &(*_1686);
        _978 = <SpotBalanceType as PartialEq>::eq(move _979, move _980) -> [return: bb409, unwind: bb809];
    }

    bb407: {
        StorageLive(_971);
        _971 = ((_964 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_973);
        _973 = _971;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _973) -> [return: bb408, unwind: bb809];
    }

    bb408: {
        StorageDead(_973);
        StorageDead(_971);
        StorageDead(_967);
        StorageDead(_964);
        goto -> bb733;
    }

    bb409: {
        switchInt(move _978) -> [0: bb411, otherwise: bb410];
    }

    bb410: {
        StorageDead(_980);
        StorageDead(_979);
        StorageLive(_982);
        _982 = ();
        _977 = std::result::Result::<(), error::ErrorCode>::Ok(move _982);
        StorageDead(_982);
        goto -> bb419;
    }

    bb411: {
        StorageDead(_980);
        StorageDead(_979);
        StorageLive(_983);
        _983 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        StorageLive(_994);
        _1685 = const _;
        _994 = &(*_1685);
        _993 = &(*_994);
        _992 = move _993 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_993);
        StorageLive(_996);
        StorageLive(_997);
        StorageLive(_998);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        _1002 = &_983;
        _1001 = &(*_1002);
        _1000 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1001) -> [return: bb412, unwind: bb809];
    }

    bb412: {
        StorageDead(_1001);
        _999 = [move _1000];
        StorageDead(_1000);
        _998 = &_999;
        _997 = &(*_998);
        _996 = move _997 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_997);
        _991 = Arguments::<'_>::new_v1(move _992, move _996) -> [return: bb413, unwind: bb809];
    }

    bb413: {
        StorageDead(_996);
        StorageDead(_992);
        _990 = format(move _991) -> [return: bb414, unwind: bb809];
    }

    bb414: {
        StorageDead(_991);
        StorageDead(_1002);
        StorageDead(_999);
        StorageDead(_998);
        StorageDead(_994);
        _989 = move _990;
        StorageDead(_990);
        _988 = &_989;
        _987 = &(*_988);
        _986 = <String as Deref>::deref(move _987) -> [return: bb415, unwind: bb769];
    }

    bb415: {
        _985 = &(*_986);
        StorageDead(_987);
        _984 = solana_program::log::sol_log(move _985) -> [return: bb416, unwind: bb769];
    }

    bb416: {
        StorageDead(_985);
        drop(_989) -> [return: bb417, unwind: bb809];
    }

    bb417: {
        StorageDead(_989);
        StorageDead(_988);
        StorageDead(_986);
        StorageDead(_984);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        _1005 = const "borrow from market must be a borrow spot position";
        _1004 = &(*_1005);
        _1003 = solana_program::log::sol_log(move _1004) -> [return: bb418, unwind: bb809];
    }

    bb418: {
        StorageDead(_1004);
        StorageDead(_1005);
        StorageDead(_1003);
        StorageLive(_1006);
        _1006 = _983;
        _977 = std::result::Result::<(), error::ErrorCode>::Err(move _1006);
        StorageDead(_1006);
        StorageDead(_983);
        goto -> bb419;
    }

    bb419: {
        StorageDead(_978);
        _976 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _977) -> [return: bb420, unwind: bb809];
    }

    bb420: {
        StorageDead(_977);
        _1007 = discriminant(_976);
        switchInt(move _1007) -> [0: bb421, 1: bb422, otherwise: bb4];
    }

    bb421: {
        StorageLive(_1011);
        _1011 = ((_976 as Continue).0: ());
        _975 = _1011;
        StorageDead(_1011);
        StorageDead(_976);
        StorageDead(_975);
        StorageLive(_1012);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        StorageLive(_1017);
        StorageLive(_1018);
        _1018 = &(*_963);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        StorageLive(_1022);
        _1022 = &_299;
        _1021 = &(*_1022);
        _1020 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1021) -> [return: bb424, unwind: bb809];
    }

    bb422: {
        StorageLive(_1008);
        _1008 = ((_976 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1010);
        _1010 = _1008;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1010) -> [return: bb423, unwind: bb809];
    }

    bb423: {
        StorageDead(_1010);
        StorageDead(_1008);
        StorageDead(_976);
        StorageDead(_975);
        goto -> bb733;
    }

    bb424: {
        _1019 = &(*_1020);
        StorageDead(_1021);
        _1017 = SpotPosition::get_token_amount(move _1018, move _1019) -> [return: bb425, unwind: bb809];
    }

    bb425: {
        StorageDead(_1019);
        StorageDead(_1018);
        _1016 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1017) -> [return: bb426, unwind: bb809];
    }

    bb426: {
        StorageDead(_1017);
        _1023 = discriminant(_1016);
        switchInt(move _1023) -> [0: bb427, 1: bb428, otherwise: bb4];
    }

    bb427: {
        StorageLive(_1027);
        _1027 = ((_1016 as Continue).0: u128);
        _1015 = _1027;
        StorageDead(_1027);
        _1014 = <u128 as Cast>::cast::<u64>(move _1015) -> [return: bb430, unwind: bb809];
    }

    bb428: {
        StorageLive(_1024);
        _1024 = ((_1016 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1026);
        _1026 = _1024;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1026) -> [return: bb429, unwind: bb809];
    }

    bb429: {
        StorageDead(_1026);
        StorageDead(_1024);
        StorageDead(_1015);
        StorageDead(_1014);
        goto -> bb731;
    }

    bb430: {
        StorageDead(_1015);
        _1013 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1014) -> [return: bb431, unwind: bb809];
    }

    bb431: {
        StorageDead(_1014);
        _1028 = discriminant(_1013);
        switchInt(move _1028) -> [0: bb432, 1: bb433, otherwise: bb4];
    }

    bb432: {
        StorageLive(_1032);
        _1032 = ((_1013 as Continue).0: u64);
        _1012 = _1032;
        StorageDead(_1032);
        StorageDead(_1022);
        StorageDead(_1020);
        StorageDead(_1016);
        StorageDead(_1013);
        StorageLive(_1033);
        _1034 = discriminant(_7);
        switchInt(move _1034) -> [0: bb435, 1: bb436, otherwise: bb4];
    }

    bb433: {
        StorageLive(_1029);
        _1029 = ((_1013 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1031);
        _1031 = _1029;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1031) -> [return: bb434, unwind: bb809];
    }

    bb434: {
        StorageDead(_1031);
        StorageDead(_1029);
        goto -> bb731;
    }

    bb435: {
        _1033 = _1012;
        goto -> bb437;
    }

    bb436: {
        StorageLive(_1035);
        _1035 = ((_7 as Some).0: u64);
        _1033 = _1035;
        StorageDead(_1035);
        goto -> bb437;
    }

    bb437: {
        StorageLive(_1036);
        StorageLive(_1037);
        StorageLive(_1038);
        StorageLive(_1039);
        StorageLive(_1040);
        _1040 = _1033;
        StorageLive(_1041);
        _1041 = _1012;
        _1039 = Le(move _1040, move _1041);
        switchInt(move _1039) -> [0: bb439, otherwise: bb438];
    }

    bb438: {
        StorageDead(_1041);
        StorageDead(_1040);
        StorageLive(_1042);
        _1042 = ();
        _1038 = std::result::Result::<(), error::ErrorCode>::Ok(move _1042);
        StorageDead(_1042);
        goto -> bb447;
    }

    bb439: {
        StorageDead(_1041);
        StorageDead(_1040);
        StorageLive(_1043);
        _1043 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_1044);
        StorageLive(_1045);
        StorageLive(_1046);
        StorageLive(_1047);
        StorageLive(_1048);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        _1684 = const _;
        _1054 = &(*_1684);
        _1053 = &(*_1054);
        _1052 = move _1053 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1053);
        StorageLive(_1056);
        StorageLive(_1057);
        StorageLive(_1058);
        StorageLive(_1059);
        StorageLive(_1060);
        StorageLive(_1061);
        StorageLive(_1062);
        _1062 = &_1043;
        _1061 = &(*_1062);
        _1060 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1061) -> [return: bb440, unwind: bb809];
    }

    bb440: {
        StorageDead(_1061);
        _1059 = [move _1060];
        StorageDead(_1060);
        _1058 = &_1059;
        _1057 = &(*_1058);
        _1056 = move _1057 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1057);
        _1051 = Arguments::<'_>::new_v1(move _1052, move _1056) -> [return: bb441, unwind: bb809];
    }

    bb441: {
        StorageDead(_1056);
        StorageDead(_1052);
        _1050 = format(move _1051) -> [return: bb442, unwind: bb809];
    }

    bb442: {
        StorageDead(_1051);
        StorageDead(_1062);
        StorageDead(_1059);
        StorageDead(_1058);
        StorageDead(_1054);
        _1049 = move _1050;
        StorageDead(_1050);
        _1048 = &_1049;
        _1047 = &(*_1048);
        _1046 = <String as Deref>::deref(move _1047) -> [return: bb443, unwind: bb768];
    }

    bb443: {
        _1045 = &(*_1046);
        StorageDead(_1047);
        _1044 = solana_program::log::sol_log(move _1045) -> [return: bb444, unwind: bb768];
    }

    bb444: {
        StorageDead(_1045);
        drop(_1049) -> [return: bb445, unwind: bb809];
    }

    bb445: {
        StorageDead(_1049);
        StorageDead(_1048);
        StorageDead(_1046);
        StorageDead(_1044);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        _1065 = const "borrow amount is greater than the spot position token amount";
        _1064 = &(*_1065);
        _1063 = solana_program::log::sol_log(move _1064) -> [return: bb446, unwind: bb809];
    }

    bb446: {
        StorageDead(_1064);
        StorageDead(_1065);
        StorageDead(_1063);
        StorageLive(_1066);
        _1066 = _1043;
        _1038 = std::result::Result::<(), error::ErrorCode>::Err(move _1066);
        StorageDead(_1066);
        StorageDead(_1043);
        goto -> bb447;
    }

    bb447: {
        StorageDead(_1039);
        _1037 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1038) -> [return: bb448, unwind: bb809];
    }

    bb448: {
        StorageDead(_1038);
        _1067 = discriminant(_1037);
        switchInt(move _1067) -> [0: bb449, 1: bb450, otherwise: bb4];
    }

    bb449: {
        StorageLive(_1071);
        _1071 = ((_1037 as Continue).0: ());
        _1036 = _1071;
        StorageDead(_1071);
        StorageDead(_1037);
        StorageDead(_1036);
        _961 = _1033;
        StorageDead(_1033);
        StorageDead(_1012);
        StorageDead(_963);
        goto -> bb452;
    }

    bb450: {
        StorageLive(_1068);
        _1068 = ((_1037 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1070);
        _1070 = _1068;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1070) -> [return: bb451, unwind: bb809];
    }

    bb451: {
        StorageDead(_1070);
        StorageDead(_1068);
        StorageDead(_1037);
        StorageDead(_1036);
        StorageDead(_1033);
        goto -> bb732;
    }

    bb452: {
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        _1074 = _961;
        _1073 = Gt(move _1074, const 0_u64);
        switchInt(move _1073) -> [0: bb524, otherwise: bb453];
    }

    bb453: {
        StorageDead(_1074);
        StorageLive(_1075);
        StorageLive(_1076);
        StorageLive(_1077);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        _1080 = &mut (*_57);
        _1079 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1080) -> [return: bb454, unwind: bb809];
    }

    bb454: {
        _1078 = &mut (*_1079);
        StorageDead(_1080);
        StorageLive(_1081);
        _1081 = _961;
        StorageLive(_1082);
        _1082 = (_553.0: i64);
        StorageLive(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        StorageLive(_1086);
        StorageLive(_1087);
        StorageLive(_1088);
        StorageLive(_1089);
        _1089 = &_299;
        _1088 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1089) -> [return: bb455, unwind: bb809];
    }

    bb455: {
        _1087 = (*_1088);
        StorageDead(_1089);
        _1086 = SpotMarket::get_precision(move _1087) -> [return: bb456, unwind: bb809];
    }

    bb456: {
        StorageDead(_1087);
        _1085 = <u64 as Cast>::cast::<u128>(move _1086) -> [return: bb457, unwind: bb809];
    }

    bb457: {
        StorageDead(_1086);
        _1084 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1085) -> [return: bb458, unwind: bb809];
    }

    bb458: {
        StorageDead(_1085);
        _1090 = discriminant(_1084);
        switchInt(move _1090) -> [0: bb459, 1: bb460, otherwise: bb4];
    }

    bb459: {
        StorageLive(_1094);
        _1094 = ((_1084 as Continue).0: u128);
        _1083 = _1094;
        StorageDead(_1094);
        _1077 = User::increment_total_deposits(move _1078, move _1081, move _1082, move _1083) -> [return: bb462, unwind: bb809];
    }

    bb460: {
        StorageLive(_1091);
        _1091 = ((_1084 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1093);
        _1093 = _1091;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1093) -> [return: bb461, unwind: bb809];
    }

    bb461: {
        StorageDead(_1093);
        StorageDead(_1091);
        StorageDead(_1083);
        StorageDead(_1082);
        StorageDead(_1081);
        StorageDead(_1078);
        StorageDead(_1077);
        goto -> bb729;
    }

    bb462: {
        StorageDead(_1083);
        StorageDead(_1082);
        StorageDead(_1081);
        StorageDead(_1078);
        _1076 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1077) -> [return: bb463, unwind: bb809];
    }

    bb463: {
        StorageDead(_1077);
        _1095 = discriminant(_1076);
        switchInt(move _1095) -> [0: bb464, 1: bb465, otherwise: bb4];
    }

    bb464: {
        StorageLive(_1099);
        _1099 = ((_1076 as Continue).0: ());
        _1075 = _1099;
        StorageDead(_1099);
        StorageDead(_1088);
        StorageDead(_1084);
        StorageDead(_1079);
        StorageDead(_1076);
        StorageDead(_1075);
        StorageLive(_1100);
        StorageLive(_1101);
        StorageLive(_1102);
        StorageLive(_1103);
        StorageLive(_1104);
        _1104 = _961;
        _1103 = move _1104 as u128 (IntToInt);
        StorageDead(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        _1683 = const _;
        _1106 = &(*_1683);
        _1105 = &(*_1106);
        StorageLive(_1108);
        StorageLive(_1109);
        StorageLive(_1110);
        StorageLive(_1111);
        _1111 = &mut _299;
        _1110 = &mut (*_1111);
        _1109 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1110) -> [return: bb467, unwind: bb809];
    }

    bb465: {
        StorageLive(_1096);
        _1096 = ((_1076 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1098);
        _1098 = _1096;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1098) -> [return: bb466, unwind: bb809];
    }

    bb466: {
        StorageDead(_1098);
        StorageDead(_1096);
        goto -> bb729;
    }

    bb467: {
        _1108 = &mut (*_1109);
        StorageDead(_1110);
        StorageLive(_1112);
        StorageLive(_1113);
        StorageLive(_1114);
        _1114 = &mut (*_57);
        _1113 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1114) -> [return: bb468, unwind: bb809];
    }

    bb468: {
        _1112 = &mut (*_1113);
        StorageDead(_1114);
        _1102 = update_spot_balances_and_cumulative_deposits_with_limits(move _1103, move _1105, move _1108, move _1112) -> [return: bb469, unwind: bb809];
    }

    bb469: {
        StorageDead(_1112);
        StorageDead(_1108);
        StorageDead(_1105);
        StorageDead(_1103);
        _1101 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1102) -> [return: bb470, unwind: bb809];
    }

    bb470: {
        StorageDead(_1102);
        _1115 = discriminant(_1101);
        switchInt(move _1115) -> [0: bb471, 1: bb472, otherwise: bb4];
    }

    bb471: {
        StorageLive(_1119);
        _1119 = ((_1101 as Continue).0: ());
        _1100 = _1119;
        StorageDead(_1119);
        StorageDead(_1113);
        StorageDead(_1111);
        StorageDead(_1109);
        StorageDead(_1106);
        StorageDead(_1101);
        StorageDead(_1100);
        StorageLive(_1120);
        StorageLive(_1121);
        StorageLive(_1122);
        StorageLive(_1123);
        _1123 = &_299;
        _1122 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1123) -> [return: bb474, unwind: bb809];
    }

    bb472: {
        StorageLive(_1116);
        _1116 = ((_1101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1118);
        _1118 = _1116;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1118) -> [return: bb473, unwind: bb809];
    }

    bb473: {
        StorageDead(_1118);
        StorageDead(_1116);
        StorageDead(_1113);
        StorageDead(_1111);
        StorageDead(_1109);
        StorageDead(_1106);
        StorageDead(_1101);
        StorageDead(_1100);
        goto -> bb730;
    }

    bb474: {
        StorageDead(_1123);
        _1121 = ((*_1122).30: u64);
        StorageDead(_1122);
        StorageLive(_1124);
        StorageLive(_1125);
        StorageLive(_1126);
        StorageLive(_1127);
        _1127 = _1121;
        _1126 = core::num::<impl u64>::checked_add(move _1127, const 1_u64) -> [return: bb475, unwind: bb809];
    }

    bb475: {
        StorageDead(_1127);
        StorageLive(_1128);
        _1128 = Option::<u64>::Some(const 1_u64);
        _1125 = Option::<u64>::or(move _1126, move _1128) -> [return: bb476, unwind: bb809];
    }

    bb476: {
        StorageDead(_1128);
        StorageDead(_1126);
        _1124 = Option::<u64>::unwrap(move _1125) -> [return: bb477, unwind: bb809];
    }

    bb477: {
        StorageDead(_1125);
        StorageLive(_1129);
        StorageLive(_1130);
        _1130 = &mut _299;
        _1129 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1130) -> [return: bb478, unwind: bb809];
    }

    bb478: {
        StorageDead(_1130);
        ((*_1129).30: u64) = move _1124;
        StorageDead(_1124);
        StorageDead(_1129);
        _1120 = _1121;
        StorageDead(_1121);
        StorageLive(_1131);
        StorageLive(_1132);
        _1132 = (_81.4: i64);
        StorageLive(_1133);
        _1133 = _1120;
        StorageLive(_1134);
        _1134 = (*_28);
        StorageLive(_1135);
        _1135 = _33;
        StorageLive(_1136);
        _1136 = DepositDirection::Deposit;
        StorageLive(_1137);
        _1137 = _961;
        StorageLive(_1138);
        _1138 = (_553.0: i64);
        StorageLive(_1139);
        _1139 = _4;
        StorageLive(_1140);
        StorageLive(_1141);
        StorageLive(_1142);
        _1142 = &_299;
        _1141 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1142) -> [return: bb479, unwind: bb809];
    }

    bb479: {
        StorageDead(_1142);
        _1140 = ((*_1141).11: u128);
        StorageLive(_1143);
        StorageLive(_1144);
        StorageLive(_1145);
        _1145 = &_299;
        _1144 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1145) -> [return: bb480, unwind: bb809];
    }

    bb480: {
        StorageDead(_1145);
        _1143 = ((*_1144).12: u128);
        StorageLive(_1146);
        StorageLive(_1147);
        StorageLive(_1148);
        _1148 = &_299;
        _1147 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1148) -> [return: bb481, unwind: bb809];
    }

    bb481: {
        StorageDead(_1148);
        _1146 = ((*_1147).13: u128);
        StorageLive(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        _1151 = &_299;
        _1150 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1151) -> [return: bb482, unwind: bb809];
    }

    bb482: {
        StorageDead(_1151);
        _1149 = ((*_1150).14: u128);
        StorageLive(_1152);
        StorageLive(_1153);
        StorageLive(_1154);
        _1154 = &(*_57);
        _1153 = <RefMut<'_, User> as Deref>::deref(move _1154) -> [return: bb483, unwind: bb809];
    }

    bb483: {
        StorageDead(_1154);
        _1152 = ((*_1153).7: u64);
        StorageLive(_1155);
        StorageLive(_1156);
        StorageLive(_1157);
        _1157 = &(*_57);
        _1156 = <RefMut<'_, User> as Deref>::deref(move _1157) -> [return: bb484, unwind: bb809];
    }

    bb484: {
        StorageDead(_1157);
        _1155 = ((*_1156).8: u64);
        StorageLive(_1158);
        _1158 = DepositExplanation::Transfer;
        StorageLive(_1159);
        StorageLive(_1160);
        _1160 = _31;
        _1159 = Option::<anchor_lang::prelude::Pubkey>::Some(move _1160);
        StorageDead(_1160);
        _1131 = DepositRecord { ts: move _1132, user_authority: move _1134, user: move _1135, direction: move _1136, deposit_record_id: move _1133, amount: move _1137, market_index: move _1139, oracle_price: move _1138, market_deposit_balance: move _1140, market_withdraw_balance: move _1143, market_cumulative_deposit_interest: move _1146, market_cumulative_borrow_interest: move _1149, total_deposits_after: move _1152, total_withdraws_after: move _1155, explanation: move _1158, transfer_user: move _1159 };
        StorageDead(_1159);
        StorageDead(_1158);
        StorageDead(_1155);
        StorageDead(_1152);
        StorageDead(_1149);
        StorageDead(_1146);
        StorageDead(_1143);
        StorageDead(_1140);
        StorageDead(_1139);
        StorageDead(_1138);
        StorageDead(_1137);
        StorageDead(_1136);
        StorageDead(_1135);
        StorageDead(_1134);
        StorageDead(_1133);
        StorageDead(_1132);
        StorageDead(_1156);
        StorageDead(_1153);
        StorageDead(_1150);
        StorageDead(_1147);
        StorageDead(_1144);
        StorageDead(_1141);
        StorageLive(_1161);
        StorageLive(_1162);
        StorageLive(_1163);
        StorageLive(_1164);
        StorageLive(_1165);
        StorageLive(_1166);
        StorageLive(_1167);
        StorageLive(_1168);
        StorageLive(_1169);
        StorageLive(_1170);
        StorageLive(_1171);
        StorageLive(_1172);
        StorageLive(_1173);
        _1173 = &_1131;
        _1172 = &(*_1173);
        _1171 = <DepositRecord as anchor_lang::Event>::data(move _1172) -> [return: bb485, unwind: bb809];
    }

    bb485: {
        StorageDead(_1172);
        _1170 = &_1171;
        _1169 = &(*_1170);
        _1168 = <Vec<u8> as Deref>::deref(move _1169) -> [return: bb486, unwind: bb767];
    }

    bb486: {
        _1167 = &(*_1168);
        StorageDead(_1169);
        _1166 = [move _1167];
        StorageDead(_1167);
        _1165 = &_1166;
        _1164 = &(*_1165);
        _1163 = move _1164 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1164);
        _1162 = solana_program::log::sol_log_data(move _1163) -> [return: bb487, unwind: bb767];
    }

    bb487: {
        StorageDead(_1163);
        drop(_1171) -> [return: bb488, unwind: bb809];
    }

    bb488: {
        StorageDead(_1173);
        StorageDead(_1171);
        StorageDead(_1170);
        StorageDead(_1168);
        StorageDead(_1166);
        StorageDead(_1165);
        StorageDead(_1162);
        _1161 = const ();
        StorageDead(_1161);
        StorageLive(_1174);
        StorageLive(_1175);
        StorageLive(_1176);
        StorageLive(_1177);
        StorageLive(_1178);
        StorageLive(_1179);
        _1179 = &mut (*_45);
        _1178 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1179) -> [return: bb489, unwind: bb809];
    }

    bb489: {
        _1177 = &mut (*_1178);
        StorageDead(_1179);
        StorageLive(_1180);
        _1180 = _961;
        StorageLive(_1181);
        _1181 = (_569.0: i64);
        StorageLive(_1182);
        StorageLive(_1183);
        StorageLive(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        StorageLive(_1187);
        StorageLive(_1188);
        _1188 = &_310;
        _1187 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1188) -> [return: bb490, unwind: bb809];
    }

    bb490: {
        _1186 = (*_1187);
        StorageDead(_1188);
        _1185 = SpotMarket::get_precision(move _1186) -> [return: bb491, unwind: bb809];
    }

    bb491: {
        StorageDead(_1186);
        _1184 = <u64 as Cast>::cast::<u128>(move _1185) -> [return: bb492, unwind: bb809];
    }

    bb492: {
        StorageDead(_1185);
        _1183 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1184) -> [return: bb493, unwind: bb809];
    }

    bb493: {
        StorageDead(_1184);
        _1189 = discriminant(_1183);
        switchInt(move _1189) -> [0: bb494, 1: bb495, otherwise: bb4];
    }

    bb494: {
        StorageLive(_1193);
        _1193 = ((_1183 as Continue).0: u128);
        _1182 = _1193;
        StorageDead(_1193);
        _1176 = User::increment_total_withdraws(move _1177, move _1180, move _1181, move _1182) -> [return: bb497, unwind: bb809];
    }

    bb495: {
        StorageLive(_1190);
        _1190 = ((_1183 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1192);
        _1192 = _1190;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1192) -> [return: bb496, unwind: bb809];
    }

    bb496: {
        StorageDead(_1192);
        StorageDead(_1190);
        StorageDead(_1182);
        StorageDead(_1181);
        StorageDead(_1180);
        StorageDead(_1177);
        StorageDead(_1176);
        goto -> bb727;
    }

    bb497: {
        StorageDead(_1182);
        StorageDead(_1181);
        StorageDead(_1180);
        StorageDead(_1177);
        _1175 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1176) -> [return: bb498, unwind: bb809];
    }

    bb498: {
        StorageDead(_1176);
        _1194 = discriminant(_1175);
        switchInt(move _1194) -> [0: bb499, 1: bb500, otherwise: bb4];
    }

    bb499: {
        StorageLive(_1198);
        _1198 = ((_1175 as Continue).0: ());
        _1174 = _1198;
        StorageDead(_1198);
        StorageDead(_1187);
        StorageDead(_1183);
        StorageDead(_1178);
        StorageDead(_1175);
        StorageDead(_1174);
        StorageLive(_1199);
        StorageLive(_1200);
        StorageLive(_1201);
        StorageLive(_1202);
        StorageLive(_1203);
        _1203 = _961;
        _1202 = move _1203 as u128 (IntToInt);
        StorageDead(_1203);
        StorageLive(_1204);
        StorageLive(_1205);
        _1682 = const _;
        _1205 = &(*_1682);
        _1204 = &(*_1205);
        StorageLive(_1207);
        StorageLive(_1208);
        StorageLive(_1209);
        StorageLive(_1210);
        _1210 = &mut _310;
        _1209 = &mut (*_1210);
        _1208 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1209) -> [return: bb502, unwind: bb809];
    }

    bb500: {
        StorageLive(_1195);
        _1195 = ((_1175 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1197);
        _1197 = _1195;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1197) -> [return: bb501, unwind: bb809];
    }

    bb501: {
        StorageDead(_1197);
        StorageDead(_1195);
        goto -> bb727;
    }

    bb502: {
        _1207 = &mut (*_1208);
        StorageDead(_1209);
        StorageLive(_1211);
        StorageLive(_1212);
        StorageLive(_1213);
        _1213 = &mut (*_45);
        _1212 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1213) -> [return: bb503, unwind: bb809];
    }

    bb503: {
        _1211 = &mut (*_1212);
        StorageDead(_1213);
        _1201 = update_spot_balances_and_cumulative_deposits_with_limits(move _1202, move _1204, move _1207, move _1211) -> [return: bb504, unwind: bb809];
    }

    bb504: {
        StorageDead(_1211);
        StorageDead(_1207);
        StorageDead(_1204);
        StorageDead(_1202);
        _1200 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1201) -> [return: bb505, unwind: bb809];
    }

    bb505: {
        StorageDead(_1201);
        _1214 = discriminant(_1200);
        switchInt(move _1214) -> [0: bb506, 1: bb507, otherwise: bb4];
    }

    bb506: {
        StorageLive(_1218);
        _1218 = ((_1200 as Continue).0: ());
        _1199 = _1218;
        StorageDead(_1218);
        StorageDead(_1212);
        StorageDead(_1210);
        StorageDead(_1208);
        StorageDead(_1205);
        StorageDead(_1200);
        StorageDead(_1199);
        StorageLive(_1219);
        StorageLive(_1220);
        StorageLive(_1221);
        StorageLive(_1222);
        _1222 = &_310;
        _1221 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1222) -> [return: bb509, unwind: bb809];
    }

    bb507: {
        StorageLive(_1215);
        _1215 = ((_1200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1217);
        _1217 = _1215;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1217) -> [return: bb508, unwind: bb809];
    }

    bb508: {
        StorageDead(_1217);
        StorageDead(_1215);
        StorageDead(_1212);
        StorageDead(_1210);
        StorageDead(_1208);
        StorageDead(_1205);
        StorageDead(_1200);
        StorageDead(_1199);
        goto -> bb728;
    }

    bb509: {
        StorageDead(_1222);
        _1220 = ((*_1221).30: u64);
        StorageDead(_1221);
        StorageLive(_1223);
        StorageLive(_1224);
        StorageLive(_1225);
        StorageLive(_1226);
        _1226 = _1220;
        _1225 = core::num::<impl u64>::checked_add(move _1226, const 1_u64) -> [return: bb510, unwind: bb809];
    }

    bb510: {
        StorageDead(_1226);
        StorageLive(_1227);
        _1227 = Option::<u64>::Some(const 1_u64);
        _1224 = Option::<u64>::or(move _1225, move _1227) -> [return: bb511, unwind: bb809];
    }

    bb511: {
        StorageDead(_1227);
        StorageDead(_1225);
        _1223 = Option::<u64>::unwrap(move _1224) -> [return: bb512, unwind: bb809];
    }

    bb512: {
        StorageDead(_1224);
        StorageLive(_1228);
        StorageLive(_1229);
        _1229 = &mut _310;
        _1228 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1229) -> [return: bb513, unwind: bb809];
    }

    bb513: {
        StorageDead(_1229);
        ((*_1228).30: u64) = move _1223;
        StorageDead(_1223);
        StorageDead(_1228);
        _1219 = _1220;
        StorageDead(_1220);
        StorageLive(_1230);
        StorageLive(_1231);
        _1231 = (_81.4: i64);
        StorageLive(_1232);
        _1232 = _1219;
        StorageLive(_1233);
        _1233 = (*_28);
        StorageLive(_1234);
        _1234 = _31;
        StorageLive(_1235);
        _1235 = DepositDirection::Withdraw;
        StorageLive(_1236);
        _1236 = _961;
        StorageLive(_1237);
        _1237 = (_569.0: i64);
        StorageLive(_1238);
        _1238 = _5;
        StorageLive(_1239);
        StorageLive(_1240);
        StorageLive(_1241);
        _1241 = &_310;
        _1240 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1241) -> [return: bb514, unwind: bb809];
    }

    bb514: {
        StorageDead(_1241);
        _1239 = ((*_1240).11: u128);
        StorageLive(_1242);
        StorageLive(_1243);
        StorageLive(_1244);
        _1244 = &_310;
        _1243 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1244) -> [return: bb515, unwind: bb809];
    }

    bb515: {
        StorageDead(_1244);
        _1242 = ((*_1243).12: u128);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        _1247 = &_310;
        _1246 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1247) -> [return: bb516, unwind: bb809];
    }

    bb516: {
        StorageDead(_1247);
        _1245 = ((*_1246).13: u128);
        StorageLive(_1248);
        StorageLive(_1249);
        StorageLive(_1250);
        _1250 = &_310;
        _1249 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1250) -> [return: bb517, unwind: bb809];
    }

    bb517: {
        StorageDead(_1250);
        _1248 = ((*_1249).14: u128);
        StorageLive(_1251);
        StorageLive(_1252);
        StorageLive(_1253);
        _1253 = &(*_45);
        _1252 = <RefMut<'_, User> as Deref>::deref(move _1253) -> [return: bb518, unwind: bb809];
    }

    bb518: {
        StorageDead(_1253);
        _1251 = ((*_1252).7: u64);
        StorageLive(_1254);
        StorageLive(_1255);
        StorageLive(_1256);
        _1256 = &(*_45);
        _1255 = <RefMut<'_, User> as Deref>::deref(move _1256) -> [return: bb519, unwind: bb809];
    }

    bb519: {
        StorageDead(_1256);
        _1254 = ((*_1255).8: u64);
        StorageLive(_1257);
        _1257 = DepositExplanation::Transfer;
        StorageLive(_1258);
        StorageLive(_1259);
        _1259 = _33;
        _1258 = Option::<anchor_lang::prelude::Pubkey>::Some(move _1259);
        StorageDead(_1259);
        _1230 = DepositRecord { ts: move _1231, user_authority: move _1233, user: move _1234, direction: move _1235, deposit_record_id: move _1232, amount: move _1236, market_index: move _1238, oracle_price: move _1237, market_deposit_balance: move _1239, market_withdraw_balance: move _1242, market_cumulative_deposit_interest: move _1245, market_cumulative_borrow_interest: move _1248, total_deposits_after: move _1251, total_withdraws_after: move _1254, explanation: move _1257, transfer_user: move _1258 };
        StorageDead(_1258);
        StorageDead(_1257);
        StorageDead(_1254);
        StorageDead(_1251);
        StorageDead(_1248);
        StorageDead(_1245);
        StorageDead(_1242);
        StorageDead(_1239);
        StorageDead(_1238);
        StorageDead(_1237);
        StorageDead(_1236);
        StorageDead(_1235);
        StorageDead(_1234);
        StorageDead(_1233);
        StorageDead(_1232);
        StorageDead(_1231);
        StorageDead(_1255);
        StorageDead(_1252);
        StorageDead(_1249);
        StorageDead(_1246);
        StorageDead(_1243);
        StorageDead(_1240);
        StorageLive(_1260);
        StorageLive(_1261);
        StorageLive(_1262);
        StorageLive(_1263);
        StorageLive(_1264);
        StorageLive(_1265);
        StorageLive(_1266);
        StorageLive(_1267);
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        _1272 = &_1230;
        _1271 = &(*_1272);
        _1270 = <DepositRecord as anchor_lang::Event>::data(move _1271) -> [return: bb520, unwind: bb809];
    }

    bb520: {
        StorageDead(_1271);
        _1269 = &_1270;
        _1268 = &(*_1269);
        _1267 = <Vec<u8> as Deref>::deref(move _1268) -> [return: bb521, unwind: bb766];
    }

    bb521: {
        _1266 = &(*_1267);
        StorageDead(_1268);
        _1265 = [move _1266];
        StorageDead(_1266);
        _1264 = &_1265;
        _1263 = &(*_1264);
        _1262 = move _1263 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1263);
        _1261 = solana_program::log::sol_log_data(move _1262) -> [return: bb522, unwind: bb766];
    }

    bb522: {
        StorageDead(_1262);
        drop(_1270) -> [return: bb523, unwind: bb809];
    }

    bb523: {
        StorageDead(_1272);
        StorageDead(_1270);
        StorageDead(_1269);
        StorageDead(_1267);
        StorageDead(_1265);
        StorageDead(_1264);
        StorageDead(_1261);
        _1260 = const ();
        StorageDead(_1260);
        _1072 = const ();
        StorageDead(_1230);
        StorageDead(_1219);
        StorageDead(_1131);
        StorageDead(_1120);
        goto -> bb525;
    }

    bb524: {
        StorageDead(_1074);
        _1072 = const ();
        goto -> bb525;
    }

    bb525: {
        StorageDead(_1073);
        StorageDead(_1072);
        StorageLive(_1273);
        StorageLive(_1274);
        _1749 = const false;
        _1274 = move _277;
        _1273 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _1274) -> [return: bb526, unwind: bb809];
    }

    bb526: {
        StorageDead(_1274);
        StorageDead(_1273);
        StorageLive(_1275);
        StorageLive(_1276);
        _1748 = const false;
        _1276 = move _288;
        _1275 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _1276) -> [return: bb527, unwind: bb809];
    }

    bb527: {
        StorageDead(_1276);
        StorageDead(_1275);
        StorageLive(_1277);
        StorageLive(_1278);
        _1747 = const false;
        _1278 = move _299;
        _1277 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _1278) -> [return: bb528, unwind: bb809];
    }

    bb528: {
        StorageDead(_1278);
        StorageDead(_1277);
        StorageLive(_1279);
        StorageLive(_1280);
        _1746 = const false;
        _1280 = move _310;
        _1279 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _1280) -> [return: bb529, unwind: bb809];
    }

    bb529: {
        StorageDead(_1280);
        StorageDead(_1279);
        StorageLive(_1281);
        StorageLive(_1282);
        StorageLive(_1283);
        StorageLive(_1284);
        StorageLive(_1285);
        StorageLive(_1286);
        _1286 = &mut (*_57);
        _1285 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1286) -> [return: bb530, unwind: bb809];
    }

    bb530: {
        _1284 = &mut (*_1285);
        StorageDead(_1286);
        StorageLive(_1287);
        StorageLive(_1288);
        _1288 = &_239;
        _1287 = &(*_1288);
        StorageLive(_1289);
        StorageLive(_1290);
        _1290 = &_240;
        _1289 = &(*_1290);
        StorageLive(_1291);
        StorageLive(_1292);
        _1292 = &mut _241;
        _1291 = &mut (*_1292);
        StorageLive(_1293);
        _1293 = math::margin::MarginRequirementType::Initial;
        StorageLive(_1294);
        _1294 = _2;
        StorageLive(_1295);
        StorageLive(_1296);
        StorageLive(_1297);
        StorageLive(_1298);
        _1298 = _649;
        _1297 = <u64 as Cast>::cast::<i128>(move _1298) -> [return: bb531, unwind: bb809];
    }

    bb531: {
        StorageDead(_1298);
        _1296 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1297) -> [return: bb532, unwind: bb809];
    }

    bb532: {
        StorageDead(_1297);
        _1299 = discriminant(_1296);
        switchInt(move _1299) -> [0: bb533, 1: bb534, otherwise: bb4];
    }

    bb533: {
        StorageLive(_1303);
        _1303 = ((_1296 as Continue).0: i128);
        _1295 = _1303;
        StorageDead(_1303);
        StorageLive(_1304);
        _1304 = _4;
        StorageLive(_1305);
        StorageLive(_1306);
        StorageLive(_1307);
        StorageLive(_1308);
        StorageLive(_1309);
        _1309 = _961;
        _1308 = <u64 as Cast>::cast::<i128>(move _1309) -> [return: bb536, unwind: bb809];
    }

    bb534: {
        StorageLive(_1300);
        _1300 = ((_1296 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1302);
        _1302 = _1300;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1302) -> [return: bb535, unwind: bb809];
    }

    bb535: {
        StorageDead(_1302);
        StorageDead(_1300);
        StorageDead(_1295);
        StorageDead(_1294);
        StorageDead(_1293);
        StorageDead(_1291);
        StorageDead(_1289);
        StorageDead(_1287);
        StorageDead(_1284);
        StorageDead(_1283);
        goto -> bb726;
    }

    bb536: {
        StorageDead(_1309);
        _1307 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1308) -> [return: bb537, unwind: bb809];
    }

    bb537: {
        StorageDead(_1308);
        _1310 = discriminant(_1307);
        switchInt(move _1310) -> [0: bb538, 1: bb539, otherwise: bb4];
    }

    bb538: {
        StorageLive(_1314);
        _1314 = ((_1307 as Continue).0: i128);
        _1306 = _1314;
        StorageDead(_1314);
        _1315 = Eq(_1306, const i128::MIN);
        assert(!move _1315, "attempt to negate `{}`, which would overflow", _1306) -> [success: bb541, unwind: bb809];
    }

    bb539: {
        StorageLive(_1311);
        _1311 = ((_1307 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1313);
        _1313 = _1311;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1313) -> [return: bb540, unwind: bb809];
    }

    bb540: {
        StorageDead(_1313);
        StorageDead(_1311);
        StorageDead(_1306);
        StorageDead(_1305);
        StorageDead(_1304);
        StorageDead(_1295);
        StorageDead(_1294);
        StorageDead(_1293);
        StorageDead(_1291);
        StorageDead(_1289);
        StorageDead(_1287);
        StorageDead(_1284);
        StorageDead(_1283);
        goto -> bb725;
    }

    bb541: {
        _1305 = Neg(move _1306);
        StorageDead(_1306);
        StorageLive(_1316);
        StorageLive(_1317);
        StorageLive(_1318);
        _1318 = &mut (*_69);
        _1317 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _1318) -> [return: bb542, unwind: bb809];
    }

    bb542: {
        _1316 = &mut (*_1317);
        StorageDead(_1318);
        StorageLive(_1319);
        _1319 = (_81.4: i64);
        _1283 = User::meets_withdraw_margin_requirement_and_increment_fuel_bonus_swap(move _1284, move _1287, move _1289, move _1291, move _1293, move _1294, move _1295, move _1304, move _1305, move _1316, move _1319) -> [return: bb543, unwind: bb809];
    }

    bb543: {
        StorageDead(_1319);
        StorageDead(_1316);
        StorageDead(_1305);
        StorageDead(_1304);
        StorageDead(_1295);
        StorageDead(_1294);
        StorageDead(_1293);
        StorageDead(_1291);
        StorageDead(_1289);
        StorageDead(_1287);
        StorageDead(_1284);
        _1282 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1283) -> [return: bb544, unwind: bb809];
    }

    bb544: {
        StorageDead(_1283);
        _1320 = discriminant(_1282);
        switchInt(move _1320) -> [0: bb545, 1: bb546, otherwise: bb4];
    }

    bb545: {
        StorageLive(_1324);
        _1324 = ((_1282 as Continue).0: bool);
        _1281 = _1324;
        StorageDead(_1324);
        StorageDead(_1317);
        StorageDead(_1307);
        StorageDead(_1296);
        StorageDead(_1292);
        StorageDead(_1290);
        StorageDead(_1288);
        StorageDead(_1285);
        StorageDead(_1282);
        StorageDead(_1281);
        StorageLive(_1325);
        StorageLive(_1326);
        StorageLive(_1327);
        StorageLive(_1328);
        StorageLive(_1329);
        StorageLive(_1330);
        _1330 = &mut (*_45);
        _1329 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1330) -> [return: bb548, unwind: bb809];
    }

    bb546: {
        StorageLive(_1321);
        _1321 = ((_1282 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1323);
        _1323 = _1321;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1323) -> [return: bb547, unwind: bb809];
    }

    bb547: {
        StorageDead(_1323);
        StorageDead(_1321);
        StorageDead(_1317);
        goto -> bb725;
    }

    bb548: {
        _1328 = &mut (*_1329);
        StorageDead(_1330);
        StorageLive(_1331);
        StorageLive(_1332);
        _1332 = &_239;
        _1331 = &(*_1332);
        StorageLive(_1333);
        StorageLive(_1334);
        _1334 = &_240;
        _1333 = &(*_1334);
        StorageLive(_1335);
        StorageLive(_1336);
        _1336 = &mut _241;
        _1335 = &mut (*_1336);
        StorageLive(_1337);
        _1337 = math::margin::MarginRequirementType::Initial;
        StorageLive(_1338);
        _1338 = _3;
        StorageLive(_1339);
        StorageLive(_1340);
        StorageLive(_1341);
        StorageLive(_1342);
        StorageLive(_1343);
        _1343 = _649;
        _1342 = <u64 as Cast>::cast::<i128>(move _1343) -> [return: bb549, unwind: bb809];
    }

    bb549: {
        StorageDead(_1343);
        _1341 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1342) -> [return: bb550, unwind: bb809];
    }

    bb550: {
        StorageDead(_1342);
        _1344 = discriminant(_1341);
        switchInt(move _1344) -> [0: bb551, 1: bb552, otherwise: bb4];
    }

    bb551: {
        StorageLive(_1348);
        _1348 = ((_1341 as Continue).0: i128);
        _1340 = _1348;
        StorageDead(_1348);
        _1349 = Eq(_1340, const i128::MIN);
        assert(!move _1349, "attempt to negate `{}`, which would overflow", _1340) -> [success: bb554, unwind: bb809];
    }

    bb552: {
        StorageLive(_1345);
        _1345 = ((_1341 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1347);
        _1347 = _1345;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1347) -> [return: bb553, unwind: bb809];
    }

    bb553: {
        StorageDead(_1347);
        StorageDead(_1345);
        StorageDead(_1340);
        StorageDead(_1339);
        StorageDead(_1338);
        StorageDead(_1337);
        StorageDead(_1335);
        StorageDead(_1333);
        StorageDead(_1331);
        StorageDead(_1328);
        StorageDead(_1327);
        goto -> bb724;
    }

    bb554: {
        _1339 = Neg(move _1340);
        StorageDead(_1340);
        StorageLive(_1350);
        _1350 = _5;
        StorageLive(_1351);
        StorageLive(_1352);
        StorageLive(_1353);
        StorageLive(_1354);
        _1354 = _961;
        _1353 = <u64 as Cast>::cast::<i128>(move _1354) -> [return: bb555, unwind: bb809];
    }

    bb555: {
        StorageDead(_1354);
        _1352 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1353) -> [return: bb556, unwind: bb809];
    }

    bb556: {
        StorageDead(_1353);
        _1355 = discriminant(_1352);
        switchInt(move _1355) -> [0: bb557, 1: bb558, otherwise: bb4];
    }

    bb557: {
        StorageLive(_1359);
        _1359 = ((_1352 as Continue).0: i128);
        _1351 = _1359;
        StorageDead(_1359);
        StorageLive(_1360);
        StorageLive(_1361);
        StorageLive(_1362);
        _1362 = &mut (*_69);
        _1361 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _1362) -> [return: bb560, unwind: bb809];
    }

    bb558: {
        StorageLive(_1356);
        _1356 = ((_1352 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1358);
        _1358 = _1356;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1358) -> [return: bb559, unwind: bb809];
    }

    bb559: {
        StorageDead(_1358);
        StorageDead(_1356);
        StorageDead(_1351);
        StorageDead(_1350);
        StorageDead(_1339);
        StorageDead(_1338);
        StorageDead(_1337);
        StorageDead(_1335);
        StorageDead(_1333);
        StorageDead(_1331);
        StorageDead(_1328);
        StorageDead(_1327);
        goto -> bb723;
    }

    bb560: {
        _1360 = &mut (*_1361);
        StorageDead(_1362);
        StorageLive(_1363);
        _1363 = (_81.4: i64);
        _1327 = User::meets_withdraw_margin_requirement_and_increment_fuel_bonus_swap(move _1328, move _1331, move _1333, move _1335, move _1337, move _1338, move _1339, move _1350, move _1351, move _1360, move _1363) -> [return: bb561, unwind: bb809];
    }

    bb561: {
        StorageDead(_1363);
        StorageDead(_1360);
        StorageDead(_1351);
        StorageDead(_1350);
        StorageDead(_1339);
        StorageDead(_1338);
        StorageDead(_1337);
        StorageDead(_1335);
        StorageDead(_1333);
        StorageDead(_1331);
        StorageDead(_1328);
        _1326 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1327) -> [return: bb562, unwind: bb809];
    }

    bb562: {
        StorageDead(_1327);
        _1364 = discriminant(_1326);
        switchInt(move _1364) -> [0: bb563, 1: bb564, otherwise: bb4];
    }

    bb563: {
        StorageLive(_1368);
        _1368 = ((_1326 as Continue).0: bool);
        _1325 = _1368;
        StorageDead(_1368);
        StorageDead(_1361);
        StorageDead(_1352);
        StorageDead(_1341);
        StorageDead(_1336);
        StorageDead(_1334);
        StorageDead(_1332);
        StorageDead(_1329);
        StorageDead(_1326);
        StorageDead(_1325);
        StorageLive(_1369);
        StorageLive(_1370);
        StorageLive(_1371);
        StorageLive(_1372);
        StorageLive(_1373);
        StorageLive(_1374);
        _1374 = &(*_57);
        _1373 = <RefMut<'_, User> as Deref>::deref(move _1374) -> [return: bb566, unwind: bb809];
    }

    bb564: {
        StorageLive(_1365);
        _1365 = ((_1326 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1367);
        _1367 = _1365;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1367) -> [return: bb565, unwind: bb809];
    }

    bb565: {
        StorageDead(_1367);
        StorageDead(_1365);
        StorageDead(_1361);
        goto -> bb723;
    }

    bb566: {
        _1372 = &(*_1373);
        StorageDead(_1374);
        StorageLive(_1375);
        StorageLive(_1376);
        _1376 = &_239;
        _1375 = &(*_1376);
        StorageLive(_1377);
        StorageLive(_1378);
        _1378 = &_240;
        _1377 = &(*_1378);
        StorageLive(_1379);
        StorageLive(_1380);
        _1380 = &mut _241;
        _1379 = &mut (*_1380);
        _1371 = math::margin::validate_spot_margin_trading(move _1372, move _1375, move _1377, move _1379) -> [return: bb567, unwind: bb809];
    }

    bb567: {
        StorageDead(_1379);
        StorageDead(_1377);
        StorageDead(_1375);
        StorageDead(_1372);
        _1370 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1371) -> [return: bb568, unwind: bb809];
    }

    bb568: {
        StorageDead(_1371);
        _1381 = discriminant(_1370);
        switchInt(move _1381) -> [0: bb569, 1: bb570, otherwise: bb4];
    }

    bb569: {
        StorageLive(_1385);
        _1385 = ((_1370 as Continue).0: ());
        _1369 = _1385;
        StorageDead(_1385);
        StorageDead(_1380);
        StorageDead(_1378);
        StorageDead(_1376);
        StorageDead(_1373);
        StorageDead(_1370);
        StorageDead(_1369);
        StorageLive(_1386);
        StorageLive(_1387);
        StorageLive(_1388);
        StorageLive(_1389);
        _1389 = &mut (*_57);
        _1388 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1389) -> [return: bb572, unwind: bb809];
    }

    bb570: {
        StorageLive(_1382);
        _1382 = ((_1370 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1384);
        _1384 = _1382;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1384) -> [return: bb571, unwind: bb809];
    }

    bb571: {
        StorageDead(_1384);
        StorageDead(_1382);
        StorageDead(_1380);
        StorageDead(_1378);
        StorageDead(_1376);
        StorageDead(_1373);
        StorageDead(_1370);
        StorageDead(_1369);
        goto -> bb734;
    }

    bb572: {
        _1387 = &mut (*_1388);
        StorageDead(_1389);
        StorageLive(_1390);
        _1390 = _44;
        _1386 = User::update_last_active_slot(move _1387, move _1390) -> [return: bb573, unwind: bb809];
    }

    bb573: {
        StorageDead(_1390);
        StorageDead(_1387);
        StorageDead(_1388);
        StorageDead(_1386);
        StorageLive(_1391);
        StorageLive(_1392);
        StorageLive(_1393);
        StorageLive(_1394);
        StorageLive(_1395);
        StorageLive(_1396);
        _1396 = &(*_45);
        _1395 = <RefMut<'_, User> as Deref>::deref(move _1396) -> [return: bb574, unwind: bb809];
    }

    bb574: {
        _1394 = &(*_1395);
        StorageDead(_1396);
        StorageLive(_1397);
        StorageLive(_1398);
        _1398 = &_239;
        _1397 = &(*_1398);
        StorageLive(_1399);
        StorageLive(_1400);
        _1400 = &_240;
        _1399 = &(*_1400);
        StorageLive(_1401);
        StorageLive(_1402);
        _1402 = &mut _241;
        _1401 = &mut (*_1402);
        _1393 = math::margin::validate_spot_margin_trading(move _1394, move _1397, move _1399, move _1401) -> [return: bb575, unwind: bb809];
    }

    bb575: {
        StorageDead(_1401);
        StorageDead(_1399);
        StorageDead(_1397);
        StorageDead(_1394);
        _1392 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1393) -> [return: bb576, unwind: bb809];
    }

    bb576: {
        StorageDead(_1393);
        _1403 = discriminant(_1392);
        switchInt(move _1403) -> [0: bb577, 1: bb578, otherwise: bb4];
    }

    bb577: {
        StorageLive(_1407);
        _1407 = ((_1392 as Continue).0: ());
        _1391 = _1407;
        StorageDead(_1407);
        StorageDead(_1402);
        StorageDead(_1400);
        StorageDead(_1398);
        StorageDead(_1395);
        StorageDead(_1392);
        StorageDead(_1391);
        StorageLive(_1408);
        StorageLive(_1409);
        StorageLive(_1410);
        StorageLive(_1411);
        _1411 = &mut (*_45);
        _1410 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1411) -> [return: bb580, unwind: bb809];
    }

    bb578: {
        StorageLive(_1404);
        _1404 = ((_1392 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1406);
        _1406 = _1404;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1406) -> [return: bb579, unwind: bb809];
    }

    bb579: {
        StorageDead(_1406);
        StorageDead(_1404);
        StorageDead(_1402);
        StorageDead(_1400);
        StorageDead(_1398);
        StorageDead(_1395);
        StorageDead(_1392);
        StorageDead(_1391);
        goto -> bb734;
    }

    bb580: {
        _1409 = &mut (*_1410);
        StorageDead(_1411);
        StorageLive(_1412);
        _1412 = _44;
        _1408 = User::update_last_active_slot(move _1409, move _1412) -> [return: bb581, unwind: bb809];
    }

    bb581: {
        StorageDead(_1412);
        StorageDead(_1409);
        StorageDead(_1410);
        StorageDead(_1408);
        StorageLive(_1413);
        StorageLive(_1414);
        StorageLive(_1415);
        StorageLive(_1416);
        StorageLive(_1417);
        _1417 = &(*_57);
        _1416 = <RefMut<'_, User> as Deref>::deref(move _1417) -> [return: bb582, unwind: bb809];
    }

    bb582: {
        _1415 = &(*_1416);
        StorageDead(_1417);
        _1414 = User::is_being_liquidated(move _1415) -> [return: bb583, unwind: bb809];
    }

    bb583: {
        switchInt(move _1414) -> [0: bb587, otherwise: bb584];
    }

    bb584: {
        StorageDead(_1416);
        StorageDead(_1415);
        StorageLive(_1418);
        StorageLive(_1419);
        StorageLive(_1420);
        StorageLive(_1421);
        _1421 = &mut (*_57);
        _1420 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1421) -> [return: bb585, unwind: bb809];
    }

    bb585: {
        _1419 = &mut (*_1420);
        StorageDead(_1421);
        _1418 = User::exit_liquidation(move _1419) -> [return: bb586, unwind: bb809];
    }

    bb586: {
        StorageDead(_1419);
        StorageDead(_1420);
        StorageDead(_1418);
        _1413 = const ();
        goto -> bb588;
    }

    bb587: {
        StorageDead(_1416);
        StorageDead(_1415);
        _1413 = const ();
        goto -> bb588;
    }

    bb588: {
        StorageDead(_1414);
        StorageDead(_1413);
        StorageLive(_1422);
        StorageLive(_1423);
        StorageLive(_1424);
        StorageLive(_1425);
        StorageLive(_1426);
        _1426 = &(*_45);
        _1425 = <RefMut<'_, User> as Deref>::deref(move _1426) -> [return: bb589, unwind: bb809];
    }

    bb589: {
        _1424 = &(*_1425);
        StorageDead(_1426);
        _1423 = User::is_being_liquidated(move _1424) -> [return: bb590, unwind: bb809];
    }

    bb590: {
        switchInt(move _1423) -> [0: bb594, otherwise: bb591];
    }

    bb591: {
        StorageDead(_1425);
        StorageDead(_1424);
        StorageLive(_1427);
        StorageLive(_1428);
        StorageLive(_1429);
        StorageLive(_1430);
        _1430 = &mut (*_45);
        _1429 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1430) -> [return: bb592, unwind: bb809];
    }

    bb592: {
        _1428 = &mut (*_1429);
        StorageDead(_1430);
        _1427 = User::exit_liquidation(move _1428) -> [return: bb593, unwind: bb809];
    }

    bb593: {
        StorageDead(_1428);
        StorageDead(_1429);
        StorageDead(_1427);
        _1422 = const ();
        goto -> bb595;
    }

    bb594: {
        StorageDead(_1425);
        StorageDead(_1424);
        _1422 = const ();
        goto -> bb595;
    }

    bb595: {
        StorageDead(_1423);
        StorageDead(_1422);
        StorageLive(_1431);
        StorageLive(_1432);
        StorageLive(_1433);
        StorageLive(_1434);
        _1434 = &_240;
        StorageLive(_1435);
        StorageLive(_1436);
        _1436 = &_2;
        _1435 = &(*_1436);
        _1433 = SpotMarketMap::<'_>::get_ref(move _1434, move _1435) -> [return: bb596, unwind: bb809];
    }

    bb596: {
        StorageDead(_1435);
        StorageDead(_1434);
        _1432 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1433) -> [return: bb597, unwind: bb809];
    }

    bb597: {
        StorageDead(_1433);
        _1437 = discriminant(_1432);
        switchInt(move _1437) -> [0: bb598, 1: bb599, otherwise: bb4];
    }

    bb598: {
        StorageLive(_1441);
        _1441 = move ((_1432 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1431 = move _1441;
        StorageDead(_1441);
        _1792 = discriminant(_1432);
        StorageDead(_1436);
        StorageDead(_1432);
        StorageLive(_1442);
        StorageLive(_1443);
        StorageLive(_1444);
        StorageLive(_1445);
        _1445 = &_240;
        StorageLive(_1446);
        StorageLive(_1447);
        _1447 = &_3;
        _1446 = &(*_1447);
        _1444 = SpotMarketMap::<'_>::get_ref(move _1445, move _1446) -> [return: bb601, unwind: bb765];
    }

    bb599: {
        StorageLive(_1438);
        _1438 = ((_1432 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1440);
        _1440 = _1438;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1440) -> [return: bb600, unwind: bb807];
    }

    bb600: {
        StorageDead(_1440);
        StorageDead(_1438);
        _1790 = discriminant(_1432);
        StorageDead(_1436);
        StorageDead(_1432);
        goto -> bb722;
    }

    bb601: {
        StorageDead(_1446);
        StorageDead(_1445);
        _1443 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1444) -> [return: bb602, unwind: bb765];
    }

    bb602: {
        StorageDead(_1444);
        _1448 = discriminant(_1443);
        switchInt(move _1448) -> [0: bb603, 1: bb604, otherwise: bb4];
    }

    bb603: {
        StorageLive(_1452);
        _1452 = move ((_1443 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1442 = move _1452;
        StorageDead(_1452);
        _1796 = discriminant(_1443);
        StorageDead(_1447);
        StorageDead(_1443);
        StorageLive(_1453);
        StorageLive(_1454);
        StorageLive(_1455);
        StorageLive(_1456);
        _1456 = &_240;
        StorageLive(_1457);
        StorageLive(_1458);
        _1458 = &_4;
        _1457 = &(*_1458);
        _1455 = SpotMarketMap::<'_>::get_ref(move _1456, move _1457) -> [return: bb606, unwind: bb764];
    }

    bb604: {
        StorageLive(_1449);
        _1449 = ((_1443 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1451);
        _1451 = _1449;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1451) -> [return: bb605, unwind: bb806];
    }

    bb605: {
        StorageDead(_1451);
        StorageDead(_1449);
        _1794 = discriminant(_1443);
        StorageDead(_1447);
        StorageDead(_1443);
        goto -> bb721;
    }

    bb606: {
        StorageDead(_1457);
        StorageDead(_1456);
        _1454 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1455) -> [return: bb607, unwind: bb764];
    }

    bb607: {
        StorageDead(_1455);
        _1459 = discriminant(_1454);
        switchInt(move _1459) -> [0: bb608, 1: bb609, otherwise: bb4];
    }

    bb608: {
        StorageLive(_1463);
        _1463 = move ((_1454 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1453 = move _1463;
        StorageDead(_1463);
        _1800 = discriminant(_1454);
        StorageDead(_1458);
        StorageDead(_1454);
        StorageLive(_1464);
        StorageLive(_1465);
        StorageLive(_1466);
        StorageLive(_1467);
        _1467 = &_240;
        StorageLive(_1468);
        StorageLive(_1469);
        _1469 = &_5;
        _1468 = &(*_1469);
        _1466 = SpotMarketMap::<'_>::get_ref(move _1467, move _1468) -> [return: bb611, unwind: bb763];
    }

    bb609: {
        StorageLive(_1460);
        _1460 = ((_1454 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1462);
        _1462 = _1460;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1462) -> [return: bb610, unwind: bb805];
    }

    bb610: {
        StorageDead(_1462);
        StorageDead(_1460);
        _1798 = discriminant(_1454);
        StorageDead(_1458);
        StorageDead(_1454);
        goto -> bb720;
    }

    bb611: {
        StorageDead(_1468);
        StorageDead(_1467);
        _1465 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1466) -> [return: bb612, unwind: bb763];
    }

    bb612: {
        StorageDead(_1466);
        _1470 = discriminant(_1465);
        switchInt(move _1470) -> [0: bb613, 1: bb614, otherwise: bb4];
    }

    bb613: {
        StorageLive(_1474);
        _1474 = move ((_1465 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1464 = move _1474;
        StorageDead(_1474);
        _1804 = discriminant(_1465);
        StorageDead(_1469);
        StorageDead(_1465);
        StorageLive(_1475);
        StorageLive(_1476);
        StorageLive(_1477);
        _1477 = _649;
        _1476 = Gt(move _1477, const 0_u64);
        switchInt(move _1476) -> [0: bb634, otherwise: bb616];
    }

    bb614: {
        StorageLive(_1471);
        _1471 = ((_1465 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1473);
        _1473 = _1471;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1473) -> [return: bb615, unwind: bb804];
    }

    bb615: {
        StorageDead(_1473);
        StorageDead(_1471);
        _1802 = discriminant(_1465);
        StorageDead(_1469);
        StorageDead(_1465);
        goto -> bb719;
    }

    bb616: {
        StorageDead(_1477);
        StorageLive(_1478);
        StorageLive(_1479);
        StorageLive(_1480);
        StorageLive(_1481);
        _1481 = &_1431;
        _1480 = <Ref<'_, SpotMarket> as Deref>::deref(move _1481) -> [return: bb617, unwind: bb762];
    }

    bb617: {
        _1479 = &(*_1480);
        StorageDead(_1481);
        _1478 = SpotMarket::get_token_program(move _1479) -> [return: bb618, unwind: bb762];
    }

    bb618: {
        StorageDead(_1479);
        StorageDead(_1480);
        StorageLive(_1482);
        StorageLive(_1483);
        StorageLive(_1484);
        StorageLive(_1485);
        StorageLive(_1486);
        StorageLive(_1487);
        StorageLive(_1488);
        StorageLive(_1489);
        _1714 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1489 = &(*_1714);
        _1488 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _1489) -> [return: bb619, unwind: bb762];
    }

    bb619: {
        _1487 = &mut _1488;
        StorageDead(_1489);
        StorageLive(_1490);
        StorageLive(_1491);
        _1491 = &_1478;
        _1490 = {closure@programs/drift/src/instructions/user.rs:1474:19: 1474:24} { token_program_pubkey: move _1491 };
        StorageDead(_1491);
        _1486 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::find::<{closure@programs/drift/src/instructions/user.rs:1474:19: 1474:24}>(move _1487, move _1490) -> [return: bb620, unwind: bb762];
    }

    bb620: {
        StorageDead(_1490);
        StorageDead(_1487);
        StorageLive(_1492);
        _1492 = {closure@programs/drift/src/instructions/user.rs:1475:18: 1475:23};
        _1485 = Option::<&anchor_lang::prelude::AccountInfo<'_>>::map::<std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>, {closure@programs/drift/src/instructions/user.rs:1475:18: 1475:23}>(move _1486, move _1492) -> [return: bb621, unwind: bb762];
    }

    bb621: {
        StorageDead(_1492);
        StorageDead(_1486);
        _1484 = Option::<std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>>::unwrap(move _1485) -> [return: bb622, unwind: bb762];
    }

    bb622: {
        StorageDead(_1485);
        _1483 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::unwrap(move _1484) -> [return: bb623, unwind: bb762];
    }

    bb623: {
        StorageDead(_1484);
        _1482 = &_1483;
        StorageDead(_1488);
        StorageLive(_1493);
        StorageLive(_1494);
        StorageLive(_1495);
        _1495 = &_1431;
        _1494 = <Ref<'_, SpotMarket> as Deref>::deref(move _1495) -> [return: bb624, unwind: bb762];
    }

    bb624: {
        StorageDead(_1495);
        _1493 = &((*_1494).2: anchor_lang::prelude::Pubkey);
        StorageLive(_1496);
        StorageLive(_1497);
        StorageLive(_1498);
        StorageLive(_1499);
        StorageLive(_1500);
        _1715 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1500 = &(*_1715);
        _1499 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _1500) -> [return: bb625, unwind: bb762];
    }

    bb625: {
        _1498 = &mut _1499;
        StorageDead(_1500);
        StorageLive(_1501);
        StorageLive(_1502);
        _1502 = &_1493;
        _1501 = {closure@programs/drift/src/instructions/user.rs:1483:19: 1483:24} { spot_market_mint: move _1502 };
        StorageDead(_1502);
        _1497 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::find::<{closure@programs/drift/src/instructions/user.rs:1483:19: 1483:24}>(move _1498, move _1501) -> [return: bb626, unwind: bb762];
    }

    bb626: {
        StorageDead(_1501);
        StorageDead(_1498);
        StorageLive(_1503);
        _1503 = {closure@programs/drift/src/instructions/user.rs:1484:18: 1484:23};
        _1496 = Option::<&anchor_lang::prelude::AccountInfo<'_>>::map::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>, {closure@programs/drift/src/instructions/user.rs:1484:18: 1484:23}>(move _1497, move _1503) -> [return: bb627, unwind: bb762];
    }

    bb627: {
        StorageDead(_1503);
        StorageDead(_1497);
        StorageDead(_1499);
        StorageLive(_1504);
        StorageLive(_1505);
        StorageLive(_1506);
        StorageLive(_1507);
        _1507 = &(*_1482);
        StorageLive(_1508);
        StorageLive(_1509);
        _1716 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1509 = &((*_1716).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1717 = deref_copy (*_1509);
        _1865 = (((_1717.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1508 = &(*_1865);
        StorageLive(_1510);
        StorageLive(_1511);
        _1718 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1511 = &((*_1718).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1719 = deref_copy (*_1511);
        _1866 = (((_1719.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1510 = &(*_1866);
        StorageLive(_1512);
        StorageLive(_1513);
        _1720 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1513 = &((*_1720).9: anchor_lang::prelude::AccountInfo<'_>);
        _1512 = &(*_1513);
        StorageLive(_1514);
        StorageLive(_1515);
        StorageLive(_1516);
        _1721 = deref_copy (*_35);
        _1867 = (((_1721.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _1516 = &(*_1867);
        _1515 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _1516) -> [return: bb628, unwind: bb762];
    }

    bb628: {
        StorageDead(_1516);
        _1514 = ((*_1515).15: u8);
        StorageLive(_1517);
        _1517 = _649;
        StorageLive(_1518);
        StorageLive(_1519);
        _1519 = &_1496;
        _1518 = &(*_1519);
        StorageLive(_1520);
        _1520 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        _1506 = send_from_program_vault(move _1507, move _1508, move _1510, move _1512, move _1514, move _1517, move _1518, move _1520) -> [return: bb629, unwind: bb762];
    }

    bb629: {
        StorageDead(_1520);
        StorageDead(_1518);
        StorageDead(_1517);
        StorageDead(_1514);
        StorageDead(_1512);
        StorageDead(_1510);
        StorageDead(_1508);
        StorageDead(_1507);
        _1505 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1506) -> [return: bb630, unwind: bb762];
    }

    bb630: {
        StorageDead(_1506);
        _1521 = discriminant(_1505);
        switchInt(move _1521) -> [0: bb631, 1: bb632, otherwise: bb4];
    }

    bb631: {
        StorageLive(_1525);
        _1525 = ((_1505 as Continue).0: ());
        _1504 = _1525;
        StorageDead(_1525);
        _1806 = discriminant(_1505);
        StorageDead(_1519);
        StorageDead(_1515);
        StorageDead(_1513);
        StorageDead(_1511);
        StorageDead(_1509);
        StorageDead(_1505);
        StorageDead(_1504);
        _1475 = const ();
        StorageDead(_1496);
        StorageDead(_1494);
        StorageDead(_1493);
        StorageDead(_1483);
        StorageDead(_1482);
        StorageDead(_1478);
        goto -> bb635;
    }

    bb632: {
        StorageLive(_1522);
        _1522 = move ((_1505 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1524);
        _1524 = move _1522;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1524) -> [return: bb633, unwind: bb803];
    }

    bb633: {
        StorageDead(_1524);
        StorageDead(_1522);
        _1828 = discriminant(_1505);
        StorageDead(_1519);
        StorageDead(_1515);
        StorageDead(_1513);
        StorageDead(_1511);
        StorageDead(_1509);
        StorageDead(_1505);
        StorageDead(_1504);
        StorageDead(_1496);
        StorageDead(_1494);
        StorageDead(_1493);
        StorageDead(_1483);
        StorageDead(_1482);
        StorageDead(_1478);
        StorageDead(_1476);
        StorageDead(_1475);
        goto -> bb718;
    }

    bb634: {
        StorageDead(_1477);
        _1475 = const ();
        goto -> bb635;
    }

    bb635: {
        StorageDead(_1476);
        StorageDead(_1475);
        StorageLive(_1526);
        StorageLive(_1527);
        StorageLive(_1528);
        _1528 = _961;
        _1527 = Gt(move _1528, const 0_u64);
        switchInt(move _1527) -> [0: bb654, otherwise: bb636];
    }

    bb636: {
        StorageDead(_1528);
        StorageLive(_1529);
        StorageLive(_1530);
        StorageLive(_1531);
        StorageLive(_1532);
        _1532 = &_1464;
        _1531 = <Ref<'_, SpotMarket> as Deref>::deref(move _1532) -> [return: bb637, unwind: bb762];
    }

    bb637: {
        _1530 = &(*_1531);
        StorageDead(_1532);
        _1529 = SpotMarket::get_token_program(move _1530) -> [return: bb638, unwind: bb762];
    }

    bb638: {
        StorageDead(_1530);
        StorageDead(_1531);
        StorageLive(_1533);
        StorageLive(_1534);
        StorageLive(_1535);
        StorageLive(_1536);
        StorageLive(_1537);
        StorageLive(_1538);
        StorageLive(_1539);
        StorageLive(_1540);
        _1722 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1540 = &(*_1722);
        _1539 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _1540) -> [return: bb639, unwind: bb762];
    }

    bb639: {
        _1538 = &mut _1539;
        StorageDead(_1540);
        StorageLive(_1541);
        StorageLive(_1542);
        _1542 = &_1529;
        _1541 = {closure@programs/drift/src/instructions/user.rs:1504:19: 1504:24} { token_program_pubkey: move _1542 };
        StorageDead(_1542);
        _1537 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::find::<{closure@programs/drift/src/instructions/user.rs:1504:19: 1504:24}>(move _1538, move _1541) -> [return: bb640, unwind: bb762];
    }

    bb640: {
        StorageDead(_1541);
        StorageDead(_1538);
        StorageLive(_1543);
        _1543 = {closure@programs/drift/src/instructions/user.rs:1505:18: 1505:23};
        _1536 = Option::<&anchor_lang::prelude::AccountInfo<'_>>::map::<std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>, {closure@programs/drift/src/instructions/user.rs:1505:18: 1505:23}>(move _1537, move _1543) -> [return: bb641, unwind: bb762];
    }

    bb641: {
        StorageDead(_1543);
        StorageDead(_1537);
        _1535 = Option::<std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>>::unwrap(move _1536) -> [return: bb642, unwind: bb762];
    }

    bb642: {
        StorageDead(_1536);
        _1534 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::unwrap(move _1535) -> [return: bb643, unwind: bb762];
    }

    bb643: {
        StorageDead(_1535);
        _1533 = &_1534;
        StorageDead(_1539);
        StorageLive(_1544);
        StorageLive(_1545);
        StorageLive(_1546);
        _1546 = &_1464;
        _1545 = <Ref<'_, SpotMarket> as Deref>::deref(move _1546) -> [return: bb644, unwind: bb762];
    }

    bb644: {
        StorageDead(_1546);
        _1544 = &((*_1545).2: anchor_lang::prelude::Pubkey);
        StorageLive(_1547);
        StorageLive(_1548);
        StorageLive(_1549);
        StorageLive(_1550);
        StorageLive(_1551);
        _1723 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1551 = &(*_1723);
        _1550 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _1551) -> [return: bb645, unwind: bb762];
    }

    bb645: {
        _1549 = &mut _1550;
        StorageDead(_1551);
        StorageLive(_1552);
        StorageLive(_1553);
        _1553 = &_1544;
        _1552 = {closure@programs/drift/src/instructions/user.rs:1513:19: 1513:24} { spot_market_mint: move _1553 };
        StorageDead(_1553);
        _1548 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::find::<{closure@programs/drift/src/instructions/user.rs:1513:19: 1513:24}>(move _1549, move _1552) -> [return: bb646, unwind: bb762];
    }

    bb646: {
        StorageDead(_1552);
        StorageDead(_1549);
        StorageLive(_1554);
        _1554 = {closure@programs/drift/src/instructions/user.rs:1514:18: 1514:23};
        _1547 = Option::<&anchor_lang::prelude::AccountInfo<'_>>::map::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>, {closure@programs/drift/src/instructions/user.rs:1514:18: 1514:23}>(move _1548, move _1554) -> [return: bb647, unwind: bb762];
    }

    bb647: {
        StorageDead(_1554);
        StorageDead(_1548);
        StorageDead(_1550);
        StorageLive(_1555);
        StorageLive(_1556);
        StorageLive(_1557);
        StorageLive(_1558);
        _1558 = &(*_1533);
        StorageLive(_1559);
        StorageLive(_1560);
        _1724 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1560 = &((*_1724).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1725 = deref_copy (*_1560);
        _1868 = (((_1725.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1559 = &(*_1868);
        StorageLive(_1561);
        StorageLive(_1562);
        _1726 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1562 = &((*_1726).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1727 = deref_copy (*_1562);
        _1869 = (((_1727.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1561 = &(*_1869);
        StorageLive(_1563);
        StorageLive(_1564);
        _1728 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1564 = &((*_1728).9: anchor_lang::prelude::AccountInfo<'_>);
        _1563 = &(*_1564);
        StorageLive(_1565);
        StorageLive(_1566);
        StorageLive(_1567);
        _1729 = deref_copy (*_35);
        _1870 = (((_1729.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _1567 = &(*_1870);
        _1566 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _1567) -> [return: bb648, unwind: bb762];
    }

    bb648: {
        StorageDead(_1567);
        _1565 = ((*_1566).15: u8);
        StorageLive(_1568);
        _1568 = _961;
        StorageLive(_1569);
        StorageLive(_1570);
        _1570 = &_1547;
        _1569 = &(*_1570);
        StorageLive(_1571);
        _1571 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        _1557 = send_from_program_vault(move _1558, move _1559, move _1561, move _1563, move _1565, move _1568, move _1569, move _1571) -> [return: bb649, unwind: bb762];
    }

    bb649: {
        StorageDead(_1571);
        StorageDead(_1569);
        StorageDead(_1568);
        StorageDead(_1565);
        StorageDead(_1563);
        StorageDead(_1561);
        StorageDead(_1559);
        StorageDead(_1558);
        _1556 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1557) -> [return: bb650, unwind: bb762];
    }

    bb650: {
        StorageDead(_1557);
        _1572 = discriminant(_1556);
        switchInt(move _1572) -> [0: bb651, 1: bb652, otherwise: bb4];
    }

    bb651: {
        StorageLive(_1576);
        _1576 = ((_1556 as Continue).0: ());
        _1555 = _1576;
        StorageDead(_1576);
        _1808 = discriminant(_1556);
        StorageDead(_1570);
        StorageDead(_1566);
        StorageDead(_1564);
        StorageDead(_1562);
        StorageDead(_1560);
        StorageDead(_1556);
        StorageDead(_1555);
        _1526 = const ();
        StorageDead(_1547);
        StorageDead(_1545);
        StorageDead(_1544);
        StorageDead(_1534);
        StorageDead(_1533);
        StorageDead(_1529);
        goto -> bb655;
    }

    bb652: {
        StorageLive(_1573);
        _1573 = move ((_1556 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1575);
        _1575 = move _1573;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1575) -> [return: bb653, unwind: bb802];
    }

    bb653: {
        StorageDead(_1575);
        StorageDead(_1573);
        _1826 = discriminant(_1556);
        StorageDead(_1570);
        StorageDead(_1566);
        StorageDead(_1564);
        StorageDead(_1562);
        StorageDead(_1560);
        StorageDead(_1556);
        StorageDead(_1555);
        StorageDead(_1547);
        StorageDead(_1545);
        StorageDead(_1544);
        StorageDead(_1534);
        StorageDead(_1533);
        StorageDead(_1529);
        StorageDead(_1527);
        StorageDead(_1526);
        goto -> bb718;
    }

    bb654: {
        StorageDead(_1528);
        _1526 = const ();
        goto -> bb655;
    }

    bb655: {
        StorageDead(_1527);
        StorageDead(_1526);
        StorageLive(_1577);
        StorageLive(_1578);
        StorageLive(_1579);
        StorageLive(_1580);
        _1730 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1731 = deref_copy ((*_1730).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1871 = (((_1731.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1580 = &mut (*_1871);
        _1579 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _1580) -> [return: bb656, unwind: bb762];
    }

    bb656: {
        StorageDead(_1580);
        _1578 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1579) -> [return: bb657, unwind: bb762];
    }

    bb657: {
        StorageDead(_1579);
        _1581 = discriminant(_1578);
        switchInt(move _1581) -> [0: bb658, 1: bb659, otherwise: bb4];
    }

    bb658: {
        StorageLive(_1585);
        _1585 = ((_1578 as Continue).0: ());
        _1577 = _1585;
        StorageDead(_1585);
        _1810 = discriminant(_1578);
        StorageDead(_1578);
        StorageDead(_1577);
        StorageLive(_1586);
        StorageLive(_1587);
        StorageLive(_1588);
        StorageLive(_1589);
        StorageLive(_1590);
        StorageLive(_1591);
        StorageLive(_1592);
        _1592 = &_1431;
        _1591 = &(*_1592);
        _1590 = <Ref<'_, SpotMarket> as Deref>::deref(move _1591) -> [return: bb661, unwind: bb762];
    }

    bb659: {
        StorageLive(_1582);
        _1582 = move ((_1578 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1584);
        _1584 = move _1582;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1584) -> [return: bb660, unwind: bb801];
    }

    bb660: {
        StorageDead(_1584);
        StorageDead(_1582);
        _1824 = discriminant(_1578);
        StorageDead(_1578);
        StorageDead(_1577);
        goto -> bb718;
    }

    bb661: {
        _1589 = &(*_1590);
        StorageDead(_1591);
        StorageLive(_1593);
        StorageLive(_1594);
        StorageLive(_1595);
        StorageLive(_1596);
        StorageLive(_1597);
        _1732 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1733 = deref_copy ((*_1732).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1872 = (((_1733.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1597 = &(*_1872);
        _1596 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1597) -> [return: bb662, unwind: bb762];
    }

    bb662: {
        _1595 = &(*_1596);
        _1594 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1595) -> [return: bb663, unwind: bb762];
    }

    bb663: {
        StorageDead(_1597);
        StorageDead(_1595);
        _1593 = ((*_1594).2: u64);
        _1588 = validate_spot_market_vault_amount(move _1589, move _1593) -> [return: bb664, unwind: bb762];
    }

    bb664: {
        StorageDead(_1593);
        StorageDead(_1589);
        _1587 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1588) -> [return: bb665, unwind: bb762];
    }

    bb665: {
        StorageDead(_1588);
        _1598 = discriminant(_1587);
        switchInt(move _1598) -> [0: bb666, 1: bb667, otherwise: bb4];
    }

    bb666: {
        StorageLive(_1602);
        _1602 = ((_1587 as Continue).0: i64);
        _1586 = _1602;
        StorageDead(_1602);
        StorageDead(_1596);
        StorageDead(_1594);
        StorageDead(_1592);
        StorageDead(_1590);
        StorageDead(_1587);
        StorageDead(_1586);
        StorageLive(_1603);
        StorageLive(_1604);
        StorageLive(_1605);
        StorageLive(_1606);
        _1734 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1735 = deref_copy ((*_1734).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1873 = (((_1735.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1606 = &mut (*_1873);
        _1605 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _1606) -> [return: bb669, unwind: bb762];
    }

    bb667: {
        StorageLive(_1599);
        _1599 = ((_1587 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1601);
        _1601 = _1599;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1601) -> [return: bb668, unwind: bb762];
    }

    bb668: {
        StorageDead(_1601);
        StorageDead(_1599);
        StorageDead(_1596);
        StorageDead(_1594);
        StorageDead(_1592);
        StorageDead(_1590);
        StorageDead(_1587);
        StorageDead(_1586);
        goto -> bb718;
    }

    bb669: {
        StorageDead(_1606);
        _1604 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1605) -> [return: bb670, unwind: bb762];
    }

    bb670: {
        StorageDead(_1605);
        _1607 = discriminant(_1604);
        switchInt(move _1607) -> [0: bb671, 1: bb672, otherwise: bb4];
    }

    bb671: {
        StorageLive(_1611);
        _1611 = ((_1604 as Continue).0: ());
        _1603 = _1611;
        StorageDead(_1611);
        _1812 = discriminant(_1604);
        StorageDead(_1604);
        StorageDead(_1603);
        StorageLive(_1612);
        StorageLive(_1613);
        StorageLive(_1614);
        StorageLive(_1615);
        StorageLive(_1616);
        StorageLive(_1617);
        StorageLive(_1618);
        _1618 = &_1442;
        _1617 = &(*_1618);
        _1616 = <Ref<'_, SpotMarket> as Deref>::deref(move _1617) -> [return: bb674, unwind: bb762];
    }

    bb672: {
        StorageLive(_1608);
        _1608 = move ((_1604 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1610);
        _1610 = move _1608;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1610) -> [return: bb673, unwind: bb800];
    }

    bb673: {
        StorageDead(_1610);
        StorageDead(_1608);
        _1822 = discriminant(_1604);
        StorageDead(_1604);
        StorageDead(_1603);
        goto -> bb718;
    }

    bb674: {
        _1615 = &(*_1616);
        StorageDead(_1617);
        StorageLive(_1619);
        StorageLive(_1620);
        StorageLive(_1621);
        StorageLive(_1622);
        StorageLive(_1623);
        _1736 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1737 = deref_copy ((*_1736).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1874 = (((_1737.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1623 = &(*_1874);
        _1622 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1623) -> [return: bb675, unwind: bb762];
    }

    bb675: {
        _1621 = &(*_1622);
        _1620 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1621) -> [return: bb676, unwind: bb762];
    }

    bb676: {
        StorageDead(_1623);
        StorageDead(_1621);
        _1619 = ((*_1620).2: u64);
        _1614 = validate_spot_market_vault_amount(move _1615, move _1619) -> [return: bb677, unwind: bb762];
    }

    bb677: {
        StorageDead(_1619);
        StorageDead(_1615);
        _1613 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1614) -> [return: bb678, unwind: bb762];
    }

    bb678: {
        StorageDead(_1614);
        _1624 = discriminant(_1613);
        switchInt(move _1624) -> [0: bb679, 1: bb680, otherwise: bb4];
    }

    bb679: {
        StorageLive(_1628);
        _1628 = ((_1613 as Continue).0: i64);
        _1612 = _1628;
        StorageDead(_1628);
        StorageDead(_1622);
        StorageDead(_1620);
        StorageDead(_1618);
        StorageDead(_1616);
        StorageDead(_1613);
        StorageDead(_1612);
        StorageLive(_1629);
        StorageLive(_1630);
        StorageLive(_1631);
        StorageLive(_1632);
        _1738 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1739 = deref_copy ((*_1738).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1875 = (((_1739.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1632 = &mut (*_1875);
        _1631 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _1632) -> [return: bb682, unwind: bb762];
    }

    bb680: {
        StorageLive(_1625);
        _1625 = ((_1613 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1627);
        _1627 = _1625;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1627) -> [return: bb681, unwind: bb762];
    }

    bb681: {
        StorageDead(_1627);
        StorageDead(_1625);
        StorageDead(_1622);
        StorageDead(_1620);
        StorageDead(_1618);
        StorageDead(_1616);
        StorageDead(_1613);
        StorageDead(_1612);
        goto -> bb718;
    }

    bb682: {
        StorageDead(_1632);
        _1630 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1631) -> [return: bb683, unwind: bb762];
    }

    bb683: {
        StorageDead(_1631);
        _1633 = discriminant(_1630);
        switchInt(move _1633) -> [0: bb684, 1: bb685, otherwise: bb4];
    }

    bb684: {
        StorageLive(_1637);
        _1637 = ((_1630 as Continue).0: ());
        _1629 = _1637;
        StorageDead(_1637);
        _1814 = discriminant(_1630);
        StorageDead(_1630);
        StorageDead(_1629);
        StorageLive(_1638);
        StorageLive(_1639);
        StorageLive(_1640);
        StorageLive(_1641);
        StorageLive(_1642);
        StorageLive(_1643);
        StorageLive(_1644);
        _1644 = &_1453;
        _1643 = &(*_1644);
        _1642 = <Ref<'_, SpotMarket> as Deref>::deref(move _1643) -> [return: bb687, unwind: bb762];
    }

    bb685: {
        StorageLive(_1634);
        _1634 = move ((_1630 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1636);
        _1636 = move _1634;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1636) -> [return: bb686, unwind: bb799];
    }

    bb686: {
        StorageDead(_1636);
        StorageDead(_1634);
        _1820 = discriminant(_1630);
        StorageDead(_1630);
        StorageDead(_1629);
        goto -> bb718;
    }

    bb687: {
        _1641 = &(*_1642);
        StorageDead(_1643);
        StorageLive(_1645);
        StorageLive(_1646);
        StorageLive(_1647);
        StorageLive(_1648);
        StorageLive(_1649);
        _1740 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1741 = deref_copy ((*_1740).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1876 = (((_1741.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1649 = &(*_1876);
        _1648 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1649) -> [return: bb688, unwind: bb762];
    }

    bb688: {
        _1647 = &(*_1648);
        _1646 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1647) -> [return: bb689, unwind: bb762];
    }

    bb689: {
        StorageDead(_1649);
        StorageDead(_1647);
        _1645 = ((*_1646).2: u64);
        _1640 = validate_spot_market_vault_amount(move _1641, move _1645) -> [return: bb690, unwind: bb762];
    }

    bb690: {
        StorageDead(_1645);
        StorageDead(_1641);
        _1639 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1640) -> [return: bb691, unwind: bb762];
    }

    bb691: {
        StorageDead(_1640);
        _1650 = discriminant(_1639);
        switchInt(move _1650) -> [0: bb692, 1: bb693, otherwise: bb4];
    }

    bb692: {
        StorageLive(_1654);
        _1654 = ((_1639 as Continue).0: i64);
        _1638 = _1654;
        StorageDead(_1654);
        StorageDead(_1648);
        StorageDead(_1646);
        StorageDead(_1644);
        StorageDead(_1642);
        StorageDead(_1639);
        StorageDead(_1638);
        StorageLive(_1655);
        StorageLive(_1656);
        StorageLive(_1657);
        StorageLive(_1658);
        _1742 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1743 = deref_copy ((*_1742).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1877 = (((_1743.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1658 = &mut (*_1877);
        _1657 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _1658) -> [return: bb695, unwind: bb762];
    }

    bb693: {
        StorageLive(_1651);
        _1651 = ((_1639 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1653);
        _1653 = _1651;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1653) -> [return: bb694, unwind: bb762];
    }

    bb694: {
        StorageDead(_1653);
        StorageDead(_1651);
        StorageDead(_1648);
        StorageDead(_1646);
        StorageDead(_1644);
        StorageDead(_1642);
        StorageDead(_1639);
        StorageDead(_1638);
        goto -> bb718;
    }

    bb695: {
        StorageDead(_1658);
        _1656 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1657) -> [return: bb696, unwind: bb762];
    }

    bb696: {
        StorageDead(_1657);
        _1659 = discriminant(_1656);
        switchInt(move _1659) -> [0: bb697, 1: bb698, otherwise: bb4];
    }

    bb697: {
        StorageLive(_1663);
        _1663 = ((_1656 as Continue).0: ());
        _1655 = _1663;
        StorageDead(_1663);
        _1816 = discriminant(_1656);
        StorageDead(_1656);
        StorageDead(_1655);
        StorageLive(_1664);
        StorageLive(_1665);
        StorageLive(_1666);
        StorageLive(_1667);
        StorageLive(_1668);
        StorageLive(_1669);
        StorageLive(_1670);
        _1670 = &_1464;
        _1669 = &(*_1670);
        _1668 = <Ref<'_, SpotMarket> as Deref>::deref(move _1669) -> [return: bb700, unwind: bb762];
    }

    bb698: {
        StorageLive(_1660);
        _1660 = move ((_1656 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1662);
        _1662 = move _1660;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1662) -> [return: bb699, unwind: bb798];
    }

    bb699: {
        StorageDead(_1662);
        StorageDead(_1660);
        _1818 = discriminant(_1656);
        StorageDead(_1656);
        StorageDead(_1655);
        goto -> bb718;
    }

    bb700: {
        _1667 = &(*_1668);
        StorageDead(_1669);
        StorageLive(_1671);
        StorageLive(_1672);
        StorageLive(_1673);
        StorageLive(_1674);
        StorageLive(_1675);
        _1744 = deref_copy (_1.1: &mut instructions::user::TransferPools<'_>);
        _1745 = deref_copy ((*_1744).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1878 = (((_1745.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1675 = &(*_1878);
        _1674 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1675) -> [return: bb701, unwind: bb762];
    }

    bb701: {
        _1673 = &(*_1674);
        _1672 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1673) -> [return: bb702, unwind: bb762];
    }

    bb702: {
        StorageDead(_1675);
        StorageDead(_1673);
        _1671 = ((*_1672).2: u64);
        _1666 = validate_spot_market_vault_amount(move _1667, move _1671) -> [return: bb703, unwind: bb762];
    }

    bb703: {
        StorageDead(_1671);
        StorageDead(_1667);
        _1665 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1666) -> [return: bb704, unwind: bb762];
    }

    bb704: {
        StorageDead(_1666);
        _1676 = discriminant(_1665);
        switchInt(move _1676) -> [0: bb705, 1: bb706, otherwise: bb4];
    }

    bb705: {
        StorageLive(_1680);
        _1680 = ((_1665 as Continue).0: i64);
        _1664 = _1680;
        StorageDead(_1680);
        StorageDead(_1674);
        StorageDead(_1672);
        StorageDead(_1670);
        StorageDead(_1668);
        StorageDead(_1665);
        StorageDead(_1664);
        StorageLive(_1681);
        _1681 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _1681);
        StorageDead(_1681);
        drop(_1464) -> [return: bb708, unwind: bb763];
    }

    bb706: {
        StorageLive(_1677);
        _1677 = ((_1665 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1679);
        _1679 = _1677;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1679) -> [return: bb707, unwind: bb762];
    }

    bb707: {
        StorageDead(_1679);
        StorageDead(_1677);
        StorageDead(_1674);
        StorageDead(_1672);
        StorageDead(_1670);
        StorageDead(_1668);
        StorageDead(_1665);
        StorageDead(_1664);
        goto -> bb718;
    }

    bb708: {
        StorageDead(_1464);
        drop(_1453) -> [return: bb709, unwind: bb764];
    }

    bb709: {
        StorageDead(_1453);
        drop(_1442) -> [return: bb710, unwind: bb765];
    }

    bb710: {
        StorageDead(_1442);
        drop(_1431) -> [return: bb711, unwind: bb809];
    }

    bb711: {
        StorageDead(_1431);
        StorageDead(_961);
        StorageDead(_649);
        StorageDead(_569);
        StorageDead(_553);
        StorageDead(_537);
        StorageDead(_521);
        _1746 = const false;
        StorageDead(_310);
        _1747 = const false;
        StorageDead(_299);
        _1748 = const false;
        StorageDead(_288);
        _1749 = const false;
        StorageDead(_277);
        drop(_241) -> [return: bb712, unwind: bb781];
    }

    bb712: {
        StorageDead(_241);
        drop(_240) -> [return: bb713, unwind: bb782];
    }

    bb713: {
        StorageDead(_240);
        drop(_239) -> [return: bb714, unwind: bb789];
    }

    bb714: {
        StorageDead(_239);
        StorageDead(_81);
        drop(_70) -> [return: bb715, unwind: bb790];
    }

    bb715: {
        StorageDead(_70);
        StorageDead(_69);
        drop(_58) -> [return: bb716, unwind: bb791];
    }

    bb716: {
        StorageDead(_58);
        StorageDead(_57);
        drop(_46) -> [return: bb717, unwind: bb792];
    }

    bb717: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_28);
        goto -> bb761;
    }

    bb718: {
        drop(_1464) -> [return: bb719, unwind: bb763];
    }

    bb719: {
        StorageDead(_1464);
        drop(_1453) -> [return: bb720, unwind: bb764];
    }

    bb720: {
        StorageDead(_1453);
        drop(_1442) -> [return: bb721, unwind: bb765];
    }

    bb721: {
        StorageDead(_1442);
        drop(_1431) -> [return: bb722, unwind: bb809];
    }

    bb722: {
        StorageDead(_1431);
        goto -> bb734;
    }

    bb723: {
        StorageDead(_1352);
        goto -> bb724;
    }

    bb724: {
        StorageDead(_1341);
        StorageDead(_1336);
        StorageDead(_1334);
        StorageDead(_1332);
        StorageDead(_1329);
        StorageDead(_1326);
        StorageDead(_1325);
        goto -> bb734;
    }

    bb725: {
        StorageDead(_1307);
        goto -> bb726;
    }

    bb726: {
        StorageDead(_1296);
        StorageDead(_1292);
        StorageDead(_1290);
        StorageDead(_1288);
        StorageDead(_1285);
        StorageDead(_1282);
        StorageDead(_1281);
        goto -> bb734;
    }

    bb727: {
        StorageDead(_1187);
        StorageDead(_1183);
        StorageDead(_1178);
        StorageDead(_1175);
        StorageDead(_1174);
        goto -> bb728;
    }

    bb728: {
        StorageDead(_1131);
        StorageDead(_1120);
        goto -> bb730;
    }

    bb729: {
        StorageDead(_1088);
        StorageDead(_1084);
        StorageDead(_1079);
        StorageDead(_1076);
        StorageDead(_1075);
        goto -> bb730;
    }

    bb730: {
        StorageDead(_1073);
        StorageDead(_1072);
        goto -> bb734;
    }

    bb731: {
        StorageDead(_1022);
        StorageDead(_1020);
        StorageDead(_1016);
        StorageDead(_1013);
        goto -> bb732;
    }

    bb732: {
        StorageDead(_1012);
        goto -> bb733;
    }

    bb733: {
        StorageDead(_963);
        goto -> bb734;
    }

    bb734: {
        StorageDead(_961);
        goto -> bb742;
    }

    bb735: {
        StorageDead(_875);
        StorageDead(_871);
        StorageDead(_866);
        StorageDead(_863);
        StorageDead(_862);
        goto -> bb736;
    }

    bb736: {
        StorageDead(_819);
        StorageDead(_808);
        goto -> bb738;
    }

    bb737: {
        StorageDead(_776);
        StorageDead(_772);
        StorageDead(_767);
        StorageDead(_764);
        StorageDead(_763);
        goto -> bb738;
    }

    bb738: {
        StorageDead(_761);
        StorageDead(_760);
        goto -> bb742;
    }

    bb739: {
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_704);
        StorageDead(_701);
        goto -> bb740;
    }

    bb740: {
        StorageDead(_700);
        goto -> bb741;
    }

    bb741: {
        StorageDead(_651);
        goto -> bb742;
    }

    bb742: {
        StorageDead(_649);
        goto -> bb743;
    }

    bb743: {
        StorageDead(_569);
        goto -> bb744;
    }

    bb744: {
        StorageDead(_553);
        goto -> bb745;
    }

    bb745: {
        StorageDead(_537);
        goto -> bb746;
    }

    bb746: {
        StorageDead(_521);
        goto -> bb794;
    }

    bb747: {
        _1746 = const false;
        StorageDead(_310);
        switchInt(_1747) -> [0: bb748, otherwise: bb795];
    }

    bb748: {
        _1747 = const false;
        StorageDead(_299);
        switchInt(_1748) -> [0: bb749, otherwise: bb796];
    }

    bb749: {
        _1748 = const false;
        StorageDead(_288);
        switchInt(_1749) -> [0: bb750, otherwise: bb797];
    }

    bb750: {
        _1749 = const false;
        StorageDead(_277);
        drop(_241) -> [return: bb751, unwind: bb781];
    }

    bb751: {
        StorageDead(_241);
        drop(_240) -> [return: bb752, unwind: bb782];
    }

    bb752: {
        StorageDead(_240);
        drop(_239) -> [return: bb753, unwind: bb789];
    }

    bb753: {
        StorageDead(_239);
        goto -> bb756;
    }

    bb754: {
        StorageDead(_255);
        StorageDead(_254);
        drop(_252) -> [return: bb755, unwind: bb789];
    }

    bb755: {
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb756;
    }

    bb756: {
        StorageDead(_81);
        drop(_70) -> [return: bb757, unwind: bb790];
    }

    bb757: {
        StorageDead(_70);
        StorageDead(_69);
        drop(_58) -> [return: bb758, unwind: bb791];
    }

    bb758: {
        StorageDead(_58);
        StorageDead(_57);
        drop(_46) -> [return: bb759, unwind: bb792];
    }

    bb759: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb760;
    }

    bb760: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_28);
        goto -> bb761;
    }

    bb761: {
        return;
    }

    bb762 (cleanup): {
        drop(_1464) -> [return: bb763, unwind terminate(cleanup)];
    }

    bb763 (cleanup): {
        drop(_1453) -> [return: bb764, unwind terminate(cleanup)];
    }

    bb764 (cleanup): {
        drop(_1442) -> [return: bb765, unwind terminate(cleanup)];
    }

    bb765 (cleanup): {
        drop(_1431) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb766 (cleanup): {
        drop(_1270) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb767 (cleanup): {
        drop(_1171) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb768 (cleanup): {
        drop(_1049) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb769 (cleanup): {
        drop(_989) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb770 (cleanup): {
        drop(_958) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb771 (cleanup): {
        drop(_859) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb772 (cleanup): {
        drop(_737) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb773 (cleanup): {
        drop(_677) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb774 (cleanup): {
        drop(_498) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb775 (cleanup): {
        drop(_458) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb776 (cleanup): {
        drop(_418) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb777 (cleanup): {
        drop(_378) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb778 (cleanup): {
        drop(_338) -> [return: bb809, unwind terminate(cleanup)];
    }

    bb779 (cleanup): {
        drop(_252) -> [return: bb780, unwind terminate(cleanup)];
    }

    bb780 (cleanup): {
        drop(_241) -> [return: bb781, unwind terminate(cleanup)];
    }

    bb781 (cleanup): {
        drop(_240) -> [return: bb782, unwind terminate(cleanup)];
    }

    bb782 (cleanup): {
        drop(_239) -> [return: bb789, unwind terminate(cleanup)];
    }

    bb783 (cleanup): {
        drop(_255) -> [return: bb784, unwind terminate(cleanup)];
    }

    bb784 (cleanup): {
        drop(_252) -> [return: bb789, unwind terminate(cleanup)];
    }

    bb785 (cleanup): {
        drop(_216) -> [return: bb789, unwind terminate(cleanup)];
    }

    bb786 (cleanup): {
        drop(_176) -> [return: bb789, unwind terminate(cleanup)];
    }

    bb787 (cleanup): {
        drop(_140) -> [return: bb789, unwind terminate(cleanup)];
    }

    bb788 (cleanup): {
        drop(_103) -> [return: bb789, unwind terminate(cleanup)];
    }

    bb789 (cleanup): {
        drop(_70) -> [return: bb790, unwind terminate(cleanup)];
    }

    bb790 (cleanup): {
        drop(_58) -> [return: bb791, unwind terminate(cleanup)];
    }

    bb791 (cleanup): {
        drop(_46) -> [return: bb792, unwind terminate(cleanup)];
    }

    bb792 (cleanup): {
        resume;
    }

    bb793: {
        drop(_310) -> [return: bb747, unwind: bb812];
    }

    bb794: {
        switchInt(_1746) -> [0: bb747, otherwise: bb793];
    }

    bb795: {
        drop(_299) -> [return: bb748, unwind: bb815];
    }

    bb796: {
        drop(_288) -> [return: bb749, unwind: bb818];
    }

    bb797: {
        drop(_277) -> [return: bb750, unwind: bb780];
    }

    bb798 (cleanup): {
        _1838 = discriminant(_1656);
        goto -> bb762;
    }

    bb799 (cleanup): {
        _1839 = discriminant(_1630);
        goto -> bb762;
    }

    bb800 (cleanup): {
        _1840 = discriminant(_1604);
        goto -> bb762;
    }

    bb801 (cleanup): {
        _1841 = discriminant(_1578);
        goto -> bb762;
    }

    bb802 (cleanup): {
        _1842 = discriminant(_1556);
        goto -> bb762;
    }

    bb803 (cleanup): {
        _1843 = discriminant(_1505);
        goto -> bb762;
    }

    bb804 (cleanup): {
        _1844 = discriminant(_1465);
        goto -> bb763;
    }

    bb805 (cleanup): {
        _1845 = discriminant(_1454);
        goto -> bb764;
    }

    bb806 (cleanup): {
        _1846 = discriminant(_1443);
        goto -> bb765;
    }

    bb807 (cleanup): {
        _1847 = discriminant(_1432);
        goto -> bb809;
    }

    bb808 (cleanup): {
        drop(_310) -> [return: bb812, unwind terminate(cleanup)];
    }

    bb809 (cleanup): {
        switchInt(_1746) -> [0: bb812, otherwise: bb808];
    }

    bb810 (cleanup): {
        _1848 = discriminant(_311);
        goto -> bb812;
    }

    bb811 (cleanup): {
        drop(_299) -> [return: bb815, unwind terminate(cleanup)];
    }

    bb812 (cleanup): {
        switchInt(_1747) -> [0: bb815, otherwise: bb811];
    }

    bb813 (cleanup): {
        _1849 = discriminant(_300);
        goto -> bb815;
    }

    bb814 (cleanup): {
        drop(_288) -> [return: bb818, unwind terminate(cleanup)];
    }

    bb815 (cleanup): {
        switchInt(_1748) -> [0: bb818, otherwise: bb814];
    }

    bb816 (cleanup): {
        _1850 = discriminant(_289);
        goto -> bb818;
    }

    bb817 (cleanup): {
        drop(_277) -> [return: bb780, unwind terminate(cleanup)];
    }

    bb818 (cleanup): {
        switchInt(_1749) -> [0: bb780, otherwise: bb817];
    }

    bb819 (cleanup): {
        _1851 = discriminant(_278);
        goto -> bb780;
    }

    bb820 (cleanup): {
        _1853 = discriminant(_243);
        goto -> bb783;
    }

    bb821 (cleanup): {
        _1854 = discriminant(_82);
        goto -> bb789;
    }

    bb822 (cleanup): {
        _1855 = discriminant(_71);
        goto -> bb790;
    }

    bb823 (cleanup): {
        _1856 = discriminant(_59);
        goto -> bb791;
    }

    bb824 (cleanup): {
        _1857 = discriminant(_47);
        goto -> bb792;
    }

    bb825 (cleanup): {
        _1858 = discriminant(_37);
        goto -> bb792;
    }

    bb826 (cleanup): {
        _1859 = discriminant(_19);
        goto -> bb792;
    }

    bb827 (cleanup): {
        _1860 = discriminant(_9);
        goto -> bb792;
    }

    bb828: {
        (*_1863) = [move _263, move _264, move _265, move _266];
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_263);
        _258 = move _262;
        _257 = move _258 as std::boxed::Box<[u16]> (PointerCoercion(Unsize));
        StorageDead(_262);
        StorageDead(_258);
        _256 = std::slice::<impl [u16]>::into_vec::<std::alloc::Global>(move _257) -> [return: bb110, unwind: bb784];
    }
}
