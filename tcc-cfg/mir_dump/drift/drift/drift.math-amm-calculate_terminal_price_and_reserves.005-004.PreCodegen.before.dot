digraph Mir_0_1808 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_terminal_price_and_reserves(_1: &amp;ReErased state::perp_market::AMM) -&gt; std::result::Result&lt;(u64, u128, u128), error::ErrorCode&gt;<br align="left"/>let _2: u128;<br align="left"/>let _3: u128;<br align="left"/>let mut _4: (u128, u128);<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _6: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _12: (u128, u128);<br align="left"/>let _13: u64;<br align="left"/>let mut _14: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _15: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _16: u128;<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: u128;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _23: u64;<br align="left"/>let mut _24: (u64, u128, u128);<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: u128;<br align="left"/>let mut _27: u128;<br align="left"/>debug amm =&gt; _1;<br align="left"/>debug new_quote_asset_amount =&gt; _2;<br align="left"/>debug new_base_asset_amount =&gt; _3;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>debug terminal_price =&gt; _13;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>>;
    bb0__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/></td></tr><tr><td align="left">_6 = calculate_terminal_reserves(move _7)</td></tr></table>>];
    bb1__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_8 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_5 as Continue).0: (u128, u128))<br/>_4 = _12<br/>StorageDead(_12)<br/>StorageLive(_2)<br/>_2 = (_4.0: u128)<br/>StorageLive(_3)<br/>_3 = (_4.1: u128)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _2<br/>StorageLive(_17)<br/>_17 = _3<br/>StorageLive(_18)<br/>_18 = ((*_1).11: u128)<br/></td></tr><tr><td align="left">_15 = calculate_price(move _16, move _17, move _18)</td></tr></table>>];
    bb4__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_11)<br/>_11 = _9<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb6__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _15)</td></tr></table>>];
    bb8__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_19 = discriminant(_14)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb9__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_14 as Continue).0: u64)<br/>_13 = _23<br/>StorageDead(_23)<br/>StorageDead(_14)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = _13<br/>StorageLive(_26)<br/>_26 = _2<br/>StorageLive(_27)<br/>_27 = _3<br/>_24 = (move _25, move _26, move _27)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>_0 = std::result::Result::&lt;(u64, u128, u128), error::ErrorCode&gt;::Ok(move _24)<br/>StorageDead(_24)<br/>StorageDead(_13)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_14 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_22)<br/>_22 = _20<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb11__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1808 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1808 -> bb1__0_1808 [label="return"];
    bb1__0_1808 -> bb2__0_1808 [label="return"];
    bb2__0_1808 -> bb3__0_1808 [label="0"];
    bb2__0_1808 -> bb5__0_1808 [label="1"];
    bb2__0_1808 -> bb4__0_1808 [label="otherwise"];
    bb3__0_1808 -> bb7__0_1808 [label="return"];
    bb5__0_1808 -> bb6__0_1808 [label="return"];
    bb6__0_1808 -> bb12__0_1808 [label=""];
    bb7__0_1808 -> bb8__0_1808 [label="return"];
    bb8__0_1808 -> bb9__0_1808 [label="0"];
    bb8__0_1808 -> bb10__0_1808 [label="1"];
    bb8__0_1808 -> bb4__0_1808 [label="otherwise"];
    bb9__0_1808 -> bb12__0_1808 [label=""];
    bb10__0_1808 -> bb11__0_1808 [label="return"];
    bb11__0_1808 -> bb12__0_1808 [label=""];
}
