digraph Mir_0_3688 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SpotOperation::is_operation_paused(_1: u8, _2: state::paused_operations::SpotOperation) -&gt; bool<br align="left"/>let mut _3: u8;<br align="left"/>let mut _4: u8;<br align="left"/>let mut _5: u8;<br align="left"/>let _6: state::paused_operations::SpotOperation;<br align="left"/>let mut _7: isize;<br align="left"/>let mut _8: u8;<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: bool;<br align="left"/>debug current =&gt; _1;<br align="left"/>debug operation =&gt; _2;<br align="left"/>>;
    bb0__0_3688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = _1<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _2<br/>_7 = discriminant(_6)<br/>_8 = _7 as u8 (IntToInt)<br/>_9 = Ge(_8, const 1_u8)<br/>_10 = Le(_8, const 16_u8)<br/>_11 = BitAnd(move _9, move _10)<br/>assume(move _11)<br/>_5 = move _7 as u8 (IntToInt)<br/>StorageDead(_6)<br/>_3 = BitAnd(move _4, move _5)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>_0 = Ne(move _3, const 0_u8)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
