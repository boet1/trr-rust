digraph Mir_0_3645 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn order_params::OrderParams::get_close_perp_params(_1: &amp;ReErased state::perp_market::PerpMarket, _2: controller::position::PositionDirection, _3: u64) -&gt; std::result::Result&lt;state::order_params::OrderParams, error::ErrorCode&gt;<br align="left"/>let _4: i64;<br align="left"/>let _5: i64;<br align="left"/>let mut _6: (i64, i64);<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i64, i64)&gt;;<br align="left"/>let mut _8: std::result::Result&lt;(i64, i64), error::ErrorCode&gt;;<br align="left"/>let mut _9: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _10: controller::position::PositionDirection;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: (i64, i64);<br align="left"/>let _16: state::order_params::OrderParams;<br align="left"/>let mut _17: state::user::MarketType;<br align="left"/>let mut _18: controller::position::PositionDirection;<br align="left"/>let mut _19: state::user::OrderType;<br align="left"/>let mut _20: u16;<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _23: i64;<br align="left"/>let mut _24: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _25: i64;<br align="left"/>let mut _26: std::option::Option&lt;u8&gt;;<br align="left"/>let mut _27: std::option::Option&lt;i32&gt;;<br align="left"/>let mut _28: i32;<br align="left"/>let mut _29: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i32&gt;;<br align="left"/>let mut _30: std::result::Result&lt;i32, error::ErrorCode&gt;;<br align="left"/>let mut _31: i64;<br align="left"/>let mut _32: isize;<br align="left"/>let _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _34: !;<br align="left"/>let mut _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _36: i32;<br align="left"/>let mut _37: state::order_params::OrderParams;<br align="left"/>let mut _38: state::order_params::OrderParams;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug direction_to_close =&gt; _2;<br align="left"/>debug base_asset_amount =&gt; _3;<br align="left"/>debug auction_start_price =&gt; _4;<br align="left"/>debug auction_end_price =&gt; _5;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug params =&gt; _16;<br align="left"/>debug residual =&gt; _33;<br align="left"/>debug val =&gt; _36;<br align="left"/>>;
    bb0__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_1)<br/>StorageLive(_10)<br/>_10 = _2<br/></td></tr><tr><td align="left">_8 = order_params::OrderParams::get_perp_baseline_start_end_price_offset(move _9, move _10, const 1_u64)</td></tr></table>>];
    bb1__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb2__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_11 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_7 as Continue).0: (i64, i64))<br/>_6 = _15<br/>StorageDead(_15)<br/>StorageLive(_4)<br/>_4 = (_6.0: i64)<br/>StorageLive(_5)<br/>_5 = (_6.1: i64)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = state::user::MarketType::Perp<br/>StorageLive(_18)<br/>_18 = _2<br/>StorageLive(_19)<br/>_19 = state::user::OrderType::Oracle<br/>StorageLive(_20)<br/>_20 = ((*_1).21: u16)<br/>StorageLive(_21)<br/>_21 = _3<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _4<br/>_22 = Option::&lt;i64&gt;::Some(move _23)<br/>StorageDead(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = _5<br/>_24 = Option::&lt;i64&gt;::Some(move _25)<br/>StorageDead(_25)<br/>StorageLive(_26)<br/>_26 = Option::&lt;u8&gt;::Some(const 80_u8)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = _5<br/></td></tr><tr><td align="left">_30 = &lt;i64 as Cast&gt;::cast::&lt;i32&gt;(move _31)</td></tr></table>>];
    bb4__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;order_params::OrderParams, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb6__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/></td></tr><tr><td align="left">_29 = &lt;std::result::Result&lt;i32, error::ErrorCode&gt; as Try&gt;::branch(move _30)</td></tr></table>>];
    bb8__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_32 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _32)</td></tr></table>>];
    bb9__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_29 as Continue).0: i32)<br/>_28 = _36<br/>StorageDead(_36)<br/>_27 = Option::&lt;i32&gt;::Some(move _28)<br/>StorageDead(_28)<br/>StorageLive(_37)<br/></td></tr><tr><td align="left">_37 = &lt;order_params::OrderParams as Default&gt;::default()</td></tr></table>>];
    bb10__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = ((_29 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_35)<br/>_35 = _33<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;order_params::OrderParams, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _35)</td></tr></table>>];
    bb11__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_33)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_29)<br/>StorageDead(_16)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_16 = order_params::OrderParams { order_type: move _19, market_type: move _17, direction: move _18, user_order_id: (_37.3: u8), base_asset_amount: move _21, price: (_37.5: u64), market_index: move _20, reduce_only: const true, post_only: (_37.8: state::order_params::PostOnlyParam), bit_flags: (_37.9: u8), max_ts: (_37.10: std::option::Option&lt;i64&gt;), trigger_price: (_37.11: std::option::Option&lt;u64&gt;), trigger_condition: (_37.12: state::user::OrderTriggerCondition), oracle_price_offset: move _27, auction_duration: move _26, auction_start_price: move _22, auction_end_price: move _24 }<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_37)<br/>StorageDead(_29)<br/>StorageLive(_38)<br/>_38 = _16<br/>_0 = std::result::Result::&lt;order_params::OrderParams, error::ErrorCode&gt;::Ok(move _38)<br/>StorageDead(_38)<br/>StorageDead(_16)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_3645 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3645 -> bb1__0_3645 [label="return"];
    bb1__0_3645 -> bb2__0_3645 [label="return"];
    bb2__0_3645 -> bb3__0_3645 [label="0"];
    bb2__0_3645 -> bb5__0_3645 [label="1"];
    bb2__0_3645 -> bb4__0_3645 [label="otherwise"];
    bb3__0_3645 -> bb7__0_3645 [label="return"];
    bb5__0_3645 -> bb6__0_3645 [label="return"];
    bb6__0_3645 -> bb13__0_3645 [label=""];
    bb7__0_3645 -> bb8__0_3645 [label="return"];
    bb8__0_3645 -> bb9__0_3645 [label="0"];
    bb8__0_3645 -> bb10__0_3645 [label="1"];
    bb8__0_3645 -> bb4__0_3645 [label="otherwise"];
    bb9__0_3645 -> bb12__0_3645 [label="return"];
    bb10__0_3645 -> bb11__0_3645 [label="return"];
    bb11__0_3645 -> bb13__0_3645 [label=""];
    bb12__0_3645 -> bb13__0_3645 [label=""];
}
