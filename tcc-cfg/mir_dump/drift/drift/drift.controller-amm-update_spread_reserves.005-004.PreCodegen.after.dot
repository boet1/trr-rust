digraph Mir_0_85 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn update_spread_reserves(_1: &amp;ReErased mut state::perp_market::PerpMarket) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _2: u128;<br align="left"/>let _3: u128;<br align="left"/>let mut _4: (u128, u128);<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _6: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _8: controller::position::PositionDirection;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _13: (u128, u128);<br align="left"/>let _14: u128;<br align="left"/>let _15: u128;<br align="left"/>let mut _16: (u128, u128);<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _18: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _19: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _20: controller::position::PositionDirection;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: (u128, u128);<br align="left"/>let _26: ();<br align="left"/>let mut _27: bool;<br align="left"/>let mut _28: i32;<br align="left"/>let mut _29: u128;<br align="left"/>let mut _30: u128;<br align="left"/>let mut _31: u128;<br align="left"/>let mut _32: u128;<br align="left"/>let mut _33: u128;<br align="left"/>let mut _34: u128;<br align="left"/>let mut _35: u128;<br align="left"/>let mut _36: u128;<br align="left"/>let mut _37: u128;<br align="left"/>let mut _38: u128;<br align="left"/>let mut _39: u128;<br align="left"/>let mut _40: u128;<br align="left"/>let mut _41: u128;<br align="left"/>let mut _42: u128;<br align="left"/>let mut _43: u128;<br align="left"/>let mut _44: u128;<br align="left"/>let mut _45: ();<br align="left"/>debug market =&gt; _1;<br align="left"/>debug new_ask_base_asset_reserve =&gt; _2;<br align="left"/>debug new_ask_quote_asset_reserve =&gt; _3;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug new_bid_base_asset_reserve =&gt; _14;<br align="left"/>debug new_bid_quote_asset_reserve =&gt; _15;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>>;
    bb0__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/>StorageLive(_8)<br/>_8 = controller::position::PositionDirection::Long<br/></td></tr><tr><td align="left">_6 = calculate_spread_reserves(move _7, move _8)</td></tr></table>>];
    bb1__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_9 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_5 as Continue).0: (u128, u128))<br/>_4 = _13<br/>StorageDead(_13)<br/>StorageLive(_2)<br/>_2 = (_4.0: u128)<br/>StorageLive(_3)<br/>_3 = (_4.1: u128)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;(*_1)<br/>StorageLive(_20)<br/>_20 = controller::position::PositionDirection::Short<br/></td></tr><tr><td align="left">_18 = calculate_spread_reserves(move _19, move _20)</td></tr></table>>];
    bb4__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb8__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_21 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb9__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_17 as Continue).0: (u128, u128))<br/>_16 = _25<br/>StorageDead(_25)<br/>StorageLive(_14)<br/>_14 = (_16.0: u128)<br/>StorageLive(_15)<br/>_15 = (_16.1: u128)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = (((*_1).1: state::perp_market::AMM).82: i32)<br/>_27 = Eq(move _28, const 0_i32)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb10__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb11__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = _2<br/>StorageLive(_31)<br/>_31 = (((*_1).1: state::perp_market::AMM).5: u128)<br/></td></tr><tr><td align="left">_29 = &lt;u128 as Ord&gt;::min(move _30, move _31)</td></tr></table>>];
    bb13__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageLive(_41)<br/>_41 = _2<br/>(((*_1).1: state::perp_market::AMM).37: u128) = move _41<br/>StorageDead(_41)<br/>StorageLive(_42)<br/>_42 = _14<br/>(((*_1).1: state::perp_market::AMM).39: u128) = move _42<br/>StorageDead(_42)<br/>StorageLive(_43)<br/>_43 = _3<br/>(((*_1).1: state::perp_market::AMM).38: u128) = move _43<br/>StorageDead(_43)<br/>StorageLive(_44)<br/>_44 = _15<br/>(((*_1).1: state::perp_market::AMM).40: u128) = move _44<br/>StorageDead(_44)<br/>_26 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/>(((*_1).1: state::perp_market::AMM).37: u128) = move _29<br/>StorageDead(_29)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _14<br/>StorageLive(_34)<br/>_34 = (((*_1).1: state::perp_market::AMM).5: u128)<br/></td></tr><tr><td align="left">_32 = &lt;u128 as Ord&gt;::max(move _33, move _34)</td></tr></table>>];
    bb15__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/>(((*_1).1: state::perp_market::AMM).39: u128) = move _32<br/>StorageDead(_32)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = _3<br/>StorageLive(_37)<br/>_37 = (((*_1).1: state::perp_market::AMM).6: u128)<br/></td></tr><tr><td align="left">_35 = &lt;u128 as Ord&gt;::max(move _36, move _37)</td></tr></table>>];
    bb16__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>(((*_1).1: state::perp_market::AMM).38: u128) = move _35<br/>StorageDead(_35)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = _15<br/>StorageLive(_40)<br/>_40 = (((*_1).1: state::perp_market::AMM).6: u128)<br/></td></tr><tr><td align="left">_38 = &lt;u128 as Ord&gt;::min(move _39, move _40)</td></tr></table>>];
    bb17__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_39)<br/>(((*_1).1: state::perp_market::AMM).40: u128) = move _38<br/>StorageDead(_38)<br/>_26 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>StorageLive(_45)<br/>_45 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _45)<br/>StorageDead(_45)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_85 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_85 -> bb1__0_85 [label="return"];
    bb1__0_85 -> bb2__0_85 [label="return"];
    bb2__0_85 -> bb3__0_85 [label="0"];
    bb2__0_85 -> bb5__0_85 [label="1"];
    bb2__0_85 -> bb4__0_85 [label="otherwise"];
    bb3__0_85 -> bb7__0_85 [label="return"];
    bb5__0_85 -> bb6__0_85 [label="return"];
    bb6__0_85 -> bb19__0_85 [label=""];
    bb7__0_85 -> bb8__0_85 [label="return"];
    bb8__0_85 -> bb9__0_85 [label="0"];
    bb8__0_85 -> bb10__0_85 [label="1"];
    bb8__0_85 -> bb4__0_85 [label="otherwise"];
    bb9__0_85 -> bb13__0_85 [label="0"];
    bb9__0_85 -> bb12__0_85 [label="otherwise"];
    bb10__0_85 -> bb11__0_85 [label="return"];
    bb11__0_85 -> bb19__0_85 [label=""];
    bb12__0_85 -> bb14__0_85 [label="return"];
    bb13__0_85 -> bb18__0_85 [label=""];
    bb14__0_85 -> bb15__0_85 [label="return"];
    bb15__0_85 -> bb16__0_85 [label="return"];
    bb16__0_85 -> bb17__0_85 [label="return"];
    bb17__0_85 -> bb18__0_85 [label=""];
    bb18__0_85 -> bb19__0_85 [label=""];
}
