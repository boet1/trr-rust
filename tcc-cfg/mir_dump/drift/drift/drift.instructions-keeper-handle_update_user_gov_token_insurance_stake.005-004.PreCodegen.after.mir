// MIR for `keeper::handle_update_user_gov_token_insurance_stake` after PreCodegen

fn keeper::handle_update_user_gov_token_insurance_stake(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdateUserGovTokenInsuranceStake<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _3: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, error::ErrorCode>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _8: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _15: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _20: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _29: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _30: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _31: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _32: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: ();
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _40: std::result::Result<(), error::ErrorCode>;
    let mut _41: bool;
    let mut _42: u16;
    let mut _43: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _44: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _45: ();
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: &std::string::String;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 2];
    let _57: &[&str; 2];
    let _58: [&str; 2];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let mut _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: &[core::fmt::rt::Argument<'_>; 1];
    let _62: [core::fmt::rt::Argument<'_>; 1];
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &error::ErrorCode;
    let _65: &error::ErrorCode;
    let _66: ();
    let mut _67: &str;
    let _68: &str;
    let mut _69: &std::string::String;
    let _70: &std::string::String;
    let _71: std::string::String;
    let mut _73: std::fmt::Arguments<'_>;
    let mut _74: &[&str];
    let mut _75: &[&str; 1];
    let _76: &[&str; 1];
    let _77: [&str; 1];
    let mut _78: &[core::fmt::rt::Argument<'_>];
    let mut _79: &[core::fmt::rt::Argument<'_>; 1];
    let _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: [core::fmt::rt::Argument<'_>; 1];
    let mut _82: core::fmt::rt::Argument<'_>;
    let mut _83: &u16;
    let _84: &u16;
    let _85: u16;
    let mut _86: error::ErrorCode;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _92: ();
    let mut _93: bool;
    let mut _94: u16;
    let mut _95: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _96: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _97: bool;
    let mut _98: u16;
    let mut _99: &state::spot_market::SpotMarket;
    let mut _100: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _103: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _110: ();
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _112: std::result::Result<(), error::ErrorCode>;
    let mut _113: u64;
    let mut _114: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _115: &anchor_spl::token_interface::TokenAccount;
    let _116: &anchor_spl::token_interface::TokenAccount;
    let mut _117: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _118: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _119: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _120: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _121: &mut state::user::UserStats;
    let mut _122: &mut state::user::UserStats;
    let mut _123: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _124: &mut state::spot_market::SpotMarket;
    let mut _125: &mut state::spot_market::SpotMarket;
    let mut _126: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _127: i64;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _133: ();
    let mut _137: &mut instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>;
    let mut _138: &mut instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>;
    let mut _139: &mut instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>;
    let mut _140: &mut instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>;
    let mut _141: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug insurance_fund_stake => _2;
        let _14: &mut std::cell::RefMut<'_, state::user::UserStats>;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: std::cell::RefMut<'_, state::user::UserStats>;
        scope 6 {
            debug user_stats => _14;
            let _26: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
            let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _37: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
            scope 11 {
                debug spot_market => _26;
                let _46: error::ErrorCode;
                let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _91: ();
                let _101: anchor_lang::prelude::Clock;
                let _105: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _108: anchor_lang::prelude::Clock;
                scope 16 {
                    debug error_code => _46;
                    let _53: std::string::String;
                    let _72: std::string::String;
                    let mut _134: &u16;
                    let mut _135: &[&str; 1];
                    let mut _136: &[&str; 2];
                    scope 17 {
                        debug res => _53;
                    }
                    scope 18 {
                        debug res => _72;
                    }
                }
                scope 19 {
                    debug residual => _88;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug val => _91;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug clock => _101;
                    let _109: i64;
                    scope 28 {
                        debug now => _109;
                        let _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _132: ();
                        scope 29 {
                            debug residual => _129;
                            scope 30 {
                            }
                        }
                        scope 31 {
                            debug val => _132;
                            scope 32 {
                            }
                        }
                    }
                }
                scope 24 {
                    debug residual => _105;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _108;
                    scope 27 {
                    }
                }
            }
            scope 12 {
                debug residual => _34;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _37;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _22;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _25;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _137 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>);
        _7 = &((*_137).2: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _5 = std::result::Result::<RefMut<'_, InsuranceFundStake>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _6, move _8) -> [return: bb2, unwind: bb77];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, InsuranceFundStake>, error::ErrorCode> as Try>::branch(move _5) -> [return: bb3, unwind: bb77];
    }

    bb3: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _3 = move _13;
        StorageDead(_13);
        _2 = &mut _3;
        _144 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _138 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>);
        _19 = &((*_138).3: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _18 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _19) -> [return: bb8, unwind: bb76];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind: bb81];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        _142 = discriminant(_4);
        StorageDead(_4);
        goto -> bb70;
    }

    bb8: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _17 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _18, move _20) -> [return: bb9, unwind: bb76];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb10, unwind: bb76];
    }

    bb10: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_25);
        _25 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _15 = move _25;
        StorageDead(_25);
        _14 = &mut _15;
        _148 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _139 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>);
        _31 = &((*_139).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _30 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _31) -> [return: bb14, unwind: bb75];
    }

    bb12: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb13, unwind: bb80];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        _146 = discriminant(_16);
        StorageDead(_16);
        goto -> bb69;
    }

    bb14: {
        StorageDead(_31);
        StorageLive(_32);
        _32 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _29 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _30, move _32) -> [return: bb15, unwind: bb75];
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_30);
        _28 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _29) -> [return: bb16, unwind: bb75];
    }

    bb16: {
        StorageDead(_29);
        _33 = discriminant(_28);
        switchInt(move _33) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_37);
        _37 = move ((_28 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _27 = move _37;
        StorageDead(_37);
        _26 = &mut _27;
        _152 = discriminant(_28);
        StorageDead(_28);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_2);
        _43 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _44) -> [return: bb20, unwind: bb74];
    }

    bb18: {
        StorageLive(_34);
        _34 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb19, unwind: bb79];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_34);
        _150 = discriminant(_28);
        StorageDead(_28);
        goto -> bb68;
    }

    bb20: {
        StorageDead(_44);
        _42 = ((*_43).8: u16);
        _41 = Eq(move _42, const _);
        switchInt(move _41) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_45);
        _45 = ();
        _40 = std::result::Result::<(), error::ErrorCode>::Ok(move _45);
        StorageDead(_45);
        goto -> bb35;
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_46);
        _46 = error::ErrorCode::IncorrectSpotMarketAccountPassed;
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _136 = const _;
        _57 = &(*_136);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_46;
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _64) -> [return: bb23, unwind: bb74];
    }

    bb23: {
        StorageDead(_64);
        _62 = [move _63];
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = move _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_60);
        _54 = Arguments::<'_>::new_v1(move _55, move _59) -> [return: bb24, unwind: bb74];
    }

    bb24: {
        StorageDead(_59);
        StorageDead(_55);
        _53 = format(move _54) -> [return: bb25, unwind: bb74];
    }

    bb25: {
        StorageDead(_54);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        _52 = move _53;
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = <String as Deref>::deref(move _50) -> [return: bb26, unwind: bb73];
    }

    bb26: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb27, unwind: bb73];
    }

    bb27: {
        StorageDead(_48);
        drop(_52) -> [return: bb28, unwind: bb74];
    }

    bb28: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _135 = const _;
        _76 = &(*_135);
        _75 = &(*_76);
        _74 = move _75 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _134 = const _;
        _84 = &(*_134);
        _83 = &(*_84);
        _82 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _83) -> [return: bb29, unwind: bb74];
    }

    bb29: {
        StorageDead(_83);
        _81 = [move _82];
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = move _79 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_79);
        _73 = Arguments::<'_>::new_v1(move _74, move _78) -> [return: bb30, unwind: bb74];
    }

    bb30: {
        StorageDead(_78);
        StorageDead(_74);
        _72 = format(move _73) -> [return: bb31, unwind: bb74];
    }

    bb31: {
        StorageDead(_73);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_76);
        _71 = move _72;
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = <String as Deref>::deref(move _69) -> [return: bb32, unwind: bb72];
    }

    bb32: {
        _67 = &(*_68);
        StorageDead(_69);
        _66 = solana_program::log::sol_log(move _67) -> [return: bb33, unwind: bb72];
    }

    bb33: {
        StorageDead(_67);
        drop(_71) -> [return: bb34, unwind: bb74];
    }

    bb34: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageLive(_86);
        _86 = _46;
        _40 = std::result::Result::<(), error::ErrorCode>::Err(move _86);
        StorageDead(_86);
        StorageDead(_46);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_41);
        _39 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _40) -> [return: bb36, unwind: bb74];
    }

    bb36: {
        StorageDead(_40);
        _87 = discriminant(_39);
        switchInt(move _87) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_91);
        _91 = ((_39 as Continue).0: ());
        _38 = _91;
        StorageDead(_91);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(*_2);
        _95 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _96) -> [return: bb40, unwind: bb74];
    }

    bb38: {
        StorageLive(_88);
        _88 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb39, unwind: bb74];
    }

    bb39: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb67;
    }

    bb40: {
        StorageDead(_96);
        _94 = ((*_95).8: u16);
        _93 = Eq(move _94, const _);
        switchInt(move _93) -> [0: bb60, otherwise: bb41];
    }

    bb41: {
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_26);
        _99 = <RefMut<'_, SpotMarket> as Deref>::deref(move _100) -> [return: bb42, unwind: bb74];
    }

    bb42: {
        StorageDead(_100);
        _98 = ((*_99).42: u16);
        _97 = Eq(move _98, const _);
        switchInt(move _97) -> [0: bb59, otherwise: bb43];
    }

    bb43: {
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb44, unwind: bb74];
    }

    bb44: {
        _102 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _103) -> [return: bb45, unwind: bb74];
    }

    bb45: {
        StorageDead(_103);
        _104 = discriminant(_102);
        switchInt(move _104) -> [0: bb46, 1: bb47, otherwise: bb5];
    }

    bb46: {
        StorageLive(_108);
        _108 = move ((_102 as Continue).0: anchor_lang::prelude::Clock);
        _101 = move _108;
        StorageDead(_108);
        _154 = discriminant(_102);
        StorageDead(_102);
        StorageLive(_109);
        _109 = (_101.4: i64);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _140 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>);
        _141 = deref_copy ((*_140).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _162 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _117 = &(*_162);
        _116 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _117) -> [return: bb49, unwind: bb74];
    }

    bb47: {
        StorageLive(_105);
        _105 = move ((_102 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_107);
        _107 = move _105;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _107) -> [return: bb48, unwind: bb78];
    }

    bb48: {
        StorageDead(_107);
        StorageDead(_105);
        _156 = discriminant(_102);
        StorageDead(_102);
        goto -> bb66;
    }

    bb49: {
        _115 = &(*_116);
        _114 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _115) -> [return: bb50, unwind: bb74];
    }

    bb50: {
        StorageDead(_117);
        StorageDead(_115);
        _113 = ((*_114).2: u64);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &mut (*_2);
        _119 = <RefMut<'_, InsuranceFundStake> as DerefMut>::deref_mut(move _120) -> [return: bb51, unwind: bb74];
    }

    bb51: {
        _118 = &mut (*_119);
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut (*_14);
        _122 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _123) -> [return: bb52, unwind: bb74];
    }

    bb52: {
        _121 = &mut (*_122);
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &mut (*_26);
        _125 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _126) -> [return: bb53, unwind: bb74];
    }

    bb53: {
        _124 = &mut (*_125);
        StorageDead(_126);
        StorageLive(_127);
        _127 = _109;
        _112 = update_user_stats_if_stake_amount(const 0_i64, move _113, move _118, move _121, move _124, move _127) -> [return: bb54, unwind: bb74];
    }

    bb54: {
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_113);
        _111 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _112) -> [return: bb55, unwind: bb74];
    }

    bb55: {
        StorageDead(_112);
        _128 = discriminant(_111);
        switchInt(move _128) -> [0: bb56, 1: bb57, otherwise: bb5];
    }

    bb56: {
        StorageLive(_132);
        _132 = ((_111 as Continue).0: ());
        _110 = _132;
        StorageDead(_132);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        _92 = const ();
        StorageDead(_109);
        StorageDead(_101);
        goto -> bb62;
    }

    bb57: {
        StorageLive(_129);
        _129 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_131);
        _131 = _129;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _131) -> [return: bb58, unwind: bb74];
    }

    bb58: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb66;
    }

    bb59: {
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb61;
    }

    bb60: {
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb61;
    }

    bb61: {
        _92 = const ();
        goto -> bb62;
    }

    bb62: {
        StorageDead(_97);
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_133);
        _133 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _133);
        StorageDead(_133);
        drop(_27) -> [return: bb63, unwind: bb75];
    }

    bb63: {
        StorageDead(_27);
        StorageDead(_26);
        drop(_15) -> [return: bb64, unwind: bb76];
    }

    bb64: {
        StorageDead(_15);
        StorageDead(_14);
        drop(_3) -> [return: bb65, unwind: bb77];
    }

    bb65: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb71;
    }

    bb66: {
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb67;
    }

    bb67: {
        drop(_27) -> [return: bb68, unwind: bb75];
    }

    bb68: {
        StorageDead(_27);
        StorageDead(_26);
        drop(_15) -> [return: bb69, unwind: bb76];
    }

    bb69: {
        StorageDead(_15);
        StorageDead(_14);
        drop(_3) -> [return: bb70, unwind: bb77];
    }

    bb70: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb71;
    }

    bb71: {
        return;
    }

    bb72 (cleanup): {
        drop(_71) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_52) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_27) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_15) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_3) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        resume;
    }

    bb78 (cleanup): {
        _158 = discriminant(_102);
        goto -> bb74;
    }

    bb79 (cleanup): {
        _159 = discriminant(_28);
        goto -> bb75;
    }

    bb80 (cleanup): {
        _160 = discriminant(_16);
        goto -> bb76;
    }

    bb81 (cleanup): {
        _161 = discriminant(_4);
        goto -> bb77;
    }
}
