// MIR for `if_staker::handle_request_remove_insurance_fund_stake` after PreCodegen

fn if_staker::handle_request_remove_insurance_fund_stake(_1: anchor_lang::context::Context<'_, '_, '_, '_, if_staker::RequestRemoveInsuranceFundStake<'_>>, _2: u16, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: anchor_lang::prelude::Clock;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _6: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _11: anchor_lang::prelude::Clock;
    let mut _13: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, error::ErrorCode>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _18: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _27: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _28: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _29: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _30: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _39: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _40: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _41: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _42: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _48: ();
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _50: std::result::Result<(), error::ErrorCode>;
    let mut _51: bool;
    let mut _52: &state::spot_market::SpotMarket;
    let _53: &state::spot_market::SpotMarket;
    let mut _54: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _55: state::paused_operations::InsuranceFundOperation;
    let mut _56: ();
    let _58: ();
    let mut _59: &str;
    let _60: &str;
    let mut _61: &std::string::String;
    let _62: &std::string::String;
    let _63: std::string::String;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[&str; 2];
    let _68: &[&str; 2];
    let _69: [&str; 2];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let mut _71: &[core::fmt::rt::Argument<'_>; 1];
    let _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: [core::fmt::rt::Argument<'_>; 1];
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &error::ErrorCode;
    let _76: &error::ErrorCode;
    let _77: ();
    let mut _78: &str;
    let _79: &str;
    let mut _80: &std::string::String;
    let _81: &std::string::String;
    let _82: std::string::String;
    let mut _84: std::fmt::Arguments<'_>;
    let mut _85: &[&str];
    let mut _86: &[&str; 1];
    let _87: &[&str; 1];
    let _88: [&str; 1];
    let mut _89: error::ErrorCode;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _95: ();
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _97: std::result::Result<(), error::ErrorCode>;
    let mut _98: bool;
    let mut _99: u16;
    let mut _100: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _101: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _102: u16;
    let mut _103: ();
    let _105: ();
    let mut _106: &str;
    let _107: &str;
    let mut _108: &std::string::String;
    let _109: &std::string::String;
    let _110: std::string::String;
    let mut _112: std::fmt::Arguments<'_>;
    let mut _113: &[&str];
    let mut _114: &[&str; 2];
    let _115: &[&str; 2];
    let _116: [&str; 2];
    let mut _117: &[core::fmt::rt::Argument<'_>];
    let mut _118: &[core::fmt::rt::Argument<'_>; 1];
    let _119: &[core::fmt::rt::Argument<'_>; 1];
    let _120: [core::fmt::rt::Argument<'_>; 1];
    let mut _121: core::fmt::rt::Argument<'_>;
    let mut _122: &error::ErrorCode;
    let _123: &error::ErrorCode;
    let _124: ();
    let mut _125: &str;
    let _126: &str;
    let mut _127: error::ErrorCode;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _133: ();
    let mut _134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _135: std::result::Result<(), error::ErrorCode>;
    let mut _136: bool;
    let mut _137: u128;
    let mut _138: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _139: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _140: ();
    let _142: ();
    let mut _143: &str;
    let _144: &str;
    let mut _145: &std::string::String;
    let _146: &std::string::String;
    let _147: std::string::String;
    let mut _149: std::fmt::Arguments<'_>;
    let mut _150: &[&str];
    let mut _151: &[&str; 2];
    let _152: &[&str; 2];
    let _153: [&str; 2];
    let mut _154: &[core::fmt::rt::Argument<'_>];
    let mut _155: &[core::fmt::rt::Argument<'_>; 1];
    let _156: &[core::fmt::rt::Argument<'_>; 1];
    let _157: [core::fmt::rt::Argument<'_>; 1];
    let mut _158: core::fmt::rt::Argument<'_>;
    let mut _159: &error::ErrorCode;
    let _160: &error::ErrorCode;
    let _161: ();
    let mut _162: &str;
    let _163: &str;
    let mut _164: error::ErrorCode;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _172: std::result::Result<u128, error::ErrorCode>;
    let mut _173: u64;
    let mut _174: u128;
    let mut _175: &state::spot_market::SpotMarket;
    let mut _176: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _177: u64;
    let mut _178: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _179: &anchor_spl::token_interface::TokenAccount;
    let _180: &anchor_spl::token_interface::TokenAccount;
    let mut _181: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _187: ();
    let mut _188: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _189: std::result::Result<(), error::ErrorCode>;
    let mut _190: bool;
    let mut _191: u128;
    let mut _192: ();
    let _194: ();
    let mut _195: &str;
    let _196: &str;
    let mut _197: &std::string::String;
    let _198: &std::string::String;
    let _199: std::string::String;
    let mut _201: std::fmt::Arguments<'_>;
    let mut _202: &[&str];
    let mut _203: &[&str; 2];
    let _204: &[&str; 2];
    let _205: [&str; 2];
    let mut _206: &[core::fmt::rt::Argument<'_>];
    let mut _207: &[core::fmt::rt::Argument<'_>; 1];
    let _208: &[core::fmt::rt::Argument<'_>; 1];
    let _209: [core::fmt::rt::Argument<'_>; 1];
    let mut _210: core::fmt::rt::Argument<'_>;
    let mut _211: &error::ErrorCode;
    let _212: &error::ErrorCode;
    let _213: ();
    let mut _214: &str;
    let _215: &str;
    let mut _216: error::ErrorCode;
    let mut _217: isize;
    let mut _219: !;
    let mut _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _223: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _224: std::result::Result<u128, error::ErrorCode>;
    let mut _225: &state::insurance_fund_stake::InsuranceFundStake;
    let _226: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _227: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _228: &state::spot_market::SpotMarket;
    let _229: &state::spot_market::SpotMarket;
    let mut _230: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _231: isize;
    let mut _233: !;
    let mut _234: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _236: ();
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _238: std::result::Result<(), error::ErrorCode>;
    let mut _239: bool;
    let mut _240: u128;
    let mut _241: u128;
    let mut _242: ();
    let _244: ();
    let mut _245: &str;
    let _246: &str;
    let mut _247: &std::string::String;
    let _248: &std::string::String;
    let _249: std::string::String;
    let mut _251: std::fmt::Arguments<'_>;
    let mut _252: &[&str];
    let mut _253: &[&str; 2];
    let _254: &[&str; 2];
    let _255: [&str; 2];
    let mut _256: &[core::fmt::rt::Argument<'_>];
    let mut _257: &[core::fmt::rt::Argument<'_>; 1];
    let _258: &[core::fmt::rt::Argument<'_>; 1];
    let _259: [core::fmt::rt::Argument<'_>; 1];
    let mut _260: core::fmt::rt::Argument<'_>;
    let mut _261: &error::ErrorCode;
    let _262: &error::ErrorCode;
    let mut _263: error::ErrorCode;
    let mut _264: isize;
    let mut _266: !;
    let mut _267: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _269: ();
    let mut _270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _271: std::result::Result<(), error::ErrorCode>;
    let mut _272: u128;
    let mut _273: u64;
    let mut _274: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _275: &anchor_spl::token_interface::TokenAccount;
    let _276: &anchor_spl::token_interface::TokenAccount;
    let mut _277: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _278: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _279: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _280: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _281: &mut state::user::UserStats;
    let mut _282: &mut state::user::UserStats;
    let mut _283: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _284: &mut state::spot_market::SpotMarket;
    let mut _285: &mut state::spot_market::SpotMarket;
    let mut _286: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _287: i64;
    let mut _288: isize;
    let mut _290: !;
    let mut _291: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _293: ();
    let mut _300: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _301: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _302: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _303: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _304: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _305: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _306: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _328: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug clock => _4;
        let _12: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
        let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _23: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
        scope 6 {
            debug insurance_fund_stake => _12;
            let _24: &mut std::cell::RefMut<'_, state::user::UserStats>;
            let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _35: std::cell::RefMut<'_, state::user::UserStats>;
            scope 11 {
                debug user_stats => _24;
                let _36: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _47: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                scope 16 {
                    debug spot_market => _36;
                    let _57: error::ErrorCode;
                    let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _94: ();
                    let _104: error::ErrorCode;
                    let _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _132: ();
                    let _141: error::ErrorCode;
                    let _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _169: ();
                    let _170: u128;
                    let _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _186: u128;
                    scope 21 {
                        debug error_code => _57;
                        let _64: std::string::String;
                        let _83: std::string::String;
                        let mut _298: &[&str; 1];
                        let mut _299: &[&str; 2];
                        scope 22 {
                            debug res => _64;
                        }
                        scope 23 {
                            debug res => _83;
                        }
                    }
                    scope 24 {
                        debug residual => _91;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _94;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug error_code => _104;
                        let _111: std::string::String;
                        let mut _297: &[&str; 2];
                        scope 29 {
                            debug res => _111;
                        }
                    }
                    scope 30 {
                        debug residual => _129;
                        scope 31 {
                        }
                    }
                    scope 32 {
                        debug val => _132;
                        scope 33 {
                        }
                    }
                    scope 34 {
                        debug error_code => _141;
                        let _148: std::string::String;
                        let mut _296: &[&str; 2];
                        scope 35 {
                            debug res => _148;
                        }
                    }
                    scope 36 {
                        debug residual => _166;
                        scope 37 {
                        }
                    }
                    scope 38 {
                        debug val => _169;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug n_shares => _170;
                        let _193: error::ErrorCode;
                        let _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _221: ();
                        let _222: u128;
                        let _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _235: u128;
                        scope 45 {
                            debug error_code => _193;
                            let _200: std::string::String;
                            let mut _295: &[&str; 2];
                            scope 46 {
                                debug res => _200;
                            }
                        }
                        scope 47 {
                            debug residual => _218;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug val => _221;
                            scope 50 {
                            }
                        }
                        scope 51 {
                            debug user_if_shares => _222;
                            let _243: error::ErrorCode;
                            let _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _268: ();
                            let _289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _292: ();
                            scope 56 {
                                debug error_code => _243;
                                let _250: std::string::String;
                                let mut _294: &[&str; 2];
                                scope 57 {
                                    debug res => _250;
                                }
                            }
                            scope 58 {
                                debug residual => _265;
                                scope 59 {
                                }
                            }
                            scope 60 {
                                debug val => _268;
                                scope 61 {
                                }
                            }
                            scope 62 {
                                debug residual => _289;
                                scope 63 {
                                }
                            }
                            scope 64 {
                                debug val => _292;
                                scope 65 {
                                }
                            }
                        }
                        scope 52 {
                            debug residual => _232;
                            scope 53 {
                            }
                        }
                        scope 54 {
                            debug val => _235;
                            scope 55 {
                            }
                        }
                    }
                    scope 41 {
                        debug residual => _183;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug val => _186;
                        scope 44 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _44;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _47;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _32;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _35;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _6) -> [return: bb2, unwind: bb147];
    }

    bb2: {
        StorageDead(_6);
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_5 as Continue).0: anchor_lang::prelude::Clock);
        _4 = move _11;
        StorageDead(_11);
        _307 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _300 = deref_copy (_1.1: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>);
        _17 = &((*_300).1: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _16 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load_mut(move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _10) -> [return: bb6, unwind: bb151];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _321 = discriminant(_5);
        StorageDead(_5);
        goto -> bb136;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        _18 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _15 = std::result::Result::<RefMut<'_, InsuranceFundStake>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _16, move _18) -> [return: bb8, unwind: bb147];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<RefMut<'_, InsuranceFundStake>, error::ErrorCode> as Try>::branch(move _15) -> [return: bb9, unwind: bb147];
    }

    bb9: {
        StorageDead(_15);
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_23);
        _23 = move ((_14 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _13 = move _23;
        StorageDead(_23);
        _12 = &mut _13;
        _311 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _301 = deref_copy (_1.1: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>);
        _29 = &((*_301).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _28 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _29) -> [return: bb13, unwind: bb146];
    }

    bb11: {
        StorageLive(_20);
        _20 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb12, unwind: bb150];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_20);
        _309 = discriminant(_14);
        StorageDead(_14);
        goto -> bb135;
    }

    bb13: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _27 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _28, move _30) -> [return: bb14, unwind: bb146];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _27) -> [return: bb15, unwind: bb146];
    }

    bb15: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_35);
        _35 = move ((_26 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _25 = move _35;
        StorageDead(_35);
        _24 = &mut _25;
        _315 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _302 = deref_copy (_1.1: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>);
        _41 = &((*_302).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _40 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _41) -> [return: bb19, unwind: bb145];
    }

    bb17: {
        StorageLive(_32);
        _32 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb18, unwind: bb149];
    }

    bb18: {
        StorageDead(_34);
        StorageDead(_32);
        _313 = discriminant(_26);
        StorageDead(_26);
        goto -> bb134;
    }

    bb19: {
        StorageDead(_41);
        StorageLive(_42);
        _42 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _39 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _40, move _42) -> [return: bb20, unwind: bb145];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_40);
        _38 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _39) -> [return: bb21, unwind: bb145];
    }

    bb21: {
        StorageDead(_39);
        _43 = discriminant(_38);
        switchInt(move _43) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_47);
        _47 = move ((_38 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _37 = move _47;
        StorageDead(_47);
        _36 = &mut _37;
        _319 = discriminant(_38);
        StorageDead(_38);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_36);
        _53 = <RefMut<'_, SpotMarket> as Deref>::deref(move _54) -> [return: bb25, unwind: bb144];
    }

    bb23: {
        StorageLive(_44);
        _44 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb24, unwind: bb148];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_44);
        _317 = discriminant(_38);
        StorageDead(_38);
        goto -> bb133;
    }

    bb25: {
        _52 = &(*_53);
        StorageDead(_54);
        StorageLive(_55);
        _55 = InsuranceFundOperation::RequestRemove;
        _51 = SpotMarket::is_insurance_fund_operation_paused(move _52, move _55) -> [return: bb26, unwind: bb144];
    }

    bb26: {
        switchInt(move _51) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_53);
        StorageLive(_57);
        _57 = error::ErrorCode::InsuranceFundOperationPaused;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _299 = const _;
        _68 = &(*_299);
        _67 = &(*_68);
        _66 = move _67 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_67);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_57;
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _75) -> [return: bb29, unwind: bb144];
    }

    bb28: {
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_53);
        StorageLive(_56);
        _56 = ();
        _50 = std::result::Result::<(), error::ErrorCode>::Ok(move _56);
        StorageDead(_56);
        goto -> bb40;
    }

    bb29: {
        StorageDead(_75);
        _73 = [move _74];
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = move _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_71);
        _65 = Arguments::<'_>::new_v1(move _66, move _70) -> [return: bb30, unwind: bb144];
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_66);
        _64 = format(move _65) -> [return: bb31, unwind: bb144];
    }

    bb31: {
        StorageDead(_65);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_68);
        _63 = move _64;
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = <String as Deref>::deref(move _61) -> [return: bb32, unwind: bb143];
    }

    bb32: {
        _59 = &(*_60);
        StorageDead(_61);
        _58 = solana_program::log::sol_log(move _59) -> [return: bb33, unwind: bb143];
    }

    bb33: {
        StorageDead(_59);
        drop(_63) -> [return: bb34, unwind: bb144];
    }

    bb34: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _298 = const _;
        _87 = &(*_298);
        _86 = &(*_87);
        _85 = move _86 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_86);
        _84 = Arguments::<'_>::new_const(move _85) -> [return: bb35, unwind: bb144];
    }

    bb35: {
        StorageDead(_85);
        _83 = format(move _84) -> [return: bb36, unwind: bb144];
    }

    bb36: {
        StorageDead(_84);
        StorageDead(_87);
        _82 = move _83;
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = <String as Deref>::deref(move _80) -> [return: bb37, unwind: bb142];
    }

    bb37: {
        _78 = &(*_79);
        StorageDead(_80);
        _77 = solana_program::log::sol_log(move _78) -> [return: bb38, unwind: bb142];
    }

    bb38: {
        StorageDead(_78);
        drop(_82) -> [return: bb39, unwind: bb144];
    }

    bb39: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageLive(_89);
        _89 = _57;
        _50 = std::result::Result::<(), error::ErrorCode>::Err(move _89);
        StorageDead(_89);
        StorageDead(_57);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_51);
        _49 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _50) -> [return: bb41, unwind: bb144];
    }

    bb41: {
        StorageDead(_50);
        _90 = discriminant(_49);
        switchInt(move _90) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_94);
        _94 = ((_49 as Continue).0: ());
        _48 = _94;
        StorageDead(_94);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &(*_12);
        _100 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _101) -> [return: bb45, unwind: bb144];
    }

    bb43: {
        StorageLive(_91);
        _91 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb44, unwind: bb144];
    }

    bb44: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb132;
    }

    bb45: {
        StorageDead(_101);
        _99 = ((*_100).8: u16);
        StorageLive(_102);
        _102 = _2;
        _98 = Eq(move _99, move _102);
        switchInt(move _98) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_103);
        _103 = ();
        _97 = std::result::Result::<(), error::ErrorCode>::Ok(move _103);
        StorageDead(_103);
        goto -> bb55;
    }

    bb47: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = error::ErrorCode::IncorrectSpotMarketAccountPassed;
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _297 = const _;
        _115 = &(*_297);
        _114 = &(*_115);
        _113 = move _114 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_114);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_104;
        _122 = &(*_123);
        _121 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _122) -> [return: bb48, unwind: bb144];
    }

    bb48: {
        StorageDead(_122);
        _120 = [move _121];
        StorageDead(_121);
        _119 = &_120;
        _118 = &(*_119);
        _117 = move _118 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_118);
        _112 = Arguments::<'_>::new_v1(move _113, move _117) -> [return: bb49, unwind: bb144];
    }

    bb49: {
        StorageDead(_117);
        StorageDead(_113);
        _111 = format(move _112) -> [return: bb50, unwind: bb144];
    }

    bb50: {
        StorageDead(_112);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_115);
        _110 = move _111;
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = <String as Deref>::deref(move _108) -> [return: bb51, unwind: bb141];
    }

    bb51: {
        _106 = &(*_107);
        StorageDead(_108);
        _105 = solana_program::log::sol_log(move _106) -> [return: bb52, unwind: bb141];
    }

    bb52: {
        StorageDead(_106);
        drop(_110) -> [return: bb53, unwind: bb144];
    }

    bb53: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = const "insurance_fund_stake does not match market_index";
        _125 = &(*_126);
        _124 = solana_program::log::sol_log(move _125) -> [return: bb54, unwind: bb144];
    }

    bb54: {
        StorageDead(_125);
        StorageDead(_126);
        StorageDead(_124);
        StorageLive(_127);
        _127 = _104;
        _97 = std::result::Result::<(), error::ErrorCode>::Err(move _127);
        StorageDead(_127);
        StorageDead(_104);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_98);
        _96 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _97) -> [return: bb56, unwind: bb144];
    }

    bb56: {
        StorageDead(_97);
        _128 = discriminant(_96);
        switchInt(move _128) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_132);
        _132 = ((_96 as Continue).0: ());
        _95 = _132;
        StorageDead(_132);
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &(*_12);
        _138 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _139) -> [return: bb60, unwind: bb144];
    }

    bb58: {
        StorageLive(_129);
        _129 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_131);
        _131 = _129;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _131) -> [return: bb59, unwind: bb144];
    }

    bb59: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb132;
    }

    bb60: {
        StorageDead(_139);
        _137 = ((*_138).2: u128);
        _136 = Eq(move _137, const 0_u128);
        switchInt(move _136) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_140);
        _140 = ();
        _135 = std::result::Result::<(), error::ErrorCode>::Ok(move _140);
        StorageDead(_140);
        goto -> bb70;
    }

    bb62: {
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_141);
        _141 = error::ErrorCode::IFWithdrawRequestInProgress;
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _296 = const _;
        _152 = &(*_296);
        _151 = &(*_152);
        _150 = move _151 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_151);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_141;
        _159 = &(*_160);
        _158 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _159) -> [return: bb63, unwind: bb144];
    }

    bb63: {
        StorageDead(_159);
        _157 = [move _158];
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = move _155 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_155);
        _149 = Arguments::<'_>::new_v1(move _150, move _154) -> [return: bb64, unwind: bb144];
    }

    bb64: {
        StorageDead(_154);
        StorageDead(_150);
        _148 = format(move _149) -> [return: bb65, unwind: bb144];
    }

    bb65: {
        StorageDead(_149);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_152);
        _147 = move _148;
        StorageDead(_148);
        _146 = &_147;
        _145 = &(*_146);
        _144 = <String as Deref>::deref(move _145) -> [return: bb66, unwind: bb140];
    }

    bb66: {
        _143 = &(*_144);
        StorageDead(_145);
        _142 = solana_program::log::sol_log(move _143) -> [return: bb67, unwind: bb140];
    }

    bb67: {
        StorageDead(_143);
        drop(_147) -> [return: bb68, unwind: bb144];
    }

    bb68: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = const "Withdraw request is already in progress";
        _162 = &(*_163);
        _161 = solana_program::log::sol_log(move _162) -> [return: bb69, unwind: bb144];
    }

    bb69: {
        StorageDead(_162);
        StorageDead(_163);
        StorageDead(_161);
        StorageLive(_164);
        _164 = _141;
        _135 = std::result::Result::<(), error::ErrorCode>::Err(move _164);
        StorageDead(_164);
        StorageDead(_141);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_136);
        _134 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _135) -> [return: bb71, unwind: bb144];
    }

    bb71: {
        StorageDead(_135);
        _165 = discriminant(_134);
        switchInt(move _165) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_169);
        _169 = ((_134 as Continue).0: ());
        _133 = _169;
        StorageDead(_169);
        StorageDead(_134);
        StorageDead(_133);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _3;
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &(*_36);
        _175 = <RefMut<'_, SpotMarket> as Deref>::deref(move _176) -> [return: bb75, unwind: bb144];
    }

    bb73: {
        StorageLive(_166);
        _166 = ((_134 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_168);
        _168 = _166;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _168) -> [return: bb74, unwind: bb144];
    }

    bb74: {
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb132;
    }

    bb75: {
        StorageDead(_176);
        _174 = (((*_175).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _303 = deref_copy (_1.1: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>);
        _304 = deref_copy ((*_303).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _327 = (((_304.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _181 = &(*_327);
        _180 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _181) -> [return: bb76, unwind: bb144];
    }

    bb76: {
        _179 = &(*_180);
        _178 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _179) -> [return: bb77, unwind: bb144];
    }

    bb77: {
        StorageDead(_181);
        StorageDead(_179);
        _177 = ((*_178).2: u64);
        _172 = vault_amount_to_if_shares(move _173, move _174, move _177) -> [return: bb78, unwind: bb144];
    }

    bb78: {
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_173);
        _171 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _172) -> [return: bb79, unwind: bb144];
    }

    bb79: {
        StorageDead(_172);
        _182 = discriminant(_171);
        switchInt(move _182) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_186);
        _186 = ((_171 as Continue).0: u128);
        _170 = _186;
        StorageDead(_186);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_171);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = _170;
        _190 = Gt(move _191, const 0_u128);
        switchInt(move _190) -> [0: bb84, otherwise: bb83];
    }

    bb81: {
        StorageLive(_183);
        _183 = ((_171 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_185);
        _185 = _183;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _185) -> [return: bb82, unwind: bb144];
    }

    bb82: {
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_171);
        goto -> bb131;
    }

    bb83: {
        StorageDead(_191);
        StorageLive(_192);
        _192 = ();
        _189 = std::result::Result::<(), error::ErrorCode>::Ok(move _192);
        StorageDead(_192);
        goto -> bb92;
    }

    bb84: {
        StorageDead(_191);
        StorageLive(_193);
        _193 = error::ErrorCode::IFWithdrawRequestTooSmall;
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _295 = const _;
        _204 = &(*_295);
        _203 = &(*_204);
        _202 = move _203 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_203);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_193;
        _211 = &(*_212);
        _210 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _211) -> [return: bb85, unwind: bb144];
    }

    bb85: {
        StorageDead(_211);
        _209 = [move _210];
        StorageDead(_210);
        _208 = &_209;
        _207 = &(*_208);
        _206 = move _207 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_207);
        _201 = Arguments::<'_>::new_v1(move _202, move _206) -> [return: bb86, unwind: bb144];
    }

    bb86: {
        StorageDead(_206);
        StorageDead(_202);
        _200 = format(move _201) -> [return: bb87, unwind: bb144];
    }

    bb87: {
        StorageDead(_201);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_204);
        _199 = move _200;
        StorageDead(_200);
        _198 = &_199;
        _197 = &(*_198);
        _196 = <String as Deref>::deref(move _197) -> [return: bb88, unwind: bb139];
    }

    bb88: {
        _195 = &(*_196);
        StorageDead(_197);
        _194 = solana_program::log::sol_log(move _195) -> [return: bb89, unwind: bb139];
    }

    bb89: {
        StorageDead(_195);
        drop(_199) -> [return: bb90, unwind: bb144];
    }

    bb90: {
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_194);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = const "Requested lp_shares = 0";
        _214 = &(*_215);
        _213 = solana_program::log::sol_log(move _214) -> [return: bb91, unwind: bb144];
    }

    bb91: {
        StorageDead(_214);
        StorageDead(_215);
        StorageDead(_213);
        StorageLive(_216);
        _216 = _193;
        _189 = std::result::Result::<(), error::ErrorCode>::Err(move _216);
        StorageDead(_216);
        StorageDead(_193);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_190);
        _188 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _189) -> [return: bb93, unwind: bb144];
    }

    bb93: {
        StorageDead(_189);
        _217 = discriminant(_188);
        switchInt(move _217) -> [0: bb94, 1: bb95, otherwise: bb4];
    }

    bb94: {
        StorageLive(_221);
        _221 = ((_188 as Continue).0: ());
        _187 = _221;
        StorageDead(_221);
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &(*_12);
        _226 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _227) -> [return: bb97, unwind: bb144];
    }

    bb95: {
        StorageLive(_218);
        _218 = ((_188 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_220);
        _220 = _218;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _220) -> [return: bb96, unwind: bb144];
    }

    bb96: {
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_188);
        StorageDead(_187);
        goto -> bb131;
    }

    bb97: {
        _225 = &(*_226);
        StorageDead(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &(*_36);
        _229 = <RefMut<'_, SpotMarket> as Deref>::deref(move _230) -> [return: bb98, unwind: bb144];
    }

    bb98: {
        _228 = &(*_229);
        StorageDead(_230);
        _224 = InsuranceFundStake::checked_if_shares(move _225, move _228) -> [return: bb99, unwind: bb144];
    }

    bb99: {
        StorageDead(_228);
        StorageDead(_225);
        _223 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _224) -> [return: bb100, unwind: bb144];
    }

    bb100: {
        StorageDead(_224);
        _231 = discriminant(_223);
        switchInt(move _231) -> [0: bb101, 1: bb102, otherwise: bb4];
    }

    bb101: {
        StorageLive(_235);
        _235 = ((_223 as Continue).0: u128);
        _222 = _235;
        StorageDead(_235);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_223);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = _222;
        StorageLive(_241);
        _241 = _170;
        _239 = Ge(move _240, move _241);
        switchInt(move _239) -> [0: bb105, otherwise: bb104];
    }

    bb102: {
        StorageLive(_232);
        _232 = ((_223 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_234);
        _234 = _232;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _234) -> [return: bb103, unwind: bb144];
    }

    bb103: {
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_223);
        goto -> bb130;
    }

    bb104: {
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_242);
        _242 = ();
        _238 = std::result::Result::<(), error::ErrorCode>::Ok(move _242);
        StorageDead(_242);
        goto -> bb112;
    }

    bb105: {
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_243);
        _243 = error::ErrorCode::InsufficientIFShares;
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _294 = const _;
        _254 = &(*_294);
        _253 = &(*_254);
        _252 = move _253 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_253);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &_243;
        _261 = &(*_262);
        _260 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _261) -> [return: bb106, unwind: bb144];
    }

    bb106: {
        StorageDead(_261);
        _259 = [move _260];
        StorageDead(_260);
        _258 = &_259;
        _257 = &(*_258);
        _256 = move _257 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_257);
        _251 = Arguments::<'_>::new_v1(move _252, move _256) -> [return: bb107, unwind: bb144];
    }

    bb107: {
        StorageDead(_256);
        StorageDead(_252);
        _250 = format(move _251) -> [return: bb108, unwind: bb144];
    }

    bb108: {
        StorageDead(_251);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_254);
        _249 = move _250;
        StorageDead(_250);
        _248 = &_249;
        _247 = &(*_248);
        _246 = <String as Deref>::deref(move _247) -> [return: bb109, unwind: bb138];
    }

    bb109: {
        _245 = &(*_246);
        StorageDead(_247);
        _244 = solana_program::log::sol_log(move _245) -> [return: bb110, unwind: bb138];
    }

    bb110: {
        StorageDead(_245);
        drop(_249) -> [return: bb111, unwind: bb144];
    }

    bb111: {
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_244);
        StorageLive(_263);
        _263 = _243;
        _238 = std::result::Result::<(), error::ErrorCode>::Err(move _263);
        StorageDead(_263);
        StorageDead(_243);
        goto -> bb112;
    }

    bb112: {
        StorageDead(_239);
        _237 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _238) -> [return: bb113, unwind: bb144];
    }

    bb113: {
        StorageDead(_238);
        _264 = discriminant(_237);
        switchInt(move _264) -> [0: bb114, 1: bb115, otherwise: bb4];
    }

    bb114: {
        StorageLive(_268);
        _268 = ((_237 as Continue).0: ());
        _236 = _268;
        StorageDead(_268);
        StorageDead(_237);
        StorageDead(_236);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = _170;
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _305 = deref_copy (_1.1: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>);
        _306 = deref_copy ((*_305).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _328 = (((_306.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _277 = &(*_328);
        _276 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _277) -> [return: bb117, unwind: bb144];
    }

    bb115: {
        StorageLive(_265);
        _265 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_267);
        _267 = _265;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _267) -> [return: bb116, unwind: bb144];
    }

    bb116: {
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb130;
    }

    bb117: {
        _275 = &(*_276);
        _274 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _275) -> [return: bb118, unwind: bb144];
    }

    bb118: {
        StorageDead(_277);
        StorageDead(_275);
        _273 = ((*_274).2: u64);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &mut (*_12);
        _279 = <RefMut<'_, InsuranceFundStake> as DerefMut>::deref_mut(move _280) -> [return: bb119, unwind: bb144];
    }

    bb119: {
        _278 = &mut (*_279);
        StorageDead(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &mut (*_24);
        _282 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _283) -> [return: bb120, unwind: bb144];
    }

    bb120: {
        _281 = &mut (*_282);
        StorageDead(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &mut (*_36);
        _285 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _286) -> [return: bb121, unwind: bb144];
    }

    bb121: {
        _284 = &mut (*_285);
        StorageDead(_286);
        StorageLive(_287);
        _287 = (_4.4: i64);
        _271 = controller::insurance::request_remove_insurance_fund_stake(move _272, move _273, move _278, move _281, move _284, move _287) -> [return: bb122, unwind: bb144];
    }

    bb122: {
        StorageDead(_287);
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_278);
        StorageDead(_273);
        StorageDead(_272);
        _270 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _271) -> [return: bb123, unwind: bb144];
    }

    bb123: {
        StorageDead(_271);
        _288 = discriminant(_270);
        switchInt(move _288) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_292);
        _292 = ((_270 as Continue).0: ());
        _269 = _292;
        StorageDead(_292);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_270);
        StorageDead(_269);
        StorageLive(_293);
        _293 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _293);
        StorageDead(_293);
        StorageDead(_222);
        StorageDead(_170);
        drop(_37) -> [return: bb127, unwind: bb145];
    }

    bb125: {
        StorageLive(_289);
        _289 = ((_270 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_291);
        _291 = _289;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _291) -> [return: bb126, unwind: bb144];
    }

    bb126: {
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_270);
        StorageDead(_269);
        goto -> bb130;
    }

    bb127: {
        StorageDead(_37);
        StorageDead(_36);
        drop(_25) -> [return: bb128, unwind: bb146];
    }

    bb128: {
        StorageDead(_25);
        StorageDead(_24);
        drop(_13) -> [return: bb129, unwind: bb147];
    }

    bb129: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_4);
        goto -> bb137;
    }

    bb130: {
        StorageDead(_222);
        goto -> bb131;
    }

    bb131: {
        StorageDead(_170);
        goto -> bb132;
    }

    bb132: {
        drop(_37) -> [return: bb133, unwind: bb145];
    }

    bb133: {
        StorageDead(_37);
        StorageDead(_36);
        drop(_25) -> [return: bb134, unwind: bb146];
    }

    bb134: {
        StorageDead(_25);
        StorageDead(_24);
        drop(_13) -> [return: bb135, unwind: bb147];
    }

    bb135: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb136;
    }

    bb136: {
        StorageDead(_4);
        goto -> bb137;
    }

    bb137: {
        return;
    }

    bb138 (cleanup): {
        drop(_249) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_199) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_147) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_110) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_82) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_63) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_37) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_25) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_13) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        resume;
    }

    bb148 (cleanup): {
        _323 = discriminant(_38);
        goto -> bb145;
    }

    bb149 (cleanup): {
        _324 = discriminant(_26);
        goto -> bb146;
    }

    bb150 (cleanup): {
        _325 = discriminant(_14);
        goto -> bb147;
    }

    bb151 (cleanup): {
        _326 = discriminant(_5);
        goto -> bb147;
    }
}
