// MIR for `instructions::user::handle_initialize_user` before PreCodegen

fn instructions::user::handle_initialize_user(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::InitializeUser<'_>>, _2: u16, _3: [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug sub_account_id => _2;
    debug name => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _8: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _9: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _11: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _12: error::ErrorCode;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: anchor_lang::prelude::Pubkey;
    let mut _19: &anchor_lang::prelude::Signer<'_>;
    let mut _20: &mut state::user::User;
    let mut _21: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _22: u16;
    let mut _23: &mut state::user::User;
    let mut _24: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _25: [u8; 32];
    let mut _26: &mut state::user::User;
    let mut _27: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _28: &mut state::user::User;
    let mut _29: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _30: &mut state::user::User;
    let mut _31: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _33: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _34: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _35: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _38: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _39: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _41: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: u16;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _49: std::result::Result<u16, error::ErrorCode>;
    let mut _50: u16;
    let mut _51: &state::user::UserStats;
    let mut _52: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: &mut state::user::UserStats;
    let mut _59: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let _60: ();
    let mut _61: bool;
    let mut _62: u16;
    let mut _63: &state::user::UserStats;
    let mut _64: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _67: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>)>;
    let mut _69: std::result::Result<(std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>), error::ErrorCode>;
    let mut _70: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
    let mut _78: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _79: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _80: isize;
    let mut _81: isize;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _86: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _87: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _88: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _89: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _97: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _98: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _100: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _106: ();
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _108: std::result::Result<(), error::ErrorCode>;
    let mut _109: bool;
    let mut _110: u16;
    let mut _111: &state::user::User;
    let mut _112: &std::cell::Ref<'_, state::user::User>;
    let mut _113: ();
    let _115: ();
    let mut _116: &str;
    let _117: &str;
    let mut _118: &std::string::String;
    let _119: &std::string::String;
    let _120: std::string::String;
    let mut _122: std::fmt::Arguments<'_>;
    let mut _123: &[&str];
    let mut _124: &[&str; 2];
    let _125: &[&str; 2];
    let _126: [&str; 2];
    let mut _127: &[core::fmt::rt::Argument<'_>];
    let mut _128: &[core::fmt::rt::Argument<'_>; 1];
    let _129: &[core::fmt::rt::Argument<'_>; 1];
    let _130: [core::fmt::rt::Argument<'_>; 1];
    let mut _131: core::fmt::rt::Argument<'_>;
    let mut _132: &error::ErrorCode;
    let _133: &error::ErrorCode;
    let mut _134: error::ErrorCode;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _140: ();
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _142: std::result::Result<(), error::ErrorCode>;
    let mut _143: bool;
    let mut _144: &anchor_lang::prelude::Pubkey;
    let _145: &state::user::User;
    let mut _146: &std::cell::Ref<'_, state::user::User>;
    let mut _147: &anchor_lang::prelude::Pubkey;
    let _148: &state::user::UserStats;
    let mut _149: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _150: ();
    let _152: ();
    let mut _153: &str;
    let _154: &str;
    let mut _155: &std::string::String;
    let _156: &std::string::String;
    let _157: std::string::String;
    let mut _159: std::fmt::Arguments<'_>;
    let mut _160: &[&str];
    let mut _161: &[&str; 2];
    let _162: &[&str; 2];
    let _163: [&str; 2];
    let mut _164: &[core::fmt::rt::Argument<'_>];
    let mut _165: &[core::fmt::rt::Argument<'_>; 1];
    let _166: &[core::fmt::rt::Argument<'_>; 1];
    let _167: [core::fmt::rt::Argument<'_>; 1];
    let mut _168: core::fmt::rt::Argument<'_>;
    let mut _169: &error::ErrorCode;
    let _170: &error::ErrorCode;
    let mut _171: error::ErrorCode;
    let mut _172: isize;
    let mut _174: !;
    let mut _175: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _177: u8;
    let mut _178: u8;
    let mut _179: (u8, bool);
    let mut _180: &mut state::user::UserStats;
    let mut _181: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _182: u8;
    let mut _183: u8;
    let mut _184: (u8, bool);
    let mut _185: &mut state::user::UserStats;
    let mut _186: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _187: &state::user::User;
    let mut _188: &std::cell::Ref<'_, state::user::User>;
    let mut _189: anchor_lang::prelude::Pubkey;
    let mut _190: &mut state::user::UserStats;
    let mut _191: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let _193: &state::state::State;
    let mut _194: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _195: ();
    let mut _196: bool;
    let mut _197: &anchor_lang::prelude::Pubkey;
    let mut _198: &anchor_lang::prelude::Pubkey;
    let _199: &anchor_lang::prelude::Pubkey;
    let _200: anchor_lang::prelude::Pubkey;
    let _201: ();
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _203: std::result::Result<(), error::ErrorCode>;
    let mut _204: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _206: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>;
    let mut _207: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _208: isize;
    let mut _210: !;
    let mut _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _213: &anchor_lang::prelude::Pubkey;
    let mut _214: &anchor_lang::prelude::Pubkey;
    let _215: &anchor_lang::prelude::Pubkey;
    let _216: anchor_lang::prelude::Pubkey;
    let mut _217: &anchor_lang::prelude::Signer<'_>;
    let mut _218: isize;
    let mut _220: !;
    let mut _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _223: ();
    let mut _224: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _225: std::result::Result<(), error::ErrorCode>;
    let mut _226: bool;
    let mut _227: u16;
    let mut _228: u16;
    let mut _229: &state::user::UserStats;
    let mut _230: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _231: ();
    let _233: ();
    let mut _234: &str;
    let _235: &str;
    let mut _236: &std::string::String;
    let _237: &std::string::String;
    let _238: std::string::String;
    let mut _240: std::fmt::Arguments<'_>;
    let mut _241: &[&str];
    let mut _242: &[&str; 2];
    let _243: &[&str; 2];
    let _244: [&str; 2];
    let mut _245: &[core::fmt::rt::Argument<'_>];
    let mut _246: &[core::fmt::rt::Argument<'_>; 1];
    let _247: &[core::fmt::rt::Argument<'_>; 1];
    let _248: [core::fmt::rt::Argument<'_>; 1];
    let mut _249: core::fmt::rt::Argument<'_>;
    let mut _250: &error::ErrorCode;
    let _251: &error::ErrorCode;
    let _252: ();
    let mut _253: &str;
    let _254: &str;
    let mut _255: &std::string::String;
    let _256: &std::string::String;
    let _257: std::string::String;
    let mut _259: std::fmt::Arguments<'_>;
    let mut _260: &[&str];
    let mut _261: &[&str; 2];
    let _262: &[&str; 2];
    let _263: [&str; 2];
    let mut _264: &[core::fmt::rt::Argument<'_>];
    let mut _265: &[core::fmt::rt::Argument<'_>; 2];
    let _266: &[core::fmt::rt::Argument<'_>; 2];
    let _267: [core::fmt::rt::Argument<'_>; 2];
    let mut _268: core::fmt::rt::Argument<'_>;
    let mut _269: &u16;
    let _270: &u16;
    let mut _271: core::fmt::rt::Argument<'_>;
    let mut _272: &u16;
    let _273: &u16;
    let _274: &state::user::UserStats;
    let mut _275: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _276: error::ErrorCode;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _282: u16;
    let mut _283: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _284: std::result::Result<u16, error::ErrorCode>;
    let mut _285: u16;
    let mut _286: &state::user::UserStats;
    let mut _287: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _288: isize;
    let mut _290: !;
    let mut _291: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _293: &mut state::user::UserStats;
    let mut _294: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let _296: ();
    let mut _297: u64;
    let mut _298: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _299: std::result::Result<u64, error::ErrorCode>;
    let mut _300: std::option::Option<u64>;
    let mut _301: u64;
    let mut _302: &state::state::State;
    let mut _303: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _304: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _305: isize;
    let mut _307: !;
    let mut _308: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _310: &mut state::state::State;
    let mut _311: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _313: &state::state::State;
    let _314: &state::state::State;
    let mut _315: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _316: ();
    let mut _317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _318: std::result::Result<(), error::ErrorCode>;
    let mut _319: bool;
    let mut _320: u64;
    let mut _321: bool;
    let mut _322: u64;
    let mut _323: &state::state::State;
    let mut _324: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _325: u64;
    let mut _326: ();
    let _328: ();
    let mut _329: &str;
    let _330: &str;
    let mut _331: &std::string::String;
    let _332: &std::string::String;
    let _333: std::string::String;
    let mut _335: std::fmt::Arguments<'_>;
    let mut _336: &[&str];
    let mut _337: &[&str; 2];
    let _338: &[&str; 2];
    let _339: [&str; 2];
    let mut _340: &[core::fmt::rt::Argument<'_>];
    let mut _341: &[core::fmt::rt::Argument<'_>; 1];
    let _342: &[core::fmt::rt::Argument<'_>; 1];
    let _343: [core::fmt::rt::Argument<'_>; 1];
    let mut _344: core::fmt::rt::Argument<'_>;
    let mut _345: &error::ErrorCode;
    let _346: &error::ErrorCode;
    let mut _347: error::ErrorCode;
    let mut _348: isize;
    let mut _350: !;
    let mut _351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _354: anchor_lang::prelude::Clock;
    let mut _355: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _356: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _357: isize;
    let mut _359: !;
    let mut _360: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _362: u32;
    let mut _363: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _364: std::result::Result<u32, error::ErrorCode>;
    let mut _365: i64;
    let mut _366: isize;
    let mut _368: !;
    let mut _369: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _371: &mut state::user::User;
    let mut _372: &mut std::cell::RefMut<'_, state::user::User>;
    let _373: ();
    let _374: ();
    let mut _375: &[&[u8]];
    let mut _376: &[&[u8]; 1];
    let _377: &[&[u8]; 1];
    let _378: [&[u8]; 1];
    let mut _379: &[u8];
    let _380: &[u8];
    let mut _381: &std::vec::Vec<u8>;
    let _382: &std::vec::Vec<u8>;
    let _383: std::vec::Vec<u8>;
    let mut _384: &state::events::NewUserRecord;
    let _385: &state::events::NewUserRecord;
    let _386: state::events::NewUserRecord;
    let mut _387: i64;
    let mut _388: anchor_lang::prelude::Pubkey;
    let mut _389: &anchor_lang::prelude::Signer<'_>;
    let mut _390: anchor_lang::prelude::Pubkey;
    let mut _391: u16;
    let mut _392: [u8; 32];
    let mut _393: anchor_lang::prelude::Pubkey;
    let mut _394: &state::user::UserStats;
    let mut _395: &std::cell::RefMut<'_, state::user::UserStats>;
    let _396: ();
    let mut _397: std::cell::RefMut<'_, state::user::User>;
    let mut _399: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _400: std::result::Result<u64, error::ErrorCode>;
    let mut _401: &state::state::State;
    let _402: &state::state::State;
    let mut _403: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _404: isize;
    let mut _406: !;
    let mut _407: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _409: ();
    let mut _410: bool;
    let mut _411: u64;
    let mut _413: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u64>;
    let mut _414: std::result::Result<u64, anchor_lang::prelude::ProgramError>;
    let mut _415: &anchor_lang::prelude::AccountInfo<'_>;
    let _416: anchor_lang::prelude::AccountInfo<'_>;
    let mut _417: &anchor_lang::prelude::Signer<'_>;
    let mut _418: isize;
    let mut _420: !;
    let mut _421: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _423: ();
    let mut _424: bool;
    let mut _425: u64;
    let mut _426: u64;
    let mut _427: !;
    let _428: ();
    let mut _429: &str;
    let _430: &str;
    let mut _431: &std::string::String;
    let _432: &std::string::String;
    let _433: std::string::String;
    let mut _435: std::fmt::Arguments<'_>;
    let mut _436: &[&str];
    let mut _437: &[&str; 2];
    let _438: &[&str; 2];
    let _439: [&str; 2];
    let mut _440: &[core::fmt::rt::Argument<'_>];
    let mut _441: &[core::fmt::rt::Argument<'_>; 2];
    let _442: &[core::fmt::rt::Argument<'_>; 2];
    let _443: [core::fmt::rt::Argument<'_>; 2];
    let mut _444: core::fmt::rt::Argument<'_>;
    let mut _445: &u64;
    let _446: &u64;
    let mut _447: core::fmt::rt::Argument<'_>;
    let mut _448: &u64;
    let _449: &u64;
    let mut _450: anchor_lang::error::Error;
    let mut _451: error::ErrorCode;
    let _452: ();
    let mut _453: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>>;
    let mut _454: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _455: &solana_program::instruction::Instruction;
    let _456: &solana_program::instruction::Instruction;
    let _457: solana_program::instruction::Instruction;
    let mut _458: &anchor_lang::prelude::Pubkey;
    let _459: &anchor_lang::prelude::Pubkey;
    let _460: anchor_lang::prelude::Pubkey;
    let mut _461: &anchor_lang::prelude::Signer<'_>;
    let mut _462: &anchor_lang::prelude::Pubkey;
    let _463: &anchor_lang::prelude::Pubkey;
    let _464: anchor_lang::prelude::Pubkey;
    let mut _465: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _466: u64;
    let mut _467: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _468: &[anchor_lang::prelude::AccountInfo<'_>; 3];
    let _469: &[anchor_lang::prelude::AccountInfo<'_>; 3];
    let _470: [anchor_lang::prelude::AccountInfo<'_>; 3];
    let mut _471: anchor_lang::prelude::AccountInfo<'_>;
    let mut _472: &anchor_lang::prelude::Signer<'_>;
    let mut _473: anchor_lang::prelude::AccountInfo<'_>;
    let mut _474: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _475: anchor_lang::prelude::AccountInfo<'_>;
    let mut _476: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _477: isize;
    let mut _479: !;
    let mut _480: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _482: ();
    let mut _489: &mut instructions::user::InitializeUser<'_>;
    let mut _490: &mut instructions::user::InitializeUser<'_>;
    let mut _491: &mut instructions::user::InitializeUser<'_>;
    let mut _492: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _493: &mut instructions::user::InitializeUser<'_>;
    let mut _494: &mut instructions::user::InitializeUser<'_>;
    let mut _495: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _496: &mut instructions::user::InitializeUser<'_>;
    let mut _497: &mut instructions::user::InitializeUser<'_>;
    let mut _498: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _499: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _500: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _501: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _502: &mut instructions::user::InitializeUser<'_>;
    let mut _503: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _504: &mut instructions::user::InitializeUser<'_>;
    let mut _505: &mut instructions::user::InitializeUser<'_>;
    let mut _506: &mut instructions::user::InitializeUser<'_>;
    let mut _507: &mut instructions::user::InitializeUser<'_>;
    let mut _508: &mut instructions::user::InitializeUser<'_>;
    let mut _509: &mut instructions::user::InitializeUser<'_>;
    let mut _510: bool;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _547: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _548: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _549: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _550: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _551: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug user_key => _4;
        let mut _6: std::cell::RefMut<'_, state::user::User>;
        let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _17: std::cell::RefMut<'_, state::user::User>;
        scope 2 {
            debug user => _6;
            let _32: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
            scope 7 {
                debug remaining_accounts_iter => _32;
                let mut _36: std::cell::RefMut<'_, state::user::UserStats>;
                let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _46: std::cell::RefMut<'_, state::user::UserStats>;
                scope 8 {
                    debug user_stats => _36;
                    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _57: u16;
                    let _65: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
                    let _66: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
                    let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _75: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
                    let _192: &anchor_lang::prelude::Pubkey;
                    scope 13 {
                        debug residual => _54;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _57;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug referrer => _65;
                        debug referrer_stats => _66;
                        let _76: anchor_lang::prelude::Pubkey;
                        scope 22 {
                            debug referrer => _76;
                        }
                        scope 23 {
                            debug referrer => _82;
                            debug referrer_stats => _83;
                            let _82: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                            let _83: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                            let _84: std::cell::Ref<'_, state::user::User>;
                            let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _94: std::cell::Ref<'_, state::user::User>;
                            scope 24 {
                                debug referrer => _84;
                                let mut _95: std::cell::RefMut<'_, state::user::UserStats>;
                                let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _105: std::cell::RefMut<'_, state::user::UserStats>;
                                scope 29 {
                                    debug referrer_stats => _95;
                                    let _114: error::ErrorCode;
                                    let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _139: ();
                                    let _151: error::ErrorCode;
                                    let _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _176: ();
                                    scope 34 {
                                        debug error_code => _114;
                                        let _121: std::string::String;
                                        let mut _488: &[&str; 2];
                                        scope 35 {
                                            debug res => _121;
                                        }
                                    }
                                    scope 36 {
                                        debug residual => _136;
                                        scope 37 {
                                        }
                                    }
                                    scope 38 {
                                        debug val => _139;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug error_code => _151;
                                        let _158: std::string::String;
                                        let mut _487: &[&str; 2];
                                        scope 41 {
                                            debug res => _158;
                                        }
                                    }
                                    scope 42 {
                                        debug residual => _173;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => _176;
                                        scope 45 {
                                        }
                                    }
                                }
                                scope 30 {
                                    debug residual => _102;
                                    scope 31 {
                                    }
                                }
                                scope 32 {
                                    debug val => _105;
                                    scope 33 {
                                    }
                                }
                            }
                            scope 25 {
                                debug residual => _91;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => _94;
                                scope 28 {
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _72;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _75;
                        scope 21 {
                        }
                    }
                    scope 46 {
                        debug whitelist_mint => _192;
                        let _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _212: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
                        let _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _222: ();
                        let _232: error::ErrorCode;
                        let _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _281: ();
                        let _289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _292: u16;
                        let _295: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                        scope 47 {
                            debug residual => _209;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug val => _212;
                            scope 50 {
                            }
                        }
                        scope 51 {
                            debug residual => _219;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug val => _222;
                            scope 54 {
                            }
                        }
                        scope 55 {
                            debug error_code => _232;
                            let _239: std::string::String;
                            let _258: std::string::String;
                            let mut _485: &[&str; 2];
                            let mut _486: &[&str; 2];
                            scope 56 {
                                debug res => _239;
                            }
                            scope 57 {
                                debug res => _258;
                            }
                        }
                        scope 58 {
                            debug residual => _278;
                            scope 59 {
                            }
                        }
                        scope 60 {
                            debug val => _281;
                            scope 61 {
                            }
                        }
                        scope 62 {
                            debug residual => _289;
                            scope 63 {
                            }
                        }
                        scope 64 {
                            debug val => _292;
                            scope 65 {
                            }
                        }
                        scope 66 {
                            debug state => _295;
                            let _306: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _309: u64;
                            let _312: u64;
                            scope 67 {
                                debug residual => _306;
                                scope 68 {
                                }
                            }
                            scope 69 {
                                debug val => _309;
                                scope 70 {
                                }
                            }
                            scope 71 {
                                debug max_number_of_sub_accounts => _312;
                                let _327: error::ErrorCode;
                                let _349: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _352: ();
                                let _353: i64;
                                let _358: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _361: anchor_lang::prelude::Clock;
                                scope 72 {
                                    debug error_code => _327;
                                    let _334: std::string::String;
                                    let mut _484: &[&str; 2];
                                    scope 73 {
                                        debug res => _334;
                                    }
                                }
                                scope 74 {
                                    debug residual => _349;
                                    scope 75 {
                                    }
                                }
                                scope 76 {
                                    debug val => _352;
                                    scope 77 {
                                    }
                                }
                                scope 78 {
                                    debug now_ts => _353;
                                    let _367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _370: u32;
                                    let _398: u64;
                                    let _405: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _408: u64;
                                    scope 83 {
                                        debug residual => _367;
                                        scope 84 {
                                        }
                                    }
                                    scope 85 {
                                        debug val => _370;
                                        scope 86 {
                                        }
                                    }
                                    scope 87 {
                                        debug init_fee => _398;
                                        let _412: u64;
                                        let _419: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _422: u64;
                                        scope 92 {
                                            debug payer_lamports => _412;
                                            let _434: std::string::String;
                                            let _478: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _481: ();
                                            let mut _483: &[&str; 2];
                                            scope 97 {
                                                debug res => _434;
                                            }
                                            scope 98 {
                                                debug residual => _478;
                                                scope 99 {
                                                }
                                            }
                                            scope 100 {
                                                debug val => _481;
                                                scope 101 {
                                                }
                                            }
                                        }
                                        scope 93 {
                                            debug residual => _419;
                                            scope 94 {
                                            }
                                        }
                                        scope 95 {
                                            debug val => _422;
                                            scope 96 {
                                            }
                                        }
                                    }
                                    scope 88 {
                                        debug residual => _405;
                                        scope 89 {
                                        }
                                    }
                                    scope 90 {
                                        debug val => _408;
                                        scope 91 {
                                        }
                                    }
                                }
                                scope 79 {
                                    debug residual => _358;
                                    scope 80 {
                                    }
                                }
                                scope 81 {
                                    debug val => _361;
                                    scope 82 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 9 {
                    debug residual => _43;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _46;
                    scope 12 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _14;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _17;
            scope 6 {
            }
        }
    }

    bb0: {
        _510 = const false;
        StorageLive(_4);
        StorageLive(_5);
        _489 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _5 = &((*_489).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _4 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _490 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _10 = &((*_490).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _9 = anchor_lang::prelude::AccountLoader::<'_, User>::load_init(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = error::ErrorCode::UnableToLoadAccountLoader;
        _11 = std::result::Result::<RefMut<'_, User>, error::ErrorCode>::Err(move _12);
        StorageDead(_12);
        _8 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _9, move _11) -> [return: bb3, unwind: bb256];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_9);
        _7 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _8) -> [return: bb4, unwind: bb256];
    }

    bb4: {
        StorageDead(_8);
        _13 = discriminant(_7);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = move ((_7 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _510 = const true;
        _6 = move _17;
        StorageDead(_17);
        _513 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_18);
        StorageLive(_19);
        _491 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _19 = &((*_491).3: anchor_lang::prelude::Signer<'_>);
        _18 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _19) -> [return: bb9, unwind: bb265];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb8, unwind: bb266];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        _511 = discriminant(_7);
        StorageDead(_7);
        goto -> bb239;
    }

    bb9: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _6;
        _20 = <RefMut<'_, User> as DerefMut>::deref_mut(move _21) -> [return: bb10, unwind: bb265];
    }

    bb10: {
        StorageDead(_21);
        ((*_20).0: anchor_lang::prelude::Pubkey) = move _18;
        StorageDead(_18);
        StorageDead(_20);
        StorageLive(_22);
        _22 = _2;
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut _6;
        _23 = <RefMut<'_, User> as DerefMut>::deref_mut(move _24) -> [return: bb11, unwind: bb265];
    }

    bb11: {
        StorageDead(_24);
        ((*_23).18: u16) = move _22;
        StorageDead(_22);
        StorageDead(_23);
        StorageLive(_25);
        _25 = _3;
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut _6;
        _26 = <RefMut<'_, User> as DerefMut>::deref_mut(move _27) -> [return: bb12, unwind: bb265];
    }

    bb12: {
        StorageDead(_27);
        ((*_26).2: [u8; 32]) = move _25;
        StorageDead(_25);
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut _6;
        _28 = <RefMut<'_, User> as DerefMut>::deref_mut(move _29) -> [return: bb13, unwind: bb265];
    }

    bb13: {
        StorageDead(_29);
        ((*_28).15: u32) = const 1_u32;
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &mut _6;
        _30 = <RefMut<'_, User> as DerefMut>::deref_mut(move _31) -> [return: bb14, unwind: bb265];
    }

    bb14: {
        StorageDead(_31);
        ((*_30).17: u16) = const 1_u16;
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _492 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _35 = &(*_492);
        _34 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _35) -> [return: bb15, unwind: bb265];
    }

    bb15: {
        StorageDead(_35);
        _33 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _34) -> [return: bb16, unwind: bb265];
    }

    bb16: {
        StorageDead(_34);
        _32 = &mut _33;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _493 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _40 = &((*_493).1: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _39 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _40) -> [return: bb17, unwind: bb265];
    }

    bb17: {
        StorageDead(_40);
        StorageLive(_41);
        _41 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _38 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _39, move _41) -> [return: bb18, unwind: bb265];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _38) -> [return: bb19, unwind: bb265];
    }

    bb19: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb20, 1: bb21, otherwise: bb6];
    }

    bb20: {
        StorageLive(_46);
        _46 = move ((_37 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _36 = move _46;
        StorageDead(_46);
        _517 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_36;
        _51 = <RefMut<'_, UserStats> as Deref>::deref(move _52) -> [return: bb23, unwind: bb255];
    }

    bb21: {
        StorageLive(_43);
        _43 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb22, unwind: bb263];
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_43);
        _515 = discriminant(_37);
        StorageDead(_37);
        goto -> bb238;
    }

    bb23: {
        StorageDead(_52);
        _50 = ((*_51).11: u16);
        _49 = <u16 as SafeMath>::safe_add(move _50, const 1_u16) -> [return: bb24, unwind: bb255];
    }

    bb24: {
        StorageDead(_50);
        _48 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _49) -> [return: bb25, unwind: bb255];
    }

    bb25: {
        StorageDead(_49);
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb26, 1: bb27, otherwise: bb6];
    }

    bb26: {
        StorageLive(_57);
        _57 = ((_48 as Continue).0: u16);
        _47 = _57;
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &mut _36;
        _58 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _59) -> [return: bb29, unwind: bb255];
    }

    bb27: {
        StorageLive(_54);
        _54 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb28, unwind: bb255];
    }

    bb28: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_47);
        StorageDead(_51);
        StorageDead(_48);
        goto -> bb237;
    }

    bb29: {
        StorageDead(_59);
        ((*_58).11: u16) = move _47;
        StorageDead(_47);
        StorageDead(_58);
        StorageDead(_51);
        StorageDead(_48);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_36;
        _63 = <RefMut<'_, UserStats> as Deref>::deref(move _64) -> [return: bb30, unwind: bb255];
    }

    bb30: {
        StorageDead(_64);
        _62 = ((*_63).12: u16);
        _61 = Eq(move _62, const 0_u16);
        switchInt(move _61) -> [0: bb91, otherwise: bb31];
    }

    bb31: {
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &mut (*_32);
        _69 = get_referrer_and_referrer_stats(move _70) -> [return: bb32, unwind: bb255];
    }

    bb32: {
        StorageDead(_70);
        _68 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as Try>::branch(move _69) -> [return: bb33, unwind: bb255];
    }

    bb33: {
        StorageDead(_69);
        _71 = discriminant(_68);
        switchInt(move _71) -> [0: bb34, 1: bb35, otherwise: bb6];
    }

    bb34: {
        StorageLive(_75);
        _75 = move ((_68 as Continue).0: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>));
        _67 = move _75;
        StorageDead(_75);
        StorageLive(_65);
        _65 = move (_67.0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>);
        StorageLive(_66);
        _66 = move (_67.1: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = move _65;
        StorageLive(_79);
        _79 = move _66;
        _77 = (move _78, move _79);
        StorageDead(_79);
        StorageDead(_78);
        _81 = discriminant((_77.0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>));
        switchInt(move _81) -> [1: bb38, otherwise: bb37];
    }

    bb35: {
        StorageLive(_72);
        _72 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb36, unwind: bb255];
    }

    bb36: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb236;
    }

    bb37: {
        _76 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb267, unwind: bb255];
    }

    bb38: {
        _80 = discriminant((_77.1: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>));
        switchInt(move _80) -> [1: bb39, otherwise: bb37];
    }

    bb39: {
        StorageLive(_82);
        _82 = move (((_77.0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>) as Some).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        StorageLive(_83);
        _83 = move (((_77.1: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>) as Some).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_82;
        _87 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _88) -> [return: bb40, unwind: bb255];
    }

    bb40: {
        StorageDead(_88);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _86 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _87, move _89) -> [return: bb41, unwind: bb255];
    }

    bb41: {
        StorageDead(_89);
        StorageDead(_87);
        _85 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _86) -> [return: bb42, unwind: bb255];
    }

    bb42: {
        StorageDead(_86);
        _90 = discriminant(_85);
        switchInt(move _90) -> [0: bb43, 1: bb44, otherwise: bb6];
    }

    bb43: {
        StorageLive(_94);
        _94 = move ((_85 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _84 = move _94;
        StorageDead(_94);
        _521 = discriminant(_85);
        StorageDead(_85);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_83;
        _98 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _99) -> [return: bb46, unwind: bb254];
    }

    bb44: {
        StorageLive(_91);
        _91 = ((_85 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb45, unwind: bb262];
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_91);
        _519 = discriminant(_85);
        StorageDead(_85);
        goto -> bb235;
    }

    bb46: {
        StorageDead(_99);
        StorageLive(_100);
        _100 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _97 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _98, move _100) -> [return: bb47, unwind: bb254];
    }

    bb47: {
        StorageDead(_100);
        StorageDead(_98);
        _96 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _97) -> [return: bb48, unwind: bb254];
    }

    bb48: {
        StorageDead(_97);
        _101 = discriminant(_96);
        switchInt(move _101) -> [0: bb49, 1: bb50, otherwise: bb6];
    }

    bb49: {
        StorageLive(_105);
        _105 = move ((_96 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _95 = move _105;
        StorageDead(_105);
        _525 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &_84;
        _111 = <Ref<'_, User> as Deref>::deref(move _112) -> [return: bb52, unwind: bb253];
    }

    bb50: {
        StorageLive(_102);
        _102 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb51, unwind: bb261];
    }

    bb51: {
        StorageDead(_104);
        StorageDead(_102);
        _523 = discriminant(_96);
        StorageDead(_96);
        goto -> bb234;
    }

    bb52: {
        StorageDead(_112);
        _110 = ((*_111).18: u16);
        _109 = Eq(move _110, const 0_u16);
        switchInt(move _109) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_113);
        _113 = ();
        _108 = std::result::Result::<(), error::ErrorCode>::Ok(move _113);
        StorageDead(_113);
        goto -> bb61;
    }

    bb54: {
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_114);
        _114 = error::ErrorCode::InvalidReferrer;
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _488 = const _;
        _125 = &(*_488);
        _124 = &(*_125);
        _123 = move _124 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &_114;
        _132 = &(*_133);
        _131 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _132) -> [return: bb55, unwind: bb253];
    }

    bb55: {
        StorageDead(_132);
        _130 = [move _131];
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = move _128 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_128);
        _122 = Arguments::<'_>::new_v1(move _123, move _127) -> [return: bb56, unwind: bb253];
    }

    bb56: {
        StorageDead(_127);
        StorageDead(_123);
        _121 = format(move _122) -> [return: bb57, unwind: bb253];
    }

    bb57: {
        StorageDead(_122);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        _120 = move _121;
        StorageDead(_121);
        _119 = &_120;
        _118 = &(*_119);
        _117 = <String as Deref>::deref(move _118) -> [return: bb58, unwind: bb252];
    }

    bb58: {
        _116 = &(*_117);
        StorageDead(_118);
        _115 = solana_program::log::sol_log(move _116) -> [return: bb59, unwind: bb252];
    }

    bb59: {
        StorageDead(_116);
        drop(_120) -> [return: bb60, unwind: bb253];
    }

    bb60: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageLive(_134);
        _134 = _114;
        _108 = std::result::Result::<(), error::ErrorCode>::Err(move _134);
        StorageDead(_134);
        StorageDead(_114);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_109);
        _107 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _108) -> [return: bb62, unwind: bb253];
    }

    bb62: {
        StorageDead(_108);
        _135 = discriminant(_107);
        switchInt(move _135) -> [0: bb63, 1: bb64, otherwise: bb6];
    }

    bb63: {
        StorageLive(_139);
        _139 = ((_107 as Continue).0: ());
        _106 = _139;
        StorageDead(_139);
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &_84;
        _145 = <Ref<'_, User> as Deref>::deref(move _146) -> [return: bb66, unwind: bb253];
    }

    bb64: {
        StorageLive(_136);
        _136 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb65, unwind: bb253];
    }

    bb65: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb233;
    }

    bb66: {
        StorageDead(_146);
        _144 = &((*_145).0: anchor_lang::prelude::Pubkey);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_95;
        _148 = <RefMut<'_, UserStats> as Deref>::deref(move _149) -> [return: bb67, unwind: bb253];
    }

    bb67: {
        StorageDead(_149);
        _147 = &((*_148).0: anchor_lang::prelude::Pubkey);
        _143 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _144, move _147) -> [return: bb68, unwind: bb253];
    }

    bb68: {
        switchInt(move _143) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_150);
        _150 = ();
        _142 = std::result::Result::<(), error::ErrorCode>::Ok(move _150);
        StorageDead(_150);
        goto -> bb77;
    }

    bb70: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_151);
        _151 = error::ErrorCode::ReferrerAndReferrerStatsAuthorityUnequal;
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _487 = const _;
        _162 = &(*_487);
        _161 = &(*_162);
        _160 = move _161 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_161);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &_151;
        _169 = &(*_170);
        _168 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _169) -> [return: bb71, unwind: bb253];
    }

    bb71: {
        StorageDead(_169);
        _167 = [move _168];
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = move _165 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_165);
        _159 = Arguments::<'_>::new_v1(move _160, move _164) -> [return: bb72, unwind: bb253];
    }

    bb72: {
        StorageDead(_164);
        StorageDead(_160);
        _158 = format(move _159) -> [return: bb73, unwind: bb253];
    }

    bb73: {
        StorageDead(_159);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_162);
        _157 = move _158;
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = <String as Deref>::deref(move _155) -> [return: bb74, unwind: bb251];
    }

    bb74: {
        _153 = &(*_154);
        StorageDead(_155);
        _152 = solana_program::log::sol_log(move _153) -> [return: bb75, unwind: bb251];
    }

    bb75: {
        StorageDead(_153);
        drop(_157) -> [return: bb76, unwind: bb253];
    }

    bb76: {
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_152);
        StorageLive(_171);
        _171 = _151;
        _142 = std::result::Result::<(), error::ErrorCode>::Err(move _171);
        StorageDead(_171);
        StorageDead(_151);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_143);
        _141 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _142) -> [return: bb78, unwind: bb253];
    }

    bb78: {
        StorageDead(_142);
        _172 = discriminant(_141);
        switchInt(move _172) -> [0: bb79, 1: bb80, otherwise: bb6];
    }

    bb79: {
        StorageLive(_176);
        _176 = ((_141 as Continue).0: ());
        _140 = _176;
        StorageDead(_176);
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_177);
        StorageLive(_178);
        _179 = CheckedAdd(const _, const 0_u8);
        assert(!move (_179.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_u8) -> [success: bb82, unwind: bb253];
    }

    bb80: {
        StorageLive(_173);
        _173 = ((_141 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_175);
        _175 = _173;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _175) -> [return: bb81, unwind: bb253];
    }

    bb81: {
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb233;
    }

    bb82: {
        _178 = move (_179.0: u8);
        _177 = move _178 as u8 (IntToInt);
        StorageDead(_178);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &mut _95;
        _180 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _181) -> [return: bb83, unwind: bb253];
    }

    bb83: {
        StorageDead(_181);
        ((*_180).13: u8) = BitOr(((*_180).13: u8), move _177);
        StorageDead(_177);
        StorageDead(_180);
        StorageLive(_182);
        StorageLive(_183);
        _184 = CheckedAdd(const _, const 0_u8);
        assert(!move (_184.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_u8) -> [success: bb84, unwind: bb253];
    }

    bb84: {
        _183 = move (_184.0: u8);
        _182 = move _183 as u8 (IntToInt);
        StorageDead(_183);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &mut _36;
        _185 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _186) -> [return: bb85, unwind: bb253];
    }

    bb85: {
        StorageDead(_186);
        ((*_185).13: u8) = BitOr(((*_185).13: u8), move _182);
        StorageDead(_182);
        StorageDead(_185);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_84;
        _187 = <Ref<'_, User> as Deref>::deref(move _188) -> [return: bb86, unwind: bb253];
    }

    bb86: {
        StorageDead(_188);
        _76 = ((*_187).0: anchor_lang::prelude::Pubkey);
        drop(_95) -> [return: bb87, unwind: bb254];
    }

    bb87: {
        StorageDead(_95);
        drop(_84) -> [return: bb88, unwind: bb255];
    }

    bb88: {
        StorageDead(_84);
        StorageDead(_187);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_77);
        StorageLive(_189);
        _189 = _76;
        StorageLive(_190);
        StorageLive(_191);
        _191 = &mut _36;
        _190 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _191) -> [return: bb90, unwind: bb255];
    }

    bb90: {
        StorageDead(_191);
        ((*_190).1: anchor_lang::prelude::Pubkey) = move _189;
        StorageDead(_189);
        StorageDead(_190);
        _60 = const ();
        StorageDead(_76);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb92;
    }

    bb91: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = const ();
        goto -> bb92;
    }

    bb92: {
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _494 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _495 = deref_copy ((*_494).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _546 = (((_495.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _194 = &(*_546);
        _193 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _194) -> [return: bb93, unwind: bb255];
    }

    bb93: {
        StorageDead(_194);
        _192 = &((*_193).1: anchor_lang::prelude::Pubkey);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &(*_192);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb94, unwind: bb255];
    }

    bb94: {
        _199 = &_200;
        _198 = &(*_199);
        _196 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _197, move _198) -> [return: bb95, unwind: bb255];
    }

    bb95: {
        switchInt(move _196) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_200);
        StorageDead(_199);
        _195 = const ();
        goto -> bb109;
    }

    bb97: {
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &mut (*_32);
        _206 = get_whitelist_token(move _207) -> [return: bb98, unwind: bb255];
    }

    bb98: {
        StorageDead(_207);
        _205 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as Try>::branch(move _206) -> [return: bb99, unwind: bb255];
    }

    bb99: {
        StorageDead(_206);
        _208 = discriminant(_205);
        switchInt(move _208) -> [0: bb100, 1: bb101, otherwise: bb6];
    }

    bb100: {
        StorageLive(_212);
        _212 = move ((_205 as Continue).0: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _204 = move _212;
        StorageDead(_212);
        StorageLive(_213);
        _213 = &(*_192);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _496 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _217 = &((*_496).3: anchor_lang::prelude::Signer<'_>);
        _216 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _217) -> [return: bb103, unwind: bb255];
    }

    bb101: {
        StorageLive(_209);
        _209 = ((_205 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_211);
        _211 = _209;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _211) -> [return: bb102, unwind: bb255];
    }

    bb102: {
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb231;
    }

    bb103: {
        StorageDead(_217);
        _215 = &_216;
        _214 = &(*_215);
        _203 = validate_whitelist_token(move _204, move _213, move _214) -> [return: bb104, unwind: bb255];
    }

    bb104: {
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_204);
        _202 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _203) -> [return: bb105, unwind: bb255];
    }

    bb105: {
        StorageDead(_203);
        _218 = discriminant(_202);
        switchInt(move _218) -> [0: bb106, 1: bb107, otherwise: bb6];
    }

    bb106: {
        StorageLive(_222);
        _222 = ((_202 as Continue).0: ());
        _201 = _222;
        StorageDead(_222);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_201);
        _195 = const ();
        goto -> bb109;
    }

    bb107: {
        StorageLive(_219);
        _219 = ((_202 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_221);
        _221 = _219;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _221) -> [return: bb108, unwind: bb255];
    }

    bb108: {
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_215);
        goto -> bb231;
    }

    bb109: {
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = _2;
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &_36;
        _229 = <RefMut<'_, UserStats> as Deref>::deref(move _230) -> [return: bb110, unwind: bb255];
    }

    bb110: {
        StorageDead(_230);
        _228 = ((*_229).12: u16);
        _226 = Eq(move _227, move _228);
        switchInt(move _226) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_231);
        _231 = ();
        _225 = std::result::Result::<(), error::ErrorCode>::Ok(move _231);
        StorageDead(_231);
        goto -> bb127;
    }

    bb112: {
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_232);
        _232 = error::ErrorCode::InvalidUserSubAccountId;
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _486 = const _;
        _243 = &(*_486);
        _242 = &(*_243);
        _241 = move _242 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_242);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &_232;
        _250 = &(*_251);
        _249 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _250) -> [return: bb113, unwind: bb255];
    }

    bb113: {
        StorageDead(_250);
        _248 = [move _249];
        StorageDead(_249);
        _247 = &_248;
        _246 = &(*_247);
        _245 = move _246 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_246);
        _240 = Arguments::<'_>::new_v1(move _241, move _245) -> [return: bb114, unwind: bb255];
    }

    bb114: {
        StorageDead(_245);
        StorageDead(_241);
        _239 = format(move _240) -> [return: bb115, unwind: bb255];
    }

    bb115: {
        StorageDead(_240);
        StorageDead(_251);
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_243);
        _238 = move _239;
        StorageDead(_239);
        _237 = &_238;
        _236 = &(*_237);
        _235 = <String as Deref>::deref(move _236) -> [return: bb116, unwind: bb250];
    }

    bb116: {
        _234 = &(*_235);
        StorageDead(_236);
        _233 = solana_program::log::sol_log(move _234) -> [return: bb117, unwind: bb250];
    }

    bb117: {
        StorageDead(_234);
        drop(_238) -> [return: bb118, unwind: bb255];
    }

    bb118: {
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_233);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _485 = const _;
        _262 = &(*_485);
        _261 = &(*_262);
        _260 = move _261 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_261);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &_2;
        _269 = &(*_270);
        _268 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _269) -> [return: bb119, unwind: bb255];
    }

    bb119: {
        StorageDead(_269);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &_36;
        _274 = <RefMut<'_, UserStats> as Deref>::deref(move _275) -> [return: bb120, unwind: bb255];
    }

    bb120: {
        StorageDead(_275);
        _273 = &((*_274).12: u16);
        _272 = &(*_273);
        _271 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _272) -> [return: bb121, unwind: bb255];
    }

    bb121: {
        StorageDead(_272);
        _267 = [move _268, move _271];
        StorageDead(_271);
        StorageDead(_268);
        _266 = &_267;
        _265 = &(*_266);
        _264 = move _265 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_265);
        _259 = Arguments::<'_>::new_v1(move _260, move _264) -> [return: bb122, unwind: bb255];
    }

    bb122: {
        StorageDead(_264);
        StorageDead(_260);
        _258 = format(move _259) -> [return: bb123, unwind: bb255];
    }

    bb123: {
        StorageDead(_259);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_262);
        _257 = move _258;
        StorageDead(_258);
        _256 = &_257;
        _255 = &(*_256);
        _254 = <String as Deref>::deref(move _255) -> [return: bb124, unwind: bb249];
    }

    bb124: {
        _253 = &(*_254);
        StorageDead(_255);
        _252 = solana_program::log::sol_log(move _253) -> [return: bb125, unwind: bb249];
    }

    bb125: {
        StorageDead(_253);
        drop(_257) -> [return: bb126, unwind: bb255];
    }

    bb126: {
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_252);
        StorageLive(_276);
        _276 = _232;
        _225 = std::result::Result::<(), error::ErrorCode>::Err(move _276);
        StorageDead(_276);
        StorageDead(_232);
        goto -> bb127;
    }

    bb127: {
        StorageDead(_226);
        _224 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _225) -> [return: bb128, unwind: bb255];
    }

    bb128: {
        StorageDead(_225);
        _277 = discriminant(_224);
        switchInt(move _277) -> [0: bb129, 1: bb130, otherwise: bb6];
    }

    bb129: {
        StorageLive(_281);
        _281 = ((_224 as Continue).0: ());
        _223 = _281;
        StorageDead(_281);
        StorageDead(_224);
        StorageDead(_223);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_36;
        _286 = <RefMut<'_, UserStats> as Deref>::deref(move _287) -> [return: bb132, unwind: bb255];
    }

    bb130: {
        StorageLive(_278);
        _278 = ((_224 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_280);
        _280 = _278;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _280) -> [return: bb131, unwind: bb255];
    }

    bb131: {
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_224);
        StorageDead(_223);
        goto -> bb232;
    }

    bb132: {
        StorageDead(_287);
        _285 = ((*_286).12: u16);
        _284 = <u16 as SafeMath>::safe_add(move _285, const 1_u16) -> [return: bb133, unwind: bb255];
    }

    bb133: {
        StorageDead(_285);
        _283 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _284) -> [return: bb134, unwind: bb255];
    }

    bb134: {
        StorageDead(_284);
        _288 = discriminant(_283);
        switchInt(move _288) -> [0: bb135, 1: bb136, otherwise: bb6];
    }

    bb135: {
        StorageLive(_292);
        _292 = ((_283 as Continue).0: u16);
        _282 = _292;
        StorageDead(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &mut _36;
        _293 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _294) -> [return: bb138, unwind: bb255];
    }

    bb136: {
        StorageLive(_289);
        _289 = ((_283 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_291);
        _291 = _289;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _291) -> [return: bb137, unwind: bb255];
    }

    bb137: {
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_282);
        StorageDead(_286);
        StorageDead(_283);
        goto -> bb232;
    }

    bb138: {
        StorageDead(_294);
        ((*_293).12: u16) = move _282;
        StorageDead(_282);
        StorageDead(_293);
        StorageDead(_286);
        StorageDead(_283);
        StorageLive(_295);
        _497 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _295 = &mut ((*_497).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _498 = deref_copy (*_295);
        _547 = (((_498.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _303 = &(*_547);
        _302 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _303) -> [return: bb139, unwind: bb255];
    }

    bb139: {
        StorageDead(_303);
        _301 = ((*_302).9: u64);
        _300 = core::num::<impl u64>::checked_add(move _301, const 1_u64) -> [return: bb140, unwind: bb255];
    }

    bb140: {
        StorageDead(_301);
        StorageLive(_304);
        _304 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _299 = Option::<u64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _300, move _304) -> [return: bb141, unwind: bb255];
    }

    bb141: {
        StorageDead(_304);
        StorageDead(_300);
        _298 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _299) -> [return: bb142, unwind: bb255];
    }

    bb142: {
        StorageDead(_299);
        _305 = discriminant(_298);
        switchInt(move _305) -> [0: bb143, 1: bb144, otherwise: bb6];
    }

    bb143: {
        StorageLive(_309);
        _309 = ((_298 as Continue).0: u64);
        _297 = _309;
        StorageDead(_309);
        StorageLive(_310);
        StorageLive(_311);
        _499 = deref_copy (*_295);
        _548 = (((_499.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _311 = &mut (*_548);
        _310 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _311) -> [return: bb146, unwind: bb255];
    }

    bb144: {
        StorageLive(_306);
        _306 = ((_298 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_308);
        _308 = _306;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _308) -> [return: bb145, unwind: bb255];
    }

    bb145: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_297);
        StorageDead(_302);
        StorageDead(_298);
        StorageDead(_296);
        goto -> bb230;
    }

    bb146: {
        StorageDead(_311);
        ((*_310).9: u64) = move _297;
        _296 = const ();
        StorageDead(_297);
        StorageDead(_310);
        StorageDead(_302);
        StorageDead(_298);
        StorageDead(_296);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _500 = deref_copy (*_295);
        _549 = (((_500.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _315 = &(*_549);
        _314 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _315) -> [return: bb147, unwind: bb255];
    }

    bb147: {
        _313 = &(*_314);
        StorageDead(_315);
        _312 = state::state::State::max_number_of_sub_accounts(move _313) -> [return: bb148, unwind: bb255];
    }

    bb148: {
        StorageDead(_313);
        StorageDead(_314);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = _312;
        _319 = Eq(move _320, const 0_u64);
        switchInt(move _319) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        StorageDead(_320);
        goto -> bb152;
    }

    bb150: {
        StorageDead(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _501 = deref_copy (*_295);
        _550 = (((_501.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _324 = &(*_550);
        _323 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _324) -> [return: bb151, unwind: bb255];
    }

    bb151: {
        StorageDead(_324);
        _322 = ((*_323).9: u64);
        StorageLive(_325);
        _325 = _312;
        _321 = Le(move _322, move _325);
        switchInt(move _321) -> [0: bb153, otherwise: bb152];
    }

    bb152: {
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_322);
        StorageLive(_326);
        _326 = ();
        _318 = std::result::Result::<(), error::ErrorCode>::Ok(move _326);
        StorageDead(_326);
        goto -> bb160;
    }

    bb153: {
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_322);
        StorageLive(_327);
        _327 = error::ErrorCode::MaxNumberOfUsers;
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _484 = const _;
        _338 = &(*_484);
        _337 = &(*_338);
        _336 = move _337 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_337);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = &_327;
        _345 = &(*_346);
        _344 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _345) -> [return: bb154, unwind: bb255];
    }

    bb154: {
        StorageDead(_345);
        _343 = [move _344];
        StorageDead(_344);
        _342 = &_343;
        _341 = &(*_342);
        _340 = move _341 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_341);
        _335 = Arguments::<'_>::new_v1(move _336, move _340) -> [return: bb155, unwind: bb255];
    }

    bb155: {
        StorageDead(_340);
        StorageDead(_336);
        _334 = format(move _335) -> [return: bb156, unwind: bb255];
    }

    bb156: {
        StorageDead(_335);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_338);
        _333 = move _334;
        StorageDead(_334);
        _332 = &_333;
        _331 = &(*_332);
        _330 = <String as Deref>::deref(move _331) -> [return: bb157, unwind: bb248];
    }

    bb157: {
        _329 = &(*_330);
        StorageDead(_331);
        _328 = solana_program::log::sol_log(move _329) -> [return: bb158, unwind: bb248];
    }

    bb158: {
        StorageDead(_329);
        drop(_333) -> [return: bb159, unwind: bb255];
    }

    bb159: {
        StorageDead(_333);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_328);
        StorageLive(_347);
        _347 = _327;
        _318 = std::result::Result::<(), error::ErrorCode>::Err(move _347);
        StorageDead(_347);
        StorageDead(_327);
        goto -> bb160;
    }

    bb160: {
        StorageDead(_321);
        StorageDead(_319);
        _317 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _318) -> [return: bb161, unwind: bb255];
    }

    bb161: {
        StorageDead(_318);
        _348 = discriminant(_317);
        switchInt(move _348) -> [0: bb162, 1: bb163, otherwise: bb6];
    }

    bb162: {
        StorageLive(_352);
        _352 = ((_317 as Continue).0: ());
        _316 = _352;
        StorageDead(_352);
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb165, unwind: bb255];
    }

    bb163: {
        StorageLive(_349);
        _349 = ((_317 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_351);
        _351 = _349;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _351) -> [return: bb164, unwind: bb255];
    }

    bb164: {
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_317);
        StorageDead(_316);
        goto -> bb229;
    }

    bb165: {
        _355 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _356) -> [return: bb166, unwind: bb255];
    }

    bb166: {
        StorageDead(_356);
        _357 = discriminant(_355);
        switchInt(move _357) -> [0: bb167, 1: bb168, otherwise: bb6];
    }

    bb167: {
        StorageLive(_361);
        _361 = move ((_355 as Continue).0: anchor_lang::prelude::Clock);
        _354 = move _361;
        StorageDead(_361);
        _353 = (_354.4: i64);
        _527 = discriminant(_355);
        StorageDead(_355);
        StorageDead(_354);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = _353;
        _364 = <i64 as Cast>::cast::<u32>(move _365) -> [return: bb170, unwind: bb255];
    }

    bb168: {
        StorageLive(_358);
        _358 = move ((_355 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_360);
        _360 = move _358;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _360) -> [return: bb169, unwind: bb260];
    }

    bb169: {
        StorageDead(_360);
        StorageDead(_358);
        _537 = discriminant(_355);
        StorageDead(_355);
        StorageDead(_354);
        goto -> bb228;
    }

    bb170: {
        StorageDead(_365);
        _363 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _364) -> [return: bb171, unwind: bb255];
    }

    bb171: {
        StorageDead(_364);
        _366 = discriminant(_363);
        switchInt(move _366) -> [0: bb172, 1: bb173, otherwise: bb6];
    }

    bb172: {
        StorageLive(_370);
        _370 = ((_363 as Continue).0: u32);
        _362 = _370;
        StorageDead(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &mut _6;
        _371 = <RefMut<'_, User> as DerefMut>::deref_mut(move _372) -> [return: bb175, unwind: bb255];
    }

    bb173: {
        StorageLive(_367);
        _367 = ((_363 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_369);
        _369 = _367;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _369) -> [return: bb174, unwind: bb255];
    }

    bb174: {
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_362);
        StorageDead(_363);
        goto -> bb228;
    }

    bb175: {
        StorageDead(_372);
        ((*_371).29: u32) = move _362;
        StorageDead(_362);
        StorageDead(_371);
        StorageDead(_363);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = _353;
        StorageLive(_388);
        StorageLive(_389);
        _502 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _389 = &((*_502).3: anchor_lang::prelude::Signer<'_>);
        _388 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _389) -> [return: bb176, unwind: bb255];
    }

    bb176: {
        StorageDead(_389);
        StorageLive(_390);
        _390 = _4;
        StorageLive(_391);
        _391 = _2;
        StorageLive(_392);
        _392 = _3;
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = &_36;
        _394 = <RefMut<'_, UserStats> as Deref>::deref(move _395) -> [return: bb177, unwind: bb255];
    }

    bb177: {
        StorageDead(_395);
        _393 = ((*_394).1: anchor_lang::prelude::Pubkey);
        _386 = NewUserRecord { ts: move _387, user_authority: move _388, user: move _390, sub_account_id: move _391, name: move _392, referrer: move _393 };
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_387);
        _385 = &_386;
        _384 = &(*_385);
        _383 = <NewUserRecord as anchor_lang::Event>::data(move _384) -> [return: bb178, unwind: bb255];
    }

    bb178: {
        StorageDead(_384);
        _382 = &_383;
        _381 = &(*_382);
        _380 = <Vec<u8> as Deref>::deref(move _381) -> [return: bb179, unwind: bb247];
    }

    bb179: {
        _379 = &(*_380);
        StorageDead(_381);
        _378 = [move _379];
        StorageDead(_379);
        _377 = &_378;
        _376 = &(*_377);
        _375 = move _376 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_376);
        _374 = solana_program::log::sol_log_data(move _375) -> [return: bb180, unwind: bb247];
    }

    bb180: {
        StorageDead(_375);
        drop(_383) -> [return: bb181, unwind: bb255];
    }

    bb181: {
        StorageDead(_394);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_383);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_374);
        _373 = const ();
        StorageDead(_373);
        StorageLive(_396);
        StorageLive(_397);
        _510 = const false;
        _397 = move _6;
        _396 = std::mem::drop::<RefMut<'_, User>>(move _397) -> [return: bb182, unwind: bb255];
    }

    bb182: {
        StorageDead(_397);
        StorageDead(_396);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        _503 = deref_copy (*_295);
        _551 = (((_503.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _403 = &(*_551);
        _402 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _403) -> [return: bb183, unwind: bb255];
    }

    bb183: {
        _401 = &(*_402);
        StorageDead(_403);
        _400 = state::state::State::get_init_user_fee(move _401) -> [return: bb184, unwind: bb255];
    }

    bb184: {
        StorageDead(_401);
        _399 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _400) -> [return: bb185, unwind: bb255];
    }

    bb185: {
        StorageDead(_400);
        _404 = discriminant(_399);
        switchInt(move _404) -> [0: bb186, 1: bb187, otherwise: bb6];
    }

    bb186: {
        StorageLive(_408);
        _408 = ((_399 as Continue).0: u64);
        _398 = _408;
        StorageDead(_408);
        StorageDead(_402);
        StorageDead(_399);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = _398;
        _410 = Gt(move _411, const 0_u64);
        switchInt(move _410) -> [0: bb190, otherwise: bb189];
    }

    bb187: {
        StorageLive(_405);
        _405 = ((_399 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_407);
        _407 = _405;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _407) -> [return: bb188, unwind: bb255];
    }

    bb188: {
        StorageDead(_407);
        StorageDead(_405);
        StorageDead(_402);
        StorageDead(_399);
        goto -> bb227;
    }

    bb189: {
        StorageDead(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _504 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _417 = &((*_504).4: anchor_lang::prelude::Signer<'_>);
        _416 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _417) -> [return: bb191, unwind: bb255];
    }

    bb190: {
        StorageDead(_411);
        _409 = const ();
        goto -> bb221;
    }

    bb191: {
        _415 = &_416;
        StorageDead(_417);
        _414 = anchor_lang::prelude::AccountInfo::<'_>::try_lamports(move _415) -> [return: bb192, unwind: bb246];
    }

    bb192: {
        StorageDead(_415);
        _413 = <std::result::Result<u64, anchor_lang::prelude::ProgramError> as Try>::branch(move _414) -> [return: bb193, unwind: bb246];
    }

    bb193: {
        StorageDead(_414);
        _418 = discriminant(_413);
        switchInt(move _418) -> [0: bb194, 1: bb195, otherwise: bb6];
    }

    bb194: {
        StorageLive(_422);
        _422 = ((_413 as Continue).0: u64);
        _412 = _422;
        StorageDead(_422);
        _529 = discriminant(_413);
        drop(_416) -> [return: bb197, unwind: bb255];
    }

    bb195: {
        StorageLive(_419);
        _419 = move ((_413 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_421);
        _421 = move _419;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _421) -> [return: bb196, unwind: bb259];
    }

    bb196: {
        StorageDead(_421);
        StorageDead(_419);
        _535 = discriminant(_413);
        drop(_416) -> [return: bb225, unwind: bb255];
    }

    bb197: {
        StorageDead(_416);
        StorageDead(_413);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = _412;
        StorageLive(_426);
        _426 = _398;
        _424 = Lt(move _425, move _426);
        switchInt(move _424) -> [0: bb207, otherwise: bb198];
    }

    bb198: {
        StorageDead(_426);
        StorageDead(_425);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        _483 = const _;
        _438 = &(*_483);
        _437 = &(*_438);
        _436 = move _437 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_437);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = &_412;
        _445 = &(*_446);
        _444 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _445) -> [return: bb199, unwind: bb255];
    }

    bb199: {
        StorageDead(_445);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = &_398;
        _448 = &(*_449);
        _447 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _448) -> [return: bb200, unwind: bb255];
    }

    bb200: {
        StorageDead(_448);
        _443 = [move _444, move _447];
        StorageDead(_447);
        StorageDead(_444);
        _442 = &_443;
        _441 = &(*_442);
        _440 = move _441 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_441);
        _435 = Arguments::<'_>::new_v1(move _436, move _440) -> [return: bb201, unwind: bb255];
    }

    bb201: {
        StorageDead(_440);
        StorageDead(_436);
        _434 = format(move _435) -> [return: bb202, unwind: bb255];
    }

    bb202: {
        StorageDead(_435);
        StorageDead(_449);
        StorageDead(_446);
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_438);
        _433 = move _434;
        StorageDead(_434);
        _432 = &_433;
        _431 = &(*_432);
        _430 = <String as Deref>::deref(move _431) -> [return: bb203, unwind: bb245];
    }

    bb203: {
        _429 = &(*_430);
        StorageDead(_431);
        _428 = solana_program::log::sol_log(move _429) -> [return: bb204, unwind: bb245];
    }

    bb204: {
        StorageDead(_429);
        drop(_433) -> [return: bb205, unwind: bb255];
    }

    bb205: {
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_430);
        StorageDead(_428);
        StorageLive(_450);
        StorageLive(_451);
        _451 = error::ErrorCode::CantPayUserInitFee;
        _450 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _451) -> [return: bb206, unwind: bb255];
    }

    bb206: {
        StorageDead(_451);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _450);
        StorageDead(_450);
        StorageDead(_424);
        StorageDead(_423);
        goto -> bb226;
    }

    bb207: {
        StorageDead(_426);
        StorageDead(_425);
        _423 = const ();
        StorageDead(_424);
        StorageDead(_423);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _505 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _461 = &((*_505).4: anchor_lang::prelude::Signer<'_>);
        _460 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _461) -> [return: bb208, unwind: bb255];
    }

    bb208: {
        StorageDead(_461);
        _459 = &_460;
        _458 = &(*_459);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _506 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _465 = &((*_506).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _464 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _465) -> [return: bb209, unwind: bb255];
    }

    bb209: {
        StorageDead(_465);
        _463 = &_464;
        _462 = &(*_463);
        StorageLive(_466);
        _466 = _398;
        _457 = solana_program::system_instruction::transfer(move _458, move _462, move _466) -> [return: bb210, unwind: bb255];
    }

    bb210: {
        StorageDead(_466);
        StorageDead(_462);
        StorageDead(_458);
        _456 = &_457;
        _455 = &(*_456);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        _507 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _472 = &((*_507).4: anchor_lang::prelude::Signer<'_>);
        _471 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _472) -> [return: bb211, unwind: bb244];
    }

    bb211: {
        StorageDead(_472);
        StorageLive(_473);
        StorageLive(_474);
        _508 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _474 = &((*_508).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _473 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _474) -> [return: bb212, unwind: bb243];
    }

    bb212: {
        StorageDead(_474);
        StorageLive(_475);
        StorageLive(_476);
        _509 = deref_copy (_1.1: &mut instructions::user::InitializeUser<'_>);
        _476 = &((*_509).6: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _475 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _476) -> [return: bb213, unwind: bb242];
    }

    bb213: {
        StorageDead(_476);
        _470 = [move _471, move _473, move _475];
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_471);
        _469 = &_470;
        _468 = &(*_469);
        _467 = move _468 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_468);
        _454 = invoke(move _455, move _467) -> [return: bb214, unwind: bb241];
    }

    bb214: {
        StorageDead(_467);
        StorageDead(_455);
        _453 = <std::result::Result<(), anchor_lang::prelude::ProgramError> as Try>::branch(move _454) -> [return: bb215, unwind: bb241];
    }

    bb215: {
        StorageDead(_454);
        _477 = discriminant(_453);
        switchInt(move _477) -> [0: bb216, 1: bb217, otherwise: bb6];
    }

    bb216: {
        StorageLive(_481);
        _481 = ((_453 as Continue).0: ());
        _452 = _481;
        StorageDead(_481);
        _531 = discriminant(_453);
        drop(_470) -> [return: bb219, unwind: bb244];
    }

    bb217: {
        StorageLive(_478);
        _478 = move ((_453 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_480);
        _480 = move _478;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _480) -> [return: bb218, unwind: bb258];
    }

    bb218: {
        StorageDead(_480);
        StorageDead(_478);
        _533 = discriminant(_453);
        drop(_470) -> [return: bb223, unwind: bb244];
    }

    bb219: {
        StorageDead(_470);
        StorageDead(_469);
        drop(_457) -> [return: bb220, unwind: bb255];
    }

    bb220: {
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_453);
        StorageDead(_452);
        _409 = const ();
        StorageDead(_412);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_410);
        StorageDead(_409);
        StorageLive(_482);
        _482 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _482);
        StorageDead(_482);
        StorageDead(_398);
        StorageDead(_353);
        StorageDead(_312);
        StorageDead(_295);
        StorageDead(_193);
        StorageDead(_192);
        drop(_36) -> [return: bb222, unwind: bb265];
    }

    bb222: {
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        _510 = const false;
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb240;
    }

    bb223: {
        StorageDead(_470);
        StorageDead(_469);
        drop(_457) -> [return: bb224, unwind: bb255];
    }

    bb224: {
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_453);
        StorageDead(_452);
        goto -> bb226;
    }

    bb225: {
        StorageDead(_416);
        StorageDead(_413);
        goto -> bb226;
    }

    bb226: {
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_409);
        goto -> bb227;
    }

    bb227: {
        StorageDead(_398);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_353);
        goto -> bb229;
    }

    bb229: {
        StorageDead(_312);
        goto -> bb230;
    }

    bb230: {
        StorageDead(_295);
        goto -> bb232;
    }

    bb231: {
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb232;
    }

    bb232: {
        StorageDead(_193);
        StorageDead(_192);
        goto -> bb237;
    }

    bb233: {
        drop(_95) -> [return: bb234, unwind: bb254];
    }

    bb234: {
        StorageDead(_95);
        drop(_84) -> [return: bb235, unwind: bb255];
    }

    bb235: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb236;
    }

    bb236: {
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb237;
    }

    bb237: {
        drop(_36) -> [return: bb238, unwind: bb265];
    }

    bb238: {
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        switchInt(_510) -> [0: bb239, otherwise: bb257];
    }

    bb239: {
        _510 = const false;
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb240;
    }

    bb240: {
        return;
    }

    bb241 (cleanup): {
        drop(_470) -> [return: bb244, unwind terminate(cleanup)];
    }

    bb242 (cleanup): {
        drop(_473) -> [return: bb243, unwind terminate(cleanup)];
    }

    bb243 (cleanup): {
        drop(_471) -> [return: bb244, unwind terminate(cleanup)];
    }

    bb244 (cleanup): {
        drop(_457) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb245 (cleanup): {
        drop(_433) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb246 (cleanup): {
        drop(_416) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb247 (cleanup): {
        drop(_383) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        drop(_333) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        drop(_257) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb250 (cleanup): {
        drop(_238) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        drop(_157) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb252 (cleanup): {
        drop(_120) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb253 (cleanup): {
        drop(_95) -> [return: bb254, unwind terminate(cleanup)];
    }

    bb254 (cleanup): {
        drop(_84) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb255 (cleanup): {
        drop(_36) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb256 (cleanup): {
        resume;
    }

    bb257: {
        drop(_6) -> [return: bb239, unwind: bb256];
    }

    bb258 (cleanup): {
        _539 = discriminant(_453);
        goto -> bb241;
    }

    bb259 (cleanup): {
        _540 = discriminant(_413);
        goto -> bb246;
    }

    bb260 (cleanup): {
        _541 = discriminant(_355);
        goto -> bb255;
    }

    bb261 (cleanup): {
        _542 = discriminant(_96);
        goto -> bb254;
    }

    bb262 (cleanup): {
        _543 = discriminant(_85);
        goto -> bb255;
    }

    bb263 (cleanup): {
        _544 = discriminant(_37);
        goto -> bb265;
    }

    bb264 (cleanup): {
        drop(_6) -> [return: bb256, unwind terminate(cleanup)];
    }

    bb265 (cleanup): {
        switchInt(_510) -> [0: bb256, otherwise: bb264];
    }

    bb266 (cleanup): {
        _545 = discriminant(_7);
        goto -> bb256;
    }

    bb267: {
        goto -> bb89;
    }
}
