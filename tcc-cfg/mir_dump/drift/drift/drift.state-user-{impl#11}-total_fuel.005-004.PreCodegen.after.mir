// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::total_fuel` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::total_fuel(_1: &UserStats) -> std::result::Result<u128, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let mut _2: u128;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _4: std::result::Result<u128, error::ErrorCode>;
    let mut _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: u32;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: u128;
    let mut _23: u128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _25: std::result::Result<u128, error::ErrorCode>;
    let mut _26: u32;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _31: u128;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: u128;
    let mut _37: u128;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _39: std::result::Result<u128, error::ErrorCode>;
    let mut _40: u32;
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: u128;
    let mut _46: isize;
    let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _50: u128;
    let mut _51: u128;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _53: std::result::Result<u128, error::ErrorCode>;
    let mut _54: u32;
    let mut _55: isize;
    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: u128;
    let mut _60: isize;
    let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _64: u128;
    let mut _65: u128;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _67: std::result::Result<u128, error::ErrorCode>;
    let mut _68: u32;
    let mut _69: isize;
    let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _73: u128;
    let mut _74: isize;
    let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _78: u128;
    let mut _79: u128;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _81: std::result::Result<u128, error::ErrorCode>;
    let mut _82: u32;
    let mut _83: isize;
    let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _87: u128;
    scope 1 {
        debug residual => _19;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _22;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _28;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _31;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _33;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _36;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _42;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _45;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _47;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _50;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _56;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _59;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _61;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _64;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _70;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _73;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _75;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _78;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _84;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _87;
        scope 40 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = ((*_1).17: u32);
        _16 = <u32 as Cast>::cast::<u128>(move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_17);
        _15 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: u128);
        _14 = _22;
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = ((*_1).18: u32);
        _25 = <u32 as Cast>::cast::<u128>(move _26) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_19);
        _19 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb61;
    }

    bb7: {
        StorageDead(_26);
        _24 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: u128);
        _23 = _31;
        StorageDead(_31);
        _13 = <u128 as SafeMath>::safe_add(move _14, move _23) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_28);
        _28 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb59;
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_13);
        _32 = discriminant(_12);
        switchInt(move _32) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_36);
        _36 = ((_12 as Continue).0: u128);
        _11 = _36;
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = ((*_1).19: u32);
        _39 = <u32 as Cast>::cast::<u128>(move _40) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb59;
    }

    bb17: {
        StorageDead(_40);
        _38 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _39) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_39);
        _41 = discriminant(_38);
        switchInt(move _41) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_45);
        _45 = ((_38 as Continue).0: u128);
        _37 = _45;
        StorageDead(_45);
        _10 = <u128 as SafeMath>::safe_add(move _11, move _37) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_42);
        _42 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_37);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb57;
    }

    bb22: {
        StorageDead(_37);
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_10);
        _46 = discriminant(_9);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_50);
        _50 = ((_9 as Continue).0: u128);
        _8 = _50;
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = ((*_1).20: u32);
        _53 = <u32 as Cast>::cast::<u128>(move _54) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb57;
    }

    bb27: {
        StorageDead(_54);
        _52 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _53) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_53);
        _55 = discriminant(_52);
        switchInt(move _55) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_59);
        _59 = ((_52 as Continue).0: u128);
        _51 = _59;
        StorageDead(_59);
        _7 = <u128 as SafeMath>::safe_add(move _8, move _51) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_56);
        _56 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb55;
    }

    bb32: {
        StorageDead(_51);
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_7);
        _60 = discriminant(_6);
        switchInt(move _60) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_64);
        _64 = ((_6 as Continue).0: u128);
        _5 = _64;
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = ((*_1).21: u32);
        _67 = <u32 as Cast>::cast::<u128>(move _68) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_61);
        _61 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_63);
        StorageDead(_61);
        goto -> bb55;
    }

    bb37: {
        StorageDead(_68);
        _66 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _67) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_67);
        _69 = discriminant(_66);
        switchInt(move _69) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_73);
        _73 = ((_66 as Continue).0: u128);
        _65 = _73;
        StorageDead(_73);
        _4 = <u128 as SafeMath>::safe_add(move _5, move _65) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_70);
        _70 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_65);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb53;
    }

    bb42: {
        StorageDead(_65);
        StorageDead(_5);
        _3 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _4) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_4);
        _74 = discriminant(_3);
        switchInt(move _74) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_78);
        _78 = ((_3 as Continue).0: u128);
        _2 = _78;
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = ((*_1).22: u32);
        _81 = <u32 as Cast>::cast::<u128>(move _82) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_75);
        _75 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_77);
        StorageDead(_75);
        goto -> bb53;
    }

    bb47: {
        StorageDead(_82);
        _80 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _81) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_87);
        _87 = ((_80 as Continue).0: u128);
        _79 = _87;
        StorageDead(_87);
        _0 = <u128 as SafeMath>::safe_add(move _2, move _79) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_84);
        _84 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_2);
        StorageDead(_80);
        goto -> bb54;
    }

    bb52: {
        StorageDead(_79);
        StorageDead(_2);
        StorageDead(_80);
        StorageDead(_66);
        StorageDead(_52);
        StorageDead(_38);
        StorageDead(_24);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb62;
    }

    bb53: {
        StorageDead(_2);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_66);
        goto -> bb56;
    }

    bb55: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_52);
        goto -> bb58;
    }

    bb57: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb58;
    }

    bb58: {
        StorageDead(_38);
        goto -> bb60;
    }

    bb59: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_24);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb62;
    }

    bb62: {
        return;
    }
}
