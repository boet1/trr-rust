// MIR for `keeper::handle_force_cancel_orders` before PreCodegen

fn keeper::handle_force_cancel_orders(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::ForceCancelOrder<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _6: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: state::perp_market_map::PerpMarketMap<'_>;
    let _13: state::spot_market_map::SpotMarketMap<'_>;
    let mut _14: state::oracle_map::OracleMap<'_>;
    let mut _15: instructions::optional_accounts::AccountMaps<'_>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _17: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _18: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _19: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _20: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _21: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _22: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _23: &std::collections::BTreeSet<u16>;
    let _24: &std::collections::BTreeSet<u16>;
    let _25: std::collections::BTreeSet<u16>;
    let mut _26: &std::collections::BTreeSet<u16>;
    let _27: &std::collections::BTreeSet<u16>;
    let _28: std::collections::BTreeSet<u16>;
    let mut _29: u64;
    let mut _30: anchor_lang::prelude::Clock;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _32: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _37: anchor_lang::prelude::Clock;
    let mut _38: std::option::Option<state::state::OracleGuardRails>;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: instructions::optional_accounts::AccountMaps<'_>;
    let _44: ();
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _46: std::result::Result<(), error::ErrorCode>;
    let mut _47: &state::state::State;
    let _48: &state::state::State;
    let mut _49: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _50: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _51: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _52: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _53: &state::spot_market_map::SpotMarketMap<'_>;
    let _54: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _55: &state::perp_market_map::PerpMarketMap<'_>;
    let _56: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _57: &mut state::oracle_map::OracleMap<'_>;
    let mut _58: &mut state::oracle_map::OracleMap<'_>;
    let mut _59: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _60: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _61: &anchor_lang::prelude::Clock;
    let _62: &anchor_lang::prelude::Clock;
    let _63: anchor_lang::prelude::Clock;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _65: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: ();
    let mut _77: &mut instructions::keeper::ForceCancelOrder<'_>;
    let mut _78: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _79: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _80: &mut instructions::keeper::ForceCancelOrder<'_>;
    let mut _81: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _82: &mut instructions::keeper::ForceCancelOrder<'_>;
    let mut _83: &mut instructions::keeper::ForceCancelOrder<'_>;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _111: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market_map => _12;
        debug spot_market_map => _13;
        debug oracle_map => _14;
        let _67: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _70: anchor_lang::prelude::Clock;
        let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _75: ();
        scope 14 {
            debug residual => _67;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _70;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _72;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _75;
            scope 21 {
            }
        }
    }
    scope 6 {
        debug residual => _34;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _37;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _40;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _43;
        scope 13 {
        }
    }

    bb0: {
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _77 = deref_copy (_1.1: &mut instructions::keeper::ForceCancelOrder<'_>);
        _6 = &((*_77).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _78 = deref_copy (*_6);
        _110 = (((_78.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _5 = &(*_110);
        _4 = constraints::exchange_not_paused(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb50];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _88 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _79 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _22 = &(*_79);
        _21 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _22) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb55];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _102 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb43;
    }

    bb7: {
        StorageDead(_22);
        _20 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        _19 = &mut _20;
        _18 = &mut (*_19);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = BTreeSet::<u16>::new() -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = &_25;
        _23 = &(*_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = get_writable_spot_market_set(const _) -> [return: bb10, unwind: bb49];
    }

    bb10: {
        _27 = &_28;
        _26 = &(*_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb11, unwind: bb48];
    }

    bb11: {
        _31 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _32) -> [return: bb12, unwind: bb48];
    }

    bb12: {
        _86 = const true;
        _87 = const true;
        StorageDead(_32);
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_37);
        _37 = move ((_31 as Continue).0: anchor_lang::prelude::Clock);
        _30 = move _37;
        StorageDead(_37);
        _29 = (_30.0: u64);
        StorageLive(_38);
        _38 = Option::<state::state::OracleGuardRails>::None;
        _17 = load_maps(move _18, move _23, move _26, move _29, move _38) -> [return: bb16, unwind: bb54];
    }

    bb14: {
        StorageLive(_34);
        _34 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_36);
        _36 = move _34;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _36) -> [return: bb15, unwind: bb54];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb40;
    }

    bb16: {
        StorageDead(_38);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_18);
        _16 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb17, unwind: bb54];
    }

    bb17: {
        StorageDead(_17);
        _39 = discriminant(_16);
        switchInt(move _39) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_43);
        _43 = move ((_16 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _15 = move _43;
        StorageDead(_43);
        StorageLive(_12);
        _12 = move (_15.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_13);
        _13 = move (_15.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_14);
        _14 = move (_15.2: state::oracle_map::OracleMap<'_>);
        _92 = discriminant(_16);
        _94 = discriminant(_31);
        _86 = const false;
        _87 = const false;
        StorageDead(_31);
        StorageDead(_30);
        drop(_28) -> [return: bb21, unwind: bb44];
    }

    bb19: {
        StorageLive(_40);
        _40 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb20, unwind: bb53];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_40);
        _90 = discriminant(_16);
        goto -> bb40;
    }

    bb21: {
        StorageDead(_28);
        StorageDead(_27);
        drop(_25) -> [return: bb22, unwind: bb45];
    }

    bb22: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _80 = deref_copy (_1.1: &mut instructions::keeper::ForceCancelOrder<'_>);
        _50 = &((*_80).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _81 = deref_copy (*_50);
        _111 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _49 = &(*_111);
        _48 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _49) -> [return: bb23, unwind: bb45];
    }

    bb23: {
        _47 = &(*_48);
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        _82 = deref_copy (_1.1: &mut instructions::keeper::ForceCancelOrder<'_>);
        _52 = &((*_82).3: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _51 = &(*_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_13;
        _53 = &(*_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_12;
        _55 = &(*_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &mut _14;
        _57 = &mut (*_58);
        StorageLive(_59);
        StorageLive(_60);
        _83 = deref_copy (_1.1: &mut instructions::keeper::ForceCancelOrder<'_>);
        _60 = &((*_83).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _59 = &(*_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb24, unwind: bb45];
    }

    bb24: {
        _64 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _65) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        _84 = const true;
        _85 = const true;
        StorageDead(_65);
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_70);
        _70 = move ((_64 as Continue).0: anchor_lang::prelude::Clock);
        _63 = move _70;
        StorageDead(_70);
        _62 = &_63;
        _61 = &(*_62);
        _46 = controller::orders::force_cancel_orders(move _47, move _51, move _53, move _55, move _57, move _59, move _61) -> [return: bb29, unwind: bb52];
    }

    bb27: {
        StorageLive(_67);
        _67 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_69);
        _69 = move _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _69) -> [return: bb28, unwind: bb52];
    }

    bb28: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb51;
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_47);
        _45 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _46) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        StorageDead(_46);
        _71 = discriminant(_45);
        switchInt(move _71) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_75);
        _75 = ((_45 as Continue).0: ());
        _44 = _75;
        StorageDead(_75);
        _96 = discriminant(_64);
        _84 = const false;
        _85 = const false;
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_76);
        _76 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _76);
        StorageDead(_76);
        drop(_14) -> [return: bb34, unwind: bb46];
    }

    bb32: {
        StorageLive(_72);
        _72 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb33, unwind: bb52];
    }

    bb33: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb51;
    }

    bb34: {
        StorageDead(_14);
        drop(_13) -> [return: bb35, unwind: bb47];
    }

    bb35: {
        StorageDead(_13);
        drop(_12) -> [return: bb36, unwind: bb50];
    }

    bb36: {
        StorageDead(_12);
        goto -> bb43;
    }

    bb37: {
        StorageDead(_14);
        drop(_13) -> [return: bb38, unwind: bb47];
    }

    bb38: {
        StorageDead(_13);
        drop(_12) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        StorageDead(_12);
        goto -> bb43;
    }

    bb40: {
        _100 = discriminant(_31);
        _86 = const false;
        _87 = const false;
        StorageDead(_31);
        StorageDead(_30);
        drop(_28) -> [return: bb41, unwind: bb49];
    }

    bb41: {
        StorageDead(_28);
        StorageDead(_27);
        drop(_25) -> [return: bb42, unwind: bb50];
    }

    bb42: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_25) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_14) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_13) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_12) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_28) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_25) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51: {
        _98 = discriminant(_64);
        _84 = const false;
        _85 = const false;
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_44);
        drop(_14) -> [return: bb37, unwind: bb46];
    }

    bb52 (cleanup): {
        _104 = discriminant(_64);
        goto -> bb45;
    }

    bb53 (cleanup): {
        _107 = discriminant(_16);
        goto -> bb54;
    }

    bb54 (cleanup): {
        _108 = discriminant(_31);
        goto -> bb48;
    }

    bb55 (cleanup): {
        _109 = discriminant(_3);
        goto -> bb50;
    }
}
