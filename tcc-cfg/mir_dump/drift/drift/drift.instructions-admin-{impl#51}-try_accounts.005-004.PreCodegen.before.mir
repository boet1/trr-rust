// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5116:10: 5116:18>::try_accounts` before PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5116:10: 5116:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut UpdatePhoenixFulfillmentConfigBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::UpdatePhoenixFulfillmentConfig<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::UpdatePhoenixFulfillmentConfig<'_>, anchor_lang::error::Error>;
    let _6: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _8: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::admin::UpdatePhoenixFulfillmentConfigBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/admin.rs:5116:10: 5116:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::admin::UpdatePhoenixFulfillmentConfigBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/admin.rs:5116:10: 5116:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::admin::UpdatePhoenixFulfillmentConfigBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/admin.rs:5116:10: 5116:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _51: ();
    let mut _53: &state::state::State;
    let mut _54: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _56: &anchor_lang::prelude::Signer<'_>;
    let mut _57: bool;
    let mut _58: &anchor_lang::prelude::Pubkey;
    let mut _59: &anchor_lang::prelude::Pubkey;
    let mut _60: !;
    let mut _61: anchor_lang::error::Error;
    let mut _62: anchor_lang::error::Error;
    let mut _63: anchor_lang::error::Error;
    let mut _64: anchor_lang::error::ErrorCode;
    let mut _65: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _66: anchor_lang::prelude::Pubkey;
    let mut _67: anchor_lang::prelude::Pubkey;
    let _68: ();
    let mut _69: bool;
    let mut _70: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _71: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let _72: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _73: !;
    let mut _74: anchor_lang::error::Error;
    let mut _75: anchor_lang::error::Error;
    let mut _76: anchor_lang::error::ErrorCode;
    let _77: ();
    let mut _78: bool;
    let mut _79: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _80: &anchor_lang::prelude::Signer<'_>;
    let _81: &anchor_lang::prelude::Signer<'_>;
    let mut _82: !;
    let mut _83: anchor_lang::error::Error;
    let mut _84: anchor_lang::error::Error;
    let mut _85: anchor_lang::error::ErrorCode;
    let mut _86: instructions::admin::UpdatePhoenixFulfillmentConfig<'_>;
    let mut _87: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _88: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _89: anchor_lang::prelude::Signer<'_>;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug state => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
        scope 6 {
            debug phoenix_fulfillment_config => _21;
            let _36: anchor_lang::prelude::Signer<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::Signer<'_>;
            scope 11 {
                debug admin => _36;
                let _52: anchor_lang::prelude::Pubkey;
                scope 16 {
                    debug my_key => _52;
                    let _55: anchor_lang::prelude::Pubkey;
                    scope 17 {
                        debug target_key => _55;
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, UpdatePhoenixFulfillmentConfigBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/admin.rs:5116:10: 5116:18};
        _8 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5116:10: 5116:18}>(move _9, move _15) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb43];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _6 = move _20;
        StorageDead(_20);
        _90 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, PhoenixV1FulfillmentConfig> as anchor_lang::Accounts<'_, UpdatePhoenixFulfillmentConfigBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind: bb42];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<admin::UpdatePhoenixFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb46];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _100 = discriminant(_7);
        StorageDead(_7);
        goto -> bb40;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/admin.rs:5116:10: 5116:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5116:10: 5116:18}>(move _24, move _30) -> [return: bb9, unwind: bb42];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, PhoenixV1FulfillmentConfig>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb42];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>);
        _21 = move _35;
        StorageDead(_35);
        _92 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, UpdatePhoenixFulfillmentConfigBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb42];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<admin::UpdatePhoenixFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb45];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _98 = discriminant(_22);
        StorageDead(_22);
        goto -> bb39;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/admin.rs:5116:10: 5116:18};
        _38 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5116:10: 5116:18}>(move _39, move _45) -> [return: bb15, unwind: bb42];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb42];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _36 = move _50;
        StorageDead(_50);
        _94 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _105 = (((_6.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _54 = &(*_105);
        _53 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _54) -> [return: bb20, unwind: bb42];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<admin::UpdatePhoenixFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb44];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _96 = discriminant(_37);
        StorageDead(_37);
        goto -> bb38;
    }

    bb20: {
        StorageDead(_54);
        _52 = ((*_53).0: anchor_lang::prelude::Pubkey);
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_36;
        _55 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _56) -> [return: bb21, unwind: bb42];
    }

    bb21: {
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_52;
        StorageLive(_59);
        _59 = &_55;
        _57 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _58, move _59) -> [return: bb22, unwind: bb42];
    }

    bb22: {
        switchInt(move _57) -> [0: bb27, otherwise: bb23];
    }

    bb23: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = ConstraintHasOne;
        _63 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _64) -> [return: bb24, unwind: bb42];
    }

    bb24: {
        StorageDead(_64);
        _62 = anchor_lang::error::Error::with_account_name::<&str>(move _63, const "state") -> [return: bb25, unwind: bb42];
    }

    bb25: {
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _52;
        StorageLive(_67);
        _67 = _55;
        _65 = (move _66, move _67);
        StorageDead(_67);
        StorageDead(_66);
        _61 = anchor_lang::error::Error::with_pubkeys(move _62, move _65) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        StorageDead(_65);
        StorageDead(_62);
        _0 = std::result::Result::<admin::UpdatePhoenixFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _61);
        StorageDead(_61);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb38;
    }

    bb27: {
        StorageDead(_59);
        StorageDead(_58);
        _51 = const ();
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_21;
        _71 = &(*_72);
        _70 = <anchor_lang::prelude::AccountLoader<'_, PhoenixV1FulfillmentConfig> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _71) -> [return: bb28, unwind: bb42];
    }

    bb28: {
        StorageDead(_71);
        _69 = ((*_70).6: bool);
        switchInt(move _69) -> [0: bb29, otherwise: bb32];
    }

    bb29: {
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = ConstraintMut;
        _75 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _76) -> [return: bb30, unwind: bb42];
    }

    bb30: {
        StorageDead(_76);
        _74 = anchor_lang::error::Error::with_account_name::<&str>(move _75, const "phoenix_fulfillment_config") -> [return: bb31, unwind: bb42];
    }

    bb31: {
        StorageDead(_75);
        _0 = std::result::Result::<admin::UpdatePhoenixFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _74);
        StorageDead(_74);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb38;
    }

    bb32: {
        StorageDead(_72);
        StorageDead(_70);
        _68 = const ();
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_36;
        _80 = &(*_81);
        _79 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _80) -> [return: bb33, unwind: bb42];
    }

    bb33: {
        StorageDead(_80);
        _78 = ((*_79).6: bool);
        switchInt(move _78) -> [0: bb34, otherwise: bb37];
    }

    bb34: {
        StorageDead(_81);
        StorageDead(_79);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = ConstraintMut;
        _84 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _85) -> [return: bb35, unwind: bb42];
    }

    bb35: {
        StorageDead(_85);
        _83 = anchor_lang::error::Error::with_account_name::<&str>(move _84, const "admin") -> [return: bb36, unwind: bb42];
    }

    bb36: {
        StorageDead(_84);
        _0 = std::result::Result::<admin::UpdatePhoenixFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _83);
        StorageDead(_83);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb38;
    }

    bb37: {
        StorageDead(_81);
        StorageDead(_79);
        _77 = const ();
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_86);
        StorageLive(_87);
        _87 = move _6;
        StorageLive(_88);
        _88 = move _21;
        StorageLive(_89);
        _89 = move _36;
        _86 = admin::UpdatePhoenixFulfillmentConfig::<'_> { state: move _87, phoenix_fulfillment_config: move _88, admin: move _89 };
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        _0 = std::result::Result::<admin::UpdatePhoenixFulfillmentConfig<'_>, anchor_lang::error::Error>::Ok(move _86);
        StorageDead(_86);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb41;
    }

    bb38: {
        StorageDead(_36);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_21);
        drop(_6) -> [return: bb40, unwind: bb43];
    }

    bb40: {
        StorageDead(_6);
        goto -> bb41;
    }

    bb41: {
        return;
    }

    bb42 (cleanup): {
        drop(_6) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        _102 = discriminant(_37);
        goto -> bb42;
    }

    bb45 (cleanup): {
        _103 = discriminant(_22);
        goto -> bb42;
    }

    bb46 (cleanup): {
        _104 = discriminant(_7);
        goto -> bb43;
    }
}
