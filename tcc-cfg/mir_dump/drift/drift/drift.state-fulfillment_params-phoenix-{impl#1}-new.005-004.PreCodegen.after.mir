// MIR for `phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:119:1: 119:42>::new` after PreCodegen

fn phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:119:1: 119:42>::new(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<PhoenixMarketContext<'_, '_>, error::ErrorCode> {
    debug info => _1;
    let mut _0: std::result::Result<state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>, error::ErrorCode>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _4: std::result::Result<(), error::ErrorCode>;
    let mut _5: bool;
    let mut _6: &&anchor_lang::prelude::Pubkey;
    let mut _7: &&anchor_lang::prelude::Pubkey;
    let _8: &anchor_lang::prelude::Pubkey;
    let _9: anchor_lang::prelude::Pubkey;
    let mut _10: ();
    let _11: error::ErrorCode;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 2];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &error::ErrorCode;
    let _30: &error::ErrorCode;
    let _31: ();
    let mut _32: &str;
    let _33: &str;
    let mut _34: &std::string::String;
    let _35: &std::string::String;
    let _36: std::string::String;
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[&str; 1];
    let _41: &[&str; 1];
    let _42: [&str; 1];
    let mut _43: error::ErrorCode;
    let mut _44: isize;
    let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _48: ();
    let _49: std::cell::Ref<'_, &mut [u8]>;
    let mut _50: &std::cell::RefCell<&mut [u8]>;
    let _51: &std::cell::RefCell<&mut [u8]>;
    let mut _52: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &phoenix::program::MarketHeader>;
    let mut _55: std::result::Result<&phoenix::program::MarketHeader, error::ErrorCode>;
    let mut _56: std::result::Result<&phoenix::program::MarketHeader, bytemuck::PodCastError>;
    let mut _57: &[u8];
    let _58: &[u8];
    let _59: &[u8];
    let mut _60: &[u8];
    let _61: &&mut [u8];
    let mut _62: &std::cell::Ref<'_, &mut [u8]>;
    let mut _63: std::ops::RangeTo<usize>;
    let mut _64: usize;
    let mut _65: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:128:22: 128:25};
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: ();
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _73: std::result::Result<(), error::ErrorCode>;
    let mut _74: bool;
    let mut _75: u64;
    let mut _76: ();
    let _78: ();
    let mut _79: &str;
    let _80: &str;
    let mut _81: &std::string::String;
    let _82: &std::string::String;
    let _83: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[&str; 2];
    let _88: &[&str; 2];
    let _89: [&str; 2];
    let mut _90: &[core::fmt::rt::Argument<'_>];
    let mut _91: &[core::fmt::rt::Argument<'_>; 1];
    let _92: &[core::fmt::rt::Argument<'_>; 1];
    let _93: [core::fmt::rt::Argument<'_>; 1];
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &error::ErrorCode;
    let _96: &error::ErrorCode;
    let _97: ();
    let mut _98: &str;
    let _99: &str;
    let mut _100: &std::string::String;
    let _101: &std::string::String;
    let _102: std::string::String;
    let mut _104: std::fmt::Arguments<'_>;
    let mut _105: &[&str];
    let mut _106: &[&str; 1];
    let _107: &[&str; 1];
    let _108: [&str; 1];
    let mut _109: error::ErrorCode;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _116: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _117: phoenix::program::MarketHeader;
    let mut _122: &mut [u8];
    scope 1 {
        debug error_code => _11;
        let _18: std::string::String;
        let _37: std::string::String;
        let mut _120: &[&str; 1];
        let mut _121: &[&str; 2];
        scope 2 {
            debug res => _18;
        }
        scope 3 {
            debug res => _37;
        }
    }
    scope 4 {
        debug residual => _45;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _48;
        scope 7 {
        }
    }
    scope 8 {
        debug data => _49;
        let _53: &phoenix::program::MarketHeader;
        let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _70: &phoenix::program::MarketHeader;
        scope 9 {
            debug header => _53;
            let _77: error::ErrorCode;
            let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _114: ();
            scope 14 {
                debug error_code => _77;
                let _84: std::string::String;
                let _103: std::string::String;
                let mut _118: &[&str; 1];
                let mut _119: &[&str; 2];
                scope 15 {
                    debug res => _84;
                }
                scope 16 {
                    debug res => _103;
                }
            }
            scope 17 {
                debug residual => _111;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _114;
                scope 20 {
                }
            }
        }
        scope 10 {
            debug residual => _67;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _70;
            scope 13 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = phoenix::id() -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = &_8;
        _5 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_10);
        _10 = ();
        _4 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        goto -> bb16;
    }

    bb4: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_11);
        _11 = error::ErrorCode::InvalidPhoenixProgram;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _121 = const _;
        _22 = &(*_121);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_11;
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _29) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_29);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb8, unwind: bb59];
    }

    bb8: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb9, unwind: bb59];
    }

    bb9: {
        StorageDead(_13);
        drop(_17) -> [return: bb10, unwind: bb60];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _120 = const _;
        _41 = &(*_120);
        _40 = &(*_41);
        _39 = move _40 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_40);
        _38 = Arguments::<'_>::new_const(move _39) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_39);
        _37 = format(move _38) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_38);
        StorageDead(_41);
        _36 = move _37;
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        _33 = <String as Deref>::deref(move _34) -> [return: bb13, unwind: bb58];
    }

    bb13: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = solana_program::log::sol_log(move _32) -> [return: bb14, unwind: bb58];
    }

    bb14: {
        StorageDead(_32);
        drop(_36) -> [return: bb15, unwind: bb60];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_43);
        _43 = _11;
        _4 = std::result::Result::<(), error::ErrorCode>::Err(move _43);
        StorageDead(_43);
        StorageDead(_11);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_5);
        _3 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _4) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_4);
        _44 = discriminant(_3);
        switchInt(move _44) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_48);
        _48 = ((_3 as Continue).0: ());
        _2 = _48;
        StorageDead(_48);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &((*_1).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _51 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _52) -> [return: bb22, unwind continue];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_45);
        _45 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<PhoenixMarketContext<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb54;
    }

    bb22: {
        _50 = &(*_51);
        StorageDead(_52);
        _49 = RefCell::<&mut [u8]>::borrow(move _50) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_50);
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_49;
        _61 = <Ref<'_, &mut [u8]> as Deref>::deref(move _62) -> [return: bb24, unwind: bb57];
    }

    bb24: {
        _122 = deref_copy (*_61);
        _60 = &(*_122);
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = std::mem::size_of::<MarketHeader>() -> [return: bb25, unwind: bb57];
    }

    bb25: {
        _63 = RangeTo::<usize> { end: move _64 };
        StorageDead(_64);
        _59 = <[u8] as Index<RangeTo<usize>>>::index(move _60, move _63) -> [return: bb26, unwind: bb57];
    }

    bb26: {
        StorageDead(_63);
        StorageDead(_60);
        _58 = &(*_59);
        _57 = &(*_58);
        _56 = bytemuck::try_from_bytes::<MarketHeader>(move _57) -> [return: bb27, unwind: bb57];
    }

    bb27: {
        StorageDead(_57);
        StorageLive(_65);
        _65 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:128:22: 128:25};
        _55 = std::result::Result::<&MarketHeader, bytemuck::PodCastError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:128:22: 128:25}>(move _56, move _65) -> [return: bb28, unwind: bb57];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_56);
        _54 = <std::result::Result<&MarketHeader, error::ErrorCode> as Try>::branch(move _55) -> [return: bb29, unwind: bb57];
    }

    bb29: {
        StorageDead(_55);
        _66 = discriminant(_54);
        switchInt(move _66) -> [0: bb30, 1: bb31, otherwise: bb19];
    }

    bb30: {
        StorageLive(_70);
        _70 = ((_54 as Continue).0: &phoenix::program::MarketHeader);
        _53 = _70;
        StorageDead(_70);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_54);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = ((*_53).0: u64);
        _74 = Eq(move _75, const _);
        switchInt(move _74) -> [0: bb34, otherwise: bb33];
    }

    bb31: {
        StorageLive(_67);
        _67 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<PhoenixMarketContext<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb32, unwind: bb57];
    }

    bb32: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_54);
        goto -> bb52;
    }

    bb33: {
        StorageDead(_75);
        StorageLive(_76);
        _76 = ();
        _73 = std::result::Result::<(), error::ErrorCode>::Ok(move _76);
        StorageDead(_76);
        goto -> bb46;
    }

    bb34: {
        StorageDead(_75);
        StorageLive(_77);
        _77 = error::ErrorCode::InvalidPhoenixProgram;
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _119 = const _;
        _88 = &(*_119);
        _87 = &(*_88);
        _86 = move _87 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_77;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _95) -> [return: bb35, unwind: bb57];
    }

    bb35: {
        StorageDead(_95);
        _93 = [move _94];
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = move _91 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_91);
        _85 = Arguments::<'_>::new_v1(move _86, move _90) -> [return: bb36, unwind: bb57];
    }

    bb36: {
        StorageDead(_90);
        StorageDead(_86);
        _84 = format(move _85) -> [return: bb37, unwind: bb57];
    }

    bb37: {
        StorageDead(_85);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_88);
        _83 = move _84;
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = <String as Deref>::deref(move _81) -> [return: bb38, unwind: bb56];
    }

    bb38: {
        _79 = &(*_80);
        StorageDead(_81);
        _78 = solana_program::log::sol_log(move _79) -> [return: bb39, unwind: bb56];
    }

    bb39: {
        StorageDead(_79);
        drop(_83) -> [return: bb40, unwind: bb57];
    }

    bb40: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _118 = const _;
        _107 = &(*_118);
        _106 = &(*_107);
        _105 = move _106 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_106);
        _104 = Arguments::<'_>::new_const(move _105) -> [return: bb41, unwind: bb57];
    }

    bb41: {
        StorageDead(_105);
        _103 = format(move _104) -> [return: bb42, unwind: bb57];
    }

    bb42: {
        StorageDead(_104);
        StorageDead(_107);
        _102 = move _103;
        StorageDead(_103);
        _101 = &_102;
        _100 = &(*_101);
        _99 = <String as Deref>::deref(move _100) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        _98 = &(*_99);
        StorageDead(_100);
        _97 = solana_program::log::sol_log(move _98) -> [return: bb44, unwind: bb55];
    }

    bb44: {
        StorageDead(_98);
        drop(_102) -> [return: bb45, unwind: bb57];
    }

    bb45: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_97);
        StorageLive(_109);
        _109 = _77;
        _73 = std::result::Result::<(), error::ErrorCode>::Err(move _109);
        StorageDead(_109);
        StorageDead(_77);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_74);
        _72 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _73) -> [return: bb47, unwind: bb57];
    }

    bb47: {
        StorageDead(_73);
        _110 = discriminant(_72);
        switchInt(move _110) -> [0: bb48, 1: bb49, otherwise: bb19];
    }

    bb48: {
        StorageLive(_114);
        _114 = ((_72 as Continue).0: ());
        _71 = _114;
        StorageDead(_114);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &(*_1);
        StorageLive(_117);
        _117 = (*_53);
        _115 = PhoenixMarketContext::<'_, '_> { phoenix_market: move _116, header: move _117 };
        StorageDead(_117);
        StorageDead(_116);
        _0 = std::result::Result::<PhoenixMarketContext<'_, '_>, error::ErrorCode>::Ok(move _115);
        StorageDead(_115);
        StorageDead(_53);
        drop(_49) -> [return: bb51, unwind: bb60];
    }

    bb49: {
        StorageLive(_111);
        _111 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<PhoenixMarketContext<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb50, unwind: bb57];
    }

    bb50: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb52;
    }

    bb51: {
        StorageDead(_49);
        goto -> bb54;
    }

    bb52: {
        StorageDead(_53);
        drop(_49) -> [return: bb53, unwind: bb60];
    }

    bb53: {
        StorageDead(_49);
        goto -> bb54;
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_102) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_83) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_49) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_36) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_17) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }
}
