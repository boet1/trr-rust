digraph Mir_0_4414 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn UserStats::update_fuel_taker_bonus(_1: &amp;ReErased mut state::user::UserStats, _2: u8, _3: u64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: u8;<br align="left"/>let mut _7: u32;<br align="left"/>let mut _8: u32;<br align="left"/>let mut _9: u32;<br align="left"/>let mut _10: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: u64;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _14: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _15: u8;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: u64;<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: bool;<br align="left"/>let mut _24: ();<br align="left"/>debug self =&gt; _1;<br align="left"/>debug fuel_boost =&gt; _2;<br align="left"/>debug quote_asset_amount =&gt; _3;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>>;
    bb0__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _2<br/>_5 = Gt(move _6, const 0_u8)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = ((*_1).21: u32)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = _2<br/></td></tr><tr><td align="left">_14 = &lt;u8 as Cast&gt;::cast::&lt;u64&gt;(move _15)</td></tr></table>>];
    bb2__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb3__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_16 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb4__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_13 as Continue).0: u64)<br/>_12 = _20<br/>StorageDead(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _3<br/>_23 = Eq(const _, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _23, &quot;attempt to divide `{}` by zero&quot;, _22)</td></tr></table>>];
    bb5__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb7__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_13)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_21 = Div(move _22, const _)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_11 = core::num::&lt;impl u64&gt;::saturating_mul(move _12, move _21)</td></tr></table>>];
    bb9__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;u64 as Cast&gt;::cast::&lt;u32&gt;(move _11)</td></tr></table>>];
    bb10__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = std::result::Result::&lt;u32, error::ErrorCode&gt;::unwrap_or(move _10, const _)</td></tr></table>>];
    bb11__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/></td></tr><tr><td align="left">_7 = core::num::&lt;impl u32&gt;::saturating_add(move _8, move _9)</td></tr></table>>];
    bb12__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>((*_1).21: u32) = move _7<br/>StorageDead(_7)<br/>StorageDead(_13)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_24)<br/>_24 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _24)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_4414 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4414 -> bb13__0_4414 [label="0"];
    bb0__0_4414 -> bb1__0_4414 [label="otherwise"];
    bb1__0_4414 -> bb2__0_4414 [label="return"];
    bb2__0_4414 -> bb3__0_4414 [label="return"];
    bb3__0_4414 -> bb4__0_4414 [label="0"];
    bb3__0_4414 -> bb6__0_4414 [label="1"];
    bb3__0_4414 -> bb5__0_4414 [label="otherwise"];
    bb4__0_4414 -> bb8__0_4414 [label="success"];
    bb6__0_4414 -> bb7__0_4414 [label="return"];
    bb7__0_4414 -> bb15__0_4414 [label=""];
    bb8__0_4414 -> bb9__0_4414 [label="return"];
    bb9__0_4414 -> bb10__0_4414 [label="return"];
    bb10__0_4414 -> bb11__0_4414 [label="return"];
    bb11__0_4414 -> bb12__0_4414 [label="return"];
    bb12__0_4414 -> bb14__0_4414 [label=""];
    bb13__0_4414 -> bb14__0_4414 [label=""];
    bb14__0_4414 -> bb15__0_4414 [label=""];
}
