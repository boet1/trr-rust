digraph Mir_0_4351 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SpotPosition::simulate_fills_both_sides::{closure#1}(_1: &amp;ReErased Closure(DefId(0:4351 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#1}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) state::oracle::StrictOraclePrice, i128, i128)) -&gt; std::result::Result&lt;state::user::OrderFillSimulation, error::ErrorCode&gt;, [Region(BrAnon)]), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased i128, &amp;ReErased Closure(DefId(0:4350 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((i128, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, []), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice, &amp;ReErased math::margin::MarginRequirementType)]))]), _2: &amp;ReErased state::oracle::StrictOraclePrice, _3: i128, _4: i128) -&gt; std::result::Result&lt;state::user::OrderFillSimulation, error::ErrorCode&gt;<br align="left"/>let _5: i128;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _7: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _8: i128;<br align="left"/>let mut _9: i128;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: u32;<br align="left"/>let mut _12: i64;<br align="left"/>let mut _13: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _18: i128;<br align="left"/>let _19: i128;<br align="left"/>let mut _20: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _21: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _22: i128;<br align="left"/>let mut _23: i128;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _28: i128;<br align="left"/>let _29: i128;<br align="left"/>let mut _30: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _31: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _32: i128;<br align="left"/>let mut _33: i128;<br align="left"/>let mut _34: i128;<br align="left"/>let mut _35: isize;<br align="left"/>let _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _37: !;<br align="left"/>let mut _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _39: i128;<br align="left"/>let _40: i128;<br align="left"/>let mut _41: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _42: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _43: &amp;ReErased Closure(DefId(0:4350 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((i128, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, []), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice, &amp;ReErased math::margin::MarginRequirementType)]);<br align="left"/>let mut _44: (i128, i128);<br align="left"/>let mut _45: i128;<br align="left"/>let mut _46: i128;<br align="left"/>let mut _47: isize;<br align="left"/>let _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _49: !;<br align="left"/>let mut _50: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _51: i128;<br align="left"/>let _52: i128;<br align="left"/>let mut _53: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _54: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _55: i128;<br align="left"/>let mut _56: i128;<br align="left"/>let mut _57: isize;<br align="left"/>let _58: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _59: !;<br align="left"/>let mut _60: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _61: i128;<br align="left"/>let mut _62: state::user::OrderFillSimulation;<br align="left"/>let mut _63: i128;<br align="left"/>let mut _64: i128;<br align="left"/>let mut _65: i128;<br align="left"/>let mut _66: i128;<br align="left"/>let mut _67: i128;<br align="left"/>let mut _68: &amp;ReErased &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _69: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _70: &amp;ReErased i128;<br align="left"/>let mut _71: &amp;ReErased Closure(DefId(0:4350 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((i128, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, []), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice, &amp;ReErased math::margin::MarginRequirementType)]);<br align="left"/>debug strict_oracle_price =&gt; _2;<br align="left"/>debug token_amount =&gt; _3;<br align="left"/>debug open_orders =&gt; _4;<br align="left"/>debug spot_market =&gt; (*((*_1).0: &amp;&amp;state::spot_market::SpotMarket));<br align="left"/>debug token_value =&gt; (*((*_1).1: &amp;i128));<br align="left"/>debug calculate_weighted_token_value =&gt; (*((*_1).2: &amp;{closure@programs/drift/src/state/user.rs:862:46: 862:85}));<br align="left"/>debug order_value =&gt; _5;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>debug token_amount_after_fill =&gt; _19;<br align="left"/>debug residual =&gt; _25;<br align="left"/>debug val =&gt; _28;<br align="left"/>debug token_value_after_fill =&gt; _29;<br align="left"/>debug residual =&gt; _36;<br align="left"/>debug val =&gt; _39;<br align="left"/>debug weighted_token_value_after_fill =&gt; _40;<br align="left"/>debug residual =&gt; _48;<br align="left"/>debug val =&gt; _51;<br align="left"/>debug free_collateral_contribution =&gt; _52;<br align="left"/>debug residual =&gt; _58;<br align="left"/>debug val =&gt; _61;<br align="left"/>>;
    bb0__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _4<br/>_10 = Eq(_9, const i128::MIN)<br/></td></tr><tr><td align="left">assert(!move _10, &quot;attempt to negate `{}`, which would overflow&quot;, _9)</td></tr></table>>];
    bb1__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_8 = Neg(move _9)<br/>StorageDead(_9)<br/>StorageLive(_11)<br/>_68 = deref_copy ((*_1).0: &amp;&amp;state::spot_market::SpotMarket)<br/>_69 = deref_copy (*_68)<br/>_11 = ((*_69).41: u32)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;(*_2)<br/></td></tr><tr><td align="left">_12 = StrictOraclePrice::max(move _13)</td></tr></table>>];
    bb2__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">_7 = get_token_value(move _8, move _11, move _12)</td></tr></table>>];
    bb3__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb4__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_14 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb5__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_6 as Continue).0: i128)<br/>_5 = _18<br/>StorageDead(_18)<br/>StorageDead(_6)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _3<br/>StorageLive(_23)<br/>_23 = _4<br/></td></tr><tr><td align="left">_21 = &lt;i128 as SafeMath&gt;::safe_add(move _22, move _23)</td></tr></table>>];
    bb6__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_17)<br/>_17 = _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;OrderFillSimulation, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb8__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_20 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _21)</td></tr></table>>];
    bb10__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_24 = discriminant(_20)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb11__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_20 as Continue).0: i128)<br/>_19 = _28<br/>StorageDead(_28)<br/>StorageDead(_20)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_70 = deref_copy ((*_1).1: &amp;i128)<br/>_32 = (*_70)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _5<br/></td></tr><tr><td align="left">_33 = &lt;i128 as Neg&gt;::neg(move _34)</td></tr></table>>];
    bb12__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_20 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_27)<br/>_27 = _25<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;OrderFillSimulation, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb13__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/></td></tr><tr><td align="left">_31 = &lt;i128 as SafeMath&gt;::safe_add(move _32, move _33)</td></tr></table>>];
    bb15__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_30 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _31)</td></tr></table>>];
    bb16__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>_35 = discriminant(_30)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb17__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_30 as Continue).0: i128)<br/>_29 = _39<br/>StorageDead(_39)<br/>StorageDead(_30)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_71 = deref_copy ((*_1).2: &amp;{closure@programs/drift/src/state/user.rs:862:46: 862:85})<br/>_43 = &amp;(*_71)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = _19<br/>StorageLive(_46)<br/>_46 = _29<br/>_44 = (move _45, move _46)<br/></td></tr><tr><td align="left">_42 = &lt;{closure@programs/drift/src/state/user.rs:862:46: 862:85} as Fn&lt;(i128, i128)&gt;&gt;::call(move _43, move _44)</td></tr></table>>];
    bb18__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_30 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_38)<br/>_38 = _36<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;OrderFillSimulation, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _38)</td></tr></table>>];
    bb19__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">_41 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _42)</td></tr></table>>];
    bb21__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>_47 = discriminant(_41)<br/></td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb22__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = ((_41 as Continue).0: i128)<br/>_40 = _51<br/>StorageDead(_51)<br/>StorageDead(_41)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = _40<br/>StorageLive(_56)<br/>_56 = _5<br/></td></tr><tr><td align="left">_54 = &lt;i128 as SafeMath&gt;::safe_add(move _55, move _56)</td></tr></table>>];
    bb23__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = ((_41 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_50)<br/>_50 = _48<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;OrderFillSimulation, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _50)</td></tr></table>>];
    bb24__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_48)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">_53 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _54)</td></tr></table>>];
    bb26__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>_57 = discriminant(_53)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb27__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = ((_53 as Continue).0: i128)<br/>_52 = _61<br/>StorageDead(_61)<br/>StorageDead(_53)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = _19<br/>StorageLive(_64)<br/>_64 = _5<br/>StorageLive(_65)<br/>_65 = _29<br/>StorageLive(_66)<br/>_66 = _40<br/>StorageLive(_67)<br/>_67 = _52<br/>_62 = OrderFillSimulation { token_amount: move _63, orders_value: move _64, token_value: move _65, weighted_token_value: move _66, free_collateral_contribution: move _67 }<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>StorageDead(_64)<br/>StorageDead(_63)<br/>_0 = std::result::Result::&lt;OrderFillSimulation, error::ErrorCode&gt;::Ok(move _62)<br/>StorageDead(_62)<br/>StorageDead(_52)<br/>StorageDead(_40)<br/>StorageDead(_29)<br/>StorageDead(_19)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = ((_53 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_60)<br/>_60 = _58<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;OrderFillSimulation, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _60)</td></tr></table>>];
    bb29__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_58)<br/>StorageDead(_53)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_4351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4351 -> bb1__0_4351 [label="success"];
    bb1__0_4351 -> bb2__0_4351 [label="return"];
    bb2__0_4351 -> bb3__0_4351 [label="return"];
    bb3__0_4351 -> bb4__0_4351 [label="return"];
    bb4__0_4351 -> bb5__0_4351 [label="0"];
    bb4__0_4351 -> bb7__0_4351 [label="1"];
    bb4__0_4351 -> bb6__0_4351 [label="otherwise"];
    bb5__0_4351 -> bb9__0_4351 [label="return"];
    bb7__0_4351 -> bb8__0_4351 [label="return"];
    bb8__0_4351 -> bb33__0_4351 [label=""];
    bb9__0_4351 -> bb10__0_4351 [label="return"];
    bb10__0_4351 -> bb11__0_4351 [label="0"];
    bb10__0_4351 -> bb12__0_4351 [label="1"];
    bb10__0_4351 -> bb6__0_4351 [label="otherwise"];
    bb11__0_4351 -> bb14__0_4351 [label="return"];
    bb12__0_4351 -> bb13__0_4351 [label="return"];
    bb13__0_4351 -> bb32__0_4351 [label=""];
    bb14__0_4351 -> bb15__0_4351 [label="return"];
    bb15__0_4351 -> bb16__0_4351 [label="return"];
    bb16__0_4351 -> bb17__0_4351 [label="0"];
    bb16__0_4351 -> bb18__0_4351 [label="1"];
    bb16__0_4351 -> bb6__0_4351 [label="otherwise"];
    bb17__0_4351 -> bb20__0_4351 [label="return"];
    bb18__0_4351 -> bb19__0_4351 [label="return"];
    bb19__0_4351 -> bb31__0_4351 [label=""];
    bb20__0_4351 -> bb21__0_4351 [label="return"];
    bb21__0_4351 -> bb22__0_4351 [label="0"];
    bb21__0_4351 -> bb23__0_4351 [label="1"];
    bb21__0_4351 -> bb6__0_4351 [label="otherwise"];
    bb22__0_4351 -> bb25__0_4351 [label="return"];
    bb23__0_4351 -> bb24__0_4351 [label="return"];
    bb24__0_4351 -> bb30__0_4351 [label=""];
    bb25__0_4351 -> bb26__0_4351 [label="return"];
    bb26__0_4351 -> bb27__0_4351 [label="0"];
    bb26__0_4351 -> bb28__0_4351 [label="1"];
    bb26__0_4351 -> bb6__0_4351 [label="otherwise"];
    bb27__0_4351 -> bb34__0_4351 [label=""];
    bb28__0_4351 -> bb29__0_4351 [label="return"];
    bb29__0_4351 -> bb30__0_4351 [label=""];
    bb30__0_4351 -> bb31__0_4351 [label=""];
    bb31__0_4351 -> bb32__0_4351 [label=""];
    bb32__0_4351 -> bb33__0_4351 [label=""];
    bb33__0_4351 -> bb34__0_4351 [label=""];
}
