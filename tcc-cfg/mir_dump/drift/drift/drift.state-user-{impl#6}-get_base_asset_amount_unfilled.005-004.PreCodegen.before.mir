// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::get_base_asset_amount_unfilled` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::get_base_asset_amount_unfilled(_1: &Order, _2: Option<i64>) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    debug existing_position => _2;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _5: std::result::Result<u64, error::ErrorCode>;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: u64;
    let mut _14: isize;
    let mut _16: !;
    let mut _17: u64;
    let _18: ();
    let mut _19: bool;
    let mut _20: !;
    let mut _21: u64;
    let _22: ();
    let mut _23: bool;
    let mut _24: i64;
    let mut _25: !;
    let mut _26: isize;
    let mut _27: bool;
    let mut _28: i64;
    let mut _29: u64;
    let mut _30: u64;
    let mut _31: u64;
    let mut _32: i64;
    let mut _33: bool;
    let mut _34: i64;
    let mut _35: u64;
    let mut _36: u64;
    let mut _37: u64;
    let mut _38: i64;
    scope 1 {
        debug base_asset_amount_unfilled => _3;
        let _13: i64;
        let _15: i64;
        scope 6 {
            debug existing_position => _13;
        }
        scope 7 {
            debug existing_position => _15;
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).2: u64);
        StorageLive(_7);
        _7 = ((*_1).3: u64);
        _5 = <u64 as SafeMath>::safe_sub(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: u64);
        _3 = _12;
        StorageDead(_12);
        StorageDead(_4);
        StorageLive(_13);
        _14 = discriminant(_2);
        switchInt(move _14) -> [0: bb7, 1: bb8, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_4);
        goto -> bb27;
    }

    bb7: {
        StorageLive(_17);
        _17 = _3;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _17);
        StorageDead(_17);
        goto -> bb26;
    }

    bb8: {
        StorageLive(_15);
        _15 = ((_2 as Some).0: i64);
        _13 = _15;
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).18: bool);
        switchInt(move _19) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _13;
        _23 = Eq(move _24, const 0_i64);
        switchInt(move _23) -> [0: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_21);
        _21 = _3;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb26;
    }

    bb11: {
        StorageDead(_24);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb26;
    }

    bb12: {
        StorageDead(_24);
        _22 = const ();
        StorageDead(_23);
        StorageDead(_22);
        _26 = discriminant(((*_1).17: controller::position::PositionDirection));
        switchInt(move _26) -> [0: bb14, 1: bb13, otherwise: bb4];
    }

    bb13: {
        StorageLive(_33);
        StorageLive(_34);
        _34 = _13;
        _33 = Lt(move _34, const 0_i64);
        switchInt(move _33) -> [0: bb21, otherwise: bb20];
    }

    bb14: {
        StorageLive(_27);
        StorageLive(_28);
        _28 = _13;
        _27 = Gt(move _28, const 0_i64);
        switchInt(move _27) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_28);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        goto -> bb19;
    }

    bb16: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _3;
        StorageLive(_31);
        StorageLive(_32);
        _32 = _13;
        _31 = core::num::<impl i64>::unsigned_abs(move _32) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_32);
        _29 = <u64 as Ord>::min(move _30, move _31) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_31);
        StorageDead(_30);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _29);
        StorageDead(_29);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_27);
        goto -> bb25;
    }

    bb20: {
        StorageDead(_34);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        goto -> bb24;
    }

    bb21: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _3;
        StorageLive(_37);
        StorageLive(_38);
        _38 = _13;
        _37 = core::num::<impl i64>::unsigned_abs(move _38) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_38);
        _35 = <u64 as Ord>::min(move _36, move _37) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_37);
        StorageDead(_36);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _35);
        StorageDead(_35);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_33);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_13);
        StorageDead(_3);
        goto -> bb28;
    }

    bb26: {
        StorageDead(_13);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_3);
        goto -> bb28;
    }

    bb28: {
        return;
    }
}
