digraph Mir_0_2280 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn determine_perp_fulfillment_methods_for_maker(_1: &amp;ReErased state::user::Order, _2: &amp;ReErased state::perp_market::AMM, _3: u64, _4: std::option::Option&lt;i64&gt;, _5: std::option::Option&lt;u64&gt;, _6: state::perp_market::AMMAvailability, _7: u64, _8: u8, _9: state::fill_mode::FillMode) -&gt; std::result::Result&lt;std::vec::Vec&lt;state::fulfillment::PerpFulfillmentMethod, std::alloc::Global&gt;, error::ErrorCode&gt;<br align="left"/>let _10: controller::position::PositionDirection;<br align="left"/>let _11: bool;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _13: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _14: state::perp_market::AMMAvailability;<br align="left"/>let mut _15: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _16: &amp;ReErased state::user::Order;<br align="left"/>let mut _17: u8;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: state::fill_mode::FillMode;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _24: bool;<br align="left"/>let _25: ();<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: !;<br align="left"/>let mut _28: std::vec::Vec&lt;state::fulfillment::PerpFulfillmentMethod, std::alloc::Global&gt;;<br align="left"/>let _29: u64;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _32: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _33: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _34: u64;<br align="left"/>let mut _35: isize;<br align="left"/>let _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _37: !;<br align="left"/>let mut _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _39: u64;<br align="left"/>let mut _40: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _41: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _42: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _43: u64;<br align="left"/>let mut _44: isize;<br align="left"/>let _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _46: !;<br align="left"/>let mut _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _48: u64;<br align="left"/>let _49: u64;<br align="left"/>let mut _50: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _51: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _52: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _53: isize;<br align="left"/>let _54: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _55: !;<br align="left"/>let mut _56: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _57: u64;<br align="left"/>let _58: bool;<br align="left"/>let mut _59: controller::position::PositionDirection;<br align="left"/>let mut _60: u64;<br align="left"/>let mut _61: u64;<br align="left"/>let mut _62: bool;<br align="left"/>let mut _63: std::vec::Vec&lt;state::fulfillment::PerpFulfillmentMethod, std::alloc::Global&gt;;<br align="left"/>let mut _64: std::boxed::Box&lt;[state::fulfillment::PerpFulfillmentMethod], std::alloc::Global&gt;;<br align="left"/>let mut _65: std::boxed::Box&lt;[state::fulfillment::PerpFulfillmentMethod; 1_usize], std::alloc::Global&gt;;<br align="left"/>let mut _66: usize;<br align="left"/>let mut _67: usize;<br align="left"/>let mut _68: *mut u8;<br align="left"/>let mut _69: std::boxed::Box&lt;[state::fulfillment::PerpFulfillmentMethod; 1_usize], std::alloc::Global&gt;;<br align="left"/>let mut _70: state::fulfillment::PerpFulfillmentMethod;<br align="left"/>let mut _71: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _72: std::vec::Vec&lt;state::fulfillment::PerpFulfillmentMethod, std::alloc::Global&gt;;<br align="left"/>let mut _73: *const [state::fulfillment::PerpFulfillmentMethod; 1_usize];<br align="left"/>let mut _74: *const ();<br align="left"/>let mut _75: usize;<br align="left"/>let mut _76: usize;<br align="left"/>let mut _77: usize;<br align="left"/>let mut _78: usize;<br align="left"/>let mut _79: bool;<br align="left"/>debug order =&gt; _1;<br align="left"/>debug amm =&gt; _2;<br align="left"/>debug amm_reserve_price =&gt; _3;<br align="left"/>debug valid_oracle_price =&gt; _4;<br align="left"/>debug limit_price =&gt; _5;<br align="left"/>debug amm_availability =&gt; _6;<br align="left"/>debug slot =&gt; _7;<br align="left"/>debug min_auction_duration =&gt; _8;<br align="left"/>debug fill_mode =&gt; _9;<br align="left"/>debug maker_direction =&gt; _10;<br align="left"/>debug can_fill_with_amm =&gt; _11;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>debug amm_price =&gt; _29;<br align="left"/>debug residual =&gt; _36;<br align="left"/>debug val =&gt; _39;<br align="left"/>debug residual =&gt; _45;<br align="left"/>debug val =&gt; _48;<br align="left"/>debug maker_price =&gt; _49;<br align="left"/>debug residual =&gt; _54;<br align="left"/>debug val =&gt; _57;<br align="left"/>debug amm_crosses_maker =&gt; _58;<br align="left"/>>;
    bb0__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((*_1).17: controller::position::PositionDirection)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _6<br/>StorageLive(_15)<br/>_15 = _4<br/>StorageLive(_16)<br/>_16 = &amp;(*_1)<br/>StorageLive(_17)<br/>_17 = _8<br/>StorageLive(_18)<br/>_18 = _7<br/>StorageLive(_19)<br/>_19 = _9<br/></td></tr><tr><td align="left">_13 = can_fill_with_amm(move _14, move _15, move _16, move _17, move _18, move _19)</td></tr></table>>];
    bb1__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb2__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_20 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb3__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_12 as Continue).0: bool)<br/>_11 = _24<br/>StorageDead(_24)<br/>StorageDead(_12)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _11<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb4__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_23)<br/>_23 = _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;Vec&lt;PerpFulfillmentMethod&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb6__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_25 = const ()<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_29)<br/>_30 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb8__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/></td></tr><tr><td align="left">_28 = Vec::&lt;PerpFulfillmentMethod&gt;::new()</td></tr></table>>];
    bb9__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_0 = std::result::Result::&lt;Vec&lt;PerpFulfillmentMethod&gt;, error::ErrorCode&gt;::Ok(move _28)<br/>StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = &amp;(*_2)<br/>StorageLive(_43)<br/>_43 = _3<br/></td></tr><tr><td align="left">_41 = AMM::bid_price(move _42, move _43)</td></tr></table>>];
    bb11__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = &amp;(*_2)<br/>StorageLive(_34)<br/>_34 = _3<br/></td></tr><tr><td align="left">_32 = AMM::ask_price(move _33, move _34)</td></tr></table>>];
    bb12__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">_31 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _32)</td></tr></table>>];
    bb13__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>_35 = discriminant(_31)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb14__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_31 as Continue).0: u64)<br/>_29 = _39<br/>StorageDead(_39)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_31 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_38)<br/>_38 = _36<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;Vec&lt;PerpFulfillmentMethod&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _38)</td></tr></table>>];
    bb16__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">_40 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _41)</td></tr></table>>];
    bb18__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>_44 = discriminant(_40)<br/></td></tr><tr><td align="left">switchInt(move _44)</td></tr></table>>];
    bb19__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = ((_40 as Continue).0: u64)<br/>_29 = _48<br/>StorageDead(_48)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_40 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_47)<br/>_47 = _45<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;Vec&lt;PerpFulfillmentMethod&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _47)</td></tr></table>>];
    bb21__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_45)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>_52 = _5<br/></td></tr><tr><td align="left">_51 = &lt;Option&lt;u64&gt; as SafeUnwrap&gt;::safe_unwrap(move _52)</td></tr></table>>];
    bb23__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/></td></tr><tr><td align="left">_50 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _51)</td></tr></table>>];
    bb24__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>_53 = discriminant(_50)<br/></td></tr><tr><td align="left">switchInt(move _53)</td></tr></table>>];
    bb25__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_57)<br/>_57 = ((_50 as Continue).0: u64)<br/>_49 = _57<br/>StorageDead(_57)<br/>StorageDead(_50)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = _10<br/>StorageLive(_60)<br/>_60 = _49<br/>StorageLive(_61)<br/>_61 = _29<br/></td></tr><tr><td align="left">_58 = do_orders_cross(move _59, move _60, move _61)</td></tr></table>>];
    bb26__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_54)<br/>_54 = ((_50 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_56)<br/>_56 = _54<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;Vec&lt;PerpFulfillmentMethod&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _56)</td></tr></table>>];
    bb27__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_54)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_60)<br/>StorageDead(_59)<br/>StorageLive(_62)<br/>_62 = _58<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb29__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>_66 = SizeOf([state::fulfillment::PerpFulfillmentMethod; 1])<br/>_67 = AlignOf([state::fulfillment::PerpFulfillmentMethod; 1])<br/></td></tr><tr><td align="left">_68 = alloc::alloc::exchange_malloc(move _66, move _67)</td></tr></table>>];
    bb30__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_69)<br/>_69 = ShallowInitBox(move _68, [state::fulfillment::PerpFulfillmentMethod; 1])<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = Option::&lt;u64&gt;::None<br/>_70 = PerpFulfillmentMethod::AMM(move _71)<br/>StorageDead(_71)<br/>_73 = (((_69.0: std::ptr::Unique&lt;[state::fulfillment::PerpFulfillmentMethod; 1]&gt;).0: std::ptr::NonNull&lt;[state::fulfillment::PerpFulfillmentMethod; 1]&gt;).0: *const [state::fulfillment::PerpFulfillmentMethod; 1])<br/>_74 = _73 as *const () (PtrToPtr)<br/>_75 = _74 as usize (Transmute)<br/>_76 = AlignOf([state::fulfillment::PerpFulfillmentMethod; 1])<br/>_77 = Sub(_76, const 1_usize)<br/>_78 = BitAnd(_75, _77)<br/>_79 = Eq(_78, const 0_usize)<br/></td></tr><tr><td align="left">assert(_79, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _76, _75)</td></tr></table>>];
    bb31__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>_0 = std::result::Result::&lt;Vec&lt;PerpFulfillmentMethod&gt;, error::ErrorCode&gt;::Ok(move _63)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_72)<br/></td></tr><tr><td align="left">_72 = Vec::&lt;PerpFulfillmentMethod&gt;::new()</td></tr></table>>];
    bb33__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_0 = std::result::Result::&lt;Vec&lt;PerpFulfillmentMethod&gt;, error::ErrorCode&gt;::Ok(move _72)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_58)<br/>StorageDead(_49)<br/>StorageDead(_29)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left">return</td></tr></table>>];
    bb38__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">38 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb39__0_2280 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">(*_73) = [move _70]<br/>StorageDead(_70)<br/>_65 = move _69<br/>_64 = move _65 as std::boxed::Box&lt;[state::fulfillment::PerpFulfillmentMethod]&gt; (PointerCoercion(Unsize))<br/>StorageDead(_69)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">_63 = std::slice::&lt;impl [PerpFulfillmentMethod]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _64)</td></tr></table>>];
    bb0__0_2280 -> bb1__0_2280 [label="return"];
    bb1__0_2280 -> bb2__0_2280 [label="return"];
    bb2__0_2280 -> bb3__0_2280 [label="0"];
    bb2__0_2280 -> bb5__0_2280 [label="1"];
    bb2__0_2280 -> bb4__0_2280 [label="otherwise"];
    bb3__0_2280 -> bb8__0_2280 [label="0"];
    bb3__0_2280 -> bb7__0_2280 [label="otherwise"];
    bb5__0_2280 -> bb6__0_2280 [label="return"];
    bb6__0_2280 -> bb36__0_2280 [label=""];
    bb7__0_2280 -> bb11__0_2280 [label="0"];
    bb7__0_2280 -> bb10__0_2280 [label="1"];
    bb7__0_2280 -> bb4__0_2280 [label="otherwise"];
    bb8__0_2280 -> bb9__0_2280 [label="return"];
    bb9__0_2280 -> bb36__0_2280 [label=""];
    bb10__0_2280 -> bb17__0_2280 [label="return"];
    bb11__0_2280 -> bb12__0_2280 [label="return"];
    bb12__0_2280 -> bb13__0_2280 [label="return"];
    bb13__0_2280 -> bb14__0_2280 [label="0"];
    bb13__0_2280 -> bb15__0_2280 [label="1"];
    bb13__0_2280 -> bb4__0_2280 [label="otherwise"];
    bb14__0_2280 -> bb22__0_2280 [label=""];
    bb15__0_2280 -> bb16__0_2280 [label="return"];
    bb16__0_2280 -> bb35__0_2280 [label=""];
    bb17__0_2280 -> bb18__0_2280 [label="return"];
    bb18__0_2280 -> bb19__0_2280 [label="0"];
    bb18__0_2280 -> bb20__0_2280 [label="1"];
    bb18__0_2280 -> bb4__0_2280 [label="otherwise"];
    bb19__0_2280 -> bb22__0_2280 [label=""];
    bb20__0_2280 -> bb21__0_2280 [label="return"];
    bb21__0_2280 -> bb35__0_2280 [label=""];
    bb22__0_2280 -> bb23__0_2280 [label="return"];
    bb23__0_2280 -> bb24__0_2280 [label="return"];
    bb24__0_2280 -> bb25__0_2280 [label="0"];
    bb24__0_2280 -> bb26__0_2280 [label="1"];
    bb24__0_2280 -> bb4__0_2280 [label="otherwise"];
    bb25__0_2280 -> bb28__0_2280 [label="return"];
    bb26__0_2280 -> bb27__0_2280 [label="return"];
    bb27__0_2280 -> bb35__0_2280 [label=""];
    bb28__0_2280 -> bb32__0_2280 [label="0"];
    bb28__0_2280 -> bb29__0_2280 [label="otherwise"];
    bb29__0_2280 -> bb30__0_2280 [label="return"];
    bb30__0_2280 -> bb39__0_2280 [label="success"];
    bb31__0_2280 -> bb34__0_2280 [label=""];
    bb32__0_2280 -> bb33__0_2280 [label="return"];
    bb33__0_2280 -> bb34__0_2280 [label=""];
    bb34__0_2280 -> bb37__0_2280 [label=""];
    bb35__0_2280 -> bb36__0_2280 [label=""];
    bb36__0_2280 -> bb37__0_2280 [label=""];
    bb39__0_2280 -> bb31__0_2280 [label="return"];
    bb39__0_2280 -> bb38__0_2280 [label="unwind"];
}
