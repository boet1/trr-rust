digraph Mir_0_3677 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn parse_optional_params(_1: std::option::Option&lt;u32&gt;) -&gt; (u8, u8)<br align="left"/>let mut _2: isize;<br align="left"/>let _3: u32;<br align="left"/>let mut _4: u8;<br align="left"/>let mut _5: u32;<br align="left"/>let mut _6: u32;<br align="left"/>let mut _7: u8;<br align="left"/>let mut _8: u32;<br align="left"/>let mut _9: u32;<br align="left"/>let mut _10: u32;<br align="left"/>let mut _11: u32;<br align="left"/>let mut _12: bool;<br align="left"/>debug optional_params =&gt; _1;<br align="left"/>debug optional_params =&gt; _3;<br align="left"/>>;
    bb0__0_3677 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_2 = discriminant(_1)<br/></td></tr><tr><td align="left">switchInt(move _2)</td></tr></table>>];
    bb1__0_3677 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_0 = (const 0_u8, const 100_u8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_3677 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_3677 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = ((_1 as Some).0: u32)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _3<br/>_5 = BitAnd(move _6, const 255_u32)<br/>StorageDead(_6)<br/>_4 = move _5 as u8 (IntToInt)<br/>StorageDead(_5)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _3<br/>_11 = const 8_i32 as u32 (IntToInt)<br/>_12 = Lt(move _11, const 32_u32)<br/></td></tr><tr><td align="left">assert(move _12, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 8_i32)</td></tr></table>>];
    bb4__0_3677 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = Shr(move _10, const 8_i32)<br/>StorageDead(_10)<br/>_8 = BitAnd(move _9, const 255_u32)<br/>StorageDead(_9)<br/>_7 = move _8 as u8 (IntToInt)<br/>StorageDead(_8)<br/>_0 = (move _4, move _7)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_3677 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3677 -> bb1__0_3677 [label="0"];
    bb0__0_3677 -> bb3__0_3677 [label="1"];
    bb0__0_3677 -> bb2__0_3677 [label="otherwise"];
    bb1__0_3677 -> bb5__0_3677 [label=""];
    bb3__0_3677 -> bb4__0_3677 [label="success"];
    bb4__0_3677 -> bb5__0_3677 [label=""];
}
