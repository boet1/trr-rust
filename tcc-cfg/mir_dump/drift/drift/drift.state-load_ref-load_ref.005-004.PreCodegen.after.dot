digraph Mir_0_3385 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn load_ref(_1: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;) -&gt; std::result::Result&lt;std::cell::Ref&lt;ReErased, T/#0&gt;, anchor_lang::error::Error&gt;<br align="left"/>let _2: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;, std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;&gt;;<br align="left"/>let mut _4: std::result::Result&lt;std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _5: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _6: isize;<br align="left"/>let _7: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let _10: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let _11: ();<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: &amp;ReErased [u8];<br align="left"/>let _15: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _16: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: &amp;ReErased [u8];<br align="left"/>let mut _19: &amp;ReErased [u8; 8_usize];<br align="left"/>let _20: [u8; 8_usize];<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: anchor_lang::error::Error;<br align="left"/>let mut _23: anchor_lang::error::ErrorCode;<br align="left"/>let _24: &amp;ReErased [u8; 8_usize];<br align="left"/>let _25: usize;<br align="left"/>let _26: &amp;ReErased [u8];<br align="left"/>let _27: &amp;ReErased [u8];<br align="left"/>let mut _28: &amp;ReErased [u8];<br align="left"/>let _29: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _30: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _31: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _32: usize;<br align="left"/>let mut _33: usize;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: (usize, bool);<br align="left"/>let mut _36: &amp;ReErased [u8];<br align="left"/>let _37: ();<br align="left"/>let mut _38: bool;<br align="left"/>let mut _39: &amp;ReErased &amp;ReErased [u8; 8_usize];<br align="left"/>let mut _40: &amp;ReErased &amp;ReErased [u8; 8_usize];<br align="left"/>let _41: &amp;ReErased [u8; 8_usize];<br align="left"/>let _42: [u8; 8_usize];<br align="left"/>let mut _43: !;<br align="left"/>let mut _44: anchor_lang::error::Error;<br align="left"/>let mut _45: anchor_lang::error::ErrorCode;<br align="left"/>let mut _46: std::cell::Ref&lt;ReErased, T/#0&gt;;<br align="left"/>let mut _47: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _48: Closure(DefId(0:3388 ~ drift[d311]::state::load_ref::load_ref::{closure#0}), [T/#0, i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) &amp;ReErased mut [u8],)) -&gt; &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) T/#0, [Region(BrAnon)]), ()]);<br align="left"/>let mut _49: &amp;ReErased mut [u8];<br align="left"/>let mut _50: &amp;ReErased mut [u8];<br align="left"/>let mut _51: bool;<br align="left"/>let mut _52: isize;<br align="left"/>let mut _53: isize;<br align="left"/>let mut _54: isize;<br align="left"/>let mut _55: isize;<br align="left"/>let mut _56: isize;<br align="left"/>debug account_info =&gt; _1;<br align="left"/>debug data =&gt; _2;<br align="left"/>debug residual =&gt; _7;<br align="left"/>debug val =&gt; _10;<br align="left"/>debug disc_bytes =&gt; _24;<br align="left"/>debug offset =&gt; _25;<br align="left"/>debug slice =&gt; _26;<br align="left"/>>;
    bb0__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_51 = const false<br/>StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(*_1)<br/></td></tr><tr><td align="left">_4 = anchor_lang::prelude::AccountInfo::&lt;'_&gt;::try_borrow_data(move _5)</td></tr></table>>];
    bb1__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;Ref&lt;'_, &amp;mut [u8]&gt;, anchor_lang::prelude::ProgramError&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb2__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_6 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb3__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_3 as Continue).0: std::cell::Ref&lt;'_, &amp;mut [u8]&gt;)<br/>_51 = const true<br/>_2 = move _10<br/>StorageDead(_10)<br/>_52 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;_2<br/></td></tr><tr><td align="left">_15 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _16)</td></tr></table>>];
    bb4__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = move ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;)<br/>StorageLive(_9)<br/>_9 = move _7<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;Ref&lt;'_, T&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::prelude::ProgramError&gt;&gt;&gt;::from_residual(move _9)</td></tr></table>>];
    bb6__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>_54 = discriminant(_3)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_49 = deref_copy (*_15)<br/>_14 = &amp;(*_49)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_13 = core::slice::&lt;impl [u8]&gt;::len(move _14)</td></tr></table>>];
    bb8__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/></td></tr><tr><td align="left">_20 = &lt;T as anchor_lang::Discriminator&gt;::discriminator()</td></tr></table>>];
    bb9__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_19 = &amp;_20<br/>_18 = move _19 as &amp;[u8] (PointerCoercion(Unsize))<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = core::slice::&lt;impl [u8]&gt;::len(move _18)</td></tr></table>>];
    bb10__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_12 = Lt(move _13, move _17)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb11__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = AccountDiscriminatorNotFound<br/></td></tr><tr><td align="left">_22 = &lt;anchor_lang::error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _23)</td></tr></table>>];
    bb12__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_0 = std::result::Result::&lt;Ref&lt;'_, T&gt;, anchor_lang::error::Error&gt;::Err(move _22)<br/>StorageDead(_22)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>_11 = const ()<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = const 0_usize<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = &amp;_2<br/></td></tr><tr><td align="left">_29 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _30)</td></tr></table>>];
    bb14__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_50 = deref_copy (*_29)<br/>_28 = &amp;(*_50)<br/>StorageDead(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = _25<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _25<br/>_35 = CheckedAdd(_34, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_35.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _34, const 8_usize)</td></tr></table>>];
    bb15__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_33 = move (_35.0: usize)<br/>StorageDead(_34)<br/>_31 = std::ops::Range::&lt;usize&gt; { start: move _32, end: move _33 }<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_27 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _28, move _31)</td></tr></table>>];
    bb16__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_28)<br/>_26 = &amp;(*_27)<br/>StorageLive(_36)<br/>_36 = &amp;(*_26)<br/></td></tr><tr><td align="left">_24 = load_ref::as_array::&lt;u8&gt;(move _36)</td></tr></table>>];
    bb17__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = &amp;_24<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/></td></tr><tr><td align="left">_42 = &lt;T as anchor_lang::Discriminator&gt;::discriminator()</td></tr></table>>];
    bb18__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_41 = &amp;_42<br/>_40 = &amp;_41<br/></td></tr><tr><td align="left">_38 = &lt;&amp;[u8; 8] as PartialEq&gt;::ne(move _39, move _40)</td></tr></table>>];
    bb19__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb20__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = AccountDiscriminatorMismatch<br/></td></tr><tr><td align="left">_44 = &lt;anchor_lang::error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _45)</td></tr></table>>];
    bb21__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>_0 = std::result::Result::&lt;Ref&lt;'_, T&gt;, anchor_lang::error::Error&gt;::Err(move _44)<br/>StorageDead(_44)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>_37 = const ()<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_51 = const false<br/>_47 = move _2<br/>StorageLive(_48)<br/>_48 = {closure@programs/drift/src/state/load_ref.rs:18:23: 18:29}<br/></td></tr><tr><td align="left">_46 = Ref::&lt;'_, &amp;mut [u8]&gt;::map::&lt;T, {closure@programs/drift/src/state/load_ref.rs:18:23: 18:29}&gt;(move _47, move _48)</td></tr></table>>];
    bb23__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_47)<br/>_0 = std::result::Result::&lt;Ref&lt;'_, T&gt;, anchor_lang::error::Error&gt;::Ok(move _46)<br/>StorageDead(_46)<br/>StorageDead(_24)<br/>_51 = const false<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb25__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_51 = const false<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">return</td></tr></table>>];
    bb27__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">27 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb28__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">28 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb29__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">29 (cleanup)</td></tr><tr><td align="left">switchInt(_51)</td></tr></table>>];
    bb30__0_3385 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">30 (cleanup)</td></tr><tr><td align="left" balign="left">_56 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_3385 -> bb1__0_3385 [label="return"];
    bb1__0_3385 -> bb2__0_3385 [label="return"];
    bb1__0_3385 -> bb27__0_3385 [label="unwind"];
    bb2__0_3385 -> bb3__0_3385 [label="0"];
    bb2__0_3385 -> bb5__0_3385 [label="1"];
    bb2__0_3385 -> bb4__0_3385 [label="otherwise"];
    bb3__0_3385 -> bb7__0_3385 [label="return"];
    bb3__0_3385 -> bb29__0_3385 [label="unwind"];
    bb5__0_3385 -> bb6__0_3385 [label="return"];
    bb5__0_3385 -> bb30__0_3385 [label="unwind"];
    bb6__0_3385 -> bb25__0_3385 [label=""];
    bb7__0_3385 -> bb8__0_3385 [label="return"];
    bb7__0_3385 -> bb29__0_3385 [label="unwind"];
    bb8__0_3385 -> bb9__0_3385 [label="return"];
    bb8__0_3385 -> bb29__0_3385 [label="unwind"];
    bb9__0_3385 -> bb10__0_3385 [label="return"];
    bb9__0_3385 -> bb29__0_3385 [label="unwind"];
    bb10__0_3385 -> bb13__0_3385 [label="0"];
    bb10__0_3385 -> bb11__0_3385 [label="otherwise"];
    bb11__0_3385 -> bb12__0_3385 [label="return"];
    bb11__0_3385 -> bb29__0_3385 [label="unwind"];
    bb12__0_3385 -> bb24__0_3385 [label=""];
    bb13__0_3385 -> bb14__0_3385 [label="return"];
    bb13__0_3385 -> bb29__0_3385 [label="unwind"];
    bb14__0_3385 -> bb15__0_3385 [label="success"];
    bb14__0_3385 -> bb29__0_3385 [label="unwind"];
    bb15__0_3385 -> bb16__0_3385 [label="return"];
    bb15__0_3385 -> bb29__0_3385 [label="unwind"];
    bb16__0_3385 -> bb17__0_3385 [label="return"];
    bb16__0_3385 -> bb29__0_3385 [label="unwind"];
    bb17__0_3385 -> bb18__0_3385 [label="return"];
    bb17__0_3385 -> bb29__0_3385 [label="unwind"];
    bb18__0_3385 -> bb19__0_3385 [label="return"];
    bb18__0_3385 -> bb29__0_3385 [label="unwind"];
    bb19__0_3385 -> bb22__0_3385 [label="0"];
    bb19__0_3385 -> bb20__0_3385 [label="otherwise"];
    bb20__0_3385 -> bb21__0_3385 [label="return"];
    bb20__0_3385 -> bb29__0_3385 [label="unwind"];
    bb21__0_3385 -> bb24__0_3385 [label=""];
    bb22__0_3385 -> bb23__0_3385 [label="return"];
    bb22__0_3385 -> bb29__0_3385 [label="unwind"];
    bb23__0_3385 -> bb26__0_3385 [label=""];
    bb24__0_3385 -> bb25__0_3385 [label="return"];
    bb24__0_3385 -> bb27__0_3385 [label="unwind"];
    bb25__0_3385 -> bb26__0_3385 [label=""];
    bb28__0_3385 -> bb27__0_3385 [label="return"];
    bb29__0_3385 -> bb27__0_3385 [label="0"];
    bb29__0_3385 -> bb28__0_3385 [label="otherwise"];
    bb30__0_3385 -> bb27__0_3385 [label=""];
}
