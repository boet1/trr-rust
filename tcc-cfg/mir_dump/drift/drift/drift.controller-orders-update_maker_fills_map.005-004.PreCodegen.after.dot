digraph Mir_0_534 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn update_maker_fills_map(_1: &amp;ReErased mut std::collections::BTreeMap&lt;anchor_lang::prelude::Pubkey, i64, std::alloc::Global&gt;, _2: &amp;ReErased anchor_lang::prelude::Pubkey, _3: controller::position::PositionDirection, _4: u64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _5: i64;<br align="left"/>let mut _6: isize;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _8: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _14: i64;<br align="left"/>let mut _15: i64;<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _17: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _23: i64;<br align="left"/>let mut _24: bool;<br align="left"/>let _25: ();<br align="left"/>let mut _26: std::option::Option&lt;&amp;ReErased mut i64&gt;;<br align="left"/>let mut _27: &amp;ReErased mut std::collections::BTreeMap&lt;anchor_lang::prelude::Pubkey, i64, std::alloc::Global&gt;;<br align="left"/>let mut _28: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _29: isize;<br align="left"/>let _30: &amp;ReErased mut i64;<br align="left"/>let mut _31: i64;<br align="left"/>let mut _32: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _33: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _34: i64;<br align="left"/>let mut _35: i64;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: i64;<br align="left"/>let _41: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _42: &amp;ReErased mut std::collections::BTreeMap&lt;anchor_lang::prelude::Pubkey, i64, std::alloc::Global&gt;;<br align="left"/>let mut _43: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _44: i64;<br align="left"/>let mut _45: ();<br align="left"/>debug map =&gt; _1;<br align="left"/>debug maker_key =&gt; _2;<br align="left"/>debug maker_direction =&gt; _3;<br align="left"/>debug fill =&gt; _4;<br align="left"/>debug signed_fill =&gt; _5;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>debug maker_filled =&gt; _30;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>>;
    bb0__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>_6 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb1__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _4<br/></td></tr><tr><td align="left">_17 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _18)</td></tr></table>>];
    bb2__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _4<br/></td></tr><tr><td align="left">_8 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _9)</td></tr></table>>];
    bb4__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb5__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_10 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb6__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_7 as Continue).0: i64)<br/>_5 = _14<br/>StorageDead(_14)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_13)<br/>_13 = _11<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb8__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb10__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_19 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb11__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_16 as Continue).0: i64)<br/>_15 = _23<br/>StorageDead(_23)<br/>_24 = Eq(_15, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _24, &quot;attempt to negate `{}`, which would overflow&quot;, _15)</td></tr></table>>];
    bb12__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_22)<br/>_22 = _20<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb13__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_5 = Neg(move _15)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = &amp;mut (*_1)<br/>StorageLive(_28)<br/>_28 = &amp;(*_2)<br/></td></tr><tr><td align="left">_26 = BTreeMap::&lt;anchor_lang::prelude::Pubkey, i64&gt;::get_mut::&lt;anchor_lang::prelude::Pubkey&gt;(move _27, move _28)</td></tr></table>>];
    bb16__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>_29 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _29)</td></tr></table>>];
    bb17__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = move ((_26 as Some).0: &amp;mut i64)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = (*_30)<br/>StorageLive(_35)<br/>_35 = _5<br/></td></tr><tr><td align="left">_33 = &lt;i64 as SafeMath&gt;::safe_add(move _34, move _35)</td></tr></table>>];
    bb18__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _33)</td></tr></table>>];
    bb19__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_36 = discriminant(_32)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb20__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_32 as Continue).0: i64)<br/>_31 = _40<br/>StorageDead(_40)<br/>(*_30) = move _31<br/>StorageDead(_31)<br/>StorageDead(_32)<br/>_25 = const ()<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_32 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb22__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_31)<br/>StorageDead(_32)<br/>StorageDead(_30)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = &amp;mut (*_1)<br/>StorageLive(_43)<br/>_43 = (*_2)<br/>StorageLive(_44)<br/>_44 = _5<br/></td></tr><tr><td align="left">_41 = BTreeMap::&lt;anchor_lang::prelude::Pubkey, i64&gt;::insert(move _42, move _43, move _44)</td></tr></table>>];
    bb24__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>_25 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_45)<br/>_45 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _45)<br/>StorageDead(_45)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_534 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_534 -> bb3__0_534 [label="0"];
    bb0__0_534 -> bb1__0_534 [label="1"];
    bb0__0_534 -> bb2__0_534 [label="otherwise"];
    bb1__0_534 -> bb9__0_534 [label="return"];
    bb3__0_534 -> bb4__0_534 [label="return"];
    bb4__0_534 -> bb5__0_534 [label="return"];
    bb5__0_534 -> bb6__0_534 [label="0"];
    bb5__0_534 -> bb7__0_534 [label="1"];
    bb5__0_534 -> bb2__0_534 [label="otherwise"];
    bb6__0_534 -> bb15__0_534 [label=""];
    bb7__0_534 -> bb8__0_534 [label="return"];
    bb8__0_534 -> bb26__0_534 [label=""];
    bb9__0_534 -> bb10__0_534 [label="return"];
    bb10__0_534 -> bb11__0_534 [label="0"];
    bb10__0_534 -> bb12__0_534 [label="1"];
    bb10__0_534 -> bb2__0_534 [label="otherwise"];
    bb11__0_534 -> bb14__0_534 [label="success"];
    bb12__0_534 -> bb13__0_534 [label="return"];
    bb13__0_534 -> bb26__0_534 [label=""];
    bb14__0_534 -> bb15__0_534 [label=""];
    bb15__0_534 -> bb16__0_534 [label="return"];
    bb16__0_534 -> bb17__0_534 [label="1"];
    bb16__0_534 -> bb23__0_534 [label="otherwise"];
    bb17__0_534 -> bb18__0_534 [label="return"];
    bb18__0_534 -> bb19__0_534 [label="return"];
    bb19__0_534 -> bb20__0_534 [label="0"];
    bb19__0_534 -> bb21__0_534 [label="1"];
    bb19__0_534 -> bb2__0_534 [label="otherwise"];
    bb20__0_534 -> bb25__0_534 [label=""];
    bb21__0_534 -> bb22__0_534 [label="return"];
    bb22__0_534 -> bb26__0_534 [label=""];
    bb23__0_534 -> bb24__0_534 [label="return"];
    bb24__0_534 -> bb25__0_534 [label=""];
    bb25__0_534 -> bb27__0_534 [label=""];
    bb26__0_534 -> bb27__0_534 [label=""];
}
