digraph Mir_0_1902 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_auction_prices(_1: &amp;ReErased state::oracle::OraclePriceData, _2: controller::position::PositionDirection, _3: u64) -&gt; std::result::Result&lt;(i64, i64), error::ErrorCode&gt;<br align="left"/>let _4: i64;<br align="left"/>let _5: i64;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _7: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _13: i64;<br align="left"/>let _14: ();<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: i64;<br align="left"/>let mut _17: !;<br align="left"/>let _18: i64;<br align="left"/>let _19: i64;<br align="left"/>let mut _20: (i64, i64);<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _23: bool;<br align="left"/>let mut _24: i64;<br align="left"/>let mut _25: i64;<br align="left"/>let _26: i64;<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _28: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _29: i64;<br align="left"/>let mut _30: i64;<br align="left"/>let mut _31: i64;<br align="left"/>let mut _32: bool;<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: bool;<br align="left"/>let mut _35: bool;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: i64;<br align="left"/>let _41: i64;<br align="left"/>let mut _42: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _43: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _44: i64;<br align="left"/>let mut _45: i64;<br align="left"/>let mut _46: i64;<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: bool;<br align="left"/>let mut _49: bool;<br align="left"/>let mut _50: bool;<br align="left"/>let mut _51: isize;<br align="left"/>let _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _53: !;<br align="left"/>let mut _54: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _55: i64;<br align="left"/>let mut _56: i64;<br align="left"/>let mut _57: i64;<br align="left"/>let mut _58: i64;<br align="left"/>let mut _59: i64;<br align="left"/>let mut _60: bool;<br align="left"/>let mut _61: i64;<br align="left"/>let mut _62: i64;<br align="left"/>let _63: i64;<br align="left"/>let mut _64: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _65: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _66: i64;<br align="left"/>let mut _67: i64;<br align="left"/>let mut _68: i64;<br align="left"/>let mut _69: bool;<br align="left"/>let mut _70: bool;<br align="left"/>let mut _71: bool;<br align="left"/>let mut _72: bool;<br align="left"/>let mut _73: isize;<br align="left"/>let _74: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _75: !;<br align="left"/>let mut _76: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _77: i64;<br align="left"/>let mut _78: i64;<br align="left"/>let mut _79: i64;<br align="left"/>let mut _80: i64;<br align="left"/>let mut _81: i64;<br align="left"/>let mut _82: bool;<br align="left"/>let mut _83: i64;<br align="left"/>let mut _84: i64;<br align="left"/>let _85: i64;<br align="left"/>let mut _86: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _87: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _88: i64;<br align="left"/>let mut _89: i64;<br align="left"/>let mut _90: i64;<br align="left"/>let mut _91: bool;<br align="left"/>let mut _92: bool;<br align="left"/>let mut _93: bool;<br align="left"/>let mut _94: bool;<br align="left"/>let mut _95: isize;<br align="left"/>let _96: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _97: !;<br align="left"/>let mut _98: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _99: i64;<br align="left"/>let _100: i64;<br align="left"/>let mut _101: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _102: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _103: i64;<br align="left"/>let mut _104: i64;<br align="left"/>let mut _105: i64;<br align="left"/>let mut _106: bool;<br align="left"/>let mut _107: bool;<br align="left"/>let mut _108: bool;<br align="left"/>let mut _109: bool;<br align="left"/>let mut _110: isize;<br align="left"/>let _111: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _112: !;<br align="left"/>let mut _113: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _114: i64;<br align="left"/>let mut _115: i64;<br align="left"/>let mut _116: i64;<br align="left"/>let mut _117: i64;<br align="left"/>let mut _118: i64;<br align="left"/>let mut _119: bool;<br align="left"/>let mut _120: i64;<br align="left"/>let mut _121: i64;<br align="left"/>let _122: i64;<br align="left"/>let mut _123: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _124: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _125: i64;<br align="left"/>let mut _126: i64;<br align="left"/>let mut _127: i64;<br align="left"/>let mut _128: bool;<br align="left"/>let mut _129: bool;<br align="left"/>let mut _130: bool;<br align="left"/>let mut _131: bool;<br align="left"/>let mut _132: isize;<br align="left"/>let _133: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _134: !;<br align="left"/>let mut _135: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _136: i64;<br align="left"/>let mut _137: i64;<br align="left"/>let mut _138: i64;<br align="left"/>let mut _139: i64;<br align="left"/>let mut _140: i64;<br align="left"/>let mut _141: !;<br align="left"/>let mut _142: (i64, i64);<br align="left"/>let mut _143: i64;<br align="left"/>let mut _144: i64;<br align="left"/>let _145: i64;<br align="left"/>let mut _146: isize;<br align="left"/>let mut _147: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _148: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _149: i64;<br align="left"/>let mut _150: i64;<br align="left"/>let mut _151: i64;<br align="left"/>let mut _152: bool;<br align="left"/>let mut _153: bool;<br align="left"/>let mut _154: bool;<br align="left"/>let mut _155: bool;<br align="left"/>let mut _156: isize;<br align="left"/>let _157: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _158: !;<br align="left"/>let mut _159: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _160: i64;<br align="left"/>let mut _161: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _162: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _163: i64;<br align="left"/>let mut _164: i64;<br align="left"/>let mut _165: i64;<br align="left"/>let mut _166: bool;<br align="left"/>let mut _167: bool;<br align="left"/>let mut _168: bool;<br align="left"/>let mut _169: bool;<br align="left"/>let mut _170: isize;<br align="left"/>let _171: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _172: !;<br align="left"/>let mut _173: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _174: i64;<br align="left"/>let mut _175: (i64, i64);<br align="left"/>let mut _176: i64;<br align="left"/>let mut _177: i64;<br align="left"/>debug oracle_price_data =&gt; _1;<br align="left"/>debug direction =&gt; _2;<br align="left"/>debug limit_price =&gt; _3;<br align="left"/>debug oracle_price =&gt; _4;<br align="left"/>debug limit_price =&gt; _5;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug auction_start_price =&gt; _18;<br align="left"/>debug auction_end_price =&gt; _19;<br align="left"/>debug limit_derive_start_price =&gt; _26;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>debug oracle_derive_start_price =&gt; _41;<br align="left"/>debug residual =&gt; _52;<br align="left"/>debug val =&gt; _55;<br align="left"/>debug oracle_derive_end_price =&gt; _63;<br align="left"/>debug residual =&gt; _74;<br align="left"/>debug val =&gt; _77;<br align="left"/>debug limit_derive_start_price =&gt; _85;<br align="left"/>debug residual =&gt; _96;<br align="left"/>debug val =&gt; _99;<br align="left"/>debug oracle_derive_start_price =&gt; _100;<br align="left"/>debug residual =&gt; _111;<br align="left"/>debug val =&gt; _114;<br align="left"/>debug oracle_derive_end_price =&gt; _122;<br align="left"/>debug residual =&gt; _133;<br align="left"/>debug val =&gt; _136;<br align="left"/>debug auction_end_price =&gt; _145;<br align="left"/>debug residual =&gt; _157;<br align="left"/>debug val =&gt; _160;<br align="left"/>debug residual =&gt; _171;<br align="left"/>debug val =&gt; _174;<br align="left"/>>;
    bb0__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>_4 = ((*_1).0: i64)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _3<br/></td></tr><tr><td align="left">_7 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _8)</td></tr></table>>];
    bb1__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb2__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_9 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_6 as Continue).0: i64)<br/>_5 = _13<br/>StorageDead(_13)<br/>StorageDead(_6)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _5<br/>_15 = Gt(move _16, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb4__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_20)<br/>_21 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb8__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_14 = const ()<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_145)<br/>_146 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _146)</td></tr></table>>];
    bb9__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_141)<br/></td></tr><tr><td align="left">_141 = panic(const &quot;internal error: entered unreachable code&quot;)</td></tr></table>>];
    bb10__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = _5<br/>StorageLive(_25)<br/>_25 = _4<br/>_23 = Lt(move _24, move _25)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb11__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _5<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = _5<br/>_32 = Eq(const _, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _32, &quot;attempt to divide `{}` by zero&quot;, _31)</td></tr></table>>];
    bb12__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = _5<br/>StorageLive(_62)<br/>_62 = _4<br/>_60 = Ge(move _61, move _62)<br/></td></tr><tr><td align="left">switchInt(move _60)</td></tr></table>>];
    bb13__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_33 = Eq(const _, const -1_i64)<br/>_34 = Eq(_31, const i64::MIN)<br/>_35 = BitAnd(move _33, move _34)<br/></td></tr><tr><td align="left">assert(!move _35, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _31, const _)</td></tr></table>>];
    bb14__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_30 = Div(move _31, const _)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">_28 = &lt;i64 as SafeMath&gt;::safe_sub(move _29, move _30)</td></tr></table>>];
    bb15__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb16__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_36 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb17__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_27 as Continue).0: i64)<br/>_26 = _40<br/>StorageDead(_40)<br/>StorageDead(_27)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = _4<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>_46 = _4<br/>_47 = Eq(const _, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _47, &quot;attempt to divide `{}` by zero&quot;, _46)</td></tr></table>>];
    bb18__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb19__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_48 = Eq(const _, const -1_i64)<br/>_49 = Eq(_46, const i64::MIN)<br/>_50 = BitAnd(move _48, move _49)<br/></td></tr><tr><td align="left">assert(!move _50, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _46, const _)</td></tr></table>>];
    bb21__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_45 = Div(move _46, const _)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">_43 = &lt;i64 as SafeMath&gt;::safe_sub(move _44, move _45)</td></tr></table>>];
    bb22__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">_42 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _43)</td></tr></table>>];
    bb23__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>_51 = discriminant(_42)<br/></td></tr><tr><td align="left">switchInt(move _51)</td></tr></table>>];
    bb24__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_55)<br/>_55 = ((_42 as Continue).0: i64)<br/>_41 = _55<br/>StorageDead(_55)<br/>StorageDead(_42)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = _26<br/>StorageLive(_58)<br/>_58 = _41<br/></td></tr><tr><td align="left">_56 = &lt;i64 as Ord&gt;::min(move _57, move _58)</td></tr></table>>];
    bb25__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_42 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_54)<br/>_54 = _52<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _54)</td></tr></table>>];
    bb26__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_52)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_57)<br/>StorageLive(_59)<br/>_59 = _5<br/>_20 = (move _56, move _59)<br/>StorageDead(_59)<br/>StorageDead(_56)<br/>StorageDead(_41)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_61)<br/>StorageDead(_60)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_66 = _4<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_68 = _4<br/>_69 = Eq(const _, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _69, &quot;attempt to divide `{}` by zero&quot;, _68)</td></tr></table>>];
    bb29__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_61)<br/>StorageDead(_60)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_70 = Eq(const _, const -1_i64)<br/>_71 = Eq(_68, const i64::MIN)<br/>_72 = BitAnd(move _70, move _71)<br/></td></tr><tr><td align="left">assert(!move _72, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _68, const _)</td></tr></table>>];
    bb31__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_67 = Div(move _68, const _)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">_65 = &lt;i64 as SafeMath&gt;::safe_add(move _66, move _67)</td></tr></table>>];
    bb32__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_64 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _65)</td></tr></table>>];
    bb33__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>_73 = discriminant(_64)<br/></td></tr><tr><td align="left">switchInt(move _73)</td></tr></table>>];
    bb34__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageLive(_77)<br/>_77 = ((_64 as Continue).0: i64)<br/>_63 = _77<br/>StorageDead(_77)<br/>StorageDead(_64)<br/>StorageLive(_78)<br/>_78 = _4<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>_80 = _5<br/>StorageLive(_81)<br/>_81 = _63<br/></td></tr><tr><td align="left">_79 = &lt;i64 as Ord&gt;::min(move _80, move _81)</td></tr></table>>];
    bb35__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageLive(_74)<br/>_74 = ((_64 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_76)<br/>_76 = _74<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _76)</td></tr></table>>];
    bb36__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_74)<br/>StorageDead(_64)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_80)<br/>_20 = (move _78, move _79)<br/>StorageDead(_79)<br/>StorageDead(_78)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = _5<br/>StorageLive(_84)<br/>_84 = _4<br/>_82 = Gt(move _83, move _84)<br/></td></tr><tr><td align="left">switchInt(move _82)</td></tr></table>>];
    bb39__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageDead(_83)<br/>StorageDead(_82)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>_88 = _5<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>_90 = _5<br/>_91 = Eq(const _, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _91, &quot;attempt to divide `{}` by zero&quot;, _90)</td></tr></table>>];
    bb40__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageDead(_83)<br/>StorageDead(_82)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>_120 = _5<br/>StorageLive(_121)<br/>_121 = _4<br/>_119 = Le(move _120, move _121)<br/></td></tr><tr><td align="left">switchInt(move _119)</td></tr></table>>];
    bb41__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">_92 = Eq(const _, const -1_i64)<br/>_93 = Eq(_90, const i64::MIN)<br/>_94 = BitAnd(move _92, move _93)<br/></td></tr><tr><td align="left">assert(!move _94, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _90, const _)</td></tr></table>>];
    bb42__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">_89 = Div(move _90, const _)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">_87 = &lt;i64 as SafeMath&gt;::safe_add(move _88, move _89)</td></tr></table>>];
    bb43__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageDead(_88)<br/></td></tr><tr><td align="left">_86 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _87)</td></tr></table>>];
    bb44__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/>_95 = discriminant(_86)<br/></td></tr><tr><td align="left">switchInt(move _95)</td></tr></table>>];
    bb45__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_99)<br/>_99 = ((_86 as Continue).0: i64)<br/>_85 = _99<br/>StorageDead(_99)<br/>StorageDead(_86)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_103 = _4<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>_105 = _4<br/>_106 = Eq(const _, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _106, &quot;attempt to divide `{}` by zero&quot;, _105)</td></tr></table>>];
    bb46__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageLive(_96)<br/>_96 = ((_86 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_98)<br/>_98 = _96<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _98)</td></tr></table>>];
    bb47__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_96)<br/>StorageDead(_86)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">_107 = Eq(const _, const -1_i64)<br/>_108 = Eq(_105, const i64::MIN)<br/>_109 = BitAnd(move _107, move _108)<br/></td></tr><tr><td align="left">assert(!move _109, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _105, const _)</td></tr></table>>];
    bb49__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_104 = Div(move _105, const _)<br/>StorageDead(_105)<br/></td></tr><tr><td align="left">_102 = &lt;i64 as SafeMath&gt;::safe_add(move _103, move _104)</td></tr></table>>];
    bb50__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/>StorageDead(_103)<br/></td></tr><tr><td align="left">_101 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _102)</td></tr></table>>];
    bb51__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>_110 = discriminant(_101)<br/></td></tr><tr><td align="left">switchInt(move _110)</td></tr></table>>];
    bb52__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageLive(_114)<br/>_114 = ((_101 as Continue).0: i64)<br/>_100 = _114<br/>StorageDead(_114)<br/>StorageDead(_101)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>_116 = _85<br/>StorageLive(_117)<br/>_117 = _100<br/></td></tr><tr><td align="left">_115 = &lt;i64 as Ord&gt;::max(move _116, move _117)</td></tr></table>>];
    bb53__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_111)<br/>_111 = ((_101 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_113)<br/>_113 = _111<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _113)</td></tr></table>>];
    bb54__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_113)<br/>StorageDead(_111)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_117)<br/>StorageDead(_116)<br/>StorageLive(_118)<br/>_118 = _5<br/>_20 = (move _115, move _118)<br/>StorageDead(_118)<br/>StorageDead(_115)<br/>StorageDead(_100)<br/>StorageDead(_85)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_120)<br/>StorageDead(_119)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>_125 = _4<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>_127 = _4<br/>_128 = Eq(const _, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _128, &quot;attempt to divide `{}` by zero&quot;, _127)</td></tr></table>>];
    bb57__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_120)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">_129 = Eq(const _, const -1_i64)<br/>_130 = Eq(_127, const i64::MIN)<br/>_131 = BitAnd(move _129, move _130)<br/></td></tr><tr><td align="left">assert(!move _131, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _127, const _)</td></tr></table>>];
    bb59__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">_126 = Div(move _127, const _)<br/>StorageDead(_127)<br/></td></tr><tr><td align="left">_124 = &lt;i64 as SafeMath&gt;::safe_sub(move _125, move _126)</td></tr></table>>];
    bb60__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_126)<br/>StorageDead(_125)<br/></td></tr><tr><td align="left">_123 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _124)</td></tr></table>>];
    bb61__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>_132 = discriminant(_123)<br/></td></tr><tr><td align="left">switchInt(move _132)</td></tr></table>>];
    bb62__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageLive(_136)<br/>_136 = ((_123 as Continue).0: i64)<br/>_122 = _136<br/>StorageDead(_136)<br/>StorageDead(_123)<br/>StorageLive(_137)<br/>_137 = _4<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>_139 = _5<br/>StorageLive(_140)<br/>_140 = _122<br/></td></tr><tr><td align="left">_138 = &lt;i64 as Ord&gt;::max(move _139, move _140)</td></tr></table>>];
    bb63__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_133)<br/>_133 = ((_123 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_135)<br/>_135 = _133<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _135)</td></tr></table>>];
    bb64__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_135)<br/>StorageDead(_133)<br/>StorageDead(_123)<br/>StorageDead(_122)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_140)<br/>StorageDead(_139)<br/>_20 = (move _137, move _138)<br/>StorageDead(_138)<br/>StorageDead(_137)<br/>StorageDead(_122)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = (_20.0: i64)<br/>StorageLive(_19)<br/>_19 = (_20.1: i64)<br/>StorageDead(_20)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>_143 = _18<br/>StorageLive(_144)<br/>_144 = _19<br/>_142 = (move _143, move _144)<br/>StorageDead(_144)<br/>StorageDead(_143)<br/>_0 = std::result::Result::&lt;(i64, i64), error::ErrorCode&gt;::Ok(move _142)<br/>StorageDead(_142)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageLive(_161)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>_163 = _4<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>_165 = _4<br/>_166 = Eq(const _, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _166, &quot;attempt to divide `{}` by zero&quot;, _165)</td></tr></table>>];
    bb68__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageLive(_147)<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>_149 = _4<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>_151 = _4<br/>_152 = Eq(const _, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _152, &quot;attempt to divide `{}` by zero&quot;, _151)</td></tr></table>>];
    bb69__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">_153 = Eq(const _, const -1_i64)<br/>_154 = Eq(_151, const i64::MIN)<br/>_155 = BitAnd(move _153, move _154)<br/></td></tr><tr><td align="left">assert(!move _155, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _151, const _)</td></tr></table>>];
    bb70__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">_150 = Div(move _151, const _)<br/>StorageDead(_151)<br/></td></tr><tr><td align="left">_148 = &lt;i64 as SafeMath&gt;::safe_add(move _149, move _150)</td></tr></table>>];
    bb71__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_150)<br/>StorageDead(_149)<br/></td></tr><tr><td align="left">_147 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _148)</td></tr></table>>];
    bb72__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/>_156 = discriminant(_147)<br/></td></tr><tr><td align="left">switchInt(move _156)</td></tr></table>>];
    bb73__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageLive(_160)<br/>_160 = ((_147 as Continue).0: i64)<br/>_145 = _160<br/>StorageDead(_160)<br/>StorageDead(_147)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb74__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageLive(_157)<br/>_157 = ((_147 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_159)<br/>_159 = _157<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _159)</td></tr></table>>];
    bb75__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>StorageDead(_157)<br/>StorageDead(_147)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb76__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">_167 = Eq(const _, const -1_i64)<br/>_168 = Eq(_165, const i64::MIN)<br/>_169 = BitAnd(move _167, move _168)<br/></td></tr><tr><td align="left">assert(!move _169, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _165, const _)</td></tr></table>>];
    bb77__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">_164 = Div(move _165, const _)<br/>StorageDead(_165)<br/></td></tr><tr><td align="left">_162 = &lt;i64 as SafeMath&gt;::safe_sub(move _163, move _164)</td></tr></table>>];
    bb78__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_164)<br/>StorageDead(_163)<br/></td></tr><tr><td align="left">_161 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _162)</td></tr></table>>];
    bb79__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_162)<br/>_170 = discriminant(_161)<br/></td></tr><tr><td align="left">switchInt(move _170)</td></tr></table>>];
    bb80__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_174)<br/>_174 = ((_161 as Continue).0: i64)<br/>_145 = _174<br/>StorageDead(_174)<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb81__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageLive(_171)<br/>_171 = ((_161 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_173)<br/>_173 = _171<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _173)</td></tr></table>>];
    bb82__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_173)<br/>StorageDead(_171)<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb83__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageLive(_175)<br/>StorageLive(_176)<br/>_176 = _4<br/>StorageLive(_177)<br/>_177 = _145<br/>_175 = (move _176, move _177)<br/>StorageDead(_177)<br/>StorageDead(_176)<br/>_0 = std::result::Result::&lt;(i64, i64), error::ErrorCode&gt;::Ok(move _175)<br/>StorageDead(_175)<br/>StorageDead(_145)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb84__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_145)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb85__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb86__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb87__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb88__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb89__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb90__0_1902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1902 -> bb1__0_1902 [label="return"];
    bb1__0_1902 -> bb2__0_1902 [label="return"];
    bb2__0_1902 -> bb3__0_1902 [label="0"];
    bb2__0_1902 -> bb5__0_1902 [label="1"];
    bb2__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb3__0_1902 -> bb8__0_1902 [label="0"];
    bb3__0_1902 -> bb7__0_1902 [label="otherwise"];
    bb5__0_1902 -> bb6__0_1902 [label="return"];
    bb6__0_1902 -> bb89__0_1902 [label=""];
    bb7__0_1902 -> bb10__0_1902 [label="0"];
    bb7__0_1902 -> bb38__0_1902 [label="1"];
    bb7__0_1902 -> bb9__0_1902 [label="otherwise"];
    bb8__0_1902 -> bb68__0_1902 [label="0"];
    bb8__0_1902 -> bb67__0_1902 [label="1"];
    bb8__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb10__0_1902 -> bb12__0_1902 [label="0"];
    bb10__0_1902 -> bb11__0_1902 [label="otherwise"];
    bb11__0_1902 -> bb13__0_1902 [label="success"];
    bb12__0_1902 -> bb29__0_1902 [label="0"];
    bb12__0_1902 -> bb28__0_1902 [label="otherwise"];
    bb13__0_1902 -> bb14__0_1902 [label="success"];
    bb14__0_1902 -> bb15__0_1902 [label="return"];
    bb15__0_1902 -> bb16__0_1902 [label="return"];
    bb16__0_1902 -> bb17__0_1902 [label="0"];
    bb16__0_1902 -> bb18__0_1902 [label="1"];
    bb16__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb17__0_1902 -> bb20__0_1902 [label="success"];
    bb18__0_1902 -> bb19__0_1902 [label="return"];
    bb19__0_1902 -> bb86__0_1902 [label=""];
    bb20__0_1902 -> bb21__0_1902 [label="success"];
    bb21__0_1902 -> bb22__0_1902 [label="return"];
    bb22__0_1902 -> bb23__0_1902 [label="return"];
    bb23__0_1902 -> bb24__0_1902 [label="0"];
    bb23__0_1902 -> bb25__0_1902 [label="1"];
    bb23__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb24__0_1902 -> bb27__0_1902 [label="return"];
    bb25__0_1902 -> bb26__0_1902 [label="return"];
    bb26__0_1902 -> bb86__0_1902 [label=""];
    bb27__0_1902 -> bb66__0_1902 [label=""];
    bb28__0_1902 -> bb30__0_1902 [label="success"];
    bb29__0_1902 -> bb9__0_1902 [label=""];
    bb30__0_1902 -> bb31__0_1902 [label="success"];
    bb31__0_1902 -> bb32__0_1902 [label="return"];
    bb32__0_1902 -> bb33__0_1902 [label="return"];
    bb33__0_1902 -> bb34__0_1902 [label="0"];
    bb33__0_1902 -> bb35__0_1902 [label="1"];
    bb33__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb34__0_1902 -> bb37__0_1902 [label="return"];
    bb35__0_1902 -> bb36__0_1902 [label="return"];
    bb36__0_1902 -> bb87__0_1902 [label=""];
    bb37__0_1902 -> bb66__0_1902 [label=""];
    bb38__0_1902 -> bb40__0_1902 [label="0"];
    bb38__0_1902 -> bb39__0_1902 [label="otherwise"];
    bb39__0_1902 -> bb41__0_1902 [label="success"];
    bb40__0_1902 -> bb57__0_1902 [label="0"];
    bb40__0_1902 -> bb56__0_1902 [label="otherwise"];
    bb41__0_1902 -> bb42__0_1902 [label="success"];
    bb42__0_1902 -> bb43__0_1902 [label="return"];
    bb43__0_1902 -> bb44__0_1902 [label="return"];
    bb44__0_1902 -> bb45__0_1902 [label="0"];
    bb44__0_1902 -> bb46__0_1902 [label="1"];
    bb44__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb45__0_1902 -> bb48__0_1902 [label="success"];
    bb46__0_1902 -> bb47__0_1902 [label="return"];
    bb47__0_1902 -> bb85__0_1902 [label=""];
    bb48__0_1902 -> bb49__0_1902 [label="success"];
    bb49__0_1902 -> bb50__0_1902 [label="return"];
    bb50__0_1902 -> bb51__0_1902 [label="return"];
    bb51__0_1902 -> bb52__0_1902 [label="0"];
    bb51__0_1902 -> bb53__0_1902 [label="1"];
    bb51__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb52__0_1902 -> bb55__0_1902 [label="return"];
    bb53__0_1902 -> bb54__0_1902 [label="return"];
    bb54__0_1902 -> bb85__0_1902 [label=""];
    bb55__0_1902 -> bb66__0_1902 [label=""];
    bb56__0_1902 -> bb58__0_1902 [label="success"];
    bb57__0_1902 -> bb9__0_1902 [label=""];
    bb58__0_1902 -> bb59__0_1902 [label="success"];
    bb59__0_1902 -> bb60__0_1902 [label="return"];
    bb60__0_1902 -> bb61__0_1902 [label="return"];
    bb61__0_1902 -> bb62__0_1902 [label="0"];
    bb61__0_1902 -> bb63__0_1902 [label="1"];
    bb61__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb62__0_1902 -> bb65__0_1902 [label="return"];
    bb63__0_1902 -> bb64__0_1902 [label="return"];
    bb64__0_1902 -> bb87__0_1902 [label=""];
    bb65__0_1902 -> bb66__0_1902 [label=""];
    bb66__0_1902 -> bb88__0_1902 [label=""];
    bb67__0_1902 -> bb76__0_1902 [label="success"];
    bb68__0_1902 -> bb69__0_1902 [label="success"];
    bb69__0_1902 -> bb70__0_1902 [label="success"];
    bb70__0_1902 -> bb71__0_1902 [label="return"];
    bb71__0_1902 -> bb72__0_1902 [label="return"];
    bb72__0_1902 -> bb73__0_1902 [label="0"];
    bb72__0_1902 -> bb74__0_1902 [label="1"];
    bb72__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb73__0_1902 -> bb83__0_1902 [label=""];
    bb74__0_1902 -> bb75__0_1902 [label="return"];
    bb75__0_1902 -> bb84__0_1902 [label=""];
    bb76__0_1902 -> bb77__0_1902 [label="success"];
    bb77__0_1902 -> bb78__0_1902 [label="return"];
    bb78__0_1902 -> bb79__0_1902 [label="return"];
    bb79__0_1902 -> bb80__0_1902 [label="0"];
    bb79__0_1902 -> bb81__0_1902 [label="1"];
    bb79__0_1902 -> bb4__0_1902 [label="otherwise"];
    bb80__0_1902 -> bb83__0_1902 [label=""];
    bb81__0_1902 -> bb82__0_1902 [label="return"];
    bb82__0_1902 -> bb84__0_1902 [label=""];
    bb83__0_1902 -> bb90__0_1902 [label=""];
    bb84__0_1902 -> bb89__0_1902 [label=""];
    bb85__0_1902 -> bb87__0_1902 [label=""];
    bb86__0_1902 -> bb87__0_1902 [label=""];
    bb87__0_1902 -> bb88__0_1902 [label=""];
    bb88__0_1902 -> bb89__0_1902 [label=""];
    bb89__0_1902 -> bb90__0_1902 [label=""];
}
