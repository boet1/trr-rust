// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1190:10: 1190:25>::serialize` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1190:10: 1190:25>::serialize(_1: &Order, _2: &mut W) -> std::result::Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _5: std::result::Result<(), std::io::Error>;
    let mut _6: &u64;
    let _7: &u64;
    let mut _8: &mut W;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: &u64;
    let _18: &u64;
    let mut _19: &mut W;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _24: ();
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _27: std::result::Result<(), std::io::Error>;
    let mut _28: &u64;
    let _29: &u64;
    let mut _30: &mut W;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _35: ();
    let _36: ();
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _38: std::result::Result<(), std::io::Error>;
    let mut _39: &u64;
    let _40: &u64;
    let mut _41: &mut W;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _46: ();
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _49: std::result::Result<(), std::io::Error>;
    let mut _50: &u64;
    let _51: &u64;
    let mut _52: &mut W;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _57: ();
    let _58: ();
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _60: std::result::Result<(), std::io::Error>;
    let mut _61: &u64;
    let _62: &u64;
    let mut _63: &mut W;
    let mut _64: isize;
    let _65: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _68: ();
    let _69: ();
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _71: std::result::Result<(), std::io::Error>;
    let mut _72: &i64;
    let _73: &i64;
    let mut _74: &mut W;
    let mut _75: isize;
    let _76: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _79: ();
    let _80: ();
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _82: std::result::Result<(), std::io::Error>;
    let mut _83: &i64;
    let _84: &i64;
    let mut _85: &mut W;
    let mut _86: isize;
    let _87: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _90: ();
    let _91: ();
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _93: std::result::Result<(), std::io::Error>;
    let mut _94: &i64;
    let _95: &i64;
    let mut _96: &mut W;
    let mut _97: isize;
    let _98: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _101: ();
    let _102: ();
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _104: std::result::Result<(), std::io::Error>;
    let mut _105: &i32;
    let _106: &i32;
    let mut _107: &mut W;
    let mut _108: isize;
    let _109: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _112: ();
    let _113: ();
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _115: std::result::Result<(), std::io::Error>;
    let mut _116: &u32;
    let _117: &u32;
    let mut _118: &mut W;
    let mut _119: isize;
    let _120: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _123: ();
    let _124: ();
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _126: std::result::Result<(), std::io::Error>;
    let mut _127: &u16;
    let _128: &u16;
    let mut _129: &mut W;
    let mut _130: isize;
    let _131: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _134: ();
    let _135: ();
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _137: std::result::Result<(), std::io::Error>;
    let mut _138: &state::user::OrderStatus;
    let _139: &state::user::OrderStatus;
    let mut _140: &mut W;
    let mut _141: isize;
    let _142: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _145: ();
    let _146: ();
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _148: std::result::Result<(), std::io::Error>;
    let mut _149: &state::user::OrderType;
    let _150: &state::user::OrderType;
    let mut _151: &mut W;
    let mut _152: isize;
    let _153: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _156: ();
    let _157: ();
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _159: std::result::Result<(), std::io::Error>;
    let mut _160: &state::user::MarketType;
    let _161: &state::user::MarketType;
    let mut _162: &mut W;
    let mut _163: isize;
    let _164: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _167: ();
    let _168: ();
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _170: std::result::Result<(), std::io::Error>;
    let mut _171: &u8;
    let _172: &u8;
    let mut _173: &mut W;
    let mut _174: isize;
    let _175: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _176: !;
    let mut _177: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _178: ();
    let _179: ();
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _181: std::result::Result<(), std::io::Error>;
    let mut _182: &controller::position::PositionDirection;
    let _183: &controller::position::PositionDirection;
    let mut _184: &mut W;
    let mut _185: isize;
    let _186: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _187: !;
    let mut _188: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _189: ();
    let _190: ();
    let mut _191: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _192: std::result::Result<(), std::io::Error>;
    let mut _193: &controller::position::PositionDirection;
    let _194: &controller::position::PositionDirection;
    let mut _195: &mut W;
    let mut _196: isize;
    let _197: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _200: ();
    let _201: ();
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _203: std::result::Result<(), std::io::Error>;
    let mut _204: &bool;
    let _205: &bool;
    let mut _206: &mut W;
    let mut _207: isize;
    let _208: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _209: !;
    let mut _210: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _211: ();
    let _212: ();
    let mut _213: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _214: std::result::Result<(), std::io::Error>;
    let mut _215: &bool;
    let _216: &bool;
    let mut _217: &mut W;
    let mut _218: isize;
    let _219: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _220: !;
    let mut _221: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _222: ();
    let _223: ();
    let mut _224: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _225: std::result::Result<(), std::io::Error>;
    let mut _226: &bool;
    let _227: &bool;
    let mut _228: &mut W;
    let mut _229: isize;
    let _230: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _233: ();
    let _234: ();
    let mut _235: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _236: std::result::Result<(), std::io::Error>;
    let mut _237: &state::user::OrderTriggerCondition;
    let _238: &state::user::OrderTriggerCondition;
    let mut _239: &mut W;
    let mut _240: isize;
    let _241: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _242: !;
    let mut _243: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _244: ();
    let _245: ();
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _247: std::result::Result<(), std::io::Error>;
    let mut _248: &u8;
    let _249: &u8;
    let mut _250: &mut W;
    let mut _251: isize;
    let _252: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _253: !;
    let mut _254: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _255: ();
    let _256: ();
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _258: std::result::Result<(), std::io::Error>;
    let mut _259: &u8;
    let _260: &u8;
    let mut _261: &mut W;
    let mut _262: isize;
    let _263: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _264: !;
    let mut _265: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _266: ();
    let _267: ();
    let mut _268: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _269: std::result::Result<(), std::io::Error>;
    let mut _270: &u8;
    let _271: &u8;
    let mut _272: &mut W;
    let mut _273: isize;
    let _274: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _275: !;
    let mut _276: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _277: ();
    let _278: ();
    let mut _279: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _280: std::result::Result<(), std::io::Error>;
    let mut _281: &[u8; 1];
    let _282: &[u8; 1];
    let mut _283: &mut W;
    let mut _284: isize;
    let _285: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _286: !;
    let mut _287: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _288: ();
    let mut _289: ();
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _32;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _35;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _43;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _46;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _54;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _57;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _65;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _68;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _76;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _79;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _87;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _90;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _98;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _101;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _109;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _112;
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _120;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _123;
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _131;
        scope 46 {
        }
    }
    scope 47 {
        debug val => _134;
        scope 48 {
        }
    }
    scope 49 {
        debug residual => _142;
        scope 50 {
        }
    }
    scope 51 {
        debug val => _145;
        scope 52 {
        }
    }
    scope 53 {
        debug residual => _153;
        scope 54 {
        }
    }
    scope 55 {
        debug val => _156;
        scope 56 {
        }
    }
    scope 57 {
        debug residual => _164;
        scope 58 {
        }
    }
    scope 59 {
        debug val => _167;
        scope 60 {
        }
    }
    scope 61 {
        debug residual => _175;
        scope 62 {
        }
    }
    scope 63 {
        debug val => _178;
        scope 64 {
        }
    }
    scope 65 {
        debug residual => _186;
        scope 66 {
        }
    }
    scope 67 {
        debug val => _189;
        scope 68 {
        }
    }
    scope 69 {
        debug residual => _197;
        scope 70 {
        }
    }
    scope 71 {
        debug val => _200;
        scope 72 {
        }
    }
    scope 73 {
        debug residual => _208;
        scope 74 {
        }
    }
    scope 75 {
        debug val => _211;
        scope 76 {
        }
    }
    scope 77 {
        debug residual => _219;
        scope 78 {
        }
    }
    scope 79 {
        debug val => _222;
        scope 80 {
        }
    }
    scope 81 {
        debug residual => _230;
        scope 82 {
        }
    }
    scope 83 {
        debug val => _233;
        scope 84 {
        }
    }
    scope 85 {
        debug residual => _241;
        scope 86 {
        }
    }
    scope 87 {
        debug val => _244;
        scope 88 {
        }
    }
    scope 89 {
        debug residual => _252;
        scope 90 {
        }
    }
    scope 91 {
        debug val => _255;
        scope 92 {
        }
    }
    scope 93 {
        debug residual => _263;
        scope 94 {
        }
    }
    scope 95 {
        debug val => _266;
        scope 96 {
        }
    }
    scope 97 {
        debug residual => _274;
        scope 98 {
        }
    }
    scope 99 {
        debug val => _277;
        scope 100 {
        }
    }
    scope 101 {
        debug residual => _285;
        scope 102 {
        }
    }
    scope 103 {
        debug val => _288;
        scope 104 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: u64);
        _6 = &(*_7);
        StorageLive(_8);
        _8 = &mut (*_2);
        _5 = <u64 as BorshSerialize>::serialize::<W>(move _6, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<(), std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb133];
    }

    bb2: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_4 as Continue).0: ());
        _3 = _13;
        StorageDead(_13);
        _290 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_1).1: u64);
        _17 = &(*_18);
        StorageLive(_19);
        _19 = &mut (*_2);
        _16 = <u64 as BorshSerialize>::serialize::<W>(move _17, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb159];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _392 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb132;
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<(), std::io::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb133];
    }

    bb8: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_15 as Continue).0: ());
        _14 = _24;
        StorageDead(_24);
        _292 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_1).2: u64);
        _28 = &(*_29);
        StorageLive(_30);
        _30 = &mut (*_2);
        _27 = <u64 as BorshSerialize>::serialize::<W>(move _28, move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb11, unwind: bb158];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _390 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb132;
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <std::result::Result<(), std::io::Error> as Try>::branch(move _27) -> [return: bb13, unwind: bb133];
    }

    bb13: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_26 as Continue).0: ());
        _25 = _35;
        StorageDead(_35);
        _294 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &((*_1).3: u64);
        _39 = &(*_40);
        StorageLive(_41);
        _41 = &mut (*_2);
        _38 = <u64 as BorshSerialize>::serialize::<W>(move _39, move _41) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb16, unwind: bb157];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        _388 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb132;
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <std::result::Result<(), std::io::Error> as Try>::branch(move _38) -> [return: bb18, unwind: bb133];
    }

    bb18: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_37 as Continue).0: ());
        _36 = _46;
        StorageDead(_46);
        _296 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_1).4: u64);
        _50 = &(*_51);
        StorageLive(_52);
        _52 = &mut (*_2);
        _49 = <u64 as BorshSerialize>::serialize::<W>(move _50, move _52) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_43);
        _43 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _45) -> [return: bb21, unwind: bb156];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_43);
        _386 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb132;
    }

    bb22: {
        StorageDead(_52);
        StorageDead(_50);
        _48 = <std::result::Result<(), std::io::Error> as Try>::branch(move _49) -> [return: bb23, unwind: bb133];
    }

    bb23: {
        StorageDead(_49);
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_57);
        _57 = ((_48 as Continue).0: ());
        _47 = _57;
        StorageDead(_57);
        _298 = discriminant(_48);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &((*_1).5: u64);
        _61 = &(*_62);
        StorageLive(_63);
        _63 = &mut (*_2);
        _60 = <u64 as BorshSerialize>::serialize::<W>(move _61, move _63) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_54);
        _54 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_56);
        _56 = move _54;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _56) -> [return: bb26, unwind: bb155];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_54);
        _384 = discriminant(_48);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb132;
    }

    bb27: {
        StorageDead(_63);
        StorageDead(_61);
        _59 = <std::result::Result<(), std::io::Error> as Try>::branch(move _60) -> [return: bb28, unwind: bb133];
    }

    bb28: {
        StorageDead(_60);
        _64 = discriminant(_59);
        switchInt(move _64) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_68);
        _68 = ((_59 as Continue).0: ());
        _58 = _68;
        StorageDead(_68);
        _300 = discriminant(_59);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &((*_1).6: i64);
        _72 = &(*_73);
        StorageLive(_74);
        _74 = &mut (*_2);
        _71 = <i64 as BorshSerialize>::serialize::<W>(move _72, move _74) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_65);
        _65 = move ((_59 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_67);
        _67 = move _65;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _67) -> [return: bb31, unwind: bb154];
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_65);
        _382 = discriminant(_59);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb132;
    }

    bb32: {
        StorageDead(_74);
        StorageDead(_72);
        _70 = <std::result::Result<(), std::io::Error> as Try>::branch(move _71) -> [return: bb33, unwind: bb133];
    }

    bb33: {
        StorageDead(_71);
        _75 = discriminant(_70);
        switchInt(move _75) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_79);
        _79 = ((_70 as Continue).0: ());
        _69 = _79;
        StorageDead(_79);
        _302 = discriminant(_70);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &((*_1).7: i64);
        _83 = &(*_84);
        StorageLive(_85);
        _85 = &mut (*_2);
        _82 = <i64 as BorshSerialize>::serialize::<W>(move _83, move _85) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_76);
        _76 = move ((_70 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _78) -> [return: bb36, unwind: bb153];
    }

    bb36: {
        StorageDead(_78);
        StorageDead(_76);
        _380 = discriminant(_70);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb132;
    }

    bb37: {
        StorageDead(_85);
        StorageDead(_83);
        _81 = <std::result::Result<(), std::io::Error> as Try>::branch(move _82) -> [return: bb38, unwind: bb133];
    }

    bb38: {
        StorageDead(_82);
        _86 = discriminant(_81);
        switchInt(move _86) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_90);
        _90 = ((_81 as Continue).0: ());
        _80 = _90;
        StorageDead(_90);
        _304 = discriminant(_81);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &((*_1).8: i64);
        _94 = &(*_95);
        StorageLive(_96);
        _96 = &mut (*_2);
        _93 = <i64 as BorshSerialize>::serialize::<W>(move _94, move _96) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_87);
        _87 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_89);
        _89 = move _87;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _89) -> [return: bb41, unwind: bb152];
    }

    bb41: {
        StorageDead(_89);
        StorageDead(_87);
        _378 = discriminant(_81);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb132;
    }

    bb42: {
        StorageDead(_96);
        StorageDead(_94);
        _92 = <std::result::Result<(), std::io::Error> as Try>::branch(move _93) -> [return: bb43, unwind: bb133];
    }

    bb43: {
        StorageDead(_93);
        _97 = discriminant(_92);
        switchInt(move _97) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_101);
        _101 = ((_92 as Continue).0: ());
        _91 = _101;
        StorageDead(_101);
        _306 = discriminant(_92);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &((*_1).9: i32);
        _105 = &(*_106);
        StorageLive(_107);
        _107 = &mut (*_2);
        _104 = <i32 as BorshSerialize>::serialize::<W>(move _105, move _107) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_98);
        _98 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_100);
        _100 = move _98;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _100) -> [return: bb46, unwind: bb151];
    }

    bb46: {
        StorageDead(_100);
        StorageDead(_98);
        _376 = discriminant(_92);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb132;
    }

    bb47: {
        StorageDead(_107);
        StorageDead(_105);
        _103 = <std::result::Result<(), std::io::Error> as Try>::branch(move _104) -> [return: bb48, unwind: bb133];
    }

    bb48: {
        StorageDead(_104);
        _108 = discriminant(_103);
        switchInt(move _108) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_112);
        _112 = ((_103 as Continue).0: ());
        _102 = _112;
        StorageDead(_112);
        _308 = discriminant(_103);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &((*_1).10: u32);
        _116 = &(*_117);
        StorageLive(_118);
        _118 = &mut (*_2);
        _115 = <u32 as BorshSerialize>::serialize::<W>(move _116, move _118) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_109);
        _109 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_111);
        _111 = move _109;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _111) -> [return: bb51, unwind: bb150];
    }

    bb51: {
        StorageDead(_111);
        StorageDead(_109);
        _374 = discriminant(_103);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb132;
    }

    bb52: {
        StorageDead(_118);
        StorageDead(_116);
        _114 = <std::result::Result<(), std::io::Error> as Try>::branch(move _115) -> [return: bb53, unwind: bb133];
    }

    bb53: {
        StorageDead(_115);
        _119 = discriminant(_114);
        switchInt(move _119) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_123);
        _123 = ((_114 as Continue).0: ());
        _113 = _123;
        StorageDead(_123);
        _310 = discriminant(_114);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &((*_1).11: u16);
        _127 = &(*_128);
        StorageLive(_129);
        _129 = &mut (*_2);
        _126 = <u16 as BorshSerialize>::serialize::<W>(move _127, move _129) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_120);
        _120 = move ((_114 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_122);
        _122 = move _120;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _122) -> [return: bb56, unwind: bb149];
    }

    bb56: {
        StorageDead(_122);
        StorageDead(_120);
        _372 = discriminant(_114);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb132;
    }

    bb57: {
        StorageDead(_129);
        StorageDead(_127);
        _125 = <std::result::Result<(), std::io::Error> as Try>::branch(move _126) -> [return: bb58, unwind: bb133];
    }

    bb58: {
        StorageDead(_126);
        _130 = discriminant(_125);
        switchInt(move _130) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_134);
        _134 = ((_125 as Continue).0: ());
        _124 = _134;
        StorageDead(_134);
        _312 = discriminant(_125);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &((*_1).12: state::user::OrderStatus);
        _138 = &(*_139);
        StorageLive(_140);
        _140 = &mut (*_2);
        _137 = <OrderStatus as BorshSerialize>::serialize::<W>(move _138, move _140) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_131);
        _131 = move ((_125 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_133);
        _133 = move _131;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _133) -> [return: bb61, unwind: bb148];
    }

    bb61: {
        StorageDead(_133);
        StorageDead(_131);
        _370 = discriminant(_125);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb132;
    }

    bb62: {
        StorageDead(_140);
        StorageDead(_138);
        _136 = <std::result::Result<(), std::io::Error> as Try>::branch(move _137) -> [return: bb63, unwind: bb133];
    }

    bb63: {
        StorageDead(_137);
        _141 = discriminant(_136);
        switchInt(move _141) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_145);
        _145 = ((_136 as Continue).0: ());
        _135 = _145;
        StorageDead(_145);
        _314 = discriminant(_136);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &((*_1).13: state::user::OrderType);
        _149 = &(*_150);
        StorageLive(_151);
        _151 = &mut (*_2);
        _148 = <state::user::OrderType as BorshSerialize>::serialize::<W>(move _149, move _151) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_142);
        _142 = move ((_136 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_144);
        _144 = move _142;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _144) -> [return: bb66, unwind: bb147];
    }

    bb66: {
        StorageDead(_144);
        StorageDead(_142);
        _368 = discriminant(_136);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb132;
    }

    bb67: {
        StorageDead(_151);
        StorageDead(_149);
        _147 = <std::result::Result<(), std::io::Error> as Try>::branch(move _148) -> [return: bb68, unwind: bb133];
    }

    bb68: {
        StorageDead(_148);
        _152 = discriminant(_147);
        switchInt(move _152) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_156);
        _156 = ((_147 as Continue).0: ());
        _146 = _156;
        StorageDead(_156);
        _316 = discriminant(_147);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &((*_1).14: state::user::MarketType);
        _160 = &(*_161);
        StorageLive(_162);
        _162 = &mut (*_2);
        _159 = <state::user::MarketType as BorshSerialize>::serialize::<W>(move _160, move _162) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_153);
        _153 = move ((_147 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_155);
        _155 = move _153;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _155) -> [return: bb71, unwind: bb146];
    }

    bb71: {
        StorageDead(_155);
        StorageDead(_153);
        _366 = discriminant(_147);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb132;
    }

    bb72: {
        StorageDead(_162);
        StorageDead(_160);
        _158 = <std::result::Result<(), std::io::Error> as Try>::branch(move _159) -> [return: bb73, unwind: bb133];
    }

    bb73: {
        StorageDead(_159);
        _163 = discriminant(_158);
        switchInt(move _163) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_167);
        _167 = ((_158 as Continue).0: ());
        _157 = _167;
        StorageDead(_167);
        _318 = discriminant(_158);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &((*_1).15: u8);
        _171 = &(*_172);
        StorageLive(_173);
        _173 = &mut (*_2);
        _170 = <u8 as BorshSerialize>::serialize::<W>(move _171, move _173) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_164);
        _164 = move ((_158 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_166);
        _166 = move _164;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _166) -> [return: bb76, unwind: bb145];
    }

    bb76: {
        StorageDead(_166);
        StorageDead(_164);
        _364 = discriminant(_158);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb132;
    }

    bb77: {
        StorageDead(_173);
        StorageDead(_171);
        _169 = <std::result::Result<(), std::io::Error> as Try>::branch(move _170) -> [return: bb78, unwind: bb133];
    }

    bb78: {
        StorageDead(_170);
        _174 = discriminant(_169);
        switchInt(move _174) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_178);
        _178 = ((_169 as Continue).0: ());
        _168 = _178;
        StorageDead(_178);
        _320 = discriminant(_169);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &((*_1).16: controller::position::PositionDirection);
        _182 = &(*_183);
        StorageLive(_184);
        _184 = &mut (*_2);
        _181 = <controller::position::PositionDirection as BorshSerialize>::serialize::<W>(move _182, move _184) -> [return: bb82, unwind continue];
    }

    bb80: {
        StorageLive(_175);
        _175 = move ((_169 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_177);
        _177 = move _175;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _177) -> [return: bb81, unwind: bb144];
    }

    bb81: {
        StorageDead(_177);
        StorageDead(_175);
        _362 = discriminant(_169);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb132;
    }

    bb82: {
        StorageDead(_184);
        StorageDead(_182);
        _180 = <std::result::Result<(), std::io::Error> as Try>::branch(move _181) -> [return: bb83, unwind: bb133];
    }

    bb83: {
        StorageDead(_181);
        _185 = discriminant(_180);
        switchInt(move _185) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_189);
        _189 = ((_180 as Continue).0: ());
        _179 = _189;
        StorageDead(_189);
        _322 = discriminant(_180);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &((*_1).17: controller::position::PositionDirection);
        _193 = &(*_194);
        StorageLive(_195);
        _195 = &mut (*_2);
        _192 = <controller::position::PositionDirection as BorshSerialize>::serialize::<W>(move _193, move _195) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_186);
        _186 = move ((_180 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_188);
        _188 = move _186;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _188) -> [return: bb86, unwind: bb143];
    }

    bb86: {
        StorageDead(_188);
        StorageDead(_186);
        _360 = discriminant(_180);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb132;
    }

    bb87: {
        StorageDead(_195);
        StorageDead(_193);
        _191 = <std::result::Result<(), std::io::Error> as Try>::branch(move _192) -> [return: bb88, unwind: bb133];
    }

    bb88: {
        StorageDead(_192);
        _196 = discriminant(_191);
        switchInt(move _196) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        StorageLive(_200);
        _200 = ((_191 as Continue).0: ());
        _190 = _200;
        StorageDead(_200);
        _324 = discriminant(_191);
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &((*_1).18: bool);
        _204 = &(*_205);
        StorageLive(_206);
        _206 = &mut (*_2);
        _203 = <bool as BorshSerialize>::serialize::<W>(move _204, move _206) -> [return: bb92, unwind continue];
    }

    bb90: {
        StorageLive(_197);
        _197 = move ((_191 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _199) -> [return: bb91, unwind: bb142];
    }

    bb91: {
        StorageDead(_199);
        StorageDead(_197);
        _358 = discriminant(_191);
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb132;
    }

    bb92: {
        StorageDead(_206);
        StorageDead(_204);
        _202 = <std::result::Result<(), std::io::Error> as Try>::branch(move _203) -> [return: bb93, unwind: bb133];
    }

    bb93: {
        StorageDead(_203);
        _207 = discriminant(_202);
        switchInt(move _207) -> [0: bb94, 1: bb95, otherwise: bb4];
    }

    bb94: {
        StorageLive(_211);
        _211 = ((_202 as Continue).0: ());
        _201 = _211;
        StorageDead(_211);
        _326 = discriminant(_202);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_201);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &((*_1).19: bool);
        _215 = &(*_216);
        StorageLive(_217);
        _217 = &mut (*_2);
        _214 = <bool as BorshSerialize>::serialize::<W>(move _215, move _217) -> [return: bb97, unwind continue];
    }

    bb95: {
        StorageLive(_208);
        _208 = move ((_202 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_210);
        _210 = move _208;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _210) -> [return: bb96, unwind: bb141];
    }

    bb96: {
        StorageDead(_210);
        StorageDead(_208);
        _356 = discriminant(_202);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb132;
    }

    bb97: {
        StorageDead(_217);
        StorageDead(_215);
        _213 = <std::result::Result<(), std::io::Error> as Try>::branch(move _214) -> [return: bb98, unwind: bb133];
    }

    bb98: {
        StorageDead(_214);
        _218 = discriminant(_213);
        switchInt(move _218) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        StorageLive(_222);
        _222 = ((_213 as Continue).0: ());
        _212 = _222;
        StorageDead(_222);
        _328 = discriminant(_213);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_212);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &((*_1).20: bool);
        _226 = &(*_227);
        StorageLive(_228);
        _228 = &mut (*_2);
        _225 = <bool as BorshSerialize>::serialize::<W>(move _226, move _228) -> [return: bb102, unwind continue];
    }

    bb100: {
        StorageLive(_219);
        _219 = move ((_213 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_221);
        _221 = move _219;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _221) -> [return: bb101, unwind: bb140];
    }

    bb101: {
        StorageDead(_221);
        StorageDead(_219);
        _354 = discriminant(_213);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_212);
        goto -> bb132;
    }

    bb102: {
        StorageDead(_228);
        StorageDead(_226);
        _224 = <std::result::Result<(), std::io::Error> as Try>::branch(move _225) -> [return: bb103, unwind: bb133];
    }

    bb103: {
        StorageDead(_225);
        _229 = discriminant(_224);
        switchInt(move _229) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_233);
        _233 = ((_224 as Continue).0: ());
        _223 = _233;
        StorageDead(_233);
        _330 = discriminant(_224);
        StorageDead(_227);
        StorageDead(_224);
        StorageDead(_223);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &((*_1).21: state::user::OrderTriggerCondition);
        _237 = &(*_238);
        StorageLive(_239);
        _239 = &mut (*_2);
        _236 = <OrderTriggerCondition as BorshSerialize>::serialize::<W>(move _237, move _239) -> [return: bb107, unwind continue];
    }

    bb105: {
        StorageLive(_230);
        _230 = move ((_224 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_232);
        _232 = move _230;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _232) -> [return: bb106, unwind: bb139];
    }

    bb106: {
        StorageDead(_232);
        StorageDead(_230);
        _352 = discriminant(_224);
        StorageDead(_227);
        StorageDead(_224);
        StorageDead(_223);
        goto -> bb132;
    }

    bb107: {
        StorageDead(_239);
        StorageDead(_237);
        _235 = <std::result::Result<(), std::io::Error> as Try>::branch(move _236) -> [return: bb108, unwind: bb133];
    }

    bb108: {
        StorageDead(_236);
        _240 = discriminant(_235);
        switchInt(move _240) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        StorageLive(_244);
        _244 = ((_235 as Continue).0: ());
        _234 = _244;
        StorageDead(_244);
        _332 = discriminant(_235);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_234);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &((*_1).22: u8);
        _248 = &(*_249);
        StorageLive(_250);
        _250 = &mut (*_2);
        _247 = <u8 as BorshSerialize>::serialize::<W>(move _248, move _250) -> [return: bb112, unwind continue];
    }

    bb110: {
        StorageLive(_241);
        _241 = move ((_235 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_243);
        _243 = move _241;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _243) -> [return: bb111, unwind: bb138];
    }

    bb111: {
        StorageDead(_243);
        StorageDead(_241);
        _350 = discriminant(_235);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_234);
        goto -> bb132;
    }

    bb112: {
        StorageDead(_250);
        StorageDead(_248);
        _246 = <std::result::Result<(), std::io::Error> as Try>::branch(move _247) -> [return: bb113, unwind: bb133];
    }

    bb113: {
        StorageDead(_247);
        _251 = discriminant(_246);
        switchInt(move _251) -> [0: bb114, 1: bb115, otherwise: bb4];
    }

    bb114: {
        StorageLive(_255);
        _255 = ((_246 as Continue).0: ());
        _245 = _255;
        StorageDead(_255);
        _334 = discriminant(_246);
        StorageDead(_249);
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &((*_1).23: u8);
        _259 = &(*_260);
        StorageLive(_261);
        _261 = &mut (*_2);
        _258 = <u8 as BorshSerialize>::serialize::<W>(move _259, move _261) -> [return: bb117, unwind continue];
    }

    bb115: {
        StorageLive(_252);
        _252 = move ((_246 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_254);
        _254 = move _252;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _254) -> [return: bb116, unwind: bb137];
    }

    bb116: {
        StorageDead(_254);
        StorageDead(_252);
        _348 = discriminant(_246);
        StorageDead(_249);
        StorageDead(_246);
        StorageDead(_245);
        goto -> bb132;
    }

    bb117: {
        StorageDead(_261);
        StorageDead(_259);
        _257 = <std::result::Result<(), std::io::Error> as Try>::branch(move _258) -> [return: bb118, unwind: bb133];
    }

    bb118: {
        StorageDead(_258);
        _262 = discriminant(_257);
        switchInt(move _262) -> [0: bb119, 1: bb120, otherwise: bb4];
    }

    bb119: {
        StorageLive(_266);
        _266 = ((_257 as Continue).0: ());
        _256 = _266;
        StorageDead(_266);
        _336 = discriminant(_257);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = &((*_1).24: u8);
        _270 = &(*_271);
        StorageLive(_272);
        _272 = &mut (*_2);
        _269 = <u8 as BorshSerialize>::serialize::<W>(move _270, move _272) -> [return: bb122, unwind continue];
    }

    bb120: {
        StorageLive(_263);
        _263 = move ((_257 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_265);
        _265 = move _263;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _265) -> [return: bb121, unwind: bb136];
    }

    bb121: {
        StorageDead(_265);
        StorageDead(_263);
        _346 = discriminant(_257);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        goto -> bb132;
    }

    bb122: {
        StorageDead(_272);
        StorageDead(_270);
        _268 = <std::result::Result<(), std::io::Error> as Try>::branch(move _269) -> [return: bb123, unwind: bb133];
    }

    bb123: {
        StorageDead(_269);
        _273 = discriminant(_268);
        switchInt(move _273) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_277);
        _277 = ((_268 as Continue).0: ());
        _267 = _277;
        StorageDead(_277);
        _338 = discriminant(_268);
        StorageDead(_271);
        StorageDead(_268);
        StorageDead(_267);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = &((*_1).25: [u8; 1]);
        _281 = &(*_282);
        StorageLive(_283);
        _283 = &mut (*_2);
        _280 = <[u8; 1] as BorshSerialize>::serialize::<W>(move _281, move _283) -> [return: bb127, unwind continue];
    }

    bb125: {
        StorageLive(_274);
        _274 = move ((_268 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_276);
        _276 = move _274;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _276) -> [return: bb126, unwind: bb135];
    }

    bb126: {
        StorageDead(_276);
        StorageDead(_274);
        _344 = discriminant(_268);
        StorageDead(_271);
        StorageDead(_268);
        StorageDead(_267);
        goto -> bb132;
    }

    bb127: {
        StorageDead(_283);
        StorageDead(_281);
        _279 = <std::result::Result<(), std::io::Error> as Try>::branch(move _280) -> [return: bb128, unwind: bb133];
    }

    bb128: {
        StorageDead(_280);
        _284 = discriminant(_279);
        switchInt(move _284) -> [0: bb129, 1: bb130, otherwise: bb4];
    }

    bb129: {
        StorageLive(_288);
        _288 = ((_279 as Continue).0: ());
        _278 = _288;
        StorageDead(_288);
        _340 = discriminant(_279);
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_289);
        _289 = ();
        _0 = std::result::Result::<(), std::io::Error>::Ok(move _289);
        StorageDead(_289);
        goto -> bb132;
    }

    bb130: {
        StorageLive(_285);
        _285 = move ((_279 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_287);
        _287 = move _285;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _287) -> [return: bb131, unwind: bb134];
    }

    bb131: {
        StorageDead(_287);
        StorageDead(_285);
        _342 = discriminant(_279);
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_278);
        goto -> bb132;
    }

    bb132: {
        return;
    }

    bb133 (cleanup): {
        resume;
    }

    bb134 (cleanup): {
        _394 = discriminant(_279);
        goto -> bb133;
    }

    bb135 (cleanup): {
        _395 = discriminant(_268);
        goto -> bb133;
    }

    bb136 (cleanup): {
        _396 = discriminant(_257);
        goto -> bb133;
    }

    bb137 (cleanup): {
        _397 = discriminant(_246);
        goto -> bb133;
    }

    bb138 (cleanup): {
        _398 = discriminant(_235);
        goto -> bb133;
    }

    bb139 (cleanup): {
        _399 = discriminant(_224);
        goto -> bb133;
    }

    bb140 (cleanup): {
        _400 = discriminant(_213);
        goto -> bb133;
    }

    bb141 (cleanup): {
        _401 = discriminant(_202);
        goto -> bb133;
    }

    bb142 (cleanup): {
        _402 = discriminant(_191);
        goto -> bb133;
    }

    bb143 (cleanup): {
        _403 = discriminant(_180);
        goto -> bb133;
    }

    bb144 (cleanup): {
        _404 = discriminant(_169);
        goto -> bb133;
    }

    bb145 (cleanup): {
        _405 = discriminant(_158);
        goto -> bb133;
    }

    bb146 (cleanup): {
        _406 = discriminant(_147);
        goto -> bb133;
    }

    bb147 (cleanup): {
        _407 = discriminant(_136);
        goto -> bb133;
    }

    bb148 (cleanup): {
        _408 = discriminant(_125);
        goto -> bb133;
    }

    bb149 (cleanup): {
        _409 = discriminant(_114);
        goto -> bb133;
    }

    bb150 (cleanup): {
        _410 = discriminant(_103);
        goto -> bb133;
    }

    bb151 (cleanup): {
        _411 = discriminant(_92);
        goto -> bb133;
    }

    bb152 (cleanup): {
        _412 = discriminant(_81);
        goto -> bb133;
    }

    bb153 (cleanup): {
        _413 = discriminant(_70);
        goto -> bb133;
    }

    bb154 (cleanup): {
        _414 = discriminant(_59);
        goto -> bb133;
    }

    bb155 (cleanup): {
        _415 = discriminant(_48);
        goto -> bb133;
    }

    bb156 (cleanup): {
        _416 = discriminant(_37);
        goto -> bb133;
    }

    bb157 (cleanup): {
        _417 = discriminant(_26);
        goto -> bb133;
    }

    bb158 (cleanup): {
        _418 = discriminant(_15);
        goto -> bb133;
    }

    bb159 (cleanup): {
        _419 = discriminant(_4);
        goto -> bb133;
    }
}
