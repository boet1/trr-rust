// MIR for `get_spot_maker_orders_info` after PreCodegen

fn get_spot_maker_orders_info(_1: &PerpMarketMap<'_>, _2: &SpotMarketMap<'_>, _3: &mut OracleMap<'_>, _4: &UserMap<'_>, _5: &anchor_lang::prelude::Pubkey, _6: &Order, _7: &mut Option<&mut User>, _8: &anchor_lang::prelude::Pubkey, _9: u64, _10: i64, _11: Option<u32>, _12: i64, _13: u64) -> std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> {
    debug perp_market_map => _1;
    debug spot_market_map => _2;
    debug oracle_map => _3;
    debug makers_and_referrer => _4;
    debug taker_key => _5;
    debug taker_order => _6;
    debug filler => _7;
    debug filler_key => _8;
    debug filler_reward => _9;
    debug oracle_price => _10;
    debug jit_maker_order_id => _11;
    debug now => _12;
    debug slot => _13;
    let mut _0: std::result::Result<std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode>;
    let _14: controller::position::PositionDirection;
    let mut _15: &controller::position::PositionDirection;
    let _17: ();
    let mut _18: std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _19: std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _20: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _22: ();
    let _23: ();
    let mut _24: std::option::Option<(&anchor_lang::prelude::Pubkey, &anchor_lang::prelude::AccountLoader<'_, state::user::User>)>;
    let mut _25: &mut std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _26: &mut std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _27: isize;
    let mut _28: !;
    let _31: ();
    let mut _32: bool;
    let mut _33: &&anchor_lang::prelude::Pubkey;
    let mut _34: &&anchor_lang::prelude::Pubkey;
    let mut _35: !;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _38: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _39: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _41: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: ();
    let mut _48: bool;
    let mut _49: &state::user::User;
    let _50: &state::user::User;
    let mut _51: &std::cell::RefMut<'_, state::user::User>;
    let mut _52: bool;
    let mut _53: &state::user::User;
    let _54: &state::user::User;
    let mut _55: &std::cell::RefMut<'_, state::user::User>;
    let mut _56: !;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _59: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _60: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _61: &u16;
    let _62: &u16;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<(usize, u64)>>;
    let mut _70: std::result::Result<std::vec::Vec<(usize, u64)>, error::ErrorCode>;
    let mut _71: &state::user::User;
    let _72: &state::user::User;
    let mut _73: &std::cell::RefMut<'_, state::user::User>;
    let _74: &std::cell::RefMut<'_, state::user::User>;
    let mut _75: &controller::position::PositionDirection;
    let _76: &controller::position::PositionDirection;
    let mut _77: &state::user::MarketType;
    let _78: &state::user::MarketType;
    let _79: state::user::MarketType;
    let mut _80: u16;
    let mut _81: std::option::Option<i64>;
    let mut _82: i64;
    let mut _83: u64;
    let mut _84: u64;
    let mut _85: &state::spot_market::SpotMarket;
    let mut _86: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _87: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _93: ();
    let mut _94: bool;
    let mut _95: &std::vec::Vec<(usize, u64)>;
    let mut _96: !;
    let _97: ();
    let mut _98: &mut state::user::User;
    let mut _99: &mut state::user::User;
    let mut _100: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _101: u64;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _104: std::result::Result<u32, error::ErrorCode>;
    let mut _105: &state::spot_market::SpotMarket;
    let _106: &state::spot_market::SpotMarket;
    let mut _107: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _108: &math::margin::MarginRequirementType;
    let _109: &math::margin::MarginRequirementType;
    let _110: math::margin::MarginRequirementType;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: &state::spot_market::SpotMarket;
    let mut _118: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _121: std::result::Result<i128, error::ErrorCode>;
    let mut _122: &state::user::SpotPosition;
    let _123: &state::user::SpotPosition;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _125: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _126: &state::user::User;
    let _127: &state::user::User;
    let mut _128: &std::cell::RefMut<'_, state::user::User>;
    let mut _129: u16;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: &state::spot_market::SpotMarket;
    let _136: &state::spot_market::SpotMarket;
    let mut _137: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _138: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _144: ();
    let mut _145: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _146: std::slice::Iter<'_, (usize, u64)>;
    let mut _147: std::slice::Iter<'_, (usize, u64)>;
    let mut _148: &[(usize, u64)];
    let _149: &[(usize, u64)];
    let mut _150: &std::vec::Vec<(usize, u64)>;
    let _152: ();
    let mut _153: std::option::Option<&(usize, u64)>;
    let mut _154: &mut std::slice::Iter<'_, (usize, u64)>;
    let mut _155: &mut std::slice::Iter<'_, (usize, u64)>;
    let mut _156: isize;
    let mut _157: !;
    let _163: &state::user::User;
    let mut _164: &std::cell::RefMut<'_, state::user::User>;
    let _165: usize;
    let mut _166: usize;
    let mut _167: bool;
    let _168: ();
    let mut _169: bool;
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _171: std::result::Result<bool, error::ErrorCode>;
    let mut _172: &state::user::Order;
    let mut _173: &state::user::Order;
    let mut _174: u64;
    let mut _175: isize;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _180: !;
    let _181: ();
    let mut _182: bool;
    let mut _183: &state::user::Order;
    let mut _184: &state::user::Order;
    let mut _185: !;
    let _186: ();
    let mut _187: isize;
    let mut _189: bool;
    let mut _190: u32;
    let mut _191: u32;
    let mut _192: !;
    let mut _194: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _195: std::result::Result<bool, error::ErrorCode>;
    let mut _196: u64;
    let mut _197: controller::position::PositionDirection;
    let mut _198: i64;
    let mut _199: u32;
    let mut _200: isize;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _206: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _207: std::result::Result<bool, error::ErrorCode>;
    let mut _208: &state::user::User;
    let _209: &state::user::User;
    let mut _210: &std::cell::RefMut<'_, state::user::User>;
    let _211: &std::cell::RefMut<'_, state::user::User>;
    let mut _212: usize;
    let mut _213: i64;
    let mut _214: isize;
    let mut _216: !;
    let mut _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _221: std::result::Result<bool, error::ErrorCode>;
    let mut _222: &state::user::Order;
    let _223: &state::user::Order;
    let _224: &state::user::User;
    let mut _225: &std::cell::RefMut<'_, state::user::User>;
    let _226: usize;
    let mut _227: usize;
    let mut _228: bool;
    let mut _229: i64;
    let mut _230: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _231: std::result::Result<i64, error::ErrorCode>;
    let mut _232: i128;
    let mut _233: isize;
    let mut _235: !;
    let mut _236: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _238: u64;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _244: ();
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: bool;
    let mut _248: !;
    let mut _250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _251: std::result::Result<u64, error::ErrorCode>;
    let mut _252: &mut state::user::User;
    let mut _253: &mut state::user::User;
    let mut _254: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _255: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _256: std::option::Option<&mut state::user::User>;
    let mut _257: &mut std::option::Option<&mut state::user::User>;
    let mut _258: &mut state::spot_market::SpotMarket;
    let mut _259: &mut state::spot_market::SpotMarket;
    let mut _260: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _261: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _262: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _263: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _264: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _265: isize;
    let mut _267: !;
    let mut _268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _270: u64;
    let mut _271: u64;
    let mut _272: isize;
    let mut _274: !;
    let mut _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _278: bool;
    let mut _279: bool;
    let _280: ();
    let mut _281: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _282: std::result::Result<(), error::ErrorCode>;
    let mut _283: usize;
    let mut _284: &mut state::user::User;
    let mut _285: &mut state::user::User;
    let mut _286: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _287: &anchor_lang::prelude::Pubkey;
    let mut _288: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _289: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _290: &mut state::oracle_map::OracleMap<'_>;
    let mut _291: i64;
    let mut _292: u64;
    let mut _293: state::events::OrderActionExplanation;
    let mut _294: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _295: &anchor_lang::prelude::Pubkey;
    let mut _296: u64;
    let mut _297: isize;
    let mut _299: !;
    let mut _300: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _302: ();
    let mut _303: &mut std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _304: &mut std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _305: (anchor_lang::prelude::Pubkey, usize, u64);
    let mut _306: anchor_lang::prelude::Pubkey;
    let mut _307: usize;
    let mut _308: u64;
    let mut _309: controller::position::PositionDirection;
    let mut _310: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _313: &(usize, u64);
    let mut _314: &(usize, u64);
    let mut _315: bool;
    let mut _316: bool;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    scope 1 {
        debug maker_direction => _14;
        let mut _16: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
        scope 2 {
            debug maker_orders_info => _16;
            let mut _21: std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
            scope 3 {
                debug iter => _21;
                let _29: &anchor_lang::prelude::Pubkey;
                let _30: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                scope 4 {
                    debug maker_key => _29;
                    debug user_account_loader => _30;
                    let mut _36: std::cell::RefMut<'_, state::user::User>;
                    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _46: std::cell::RefMut<'_, state::user::User>;
                    scope 5 {
                        debug maker => _36;
                        let _57: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                        let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _67: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                        scope 10 {
                            debug market => _57;
                            let _68: std::vec::Vec<(usize, u64)>;
                            let _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _92: std::vec::Vec<(usize, u64)>;
                            let mut _312: &state::user::MarketType;
                            scope 15 {
                                debug maker_order_price_and_indexes => _68;
                                let _102: u32;
                                let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _115: u32;
                                let mut _311: &math::margin::MarginRequirementType;
                                scope 20 {
                                    debug initial_margin_ratio => _102;
                                    let _116: u64;
                                    scope 25 {
                                        debug step_size => _116;
                                        let _119: i128;
                                        let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _134: &state::user::SpotPosition;
                                        let _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _143: i128;
                                        scope 26 {
                                            debug existing_base_asset_amount => _119;
                                            let mut _151: std::slice::Iter<'_, (usize, u64)>;
                                            scope 35 {
                                                debug iter => _151;
                                                let _158: &usize;
                                                let _159: &u64;
                                                scope 36 {
                                                    debug maker_order_index => _158;
                                                    debug maker_order_price => _159;
                                                    let _160: usize;
                                                    scope 37 {
                                                        debug maker_order_index => _160;
                                                        let _161: u64;
                                                        scope 38 {
                                                            debug maker_order_price => _161;
                                                            let _162: &state::user::Order;
                                                            scope 39 {
                                                                debug maker_order => _162;
                                                                let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _179: bool;
                                                                let _193: bool;
                                                                let _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _204: bool;
                                                                scope 40 {
                                                                    debug residual => _176;
                                                                    scope 41 {
                                                                    }
                                                                }
                                                                scope 42 {
                                                                    debug val => _179;
                                                                    scope 43 {
                                                                    }
                                                                }
                                                                scope 44 {
                                                                    debug jit_maker_order_id => _188;
                                                                    let _188: u32;
                                                                }
                                                                scope 45 {
                                                                    debug breaches_oracle_price_limits => _193;
                                                                    let _205: bool;
                                                                    let _215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _218: bool;
                                                                    scope 50 {
                                                                        debug should_expire_order => _205;
                                                                        let _219: bool;
                                                                        let _234: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _237: i64;
                                                                        let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _243: bool;
                                                                        scope 55 {
                                                                            debug should_cancel_reduce_only_order => _219;
                                                                            let _249: u64;
                                                                            let _266: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _269: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                            let _273: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _276: u64;
                                                                            scope 64 {
                                                                                debug filler_reward => _249;
                                                                                let _277: state::events::OrderActionExplanation;
                                                                                scope 73 {
                                                                                    debug explanation => _277;
                                                                                    let _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _301: ();
                                                                                    scope 74 {
                                                                                        debug residual => _298;
                                                                                        scope 75 {
                                                                                        }
                                                                                    }
                                                                                    scope 76 {
                                                                                        debug val => _301;
                                                                                        scope 77 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 65 {
                                                                                debug residual => _266;
                                                                                scope 66 {
                                                                                }
                                                                            }
                                                                            scope 67 {
                                                                                debug val => _269;
                                                                                scope 68 {
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug residual => _273;
                                                                                scope 70 {
                                                                                }
                                                                            }
                                                                            scope 71 {
                                                                                debug val => _276;
                                                                                scope 72 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 56 {
                                                                            debug residual => _234;
                                                                            scope 57 {
                                                                            }
                                                                        }
                                                                        scope 58 {
                                                                            debug val => _237;
                                                                            scope 59 {
                                                                            }
                                                                        }
                                                                        scope 60 {
                                                                            debug residual => _240;
                                                                            scope 61 {
                                                                            }
                                                                        }
                                                                        scope 62 {
                                                                            debug val => _243;
                                                                            scope 63 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 51 {
                                                                        debug residual => _215;
                                                                        scope 52 {
                                                                        }
                                                                    }
                                                                    scope 53 {
                                                                        debug val => _218;
                                                                        scope 54 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 46 {
                                                                    debug residual => _201;
                                                                    scope 47 {
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug val => _204;
                                                                    scope 49 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 27 {
                                            debug residual => _131;
                                            scope 28 {
                                            }
                                        }
                                        scope 29 {
                                            debug val => _134;
                                            scope 30 {
                                            }
                                        }
                                        scope 31 {
                                            debug residual => _140;
                                            scope 32 {
                                            }
                                        }
                                        scope 33 {
                                            debug val => _143;
                                            scope 34 {
                                            }
                                        }
                                    }
                                }
                                scope 21 {
                                    debug residual => _112;
                                    scope 22 {
                                    }
                                }
                                scope 23 {
                                    debug val => _115;
                                    scope 24 {
                                    }
                                }
                            }
                            scope 16 {
                                debug residual => _89;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _92;
                                scope 19 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _64;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _67;
                            scope 14 {
                            }
                        }
                    }
                    scope 6 {
                        debug residual => _43;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _46;
                        scope 9 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _316 = const false;
        _315 = const false;
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_6).17: controller::position::PositionDirection);
        _14 = controller::position::PositionDirection::opposite(move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageLive(_16);
        _16 = Vec::<(anchor_lang::prelude::Pubkey, usize, u64)>::with_capacity(const 16_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_4).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>);
        _19 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>>::iter(move _20) -> [return: bb3, unwind: bb166];
    }

    bb3: {
        StorageDead(_20);
        _18 = <std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>> as IntoIterator>::into_iter(move _19) -> [return: bb4, unwind: bb166];
    }

    bb4: {
        StorageDead(_19);
        StorageLive(_21);
        _21 = move _18;
        goto -> bb5;
    }

    bb5: {
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &mut _21;
        _25 = &mut (*_26);
        _24 = <std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>> as Iterator>::next(move _25) -> [return: bb6, unwind: bb166];
    }

    bb6: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_29);
        _29 = (((_24 as Some).0: (&anchor_lang::prelude::Pubkey, &anchor_lang::prelude::AccountLoader<'_, state::user::User>)).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_30);
        _30 = (((_24 as Some).0: (&anchor_lang::prelude::Pubkey, &anchor_lang::prelude::AccountLoader<'_, state::user::User>)).1: &anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_29;
        StorageLive(_34);
        _34 = &_5;
        _32 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _33, move _34) -> [return: bb10, unwind: bb166];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _17 = const ();
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_310);
        _310 = move _16;
        _0 = std::result::Result::<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode>::Ok(move _310);
        StorageDead(_310);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb162;
    }

    bb10: {
        switchInt(move _32) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb148;
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = const ();
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_30);
        _39 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _40) -> [return: bb13, unwind: bb166];
    }

    bb13: {
        StorageDead(_40);
        StorageLive(_41);
        _41 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _38 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _39, move _41) -> [return: bb14, unwind: bb166];
    }

    bb14: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _38) -> [return: bb15, unwind: bb166];
    }

    bb15: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb16, 1: bb17, otherwise: bb8];
    }

    bb16: {
        StorageLive(_46);
        _46 = move ((_37 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _36 = move _46;
        StorageDead(_46);
        _319 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_36;
        _50 = <RefMut<'_, User> as Deref>::deref(move _51) -> [return: bb19, unwind: bb165];
    }

    bb17: {
        StorageLive(_43);
        _43 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb18, unwind: bb176];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_43);
        _317 = discriminant(_37);
        StorageDead(_37);
        goto -> bb160;
    }

    bb19: {
        _49 = &(*_50);
        StorageDead(_51);
        _48 = User::is_being_liquidated(move _49) -> [return: bb20, unwind: bb165];
    }

    bb20: {
        switchInt(move _48) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb25;
    }

    bb22: {
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_36;
        _54 = <RefMut<'_, User> as Deref>::deref(move _55) -> [return: bb23, unwind: bb165];
    }

    bb23: {
        _53 = &(*_54);
        StorageDead(_55);
        _52 = User::is_bankrupt(move _53) -> [return: bb24, unwind: bb165];
    }

    bb24: {
        switchInt(move _52) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb146;
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_53);
        _47 = const ();
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_2);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &((*_6).11: u16);
        _61 = &(*_62);
        _59 = SpotMarketMap::<'_>::get_ref_mut(move _60, move _61) -> [return: bb27, unwind: bb165];
    }

    bb27: {
        StorageDead(_61);
        StorageDead(_60);
        _58 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _59) -> [return: bb28, unwind: bb165];
    }

    bb28: {
        StorageDead(_59);
        _63 = discriminant(_58);
        switchInt(move _63) -> [0: bb29, 1: bb30, otherwise: bb8];
    }

    bb29: {
        StorageLive(_67);
        _67 = move ((_58 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _316 = const true;
        _57 = move _67;
        StorageDead(_67);
        _323 = discriminant(_58);
        StorageDead(_62);
        StorageDead(_58);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_36;
        _73 = &(*_74);
        _72 = <RefMut<'_, User> as Deref>::deref(move _73) -> [return: bb32, unwind: bb174];
    }

    bb30: {
        StorageLive(_64);
        _64 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb31, unwind: bb175];
    }

    bb31: {
        StorageDead(_66);
        StorageDead(_64);
        _321 = discriminant(_58);
        StorageDead(_62);
        StorageDead(_58);
        goto -> bb159;
    }

    bb32: {
        _71 = &(*_72);
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_14;
        _75 = &(*_76);
        StorageLive(_77);
        StorageLive(_78);
        _312 = const _;
        _78 = &(*_312);
        _77 = &(*_78);
        StorageLive(_80);
        _80 = ((*_6).11: u16);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _10;
        _81 = Option::<i64>::Some(move _82);
        StorageDead(_82);
        StorageLive(_83);
        _83 = _13;
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_57;
        _85 = <RefMut<'_, SpotMarket> as Deref>::deref(move _86) -> [return: bb33, unwind: bb174];
    }

    bb33: {
        StorageDead(_86);
        _84 = ((*_85).26: u64);
        StorageLive(_87);
        _87 = Option::<ProtectedMakerParams>::None;
        _70 = math::orders::find_maker_orders(move _71, move _75, move _77, move _80, move _81, move _83, move _84, const false, move _87) -> [return: bb34, unwind: bb174];
    }

    bb34: {
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_71);
        _69 = <std::result::Result<Vec<(usize, u64)>, error::ErrorCode> as Try>::branch(move _70) -> [return: bb35, unwind: bb174];
    }

    bb35: {
        StorageDead(_70);
        _88 = discriminant(_69);
        switchInt(move _88) -> [0: bb36, 1: bb37, otherwise: bb8];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_69 as Continue).0: std::vec::Vec<(usize, u64)>);
        _68 = move _92;
        StorageDead(_92);
        _327 = discriminant(_69);
        StorageDead(_85);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &_68;
        _94 = Vec::<(usize, u64)>::is_empty(move _95) -> [return: bb39, unwind: bb164];
    }

    bb37: {
        StorageLive(_89);
        _89 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_91);
        _91 = _89;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _91) -> [return: bb38, unwind: bb172];
    }

    bb38: {
        StorageDead(_91);
        StorageDead(_89);
        _325 = discriminant(_69);
        StorageDead(_85);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        goto -> bb158;
    }

    bb39: {
        switchInt(move _94) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_93);
        drop(_68) -> [return: bb144, unwind: bb174];
    }

    bb41: {
        StorageDead(_95);
        _93 = const ();
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &mut _36;
        _99 = <RefMut<'_, User> as DerefMut>::deref_mut(move _100) -> [return: bb42, unwind: bb164];
    }

    bb42: {
        _98 = &mut (*_99);
        StorageDead(_100);
        StorageLive(_101);
        _101 = _13;
        _97 = User::update_last_active_slot(move _98, move _101) -> [return: bb43, unwind: bb164];
    }

    bb43: {
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_99);
        StorageDead(_97);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_57;
        _106 = <RefMut<'_, SpotMarket> as Deref>::deref(move _107) -> [return: bb44, unwind: bb164];
    }

    bb44: {
        _105 = &(*_106);
        StorageDead(_107);
        StorageLive(_108);
        StorageLive(_109);
        _311 = const _;
        _109 = &(*_311);
        _108 = &(*_109);
        _104 = SpotMarket::get_margin_ratio(move _105, move _108) -> [return: bb45, unwind: bb164];
    }

    bb45: {
        StorageDead(_108);
        StorageDead(_105);
        _103 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _104) -> [return: bb46, unwind: bb164];
    }

    bb46: {
        StorageDead(_104);
        _111 = discriminant(_103);
        switchInt(move _111) -> [0: bb47, 1: bb48, otherwise: bb8];
    }

    bb47: {
        StorageLive(_115);
        _115 = ((_103 as Continue).0: u32);
        _102 = _115;
        StorageDead(_115);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_103);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &_57;
        _117 = <RefMut<'_, SpotMarket> as Deref>::deref(move _118) -> [return: bb50, unwind: bb164];
    }

    bb48: {
        StorageLive(_112);
        _112 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb49, unwind: bb164];
    }

    bb49: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_103);
        goto -> bb157;
    }

    bb50: {
        StorageDead(_118);
        _116 = ((*_117).25: u64);
        StorageDead(_117);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &_36;
        _127 = <RefMut<'_, User> as Deref>::deref(move _128) -> [return: bb51, unwind: bb164];
    }

    bb51: {
        _126 = &(*_127);
        StorageDead(_128);
        StorageLive(_129);
        _129 = ((*_6).11: u16);
        _125 = User::get_spot_position(move _126, move _129) -> [return: bb52, unwind: bb164];
    }

    bb52: {
        StorageDead(_129);
        StorageDead(_126);
        _124 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _125) -> [return: bb53, unwind: bb164];
    }

    bb53: {
        StorageDead(_125);
        _130 = discriminant(_124);
        switchInt(move _130) -> [0: bb54, 1: bb55, otherwise: bb8];
    }

    bb54: {
        StorageLive(_134);
        _134 = ((_124 as Continue).0: &state::user::SpotPosition);
        _123 = _134;
        StorageDead(_134);
        _122 = &(*_123);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_57;
        _137 = &(*_138);
        _136 = <RefMut<'_, SpotMarket> as Deref>::deref(move _137) -> [return: bb57, unwind: bb164];
    }

    bb55: {
        StorageLive(_131);
        _131 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb56, unwind: bb164];
    }

    bb56: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb155;
    }

    bb57: {
        _135 = &(*_136);
        StorageDead(_137);
        _121 = SpotPosition::get_signed_token_amount(move _122, move _135) -> [return: bb58, unwind: bb164];
    }

    bb58: {
        StorageDead(_135);
        StorageDead(_122);
        _120 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _121) -> [return: bb59, unwind: bb164];
    }

    bb59: {
        StorageDead(_121);
        _139 = discriminant(_120);
        switchInt(move _139) -> [0: bb60, 1: bb61, otherwise: bb8];
    }

    bb60: {
        StorageLive(_143);
        _143 = ((_120 as Continue).0: i128);
        _119 = _143;
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_120);
        StorageLive(_144);
        StorageLive(_145);
        _316 = const false;
        _145 = move _57;
        _144 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _145) -> [return: bb63, unwind: bb164];
    }

    bb61: {
        StorageLive(_140);
        _140 = ((_120 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_142);
        _142 = _140;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _142) -> [return: bb62, unwind: bb164];
    }

    bb62: {
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        goto -> bb155;
    }

    bb63: {
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_68;
        _149 = <Vec<(usize, u64)> as Deref>::deref(move _150) -> [return: bb64, unwind: bb164];
    }

    bb64: {
        _148 = &(*_149);
        StorageDead(_150);
        _147 = core::slice::<impl [(usize, u64)]>::iter(move _148) -> [return: bb65, unwind: bb164];
    }

    bb65: {
        StorageDead(_148);
        _146 = <std::slice::Iter<'_, (usize, u64)> as IntoIterator>::into_iter(move _147) -> [return: bb66, unwind: bb164];
    }

    bb66: {
        StorageDead(_147);
        StorageLive(_151);
        _151 = move _146;
        goto -> bb67;
    }

    bb67: {
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &mut _151;
        _154 = &mut (*_155);
        _153 = <std::slice::Iter<'_, (usize, u64)> as Iterator>::next(move _154) -> [return: bb68, unwind: bb164];
    }

    bb68: {
        StorageDead(_154);
        _156 = discriminant(_153);
        switchInt(move _156) -> [0: bb70, 1: bb69, otherwise: bb8];
    }

    bb69: {
        StorageLive(_158);
        _313 = deref_copy ((_153 as Some).0: &(usize, u64));
        _158 = &((*_313).0: usize);
        StorageLive(_159);
        _314 = deref_copy ((_153 as Some).0: &(usize, u64));
        _159 = &((*_314).1: u64);
        StorageLive(_160);
        _160 = (*_158);
        StorageLive(_161);
        _161 = (*_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &_36;
        _163 = <RefMut<'_, User> as Deref>::deref(move _164) -> [return: bb71, unwind: bb164];
    }

    bb70: {
        _23 = const ();
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_102);
        drop(_68) -> [return: bb142, unwind: bb174];
    }

    bb71: {
        StorageDead(_164);
        StorageLive(_165);
        _165 = _160;
        _166 = Len(((*_163).5: [state::user::Order; 32]));
        _167 = Lt(_165, _166);
        assert(move _167, "index out of bounds: the length is {} but the index is {}", move _166, _165) -> [success: bb72, unwind: bb164];
    }

    bb72: {
        _162 = &((*_163).5: [state::user::Order; 32])[_165];
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &(*_162);
        StorageLive(_173);
        _173 = &(*_6);
        StorageLive(_174);
        _174 = _13;
        _171 = is_maker_for_taker(move _172, move _173, move _174) -> [return: bb73, unwind: bb164];
    }

    bb73: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_172);
        _170 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _171) -> [return: bb74, unwind: bb164];
    }

    bb74: {
        StorageDead(_171);
        _175 = discriminant(_170);
        switchInt(move _175) -> [0: bb75, 1: bb76, otherwise: bb8];
    }

    bb75: {
        StorageLive(_179);
        _179 = ((_170 as Continue).0: bool);
        _169 = _179;
        StorageDead(_179);
        switchInt(move _169) -> [0: bb79, otherwise: bb78];
    }

    bb76: {
        StorageLive(_176);
        _176 = ((_170 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb77, unwind: bb164];
    }

    bb77: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb154;
    }

    bb78: {
        StorageDead(_170);
        _168 = const ();
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &(*_162);
        StorageLive(_184);
        _184 = &(*_6);
        _182 = are_orders_same_market_but_different_sides(move _183, move _184) -> [return: bb80, unwind: bb164];
    }

    bb79: {
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb141;
    }

    bb80: {
        switchInt(move _182) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        StorageDead(_184);
        StorageDead(_183);
        _181 = const ();
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_186);
        _187 = discriminant(_11);
        switchInt(move _187) -> [1: bb84, otherwise: bb83];
    }

    bb82: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb141;
    }

    bb83: {
        _186 = const ();
        goto -> bb87;
    }

    bb84: {
        StorageLive(_188);
        _188 = ((_11 as Some).0: u32);
        StorageLive(_189);
        StorageLive(_190);
        _190 = ((*_162).10: u32);
        StorageLive(_191);
        _191 = _188;
        _189 = Ne(move _190, move _191);
        switchInt(move _189) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_186);
        goto -> bb141;
    }

    bb86: {
        StorageDead(_191);
        StorageDead(_190);
        _186 = const ();
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_186);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = _161;
        StorageLive(_197);
        _197 = ((*_162).17: controller::position::PositionDirection);
        StorageLive(_198);
        _198 = _10;
        StorageLive(_199);
        _199 = _102;
        _195 = math::orders::limit_price_breaches_maker_oracle_price_bands(move _196, move _197, move _198, move _199) -> [return: bb88, unwind: bb164];
    }

    bb88: {
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_196);
        _194 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _195) -> [return: bb89, unwind: bb164];
    }

    bb89: {
        StorageDead(_195);
        _200 = discriminant(_194);
        switchInt(move _200) -> [0: bb90, 1: bb91, otherwise: bb8];
    }

    bb90: {
        StorageLive(_204);
        _204 = ((_194 as Continue).0: bool);
        _193 = _204;
        StorageDead(_204);
        StorageDead(_194);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &_36;
        _210 = &(*_211);
        _209 = <RefMut<'_, User> as Deref>::deref(move _210) -> [return: bb93, unwind: bb164];
    }

    bb91: {
        StorageLive(_201);
        _201 = ((_194 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_203);
        _203 = _201;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _203) -> [return: bb92, unwind: bb164];
    }

    bb92: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_194);
        goto -> bb153;
    }

    bb93: {
        _208 = &(*_209);
        StorageDead(_210);
        StorageLive(_212);
        _212 = _160;
        StorageLive(_213);
        _213 = _12;
        _207 = math::orders::should_expire_order(move _208, move _212, move _213) -> [return: bb94, unwind: bb164];
    }

    bb94: {
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_208);
        _206 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _207) -> [return: bb95, unwind: bb164];
    }

    bb95: {
        StorageDead(_207);
        _214 = discriminant(_206);
        switchInt(move _214) -> [0: bb96, 1: bb97, otherwise: bb8];
    }

    bb96: {
        StorageLive(_218);
        _218 = ((_206 as Continue).0: bool);
        _205 = _218;
        StorageDead(_218);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &_36;
        _224 = <RefMut<'_, User> as Deref>::deref(move _225) -> [return: bb99, unwind: bb164];
    }

    bb97: {
        StorageLive(_215);
        _215 = ((_206 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_217);
        _217 = _215;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _217) -> [return: bb98, unwind: bb164];
    }

    bb98: {
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        goto -> bb152;
    }

    bb99: {
        StorageDead(_225);
        StorageLive(_226);
        _226 = _160;
        _227 = Len(((*_224).5: [state::user::Order; 32]));
        _228 = Lt(_226, _227);
        assert(move _228, "index out of bounds: the length is {} but the index is {}", move _227, _226) -> [success: bb100, unwind: bb164];
    }

    bb100: {
        _223 = &((*_224).5: [state::user::Order; 32])[_226];
        _222 = &(*_223);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = _119;
        _231 = <i128 as Cast>::cast::<i64>(move _232) -> [return: bb101, unwind: bb164];
    }

    bb101: {
        StorageDead(_232);
        _230 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _231) -> [return: bb102, unwind: bb164];
    }

    bb102: {
        StorageDead(_231);
        _233 = discriminant(_230);
        switchInt(move _233) -> [0: bb103, 1: bb104, otherwise: bb8];
    }

    bb103: {
        StorageLive(_237);
        _237 = ((_230 as Continue).0: i64);
        _229 = _237;
        StorageDead(_237);
        StorageLive(_238);
        _238 = _116;
        _221 = math::orders::should_cancel_reduce_only_order(move _222, move _229, move _238) -> [return: bb106, unwind: bb164];
    }

    bb104: {
        StorageLive(_234);
        _234 = ((_230 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_236);
        _236 = _234;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _236) -> [return: bb105, unwind: bb164];
    }

    bb105: {
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_229);
        StorageDead(_222);
        StorageDead(_221);
        goto -> bb150;
    }

    bb106: {
        StorageDead(_238);
        StorageDead(_229);
        StorageDead(_222);
        _220 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _221) -> [return: bb107, unwind: bb164];
    }

    bb107: {
        StorageDead(_221);
        _239 = discriminant(_220);
        switchInt(move _239) -> [0: bb108, 1: bb109, otherwise: bb8];
    }

    bb108: {
        StorageLive(_243);
        _243 = ((_220 as Continue).0: bool);
        _219 = _243;
        StorageDead(_243);
        StorageDead(_230);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_220);
        StorageLive(_244);
        StorageLive(_245);
        _245 = _193;
        switchInt(move _245) -> [0: bb111, otherwise: bb113];
    }

    bb109: {
        StorageLive(_240);
        _240 = ((_220 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb110, unwind: bb164];
    }

    bb110: {
        StorageDead(_242);
        StorageDead(_240);
        goto -> bb150;
    }

    bb111: {
        StorageLive(_246);
        _246 = _205;
        switchInt(move _246) -> [0: bb112, otherwise: bb113];
    }

    bb112: {
        StorageLive(_247);
        _247 = _219;
        switchInt(move _247) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &mut _36;
        _254 = &mut (*_255);
        _253 = <RefMut<'_, User> as DerefMut>::deref_mut(move _254) -> [return: bb115, unwind: bb164];
    }

    bb114: {
        _244 = const ();
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &mut _16;
        _303 = &mut (*_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = (*_29);
        StorageLive(_307);
        _307 = _160;
        StorageLive(_308);
        _308 = _161;
        _305 = (move _306, move _307, move _308);
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_306);
        StorageLive(_309);
        _309 = _14;
        _302 = insert_maker_order_info(move _303, move _305, move _309) -> [return: bb140, unwind: bb164];
    }

    bb115: {
        _252 = &mut (*_253);
        StorageDead(_254);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &mut (*_7);
        _256 = Option::<&mut User>::as_deref_mut(move _257) -> [return: bb116, unwind: bb164];
    }

    bb116: {
        StorageDead(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _264 = &(*_2);
        _263 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _264) -> [return: bb117, unwind: bb164];
    }

    bb117: {
        StorageDead(_264);
        _262 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _263) -> [return: bb118, unwind: bb164];
    }

    bb118: {
        _315 = const true;
        StorageDead(_263);
        _265 = discriminant(_262);
        switchInt(move _265) -> [0: bb119, 1: bb120, otherwise: bb8];
    }

    bb119: {
        StorageLive(_269);
        _269 = move ((_262 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _261 = move _269;
        StorageDead(_269);
        _260 = &mut _261;
        _259 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _260) -> [return: bb122, unwind: bb163];
    }

    bb120: {
        StorageLive(_266);
        _266 = ((_262 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_268);
        _268 = _266;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _268) -> [return: bb121, unwind: bb171];
    }

    bb121: {
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_252);
        StorageDead(_251);
        goto -> bb169;
    }

    bb122: {
        _258 = &mut (*_259);
        StorageDead(_260);
        StorageLive(_270);
        _270 = _9;
        StorageLive(_271);
        _271 = _13;
        _251 = pay_keeper_flat_reward_for_spot(move _252, move _256, move _258, move _270, move _271) -> [return: bb123, unwind: bb163];
    }

    bb123: {
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_252);
        _250 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _251) -> [return: bb124, unwind: bb163];
    }

    bb124: {
        StorageDead(_251);
        _272 = discriminant(_250);
        switchInt(move _272) -> [0: bb125, 1: bb126, otherwise: bb8];
    }

    bb125: {
        StorageLive(_276);
        _276 = ((_250 as Continue).0: u64);
        _249 = _276;
        StorageDead(_276);
        drop(_261) -> [return: bb168, unwind: bb171];
    }

    bb126: {
        StorageLive(_273);
        _273 = ((_250 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_275);
        _275 = _273;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _275) -> [return: bb127, unwind: bb163];
    }

    bb127: {
        StorageDead(_275);
        StorageDead(_273);
        drop(_261) -> [return: bb169, unwind: bb171];
    }

    bb128: {
        _277 = OrderActionExplanation::OraclePriceBreachedLimitPrice;
        goto -> bb133;
    }

    bb129: {
        StorageLive(_279);
        _279 = _205;
        switchInt(move _279) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _277 = OrderActionExplanation::OrderExpired;
        goto -> bb132;
    }

    bb131: {
        _277 = OrderActionExplanation::ReduceOnlyOrderIncreasedPosition;
        goto -> bb132;
    }

    bb132: {
        StorageDead(_279);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_278);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = _160;
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &mut _36;
        _285 = <RefMut<'_, User> as DerefMut>::deref_mut(move _286) -> [return: bb134, unwind: bb164];
    }

    bb134: {
        _284 = &mut (*_285);
        StorageDead(_286);
        StorageLive(_287);
        _287 = &(*_29);
        StorageLive(_288);
        _288 = &(*_1);
        StorageLive(_289);
        _289 = &(*_2);
        StorageLive(_290);
        _290 = &mut (*_3);
        StorageLive(_291);
        _291 = _12;
        StorageLive(_292);
        _292 = _13;
        StorageLive(_293);
        _293 = _277;
        StorageLive(_294);
        StorageLive(_295);
        _295 = &(*_8);
        _294 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _295);
        StorageDead(_295);
        StorageLive(_296);
        _296 = _249;
        _282 = controller::orders::cancel_order(move _283, move _284, move _287, move _288, move _289, move _290, move _291, move _292, move _293, move _294, move _296, const false) -> [return: bb135, unwind: bb164];
    }

    bb135: {
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_284);
        StorageDead(_283);
        _281 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _282) -> [return: bb136, unwind: bb164];
    }

    bb136: {
        StorageDead(_282);
        _297 = discriminant(_281);
        switchInt(move _297) -> [0: bb137, 1: bb138, otherwise: bb8];
    }

    bb137: {
        StorageLive(_301);
        _301 = ((_281 as Continue).0: ());
        _280 = _301;
        StorageDead(_301);
        StorageDead(_285);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_219);
        StorageDead(_205);
        StorageDead(_193);
        goto -> bb141;
    }

    bb138: {
        StorageLive(_298);
        _298 = ((_281 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_300);
        _300 = _298;
        _0 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _300) -> [return: bb139, unwind: bb164];
    }

    bb139: {
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_285);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_277);
        goto -> bb149;
    }

    bb140: {
        StorageDead(_309);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_304);
        StorageDead(_302);
        _152 = const ();
        StorageDead(_219);
        StorageDead(_205);
        StorageDead(_193);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_152);
        _22 = const ();
        goto -> bb67;
    }

    bb141: {
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb67;
    }

    bb142: {
        StorageDead(_68);
        _316 = const false;
        StorageDead(_57);
        drop(_36) -> [return: bb143, unwind: bb166];
    }

    bb143: {
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        _22 = const ();
        goto -> bb5;
    }

    bb144: {
        StorageDead(_68);
        drop(_57) -> [return: bb145, unwind: bb165];
    }

    bb145: {
        _316 = const false;
        StorageDead(_57);
        goto -> bb146;
    }

    bb146: {
        drop(_36) -> [return: bb147, unwind: bb166];
    }

    bb147: {
        StorageDead(_36);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb5;
    }

    bb149: {
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb151;
    }

    bb150: {
        StorageDead(_230);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_220);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_219);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_205);
        goto -> bb153;
    }

    bb153: {
        StorageDead(_193);
        goto -> bb154;
    }

    bb154: {
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        goto -> bb156;
    }

    bb155: {
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_120);
        goto -> bb156;
    }

    bb156: {
        StorageDead(_119);
        StorageDead(_116);
        goto -> bb157;
    }

    bb157: {
        StorageDead(_102);
        drop(_68) -> [return: bb158, unwind: bb174];
    }

    bb158: {
        StorageDead(_68);
        switchInt(_316) -> [0: bb159, otherwise: bb170];
    }

    bb159: {
        _316 = const false;
        StorageDead(_57);
        drop(_36) -> [return: bb160, unwind: bb166];
    }

    bb160: {
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        drop(_16) -> [return: bb161, unwind: bb167];
    }

    bb161: {
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb162;
    }

    bb162: {
        return;
    }

    bb163 (cleanup): {
        drop(_261) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb164 (cleanup): {
        drop(_68) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_36) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        drop(_16) -> [return: bb167, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        resume;
    }

    bb168: {
        _329 = discriminant(_262);
        _315 = const false;
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_259);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_250);
        StorageLive(_277);
        StorageLive(_278);
        _278 = _193;
        switchInt(move _278) -> [0: bb129, otherwise: bb128];
    }

    bb169: {
        _331 = discriminant(_262);
        _315 = const false;
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_259);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_250);
        goto -> bb149;
    }

    bb170: {
        drop(_57) -> [return: bb159, unwind: bb165];
    }

    bb171 (cleanup): {
        _333 = discriminant(_262);
        goto -> bb164;
    }

    bb172 (cleanup): {
        _334 = discriminant(_69);
        goto -> bb174;
    }

    bb173 (cleanup): {
        drop(_57) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        switchInt(_316) -> [0: bb165, otherwise: bb173];
    }

    bb175 (cleanup): {
        _335 = discriminant(_58);
        goto -> bb165;
    }

    bb176 (cleanup): {
        _336 = discriminant(_37);
        goto -> bb166;
    }
}
