// MIR for `admin::handle_initialize_serum_fulfillment_config` before PreCodegen

fn admin::handle_initialize_serum_fulfillment_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitializeSerumFulfillmentConfig<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: u16;
    let mut _8: ();
    let _9: error::ErrorCode;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &error::ErrorCode;
    let _28: &error::ErrorCode;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: error::ErrorCode;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: ();
    let _38: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _40: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _41: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _42: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _43: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _44: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _52: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _53: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _55: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _56: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _63: ();
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _65: std::result::Result<(), error::ErrorCode>;
    let mut _66: bool;
    let mut _67: &anchor_lang::prelude::Pubkey;
    let _68: anchor_lang::prelude::Pubkey;
    let mut _69: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: ();
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: &std::string::String;
    let _77: &std::string::String;
    let _78: std::string::String;
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str];
    let mut _82: &[&str; 2];
    let _83: &[&str; 2];
    let _84: [&str; 2];
    let mut _85: &[core::fmt::rt::Argument<'_>];
    let mut _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: &[core::fmt::rt::Argument<'_>; 1];
    let _88: [core::fmt::rt::Argument<'_>; 1];
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &error::ErrorCode;
    let _91: &error::ErrorCode;
    let mut _92: error::ErrorCode;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _101: &anchor_lang::prelude::AccountInfo<'_>;
    let _102: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _103: &anchor_lang::prelude::AccountInfo<'_>;
    let _104: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _105: &anchor_lang::prelude::AccountInfo<'_>;
    let _106: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, serum_dex::state::Market<'_>>;
    let mut _109: std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode>;
    let mut _110: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _116: ();
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _118: std::result::Result<(), error::ErrorCode>;
    let mut _119: bool;
    let mut _120: &[u64; 4];
    let _121: [u64; 4];
    let mut _122: [u64; 4];
    let mut _123: &serum_dex::state::MarketState;
    let mut _124: &serum_dex::state::Market<'_>;
    let mut _125: &[u64; 4];
    let _126: [u64; 4];
    let mut _127: &anchor_lang::prelude::Pubkey;
    let _128: &state::spot_market::SpotMarket;
    let mut _129: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _130: ();
    let _132: ();
    let mut _133: &str;
    let _134: &str;
    let mut _135: &std::string::String;
    let _136: &std::string::String;
    let _137: std::string::String;
    let mut _139: std::fmt::Arguments<'_>;
    let mut _140: &[&str];
    let mut _141: &[&str; 2];
    let _142: &[&str; 2];
    let _143: [&str; 2];
    let mut _144: &[core::fmt::rt::Argument<'_>];
    let mut _145: &[core::fmt::rt::Argument<'_>; 1];
    let _146: &[core::fmt::rt::Argument<'_>; 1];
    let _147: [core::fmt::rt::Argument<'_>; 1];
    let mut _148: core::fmt::rt::Argument<'_>;
    let mut _149: &error::ErrorCode;
    let _150: &error::ErrorCode;
    let _151: ();
    let mut _152: &str;
    let _153: &str;
    let mut _154: error::ErrorCode;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _160: ();
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _162: std::result::Result<(), error::ErrorCode>;
    let mut _163: bool;
    let mut _164: &[u64; 4];
    let _165: [u64; 4];
    let mut _166: [u64; 4];
    let mut _167: &serum_dex::state::MarketState;
    let mut _168: &serum_dex::state::Market<'_>;
    let mut _169: &[u64; 4];
    let _170: [u64; 4];
    let mut _171: &anchor_lang::prelude::Pubkey;
    let _172: &state::spot_market::SpotMarket;
    let mut _173: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _174: ();
    let _176: ();
    let mut _177: &str;
    let _178: &str;
    let mut _179: &std::string::String;
    let _180: &std::string::String;
    let _181: std::string::String;
    let mut _183: std::fmt::Arguments<'_>;
    let mut _184: &[&str];
    let mut _185: &[&str; 2];
    let _186: &[&str; 2];
    let _187: [&str; 2];
    let mut _188: &[core::fmt::rt::Argument<'_>];
    let mut _189: &[core::fmt::rt::Argument<'_>; 1];
    let _190: &[core::fmt::rt::Argument<'_>; 1];
    let _191: [core::fmt::rt::Argument<'_>; 1];
    let mut _192: core::fmt::rt::Argument<'_>;
    let mut _193: &error::ErrorCode;
    let _194: &error::ErrorCode;
    let _195: ();
    let mut _196: &str;
    let _197: &str;
    let mut _198: error::ErrorCode;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _205: &serum_dex::state::MarketState;
    let mut _206: &serum_dex::state::Market<'_>;
    let mut _208: bool;
    let mut _209: u64;
    let mut _210: &state::spot_market::SpotMarket;
    let mut _211: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _212: u64;
    let mut _213: u64;
    let mut _214: u64;
    let mut _215: &state::spot_market::SpotMarket;
    let mut _216: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _217: u64;
    let _218: ();
    let mut _219: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _220: std::result::Result<(), error::ErrorCode>;
    let mut _221: bool;
    let mut _222: ();
    let _224: ();
    let mut _225: &str;
    let _226: &str;
    let mut _227: &std::string::String;
    let _228: &std::string::String;
    let _229: std::string::String;
    let mut _231: std::fmt::Arguments<'_>;
    let mut _232: &[&str];
    let mut _233: &[&str; 2];
    let _234: &[&str; 2];
    let _235: [&str; 2];
    let mut _236: &[core::fmt::rt::Argument<'_>];
    let mut _237: &[core::fmt::rt::Argument<'_>; 1];
    let _238: &[core::fmt::rt::Argument<'_>; 1];
    let _239: [core::fmt::rt::Argument<'_>; 1];
    let mut _240: core::fmt::rt::Argument<'_>;
    let mut _241: &error::ErrorCode;
    let _242: &error::ErrorCode;
    let _243: ();
    let mut _244: &str;
    let _245: &str;
    let mut _246: &std::string::String;
    let _247: &std::string::String;
    let _248: std::string::String;
    let mut _250: std::fmt::Arguments<'_>;
    let mut _251: &[&str];
    let mut _252: &[&str; 3];
    let _253: &[&str; 3];
    let _254: [&str; 3];
    let mut _255: &[core::fmt::rt::Argument<'_>];
    let mut _256: &[core::fmt::rt::Argument<'_>; 2];
    let _257: &[core::fmt::rt::Argument<'_>; 2];
    let _258: [core::fmt::rt::Argument<'_>; 2];
    let mut _259: core::fmt::rt::Argument<'_>;
    let mut _260: &u64;
    let _261: &u64;
    let _262: &state::spot_market::SpotMarket;
    let mut _263: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _264: core::fmt::rt::Argument<'_>;
    let mut _265: &u64;
    let _266: &u64;
    let mut _267: error::ErrorCode;
    let mut _268: isize;
    let mut _270: !;
    let mut _271: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _274: &serum_dex::state::MarketState;
    let mut _275: &serum_dex::state::Market<'_>;
    let mut _277: bool;
    let mut _278: u64;
    let mut _279: &state::spot_market::SpotMarket;
    let mut _280: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _281: u64;
    let mut _282: u64;
    let mut _283: u64;
    let mut _284: &state::spot_market::SpotMarket;
    let mut _285: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _286: u64;
    let _287: ();
    let mut _288: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _289: std::result::Result<(), error::ErrorCode>;
    let mut _290: bool;
    let mut _291: ();
    let _293: ();
    let mut _294: &str;
    let _295: &str;
    let mut _296: &std::string::String;
    let _297: &std::string::String;
    let _298: std::string::String;
    let mut _300: std::fmt::Arguments<'_>;
    let mut _301: &[&str];
    let mut _302: &[&str; 2];
    let _303: &[&str; 2];
    let _304: [&str; 2];
    let mut _305: &[core::fmt::rt::Argument<'_>];
    let mut _306: &[core::fmt::rt::Argument<'_>; 1];
    let _307: &[core::fmt::rt::Argument<'_>; 1];
    let _308: [core::fmt::rt::Argument<'_>; 1];
    let mut _309: core::fmt::rt::Argument<'_>;
    let mut _310: &error::ErrorCode;
    let _311: &error::ErrorCode;
    let _312: ();
    let mut _313: &str;
    let _314: &str;
    let mut _315: &std::string::String;
    let _316: &std::string::String;
    let _317: std::string::String;
    let mut _319: std::fmt::Arguments<'_>;
    let mut _320: &[&str];
    let mut _321: &[&str; 3];
    let _322: &[&str; 3];
    let _323: [&str; 3];
    let mut _324: &[core::fmt::rt::Argument<'_>];
    let mut _325: &[core::fmt::rt::Argument<'_>; 2];
    let _326: &[core::fmt::rt::Argument<'_>; 2];
    let _327: [core::fmt::rt::Argument<'_>; 2];
    let mut _328: core::fmt::rt::Argument<'_>;
    let mut _329: &u64;
    let _330: &u64;
    let _331: &state::spot_market::SpotMarket;
    let mut _332: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _333: core::fmt::rt::Argument<'_>;
    let mut _334: &u64;
    let _335: &u64;
    let mut _336: error::ErrorCode;
    let mut _337: isize;
    let mut _339: !;
    let mut _340: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _342: ();
    let mut _343: serum_dex::state::Market<'_>;
    let mut _345: &[&[u8]; 2];
    let _346: &[&[u8]; 2];
    let _347: [&[u8]; 2];
    let mut _348: &[u8];
    let mut _349: &[u8; 17];
    let _350: &[u8; 17];
    let mut _351: &[u8];
    let _352: &[u8];
    let mut _353: &anchor_lang::prelude::Pubkey;
    let _354: ();
    let mut _355: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _356: std::result::Result<(), error::ErrorCode>;
    let mut _357: &anchor_lang::prelude::Pubkey;
    let mut _358: &anchor_lang::prelude::AccountInfo<'_>;
    let _359: &anchor_lang::prelude::AccountInfo<'_>;
    let _360: anchor_lang::prelude::AccountInfo<'_>;
    let mut _361: &anchor_lang::prelude::Signer<'_>;
    let mut _362: &anchor_lang::prelude::Rent;
    let _363: &anchor_lang::prelude::Rent;
    let _364: anchor_lang::prelude::Rent;
    let mut _365: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _366: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _367: isize;
    let mut _369: !;
    let mut _370: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _372: usize;
    let mut _373: usize;
    let mut _374: (usize, bool);
    let mut _375: &anchor_lang::prelude::Pubkey;
    let _376: &anchor_lang::prelude::Pubkey;
    let mut _377: &anchor_lang::prelude::AccountInfo<'_>;
    let _378: &anchor_lang::prelude::AccountInfo<'_>;
    let _379: anchor_lang::prelude::AccountInfo<'_>;
    let mut _380: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _381: &anchor_lang::prelude::AccountInfo<'_>;
    let _382: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _383: &[&[u8]];
    let mut _384: isize;
    let mut _386: !;
    let mut _387: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _390: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, serum_dex::state::OpenOrders>>;
    let mut _391: std::result::Result<std::cell::Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode>;
    let mut _392: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _393: isize;
    let mut _395: !;
    let mut _396: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _398: ();
    let mut _399: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _400: std::result::Result<(), error::ErrorCode>;
    let mut _401: bool;
    let mut _402: u64;
    let mut _403: &serum_dex::state::OpenOrders;
    let mut _404: &std::cell::Ref<'_, serum_dex::state::OpenOrders>;
    let mut _405: ();
    let _407: ();
    let mut _408: &str;
    let _409: &str;
    let mut _410: &std::string::String;
    let _411: &std::string::String;
    let _412: std::string::String;
    let mut _414: std::fmt::Arguments<'_>;
    let mut _415: &[&str];
    let mut _416: &[&str; 2];
    let _417: &[&str; 2];
    let _418: [&str; 2];
    let mut _419: &[core::fmt::rt::Argument<'_>];
    let mut _420: &[core::fmt::rt::Argument<'_>; 1];
    let _421: &[core::fmt::rt::Argument<'_>; 1];
    let _422: [core::fmt::rt::Argument<'_>; 1];
    let mut _423: core::fmt::rt::Argument<'_>;
    let mut _424: &error::ErrorCode;
    let _425: &error::ErrorCode;
    let _426: ();
    let mut _427: &str;
    let _428: &str;
    let mut _429: error::ErrorCode;
    let mut _430: isize;
    let mut _432: !;
    let mut _433: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _435: ();
    let mut _436: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
    let _437: ();
    let mut _438: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _439: std::result::Result<(), error::ErrorCode>;
    let mut _440: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _441: &anchor_lang::prelude::AccountInfo<'_>;
    let _442: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _443: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let _444: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _445: u8;
    let mut _446: &state::state::State;
    let mut _447: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _448: isize;
    let mut _450: !;
    let mut _451: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _454: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _456: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>>;
    let mut _457: std::result::Result<std::cell::RefMut<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _458: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _459: isize;
    let mut _461: !;
    let mut _462: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _464: state::fulfillment_params::serum::SerumV3FulfillmentConfig;
    let mut _465: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _466: std::result::Result<state::fulfillment_params::serum::SerumV3FulfillmentConfig, error::ErrorCode>;
    let mut _467: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _468: &anchor_lang::prelude::Pubkey;
    let _469: &anchor_lang::prelude::Pubkey;
    let mut _470: u16;
    let mut _471: isize;
    let mut _473: !;
    let mut _474: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _476: &mut state::fulfillment_params::serum::SerumV3FulfillmentConfig;
    let mut _477: &mut std::cell::RefMut<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _478: ();
    let mut _488: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _489: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _490: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _491: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _492: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _493: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _494: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _495: &anchor_lang::prelude::Pubkey;
    let mut _496: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _497: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _498: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _499: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _500: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _501: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _502: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _503: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _504: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _505: bool;
    let mut _506: bool;
    let mut _507: bool;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug error_code => _9;
        let _16: std::string::String;
        let mut _487: &[&str; 2];
        scope 2 {
            debug res => _16;
        }
    }
    scope 3 {
        debug residual => _34;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _37;
        scope 6 {
        }
    }
    scope 7 {
        debug base_spot_market => _38;
        let _50: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _61: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        scope 12 {
            debug quote_spot_market => _50;
            let _62: anchor_lang::prelude::Pubkey;
            scope 17 {
                debug serum_program_id => _62;
                let _72: error::ErrorCode;
                let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _97: ();
                let _98: anchor_lang::prelude::Pubkey;
                scope 18 {
                    debug error_code => _72;
                    let _79: std::string::String;
                    let mut _486: &[&str; 2];
                    scope 19 {
                        debug res => _79;
                    }
                }
                scope 20 {
                    debug residual => _94;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _97;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug serum_market_key => _98;
                    let _100: state::fulfillment_params::serum::SerumContext<'_, '_>;
                    scope 25 {
                        debug serum_context => _100;
                        let _107: serum_dex::state::Market<'_>;
                        let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _115: serum_dex::state::Market<'_>;
                        scope 26 {
                            debug market_state => _107;
                            let _131: error::ErrorCode;
                            let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _159: ();
                            let _175: error::ErrorCode;
                            let _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _203: ();
                            let _204: u64;
                            scope 31 {
                                debug error_code => _131;
                                let _138: std::string::String;
                                let mut _485: &[&str; 2];
                                scope 32 {
                                    debug res => _138;
                                }
                            }
                            scope 33 {
                                debug residual => _156;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug val => _159;
                                scope 36 {
                                }
                            }
                            scope 37 {
                                debug error_code => _175;
                                let _182: std::string::String;
                                let mut _484: &[&str; 2];
                                scope 38 {
                                    debug res => _182;
                                }
                            }
                            scope 39 {
                                debug residual => _200;
                                scope 40 {
                                }
                            }
                            scope 41 {
                                debug val => _203;
                                scope 42 {
                                }
                            }
                            scope 43 {
                                debug market_step_size => _204;
                                let _207: bool;
                                scope 44 {
                                    debug valid_step_size => _207;
                                    let _223: error::ErrorCode;
                                    let _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _272: ();
                                    let _273: u64;
                                    scope 45 {
                                        debug error_code => _223;
                                        let _230: std::string::String;
                                        let _249: std::string::String;
                                        let mut _482: &[&str; 3];
                                        let mut _483: &[&str; 2];
                                        scope 46 {
                                            debug res => _230;
                                        }
                                        scope 47 {
                                            debug res => _249;
                                        }
                                    }
                                    scope 48 {
                                        debug residual => _269;
                                        scope 49 {
                                        }
                                    }
                                    scope 50 {
                                        debug val => _272;
                                        scope 51 {
                                        }
                                    }
                                    scope 52 {
                                        debug market_tick_size => _273;
                                        let _276: bool;
                                        scope 53 {
                                            debug valid_tick_size => _276;
                                            let _292: error::ErrorCode;
                                            let _338: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _341: ();
                                            let _344: &[&[u8]];
                                            scope 54 {
                                                debug error_code => _292;
                                                let _299: std::string::String;
                                                let _318: std::string::String;
                                                let mut _480: &[&str; 3];
                                                let mut _481: &[&str; 2];
                                                scope 55 {
                                                    debug res => _299;
                                                }
                                                scope 56 {
                                                    debug res => _318;
                                                }
                                            }
                                            scope 57 {
                                                debug residual => _338;
                                                scope 58 {
                                                }
                                            }
                                            scope 59 {
                                                debug val => _341;
                                                scope 60 {
                                                }
                                            }
                                            scope 61 {
                                                debug open_orders_seeds => _344;
                                                let _368: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _371: anchor_lang::prelude::Rent;
                                                let _385: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _388: ();
                                                let _389: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
                                                let _394: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _397: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
                                                scope 62 {
                                                    debug residual => _368;
                                                    scope 63 {
                                                    }
                                                }
                                                scope 64 {
                                                    debug val => _371;
                                                    scope 65 {
                                                    }
                                                }
                                                scope 66 {
                                                    debug residual => _385;
                                                    scope 67 {
                                                    }
                                                }
                                                scope 68 {
                                                    debug val => _388;
                                                    scope 69 {
                                                    }
                                                }
                                                scope 70 {
                                                    debug open_orders => _389;
                                                    let _406: error::ErrorCode;
                                                    let _431: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _434: ();
                                                    let _449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _452: ();
                                                    let _453: anchor_lang::prelude::Pubkey;
                                                    scope 75 {
                                                        debug error_code => _406;
                                                        let _413: std::string::String;
                                                        let mut _479: &[&str; 2];
                                                        scope 76 {
                                                            debug res => _413;
                                                        }
                                                    }
                                                    scope 77 {
                                                        debug residual => _431;
                                                        scope 78 {
                                                        }
                                                    }
                                                    scope 79 {
                                                        debug val => _434;
                                                        scope 80 {
                                                        }
                                                    }
                                                    scope 81 {
                                                        debug residual => _449;
                                                        scope 82 {
                                                        }
                                                    }
                                                    scope 83 {
                                                        debug val => _452;
                                                        scope 84 {
                                                        }
                                                    }
                                                    scope 85 {
                                                        debug serum_fulfillment_config_key => _453;
                                                        let mut _455: std::cell::RefMut<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                                                        let _460: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _463: std::cell::RefMut<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                                                        scope 86 {
                                                            debug serum_fulfillment_config => _455;
                                                            let _472: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _475: state::fulfillment_params::serum::SerumV3FulfillmentConfig;
                                                            scope 91 {
                                                                debug residual => _472;
                                                                scope 92 {
                                                                }
                                                            }
                                                            scope 93 {
                                                                debug val => _475;
                                                                scope 94 {
                                                                }
                                                            }
                                                        }
                                                        scope 87 {
                                                            debug residual => _460;
                                                            scope 88 {
                                                            }
                                                        }
                                                        scope 89 {
                                                            debug val => _463;
                                                            scope 90 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 71 {
                                                    debug residual => _394;
                                                    scope 72 {
                                                    }
                                                }
                                                scope 73 {
                                                    debug val => _397;
                                                    scope 74 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _112;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _115;
                            scope 30 {
                            }
                        }
                    }
                }
            }
        }
        scope 13 {
            debug residual => _58;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _61;
            scope 16 {
            }
        }
    }
    scope 8 {
        debug residual => _46;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _49;
        scope 11 {
        }
    }

    bb0: {
        _507 = const false;
        _505 = const false;
        _506 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Ne(move _7, const _);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        goto -> bb10;
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = error::ErrorCode::InvalidSpotMarketAccount;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _487 = const _;
        _20 = &(*_487);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_9;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _27) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb6, unwind: bb229];
    }

    bb6: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb7, unwind: bb229];
    }

    bb7: {
        StorageDead(_11);
        drop(_15) -> [return: bb8, unwind: bb230];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = const "Cant add serum market to quote asset";
        _30 = &(*_31);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_32);
        _32 = _9;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _32);
        StorageDead(_32);
        StorageDead(_9);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_5);
        _33 = discriminant(_4);
        switchInt(move _33) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_37);
        _37 = ((_4 as Continue).0: ());
        _3 = _37;
        StorageDead(_37);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _488 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _43 = &((*_488).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _42 = &(*_43);
        _41 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _42) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb215;
    }

    bb16: {
        StorageDead(_42);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _40 = std::result::Result::<Ref<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _41, move _44) -> [return: bb17, unwind: bb230];
    }

    bb17: {
        StorageDead(_44);
        StorageDead(_41);
        _39 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _40) -> [return: bb18, unwind: bb230];
    }

    bb18: {
        StorageDead(_40);
        _45 = discriminant(_39);
        switchInt(move _45) -> [0: bb19, 1: bb20, otherwise: bb13];
    }

    bb19: {
        StorageLive(_49);
        _49 = move ((_39 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _38 = move _49;
        StorageDead(_49);
        _510 = discriminant(_39);
        StorageDead(_43);
        StorageDead(_39);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _489 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _55 = &((*_489).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _54 = &(*_55);
        _53 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _54) -> [return: bb22, unwind: bb228];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb21, unwind: bb245];
    }

    bb21: {
        StorageDead(_48);
        StorageDead(_46);
        _508 = discriminant(_39);
        StorageDead(_43);
        StorageDead(_39);
        goto -> bb214;
    }

    bb22: {
        StorageDead(_54);
        StorageLive(_56);
        _56 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _52 = std::result::Result::<Ref<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _53, move _56) -> [return: bb23, unwind: bb228];
    }

    bb23: {
        StorageDead(_56);
        StorageDead(_53);
        _51 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _52) -> [return: bb24, unwind: bb228];
    }

    bb24: {
        StorageDead(_52);
        _57 = discriminant(_51);
        switchInt(move _57) -> [0: bb25, 1: bb26, otherwise: bb13];
    }

    bb25: {
        StorageLive(_61);
        _61 = move ((_51 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _50 = move _61;
        StorageDead(_61);
        _514 = discriminant(_51);
        StorageDead(_55);
        StorageDead(_51);
        StorageLive(_62);
        _62 = serum_program::id() -> [return: bb28, unwind: bb227];
    }

    bb26: {
        StorageLive(_58);
        _58 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb27, unwind: bb244];
    }

    bb27: {
        StorageDead(_60);
        StorageDead(_58);
        _512 = discriminant(_51);
        StorageDead(_55);
        StorageDead(_51);
        goto -> bb213;
    }

    bb28: {
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _490 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _69 = &((*_490).3: anchor_lang::prelude::AccountInfo<'_>);
        _68 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _69) -> [return: bb29, unwind: bb227];
    }

    bb29: {
        _67 = &_68;
        StorageDead(_69);
        StorageLive(_70);
        _70 = &_62;
        _66 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _67, move _70) -> [return: bb30, unwind: bb227];
    }

    bb30: {
        switchInt(move _66) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_71);
        _71 = ();
        _65 = std::result::Result::<(), error::ErrorCode>::Ok(move _71);
        StorageDead(_71);
        goto -> bb39;
    }

    bb32: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_72);
        _72 = error::ErrorCode::InvalidSerumProgram;
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _486 = const _;
        _83 = &(*_486);
        _82 = &(*_83);
        _81 = move _82 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_82);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_72;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _90) -> [return: bb33, unwind: bb227];
    }

    bb33: {
        StorageDead(_90);
        _88 = [move _89];
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = move _86 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        _80 = Arguments::<'_>::new_v1(move _81, move _85) -> [return: bb34, unwind: bb227];
    }

    bb34: {
        StorageDead(_85);
        StorageDead(_81);
        _79 = format(move _80) -> [return: bb35, unwind: bb227];
    }

    bb35: {
        StorageDead(_80);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_83);
        _78 = move _79;
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = <String as Deref>::deref(move _76) -> [return: bb36, unwind: bb226];
    }

    bb36: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb37, unwind: bb226];
    }

    bb37: {
        StorageDead(_74);
        drop(_78) -> [return: bb38, unwind: bb227];
    }

    bb38: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_92);
        _92 = _72;
        _65 = std::result::Result::<(), error::ErrorCode>::Err(move _92);
        StorageDead(_92);
        StorageDead(_72);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_66);
        _64 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _65) -> [return: bb40, unwind: bb227];
    }

    bb40: {
        StorageDead(_65);
        _93 = discriminant(_64);
        switchInt(move _93) -> [0: bb41, 1: bb42, otherwise: bb13];
    }

    bb41: {
        StorageLive(_97);
        _97 = ((_64 as Continue).0: ());
        _63 = _97;
        StorageDead(_97);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_98);
        StorageLive(_99);
        _491 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _99 = &((*_491).4: anchor_lang::prelude::AccountInfo<'_>);
        _98 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _99) -> [return: bb44, unwind: bb227];
    }

    bb42: {
        StorageLive(_94);
        _94 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb43, unwind: bb227];
    }

    bb43: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb212;
    }

    bb44: {
        StorageDead(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _492 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _102 = &((*_492).3: anchor_lang::prelude::AccountInfo<'_>);
        _101 = &(*_102);
        StorageLive(_103);
        StorageLive(_104);
        _493 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _104 = &((*_493).4: anchor_lang::prelude::AccountInfo<'_>);
        _103 = &(*_104);
        StorageLive(_105);
        StorageLive(_106);
        _494 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _106 = &((*_494).5: anchor_lang::prelude::AccountInfo<'_>);
        _105 = &(*_106);
        _100 = SerumContext::<'_, '_> { serum_program: move _101, serum_market: move _103, serum_open_orders: move _105 };
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_100;
        _109 = SerumContext::<'_, '_>::load_serum_market(move _110) -> [return: bb45, unwind: bb227];
    }

    bb45: {
        StorageDead(_110);
        _108 = <std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode> as Try>::branch(move _109) -> [return: bb46, unwind: bb227];
    }

    bb46: {
        StorageDead(_109);
        _111 = discriminant(_108);
        switchInt(move _111) -> [0: bb47, 1: bb48, otherwise: bb13];
    }

    bb47: {
        StorageLive(_115);
        _115 = move ((_108 as Continue).0: serum_dex::state::Market<'_>);
        _507 = const true;
        _107 = move _115;
        StorageDead(_115);
        _518 = discriminant(_108);
        StorageDead(_108);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_107;
        _123 = <serum_dex::state::Market<'_> as Deref>::deref(move _124) -> [return: bb50, unwind: bb242];
    }

    bb48: {
        StorageLive(_112);
        _112 = ((_108 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb49, unwind: bb243];
    }

    bb49: {
        StorageDead(_114);
        StorageDead(_112);
        _516 = discriminant(_108);
        StorageDead(_108);
        goto -> bb211;
    }

    bb50: {
        StorageDead(_124);
        _122 = ((*_123).3: [u64; 4]);
        _121 = identity::<[u64; 4]>(move _122) -> [return: bb51, unwind: bb242];
    }

    bb51: {
        _120 = &_121;
        StorageDead(_122);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_38;
        _128 = <Ref<'_, SpotMarket> as Deref>::deref(move _129) -> [return: bb52, unwind: bb242];
    }

    bb52: {
        StorageDead(_129);
        _127 = &((*_128).2: anchor_lang::prelude::Pubkey);
        _126 = <anchor_lang::prelude::Pubkey as ToAlignedBytes>::to_aligned_bytes(move _127) -> [return: bb53, unwind: bb242];
    }

    bb53: {
        _125 = &_126;
        StorageDead(_127);
        _119 = <[u64; 4] as PartialEq>::eq(move _120, move _125) -> [return: bb54, unwind: bb242];
    }

    bb54: {
        switchInt(move _119) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_130);
        _130 = ();
        _118 = std::result::Result::<(), error::ErrorCode>::Ok(move _130);
        StorageDead(_130);
        goto -> bb64;
    }

    bb56: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_131);
        _131 = error::ErrorCode::InvalidSerumMarket;
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _485 = const _;
        _142 = &(*_485);
        _141 = &(*_142);
        _140 = move _141 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_141);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_131;
        _149 = &(*_150);
        _148 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _149) -> [return: bb57, unwind: bb242];
    }

    bb57: {
        StorageDead(_149);
        _147 = [move _148];
        StorageDead(_148);
        _146 = &_147;
        _145 = &(*_146);
        _144 = move _145 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_145);
        _139 = Arguments::<'_>::new_v1(move _140, move _144) -> [return: bb58, unwind: bb242];
    }

    bb58: {
        StorageDead(_144);
        StorageDead(_140);
        _138 = format(move _139) -> [return: bb59, unwind: bb242];
    }

    bb59: {
        StorageDead(_139);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_142);
        _137 = move _138;
        StorageDead(_138);
        _136 = &_137;
        _135 = &(*_136);
        _134 = <String as Deref>::deref(move _135) -> [return: bb60, unwind: bb225];
    }

    bb60: {
        _133 = &(*_134);
        StorageDead(_135);
        _132 = solana_program::log::sol_log(move _133) -> [return: bb61, unwind: bb225];
    }

    bb61: {
        StorageDead(_133);
        drop(_137) -> [return: bb62, unwind: bb242];
    }

    bb62: {
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_132);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = const "Invalid base mint";
        _152 = &(*_153);
        _151 = solana_program::log::sol_log(move _152) -> [return: bb63, unwind: bb242];
    }

    bb63: {
        StorageDead(_152);
        StorageDead(_153);
        StorageDead(_151);
        StorageLive(_154);
        _154 = _131;
        _118 = std::result::Result::<(), error::ErrorCode>::Err(move _154);
        StorageDead(_154);
        StorageDead(_131);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_119);
        _117 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _118) -> [return: bb65, unwind: bb242];
    }

    bb65: {
        StorageDead(_118);
        _155 = discriminant(_117);
        switchInt(move _155) -> [0: bb66, 1: bb67, otherwise: bb13];
    }

    bb66: {
        StorageLive(_159);
        _159 = ((_117 as Continue).0: ());
        _116 = _159;
        StorageDead(_159);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_107;
        _167 = <serum_dex::state::Market<'_> as Deref>::deref(move _168) -> [return: bb69, unwind: bb242];
    }

    bb67: {
        StorageLive(_156);
        _156 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb68, unwind: bb242];
    }

    bb68: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb235;
    }

    bb69: {
        StorageDead(_168);
        _166 = ((*_167).4: [u64; 4]);
        _165 = identity::<[u64; 4]>(move _166) -> [return: bb70, unwind: bb242];
    }

    bb70: {
        _164 = &_165;
        StorageDead(_166);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_50;
        _172 = <Ref<'_, SpotMarket> as Deref>::deref(move _173) -> [return: bb71, unwind: bb242];
    }

    bb71: {
        StorageDead(_173);
        _171 = &((*_172).2: anchor_lang::prelude::Pubkey);
        _170 = <anchor_lang::prelude::Pubkey as ToAlignedBytes>::to_aligned_bytes(move _171) -> [return: bb72, unwind: bb242];
    }

    bb72: {
        _169 = &_170;
        StorageDead(_171);
        _163 = <[u64; 4] as PartialEq>::eq(move _164, move _169) -> [return: bb73, unwind: bb242];
    }

    bb73: {
        switchInt(move _163) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_174);
        _174 = ();
        _162 = std::result::Result::<(), error::ErrorCode>::Ok(move _174);
        StorageDead(_174);
        goto -> bb83;
    }

    bb75: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_175);
        _175 = error::ErrorCode::InvalidSerumMarket;
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _484 = const _;
        _186 = &(*_484);
        _185 = &(*_186);
        _184 = move _185 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_185);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &_175;
        _193 = &(*_194);
        _192 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _193) -> [return: bb76, unwind: bb242];
    }

    bb76: {
        StorageDead(_193);
        _191 = [move _192];
        StorageDead(_192);
        _190 = &_191;
        _189 = &(*_190);
        _188 = move _189 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_189);
        _183 = Arguments::<'_>::new_v1(move _184, move _188) -> [return: bb77, unwind: bb242];
    }

    bb77: {
        StorageDead(_188);
        StorageDead(_184);
        _182 = format(move _183) -> [return: bb78, unwind: bb242];
    }

    bb78: {
        StorageDead(_183);
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_186);
        _181 = move _182;
        StorageDead(_182);
        _180 = &_181;
        _179 = &(*_180);
        _178 = <String as Deref>::deref(move _179) -> [return: bb79, unwind: bb224];
    }

    bb79: {
        _177 = &(*_178);
        StorageDead(_179);
        _176 = solana_program::log::sol_log(move _177) -> [return: bb80, unwind: bb224];
    }

    bb80: {
        StorageDead(_177);
        drop(_181) -> [return: bb81, unwind: bb242];
    }

    bb81: {
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_176);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = const "Invalid quote mint";
        _196 = &(*_197);
        _195 = solana_program::log::sol_log(move _196) -> [return: bb82, unwind: bb242];
    }

    bb82: {
        StorageDead(_196);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_198);
        _198 = _175;
        _162 = std::result::Result::<(), error::ErrorCode>::Err(move _198);
        StorageDead(_198);
        StorageDead(_175);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_163);
        _161 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _162) -> [return: bb84, unwind: bb242];
    }

    bb84: {
        StorageDead(_162);
        _199 = discriminant(_161);
        switchInt(move _199) -> [0: bb85, 1: bb86, otherwise: bb13];
    }

    bb85: {
        StorageLive(_203);
        _203 = ((_161 as Continue).0: ());
        _160 = _203;
        StorageDead(_203);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &_107;
        _205 = <serum_dex::state::Market<'_> as Deref>::deref(move _206) -> [return: bb88, unwind: bb242];
    }

    bb86: {
        StorageLive(_200);
        _200 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_202);
        _202 = _200;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _202) -> [return: bb87, unwind: bb242];
    }

    bb87: {
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb235;
    }

    bb88: {
        StorageDead(_206);
        _204 = ((*_205).16: u64);
        StorageDead(_205);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &_38;
        _210 = <Ref<'_, SpotMarket> as Deref>::deref(move _211) -> [return: bb89, unwind: bb242];
    }

    bb89: {
        StorageDead(_211);
        _209 = ((*_210).25: u64);
        StorageLive(_212);
        _212 = _204;
        _208 = Ge(move _209, move _212);
        switchInt(move _208) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_209);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &_38;
        _215 = <Ref<'_, SpotMarket> as Deref>::deref(move _216) -> [return: bb92, unwind: bb242];
    }

    bb91: {
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_209);
        _207 = const false;
        goto -> bb94;
    }

    bb92: {
        StorageDead(_216);
        _214 = ((*_215).25: u64);
        StorageLive(_217);
        _217 = _204;
        _213 = core::num::<impl u64>::rem_euclid(move _214, move _217) -> [return: bb93, unwind: bb242];
    }

    bb93: {
        StorageDead(_217);
        StorageDead(_214);
        _207 = Eq(move _213, const 0_u64);
        StorageDead(_215);
        StorageDead(_213);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_208);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = _207;
        switchInt(move _221) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        StorageLive(_222);
        _222 = ();
        _220 = std::result::Result::<(), error::ErrorCode>::Ok(move _222);
        StorageDead(_222);
        goto -> bb111;
    }

    bb96: {
        StorageLive(_223);
        _223 = error::ErrorCode::InvalidSerumMarket;
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _483 = const _;
        _234 = &(*_483);
        _233 = &(*_234);
        _232 = move _233 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_233);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &_223;
        _241 = &(*_242);
        _240 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _241) -> [return: bb97, unwind: bb242];
    }

    bb97: {
        StorageDead(_241);
        _239 = [move _240];
        StorageDead(_240);
        _238 = &_239;
        _237 = &(*_238);
        _236 = move _237 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_237);
        _231 = Arguments::<'_>::new_v1(move _232, move _236) -> [return: bb98, unwind: bb242];
    }

    bb98: {
        StorageDead(_236);
        StorageDead(_232);
        _230 = format(move _231) -> [return: bb99, unwind: bb242];
    }

    bb99: {
        StorageDead(_231);
        StorageDead(_242);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_234);
        _229 = move _230;
        StorageDead(_230);
        _228 = &_229;
        _227 = &(*_228);
        _226 = <String as Deref>::deref(move _227) -> [return: bb100, unwind: bb223];
    }

    bb100: {
        _225 = &(*_226);
        StorageDead(_227);
        _224 = solana_program::log::sol_log(move _225) -> [return: bb101, unwind: bb223];
    }

    bb101: {
        StorageDead(_225);
        drop(_229) -> [return: bb102, unwind: bb242];
    }

    bb102: {
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _482 = const _;
        _253 = &(*_482);
        _252 = &(*_253);
        _251 = move _252 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_252);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &_38;
        _262 = <Ref<'_, SpotMarket> as Deref>::deref(move _263) -> [return: bb103, unwind: bb242];
    }

    bb103: {
        StorageDead(_263);
        _261 = &((*_262).25: u64);
        _260 = &(*_261);
        _259 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _260) -> [return: bb104, unwind: bb242];
    }

    bb104: {
        StorageDead(_260);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = &_204;
        _265 = &(*_266);
        _264 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _265) -> [return: bb105, unwind: bb242];
    }

    bb105: {
        StorageDead(_265);
        _258 = [move _259, move _264];
        StorageDead(_264);
        StorageDead(_259);
        _257 = &_258;
        _256 = &(*_257);
        _255 = move _256 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_256);
        _250 = Arguments::<'_>::new_v1(move _251, move _255) -> [return: bb106, unwind: bb242];
    }

    bb106: {
        StorageDead(_255);
        StorageDead(_251);
        _249 = format(move _250) -> [return: bb107, unwind: bb242];
    }

    bb107: {
        StorageDead(_250);
        StorageDead(_266);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_253);
        _248 = move _249;
        StorageDead(_249);
        _247 = &_248;
        _246 = &(*_247);
        _245 = <String as Deref>::deref(move _246) -> [return: bb108, unwind: bb222];
    }

    bb108: {
        _244 = &(*_245);
        StorageDead(_246);
        _243 = solana_program::log::sol_log(move _244) -> [return: bb109, unwind: bb222];
    }

    bb109: {
        StorageDead(_244);
        drop(_248) -> [return: bb110, unwind: bb242];
    }

    bb110: {
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_243);
        StorageLive(_267);
        _267 = _223;
        _220 = std::result::Result::<(), error::ErrorCode>::Err(move _267);
        StorageDead(_267);
        StorageDead(_223);
        goto -> bb111;
    }

    bb111: {
        StorageDead(_221);
        _219 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _220) -> [return: bb112, unwind: bb242];
    }

    bb112: {
        StorageDead(_220);
        _268 = discriminant(_219);
        switchInt(move _268) -> [0: bb113, 1: bb114, otherwise: bb13];
    }

    bb113: {
        StorageLive(_272);
        _272 = ((_219 as Continue).0: ());
        _218 = _272;
        StorageDead(_272);
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &_107;
        _274 = <serum_dex::state::Market<'_> as Deref>::deref(move _275) -> [return: bb116, unwind: bb242];
    }

    bb114: {
        StorageLive(_269);
        _269 = ((_219 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_271);
        _271 = _269;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _271) -> [return: bb115, unwind: bb242];
    }

    bb115: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_219);
        StorageDead(_218);
        goto -> bb210;
    }

    bb116: {
        StorageDead(_275);
        _273 = ((*_274).17: u64);
        StorageDead(_274);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &_38;
        _279 = <Ref<'_, SpotMarket> as Deref>::deref(move _280) -> [return: bb117, unwind: bb242];
    }

    bb117: {
        StorageDead(_280);
        _278 = ((*_279).26: u64);
        StorageLive(_281);
        _281 = _273;
        _277 = Ge(move _278, move _281);
        switchInt(move _277) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = &_38;
        _284 = <Ref<'_, SpotMarket> as Deref>::deref(move _285) -> [return: bb120, unwind: bb242];
    }

    bb119: {
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_278);
        _276 = const false;
        goto -> bb122;
    }

    bb120: {
        StorageDead(_285);
        _283 = ((*_284).26: u64);
        StorageLive(_286);
        _286 = _273;
        _282 = core::num::<impl u64>::rem_euclid(move _283, move _286) -> [return: bb121, unwind: bb242];
    }

    bb121: {
        StorageDead(_286);
        StorageDead(_283);
        _276 = Eq(move _282, const 0_u64);
        StorageDead(_284);
        StorageDead(_282);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_277);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = _276;
        switchInt(move _290) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        StorageLive(_291);
        _291 = ();
        _289 = std::result::Result::<(), error::ErrorCode>::Ok(move _291);
        StorageDead(_291);
        goto -> bb139;
    }

    bb124: {
        StorageLive(_292);
        _292 = error::ErrorCode::InvalidSerumMarket;
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _481 = const _;
        _303 = &(*_481);
        _302 = &(*_303);
        _301 = move _302 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_302);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = &_292;
        _310 = &(*_311);
        _309 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _310) -> [return: bb125, unwind: bb242];
    }

    bb125: {
        StorageDead(_310);
        _308 = [move _309];
        StorageDead(_309);
        _307 = &_308;
        _306 = &(*_307);
        _305 = move _306 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_306);
        _300 = Arguments::<'_>::new_v1(move _301, move _305) -> [return: bb126, unwind: bb242];
    }

    bb126: {
        StorageDead(_305);
        StorageDead(_301);
        _299 = format(move _300) -> [return: bb127, unwind: bb242];
    }

    bb127: {
        StorageDead(_300);
        StorageDead(_311);
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_303);
        _298 = move _299;
        StorageDead(_299);
        _297 = &_298;
        _296 = &(*_297);
        _295 = <String as Deref>::deref(move _296) -> [return: bb128, unwind: bb221];
    }

    bb128: {
        _294 = &(*_295);
        StorageDead(_296);
        _293 = solana_program::log::sol_log(move _294) -> [return: bb129, unwind: bb221];
    }

    bb129: {
        StorageDead(_294);
        drop(_298) -> [return: bb130, unwind: bb242];
    }

    bb130: {
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_293);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _480 = const _;
        _322 = &(*_480);
        _321 = &(*_322);
        _320 = move _321 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_321);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_38;
        _331 = <Ref<'_, SpotMarket> as Deref>::deref(move _332) -> [return: bb131, unwind: bb242];
    }

    bb131: {
        StorageDead(_332);
        _330 = &((*_331).26: u64);
        _329 = &(*_330);
        _328 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _329) -> [return: bb132, unwind: bb242];
    }

    bb132: {
        StorageDead(_329);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = &_273;
        _334 = &(*_335);
        _333 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _334) -> [return: bb133, unwind: bb242];
    }

    bb133: {
        StorageDead(_334);
        _327 = [move _328, move _333];
        StorageDead(_333);
        StorageDead(_328);
        _326 = &_327;
        _325 = &(*_326);
        _324 = move _325 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_325);
        _319 = Arguments::<'_>::new_v1(move _320, move _324) -> [return: bb134, unwind: bb242];
    }

    bb134: {
        StorageDead(_324);
        StorageDead(_320);
        _318 = format(move _319) -> [return: bb135, unwind: bb242];
    }

    bb135: {
        StorageDead(_319);
        StorageDead(_335);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_322);
        _317 = move _318;
        StorageDead(_318);
        _316 = &_317;
        _315 = &(*_316);
        _314 = <String as Deref>::deref(move _315) -> [return: bb136, unwind: bb220];
    }

    bb136: {
        _313 = &(*_314);
        StorageDead(_315);
        _312 = solana_program::log::sol_log(move _313) -> [return: bb137, unwind: bb220];
    }

    bb137: {
        StorageDead(_313);
        drop(_317) -> [return: bb138, unwind: bb242];
    }

    bb138: {
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_312);
        StorageLive(_336);
        _336 = _292;
        _289 = std::result::Result::<(), error::ErrorCode>::Err(move _336);
        StorageDead(_336);
        StorageDead(_292);
        goto -> bb139;
    }

    bb139: {
        StorageDead(_290);
        _288 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _289) -> [return: bb140, unwind: bb242];
    }

    bb140: {
        StorageDead(_289);
        _337 = discriminant(_288);
        switchInt(move _337) -> [0: bb141, 1: bb142, otherwise: bb13];
    }

    bb141: {
        StorageLive(_341);
        _341 = ((_288 as Continue).0: ());
        _287 = _341;
        StorageDead(_341);
        StorageDead(_288);
        StorageDead(_287);
        StorageLive(_342);
        StorageLive(_343);
        _507 = const false;
        _343 = move _107;
        _342 = std::mem::drop::<serum_dex::state::Market<'_>>(move _343) -> [return: bb144, unwind: bb242];
    }

    bb142: {
        StorageLive(_338);
        _338 = ((_288 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_340);
        _340 = _338;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _340) -> [return: bb143, unwind: bb242];
    }

    bb143: {
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_288);
        StorageDead(_287);
        goto -> bb209;
    }

    bb144: {
        StorageDead(_343);
        StorageDead(_342);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _350 = const b"serum_open_orders";
        _349 = &(*_350);
        _348 = move _349 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_349);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_98;
        _352 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _353) -> [return: bb145, unwind: bb242];
    }

    bb145: {
        _351 = &(*_352);
        StorageDead(_353);
        _347 = [move _348, move _351];
        StorageDead(_351);
        StorageDead(_348);
        _346 = &_347;
        _345 = &(*_346);
        _344 = move _345 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_345);
        StorageDead(_352);
        StorageDead(_350);
        StorageDead(_346);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _495 = deref_copy (_1.0: &anchor_lang::prelude::Pubkey);
        _357 = &(*_495);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _496 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _361 = &((*_496).8: anchor_lang::prelude::Signer<'_>);
        _360 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _361) -> [return: bb146, unwind: bb242];
    }

    bb146: {
        StorageDead(_361);
        _359 = &_360;
        _358 = &(*_359);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        _366 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb147, unwind: bb219];
    }

    bb147: {
        _365 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _366) -> [return: bb148, unwind: bb219];
    }

    bb148: {
        _506 = const true;
        StorageDead(_366);
        _367 = discriminant(_365);
        switchInt(move _367) -> [0: bb149, 1: bb150, otherwise: bb13];
    }

    bb149: {
        StorageLive(_371);
        _371 = ((_365 as Continue).0: anchor_lang::prelude::Rent);
        _364 = _371;
        StorageDead(_371);
        _363 = &_364;
        _362 = &(*_363);
        StorageLive(_372);
        StorageLive(_373);
        _373 = std::mem::size_of::<serum_dex::state::OpenOrders>() -> [return: bb152, unwind: bb240];
    }

    bb150: {
        StorageLive(_368);
        _368 = move ((_365 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_370);
        _370 = move _368;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _370) -> [return: bb151, unwind: bb240];
    }

    bb151: {
        StorageDead(_370);
        StorageDead(_368);
        StorageDead(_362);
        StorageDead(_358);
        StorageDead(_357);
        StorageDead(_356);
        goto -> bb233;
    }

    bb152: {
        _374 = CheckedAdd(_373, const 12_usize);
        assert(!move (_374.1: bool), "attempt to compute `{} + {}`, which would overflow", move _373, const 12_usize) -> [success: bb153, unwind: bb240];
    }

    bb153: {
        _372 = move (_374.0: usize);
        StorageDead(_373);
        StorageLive(_375);
        StorageLive(_376);
        _376 = &_62;
        _375 = &(*_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _497 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _380 = &((*_497).10: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _379 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _380) -> [return: bb154, unwind: bb240];
    }

    bb154: {
        StorageDead(_380);
        _378 = &_379;
        _377 = &(*_378);
        StorageLive(_381);
        StorageLive(_382);
        _498 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _382 = &((*_498).5: anchor_lang::prelude::AccountInfo<'_>);
        _381 = &(*_382);
        StorageLive(_383);
        _383 = &(*_344);
        _356 = seed_and_create_pda(move _357, move _358, move _362, move _372, move _375, move _377, move _381, move _383) -> [return: bb155, unwind: bb218];
    }

    bb155: {
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_377);
        StorageDead(_375);
        StorageDead(_372);
        StorageDead(_362);
        StorageDead(_358);
        StorageDead(_357);
        _355 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _356) -> [return: bb156, unwind: bb218];
    }

    bb156: {
        StorageDead(_356);
        _384 = discriminant(_355);
        switchInt(move _384) -> [0: bb157, 1: bb158, otherwise: bb13];
    }

    bb157: {
        StorageLive(_388);
        _388 = ((_355 as Continue).0: ());
        _354 = _388;
        StorageDead(_388);
        StorageDead(_382);
        drop(_379) -> [return: bb160, unwind: bb240];
    }

    bb158: {
        StorageLive(_385);
        _385 = ((_355 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_387);
        _387 = _385;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _387) -> [return: bb159, unwind: bb218];
    }

    bb159: {
        StorageDead(_387);
        StorageDead(_385);
        StorageDead(_382);
        drop(_379) -> [return: bb206, unwind: bb240];
    }

    bb160: {
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_376);
        _520 = discriminant(_365);
        _506 = const false;
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_363);
        drop(_360) -> [return: bb161, unwind: bb242];
    }

    bb161: {
        StorageDead(_360);
        StorageDead(_359);
        StorageDead(_355);
        StorageDead(_354);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &_100;
        _391 = SerumContext::<'_, '_>::load_open_orders(move _392) -> [return: bb162, unwind: bb242];
    }

    bb162: {
        StorageDead(_392);
        _390 = <std::result::Result<Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode> as Try>::branch(move _391) -> [return: bb163, unwind: bb242];
    }

    bb163: {
        StorageDead(_391);
        _393 = discriminant(_390);
        switchInt(move _393) -> [0: bb164, 1: bb165, otherwise: bb13];
    }

    bb164: {
        StorageLive(_397);
        _397 = move ((_390 as Continue).0: std::cell::Ref<'_, serum_dex::state::OpenOrders>);
        _505 = const true;
        _389 = move _397;
        StorageDead(_397);
        _524 = discriminant(_390);
        StorageDead(_390);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &_389;
        _403 = <Ref<'_, serum_dex::state::OpenOrders> as Deref>::deref(move _404) -> [return: bb167, unwind: bb238];
    }

    bb165: {
        StorageLive(_394);
        _394 = ((_390 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_396);
        _396 = _394;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _396) -> [return: bb166, unwind: bb239];
    }

    bb166: {
        StorageDead(_396);
        StorageDead(_394);
        _522 = discriminant(_390);
        StorageDead(_390);
        goto -> bb205;
    }

    bb167: {
        StorageDead(_404);
        _402 = ((*_403).0: u64);
        _401 = Eq(move _402, const 0_u64);
        switchInt(move _401) -> [0: bb169, otherwise: bb168];
    }

    bb168: {
        StorageDead(_403);
        StorageDead(_402);
        StorageLive(_405);
        _405 = ();
        _400 = std::result::Result::<(), error::ErrorCode>::Ok(move _405);
        StorageDead(_405);
        goto -> bb177;
    }

    bb169: {
        StorageDead(_403);
        StorageDead(_402);
        StorageLive(_406);
        _406 = error::ErrorCode::InvalidSerumOpenOrders;
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _479 = const _;
        _417 = &(*_479);
        _416 = &(*_417);
        _415 = move _416 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_416);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &_406;
        _424 = &(*_425);
        _423 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _424) -> [return: bb170, unwind: bb238];
    }

    bb170: {
        StorageDead(_424);
        _422 = [move _423];
        StorageDead(_423);
        _421 = &_422;
        _420 = &(*_421);
        _419 = move _420 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_420);
        _414 = Arguments::<'_>::new_v1(move _415, move _419) -> [return: bb171, unwind: bb238];
    }

    bb171: {
        StorageDead(_419);
        StorageDead(_415);
        _413 = format(move _414) -> [return: bb172, unwind: bb238];
    }

    bb172: {
        StorageDead(_414);
        StorageDead(_425);
        StorageDead(_422);
        StorageDead(_421);
        StorageDead(_417);
        _412 = move _413;
        StorageDead(_413);
        _411 = &_412;
        _410 = &(*_411);
        _409 = <String as Deref>::deref(move _410) -> [return: bb173, unwind: bb217];
    }

    bb173: {
        _408 = &(*_409);
        StorageDead(_410);
        _407 = solana_program::log::sol_log(move _408) -> [return: bb174, unwind: bb217];
    }

    bb174: {
        StorageDead(_408);
        drop(_412) -> [return: bb175, unwind: bb238];
    }

    bb175: {
        StorageDead(_412);
        StorageDead(_411);
        StorageDead(_409);
        StorageDead(_407);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        _428 = const "Serum open orders already initialized";
        _427 = &(*_428);
        _426 = solana_program::log::sol_log(move _427) -> [return: bb176, unwind: bb238];
    }

    bb176: {
        StorageDead(_427);
        StorageDead(_428);
        StorageDead(_426);
        StorageLive(_429);
        _429 = _406;
        _400 = std::result::Result::<(), error::ErrorCode>::Err(move _429);
        StorageDead(_429);
        StorageDead(_406);
        goto -> bb177;
    }

    bb177: {
        StorageDead(_401);
        _399 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _400) -> [return: bb178, unwind: bb238];
    }

    bb178: {
        StorageDead(_400);
        _430 = discriminant(_399);
        switchInt(move _430) -> [0: bb179, 1: bb180, otherwise: bb13];
    }

    bb179: {
        StorageLive(_434);
        _434 = ((_399 as Continue).0: ());
        _398 = _434;
        StorageDead(_434);
        StorageDead(_399);
        StorageDead(_398);
        StorageLive(_435);
        StorageLive(_436);
        _505 = const false;
        _436 = move _389;
        _435 = std::mem::drop::<Ref<'_, serum_dex::state::OpenOrders>>(move _436) -> [return: bb182, unwind: bb238];
    }

    bb180: {
        StorageLive(_431);
        _431 = ((_399 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_433);
        _433 = _431;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _433) -> [return: bb181, unwind: bb238];
    }

    bb181: {
        StorageDead(_433);
        StorageDead(_431);
        StorageDead(_399);
        StorageDead(_398);
        goto -> bb232;
    }

    bb182: {
        StorageDead(_436);
        StorageDead(_435);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = &_100;
        StorageLive(_441);
        StorageLive(_442);
        _499 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _442 = &((*_499).6: anchor_lang::prelude::AccountInfo<'_>);
        _441 = &(*_442);
        StorageLive(_443);
        StorageLive(_444);
        _500 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _444 = &((*_500).9: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _443 = &(*_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _501 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _502 = deref_copy ((*_501).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _538 = (((_502.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _447 = &(*_538);
        _446 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _447) -> [return: bb183, unwind: bb238];
    }

    bb183: {
        StorageDead(_447);
        _445 = ((*_446).15: u8);
        _439 = SerumContext::<'_, '_>::invoke_init_open_orders(move _440, move _441, move _443, move _445) -> [return: bb184, unwind: bb238];
    }

    bb184: {
        StorageDead(_445);
        StorageDead(_443);
        StorageDead(_441);
        StorageDead(_440);
        _438 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _439) -> [return: bb185, unwind: bb238];
    }

    bb185: {
        StorageDead(_439);
        _448 = discriminant(_438);
        switchInt(move _448) -> [0: bb186, 1: bb187, otherwise: bb13];
    }

    bb186: {
        StorageLive(_452);
        _452 = ((_438 as Continue).0: ());
        _437 = _452;
        StorageDead(_452);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_438);
        StorageDead(_437);
        StorageLive(_453);
        StorageLive(_454);
        _503 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _454 = &((*_503).7: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>);
        _453 = <anchor_lang::prelude::AccountLoader<'_, SerumV3FulfillmentConfig> as anchor_lang::Key>::key(move _454) -> [return: bb189, unwind: bb238];
    }

    bb187: {
        StorageLive(_449);
        _449 = ((_438 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_451);
        _451 = _449;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _451) -> [return: bb188, unwind: bb238];
    }

    bb188: {
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_438);
        StorageDead(_437);
        goto -> bb232;
    }

    bb189: {
        StorageDead(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _504 = deref_copy (_1.1: &mut instructions::admin::InitializeSerumFulfillmentConfig<'_>);
        _458 = &((*_504).7: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>);
        _457 = anchor_lang::prelude::AccountLoader::<'_, SerumV3FulfillmentConfig>::load_init(move _458) -> [return: bb190, unwind: bb238];
    }

    bb190: {
        StorageDead(_458);
        _456 = <std::result::Result<RefMut<'_, SerumV3FulfillmentConfig>, anchor_lang::error::Error> as Try>::branch(move _457) -> [return: bb191, unwind: bb238];
    }

    bb191: {
        StorageDead(_457);
        _459 = discriminant(_456);
        switchInt(move _459) -> [0: bb192, 1: bb193, otherwise: bb13];
    }

    bb192: {
        StorageLive(_463);
        _463 = move ((_456 as Continue).0: std::cell::RefMut<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>);
        _455 = move _463;
        StorageDead(_463);
        _526 = discriminant(_456);
        StorageDead(_456);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = &_100;
        StorageLive(_468);
        StorageLive(_469);
        _469 = &_453;
        _468 = &(*_469);
        StorageLive(_470);
        _470 = _2;
        _466 = SerumContext::<'_, '_>::to_serum_v3_fulfillment_config(move _467, move _468, move _470) -> [return: bb195, unwind: bb216];
    }

    bb193: {
        StorageLive(_460);
        _460 = move ((_456 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_462);
        _462 = move _460;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _462) -> [return: bb194, unwind: bb236];
    }

    bb194: {
        StorageDead(_462);
        StorageDead(_460);
        _528 = discriminant(_456);
        StorageDead(_456);
        goto -> bb204;
    }

    bb195: {
        StorageDead(_470);
        StorageDead(_468);
        StorageDead(_467);
        _465 = <std::result::Result<SerumV3FulfillmentConfig, error::ErrorCode> as Try>::branch(move _466) -> [return: bb196, unwind: bb216];
    }

    bb196: {
        StorageDead(_466);
        _471 = discriminant(_465);
        switchInt(move _471) -> [0: bb197, 1: bb198, otherwise: bb13];
    }

    bb197: {
        StorageLive(_475);
        _475 = ((_465 as Continue).0: state::fulfillment_params::serum::SerumV3FulfillmentConfig);
        _464 = _475;
        StorageDead(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = &mut _455;
        _476 = <RefMut<'_, SerumV3FulfillmentConfig> as DerefMut>::deref_mut(move _477) -> [return: bb200, unwind: bb216];
    }

    bb198: {
        StorageLive(_472);
        _472 = ((_465 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_474);
        _474 = _472;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _474) -> [return: bb199, unwind: bb216];
    }

    bb199: {
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_464);
        StorageDead(_469);
        StorageDead(_465);
        drop(_455) -> [return: bb204, unwind: bb238];
    }

    bb200: {
        StorageDead(_477);
        (*_476) = move _464;
        StorageDead(_464);
        StorageDead(_476);
        StorageDead(_469);
        StorageDead(_465);
        StorageLive(_478);
        _478 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _478);
        StorageDead(_478);
        drop(_455) -> [return: bb201, unwind: bb238];
    }

    bb201: {
        StorageDead(_455);
        StorageDead(_453);
        _505 = const false;
        StorageDead(_389);
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_207);
        StorageDead(_204);
        _507 = const false;
        StorageDead(_107);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_62);
        drop(_50) -> [return: bb202, unwind: bb228];
    }

    bb202: {
        StorageDead(_50);
        drop(_38) -> [return: bb203, unwind: bb230];
    }

    bb203: {
        StorageDead(_38);
        goto -> bb215;
    }

    bb204: {
        StorageDead(_455);
        StorageDead(_453);
        goto -> bb232;
    }

    bb205: {
        _505 = const false;
        StorageDead(_389);
        goto -> bb208;
    }

    bb206: {
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_376);
        goto -> bb233;
    }

    bb207: {
        StorageDead(_360);
        StorageDead(_359);
        StorageDead(_355);
        StorageDead(_354);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_347);
        StorageDead(_344);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_276);
        StorageDead(_273);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_207);
        StorageDead(_204);
        goto -> bb235;
    }

    bb211: {
        _507 = const false;
        StorageDead(_107);
        StorageDead(_100);
        StorageDead(_98);
        goto -> bb212;
    }

    bb212: {
        StorageDead(_62);
        drop(_50) -> [return: bb213, unwind: bb228];
    }

    bb213: {
        StorageDead(_50);
        drop(_38) -> [return: bb214, unwind: bb230];
    }

    bb214: {
        StorageDead(_38);
        goto -> bb215;
    }

    bb215: {
        return;
    }

    bb216 (cleanup): {
        drop(_455) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        drop(_412) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        drop(_379) -> [return: bb240, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        drop(_360) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        drop(_317) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        drop(_298) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_248) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_229) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        drop(_181) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        drop(_137) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        drop(_78) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        drop(_50) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        drop(_38) -> [return: bb230, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        drop(_15) -> [return: bb230, unwind terminate(cleanup)];
    }

    bb230 (cleanup): {
        resume;
    }

    bb231: {
        drop(_389) -> [return: bb205, unwind: bb242];
    }

    bb232: {
        switchInt(_505) -> [0: bb205, otherwise: bb231];
    }

    bb233: {
        _530 = discriminant(_365);
        _506 = const false;
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_363);
        drop(_360) -> [return: bb207, unwind: bb242];
    }

    bb234: {
        drop(_107) -> [return: bb211, unwind: bb227];
    }

    bb235: {
        switchInt(_507) -> [0: bb211, otherwise: bb234];
    }

    bb236 (cleanup): {
        _532 = discriminant(_456);
        goto -> bb238;
    }

    bb237 (cleanup): {
        drop(_389) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        switchInt(_505) -> [0: bb242, otherwise: bb237];
    }

    bb239 (cleanup): {
        _533 = discriminant(_390);
        goto -> bb242;
    }

    bb240 (cleanup): {
        _534 = discriminant(_365);
        goto -> bb219;
    }

    bb241 (cleanup): {
        drop(_107) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb242 (cleanup): {
        switchInt(_507) -> [0: bb227, otherwise: bb241];
    }

    bb243 (cleanup): {
        _535 = discriminant(_108);
        goto -> bb227;
    }

    bb244 (cleanup): {
        _536 = discriminant(_51);
        goto -> bb228;
    }

    bb245 (cleanup): {
        _537 = discriminant(_39);
        goto -> bb230;
    }
}

alloc171 (size: 17, align: 1) {
    0x00 │ 73 65 72 75 6d 5f 6f 70 65 6e 5f 6f 72 64 65 72 │ serum_open_order
    0x10 │ 73                                              │ s
}
