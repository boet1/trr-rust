// MIR for `instructions::user::handle_place_and_take_perp_order` before PreCodegen

fn instructions::user::handle_place_and_take_perp_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::PlaceAndTake<'_>>, _2: order_params::OrderParams, _3: Option<u32>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    debug optional_params => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _8: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: anchor_lang::prelude::Clock;
    let mut _24: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _25: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _26: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _30: instructions::optional_accounts::AccountMaps<'_>;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _32: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _33: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _34: &std::collections::BTreeSet<u16>;
    let _35: &std::collections::BTreeSet<u16>;
    let _36: std::collections::BTreeSet<u16>;
    let mut _37: u16;
    let mut _38: &std::collections::BTreeSet<u16>;
    let _39: &std::collections::BTreeSet<u16>;
    let _40: std::collections::BTreeSet<u16>;
    let mut _41: u64;
    let mut _42: std::option::Option<state::state::OracleGuardRails>;
    let mut _43: state::state::OracleGuardRails;
    let mut _44: &state::state::State;
    let mut _45: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _51: ();
    let mut _52: bool;
    let mut _53: &state::order_params::PostOnlyParam;
    let mut _54: &state::order_params::PostOnlyParam;
    let _55: state::order_params::PostOnlyParam;
    let mut _56: !;
    let _57: ();
    let mut _58: &str;
    let _59: &str;
    let mut _60: anchor_lang::error::Error;
    let mut _61: error::ErrorCode;
    let mut _62: &{closure@programs/drift/src/error.rs:647:9: 647:11};
    let _63: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _64: ();
    let mut _67: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>);
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>)>;
    let mut _69: std::result::Result<(state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>), error::ErrorCode>;
    let mut _70: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>>;
    let mut _78: std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>, error::ErrorCode>;
    let mut _79: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: &state::order_params::OrderParams;
    let _87: i128;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _89: std::result::Result<i128, error::ErrorCode>;
    let mut _90: u16;
    let mut _91: &state::perp_market_map::PerpMarketMap<'_>;
    let _92: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _93: &mut state::oracle_map::OracleMap<'_>;
    let mut _94: &mut state::oracle_map::OracleMap<'_>;
    let mut _95: &state::state::State;
    let _96: &state::state::State;
    let mut _97: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _98: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _99: &anchor_lang::prelude::Clock;
    let _100: &anchor_lang::prelude::Clock;
    let _101: anchor_lang::prelude::Clock;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _103: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _118: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _119: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _120: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _121: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _129: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _137: (u8, u8);
    let mut _138: std::option::Option<u32>;
    let _139: ();
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _141: std::result::Result<(), error::ErrorCode>;
    let mut _142: &state::state::State;
    let _143: &state::state::State;
    let mut _144: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _145: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _146: &mut state::user::User;
    let mut _147: &mut state::user::User;
    let mut _148: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _149: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _150: anchor_lang::prelude::Pubkey;
    let mut _151: &state::perp_market_map::PerpMarketMap<'_>;
    let _152: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _153: &state::spot_market_map::SpotMarketMap<'_>;
    let _154: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _155: &mut state::oracle_map::OracleMap<'_>;
    let mut _156: &mut state::oracle_map::OracleMap<'_>;
    let mut _157: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _158: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _159: &anchor_lang::prelude::Clock;
    let _160: &anchor_lang::prelude::Clock;
    let mut _161: state::order_params::OrderParams;
    let mut _162: state::order_params::PlaceOrderOptions;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _168: ();
    let mut _169: std::cell::RefMut<'_, state::user::User>;
    let mut _172: &state::user::User;
    let _173: &state::user::User;
    let mut _174: &std::cell::Ref<'_, state::user::User>;
    let _175: std::cell::Ref<'_, state::user::User>;
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _177: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _178: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _179: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _180: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _187: (u64, u64);
    let mut _188: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _189: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _190: u32;
    let mut _191: &state::state::State;
    let _192: &state::state::State;
    let mut _193: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _194: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _195: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _196: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _197: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _198: &state::spot_market_map::SpotMarketMap<'_>;
    let _199: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _200: &state::perp_market_map::PerpMarketMap<'_>;
    let _201: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _202: &mut state::oracle_map::OracleMap<'_>;
    let mut _203: &mut state::oracle_map::OracleMap<'_>;
    let mut _204: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _205: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _206: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _207: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _208: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _209: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _210: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _211: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _212: &state::user_map::UserMap<'_>;
    let _213: &state::user_map::UserMap<'_>;
    let mut _214: &state::user_map::UserStatsMap<'_>;
    let _215: &state::user_map::UserStatsMap<'_>;
    let mut _216: std::option::Option<u32>;
    let mut _217: &anchor_lang::prelude::Clock;
    let _218: &anchor_lang::prelude::Clock;
    let _219: anchor_lang::prelude::Clock;
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _221: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _222: isize;
    let mut _224: !;
    let mut _225: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _227: state::fill_mode::FillMode;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: &std::option::Option<u32>;
    let mut _231: u8;
    let mut _232: isize;
    let mut _234: !;
    let mut _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _238: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _239: std::slice::Iter<'_, state::user::Order>;
    let mut _240: &[state::user::Order];
    let mut _241: &[state::user::Order; 32];
    let _242: &state::user::User;
    let mut _243: &std::cell::Ref<'_, state::user::User>;
    let _244: std::cell::Ref<'_, state::user::User>;
    let mut _245: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _246: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _247: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _248: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _249: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _250: isize;
    let mut _252: !;
    let mut _253: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _255: {closure@programs/drift/src/instructions/user.rs:2356:14: 2356:21};
    let mut _256: &u32;
    let _257: ();
    let mut _258: bool;
    let mut _259: bool;
    let _260: ();
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _262: std::result::Result<(), error::ErrorCode>;
    let mut _263: u32;
    let mut _264: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _265: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _266: &state::perp_market_map::PerpMarketMap<'_>;
    let _267: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _268: &state::spot_market_map::SpotMarketMap<'_>;
    let _269: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _270: &mut state::oracle_map::OracleMap<'_>;
    let mut _271: &mut state::oracle_map::OracleMap<'_>;
    let mut _272: &anchor_lang::prelude::Clock;
    let _273: &anchor_lang::prelude::Clock;
    let _274: anchor_lang::prelude::Clock;
    let mut _275: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _276: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _282: isize;
    let mut _284: !;
    let mut _285: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _287: ();
    let mut _288: bool;
    let mut _289: u8;
    let mut _290: u8;
    let mut _291: isize;
    let mut _292: (isize, bool);
    let _293: ();
    let mut _294: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _295: std::result::Result<(), error::ErrorCode>;
    let mut _296: bool;
    let mut _297: u64;
    let mut _298: ();
    let _300: ();
    let mut _301: &str;
    let _302: &str;
    let mut _303: &std::string::String;
    let _304: &std::string::String;
    let _305: std::string::String;
    let mut _307: std::fmt::Arguments<'_>;
    let mut _308: &[&str];
    let mut _309: &[&str; 2];
    let _310: &[&str; 2];
    let _311: [&str; 2];
    let mut _312: &[core::fmt::rt::Argument<'_>];
    let mut _313: &[core::fmt::rt::Argument<'_>; 1];
    let _314: &[core::fmt::rt::Argument<'_>; 1];
    let _315: [core::fmt::rt::Argument<'_>; 1];
    let mut _316: core::fmt::rt::Argument<'_>;
    let mut _317: &error::ErrorCode;
    let _318: &error::ErrorCode;
    let _319: ();
    let mut _320: &str;
    let _321: &str;
    let mut _322: error::ErrorCode;
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _328: bool;
    let mut _329: u8;
    let mut _330: u8;
    let mut _331: isize;
    let mut _332: (isize, bool);
    let _333: ();
    let mut _334: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _335: std::result::Result<(), error::ErrorCode>;
    let mut _336: bool;
    let mut _337: u64;
    let mut _338: bool;
    let mut _339: ();
    let _341: ();
    let mut _342: &str;
    let _343: &str;
    let mut _344: &std::string::String;
    let _345: &std::string::String;
    let _346: std::string::String;
    let mut _348: std::fmt::Arguments<'_>;
    let mut _349: &[&str];
    let mut _350: &[&str; 2];
    let _351: &[&str; 2];
    let _352: [&str; 2];
    let mut _353: &[core::fmt::rt::Argument<'_>];
    let mut _354: &[core::fmt::rt::Argument<'_>; 1];
    let _355: &[core::fmt::rt::Argument<'_>; 1];
    let _356: [core::fmt::rt::Argument<'_>; 1];
    let mut _357: core::fmt::rt::Argument<'_>;
    let mut _358: &error::ErrorCode;
    let _359: &error::ErrorCode;
    let _360: ();
    let mut _361: &str;
    let _362: &str;
    let mut _363: error::ErrorCode;
    let mut _364: isize;
    let mut _366: !;
    let mut _367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _369: ();
    let mut _374: &mut instructions::user::PlaceAndTake<'_>;
    let mut _375: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _376: &mut instructions::user::PlaceAndTake<'_>;
    let mut _377: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _378: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _379: &mut instructions::user::PlaceAndTake<'_>;
    let mut _380: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _381: &mut instructions::user::PlaceAndTake<'_>;
    let mut _382: &mut instructions::user::PlaceAndTake<'_>;
    let mut _383: &mut instructions::user::PlaceAndTake<'_>;
    let mut _384: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _385: &mut instructions::user::PlaceAndTake<'_>;
    let mut _386: &mut instructions::user::PlaceAndTake<'_>;
    let mut _387: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _388: &mut instructions::user::PlaceAndTake<'_>;
    let mut _389: &mut instructions::user::PlaceAndTake<'_>;
    let mut _390: &mut instructions::user::PlaceAndTake<'_>;
    let mut _391: &mut instructions::user::PlaceAndTake<'_>;
    let mut _392: bool;
    let mut _393: bool;
    let mut _394: bool;
    let mut _395: bool;
    let mut _396: bool;
    let mut _397: bool;
    let mut _398: bool;
    let mut _399: bool;
    let mut _400: bool;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _459: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _460: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _461: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _462: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _14;
        let _22: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _22;
            let _23: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
            scope 11 {
                debug remaining_accounts_iter => _23;
                let _27: state::perp_market_map::PerpMarketMap<'_>;
                let _28: state::spot_market_map::SpotMarketMap<'_>;
                let mut _29: state::oracle_map::OracleMap<'_>;
                let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _50: instructions::optional_accounts::AccountMaps<'_>;
                scope 12 {
                    debug perp_market_map => _27;
                    debug spot_market_map => _28;
                    debug oracle_map => _29;
                    let _65: state::user_map::UserMap<'_>;
                    let _66: state::user_map::UserStatsMap<'_>;
                    let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _75: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>);
                    let mut _370: &{closure@programs/drift/src/error.rs:647:9: 647:11};
                    let mut _373: &state::order_params::PostOnlyParam;
                    scope 17 {
                        debug makers_and_referrer => _65;
                        debug makers_and_referrer_stats => _66;
                        let _76: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                        let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _84: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                        scope 22 {
                            debug high_leverage_mode_config => _76;
                            let _85: bool;
                            scope 27 {
                                debug is_immediate_or_cancel => _85;
                                let _105: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _108: anchor_lang::prelude::Clock;
                                let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _113: i128;
                                let _114: anchor_lang::prelude::Pubkey;
                                scope 28 {
                                    debug residual => _105;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug val => _108;
                                    scope 31 {
                                    }
                                }
                                scope 32 {
                                    debug residual => _110;
                                    scope 33 {
                                    }
                                }
                                scope 34 {
                                    debug val => _113;
                                    scope 35 {
                                    }
                                }
                                scope 36 {
                                    debug user_key => _114;
                                    let mut _116: std::cell::RefMut<'_, state::user::User>;
                                    let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _126: std::cell::RefMut<'_, state::user::User>;
                                    scope 37 {
                                        debug user => _116;
                                        let _127: anchor_lang::prelude::Clock;
                                        let _131: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _134: anchor_lang::prelude::Clock;
                                        scope 42 {
                                            debug clock => _127;
                                            let _135: u8;
                                            let _136: u8;
                                            scope 47 {
                                                debug success_condition => _135;
                                                debug auction_duration_percentage => _136;
                                                let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _167: ();
                                                let _170: &mut anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                                scope 48 {
                                                    debug residual => _164;
                                                    scope 49 {
                                                    }
                                                }
                                                scope 50 {
                                                    debug val => _167;
                                                    scope 51 {
                                                    }
                                                }
                                                scope 52 {
                                                    debug user => _170;
                                                    let _171: u32;
                                                    let _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _185: std::cell::Ref<'_, state::user::User>;
                                                    scope 53 {
                                                        debug order_id => _171;
                                                        let _186: u64;
                                                        let _223: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                        let _226: anchor_lang::prelude::Clock;
                                                        let _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _236: (u64, u64);
                                                        scope 58 {
                                                            debug base_asset_amount_filled => _186;
                                                            let _237: bool;
                                                            let _251: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _254: std::cell::Ref<'_, state::user::User>;
                                                            scope 67 {
                                                                debug order_unfilled => _237;
                                                                let _278: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                let _281: anchor_lang::prelude::Clock;
                                                                let _283: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _286: ();
                                                                let _299: error::ErrorCode;
                                                                let _324: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _327: ();
                                                                let _340: error::ErrorCode;
                                                                let _365: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _368: ();
                                                                scope 72 {
                                                                    debug residual => _278;
                                                                    scope 73 {
                                                                    }
                                                                }
                                                                scope 74 {
                                                                    debug val => _281;
                                                                    scope 75 {
                                                                    }
                                                                }
                                                                scope 76 {
                                                                    debug residual => _283;
                                                                    scope 77 {
                                                                    }
                                                                }
                                                                scope 78 {
                                                                    debug val => _286;
                                                                    scope 79 {
                                                                    }
                                                                }
                                                                scope 80 {
                                                                    debug error_code => _299;
                                                                    let _306: std::string::String;
                                                                    let mut _371: &[&str; 2];
                                                                    scope 81 {
                                                                        debug res => _306;
                                                                    }
                                                                }
                                                                scope 82 {
                                                                    debug residual => _324;
                                                                    scope 83 {
                                                                    }
                                                                }
                                                                scope 84 {
                                                                    debug val => _327;
                                                                    scope 85 {
                                                                    }
                                                                }
                                                                scope 86 {
                                                                    debug error_code => _340;
                                                                    let _347: std::string::String;
                                                                    let mut _372: &[&str; 2];
                                                                    scope 87 {
                                                                        debug res => _347;
                                                                    }
                                                                }
                                                                scope 88 {
                                                                    debug residual => _365;
                                                                    scope 89 {
                                                                    }
                                                                }
                                                                scope 90 {
                                                                    debug val => _368;
                                                                    scope 91 {
                                                                    }
                                                                }
                                                            }
                                                            scope 68 {
                                                                debug residual => _251;
                                                                scope 69 {
                                                                }
                                                            }
                                                            scope 70 {
                                                                debug val => _254;
                                                                scope 71 {
                                                                }
                                                            }
                                                        }
                                                        scope 59 {
                                                            debug residual => _223;
                                                            scope 60 {
                                                            }
                                                        }
                                                        scope 61 {
                                                            debug val => _226;
                                                            scope 62 {
                                                            }
                                                        }
                                                        scope 63 {
                                                            debug residual => _233;
                                                            scope 64 {
                                                            }
                                                        }
                                                        scope 65 {
                                                            debug val => _236;
                                                            scope 66 {
                                                            }
                                                        }
                                                    }
                                                    scope 54 {
                                                        debug residual => _182;
                                                        scope 55 {
                                                        }
                                                    }
                                                    scope 56 {
                                                        debug val => _185;
                                                        scope 57 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _131;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _134;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _123;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _126;
                                        scope 41 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _81;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _84;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _72;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _75;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _47;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _50;
                    scope 16 {
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        _396 = const false;
        _398 = const false;
        _397 = const false;
        _400 = const false;
        _395 = const false;
        _394 = const false;
        _399 = const false;
        _393 = const false;
        _392 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _374 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _8 = &((*_374).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _375 = deref_copy (*_8);
        _458 = (((_375.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _7 = &(*_458);
        _6 = constraints::fill_not_paused(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb196];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _401 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb215];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _443 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb183;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb196];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _403 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _376 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _22 = &((*_376).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _377 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _26 = &(*_377);
        _25 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _26) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb214];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _441 = discriminant(_15);
        StorageDead(_15);
        goto -> bb182;
    }

    bb12: {
        StorageDead(_26);
        _24 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        _23 = &mut _24;
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_23);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = (_2.6: u16);
        _36 = get_writable_perp_market_set(move _37) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = BTreeSet::<u16>::new() -> [return: bb15, unwind: bb195];
    }

    bb15: {
        _39 = &_40;
        _38 = &(*_39);
        StorageLive(_41);
        _41 = (_14.0: u64);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _378 = deref_copy (*_22);
        _459 = (((_378.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _45 = &(*_459);
        _44 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _45) -> [return: bb16, unwind: bb194];
    }

    bb16: {
        StorageDead(_45);
        _43 = ((*_44).7: state::state::OracleGuardRails);
        _42 = Option::<state::state::OracleGuardRails>::Some(move _43);
        StorageDead(_43);
        _32 = load_maps(move _33, move _34, move _38, move _41, move _42) -> [return: bb17, unwind: bb194];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _32) -> [return: bb18, unwind: bb194];
    }

    bb18: {
        StorageDead(_32);
        _46 = discriminant(_31);
        switchInt(move _46) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_50);
        _50 = move ((_31 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _30 = move _50;
        StorageDead(_50);
        StorageLive(_27);
        _27 = move (_30.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_28);
        _28 = move (_30.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_29);
        _29 = move (_30.2: state::oracle_map::OracleMap<'_>);
        _407 = discriminant(_31);
        StorageDead(_44);
        drop(_40) -> [return: bb22, unwind: bb190];
    }

    bb20: {
        StorageLive(_47);
        _47 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb21, unwind: bb213];
    }

    bb21: {
        StorageDead(_49);
        StorageDead(_47);
        _405 = discriminant(_31);
        StorageDead(_44);
        drop(_40) -> [return: bb179, unwind: bb195];
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_39);
        drop(_36) -> [return: bb23, unwind: bb191];
    }

    bb23: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(_2.8: state::order_params::PostOnlyParam);
        StorageLive(_54);
        _373 = const _;
        _54 = &(*_373);
        _52 = <PostOnlyParam as PartialEq>::ne(move _53, move _54) -> [return: bb24, unwind: bb191];
    }

    bb24: {
        switchInt(move _52) -> [0: bb29, otherwise: bb25];
    }

    bb25: {
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = const "post_only cant be used in place_and_take";
        _58 = &(*_59);
        _57 = solana_program::log::sol_log(move _58) -> [return: bb26, unwind: bb191];
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _370 = const _;
        _62 = &(*_370);
        StorageLive(_64);
        _64 = ();
        _61 = <{closure@programs/drift/src/error.rs:647:9: 647:11} as Fn<()>>::call(move _62, move _64) -> [return: bb27, unwind: bb191];
    }

    bb27: {
        StorageDead(_64);
        StorageDead(_62);
        _60 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _61) -> [return: bb28, unwind: bb191];
    }

    bb28: {
        StorageDead(_61);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _60);
        StorageDead(_60);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb175;
    }

    bb29: {
        StorageDead(_54);
        StorageDead(_53);
        _51 = const ();
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &mut (*_23);
        _69 = load_user_maps::<'_, '_>(move _70, const true) -> [return: bb30, unwind: bb191];
    }

    bb30: {
        StorageDead(_70);
        _68 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as Try>::branch(move _69) -> [return: bb31, unwind: bb191];
    }

    bb31: {
        StorageDead(_69);
        _71 = discriminant(_68);
        switchInt(move _71) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_75);
        _75 = move ((_68 as Continue).0: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>));
        _67 = move _75;
        StorageDead(_75);
        StorageLive(_65);
        _65 = move (_67.0: state::user_map::UserMap<'_>);
        StorageLive(_66);
        _66 = move (_67.1: state::user_map::UserStatsMap<'_>);
        _411 = discriminant(_68);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &mut (*_23);
        _78 = get_high_leverage_mode_config(move _79) -> [return: bb35, unwind: bb188];
    }

    bb33: {
        StorageLive(_72);
        _72 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb34, unwind: bb212];
    }

    bb34: {
        StorageDead(_74);
        StorageDead(_72);
        _409 = discriminant(_68);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb175;
    }

    bb35: {
        StorageDead(_79);
        _77 = <std::result::Result<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode> as Try>::branch(move _78) -> [return: bb36, unwind: bb188];
    }

    bb36: {
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_84);
        _84 = move ((_77 as Continue).0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>);
        _76 = move _84;
        StorageDead(_84);
        StorageDead(_77);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_2;
        _85 = order_params::OrderParams::is_immediate_or_cancel(move _86) -> [return: bb40, unwind: bb188];
    }

    bb38: {
        StorageLive(_81);
        _81 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb39, unwind: bb188];
    }

    bb39: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_77);
        goto -> bb172;
    }

    bb40: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = (_2.6: u16);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_27;
        _91 = &(*_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &mut _29;
        _93 = &mut (*_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _379 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _98 = &((*_379).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _380 = deref_copy (*_98);
        _460 = (((_380.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _97 = &(*_460);
        _96 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _97) -> [return: bb41, unwind: bb188];
    }

    bb41: {
        _95 = &(*_96);
        StorageDead(_97);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb42, unwind: bb188];
    }

    bb42: {
        _102 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _103) -> [return: bb43, unwind: bb188];
    }

    bb43: {
        _397 = const true;
        _398 = const true;
        StorageDead(_103);
        _104 = discriminant(_102);
        switchInt(move _104) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_108);
        _108 = move ((_102 as Continue).0: anchor_lang::prelude::Clock);
        _101 = move _108;
        StorageDead(_108);
        _100 = &_101;
        _99 = &(*_100);
        _89 = update_amm(move _90, move _91, move _93, move _95, move _99) -> [return: bb47, unwind: bb211];
    }

    bb45: {
        StorageLive(_105);
        _105 = move ((_102 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_107);
        _107 = move _105;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _107) -> [return: bb46, unwind: bb211];
    }

    bb46: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb202;
    }

    bb47: {
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_90);
        _88 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _89) -> [return: bb48, unwind: bb211];
    }

    bb48: {
        StorageDead(_89);
        _109 = discriminant(_88);
        switchInt(move _109) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_113);
        _113 = ((_88 as Continue).0: i128);
        _87 = _113;
        StorageDead(_113);
        _413 = discriminant(_102);
        _397 = const false;
        _398 = const false;
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_114);
        StorageLive(_115);
        _381 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _115 = &((*_381).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _114 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _115) -> [return: bb52, unwind: bb188];
    }

    bb50: {
        StorageLive(_110);
        _110 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb51, unwind: bb211];
    }

    bb51: {
        StorageDead(_112);
        StorageDead(_110);
        goto -> bb202;
    }

    bb52: {
        StorageDead(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _382 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _120 = &((*_382).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _119 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _120) -> [return: bb53, unwind: bb188];
    }

    bb53: {
        StorageDead(_120);
        StorageLive(_121);
        _121 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _118 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _119, move _121) -> [return: bb54, unwind: bb188];
    }

    bb54: {
        StorageDead(_121);
        StorageDead(_119);
        _117 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _118) -> [return: bb55, unwind: bb188];
    }

    bb55: {
        StorageDead(_118);
        _122 = discriminant(_117);
        switchInt(move _122) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_126);
        _126 = move ((_117 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _396 = const true;
        _116 = move _126;
        StorageDead(_126);
        _417 = discriminant(_117);
        StorageDead(_117);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb59, unwind: bb209];
    }

    bb57: {
        StorageLive(_123);
        _123 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb58, unwind: bb210];
    }

    bb58: {
        StorageDead(_125);
        StorageDead(_123);
        _415 = discriminant(_117);
        StorageDead(_117);
        goto -> bb170;
    }

    bb59: {
        _128 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _129) -> [return: bb60, unwind: bb209];
    }

    bb60: {
        StorageDead(_129);
        _130 = discriminant(_128);
        switchInt(move _130) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        StorageLive(_134);
        _134 = move ((_128 as Continue).0: anchor_lang::prelude::Clock);
        _127 = move _134;
        StorageDead(_134);
        _419 = discriminant(_128);
        StorageDead(_128);
        StorageLive(_137);
        StorageLive(_138);
        _138 = _3;
        _137 = parse_optional_params(move _138) -> [return: bb64, unwind: bb209];
    }

    bb62: {
        StorageLive(_131);
        _131 = move ((_128 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_133);
        _133 = move _131;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _133) -> [return: bb63, unwind: bb207];
    }

    bb63: {
        StorageDead(_133);
        StorageDead(_131);
        _437 = discriminant(_128);
        StorageDead(_128);
        goto -> bb169;
    }

    bb64: {
        StorageDead(_138);
        StorageLive(_135);
        _135 = (_137.0: u8);
        StorageLive(_136);
        _136 = (_137.1: u8);
        StorageDead(_137);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _383 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _145 = &((*_383).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _384 = deref_copy (*_145);
        _461 = (((_384.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _144 = &(*_461);
        _143 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _144) -> [return: bb65, unwind: bb209];
    }

    bb65: {
        _142 = &(*_143);
        StorageDead(_144);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &mut _116;
        _148 = &mut (*_149);
        _147 = <RefMut<'_, User> as DerefMut>::deref_mut(move _148) -> [return: bb66, unwind: bb209];
    }

    bb66: {
        _146 = &mut (*_147);
        StorageDead(_148);
        StorageLive(_150);
        _150 = _114;
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_27;
        _151 = &(*_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &_28;
        _153 = &(*_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &mut _29;
        _155 = &mut (*_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_76;
        _157 = &(*_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_127;
        _159 = &(*_160);
        StorageLive(_161);
        _161 = _2;
        StorageLive(_162);
        _162 = <PlaceOrderOptions as Default>::default() -> [return: bb67, unwind: bb209];
    }

    bb67: {
        _141 = controller::orders::place_perp_order(move _142, move _146, move _150, move _151, move _153, move _155, move _157, move _159, move _161, move _162) -> [return: bb68, unwind: bb209];
    }

    bb68: {
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_146);
        StorageDead(_142);
        _140 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _141) -> [return: bb69, unwind: bb209];
    }

    bb69: {
        StorageDead(_141);
        _163 = discriminant(_140);
        switchInt(move _163) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_167);
        _167 = ((_140 as Continue).0: ());
        _139 = _167;
        StorageDead(_167);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_168);
        StorageLive(_169);
        _396 = const false;
        _169 = move _116;
        _168 = std::mem::drop::<RefMut<'_, User>>(move _169) -> [return: bb73, unwind: bb209];
    }

    bb71: {
        StorageLive(_164);
        _164 = ((_140 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb72, unwind: bb209];
    }

    bb72: {
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb168;
    }

    bb73: {
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_170);
        _385 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _170 = &mut ((*_385).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &(*_170);
        _178 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _179) -> [return: bb74, unwind: bb209];
    }

    bb74: {
        StorageDead(_179);
        StorageLive(_180);
        _180 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _177 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _178, move _180) -> [return: bb75, unwind: bb209];
    }

    bb75: {
        StorageDead(_180);
        StorageDead(_178);
        _176 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _177) -> [return: bb76, unwind: bb209];
    }

    bb76: {
        _400 = const true;
        StorageDead(_177);
        _181 = discriminant(_176);
        switchInt(move _181) -> [0: bb77, 1: bb78, otherwise: bb4];
    }

    bb77: {
        StorageLive(_185);
        _185 = move ((_176 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _175 = move _185;
        StorageDead(_185);
        _174 = &_175;
        _173 = <Ref<'_, User> as Deref>::deref(move _174) -> [return: bb80, unwind: bb187];
    }

    bb78: {
        StorageLive(_182);
        _182 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_184);
        _184 = _182;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _184) -> [return: bb79, unwind: bb206];
    }

    bb79: {
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_174);
        StorageDead(_172);
        _421 = discriminant(_176);
        _400 = const false;
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        goto -> bb167;
    }

    bb80: {
        _172 = &(*_173);
        StorageDead(_174);
        _171 = User::get_last_order_id(move _172) -> [return: bb81, unwind: bb187];
    }

    bb81: {
        StorageDead(_172);
        drop(_175) -> [return: bb197, unwind: bb206];
    }

    bb82: {
        _191 = &(*_192);
        StorageDead(_193);
        StorageLive(_195);
        _195 = &(*_170);
        StorageLive(_196);
        StorageLive(_197);
        _388 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _197 = &((*_388).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _196 = &(*_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &_28;
        _198 = &(*_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &_27;
        _200 = &(*_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = &mut _29;
        _202 = &mut (*_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &(*_170);
        _206 = <anchor_lang::prelude::AccountLoader<'_, User> as Clone>::clone(move _207) -> [return: bb83, unwind: bb209];
    }

    bb83: {
        StorageDead(_207);
        _205 = &_206;
        _204 = &(*_205);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _389 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _211 = &((*_389).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _210 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as Clone>::clone(move _211) -> [return: bb84, unwind: bb209];
    }

    bb84: {
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_65;
        _212 = &(*_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &_66;
        _214 = &(*_215);
        StorageLive(_216);
        _216 = Option::<u32>::None;
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb85, unwind: bb209];
    }

    bb85: {
        _220 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _221) -> [return: bb86, unwind: bb209];
    }

    bb86: {
        _394 = const true;
        _395 = const true;
        StorageDead(_221);
        _222 = discriminant(_220);
        switchInt(move _222) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_226);
        _226 = move ((_220 as Continue).0: anchor_lang::prelude::Clock);
        _219 = move _226;
        StorageDead(_226);
        _218 = &_219;
        _217 = &(*_218);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = _85;
        switchInt(move _229) -> [0: bb91, otherwise: bb90];
    }

    bb88: {
        StorageLive(_223);
        _223 = move ((_220 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_225);
        _225 = move _223;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _225) -> [return: bb89, unwind: bb205];
    }

    bb89: {
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_208);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        goto -> bb200;
    }

    bb90: {
        _228 = const true;
        goto -> bb93;
    }

    bb91: {
        StorageLive(_230);
        _230 = &_3;
        _228 = Option::<u32>::is_some(move _230) -> [return: bb92, unwind: bb205];
    }

    bb92: {
        StorageDead(_230);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_229);
        StorageLive(_231);
        _231 = _136;
        _227 = FillMode::PlaceAndTake(move _228, move _231);
        StorageDead(_231);
        StorageDead(_228);
        _189 = controller::orders::fill_perp_order(move _190, move _191, move _195, move _196, move _198, move _200, move _202, move _204, move _208, move _212, move _214, move _216, move _217, move _227) -> [return: bb94, unwind: bb205];
    }

    bb94: {
        StorageDead(_227);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_208);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_191);
        StorageDead(_190);
        _188 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _189) -> [return: bb95, unwind: bb205];
    }

    bb95: {
        StorageDead(_189);
        _232 = discriminant(_188);
        switchInt(move _232) -> [0: bb96, 1: bb97, otherwise: bb4];
    }

    bb96: {
        StorageLive(_236);
        _236 = ((_188 as Continue).0: (u64, u64));
        _187 = _236;
        StorageDead(_236);
        StorageLive(_186);
        _186 = (_187.0: u64);
        _425 = discriminant(_220);
        _394 = const false;
        _395 = const false;
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _390 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _248 = &((*_390).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _247 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _248) -> [return: bb99, unwind: bb209];
    }

    bb97: {
        StorageLive(_233);
        _233 = ((_188 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_235);
        _235 = _233;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _235) -> [return: bb98, unwind: bb205];
    }

    bb98: {
        StorageDead(_235);
        StorageDead(_233);
        goto -> bb200;
    }

    bb99: {
        StorageDead(_248);
        StorageLive(_249);
        _249 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _246 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _247, move _249) -> [return: bb100, unwind: bb209];
    }

    bb100: {
        StorageDead(_249);
        StorageDead(_247);
        _245 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _246) -> [return: bb101, unwind: bb209];
    }

    bb101: {
        _399 = const true;
        StorageDead(_246);
        _250 = discriminant(_245);
        switchInt(move _250) -> [0: bb102, 1: bb103, otherwise: bb4];
    }

    bb102: {
        StorageLive(_254);
        _254 = move ((_245 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _244 = move _254;
        StorageDead(_254);
        _243 = &_244;
        _242 = <Ref<'_, User> as Deref>::deref(move _243) -> [return: bb105, unwind: bb186];
    }

    bb103: {
        StorageLive(_251);
        _251 = ((_245 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_253);
        _253 = _251;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _253) -> [return: bb104, unwind: bb204];
    }

    bb104: {
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_238);
        _427 = discriminant(_245);
        _399 = const false;
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_239);
        goto -> bb166;
    }

    bb105: {
        StorageDead(_243);
        _241 = &((*_242).5: [state::user::Order; 32]);
        _240 = move _241 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_241);
        _239 = core::slice::<impl [Order]>::iter(move _240) -> [return: bb106, unwind: bb186];
    }

    bb106: {
        _238 = &mut _239;
        StorageDead(_240);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &_171;
        _255 = {closure@programs/drift/src/instructions/user.rs:2356:14: 2356:21} { order_id: move _256 };
        StorageDead(_256);
        _237 = <std::slice::Iter<'_, Order> as Iterator>::any::<{closure@programs/drift/src/instructions/user.rs:2356:14: 2356:21}>(move _238, move _255) -> [return: bb107, unwind: bb186];
    }

    bb107: {
        StorageDead(_255);
        StorageDead(_238);
        drop(_244) -> [return: bb198, unwind: bb204];
    }

    bb108: {
        StorageLive(_259);
        _259 = _237;
        switchInt(move _259) -> [0: bb120, otherwise: bb109];
    }

    bb109: {
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = _171;
        StorageLive(_264);
        StorageLive(_265);
        _391 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _265 = &((*_391).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _264 = &(*_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_27;
        _266 = &(*_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = &_28;
        _268 = &(*_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = &mut _29;
        _270 = &mut (*_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb110, unwind: bb209];
    }

    bb110: {
        _275 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _276) -> [return: bb111, unwind: bb209];
    }

    bb111: {
        _392 = const true;
        _393 = const true;
        StorageDead(_276);
        _277 = discriminant(_275);
        switchInt(move _277) -> [0: bb112, 1: bb113, otherwise: bb4];
    }

    bb112: {
        StorageLive(_281);
        _281 = move ((_275 as Continue).0: anchor_lang::prelude::Clock);
        _274 = move _281;
        StorageDead(_281);
        _273 = &_274;
        _272 = &(*_273);
        _262 = cancel_order_by_order_id(move _263, move _264, move _266, move _268, move _270, move _272) -> [return: bb115, unwind: bb203];
    }

    bb113: {
        StorageLive(_278);
        _278 = move ((_275 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_280);
        _280 = move _278;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _280) -> [return: bb114, unwind: bb203];
    }

    bb114: {
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_262);
        goto -> bb199;
    }

    bb115: {
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_263);
        _261 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _262) -> [return: bb116, unwind: bb203];
    }

    bb116: {
        StorageDead(_262);
        _282 = discriminant(_261);
        switchInt(move _282) -> [0: bb117, 1: bb118, otherwise: bb4];
    }

    bb117: {
        StorageLive(_286);
        _286 = ((_261 as Continue).0: ());
        _260 = _286;
        StorageDead(_286);
        _431 = discriminant(_275);
        _392 = const false;
        _393 = const false;
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_261);
        StorageDead(_260);
        _257 = const ();
        goto -> bb121;
    }

    bb118: {
        StorageLive(_283);
        _283 = ((_261 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_285);
        _285 = _283;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _285) -> [return: bb119, unwind: bb203];
    }

    bb119: {
        StorageDead(_285);
        StorageDead(_283);
        goto -> bb199;
    }

    bb120: {
        _257 = const ();
        goto -> bb121;
    }

    bb121: {
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = _135;
        StorageLive(_290);
        StorageLive(_291);
        _292 = CheckedAdd(const _, const 0_isize);
        assert(!move (_292.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb122, unwind: bb209];
    }

    bb122: {
        _291 = move (_292.0: isize);
        _290 = move _291 as u8 (IntToInt);
        StorageDead(_291);
        _288 = Eq(move _289, move _290);
        switchInt(move _288) -> [0: bb138, otherwise: bb123];
    }

    bb123: {
        StorageDead(_290);
        StorageDead(_289);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = _186;
        _296 = Gt(move _297, const 0_u64);
        switchInt(move _296) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        StorageDead(_297);
        StorageLive(_298);
        _298 = ();
        _295 = std::result::Result::<(), error::ErrorCode>::Ok(move _298);
        StorageDead(_298);
        goto -> bb133;
    }

    bb125: {
        StorageDead(_297);
        StorageLive(_299);
        _299 = error::ErrorCode::PlaceAndTakeOrderSuccessConditionFailed;
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _371 = const _;
        _310 = &(*_371);
        _309 = &(*_310);
        _308 = move _309 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_309);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &_299;
        _317 = &(*_318);
        _316 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _317) -> [return: bb126, unwind: bb209];
    }

    bb126: {
        StorageDead(_317);
        _315 = [move _316];
        StorageDead(_316);
        _314 = &_315;
        _313 = &(*_314);
        _312 = move _313 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_313);
        _307 = Arguments::<'_>::new_v1(move _308, move _312) -> [return: bb127, unwind: bb209];
    }

    bb127: {
        StorageDead(_312);
        StorageDead(_308);
        _306 = format(move _307) -> [return: bb128, unwind: bb209];
    }

    bb128: {
        StorageDead(_307);
        StorageDead(_318);
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_310);
        _305 = move _306;
        StorageDead(_306);
        _304 = &_305;
        _303 = &(*_304);
        _302 = <String as Deref>::deref(move _303) -> [return: bb129, unwind: bb185];
    }

    bb129: {
        _301 = &(*_302);
        StorageDead(_303);
        _300 = solana_program::log::sol_log(move _301) -> [return: bb130, unwind: bb185];
    }

    bb130: {
        StorageDead(_301);
        drop(_305) -> [return: bb131, unwind: bb209];
    }

    bb131: {
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_300);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = const "no partial fill";
        _320 = &(*_321);
        _319 = solana_program::log::sol_log(move _320) -> [return: bb132, unwind: bb209];
    }

    bb132: {
        StorageDead(_320);
        StorageDead(_321);
        StorageDead(_319);
        StorageLive(_322);
        _322 = _299;
        _295 = std::result::Result::<(), error::ErrorCode>::Err(move _322);
        StorageDead(_322);
        StorageDead(_299);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_296);
        _294 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _295) -> [return: bb134, unwind: bb209];
    }

    bb134: {
        StorageDead(_295);
        _323 = discriminant(_294);
        switchInt(move _323) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        StorageLive(_327);
        _327 = ((_294 as Continue).0: ());
        _293 = _327;
        StorageDead(_327);
        StorageDead(_294);
        StorageDead(_293);
        _287 = const ();
        goto -> bb159;
    }

    bb136: {
        StorageLive(_324);
        _324 = ((_294 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_326);
        _326 = _324;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _326) -> [return: bb137, unwind: bb209];
    }

    bb137: {
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_294);
        StorageDead(_293);
        goto -> bb165;
    }

    bb138: {
        StorageDead(_290);
        StorageDead(_289);
        StorageLive(_328);
        StorageLive(_329);
        _329 = _135;
        StorageLive(_330);
        StorageLive(_331);
        _332 = CheckedAdd(const _, const 0_isize);
        assert(!move (_332.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb139, unwind: bb209];
    }

    bb139: {
        _331 = move (_332.0: isize);
        _330 = move _331 as u8 (IntToInt);
        StorageDead(_331);
        _328 = Eq(move _329, move _330);
        switchInt(move _328) -> [0: bb157, otherwise: bb140];
    }

    bb140: {
        StorageDead(_330);
        StorageDead(_329);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = _186;
        _336 = Gt(move _337, const 0_u64);
        switchInt(move _336) -> [0: bb143, otherwise: bb141];
    }

    bb141: {
        StorageDead(_337);
        StorageLive(_338);
        _338 = _237;
        switchInt(move _338) -> [0: bb142, otherwise: bb144];
    }

    bb142: {
        StorageLive(_339);
        _339 = ();
        _335 = std::result::Result::<(), error::ErrorCode>::Ok(move _339);
        StorageDead(_339);
        goto -> bb152;
    }

    bb143: {
        StorageDead(_337);
        goto -> bb144;
    }

    bb144: {
        StorageLive(_340);
        _340 = error::ErrorCode::PlaceAndTakeOrderSuccessConditionFailed;
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _372 = const _;
        _351 = &(*_372);
        _350 = &(*_351);
        _349 = move _350 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_350);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &_340;
        _358 = &(*_359);
        _357 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _358) -> [return: bb145, unwind: bb209];
    }

    bb145: {
        StorageDead(_358);
        _356 = [move _357];
        StorageDead(_357);
        _355 = &_356;
        _354 = &(*_355);
        _353 = move _354 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_354);
        _348 = Arguments::<'_>::new_v1(move _349, move _353) -> [return: bb146, unwind: bb209];
    }

    bb146: {
        StorageDead(_353);
        StorageDead(_349);
        _347 = format(move _348) -> [return: bb147, unwind: bb209];
    }

    bb147: {
        StorageDead(_348);
        StorageDead(_359);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_351);
        _346 = move _347;
        StorageDead(_347);
        _345 = &_346;
        _344 = &(*_345);
        _343 = <String as Deref>::deref(move _344) -> [return: bb148, unwind: bb184];
    }

    bb148: {
        _342 = &(*_343);
        StorageDead(_344);
        _341 = solana_program::log::sol_log(move _342) -> [return: bb149, unwind: bb184];
    }

    bb149: {
        StorageDead(_342);
        drop(_346) -> [return: bb150, unwind: bb209];
    }

    bb150: {
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_341);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = const "no full fill";
        _361 = &(*_362);
        _360 = solana_program::log::sol_log(move _361) -> [return: bb151, unwind: bb209];
    }

    bb151: {
        StorageDead(_361);
        StorageDead(_362);
        StorageDead(_360);
        StorageLive(_363);
        _363 = _340;
        _335 = std::result::Result::<(), error::ErrorCode>::Err(move _363);
        StorageDead(_363);
        StorageDead(_340);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_338);
        StorageDead(_336);
        _334 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _335) -> [return: bb153, unwind: bb209];
    }

    bb153: {
        StorageDead(_335);
        _364 = discriminant(_334);
        switchInt(move _364) -> [0: bb154, 1: bb155, otherwise: bb4];
    }

    bb154: {
        StorageLive(_368);
        _368 = ((_334 as Continue).0: ());
        _333 = _368;
        StorageDead(_368);
        StorageDead(_334);
        StorageDead(_333);
        _287 = const ();
        goto -> bb158;
    }

    bb155: {
        StorageLive(_365);
        _365 = ((_334 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_367);
        _367 = _365;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _367) -> [return: bb156, unwind: bb209];
    }

    bb156: {
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_328);
        goto -> bb165;
    }

    bb157: {
        StorageDead(_330);
        StorageDead(_329);
        _287 = const ();
        goto -> bb158;
    }

    bb158: {
        StorageDead(_328);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_288);
        StorageDead(_287);
        StorageLive(_369);
        _369 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _369);
        StorageDead(_369);
        StorageDead(_237);
        StorageDead(_186);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_127);
        _396 = const false;
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_85);
        StorageDead(_76);
        drop(_66) -> [return: bb160, unwind: bb189];
    }

    bb160: {
        StorageDead(_66);
        drop(_65) -> [return: bb161, unwind: bb191];
    }

    bb161: {
        StorageDead(_65);
        drop(_29) -> [return: bb162, unwind: bb192];
    }

    bb162: {
        StorageDead(_29);
        drop(_28) -> [return: bb163, unwind: bb193];
    }

    bb163: {
        StorageDead(_28);
        drop(_27) -> [return: bb164, unwind: bb196];
    }

    bb164: {
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        goto -> bb183;
    }

    bb165: {
        StorageDead(_288);
        StorageDead(_287);
        goto -> bb166;
    }

    bb166: {
        StorageDead(_237);
        StorageDead(_186);
        goto -> bb167;
    }

    bb167: {
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb168;
    }

    bb168: {
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb169;
    }

    bb169: {
        StorageDead(_127);
        switchInt(_396) -> [0: bb170, otherwise: bb201];
    }

    bb170: {
        _396 = const false;
        StorageDead(_116);
        StorageDead(_114);
        goto -> bb171;
    }

    bb171: {
        StorageDead(_85);
        goto -> bb172;
    }

    bb172: {
        StorageDead(_76);
        drop(_66) -> [return: bb173, unwind: bb189];
    }

    bb173: {
        StorageDead(_66);
        drop(_65) -> [return: bb174, unwind: bb191];
    }

    bb174: {
        StorageDead(_65);
        goto -> bb175;
    }

    bb175: {
        drop(_29) -> [return: bb176, unwind: bb192];
    }

    bb176: {
        StorageDead(_29);
        drop(_28) -> [return: bb177, unwind: bb193];
    }

    bb177: {
        StorageDead(_28);
        drop(_27) -> [return: bb178, unwind: bb196];
    }

    bb178: {
        StorageDead(_27);
        goto -> bb181;
    }

    bb179: {
        StorageDead(_40);
        StorageDead(_39);
        drop(_36) -> [return: bb180, unwind: bb196];
    }

    bb180: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb181;
    }

    bb181: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb182;
    }

    bb182: {
        StorageDead(_14);
        goto -> bb183;
    }

    bb183: {
        return;
    }

    bb184 (cleanup): {
        drop(_346) -> [return: bb209, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_305) -> [return: bb209, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_244) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_175) -> [return: bb206, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_66) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_65) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        drop(_36) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_29) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_28) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_27) -> [return: bb196, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_40) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        drop(_36) -> [return: bb196, unwind terminate(cleanup)];
    }

    bb196 (cleanup): {
        resume;
    }

    bb197: {
        _423 = discriminant(_176);
        _400 = const false;
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = _171;
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _386 = deref_copy (_1.1: &mut instructions::user::PlaceAndTake<'_>);
        _194 = &((*_386).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _387 = deref_copy (*_194);
        _462 = (((_387.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _193 = &(*_462);
        _192 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _193) -> [return: bb82, unwind: bb209];
    }

    bb198: {
        _429 = discriminant(_245);
        _399 = const false;
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_239);
        StorageLive(_257);
        StorageLive(_258);
        _258 = _85;
        switchInt(move _258) -> [0: bb120, otherwise: bb108];
    }

    bb199: {
        _433 = discriminant(_275);
        _392 = const false;
        _393 = const false;
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_257);
        goto -> bb166;
    }

    bb200: {
        _435 = discriminant(_220);
        _394 = const false;
        _395 = const false;
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_188);
        StorageDead(_187);
        goto -> bb167;
    }

    bb201: {
        drop(_116) -> [return: bb170, unwind: bb188];
    }

    bb202: {
        _439 = discriminant(_102);
        _397 = const false;
        _398 = const false;
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb171;
    }

    bb203 (cleanup): {
        _445 = discriminant(_275);
        goto -> bb209;
    }

    bb204 (cleanup): {
        _446 = discriminant(_245);
        goto -> bb209;
    }

    bb205 (cleanup): {
        _447 = discriminant(_220);
        goto -> bb209;
    }

    bb206 (cleanup): {
        _448 = discriminant(_176);
        goto -> bb209;
    }

    bb207 (cleanup): {
        _449 = discriminant(_128);
        goto -> bb209;
    }

    bb208 (cleanup): {
        drop(_116) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb209 (cleanup): {
        switchInt(_396) -> [0: bb188, otherwise: bb208];
    }

    bb210 (cleanup): {
        _450 = discriminant(_117);
        goto -> bb188;
    }

    bb211 (cleanup): {
        _451 = discriminant(_102);
        goto -> bb188;
    }

    bb212 (cleanup): {
        _453 = discriminant(_68);
        goto -> bb191;
    }

    bb213 (cleanup): {
        _455 = discriminant(_31);
        goto -> bb194;
    }

    bb214 (cleanup): {
        _456 = discriminant(_15);
        goto -> bb196;
    }

    bb215 (cleanup): {
        _457 = discriminant(_5);
        goto -> bb196;
    }
}
