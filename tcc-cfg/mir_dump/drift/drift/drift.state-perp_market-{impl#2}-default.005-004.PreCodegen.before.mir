// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:244:1: 244:28>::default` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:244:1: 244:28>::default() -> PerpMarket {
    let mut _0: state::perp_market::PerpMarket;
    let mut _1: anchor_lang::prelude::Pubkey;
    let mut _2: state::perp_market::AMM;
    let mut _3: state::perp_market::PoolBalance;
    let mut _4: [u8; 32];
    let mut _5: state::perp_market::InsuranceClaim;
    let mut _6: state::perp_market::MarketStatus;
    let mut _7: state::perp_market::ContractType;
    let mut _8: state::perp_market::ContractTier;
    let mut _9: [u8; 24];

    bb0: {
        StorageLive(_1);
        _1 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <AMM as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <PoolBalance as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = [const 0_u8; 32];
        StorageLive(_5);
        _5 = <InsuranceClaim as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_6);
        _6 = <state::perp_market::MarketStatus as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_7);
        _7 = <ContractType as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_8);
        _8 = <state::perp_market::ContractTier as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_9);
        _9 = [const 0_u8; 24];
        _0 = PerpMarket { pubkey: move _1, amm: move _2, pnl_pool: move _3, name: move _4, insurance_claim: move _5, unrealized_pnl_max_imbalance: const 0_u64, expiry_ts: const 0_i64, expiry_price: const 0_i64, next_fill_record_id: const 0_u64, next_funding_rate_record_id: const 0_u64, next_curve_record_id: const 0_u64, imf_factor: const 0_u32, unrealized_pnl_imf_factor: const 0_u32, liquidator_fee: const 0_u32, if_liquidation_fee: const 0_u32, margin_ratio_initial: const 0_u32, margin_ratio_maintenance: const 0_u32, unrealized_pnl_initial_asset_weight: const 0_u32, unrealized_pnl_maintenance_asset_weight: const 0_u32, number_of_users_with_base: const 0_u32, number_of_users: const 0_u32, market_index: const 0_u16, status: move _6, contract_type: move _7, contract_tier: move _8, paused_operations: const 0_u8, quote_spot_market_index: const 0_u16, fee_adjustment: const 0_i16, fuel_boost_position: const 0_u8, fuel_boost_taker: const 0_u8, fuel_boost_maker: const 0_u8, pool_id: const 0_u8, high_leverage_margin_ratio_initial: const 0_u16, high_leverage_margin_ratio_maintenance: const 0_u16, protected_maker_limit_price_divisor: const 0_u8, protected_maker_dynamic_divisor: const 0_u8, padding1: const 0_u32, last_fill_price: const 0_u64, padding: move _9 };
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
