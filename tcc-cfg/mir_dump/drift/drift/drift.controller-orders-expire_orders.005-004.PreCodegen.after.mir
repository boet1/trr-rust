// MIR for `expire_orders` after PreCodegen

fn expire_orders(_1: &mut User, _2: &anchor_lang::prelude::Pubkey, _3: &PerpMarketMap<'_>, _4: &SpotMarketMap<'_>, _5: &mut OracleMap<'_>, _6: i64, _7: u64) -> std::result::Result<(), error::ErrorCode> {
    debug user => _1;
    debug user_key => _2;
    debug perp_market_map => _3;
    debug spot_market_map => _4;
    debug oracle_map => _5;
    debug now => _6;
    debug slot => _7;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _8: ();
    let mut _9: std::ops::Range<usize>;
    let mut _10: std::ops::Range<usize>;
    let mut _11: usize;
    let mut _12: &[state::user::Order];
    let mut _13: &[state::user::Order; 32];
    let mut _14: std::ops::Range<usize>;
    let mut _15: ();
    let _16: ();
    let mut _17: std::option::Option<usize>;
    let mut _18: &mut std::ops::Range<usize>;
    let mut _19: &mut std::ops::Range<usize>;
    let mut _20: isize;
    let mut _21: !;
    let _23: ();
    let mut _24: bool;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _26: std::result::Result<bool, error::ErrorCode>;
    let mut _27: &state::user::User;
    let mut _28: usize;
    let mut _29: i64;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: !;
    let _36: ();
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _38: std::result::Result<(), error::ErrorCode>;
    let mut _39: usize;
    let mut _40: &mut state::user::User;
    let mut _41: &anchor_lang::prelude::Pubkey;
    let mut _42: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _43: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _44: &mut state::oracle_map::OracleMap<'_>;
    let mut _45: i64;
    let mut _46: u64;
    let mut _47: state::events::OrderActionExplanation;
    let mut _48: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: ();
    scope 1 {
        debug iter => _14;
        let _22: usize;
        scope 2 {
            debug order_index => _22;
            let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _34: bool;
            let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _53: ();
            scope 3 {
                debug residual => _31;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _34;
                scope 6 {
                }
            }
            scope 7 {
                debug residual => _50;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _53;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).5: [state::user::Order; 32]);
        _12 = move _13 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_13);
        _11 = core::slice::<impl [Order]>::len(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        _10 = std::ops::Range::<usize> { start: const 0_usize, end: move _11 };
        StorageDead(_11);
        _9 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageLive(_14);
        _14 = move _9;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _14;
        _18 = &mut (*_19);
        _17 = <std::ops::Range<usize> as Iterator>::next(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_22);
        _22 = ((_17 as Some).0: usize);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_1);
        StorageLive(_28);
        _28 = _22;
        StorageLive(_29);
        _29 = _6;
        _26 = math::orders::should_expire_order(move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _8 = const ();
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_54);
        _54 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _54);
        StorageDead(_54);
        goto -> bb21;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        _25 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _26) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_26);
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb10, 1: bb11, otherwise: bb6];
    }

    bb10: {
        StorageLive(_34);
        _34 = ((_25 as Continue).0: bool);
        _24 = _34;
        StorageDead(_34);
        switchInt(move _24) -> [0: bb14, otherwise: bb13];
    }

    bb11: {
        StorageLive(_31);
        _31 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb20;
    }

    bb13: {
        StorageDead(_25);
        _23 = const ();
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _22;
        StorageLive(_40);
        _40 = &mut (*_1);
        StorageLive(_41);
        _41 = &(*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &(*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        StorageLive(_45);
        _45 = _6;
        StorageLive(_46);
        _46 = _7;
        StorageLive(_47);
        _47 = OrderActionExplanation::OrderExpired;
        StorageLive(_48);
        _48 = Option::<&anchor_lang::prelude::Pubkey>::None;
        _38 = controller::orders::cancel_order(move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48, const 0_u64, const false) -> [return: bb15, unwind continue];
    }

    bb14: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb3;
    }

    bb15: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        _37 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_38);
        _49 = discriminant(_37);
        switchInt(move _49) -> [0: bb17, 1: bb18, otherwise: bb6];
    }

    bb17: {
        StorageLive(_53);
        _53 = ((_37 as Continue).0: ());
        _36 = _53;
        StorageDead(_53);
        StorageDead(_37);
        StorageDead(_36);
        _16 = const ();
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        _15 = const ();
        goto -> bb3;
    }

    bb18: {
        StorageLive(_50);
        _50 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}
