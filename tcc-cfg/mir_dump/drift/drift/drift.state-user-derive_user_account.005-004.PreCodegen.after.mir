// MIR for `derive_user_account` after PreCodegen

fn derive_user_account(_1: &anchor_lang::prelude::Pubkey, _2: u16) -> anchor_lang::prelude::Pubkey {
    debug authority => _1;
    debug sub_account_id => _2;
    let mut _0: anchor_lang::prelude::Pubkey;
    let _3: anchor_lang::prelude::Pubkey;
    let _4: u8;
    let mut _5: (anchor_lang::prelude::Pubkey, u8);
    let mut _6: &[&[u8]];
    let mut _7: &[&[u8]; 3];
    let _8: &[&[u8]; 3];
    let _9: [&[u8]; 3];
    let mut _10: &[u8];
    let _11: &[u8];
    let _12: &[u8];
    let mut _13: &[u8; 4];
    let _14: &[u8; 4];
    let mut _15: std::ops::RangeFull;
    let mut _16: &[u8];
    let _17: &[u8];
    let mut _18: &anchor_lang::prelude::Pubkey;
    let mut _19: &[u8];
    let mut _20: &[u8; 2];
    let _21: &[u8; 2];
    let _22: [u8; 2];
    let mut _23: u16;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let _25: &anchor_lang::prelude::Pubkey;
    let _26: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_drift_pda => _3;
        debug _seed => _4;
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = const b"user";
        _13 = &(*_14);
        StorageLive(_15);
        _15 = RangeFull;
        _12 = <[u8; 4] as Index<RangeFull>>::index(move _13, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_13);
        _11 = &(*_12);
        _10 = &(*_11);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_1);
        _17 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _18) -> [return: bb2, unwind continue];
    }

    bb2: {
        _16 = &(*_17);
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _2;
        _22 = core::num::<impl u16>::to_le_bytes(move _23) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = move _20 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_20);
        _9 = [move _10, move _16, move _19];
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_10);
        _8 = &_9;
        _7 = &(*_8);
        _6 = move _7 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_7);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = const {alloc266: &anchor_lang::prelude::Pubkey};
        _25 = &(*_26);
        _24 = &(*_25);
        _5 = anchor_lang::prelude::Pubkey::find_program_address(move _6, move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_24);
        StorageDead(_6);
        StorageLive(_3);
        _3 = (_5.0: anchor_lang::prelude::Pubkey);
        StorageLive(_4);
        _4 = (_5.1: u8);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        _0 = _3;
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

alloc320 (size: 4, align: 1) {
    75 73 65 72                                     │ user
}

alloc266 (static: ID, size: 32, align: 1) {
    0x00 │ 09 54 db be 9e c9 60 c9 8a 7a 29 3f e2 13 36 96 │ .T....`..z)?..6.
    0x10 │ 6f e1 80 d1 51 ae 4b 81 79 56 1f 89 85 4a 53 f6 │ o...Q.K.yV...JS.
}
