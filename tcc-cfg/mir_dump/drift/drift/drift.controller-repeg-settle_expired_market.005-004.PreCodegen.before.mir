// MIR for `controller::repeg::settle_expired_market` before PreCodegen

fn controller::repeg::settle_expired_market(_1: u16, _2: &PerpMarketMap<'_>, _3: &mut OracleMap<'_>, _4: &SpotMarketMap<'_>, _5: &state::state::State, _6: &anchor_lang::prelude::Clock) -> std::result::Result<(), error::ErrorCode> {
    debug market_index => _1;
    debug market_map => _2;
    debug _oracle_map => _3;
    debug spot_market_map => _4;
    debug _state => _5;
    debug clock => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: i64;
    let mut _9: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _11: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _12: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _13: &u16;
    let _14: &u16;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: ();
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _22: std::result::Result<(), error::ErrorCode>;
    let mut _23: bool;
    let mut _24: i64;
    let mut _25: &state::perp_market::PerpMarket;
    let mut _26: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _27: ();
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 2];
    let _39: &[&str; 2];
    let _40: [&str; 2];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let mut _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &error::ErrorCode;
    let _47: &error::ErrorCode;
    let _48: ();
    let mut _49: &str;
    let _50: &str;
    let mut _51: error::ErrorCode;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: ();
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _59: std::result::Result<(), error::ErrorCode>;
    let mut _60: bool;
    let mut _61: i64;
    let mut _62: &state::perp_market::PerpMarket;
    let mut _63: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _64: i64;
    let mut _65: ();
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: &std::string::String;
    let _71: &std::string::String;
    let _72: std::string::String;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[&str; 2];
    let _77: &[&str; 2];
    let _78: [&str; 2];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let mut _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: [core::fmt::rt::Argument<'_>; 1];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &error::ErrorCode;
    let _85: &error::ErrorCode;
    let _86: ();
    let mut _87: &str;
    let _88: &str;
    let mut _89: &std::string::String;
    let _90: &std::string::String;
    let _91: std::string::String;
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let mut _95: &[&str; 3];
    let _96: &[&str; 3];
    let _97: [&str; 3];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let mut _99: &[core::fmt::rt::Argument<'_>; 2];
    let _100: &[core::fmt::rt::Argument<'_>; 2];
    let _101: [core::fmt::rt::Argument<'_>; 2];
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &i64;
    let _104: &i64;
    let _105: &state::perp_market::PerpMarket;
    let mut _106: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _107: core::fmt::rt::Argument<'_>;
    let mut _108: &i64;
    let _109: &i64;
    let mut _110: error::ErrorCode;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _116: ();
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _118: std::result::Result<(), error::ErrorCode>;
    let mut _119: bool;
    let mut _120: i128;
    let mut _121: &state::perp_market::PerpMarket;
    let mut _122: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _123: ();
    let _125: ();
    let mut _126: &str;
    let _127: &str;
    let mut _128: &std::string::String;
    let _129: &std::string::String;
    let _130: std::string::String;
    let mut _132: std::fmt::Arguments<'_>;
    let mut _133: &[&str];
    let mut _134: &[&str; 2];
    let _135: &[&str; 2];
    let _136: [&str; 2];
    let mut _137: &[core::fmt::rt::Argument<'_>];
    let mut _138: &[core::fmt::rt::Argument<'_>; 1];
    let _139: &[core::fmt::rt::Argument<'_>; 1];
    let _140: [core::fmt::rt::Argument<'_>; 1];
    let mut _141: core::fmt::rt::Argument<'_>;
    let mut _142: &error::ErrorCode;
    let _143: &error::ErrorCode;
    let _144: ();
    let mut _145: &str;
    let _146: &str;
    let mut _147: error::ErrorCode;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _154: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _155: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _156: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _157: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _158: &u16;
    let _159: &u16;
    let _160: u16;
    let mut _161: isize;
    let mut _163: !;
    let mut _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _167: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _168: std::result::Result<i128, error::ErrorCode>;
    let mut _169: u128;
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _171: std::result::Result<u128, error::ErrorCode>;
    let mut _172: u128;
    let mut _173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _174: std::result::Result<u128, error::ErrorCode>;
    let mut _175: u128;
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _177: std::result::Result<u128, error::ErrorCode>;
    let mut _178: &state::perp_market::PerpMarket;
    let _179: &state::perp_market::PerpMarket;
    let mut _180: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _186: u128;
    let mut _187: &state::perp_market::PerpMarket;
    let mut _188: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _194: u128;
    let mut _195: &state::perp_market::PerpMarket;
    let mut _196: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _197: isize;
    let mut _199: !;
    let mut _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _202: isize;
    let mut _204: !;
    let mut _205: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _208: i128;
    let mut _209: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _210: std::result::Result<i128, error::ErrorCode>;
    let mut _211: i128;
    let mut _212: &state::perp_market::PerpMarket;
    let mut _213: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _214: i128;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _221: i128;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _223: std::result::Result<i128, error::ErrorCode>;
    let mut _224: i128;
    let mut _225: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _226: std::result::Result<i128, error::ErrorCode>;
    let mut _227: u128;
    let mut _228: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _229: std::result::Result<u128, error::ErrorCode>;
    let mut _230: u128;
    let mut _231: &state::perp_market::PerpMarket;
    let mut _232: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _233: &state::spot_market::SpotMarket;
    let _234: &state::spot_market::SpotMarket;
    let mut _235: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _236: &state::spot_market::SpotBalanceType;
    let _237: &state::spot_market::SpotBalanceType;
    let _238: state::spot_market::SpotBalanceType;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _249: i128;
    let mut _250: isize;
    let mut _252: !;
    let mut _253: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _256: i128;
    let mut _257: i128;
    let _258: ();
    let mut _259: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _260: std::result::Result<(), error::ErrorCode>;
    let mut _261: u128;
    let mut _262: i128;
    let mut _263: &state::spot_market::SpotBalanceType;
    let _264: &state::spot_market::SpotBalanceType;
    let _265: state::spot_market::SpotBalanceType;
    let mut _266: &mut state::spot_market::SpotMarket;
    let mut _267: &mut state::spot_market::SpotMarket;
    let mut _268: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _269: &mut dyn state::spot_market::SpotBalance;
    let mut _270: &mut state::perp_market::PoolBalance;
    let mut _271: &mut state::perp_market::PoolBalance;
    let mut _272: &mut state::perp_market::PerpMarket;
    let mut _273: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _274: isize;
    let mut _276: !;
    let mut _277: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _279: ();
    let mut _280: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _281: std::result::Result<(), error::ErrorCode>;
    let mut _282: u128;
    let mut _283: i128;
    let mut _284: &state::spot_market::SpotBalanceType;
    let _285: &state::spot_market::SpotBalanceType;
    let _286: state::spot_market::SpotBalanceType;
    let mut _287: &mut state::spot_market::SpotMarket;
    let mut _288: &mut state::spot_market::SpotMarket;
    let mut _289: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _290: &mut dyn state::spot_market::SpotBalance;
    let mut _291: &mut state::perp_market::PoolBalance;
    let mut _292: &mut state::perp_market::PoolBalance;
    let mut _293: &mut state::perp_market::PerpMarket;
    let mut _294: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _295: isize;
    let mut _297: !;
    let mut _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _300: ();
    let mut _301: bool;
    let mut _302: i128;
    let mut _305: (u128, u128);
    let mut _306: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _307: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _308: &mut state::perp_market::PerpMarket;
    let mut _309: &mut state::perp_market::PerpMarket;
    let mut _310: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _311: i128;
    let mut _312: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _313: std::result::Result<i128, error::ErrorCode>;
    let mut _314: i128;
    let mut _315: isize;
    let mut _317: !;
    let mut _318: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _320: i128;
    let mut _321: (i128, bool);
    let mut _322: isize;
    let mut _324: !;
    let mut _325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _328: math::bn::U192;
    let mut _329: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _330: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _331: math::bn::U192;
    let mut _332: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _333: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _334: math::bn::U192;
    let mut _335: u128;
    let mut _336: &state::perp_market::PerpMarket;
    let mut _337: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _338: math::bn::U192;
    let mut _339: u128;
    let mut _340: isize;
    let mut _342: !;
    let mut _343: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _345: math::bn::U192;
    let mut _346: u128;
    let mut _347: isize;
    let mut _349: !;
    let mut _350: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _352: math::bn::U192;
    let mut _354: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::cp_curve::UpdateKResult>;
    let mut _355: std::result::Result<math::cp_curve::UpdateKResult, error::ErrorCode>;
    let mut _356: &state::perp_market::PerpMarket;
    let _357: &state::perp_market::PerpMarket;
    let mut _358: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _359: math::bn::U192;
    let mut _360: isize;
    let mut _362: !;
    let mut _363: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _366: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _367: std::result::Result<i128, error::ErrorCode>;
    let mut _368: &mut state::perp_market::PerpMarket;
    let mut _369: &mut state::perp_market::PerpMarket;
    let mut _370: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _371: &math::cp_curve::UpdateKResult;
    let _372: &math::cp_curve::UpdateKResult;
    let mut _373: isize;
    let mut _375: !;
    let mut _376: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _379: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _380: std::result::Result<bool, error::ErrorCode>;
    let mut _381: &mut state::perp_market::PerpMarket;
    let mut _382: &mut state::perp_market::PerpMarket;
    let mut _383: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _384: i128;
    let mut _385: isize;
    let mut _387: !;
    let mut _388: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _390: ();
    let mut _391: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _392: std::result::Result<(), error::ErrorCode>;
    let mut _393: bool;
    let mut _394: ();
    let _396: ();
    let mut _397: &str;
    let _398: &str;
    let mut _399: &std::string::String;
    let _400: &std::string::String;
    let _401: std::string::String;
    let mut _403: std::fmt::Arguments<'_>;
    let mut _404: &[&str];
    let mut _405: &[&str; 2];
    let _406: &[&str; 2];
    let _407: [&str; 2];
    let mut _408: &[core::fmt::rt::Argument<'_>];
    let mut _409: &[core::fmt::rt::Argument<'_>; 1];
    let _410: &[core::fmt::rt::Argument<'_>; 1];
    let _411: [core::fmt::rt::Argument<'_>; 1];
    let mut _412: core::fmt::rt::Argument<'_>;
    let mut _413: &error::ErrorCode;
    let _414: &error::ErrorCode;
    let _415: ();
    let mut _416: &str;
    let _417: &str;
    let mut _418: error::ErrorCode;
    let mut _419: isize;
    let mut _421: !;
    let mut _422: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _424: bool;
    let _425: ();
    let mut _426: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _427: std::result::Result<(), error::ErrorCode>;
    let mut _428: &mut state::perp_market::PerpMarket;
    let mut _429: &mut state::perp_market::PerpMarket;
    let mut _430: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _431: &math::cp_curve::UpdateKResult;
    let _432: &math::cp_curve::UpdateKResult;
    let mut _433: isize;
    let mut _435: !;
    let mut _436: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _438: ();
    let mut _439: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _440: std::result::Result<(), error::ErrorCode>;
    let mut _441: bool;
    let mut _442: u128;
    let mut _443: u32;
    let mut _444: &state::spot_market::SpotMarket;
    let mut _445: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _446: ();
    let _448: ();
    let mut _449: &str;
    let _450: &str;
    let mut _451: &std::string::String;
    let _452: &std::string::String;
    let _453: std::string::String;
    let mut _455: std::fmt::Arguments<'_>;
    let mut _456: &[&str];
    let mut _457: &[&str; 2];
    let _458: &[&str; 2];
    let _459: [&str; 2];
    let mut _460: &[core::fmt::rt::Argument<'_>];
    let mut _461: &[core::fmt::rt::Argument<'_>; 1];
    let _462: &[core::fmt::rt::Argument<'_>; 1];
    let _463: [core::fmt::rt::Argument<'_>; 1];
    let mut _464: core::fmt::rt::Argument<'_>;
    let mut _465: &error::ErrorCode;
    let _466: &error::ErrorCode;
    let _467: ();
    let mut _468: &str;
    let _469: &str;
    let mut _470: error::ErrorCode;
    let mut _471: isize;
    let mut _473: !;
    let mut _474: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _477: bool;
    let mut _478: &state::oracle::OracleSource;
    let _479: &state::perp_market::PerpMarket;
    let mut _480: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _481: &state::oracle::OracleSource;
    let _482: state::oracle::OracleSource;
    let mut _483: &state::perp_market::PerpMarket;
    let mut _484: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _485: &state::perp_market::PerpMarket;
    let mut _486: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _487: ();
    let _488: ();
    let mut _489: &str;
    let _490: &str;
    let mut _491: &std::string::String;
    let _492: &std::string::String;
    let _493: std::string::String;
    let mut _495: std::fmt::Arguments<'_>;
    let mut _496: &[&str];
    let mut _497: &[&str; 1];
    let _498: &[&str; 1];
    let _499: [&str; 1];
    let mut _500: &[core::fmt::rt::Argument<'_>];
    let mut _501: &[core::fmt::rt::Argument<'_>; 1];
    let _502: &[core::fmt::rt::Argument<'_>; 1];
    let _503: [core::fmt::rt::Argument<'_>; 1];
    let mut _504: core::fmt::rt::Argument<'_>;
    let mut _505: &i64;
    let _506: &i64;
    let _507: ();
    let mut _508: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _509: std::result::Result<(), error::ErrorCode>;
    let mut _510: bool;
    let mut _511: i64;
    let mut _512: ();
    let _514: ();
    let mut _515: &str;
    let _516: &str;
    let mut _517: &std::string::String;
    let _518: &std::string::String;
    let _519: std::string::String;
    let mut _521: std::fmt::Arguments<'_>;
    let mut _522: &[&str];
    let mut _523: &[&str; 2];
    let _524: &[&str; 2];
    let _525: [&str; 2];
    let mut _526: &[core::fmt::rt::Argument<'_>];
    let mut _527: &[core::fmt::rt::Argument<'_>; 1];
    let _528: &[core::fmt::rt::Argument<'_>; 1];
    let _529: [core::fmt::rt::Argument<'_>; 1];
    let mut _530: core::fmt::rt::Argument<'_>;
    let mut _531: &error::ErrorCode;
    let _532: &error::ErrorCode;
    let _533: ();
    let mut _534: &str;
    let _535: &str;
    let mut _536: &std::string::String;
    let _537: &std::string::String;
    let _538: std::string::String;
    let mut _540: std::fmt::Arguments<'_>;
    let mut _541: &[&str];
    let mut _542: &[&str; 1];
    let _543: &[&str; 1];
    let _544: [&str; 1];
    let mut _545: &[core::fmt::rt::Argument<'_>];
    let mut _546: &[core::fmt::rt::Argument<'_>; 1];
    let _547: &[core::fmt::rt::Argument<'_>; 1];
    let _548: [core::fmt::rt::Argument<'_>; 1];
    let mut _549: core::fmt::rt::Argument<'_>;
    let mut _550: &i64;
    let _551: &i64;
    let mut _552: error::ErrorCode;
    let mut _553: isize;
    let mut _555: !;
    let mut _556: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _559: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _560: std::result::Result<u128, error::ErrorCode>;
    let mut _561: u128;
    let mut _562: &state::perp_market::PerpMarket;
    let mut _563: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _564: &state::spot_market::SpotMarket;
    let _565: &state::spot_market::SpotMarket;
    let mut _566: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _567: &state::spot_market::SpotBalanceType;
    let _568: &state::spot_market::SpotBalanceType;
    let mut _569: &state::perp_market::PoolBalance;
    let _570: &state::perp_market::PerpMarket;
    let mut _571: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _572: isize;
    let mut _574: !;
    let mut _575: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _578: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _579: std::result::Result<u128, error::ErrorCode>;
    let mut _580: u128;
    let mut _581: &state::perp_market::PerpMarket;
    let mut _582: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _583: &state::spot_market::SpotMarket;
    let _584: &state::spot_market::SpotMarket;
    let mut _585: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _586: &state::spot_market::SpotBalanceType;
    let _587: &state::spot_market::SpotBalanceType;
    let mut _588: &state::perp_market::PoolBalance;
    let _589: &state::perp_market::PerpMarket;
    let mut _590: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _591: isize;
    let mut _593: !;
    let mut _594: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _597: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _598: std::result::Result<i128, error::ErrorCode>;
    let mut _599: u128;
    let mut _600: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _601: std::result::Result<u128, error::ErrorCode>;
    let mut _602: u128;
    let mut _603: u128;
    let mut _604: isize;
    let mut _606: !;
    let mut _607: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _609: isize;
    let mut _611: !;
    let mut _612: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _614: ();
    let _615: ();
    let mut _616: &str;
    let _617: &str;
    let mut _618: &std::string::String;
    let _619: &std::string::String;
    let _620: std::string::String;
    let mut _622: std::fmt::Arguments<'_>;
    let mut _623: &[&str];
    let mut _624: &[&str; 1];
    let _625: &[&str; 1];
    let _626: [&str; 1];
    let mut _627: &[core::fmt::rt::Argument<'_>];
    let mut _628: &[core::fmt::rt::Argument<'_>; 1];
    let _629: &[core::fmt::rt::Argument<'_>; 1];
    let _630: [core::fmt::rt::Argument<'_>; 1];
    let mut _631: core::fmt::rt::Argument<'_>;
    let mut _632: &u16;
    let _633: &u16;
    let _634: &state::perp_market::PerpMarket;
    let mut _635: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _636: ();
    let _637: ();
    let mut _638: &str;
    let _639: &str;
    let mut _640: &std::string::String;
    let _641: &std::string::String;
    let _642: std::string::String;
    let mut _644: std::fmt::Arguments<'_>;
    let mut _645: &[&str];
    let mut _646: &[&str; 1];
    let _647: &[&str; 1];
    let _648: [&str; 1];
    let mut _649: &[core::fmt::rt::Argument<'_>];
    let mut _650: &[core::fmt::rt::Argument<'_>; 1];
    let _651: &[core::fmt::rt::Argument<'_>; 1];
    let _652: [core::fmt::rt::Argument<'_>; 1];
    let mut _653: core::fmt::rt::Argument<'_>;
    let mut _654: &i128;
    let _655: &i128;
    let mut _657: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _658: std::result::Result<i64, error::ErrorCode>;
    let mut _659: &state::perp_market::AMM;
    let _660: &state::perp_market::AMM;
    let _661: &state::perp_market::PerpMarket;
    let mut _662: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _663: i64;
    let mut _664: i128;
    let mut _665: isize;
    let mut _667: !;
    let mut _668: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _670: i64;
    let mut _671: &mut state::perp_market::PerpMarket;
    let mut _672: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _673: state::perp_market::MarketStatus;
    let mut _674: &mut state::perp_market::PerpMarket;
    let mut _675: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _676: ();
    let _677: ();
    let mut _678: &str;
    let _679: &str;
    let mut _680: &std::string::String;
    let _681: &std::string::String;
    let _682: std::string::String;
    let mut _684: std::fmt::Arguments<'_>;
    let mut _685: &[&str];
    let mut _686: &[&str; 1];
    let _687: &[&str; 1];
    let _688: [&str; 1];
    let mut _689: &[core::fmt::rt::Argument<'_>];
    let mut _690: &[core::fmt::rt::Argument<'_>; 1];
    let _691: &[core::fmt::rt::Argument<'_>; 1];
    let _692: [core::fmt::rt::Argument<'_>; 1];
    let mut _693: core::fmt::rt::Argument<'_>;
    let mut _694: &i64;
    let _695: &i64;
    let _696: &state::perp_market::PerpMarket;
    let mut _697: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _698: ();
    let mut _716: isize;
    let mut _717: isize;
    let mut _718: isize;
    let mut _719: isize;
    let mut _720: isize;
    let mut _721: isize;
    let mut _722: isize;
    let mut _723: isize;
    let mut _724: isize;
    let mut _725: isize;
    scope 1 {
        debug now => _7;
        let _8: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
        let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _19: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
        scope 2 {
            debug market => _8;
            let _28: error::ErrorCode;
            let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _56: ();
            let _66: error::ErrorCode;
            let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _115: ();
            let _124: error::ErrorCode;
            let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _152: ();
            let _153: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
            let _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _165: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
            let mut _711: &u16;
            scope 7 {
                debug error_code => _28;
                let _35: std::string::String;
                let mut _715: &[&str; 2];
                scope 8 {
                    debug res => _35;
                }
            }
            scope 9 {
                debug residual => _53;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _56;
                scope 12 {
                }
            }
            scope 13 {
                debug error_code => _66;
                let _73: std::string::String;
                let _92: std::string::String;
                let mut _713: &[&str; 3];
                let mut _714: &[&str; 2];
                scope 14 {
                    debug res => _73;
                }
                scope 15 {
                    debug res => _92;
                }
            }
            scope 16 {
                debug residual => _112;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _115;
                scope 19 {
                }
            }
            scope 20 {
                debug error_code => _124;
                let _131: std::string::String;
                let mut _712: &[&str; 2];
                scope 21 {
                    debug res => _131;
                }
            }
            scope 22 {
                debug residual => _149;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _152;
                scope 25 {
                }
            }
            scope 26 {
                debug spot_market => _153;
                let _166: i128;
                let _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _185: u128;
                let _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _193: u128;
                let _198: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _201: u128;
                let _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _206: i128;
                scope 31 {
                    debug fee_reserved_for_protocol => _166;
                    let _207: i128;
                    let _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _219: i128;
                    scope 48 {
                        debug budget => _207;
                        let _220: i128;
                        let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _243: u128;
                        let _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _248: i128;
                        let _251: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _254: i128;
                        let mut _710: &state::spot_market::SpotBalanceType;
                        scope 53 {
                            debug available_fee_pool => _220;
                            let _255: i128;
                            scope 66 {
                                debug fee_pool_transfer => _255;
                                let _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _278: ();
                                let _296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _299: ();
                                let _303: u128;
                                let _304: u128;
                                let _316: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _319: i128;
                                let _323: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _326: (u128, u128);
                                let _447: error::ErrorCode;
                                let _472: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _475: ();
                                let _476: i64;
                                let mut _705: &state::oracle::OracleSource;
                                let mut _708: &state::spot_market::SpotBalanceType;
                                let mut _709: &state::spot_market::SpotBalanceType;
                                scope 67 {
                                    debug residual => _275;
                                    scope 68 {
                                    }
                                }
                                scope 69 {
                                    debug val => _278;
                                    scope 70 {
                                    }
                                }
                                scope 71 {
                                    debug residual => _296;
                                    scope 72 {
                                    }
                                }
                                scope 73 {
                                    debug val => _299;
                                    scope 74 {
                                    }
                                }
                                scope 75 {
                                    debug k_scale_numerator => _303;
                                    debug k_scale_denominator => _304;
                                    let _327: math::bn::U192;
                                    let _341: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _344: math::bn::U192;
                                    let _348: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _351: math::bn::U192;
                                    scope 84 {
                                        debug new_sqrt_k => _327;
                                        let _353: math::cp_curve::UpdateKResult;
                                        let _361: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _364: math::cp_curve::UpdateKResult;
                                        scope 93 {
                                            debug update_k_result => _353;
                                            let _365: i128;
                                            let _374: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _377: i128;
                                            scope 98 {
                                                debug adjustment_cost => _365;
                                                let _378: bool;
                                                let _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _389: bool;
                                                scope 103 {
                                                    debug cost_applied => _378;
                                                    let _395: error::ErrorCode;
                                                    let _420: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _423: ();
                                                    let _434: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _437: ();
                                                    scope 108 {
                                                        debug error_code => _395;
                                                        let _402: std::string::String;
                                                        let mut _707: &[&str; 2];
                                                        scope 109 {
                                                            debug res => _402;
                                                        }
                                                    }
                                                    scope 110 {
                                                        debug residual => _420;
                                                        scope 111 {
                                                        }
                                                    }
                                                    scope 112 {
                                                        debug val => _423;
                                                        scope 113 {
                                                        }
                                                    }
                                                    scope 114 {
                                                        debug residual => _434;
                                                        scope 115 {
                                                        }
                                                    }
                                                    scope 116 {
                                                        debug val => _437;
                                                        scope 117 {
                                                        }
                                                    }
                                                }
                                                scope 104 {
                                                    debug residual => _386;
                                                    scope 105 {
                                                    }
                                                }
                                                scope 106 {
                                                    debug val => _389;
                                                    scope 107 {
                                                    }
                                                }
                                            }
                                            scope 99 {
                                                debug residual => _374;
                                                scope 100 {
                                                }
                                            }
                                            scope 101 {
                                                debug val => _377;
                                                scope 102 {
                                                }
                                            }
                                        }
                                        scope 94 {
                                            debug residual => _361;
                                            scope 95 {
                                            }
                                        }
                                        scope 96 {
                                            debug val => _364;
                                            scope 97 {
                                            }
                                        }
                                    }
                                    scope 85 {
                                        debug residual => _341;
                                        scope 86 {
                                        }
                                    }
                                    scope 87 {
                                        debug val => _344;
                                        scope 88 {
                                        }
                                    }
                                    scope 89 {
                                        debug residual => _348;
                                        scope 90 {
                                        }
                                    }
                                    scope 91 {
                                        debug val => _351;
                                        scope 92 {
                                        }
                                    }
                                }
                                scope 76 {
                                    debug residual => _316;
                                    scope 77 {
                                    }
                                }
                                scope 78 {
                                    debug val => _319;
                                    scope 79 {
                                    }
                                }
                                scope 80 {
                                    debug residual => _323;
                                    scope 81 {
                                    }
                                }
                                scope 82 {
                                    debug val => _326;
                                    scope 83 {
                                    }
                                }
                                scope 118 {
                                    debug error_code => _447;
                                    let _454: std::string::String;
                                    let mut _706: &[&str; 2];
                                    scope 119 {
                                        debug res => _454;
                                    }
                                }
                                scope 120 {
                                    debug residual => _472;
                                    scope 121 {
                                    }
                                }
                                scope 122 {
                                    debug val => _475;
                                    scope 123 {
                                    }
                                }
                                scope 124 {
                                    debug target_expiry_price => _476;
                                    let _494: std::string::String;
                                    let _513: error::ErrorCode;
                                    let _554: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _557: ();
                                    let _558: u128;
                                    let _573: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _576: u128;
                                    let mut _704: &[&str; 1];
                                    scope 125 {
                                        debug res => _494;
                                    }
                                    scope 126 {
                                        debug error_code => _513;
                                        let _520: std::string::String;
                                        let _539: std::string::String;
                                        let mut _702: &[&str; 1];
                                        let mut _703: &[&str; 2];
                                        scope 127 {
                                            debug res => _520;
                                        }
                                        scope 128 {
                                            debug res => _539;
                                        }
                                    }
                                    scope 129 {
                                        debug residual => _554;
                                        scope 130 {
                                        }
                                    }
                                    scope 131 {
                                        debug val => _557;
                                        scope 132 {
                                        }
                                    }
                                    scope 133 {
                                        debug pnl_pool_token_amount => _558;
                                        let _577: u128;
                                        let _592: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _595: u128;
                                        scope 138 {
                                            debug fee_pool_token_amount => _577;
                                            let _596: i128;
                                            let _605: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _608: u128;
                                            let _610: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _613: i128;
                                            scope 143 {
                                                debug total_excess_balance => _596;
                                                let _621: std::string::String;
                                                let _643: std::string::String;
                                                let _656: i64;
                                                let _666: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _669: i64;
                                                let mut _700: &[&str; 1];
                                                let mut _701: &[&str; 1];
                                                scope 152 {
                                                    debug res => _621;
                                                }
                                                scope 153 {
                                                    debug res => _643;
                                                }
                                                scope 154 {
                                                    debug expiry_price => _656;
                                                    let _683: std::string::String;
                                                    let mut _699: &[&str; 1];
                                                    scope 159 {
                                                        debug res => _683;
                                                    }
                                                }
                                                scope 155 {
                                                    debug residual => _666;
                                                    scope 156 {
                                                    }
                                                }
                                                scope 157 {
                                                    debug val => _669;
                                                    scope 158 {
                                                    }
                                                }
                                            }
                                            scope 144 {
                                                debug residual => _605;
                                                scope 145 {
                                                }
                                            }
                                            scope 146 {
                                                debug val => _608;
                                                scope 147 {
                                                }
                                            }
                                            scope 148 {
                                                debug residual => _610;
                                                scope 149 {
                                                }
                                            }
                                            scope 150 {
                                                debug val => _613;
                                                scope 151 {
                                                }
                                            }
                                        }
                                        scope 139 {
                                            debug residual => _592;
                                            scope 140 {
                                            }
                                        }
                                        scope 141 {
                                            debug val => _595;
                                            scope 142 {
                                            }
                                        }
                                    }
                                    scope 134 {
                                        debug residual => _573;
                                        scope 135 {
                                        }
                                    }
                                    scope 136 {
                                        debug val => _576;
                                        scope 137 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 54 {
                            debug residual => _240;
                            scope 55 {
                            }
                        }
                        scope 56 {
                            debug val => _243;
                            scope 57 {
                            }
                        }
                        scope 58 {
                            debug residual => _245;
                            scope 59 {
                            }
                        }
                        scope 60 {
                            debug val => _248;
                            scope 61 {
                            }
                        }
                        scope 62 {
                            debug residual => _251;
                            scope 63 {
                            }
                        }
                        scope 64 {
                            debug val => _254;
                            scope 65 {
                            }
                        }
                    }
                    scope 49 {
                        debug residual => _216;
                        scope 50 {
                        }
                    }
                    scope 51 {
                        debug val => _219;
                        scope 52 {
                        }
                    }
                }
                scope 32 {
                    debug residual => _182;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug val => _185;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug residual => _190;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug val => _193;
                    scope 39 {
                    }
                }
                scope 40 {
                    debug residual => _198;
                    scope 41 {
                    }
                }
                scope 42 {
                    debug val => _201;
                    scope 43 {
                    }
                }
                scope 44 {
                    debug residual => _203;
                    scope 45 {
                    }
                }
                scope 46 {
                    debug val => _206;
                    scope 47 {
                    }
                }
            }
            scope 27 {
                debug residual => _162;
                scope 28 {
                }
            }
            scope 29 {
                debug val => _165;
                scope 30 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        _7 = ((*_6).4: i64);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_2);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &_1;
        _13 = &(*_14);
        _11 = PerpMarketMap::<'_>::get_ref_mut(move _12, move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _11) -> [return: bb2, unwind: bb346];
    }

    bb2: {
        StorageDead(_11);
        _15 = discriminant(_10);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = move ((_10 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _9 = move _19;
        StorageDead(_19);
        _8 = &mut _9;
        _718 = discriminant(_10);
        StorageDead(_14);
        StorageDead(_10);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_8);
        _25 = <RefMut<'_, PerpMarket> as Deref>::deref(move _26) -> [return: bb7, unwind: bb345];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb6, unwind: bb348];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        _716 = discriminant(_10);
        StorageDead(_14);
        StorageDead(_10);
        goto -> bb330;
    }

    bb7: {
        StorageDead(_26);
        _24 = ((*_25).6: i64);
        _23 = Ne(move _24, const 0_i64);
        switchInt(move _23) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_27);
        _27 = ();
        _22 = std::result::Result::<(), error::ErrorCode>::Ok(move _27);
        StorageDead(_27);
        goto -> bb17;
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_28);
        _28 = error::ErrorCode::MarketSettlementAttemptOnActiveMarket;
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _715 = const _;
        _39 = &(*_715);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_28;
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _46) -> [return: bb10, unwind: bb345];
    }

    bb10: {
        StorageDead(_46);
        _44 = [move _45];
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = move _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_42);
        _36 = Arguments::<'_>::new_v1(move _37, move _41) -> [return: bb11, unwind: bb345];
    }

    bb11: {
        StorageDead(_41);
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb12, unwind: bb345];
    }

    bb12: {
        StorageDead(_36);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <String as Deref>::deref(move _32) -> [return: bb13, unwind: bb344];
    }

    bb13: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb14, unwind: bb344];
    }

    bb14: {
        StorageDead(_30);
        drop(_34) -> [return: bb15, unwind: bb345];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = const "Market isn't set to expire";
        _49 = &(*_50);
        _48 = solana_program::log::sol_log(move _49) -> [return: bb16, unwind: bb345];
    }

    bb16: {
        StorageDead(_49);
        StorageDead(_50);
        StorageDead(_48);
        StorageLive(_51);
        _51 = _28;
        _22 = std::result::Result::<(), error::ErrorCode>::Err(move _51);
        StorageDead(_51);
        StorageDead(_28);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_23);
        _21 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _22) -> [return: bb18, unwind: bb345];
    }

    bb18: {
        StorageDead(_22);
        _52 = discriminant(_21);
        switchInt(move _52) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_56);
        _56 = ((_21 as Continue).0: ());
        _20 = _56;
        StorageDead(_56);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &(*_8);
        _62 = <RefMut<'_, PerpMarket> as Deref>::deref(move _63) -> [return: bb22, unwind: bb345];
    }

    bb20: {
        StorageLive(_53);
        _53 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb21, unwind: bb345];
    }

    bb21: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb329;
    }

    bb22: {
        StorageDead(_63);
        _61 = ((*_62).6: i64);
        StorageLive(_64);
        _64 = _7;
        _60 = Le(move _61, move _64);
        switchInt(move _60) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_65);
        _65 = ();
        _59 = std::result::Result::<(), error::ErrorCode>::Ok(move _65);
        StorageDead(_65);
        goto -> bb39;
    }

    bb24: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_66);
        _66 = error::ErrorCode::MarketSettlementAttemptTooEarly;
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _714 = const _;
        _77 = &(*_714);
        _76 = &(*_77);
        _75 = move _76 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_66;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _84) -> [return: bb25, unwind: bb345];
    }

    bb25: {
        StorageDead(_84);
        _82 = [move _83];
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_80);
        _74 = Arguments::<'_>::new_v1(move _75, move _79) -> [return: bb26, unwind: bb345];
    }

    bb26: {
        StorageDead(_79);
        StorageDead(_75);
        _73 = format(move _74) -> [return: bb27, unwind: bb345];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_77);
        _72 = move _73;
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = <String as Deref>::deref(move _70) -> [return: bb28, unwind: bb343];
    }

    bb28: {
        _68 = &(*_69);
        StorageDead(_70);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb29, unwind: bb343];
    }

    bb29: {
        StorageDead(_68);
        drop(_72) -> [return: bb30, unwind: bb345];
    }

    bb30: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _713 = const _;
        _96 = &(*_713);
        _95 = &(*_96);
        _94 = move _95 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_8);
        _105 = <RefMut<'_, PerpMarket> as Deref>::deref(move _106) -> [return: bb31, unwind: bb345];
    }

    bb31: {
        StorageDead(_106);
        _104 = &((*_105).6: i64);
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _103) -> [return: bb32, unwind: bb345];
    }

    bb32: {
        StorageDead(_103);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &_7;
        _108 = &(*_109);
        _107 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _108) -> [return: bb33, unwind: bb345];
    }

    bb33: {
        StorageDead(_108);
        _101 = [move _102, move _107];
        StorageDead(_107);
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = move _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_99);
        _93 = Arguments::<'_>::new_v1(move _94, move _98) -> [return: bb34, unwind: bb345];
    }

    bb34: {
        StorageDead(_98);
        StorageDead(_94);
        _92 = format(move _93) -> [return: bb35, unwind: bb345];
    }

    bb35: {
        StorageDead(_93);
        StorageDead(_109);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_96);
        _91 = move _92;
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = <String as Deref>::deref(move _89) -> [return: bb36, unwind: bb342];
    }

    bb36: {
        _87 = &(*_88);
        StorageDead(_89);
        _86 = solana_program::log::sol_log(move _87) -> [return: bb37, unwind: bb342];
    }

    bb37: {
        StorageDead(_87);
        drop(_91) -> [return: bb38, unwind: bb345];
    }

    bb38: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_110);
        _110 = _66;
        _59 = std::result::Result::<(), error::ErrorCode>::Err(move _110);
        StorageDead(_110);
        StorageDead(_66);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_60);
        _58 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _59) -> [return: bb40, unwind: bb345];
    }

    bb40: {
        StorageDead(_59);
        _111 = discriminant(_58);
        switchInt(move _111) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_115);
        _115 = ((_58 as Continue).0: ());
        _57 = _115;
        StorageDead(_115);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_8);
        _121 = <RefMut<'_, PerpMarket> as Deref>::deref(move _122) -> [return: bb44, unwind: bb345];
    }

    bb42: {
        StorageLive(_112);
        _112 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb43, unwind: bb345];
    }

    bb43: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb329;
    }

    bb44: {
        StorageDead(_122);
        _120 = (((*_121).1: state::perp_market::AMM).16: i128);
        _119 = Eq(move _120, const 0_i128);
        switchInt(move _119) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_123);
        _123 = ();
        _118 = std::result::Result::<(), error::ErrorCode>::Ok(move _123);
        StorageDead(_123);
        goto -> bb54;
    }

    bb46: {
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_124);
        _124 = error::ErrorCode::MarketSettlementRequiresSettledLP;
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _712 = const _;
        _135 = &(*_712);
        _134 = &(*_135);
        _133 = move _134 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_134);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_124;
        _142 = &(*_143);
        _141 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _142) -> [return: bb47, unwind: bb345];
    }

    bb47: {
        StorageDead(_142);
        _140 = [move _141];
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = move _138 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_138);
        _132 = Arguments::<'_>::new_v1(move _133, move _137) -> [return: bb48, unwind: bb345];
    }

    bb48: {
        StorageDead(_137);
        StorageDead(_133);
        _131 = format(move _132) -> [return: bb49, unwind: bb345];
    }

    bb49: {
        StorageDead(_132);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_135);
        _130 = move _131;
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = <String as Deref>::deref(move _128) -> [return: bb50, unwind: bb341];
    }

    bb50: {
        _126 = &(*_127);
        StorageDead(_128);
        _125 = solana_program::log::sol_log(move _126) -> [return: bb51, unwind: bb341];
    }

    bb51: {
        StorageDead(_126);
        drop(_130) -> [return: bb52, unwind: bb345];
    }

    bb52: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = const "Outstanding LP in market";
        _145 = &(*_146);
        _144 = solana_program::log::sol_log(move _145) -> [return: bb53, unwind: bb345];
    }

    bb53: {
        StorageDead(_145);
        StorageDead(_146);
        StorageDead(_144);
        StorageLive(_147);
        _147 = _124;
        _118 = std::result::Result::<(), error::ErrorCode>::Err(move _147);
        StorageDead(_147);
        StorageDead(_124);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_119);
        _117 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _118) -> [return: bb55, unwind: bb345];
    }

    bb55: {
        StorageDead(_118);
        _148 = discriminant(_117);
        switchInt(move _148) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_152);
        _152 = ((_117 as Continue).0: ());
        _116 = _152;
        StorageDead(_152);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &(*_4);
        StorageLive(_158);
        StorageLive(_159);
        _711 = const _;
        _159 = &(*_711);
        _158 = &(*_159);
        _156 = SpotMarketMap::<'_>::get_ref_mut(move _157, move _158) -> [return: bb59, unwind: bb345];
    }

    bb57: {
        StorageLive(_149);
        _149 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb58, unwind: bb345];
    }

    bb58: {
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb329;
    }

    bb59: {
        StorageDead(_158);
        StorageDead(_157);
        _155 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _156) -> [return: bb60, unwind: bb345];
    }

    bb60: {
        StorageDead(_156);
        _161 = discriminant(_155);
        switchInt(move _161) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        StorageLive(_165);
        _165 = move ((_155 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _154 = move _165;
        StorageDead(_165);
        _153 = &mut _154;
        _722 = discriminant(_155);
        StorageDead(_159);
        StorageDead(_155);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &(*_8);
        _179 = <RefMut<'_, PerpMarket> as Deref>::deref(move _180) -> [return: bb64, unwind: bb340];
    }

    bb62: {
        StorageLive(_162);
        _162 = ((_155 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_164);
        _164 = _162;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _164) -> [return: bb63, unwind: bb347];
    }

    bb63: {
        StorageDead(_164);
        StorageDead(_162);
        _720 = discriminant(_155);
        StorageDead(_159);
        StorageDead(_155);
        goto -> bb328;
    }

    bb64: {
        _178 = &(*_179);
        StorageDead(_180);
        _177 = get_total_fee_lower_bound(move _178) -> [return: bb65, unwind: bb340];
    }

    bb65: {
        StorageDead(_178);
        _176 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _177) -> [return: bb66, unwind: bb340];
    }

    bb66: {
        StorageDead(_177);
        _181 = discriminant(_176);
        switchInt(move _181) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_185);
        _185 = ((_176 as Continue).0: u128);
        _175 = _185;
        StorageDead(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &(*_8);
        _187 = <RefMut<'_, PerpMarket> as Deref>::deref(move _188) -> [return: bb70, unwind: bb340];
    }

    bb68: {
        StorageLive(_182);
        _182 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_184);
        _184 = _182;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _184) -> [return: bb69, unwind: bb340];
    }

    bb69: {
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb326;
    }

    bb70: {
        StorageDead(_188);
        _186 = (((*_187).1: state::perp_market::AMM).33: u128);
        _174 = <u128 as SafeMath>::safe_add(move _175, move _186) -> [return: bb71, unwind: bb340];
    }

    bb71: {
        StorageDead(_186);
        StorageDead(_175);
        _173 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _174) -> [return: bb72, unwind: bb340];
    }

    bb72: {
        StorageDead(_174);
        _189 = discriminant(_173);
        switchInt(move _189) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_193);
        _193 = ((_173 as Continue).0: u128);
        _172 = _193;
        StorageDead(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &(*_8);
        _195 = <RefMut<'_, PerpMarket> as Deref>::deref(move _196) -> [return: bb76, unwind: bb340];
    }

    bb74: {
        StorageLive(_190);
        _190 = ((_173 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_192);
        _192 = _190;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _192) -> [return: bb75, unwind: bb340];
    }

    bb75: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb325;
    }

    bb76: {
        StorageDead(_196);
        _194 = (((*_195).1: state::perp_market::AMM).32: u128);
        _171 = <u128 as SafeMath>::safe_sub(move _172, move _194) -> [return: bb77, unwind: bb340];
    }

    bb77: {
        StorageDead(_194);
        StorageDead(_172);
        _170 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _171) -> [return: bb78, unwind: bb340];
    }

    bb78: {
        StorageDead(_171);
        _197 = discriminant(_170);
        switchInt(move _197) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_201);
        _201 = ((_170 as Continue).0: u128);
        _169 = _201;
        StorageDead(_201);
        _168 = <u128 as Cast>::cast::<i128>(move _169) -> [return: bb82, unwind: bb340];
    }

    bb80: {
        StorageLive(_198);
        _198 = ((_170 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_200);
        _200 = _198;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _200) -> [return: bb81, unwind: bb340];
    }

    bb81: {
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb324;
    }

    bb82: {
        StorageDead(_169);
        _167 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _168) -> [return: bb83, unwind: bb340];
    }

    bb83: {
        StorageDead(_168);
        _202 = discriminant(_167);
        switchInt(move _202) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_206);
        _206 = ((_167 as Continue).0: i128);
        _166 = _206;
        StorageDead(_206);
        StorageDead(_195);
        StorageDead(_187);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_167);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &(*_8);
        _212 = <RefMut<'_, PerpMarket> as Deref>::deref(move _213) -> [return: bb87, unwind: bb340];
    }

    bb85: {
        StorageLive(_203);
        _203 = ((_167 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_205);
        _205 = _203;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _205) -> [return: bb86, unwind: bb340];
    }

    bb86: {
        StorageDead(_205);
        StorageDead(_203);
        goto -> bb324;
    }

    bb87: {
        StorageDead(_213);
        _211 = (((*_212).1: state::perp_market::AMM).31: i128);
        StorageLive(_214);
        _214 = _166;
        _210 = <i128 as SafeMath>::safe_sub(move _211, move _214) -> [return: bb88, unwind: bb340];
    }

    bb88: {
        StorageDead(_214);
        StorageDead(_211);
        _209 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _210) -> [return: bb89, unwind: bb340];
    }

    bb89: {
        StorageDead(_210);
        _215 = discriminant(_209);
        switchInt(move _215) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_219);
        _219 = ((_209 as Continue).0: i128);
        _208 = _219;
        StorageDead(_219);
        _207 = <i128 as Ord>::max(move _208, const 0_i128) -> [return: bb93, unwind: bb340];
    }

    bb91: {
        StorageLive(_216);
        _216 = ((_209 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_218);
        _218 = _216;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _218) -> [return: bb92, unwind: bb340];
    }

    bb92: {
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_208);
        StorageDead(_212);
        StorageDead(_209);
        goto -> bb323;
    }

    bb93: {
        StorageDead(_208);
        StorageDead(_212);
        StorageDead(_209);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &(*_8);
        _231 = <RefMut<'_, PerpMarket> as Deref>::deref(move _232) -> [return: bb94, unwind: bb340];
    }

    bb94: {
        StorageDead(_232);
        _230 = ((((*_231).1: state::perp_market::AMM).4: state::perp_market::PoolBalance).0: u128);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &(*_153);
        _234 = <RefMut<'_, SpotMarket> as Deref>::deref(move _235) -> [return: bb95, unwind: bb340];
    }

    bb95: {
        _233 = &(*_234);
        StorageDead(_235);
        StorageLive(_236);
        StorageLive(_237);
        _710 = const _;
        _237 = &(*_710);
        _236 = &(*_237);
        _229 = get_token_amount(move _230, move _233, move _236) -> [return: bb96, unwind: bb340];
    }

    bb96: {
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_230);
        _228 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _229) -> [return: bb97, unwind: bb340];
    }

    bb97: {
        StorageDead(_229);
        _239 = discriminant(_228);
        switchInt(move _239) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_243);
        _243 = ((_228 as Continue).0: u128);
        _227 = _243;
        StorageDead(_243);
        _226 = <u128 as Cast>::cast::<i128>(move _227) -> [return: bb101, unwind: bb340];
    }

    bb99: {
        StorageLive(_240);
        _240 = ((_228 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb100, unwind: bb340];
    }

    bb100: {
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_227);
        StorageDead(_226);
        goto -> bb320;
    }

    bb101: {
        StorageDead(_227);
        _225 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _226) -> [return: bb102, unwind: bb340];
    }

    bb102: {
        StorageDead(_226);
        _244 = discriminant(_225);
        switchInt(move _244) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_248);
        _248 = ((_225 as Continue).0: i128);
        _224 = _248;
        StorageDead(_248);
        StorageLive(_249);
        _249 = _166;
        _223 = <i128 as SafeMath>::safe_sub(move _224, move _249) -> [return: bb106, unwind: bb340];
    }

    bb104: {
        StorageLive(_245);
        _245 = ((_225 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_247);
        _247 = _245;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _247) -> [return: bb105, unwind: bb340];
    }

    bb105: {
        StorageDead(_247);
        StorageDead(_245);
        goto -> bb320;
    }

    bb106: {
        StorageDead(_249);
        StorageDead(_224);
        _222 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _223) -> [return: bb107, unwind: bb340];
    }

    bb107: {
        StorageDead(_223);
        _250 = discriminant(_222);
        switchInt(move _250) -> [0: bb108, 1: bb109, otherwise: bb4];
    }

    bb108: {
        StorageLive(_254);
        _254 = ((_222 as Continue).0: i128);
        _221 = _254;
        StorageDead(_254);
        _220 = <i128 as Ord>::max(move _221, const 0_i128) -> [return: bb111, unwind: bb340];
    }

    bb109: {
        StorageLive(_251);
        _251 = ((_222 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_253);
        _253 = _251;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _253) -> [return: bb110, unwind: bb340];
    }

    bb110: {
        StorageDead(_253);
        StorageDead(_251);
        goto -> bb321;
    }

    bb111: {
        StorageDead(_221);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_222);
        StorageLive(_255);
        StorageLive(_256);
        _256 = _207;
        StorageLive(_257);
        _257 = _220;
        _255 = <i128 as Ord>::min(move _256, move _257) -> [return: bb112, unwind: bb340];
    }

    bb112: {
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = _255;
        _261 = core::num::<impl i128>::unsigned_abs(move _262) -> [return: bb113, unwind: bb340];
    }

    bb113: {
        StorageDead(_262);
        StorageLive(_263);
        StorageLive(_264);
        _709 = const _;
        _264 = &(*_709);
        _263 = &(*_264);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &mut (*_153);
        _267 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _268) -> [return: bb114, unwind: bb340];
    }

    bb114: {
        _266 = &mut (*_267);
        StorageDead(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &mut (*_8);
        _272 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _273) -> [return: bb115, unwind: bb340];
    }

    bb115: {
        StorageDead(_273);
        _271 = &mut (((*_272).1: state::perp_market::AMM).4: state::perp_market::PoolBalance);
        _270 = &mut (*_271);
        _269 = move _270 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_270);
        _260 = update_spot_balances(move _261, move _263, move _266, move _269, const false) -> [return: bb116, unwind: bb340];
    }

    bb116: {
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_263);
        StorageDead(_261);
        _259 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _260) -> [return: bb117, unwind: bb340];
    }

    bb117: {
        StorageDead(_260);
        _274 = discriminant(_259);
        switchInt(move _274) -> [0: bb118, 1: bb119, otherwise: bb4];
    }

    bb118: {
        StorageLive(_278);
        _278 = ((_259 as Continue).0: ());
        _258 = _278;
        StorageDead(_278);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_259);
        StorageDead(_258);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = _255;
        _282 = core::num::<impl i128>::unsigned_abs(move _283) -> [return: bb121, unwind: bb340];
    }

    bb119: {
        StorageLive(_275);
        _275 = ((_259 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_277);
        _277 = _275;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _277) -> [return: bb120, unwind: bb340];
    }

    bb120: {
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_259);
        StorageDead(_258);
        goto -> bb319;
    }

    bb121: {
        StorageDead(_283);
        StorageLive(_284);
        StorageLive(_285);
        _708 = const _;
        _285 = &(*_708);
        _284 = &(*_285);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &mut (*_153);
        _288 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _289) -> [return: bb122, unwind: bb340];
    }

    bb122: {
        _287 = &mut (*_288);
        StorageDead(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &mut (*_8);
        _293 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _294) -> [return: bb123, unwind: bb340];
    }

    bb123: {
        StorageDead(_294);
        _292 = &mut ((*_293).2: state::perp_market::PoolBalance);
        _291 = &mut (*_292);
        _290 = move _291 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_291);
        _281 = update_spot_balances(move _282, move _284, move _287, move _290, const false) -> [return: bb124, unwind: bb340];
    }

    bb124: {
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_284);
        StorageDead(_282);
        _280 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _281) -> [return: bb125, unwind: bb340];
    }

    bb125: {
        StorageDead(_281);
        _295 = discriminant(_280);
        switchInt(move _295) -> [0: bb126, 1: bb127, otherwise: bb4];
    }

    bb126: {
        StorageLive(_299);
        _299 = ((_280 as Continue).0: ());
        _279 = _299;
        StorageDead(_299);
        StorageDead(_293);
        StorageDead(_292);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_280);
        StorageDead(_279);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = _207;
        _301 = Gt(move _302, const 0_i128);
        switchInt(move _301) -> [0: bb130, otherwise: bb129];
    }

    bb127: {
        StorageLive(_296);
        _296 = ((_280 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_298);
        _298 = _296;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _298) -> [return: bb128, unwind: bb340];
    }

    bb128: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_293);
        StorageDead(_292);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_280);
        StorageDead(_279);
        goto -> bb319;
    }

    bb129: {
        StorageDead(_302);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &mut (*_8);
        _309 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _310) -> [return: bb131, unwind: bb340];
    }

    bb130: {
        StorageDead(_302);
        _300 = const ();
        goto -> bb200;
    }

    bb131: {
        _308 = &mut (*_309);
        StorageDead(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = _207;
        _313 = <i128 as Cast>::cast::<i128>(move _314) -> [return: bb132, unwind: bb340];
    }

    bb132: {
        StorageDead(_314);
        _312 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _313) -> [return: bb133, unwind: bb340];
    }

    bb133: {
        StorageDead(_313);
        _315 = discriminant(_312);
        switchInt(move _315) -> [0: bb134, 1: bb135, otherwise: bb4];
    }

    bb134: {
        StorageLive(_319);
        _319 = ((_312 as Continue).0: i128);
        _311 = _319;
        StorageDead(_319);
        StorageLive(_320);
        _321 = CheckedMul(const _, const 100_i128);
        assert(!move (_321.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 100_i128) -> [success: bb137, unwind: bb340];
    }

    bb135: {
        StorageLive(_316);
        _316 = ((_312 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_318);
        _318 = _316;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _318) -> [return: bb136, unwind: bb340];
    }

    bb136: {
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_311);
        StorageDead(_308);
        StorageDead(_307);
        goto -> bb317;
    }

    bb137: {
        _320 = move (_321.0: i128);
        _307 = calculate_budgeted_k_scale(move _308, move _311, move _320, const _) -> [return: bb138, unwind: bb340];
    }

    bb138: {
        StorageDead(_320);
        StorageDead(_311);
        StorageDead(_308);
        _306 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _307) -> [return: bb139, unwind: bb340];
    }

    bb139: {
        StorageDead(_307);
        _322 = discriminant(_306);
        switchInt(move _322) -> [0: bb140, 1: bb141, otherwise: bb4];
    }

    bb140: {
        StorageLive(_326);
        _326 = ((_306 as Continue).0: (u128, u128));
        _305 = _326;
        StorageDead(_326);
        StorageLive(_303);
        _303 = (_305.0: u128);
        StorageLive(_304);
        _304 = (_305.1: u128);
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_306);
        StorageDead(_305);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &(*_8);
        _336 = <RefMut<'_, PerpMarket> as Deref>::deref(move _337) -> [return: bb143, unwind: bb340];
    }

    bb141: {
        StorageLive(_323);
        _323 = ((_306 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_325);
        _325 = _323;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _325) -> [return: bb142, unwind: bb340];
    }

    bb142: {
        StorageDead(_325);
        StorageDead(_323);
        goto -> bb317;
    }

    bb143: {
        StorageDead(_337);
        _335 = (((*_336).1: state::perp_market::AMM).10: u128);
        _334 = <U192 as From<u128>>::from(move _335) -> [return: bb144, unwind: bb340];
    }

    bb144: {
        StorageDead(_335);
        StorageLive(_338);
        StorageLive(_339);
        _339 = _303;
        _338 = <U192 as From<u128>>::from(move _339) -> [return: bb145, unwind: bb340];
    }

    bb145: {
        StorageDead(_339);
        _333 = <U192 as SafeMath>::safe_mul(move _334, move _338) -> [return: bb146, unwind: bb340];
    }

    bb146: {
        StorageDead(_338);
        StorageDead(_334);
        _332 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _333) -> [return: bb147, unwind: bb340];
    }

    bb147: {
        StorageDead(_333);
        _340 = discriminant(_332);
        switchInt(move _340) -> [0: bb148, 1: bb149, otherwise: bb4];
    }

    bb148: {
        StorageLive(_344);
        _344 = ((_332 as Continue).0: math::bn::U192);
        _331 = _344;
        StorageDead(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = _304;
        _345 = <U192 as From<u128>>::from(move _346) -> [return: bb151, unwind: bb340];
    }

    bb149: {
        StorageLive(_341);
        _341 = ((_332 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_343);
        _343 = _341;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _343) -> [return: bb150, unwind: bb340];
    }

    bb150: {
        StorageDead(_343);
        StorageDead(_341);
        StorageDead(_331);
        StorageDead(_330);
        goto -> bb315;
    }

    bb151: {
        StorageDead(_346);
        _330 = <U192 as SafeMath>::safe_div(move _331, move _345) -> [return: bb152, unwind: bb340];
    }

    bb152: {
        StorageDead(_345);
        StorageDead(_331);
        _329 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _330) -> [return: bb153, unwind: bb340];
    }

    bb153: {
        StorageDead(_330);
        _347 = discriminant(_329);
        switchInt(move _347) -> [0: bb154, 1: bb155, otherwise: bb4];
    }

    bb154: {
        StorageLive(_351);
        _351 = ((_329 as Continue).0: math::bn::U192);
        _328 = _351;
        StorageDead(_351);
        StorageLive(_352);
        _352 = <U192 as From<u128>>::from(const _) -> [return: bb157, unwind: bb340];
    }

    bb155: {
        StorageLive(_348);
        _348 = ((_329 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_350);
        _350 = _348;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _350) -> [return: bb156, unwind: bb340];
    }

    bb156: {
        StorageDead(_350);
        StorageDead(_348);
        goto -> bb315;
    }

    bb157: {
        _327 = <U192 as Ord>::min(move _328, move _352) -> [return: bb158, unwind: bb340];
    }

    bb158: {
        StorageDead(_352);
        StorageDead(_328);
        StorageDead(_336);
        StorageDead(_332);
        StorageDead(_329);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &(*_8);
        _357 = <RefMut<'_, PerpMarket> as Deref>::deref(move _358) -> [return: bb159, unwind: bb340];
    }

    bb159: {
        _356 = &(*_357);
        StorageDead(_358);
        StorageLive(_359);
        _359 = _327;
        _355 = get_update_k_result(move _356, move _359, const true) -> [return: bb160, unwind: bb340];
    }

    bb160: {
        StorageDead(_359);
        StorageDead(_356);
        _354 = <std::result::Result<UpdateKResult, error::ErrorCode> as Try>::branch(move _355) -> [return: bb161, unwind: bb340];
    }

    bb161: {
        StorageDead(_355);
        _360 = discriminant(_354);
        switchInt(move _360) -> [0: bb162, 1: bb163, otherwise: bb4];
    }

    bb162: {
        StorageLive(_364);
        _364 = move ((_354 as Continue).0: math::cp_curve::UpdateKResult);
        _353 = move _364;
        StorageDead(_364);
        StorageDead(_357);
        StorageDead(_354);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &mut (*_8);
        _369 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _370) -> [return: bb165, unwind: bb340];
    }

    bb163: {
        StorageLive(_361);
        _361 = ((_354 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_363);
        _363 = _361;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _363) -> [return: bb164, unwind: bb340];
    }

    bb164: {
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_357);
        StorageDead(_354);
        goto -> bb314;
    }

    bb165: {
        _368 = &mut (*_369);
        StorageDead(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &_353;
        _371 = &(*_372);
        _367 = adjust_k_cost(move _368, move _371) -> [return: bb166, unwind: bb340];
    }

    bb166: {
        StorageDead(_371);
        StorageDead(_368);
        _366 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _367) -> [return: bb167, unwind: bb340];
    }

    bb167: {
        StorageDead(_367);
        _373 = discriminant(_366);
        switchInt(move _373) -> [0: bb168, 1: bb169, otherwise: bb4];
    }

    bb168: {
        StorageLive(_377);
        _377 = ((_366 as Continue).0: i128);
        _365 = _377;
        StorageDead(_377);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_366);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = &mut (*_8);
        _382 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _383) -> [return: bb171, unwind: bb340];
    }

    bb169: {
        StorageLive(_374);
        _374 = ((_366 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_376);
        _376 = _374;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _376) -> [return: bb170, unwind: bb340];
    }

    bb170: {
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_366);
        goto -> bb313;
    }

    bb171: {
        _381 = &mut (*_382);
        StorageDead(_383);
        StorageLive(_384);
        _384 = _365;
        _380 = apply_cost_to_market(move _381, move _384, const true) -> [return: bb172, unwind: bb340];
    }

    bb172: {
        StorageDead(_384);
        StorageDead(_381);
        _379 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _380) -> [return: bb173, unwind: bb340];
    }

    bb173: {
        StorageDead(_380);
        _385 = discriminant(_379);
        switchInt(move _385) -> [0: bb174, 1: bb175, otherwise: bb4];
    }

    bb174: {
        StorageLive(_389);
        _389 = ((_379 as Continue).0: bool);
        _378 = _389;
        StorageDead(_389);
        StorageDead(_382);
        StorageDead(_379);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = _378;
        switchInt(move _393) -> [0: bb178, otherwise: bb177];
    }

    bb175: {
        StorageLive(_386);
        _386 = ((_379 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_388);
        _388 = _386;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _388) -> [return: bb176, unwind: bb340];
    }

    bb176: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_382);
        StorageDead(_379);
        goto -> bb312;
    }

    bb177: {
        StorageLive(_394);
        _394 = ();
        _392 = std::result::Result::<(), error::ErrorCode>::Ok(move _394);
        StorageDead(_394);
        goto -> bb186;
    }

    bb178: {
        StorageLive(_395);
        _395 = error::ErrorCode::InvalidUpdateK;
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _707 = const _;
        _406 = &(*_707);
        _405 = &(*_406);
        _404 = move _405 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_405);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_395;
        _413 = &(*_414);
        _412 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _413) -> [return: bb179, unwind: bb340];
    }

    bb179: {
        StorageDead(_413);
        _411 = [move _412];
        StorageDead(_412);
        _410 = &_411;
        _409 = &(*_410);
        _408 = move _409 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_409);
        _403 = Arguments::<'_>::new_v1(move _404, move _408) -> [return: bb180, unwind: bb340];
    }

    bb180: {
        StorageDead(_408);
        StorageDead(_404);
        _402 = format(move _403) -> [return: bb181, unwind: bb340];
    }

    bb181: {
        StorageDead(_403);
        StorageDead(_414);
        StorageDead(_411);
        StorageDead(_410);
        StorageDead(_406);
        _401 = move _402;
        StorageDead(_402);
        _400 = &_401;
        _399 = &(*_400);
        _398 = <String as Deref>::deref(move _399) -> [return: bb182, unwind: bb339];
    }

    bb182: {
        _397 = &(*_398);
        StorageDead(_399);
        _396 = solana_program::log::sol_log(move _397) -> [return: bb183, unwind: bb339];
    }

    bb183: {
        StorageDead(_397);
        drop(_401) -> [return: bb184, unwind: bb340];
    }

    bb184: {
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_398);
        StorageDead(_396);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _417 = const "Issue applying k increase on market";
        _416 = &(*_417);
        _415 = solana_program::log::sol_log(move _416) -> [return: bb185, unwind: bb340];
    }

    bb185: {
        StorageDead(_416);
        StorageDead(_417);
        StorageDead(_415);
        StorageLive(_418);
        _418 = _395;
        _392 = std::result::Result::<(), error::ErrorCode>::Err(move _418);
        StorageDead(_418);
        StorageDead(_395);
        goto -> bb186;
    }

    bb186: {
        StorageDead(_393);
        _391 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _392) -> [return: bb187, unwind: bb340];
    }

    bb187: {
        StorageDead(_392);
        _419 = discriminant(_391);
        switchInt(move _419) -> [0: bb188, 1: bb189, otherwise: bb4];
    }

    bb188: {
        StorageLive(_423);
        _423 = ((_391 as Continue).0: ());
        _390 = _423;
        StorageDead(_423);
        StorageDead(_391);
        StorageDead(_390);
        StorageLive(_424);
        _424 = _378;
        switchInt(move _424) -> [0: bb192, otherwise: bb191];
    }

    bb189: {
        StorageLive(_420);
        _420 = ((_391 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_422);
        _422 = _420;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _422) -> [return: bb190, unwind: bb340];
    }

    bb190: {
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_391);
        StorageDead(_390);
        goto -> bb312;
    }

    bb191: {
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _430 = &mut (*_8);
        _429 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _430) -> [return: bb193, unwind: bb340];
    }

    bb192: {
        _300 = const ();
        goto -> bb199;
    }

    bb193: {
        _428 = &mut (*_429);
        StorageDead(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = &_353;
        _431 = &(*_432);
        _427 = cp_curve::update_k(move _428, move _431) -> [return: bb194, unwind: bb340];
    }

    bb194: {
        StorageDead(_431);
        StorageDead(_428);
        _426 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _427) -> [return: bb195, unwind: bb340];
    }

    bb195: {
        StorageDead(_427);
        _433 = discriminant(_426);
        switchInt(move _433) -> [0: bb196, 1: bb197, otherwise: bb4];
    }

    bb196: {
        StorageLive(_437);
        _437 = ((_426 as Continue).0: ());
        _425 = _437;
        StorageDead(_437);
        StorageDead(_432);
        StorageDead(_429);
        StorageDead(_426);
        StorageDead(_425);
        _300 = const ();
        goto -> bb199;
    }

    bb197: {
        StorageLive(_434);
        _434 = ((_426 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_436);
        _436 = _434;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _436) -> [return: bb198, unwind: bb340];
    }

    bb198: {
        StorageDead(_436);
        StorageDead(_434);
        StorageDead(_432);
        StorageDead(_429);
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_424);
        goto -> bb312;
    }

    bb199: {
        StorageDead(_424);
        StorageDead(_378);
        StorageDead(_365);
        StorageDead(_353);
        StorageDead(_327);
        StorageDead(_304);
        StorageDead(_303);
        goto -> bb200;
    }

    bb200: {
        StorageDead(_301);
        StorageDead(_300);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = &(*_153);
        _444 = <RefMut<'_, SpotMarket> as Deref>::deref(move _445) -> [return: bb201, unwind: bb340];
    }

    bb201: {
        StorageDead(_445);
        _443 = ((*_444).41: u32);
        _442 = core::num::<impl u128>::pow(const 10_u128, move _443) -> [return: bb202, unwind: bb340];
    }

    bb202: {
        StorageDead(_443);
        _441 = Eq(move _442, const _);
        switchInt(move _441) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        StorageDead(_444);
        StorageDead(_442);
        StorageLive(_446);
        _446 = ();
        _440 = std::result::Result::<(), error::ErrorCode>::Ok(move _446);
        StorageDead(_446);
        goto -> bb212;
    }

    bb204: {
        StorageDead(_444);
        StorageDead(_442);
        StorageLive(_447);
        _447 = error::ErrorCode::UnsupportedSpotMarket;
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _706 = const _;
        _458 = &(*_706);
        _457 = &(*_458);
        _456 = move _457 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_457);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        _466 = &_447;
        _465 = &(*_466);
        _464 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _465) -> [return: bb205, unwind: bb340];
    }

    bb205: {
        StorageDead(_465);
        _463 = [move _464];
        StorageDead(_464);
        _462 = &_463;
        _461 = &(*_462);
        _460 = move _461 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_461);
        _455 = Arguments::<'_>::new_v1(move _456, move _460) -> [return: bb206, unwind: bb340];
    }

    bb206: {
        StorageDead(_460);
        StorageDead(_456);
        _454 = format(move _455) -> [return: bb207, unwind: bb340];
    }

    bb207: {
        StorageDead(_455);
        StorageDead(_466);
        StorageDead(_463);
        StorageDead(_462);
        StorageDead(_458);
        _453 = move _454;
        StorageDead(_454);
        _452 = &_453;
        _451 = &(*_452);
        _450 = <String as Deref>::deref(move _451) -> [return: bb208, unwind: bb338];
    }

    bb208: {
        _449 = &(*_450);
        StorageDead(_451);
        _448 = solana_program::log::sol_log(move _449) -> [return: bb209, unwind: bb338];
    }

    bb209: {
        StorageDead(_449);
        drop(_453) -> [return: bb210, unwind: bb340];
    }

    bb210: {
        StorageDead(_453);
        StorageDead(_452);
        StorageDead(_450);
        StorageDead(_448);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = const "Only support bank.decimals == QUOTE_PRECISION";
        _468 = &(*_469);
        _467 = solana_program::log::sol_log(move _468) -> [return: bb211, unwind: bb340];
    }

    bb211: {
        StorageDead(_468);
        StorageDead(_469);
        StorageDead(_467);
        StorageLive(_470);
        _470 = _447;
        _440 = std::result::Result::<(), error::ErrorCode>::Err(move _470);
        StorageDead(_470);
        StorageDead(_447);
        goto -> bb212;
    }

    bb212: {
        StorageDead(_441);
        _439 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _440) -> [return: bb213, unwind: bb340];
    }

    bb213: {
        StorageDead(_440);
        _471 = discriminant(_439);
        switchInt(move _471) -> [0: bb214, 1: bb215, otherwise: bb4];
    }

    bb214: {
        StorageLive(_475);
        _475 = ((_439 as Continue).0: ());
        _438 = _475;
        StorageDead(_475);
        StorageDead(_439);
        StorageDead(_438);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _480 = &(*_8);
        _479 = <RefMut<'_, PerpMarket> as Deref>::deref(move _480) -> [return: bb217, unwind: bb340];
    }

    bb215: {
        StorageLive(_472);
        _472 = ((_439 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_474);
        _474 = _472;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _474) -> [return: bb216, unwind: bb340];
    }

    bb216: {
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_439);
        StorageDead(_438);
        goto -> bb319;
    }

    bb217: {
        StorageDead(_480);
        _478 = &(((*_479).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        StorageLive(_481);
        _705 = const _;
        _481 = &(*_705);
        _477 = <state::oracle::OracleSource as PartialEq>::eq(move _478, move _481) -> [return: bb218, unwind: bb340];
    }

    bb218: {
        switchInt(move _477) -> [0: bb221, otherwise: bb219];
    }

    bb219: {
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_478);
        StorageLive(_483);
        StorageLive(_484);
        _484 = &(*_8);
        _483 = <RefMut<'_, PerpMarket> as Deref>::deref(move _484) -> [return: bb220, unwind: bb340];
    }

    bb220: {
        StorageDead(_484);
        _476 = ((((*_483).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).0: i64);
        StorageDead(_483);
        goto -> bb223;
    }

    bb221: {
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_478);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &(*_8);
        _485 = <RefMut<'_, PerpMarket> as Deref>::deref(move _486) -> [return: bb222, unwind: bb340];
    }

    bb222: {
        StorageDead(_486);
        _476 = ((((*_485).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        StorageDead(_485);
        goto -> bb223;
    }

    bb223: {
        StorageDead(_477);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        _704 = const _;
        _498 = &(*_704);
        _497 = &(*_498);
        _496 = move _497 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_497);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        _506 = &_476;
        _505 = &(*_506);
        _504 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _505) -> [return: bb224, unwind: bb340];
    }

    bb224: {
        StorageDead(_505);
        _503 = [move _504];
        StorageDead(_504);
        _502 = &_503;
        _501 = &(*_502);
        _500 = move _501 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_501);
        _495 = Arguments::<'_>::new_v1(move _496, move _500) -> [return: bb225, unwind: bb340];
    }

    bb225: {
        StorageDead(_500);
        StorageDead(_496);
        _494 = format(move _495) -> [return: bb226, unwind: bb340];
    }

    bb226: {
        StorageDead(_495);
        StorageDead(_506);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_498);
        _493 = move _494;
        StorageDead(_494);
        _492 = &_493;
        _491 = &(*_492);
        _490 = <String as Deref>::deref(move _491) -> [return: bb227, unwind: bb337];
    }

    bb227: {
        _489 = &(*_490);
        StorageDead(_491);
        _488 = solana_program::log::sol_log(move _489) -> [return: bb228, unwind: bb337];
    }

    bb228: {
        StorageDead(_489);
        drop(_493) -> [return: bb229, unwind: bb340];
    }

    bb229: {
        StorageDead(_493);
        StorageDead(_492);
        StorageDead(_490);
        StorageDead(_488);
        _487 = const ();
        StorageDead(_487);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = _476;
        _510 = Gt(move _511, const 0_i64);
        switchInt(move _510) -> [0: bb231, otherwise: bb230];
    }

    bb230: {
        StorageDead(_511);
        StorageLive(_512);
        _512 = ();
        _509 = std::result::Result::<(), error::ErrorCode>::Ok(move _512);
        StorageDead(_512);
        goto -> bb244;
    }

    bb231: {
        StorageDead(_511);
        StorageLive(_513);
        _513 = error::ErrorCode::MarketSettlementTargetPriceInvalid;
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _703 = const _;
        _524 = &(*_703);
        _523 = &(*_524);
        _522 = move _523 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_523);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        _532 = &_513;
        _531 = &(*_532);
        _530 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _531) -> [return: bb232, unwind: bb340];
    }

    bb232: {
        StorageDead(_531);
        _529 = [move _530];
        StorageDead(_530);
        _528 = &_529;
        _527 = &(*_528);
        _526 = move _527 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_527);
        _521 = Arguments::<'_>::new_v1(move _522, move _526) -> [return: bb233, unwind: bb340];
    }

    bb233: {
        StorageDead(_526);
        StorageDead(_522);
        _520 = format(move _521) -> [return: bb234, unwind: bb340];
    }

    bb234: {
        StorageDead(_521);
        StorageDead(_532);
        StorageDead(_529);
        StorageDead(_528);
        StorageDead(_524);
        _519 = move _520;
        StorageDead(_520);
        _518 = &_519;
        _517 = &(*_518);
        _516 = <String as Deref>::deref(move _517) -> [return: bb235, unwind: bb336];
    }

    bb235: {
        _515 = &(*_516);
        StorageDead(_517);
        _514 = solana_program::log::sol_log(move _515) -> [return: bb236, unwind: bb336];
    }

    bb236: {
        StorageDead(_515);
        drop(_519) -> [return: bb237, unwind: bb340];
    }

    bb237: {
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_516);
        StorageDead(_514);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        _702 = const _;
        _543 = &(*_702);
        _542 = &(*_543);
        _541 = move _542 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_542);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        _551 = &_476;
        _550 = &(*_551);
        _549 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _550) -> [return: bb238, unwind: bb340];
    }

    bb238: {
        StorageDead(_550);
        _548 = [move _549];
        StorageDead(_549);
        _547 = &_548;
        _546 = &(*_547);
        _545 = move _546 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_546);
        _540 = Arguments::<'_>::new_v1(move _541, move _545) -> [return: bb239, unwind: bb340];
    }

    bb239: {
        StorageDead(_545);
        StorageDead(_541);
        _539 = format(move _540) -> [return: bb240, unwind: bb340];
    }

    bb240: {
        StorageDead(_540);
        StorageDead(_551);
        StorageDead(_548);
        StorageDead(_547);
        StorageDead(_543);
        _538 = move _539;
        StorageDead(_539);
        _537 = &_538;
        _536 = &(*_537);
        _535 = <String as Deref>::deref(move _536) -> [return: bb241, unwind: bb335];
    }

    bb241: {
        _534 = &(*_535);
        StorageDead(_536);
        _533 = solana_program::log::sol_log(move _534) -> [return: bb242, unwind: bb335];
    }

    bb242: {
        StorageDead(_534);
        drop(_538) -> [return: bb243, unwind: bb340];
    }

    bb243: {
        StorageDead(_538);
        StorageDead(_537);
        StorageDead(_535);
        StorageDead(_533);
        StorageLive(_552);
        _552 = _513;
        _509 = std::result::Result::<(), error::ErrorCode>::Err(move _552);
        StorageDead(_552);
        StorageDead(_513);
        goto -> bb244;
    }

    bb244: {
        StorageDead(_510);
        _508 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _509) -> [return: bb245, unwind: bb340];
    }

    bb245: {
        StorageDead(_509);
        _553 = discriminant(_508);
        switchInt(move _553) -> [0: bb246, 1: bb247, otherwise: bb4];
    }

    bb246: {
        StorageLive(_557);
        _557 = ((_508 as Continue).0: ());
        _507 = _557;
        StorageDead(_557);
        StorageDead(_508);
        StorageDead(_507);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        _563 = &(*_8);
        _562 = <RefMut<'_, PerpMarket> as Deref>::deref(move _563) -> [return: bb249, unwind: bb340];
    }

    bb247: {
        StorageLive(_554);
        _554 = ((_508 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_556);
        _556 = _554;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _556) -> [return: bb248, unwind: bb340];
    }

    bb248: {
        StorageDead(_556);
        StorageDead(_554);
        StorageDead(_508);
        StorageDead(_507);
        goto -> bb311;
    }

    bb249: {
        StorageDead(_563);
        _561 = (((*_562).2: state::perp_market::PoolBalance).0: u128);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = &(*_153);
        _565 = <RefMut<'_, SpotMarket> as Deref>::deref(move _566) -> [return: bb250, unwind: bb340];
    }

    bb250: {
        _564 = &(*_565);
        StorageDead(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        _571 = &(*_8);
        _570 = <RefMut<'_, PerpMarket> as Deref>::deref(move _571) -> [return: bb251, unwind: bb340];
    }

    bb251: {
        StorageDead(_571);
        _569 = &((*_570).2: state::perp_market::PoolBalance);
        _568 = <PoolBalance as SpotBalance>::balance_type(move _569) -> [return: bb252, unwind: bb340];
    }

    bb252: {
        _567 = &(*_568);
        StorageDead(_569);
        _560 = get_token_amount(move _561, move _564, move _567) -> [return: bb253, unwind: bb340];
    }

    bb253: {
        StorageDead(_567);
        StorageDead(_564);
        StorageDead(_561);
        _559 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _560) -> [return: bb254, unwind: bb340];
    }

    bb254: {
        StorageDead(_560);
        _572 = discriminant(_559);
        switchInt(move _572) -> [0: bb255, 1: bb256, otherwise: bb4];
    }

    bb255: {
        StorageLive(_576);
        _576 = ((_559 as Continue).0: u128);
        _558 = _576;
        StorageDead(_576);
        StorageDead(_570);
        StorageDead(_568);
        StorageDead(_565);
        StorageDead(_562);
        StorageDead(_559);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        _582 = &(*_8);
        _581 = <RefMut<'_, PerpMarket> as Deref>::deref(move _582) -> [return: bb258, unwind: bb340];
    }

    bb256: {
        StorageLive(_573);
        _573 = ((_559 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_575);
        _575 = _573;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _575) -> [return: bb257, unwind: bb340];
    }

    bb257: {
        StorageDead(_575);
        StorageDead(_573);
        StorageDead(_570);
        StorageDead(_568);
        StorageDead(_565);
        StorageDead(_562);
        StorageDead(_559);
        goto -> bb310;
    }

    bb258: {
        StorageDead(_582);
        _580 = ((((*_581).1: state::perp_market::AMM).4: state::perp_market::PoolBalance).0: u128);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        _585 = &(*_153);
        _584 = <RefMut<'_, SpotMarket> as Deref>::deref(move _585) -> [return: bb259, unwind: bb340];
    }

    bb259: {
        _583 = &(*_584);
        StorageDead(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        _590 = &(*_8);
        _589 = <RefMut<'_, PerpMarket> as Deref>::deref(move _590) -> [return: bb260, unwind: bb340];
    }

    bb260: {
        StorageDead(_590);
        _588 = &(((*_589).1: state::perp_market::AMM).4: state::perp_market::PoolBalance);
        _587 = <PoolBalance as SpotBalance>::balance_type(move _588) -> [return: bb261, unwind: bb340];
    }

    bb261: {
        _586 = &(*_587);
        StorageDead(_588);
        _579 = get_token_amount(move _580, move _583, move _586) -> [return: bb262, unwind: bb340];
    }

    bb262: {
        StorageDead(_586);
        StorageDead(_583);
        StorageDead(_580);
        _578 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _579) -> [return: bb263, unwind: bb340];
    }

    bb263: {
        StorageDead(_579);
        _591 = discriminant(_578);
        switchInt(move _591) -> [0: bb264, 1: bb265, otherwise: bb4];
    }

    bb264: {
        StorageLive(_595);
        _595 = ((_578 as Continue).0: u128);
        _577 = _595;
        StorageDead(_595);
        StorageDead(_589);
        StorageDead(_587);
        StorageDead(_584);
        StorageDead(_581);
        StorageDead(_578);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        _602 = _558;
        StorageLive(_603);
        _603 = _577;
        _601 = <u128 as SafeMath>::safe_add(move _602, move _603) -> [return: bb267, unwind: bb340];
    }

    bb265: {
        StorageLive(_592);
        _592 = ((_578 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_594);
        _594 = _592;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _594) -> [return: bb266, unwind: bb340];
    }

    bb266: {
        StorageDead(_594);
        StorageDead(_592);
        StorageDead(_589);
        StorageDead(_587);
        StorageDead(_584);
        StorageDead(_581);
        StorageDead(_578);
        goto -> bb309;
    }

    bb267: {
        StorageDead(_603);
        StorageDead(_602);
        _600 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _601) -> [return: bb268, unwind: bb340];
    }

    bb268: {
        StorageDead(_601);
        _604 = discriminant(_600);
        switchInt(move _604) -> [0: bb269, 1: bb270, otherwise: bb4];
    }

    bb269: {
        StorageLive(_608);
        _608 = ((_600 as Continue).0: u128);
        _599 = _608;
        StorageDead(_608);
        _598 = <u128 as Cast>::cast::<i128>(move _599) -> [return: bb272, unwind: bb340];
    }

    bb270: {
        StorageLive(_605);
        _605 = ((_600 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_607);
        _607 = _605;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _607) -> [return: bb271, unwind: bb340];
    }

    bb271: {
        StorageDead(_607);
        StorageDead(_605);
        StorageDead(_599);
        StorageDead(_598);
        goto -> bb307;
    }

    bb272: {
        StorageDead(_599);
        _597 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _598) -> [return: bb273, unwind: bb340];
    }

    bb273: {
        StorageDead(_598);
        _609 = discriminant(_597);
        switchInt(move _609) -> [0: bb274, 1: bb275, otherwise: bb4];
    }

    bb274: {
        StorageLive(_613);
        _613 = ((_597 as Continue).0: i128);
        _596 = _613;
        StorageDead(_613);
        StorageDead(_600);
        StorageDead(_597);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        _701 = const _;
        _625 = &(*_701);
        _624 = &(*_625);
        _623 = move _624 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_624);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        _635 = &(*_8);
        _634 = <RefMut<'_, PerpMarket> as Deref>::deref(move _635) -> [return: bb277, unwind: bb340];
    }

    bb275: {
        StorageLive(_610);
        _610 = ((_597 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_612);
        _612 = _610;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _612) -> [return: bb276, unwind: bb340];
    }

    bb276: {
        StorageDead(_612);
        StorageDead(_610);
        goto -> bb307;
    }

    bb277: {
        StorageDead(_635);
        _633 = &((*_634).21: u16);
        _632 = &(*_633);
        _631 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _632) -> [return: bb278, unwind: bb340];
    }

    bb278: {
        StorageDead(_632);
        _630 = [move _631];
        StorageDead(_631);
        _629 = &_630;
        _628 = &(*_629);
        _627 = move _628 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_628);
        _622 = Arguments::<'_>::new_v1(move _623, move _627) -> [return: bb279, unwind: bb340];
    }

    bb279: {
        StorageDead(_627);
        StorageDead(_623);
        _621 = format(move _622) -> [return: bb280, unwind: bb340];
    }

    bb280: {
        StorageDead(_622);
        StorageDead(_634);
        StorageDead(_633);
        StorageDead(_630);
        StorageDead(_629);
        StorageDead(_625);
        _620 = move _621;
        StorageDead(_621);
        _619 = &_620;
        _618 = &(*_619);
        _617 = <String as Deref>::deref(move _618) -> [return: bb281, unwind: bb334];
    }

    bb281: {
        _616 = &(*_617);
        StorageDead(_618);
        _615 = solana_program::log::sol_log(move _616) -> [return: bb282, unwind: bb334];
    }

    bb282: {
        StorageDead(_616);
        drop(_620) -> [return: bb283, unwind: bb340];
    }

    bb283: {
        StorageDead(_620);
        StorageDead(_619);
        StorageDead(_617);
        StorageDead(_615);
        _614 = const ();
        StorageDead(_614);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        _700 = const _;
        _647 = &(*_700);
        _646 = &(*_647);
        _645 = move _646 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_646);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        _655 = &_596;
        _654 = &(*_655);
        _653 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _654) -> [return: bb284, unwind: bb340];
    }

    bb284: {
        StorageDead(_654);
        _652 = [move _653];
        StorageDead(_653);
        _651 = &_652;
        _650 = &(*_651);
        _649 = move _650 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_650);
        _644 = Arguments::<'_>::new_v1(move _645, move _649) -> [return: bb285, unwind: bb340];
    }

    bb285: {
        StorageDead(_649);
        StorageDead(_645);
        _643 = format(move _644) -> [return: bb286, unwind: bb340];
    }

    bb286: {
        StorageDead(_644);
        StorageDead(_655);
        StorageDead(_652);
        StorageDead(_651);
        StorageDead(_647);
        _642 = move _643;
        StorageDead(_643);
        _641 = &_642;
        _640 = &(*_641);
        _639 = <String as Deref>::deref(move _640) -> [return: bb287, unwind: bb333];
    }

    bb287: {
        _638 = &(*_639);
        StorageDead(_640);
        _637 = solana_program::log::sol_log(move _638) -> [return: bb288, unwind: bb333];
    }

    bb288: {
        StorageDead(_638);
        drop(_642) -> [return: bb289, unwind: bb340];
    }

    bb289: {
        StorageDead(_642);
        StorageDead(_641);
        StorageDead(_639);
        StorageDead(_637);
        _636 = const ();
        StorageDead(_636);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        _662 = &(*_8);
        _661 = <RefMut<'_, PerpMarket> as Deref>::deref(move _662) -> [return: bb290, unwind: bb340];
    }

    bb290: {
        StorageDead(_662);
        _660 = &((*_661).1: state::perp_market::AMM);
        _659 = &(*_660);
        StorageLive(_663);
        _663 = _476;
        StorageLive(_664);
        _664 = _596;
        _658 = calculate_expiry_price(move _659, move _663, move _664) -> [return: bb291, unwind: bb340];
    }

    bb291: {
        StorageDead(_664);
        StorageDead(_663);
        StorageDead(_659);
        _657 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _658) -> [return: bb292, unwind: bb340];
    }

    bb292: {
        StorageDead(_658);
        _665 = discriminant(_657);
        switchInt(move _665) -> [0: bb293, 1: bb294, otherwise: bb4];
    }

    bb293: {
        StorageLive(_669);
        _669 = ((_657 as Continue).0: i64);
        _656 = _669;
        StorageDead(_669);
        StorageDead(_661);
        StorageDead(_660);
        StorageDead(_657);
        StorageLive(_670);
        _670 = _656;
        StorageLive(_671);
        StorageLive(_672);
        _672 = &mut (*_8);
        _671 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _672) -> [return: bb296, unwind: bb340];
    }

    bb294: {
        StorageLive(_666);
        _666 = ((_657 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_668);
        _668 = _666;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _668) -> [return: bb295, unwind: bb340];
    }

    bb295: {
        StorageDead(_668);
        StorageDead(_666);
        StorageDead(_661);
        StorageDead(_660);
        StorageDead(_657);
        StorageDead(_656);
        goto -> bb308;
    }

    bb296: {
        StorageDead(_672);
        ((*_671).7: i64) = move _670;
        StorageDead(_670);
        StorageDead(_671);
        StorageLive(_673);
        _673 = state::perp_market::MarketStatus::Settlement;
        StorageLive(_674);
        StorageLive(_675);
        _675 = &mut (*_8);
        _674 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _675) -> [return: bb297, unwind: bb340];
    }

    bb297: {
        StorageDead(_675);
        ((*_674).22: state::perp_market::MarketStatus) = move _673;
        StorageDead(_673);
        StorageDead(_674);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        _699 = const _;
        _687 = &(*_699);
        _686 = &(*_687);
        _685 = move _686 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_686);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        _697 = &(*_8);
        _696 = <RefMut<'_, PerpMarket> as Deref>::deref(move _697) -> [return: bb298, unwind: bb340];
    }

    bb298: {
        StorageDead(_697);
        _695 = &((*_696).7: i64);
        _694 = &(*_695);
        _693 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _694) -> [return: bb299, unwind: bb340];
    }

    bb299: {
        StorageDead(_694);
        _692 = [move _693];
        StorageDead(_693);
        _691 = &_692;
        _690 = &(*_691);
        _689 = move _690 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_690);
        _684 = Arguments::<'_>::new_v1(move _685, move _689) -> [return: bb300, unwind: bb340];
    }

    bb300: {
        StorageDead(_689);
        StorageDead(_685);
        _683 = format(move _684) -> [return: bb301, unwind: bb340];
    }

    bb301: {
        StorageDead(_684);
        StorageDead(_696);
        StorageDead(_695);
        StorageDead(_692);
        StorageDead(_691);
        StorageDead(_687);
        _682 = move _683;
        StorageDead(_683);
        _681 = &_682;
        _680 = &(*_681);
        _679 = <String as Deref>::deref(move _680) -> [return: bb302, unwind: bb332];
    }

    bb302: {
        _678 = &(*_679);
        StorageDead(_680);
        _677 = solana_program::log::sol_log(move _678) -> [return: bb303, unwind: bb332];
    }

    bb303: {
        StorageDead(_678);
        drop(_682) -> [return: bb304, unwind: bb340];
    }

    bb304: {
        StorageDead(_682);
        StorageDead(_681);
        StorageDead(_679);
        StorageDead(_677);
        _676 = const ();
        StorageDead(_676);
        StorageLive(_698);
        _698 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _698);
        StorageDead(_698);
        StorageDead(_656);
        StorageDead(_596);
        StorageDead(_577);
        StorageDead(_558);
        StorageDead(_476);
        StorageDead(_255);
        StorageDead(_220);
        StorageDead(_207);
        StorageDead(_166);
        drop(_154) -> [return: bb305, unwind: bb345];
    }

    bb305: {
        StorageDead(_154);
        StorageDead(_153);
        drop(_9) -> [return: bb306, unwind: bb346];
    }

    bb306: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb331;
    }

    bb307: {
        StorageDead(_600);
        StorageDead(_597);
        goto -> bb308;
    }

    bb308: {
        StorageDead(_596);
        goto -> bb309;
    }

    bb309: {
        StorageDead(_577);
        goto -> bb310;
    }

    bb310: {
        StorageDead(_558);
        goto -> bb311;
    }

    bb311: {
        StorageDead(_476);
        goto -> bb319;
    }

    bb312: {
        StorageDead(_378);
        goto -> bb313;
    }

    bb313: {
        StorageDead(_365);
        goto -> bb314;
    }

    bb314: {
        StorageDead(_353);
        goto -> bb316;
    }

    bb315: {
        StorageDead(_328);
        StorageDead(_336);
        StorageDead(_332);
        StorageDead(_329);
        goto -> bb316;
    }

    bb316: {
        StorageDead(_327);
        StorageDead(_304);
        StorageDead(_303);
        goto -> bb318;
    }

    bb317: {
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_306);
        StorageDead(_305);
        goto -> bb318;
    }

    bb318: {
        StorageDead(_301);
        StorageDead(_300);
        goto -> bb319;
    }

    bb319: {
        StorageDead(_255);
        goto -> bb322;
    }

    bb320: {
        StorageDead(_224);
        StorageDead(_223);
        goto -> bb321;
    }

    bb321: {
        StorageDead(_221);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_222);
        goto -> bb322;
    }

    bb322: {
        StorageDead(_220);
        goto -> bb323;
    }

    bb323: {
        StorageDead(_207);
        goto -> bb327;
    }

    bb324: {
        StorageDead(_195);
        goto -> bb325;
    }

    bb325: {
        StorageDead(_187);
        goto -> bb326;
    }

    bb326: {
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_167);
        goto -> bb327;
    }

    bb327: {
        StorageDead(_166);
        drop(_154) -> [return: bb328, unwind: bb345];
    }

    bb328: {
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb329;
    }

    bb329: {
        drop(_9) -> [return: bb330, unwind: bb346];
    }

    bb330: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb331;
    }

    bb331: {
        return;
    }

    bb332 (cleanup): {
        drop(_682) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb333 (cleanup): {
        drop(_642) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb334 (cleanup): {
        drop(_620) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb335 (cleanup): {
        drop(_538) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb336 (cleanup): {
        drop(_519) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb337 (cleanup): {
        drop(_493) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb338 (cleanup): {
        drop(_453) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb339 (cleanup): {
        drop(_401) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb340 (cleanup): {
        drop(_154) -> [return: bb345, unwind terminate(cleanup)];
    }

    bb341 (cleanup): {
        drop(_130) -> [return: bb345, unwind terminate(cleanup)];
    }

    bb342 (cleanup): {
        drop(_91) -> [return: bb345, unwind terminate(cleanup)];
    }

    bb343 (cleanup): {
        drop(_72) -> [return: bb345, unwind terminate(cleanup)];
    }

    bb344 (cleanup): {
        drop(_34) -> [return: bb345, unwind terminate(cleanup)];
    }

    bb345 (cleanup): {
        drop(_9) -> [return: bb346, unwind terminate(cleanup)];
    }

    bb346 (cleanup): {
        resume;
    }

    bb347 (cleanup): {
        _724 = discriminant(_155);
        goto -> bb345;
    }

    bb348 (cleanup): {
        _725 = discriminant(_10);
        goto -> bb346;
    }
}
