// MIR for `handle_if_end_swap` before PreCodegen

fn handle_if_end_swap(_1: &mut IfRebalanceConfig, _2: u64, _3: u64, _4: &mut SpotMarket, _5: &mut SpotMarket, _6: u64, _7: u64, _8: u64, _9: i64) -> std::result::Result<(), error::ErrorCode> {
    debug if_rebalance_config => _1;
    debug in_insurance_fund_vault_amount_after => _2;
    debug out_insurance_fund_vault_amount_after => _3;
    debug in_spot_market => _4;
    debug out_spot_market => _5;
    debug in_amount => _6;
    debug out_amount => _7;
    debug out_oracle_price => _8;
    debug now => _9;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _10: u64;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _12: std::result::Result<u64, error::ErrorCode>;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: u64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _22: std::result::Result<u64, error::ErrorCode>;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _36: std::result::Result<u64, error::ErrorCode>;
    let mut _37: u128;
    let mut _38: u64;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _46: std::result::Result<u64, error::ErrorCode>;
    let mut _47: u128;
    let mut _48: u64;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _56: std::result::Result<u128, error::ErrorCode>;
    let mut _57: u64;
    let mut _58: u128;
    let mut _59: u64;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _67: std::result::Result<u128, error::ErrorCode>;
    let mut _68: u64;
    let mut _69: u128;
    let mut _70: u64;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _76: ();
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _78: std::result::Result<(), error::ErrorCode>;
    let mut _79: bool;
    let mut _80: u128;
    let mut _81: u128;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _83: std::result::Result<u128, error::ErrorCode>;
    let mut _84: &state::spot_market::InsuranceFund;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: ();
    let _92: ();
    let mut _93: &str;
    let _94: &str;
    let mut _95: &std::string::String;
    let _96: &std::string::String;
    let _97: std::string::String;
    let mut _99: std::fmt::Arguments<'_>;
    let mut _100: &[&str];
    let mut _101: &[&str; 2];
    let _102: &[&str; 2];
    let _103: [&str; 2];
    let mut _104: &[core::fmt::rt::Argument<'_>];
    let mut _105: &[core::fmt::rt::Argument<'_>; 1];
    let _106: &[core::fmt::rt::Argument<'_>; 1];
    let _107: [core::fmt::rt::Argument<'_>; 1];
    let mut _108: core::fmt::rt::Argument<'_>;
    let mut _109: &error::ErrorCode;
    let _110: &error::ErrorCode;
    let _111: ();
    let mut _112: &str;
    let _113: &str;
    let mut _114: &std::string::String;
    let _115: &std::string::String;
    let _116: std::string::String;
    let mut _118: std::fmt::Arguments<'_>;
    let mut _119: &[&str];
    let mut _120: &[&str; 2];
    let _121: &[&str; 2];
    let _122: [&str; 2];
    let mut _123: &[core::fmt::rt::Argument<'_>];
    let mut _124: &[core::fmt::rt::Argument<'_>; 2];
    let _125: &[core::fmt::rt::Argument<'_>; 2];
    let _126: [core::fmt::rt::Argument<'_>; 2];
    let mut _127: core::fmt::rt::Argument<'_>;
    let mut _128: &u128;
    let _129: &u128;
    let mut _130: core::fmt::rt::Argument<'_>;
    let mut _131: &u128;
    let _132: &u128;
    let _133: u128;
    let mut _134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _135: std::result::Result<u128, error::ErrorCode>;
    let mut _136: &state::spot_market::InsuranceFund;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _142: error::ErrorCode;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _148: u128;
    let mut _149: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _150: std::result::Result<u128, error::ErrorCode>;
    let mut _151: u128;
    let mut _152: u128;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _158: u128;
    let mut _159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _160: std::result::Result<u128, error::ErrorCode>;
    let mut _161: u128;
    let mut _162: u128;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _170: std::result::Result<u64, error::ErrorCode>;
    let mut _171: u128;
    let mut _172: u64;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _180: std::result::Result<u64, error::ErrorCode>;
    let mut _181: u128;
    let mut _182: u64;
    let mut _183: isize;
    let mut _185: !;
    let mut _186: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _188: ();
    let mut _189: bool;
    let mut _190: u64;
    let mut _191: bool;
    let mut _192: u64;
    let _193: ();
    let mut _194: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _195: std::result::Result<(), error::ErrorCode>;
    let mut _196: bool;
    let mut _197: u64;
    let mut _198: u64;
    let mut _199: u64;
    let mut _200: (u64, bool);
    let mut _201: ();
    let _203: ();
    let mut _204: &str;
    let _205: &str;
    let mut _206: &std::string::String;
    let _207: &std::string::String;
    let _208: std::string::String;
    let mut _210: std::fmt::Arguments<'_>;
    let mut _211: &[&str];
    let mut _212: &[&str; 2];
    let _213: &[&str; 2];
    let _214: [&str; 2];
    let mut _215: &[core::fmt::rt::Argument<'_>];
    let mut _216: &[core::fmt::rt::Argument<'_>; 1];
    let _217: &[core::fmt::rt::Argument<'_>; 1];
    let _218: [core::fmt::rt::Argument<'_>; 1];
    let mut _219: core::fmt::rt::Argument<'_>;
    let mut _220: &error::ErrorCode;
    let _221: &error::ErrorCode;
    let _222: ();
    let mut _223: &str;
    let _224: &str;
    let mut _225: &std::string::String;
    let _226: &std::string::String;
    let _227: std::string::String;
    let mut _229: std::fmt::Arguments<'_>;
    let mut _230: &[&str];
    let mut _231: &[&str; 3];
    let _232: &[&str; 3];
    let _233: [&str; 3];
    let mut _234: &[core::fmt::rt::Argument<'_>];
    let mut _235: &[core::fmt::rt::Argument<'_>; 2];
    let _236: &[core::fmt::rt::Argument<'_>; 2];
    let _237: [core::fmt::rt::Argument<'_>; 2];
    let mut _238: core::fmt::rt::Argument<'_>;
    let mut _239: &u64;
    let _240: &u64;
    let mut _241: core::fmt::rt::Argument<'_>;
    let mut _242: &u64;
    let _243: &u64;
    let mut _244: error::ErrorCode;
    let mut _245: isize;
    let mut _247: !;
    let mut _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _250: ();
    let mut _251: bool;
    let mut _252: u64;
    let mut _253: bool;
    let mut _254: u64;
    let _255: ();
    let mut _256: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _257: std::result::Result<(), error::ErrorCode>;
    let mut _258: bool;
    let mut _259: u64;
    let mut _260: u64;
    let mut _261: u64;
    let mut _262: (u64, bool);
    let mut _263: ();
    let _265: ();
    let mut _266: &str;
    let _267: &str;
    let mut _268: &std::string::String;
    let _269: &std::string::String;
    let _270: std::string::String;
    let mut _272: std::fmt::Arguments<'_>;
    let mut _273: &[&str];
    let mut _274: &[&str; 2];
    let _275: &[&str; 2];
    let _276: [&str; 2];
    let mut _277: &[core::fmt::rt::Argument<'_>];
    let mut _278: &[core::fmt::rt::Argument<'_>; 1];
    let _279: &[core::fmt::rt::Argument<'_>; 1];
    let _280: [core::fmt::rt::Argument<'_>; 1];
    let mut _281: core::fmt::rt::Argument<'_>;
    let mut _282: &error::ErrorCode;
    let _283: &error::ErrorCode;
    let _284: ();
    let mut _285: &str;
    let _286: &str;
    let mut _287: &std::string::String;
    let _288: &std::string::String;
    let _289: std::string::String;
    let mut _291: std::fmt::Arguments<'_>;
    let mut _292: &[&str];
    let mut _293: &[&str; 3];
    let _294: &[&str; 3];
    let _295: [&str; 3];
    let mut _296: &[core::fmt::rt::Argument<'_>];
    let mut _297: &[core::fmt::rt::Argument<'_>; 2];
    let _298: &[core::fmt::rt::Argument<'_>; 2];
    let _299: [core::fmt::rt::Argument<'_>; 2];
    let mut _300: core::fmt::rt::Argument<'_>;
    let mut _301: &u64;
    let _302: &u64;
    let mut _303: core::fmt::rt::Argument<'_>;
    let mut _304: &u64;
    let _305: &u64;
    let mut _306: error::ErrorCode;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _312: u64;
    let mut _313: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _314: std::result::Result<u64, error::ErrorCode>;
    let mut _315: u64;
    let mut _316: u64;
    let mut _317: isize;
    let mut _319: !;
    let mut _320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _322: u64;
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _324: std::result::Result<u64, error::ErrorCode>;
    let mut _325: u64;
    let mut _326: u64;
    let mut _327: isize;
    let mut _329: !;
    let mut _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _332: u64;
    let mut _333: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _334: std::result::Result<u64, error::ErrorCode>;
    let mut _335: u64;
    let mut _336: u64;
    let mut _337: isize;
    let mut _339: !;
    let mut _340: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _342: ();
    let mut _343: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _344: std::result::Result<(), error::ErrorCode>;
    let mut _345: bool;
    let mut _346: u64;
    let mut _347: u64;
    let mut _348: ();
    let _350: ();
    let mut _351: &str;
    let _352: &str;
    let mut _353: &std::string::String;
    let _354: &std::string::String;
    let _355: std::string::String;
    let mut _357: std::fmt::Arguments<'_>;
    let mut _358: &[&str];
    let mut _359: &[&str; 2];
    let _360: &[&str; 2];
    let _361: [&str; 2];
    let mut _362: &[core::fmt::rt::Argument<'_>];
    let mut _363: &[core::fmt::rt::Argument<'_>; 1];
    let _364: &[core::fmt::rt::Argument<'_>; 1];
    let _365: [core::fmt::rt::Argument<'_>; 1];
    let mut _366: core::fmt::rt::Argument<'_>;
    let mut _367: &error::ErrorCode;
    let _368: &error::ErrorCode;
    let _369: ();
    let mut _370: &str;
    let _371: &str;
    let mut _372: &std::string::String;
    let _373: &std::string::String;
    let _374: std::string::String;
    let mut _376: std::fmt::Arguments<'_>;
    let mut _377: &[&str];
    let mut _378: &[&str; 2];
    let _379: &[&str; 2];
    let _380: [&str; 2];
    let mut _381: &[core::fmt::rt::Argument<'_>];
    let mut _382: &[core::fmt::rt::Argument<'_>; 2];
    let _383: &[core::fmt::rt::Argument<'_>; 2];
    let _384: [core::fmt::rt::Argument<'_>; 2];
    let mut _385: core::fmt::rt::Argument<'_>;
    let mut _386: &u64;
    let _387: &u64;
    let mut _388: core::fmt::rt::Argument<'_>;
    let mut _389: &u64;
    let _390: &u64;
    let mut _391: error::ErrorCode;
    let mut _392: isize;
    let mut _394: !;
    let mut _395: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _398: ();
    let mut _399: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _400: std::result::Result<(), error::ErrorCode>;
    let mut _401: bool;
    let mut _402: u64;
    let mut _403: u64;
    let mut _404: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _405: std::result::Result<u64, error::ErrorCode>;
    let mut _406: i64;
    let mut _407: isize;
    let mut _409: !;
    let mut _410: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _412: ();
    let _414: ();
    let mut _415: &str;
    let _416: &str;
    let mut _417: &std::string::String;
    let _418: &std::string::String;
    let _419: std::string::String;
    let mut _421: std::fmt::Arguments<'_>;
    let mut _422: &[&str];
    let mut _423: &[&str; 2];
    let _424: &[&str; 2];
    let _425: [&str; 2];
    let mut _426: &[core::fmt::rt::Argument<'_>];
    let mut _427: &[core::fmt::rt::Argument<'_>; 1];
    let _428: &[core::fmt::rt::Argument<'_>; 1];
    let _429: [core::fmt::rt::Argument<'_>; 1];
    let mut _430: core::fmt::rt::Argument<'_>;
    let mut _431: &error::ErrorCode;
    let _432: &error::ErrorCode;
    let _433: ();
    let mut _434: &str;
    let _435: &str;
    let mut _436: &std::string::String;
    let _437: &std::string::String;
    let _438: std::string::String;
    let mut _440: std::fmt::Arguments<'_>;
    let mut _441: &[&str];
    let mut _442: &[&str; 2];
    let _443: &[&str; 2];
    let _444: [&str; 2];
    let mut _445: &[core::fmt::rt::Argument<'_>];
    let mut _446: &[core::fmt::rt::Argument<'_>; 2];
    let _447: &[core::fmt::rt::Argument<'_>; 2];
    let _448: [core::fmt::rt::Argument<'_>; 2];
    let mut _449: core::fmt::rt::Argument<'_>;
    let mut _450: &u64;
    let _451: &u64;
    let mut _452: core::fmt::rt::Argument<'_>;
    let mut _453: &i64;
    let _454: &i64;
    let mut _455: error::ErrorCode;
    let mut _456: isize;
    let mut _458: !;
    let mut _459: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _462: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _463: std::result::Result<u64, error::ErrorCode>;
    let mut _464: u64;
    let mut _465: u64;
    let mut _466: u64;
    let mut _467: state::spot_market::SpotMarket;
    let mut _468: isize;
    let mut _470: !;
    let mut _471: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _474: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _475: std::result::Result<u64, error::ErrorCode>;
    let mut _476: u16;
    let mut _477: isize;
    let mut _479: !;
    let mut _480: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _483: u64;
    let mut _484: u64;
    let mut _485: u64;
    let mut _486: u64;
    let mut _487: bool;
    let mut _488: bool;
    let _489: ();
    let mut _490: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _491: std::result::Result<(), error::ErrorCode>;
    let mut _492: bool;
    let mut _493: u64;
    let mut _494: u64;
    let mut _495: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _496: std::result::Result<u64, error::ErrorCode>;
    let mut _497: u64;
    let mut _498: u64;
    let mut _499: isize;
    let mut _501: !;
    let mut _502: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _504: ();
    let _506: ();
    let mut _507: &str;
    let _508: &str;
    let mut _509: &std::string::String;
    let _510: &std::string::String;
    let _511: std::string::String;
    let mut _513: std::fmt::Arguments<'_>;
    let mut _514: &[&str];
    let mut _515: &[&str; 2];
    let _516: &[&str; 2];
    let _517: [&str; 2];
    let mut _518: &[core::fmt::rt::Argument<'_>];
    let mut _519: &[core::fmt::rt::Argument<'_>; 1];
    let _520: &[core::fmt::rt::Argument<'_>; 1];
    let _521: [core::fmt::rt::Argument<'_>; 1];
    let mut _522: core::fmt::rt::Argument<'_>;
    let mut _523: &error::ErrorCode;
    let _524: &error::ErrorCode;
    let _525: ();
    let mut _526: &str;
    let _527: &str;
    let mut _528: &std::string::String;
    let _529: &std::string::String;
    let _530: std::string::String;
    let mut _532: std::fmt::Arguments<'_>;
    let mut _533: &[&str];
    let mut _534: &[&str; 3];
    let _535: &[&str; 3];
    let _536: [&str; 3];
    let mut _537: &[core::fmt::rt::Argument<'_>];
    let mut _538: &[core::fmt::rt::Argument<'_>; 3];
    let _539: &[core::fmt::rt::Argument<'_>; 3];
    let _540: [core::fmt::rt::Argument<'_>; 3];
    let mut _541: core::fmt::rt::Argument<'_>;
    let mut _542: &u64;
    let _543: &u64;
    let mut _544: core::fmt::rt::Argument<'_>;
    let mut _545: &u64;
    let _546: &u64;
    let mut _547: core::fmt::rt::Argument<'_>;
    let mut _548: &u64;
    let _549: &u64;
    let mut _550: error::ErrorCode;
    let mut _551: isize;
    let mut _553: !;
    let mut _554: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _556: ();
    let _557: ();
    let mut _558: &[&[u8]];
    let mut _559: &[&[u8]; 1];
    let _560: &[&[u8]; 1];
    let _561: [&[u8]; 1];
    let mut _562: &[u8];
    let _563: &[u8];
    let mut _564: &std::vec::Vec<u8>;
    let _565: &std::vec::Vec<u8>;
    let _566: std::vec::Vec<u8>;
    let mut _567: &state::events::InsuranceFundSwapRecord;
    let _568: &state::events::InsuranceFundSwapRecord;
    let _569: state::events::InsuranceFundSwapRecord;
    let mut _570: i64;
    let mut _571: anchor_lang::prelude::Pubkey;
    let mut _572: u16;
    let mut _573: u16;
    let mut _574: u64;
    let mut _575: u64;
    let mut _576: u64;
    let mut _577: i64;
    let mut _578: u64;
    let mut _579: u64;
    let mut _580: u64;
    let mut _581: u64;
    let mut _582: u128;
    let mut _583: u128;
    let mut _584: u128;
    let mut _585: u128;
    let mut _586: u128;
    let mut _587: u128;
    let mut _588: u128;
    let mut _589: u128;
    let mut _590: ();
    scope 1 {
        debug in_insurance_fund_vault_amount_before => _10;
        let _20: u64;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: u64;
        scope 6 {
            debug out_insurance_fund_vault_amount_before => _20;
            let _30: u128;
            scope 11 {
                debug in_if_total_shares_before => _30;
                let _31: u128;
                scope 12 {
                    debug out_if_total_shares_before => _31;
                    let _32: u128;
                    scope 13 {
                        debug in_if_user_shares_before => _32;
                        let _33: u128;
                        scope 14 {
                            debug out_if_user_shares_before => _33;
                            let _34: u64;
                            let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _43: u64;
                            scope 15 {
                                debug in_share_price_before => _34;
                                let _44: u64;
                                let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _53: u64;
                                scope 20 {
                                    debug out_share_price_before => _44;
                                    let _54: u128;
                                    let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _64: u128;
                                    scope 25 {
                                        debug in_shares => _54;
                                        let _65: u128;
                                        let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _75: u128;
                                        scope 30 {
                                            debug out_shares => _65;
                                            let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _89: u128;
                                            let _91: error::ErrorCode;
                                            let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _147: ();
                                            let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _157: u128;
                                            let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _167: u128;
                                            let _168: u64;
                                            let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _177: u64;
                                            scope 35 {
                                                debug residual => _86;
                                                scope 36 {
                                                }
                                            }
                                            scope 37 {
                                                debug val => _89;
                                                scope 38 {
                                                }
                                            }
                                            scope 39 {
                                                debug error_code => _91;
                                                let _98: std::string::String;
                                                let _117: std::string::String;
                                                let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _141: u128;
                                                let mut _601: &[&str; 2];
                                                let mut _602: &[&str; 2];
                                                scope 40 {
                                                    debug res => _98;
                                                }
                                                scope 41 {
                                                    debug res => _117;
                                                }
                                                scope 42 {
                                                    debug residual => _138;
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug val => _141;
                                                    scope 45 {
                                                    }
                                                }
                                            }
                                            scope 46 {
                                                debug residual => _144;
                                                scope 47 {
                                                }
                                            }
                                            scope 48 {
                                                debug val => _147;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug residual => _154;
                                                scope 51 {
                                                }
                                            }
                                            scope 52 {
                                                debug val => _157;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug residual => _164;
                                                scope 55 {
                                                }
                                            }
                                            scope 56 {
                                                debug val => _167;
                                                scope 57 {
                                                }
                                            }
                                            scope 58 {
                                                debug in_share_price_after => _168;
                                                let _178: u64;
                                                let _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _187: u64;
                                                scope 63 {
                                                    debug out_share_price_after => _178;
                                                    let _202: error::ErrorCode;
                                                    let _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _249: ();
                                                    let _264: error::ErrorCode;
                                                    let _308: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _311: ();
                                                    let _318: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _321: u64;
                                                    let _328: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _331: u64;
                                                    let _338: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _341: u64;
                                                    let _349: error::ErrorCode;
                                                    let _393: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _396: ();
                                                    let _397: i64;
                                                    scope 68 {
                                                        debug error_code => _202;
                                                        let _209: std::string::String;
                                                        let _228: std::string::String;
                                                        let mut _599: &[&str; 3];
                                                        let mut _600: &[&str; 2];
                                                        scope 69 {
                                                            debug res => _209;
                                                        }
                                                        scope 70 {
                                                            debug res => _228;
                                                        }
                                                    }
                                                    scope 71 {
                                                        debug residual => _246;
                                                        scope 72 {
                                                        }
                                                    }
                                                    scope 73 {
                                                        debug val => _249;
                                                        scope 74 {
                                                        }
                                                    }
                                                    scope 75 {
                                                        debug error_code => _264;
                                                        let _271: std::string::String;
                                                        let _290: std::string::String;
                                                        let mut _597: &[&str; 3];
                                                        let mut _598: &[&str; 2];
                                                        scope 76 {
                                                            debug res => _271;
                                                        }
                                                        scope 77 {
                                                            debug res => _290;
                                                        }
                                                    }
                                                    scope 78 {
                                                        debug residual => _308;
                                                        scope 79 {
                                                        }
                                                    }
                                                    scope 80 {
                                                        debug val => _311;
                                                        scope 81 {
                                                        }
                                                    }
                                                    scope 82 {
                                                        debug residual => _318;
                                                        scope 83 {
                                                        }
                                                    }
                                                    scope 84 {
                                                        debug val => _321;
                                                        scope 85 {
                                                        }
                                                    }
                                                    scope 86 {
                                                        debug residual => _328;
                                                        scope 87 {
                                                        }
                                                    }
                                                    scope 88 {
                                                        debug val => _331;
                                                        scope 89 {
                                                        }
                                                    }
                                                    scope 90 {
                                                        debug residual => _338;
                                                        scope 91 {
                                                        }
                                                    }
                                                    scope 92 {
                                                        debug val => _341;
                                                        scope 93 {
                                                        }
                                                    }
                                                    scope 94 {
                                                        debug error_code => _349;
                                                        let _356: std::string::String;
                                                        let _375: std::string::String;
                                                        let mut _595: &[&str; 2];
                                                        let mut _596: &[&str; 2];
                                                        scope 95 {
                                                            debug res => _356;
                                                        }
                                                        scope 96 {
                                                            debug res => _375;
                                                        }
                                                    }
                                                    scope 97 {
                                                        debug residual => _393;
                                                        scope 98 {
                                                        }
                                                    }
                                                    scope 99 {
                                                        debug val => _396;
                                                        scope 100 {
                                                        }
                                                    }
                                                    scope 101 {
                                                        debug oracle_twap => _397;
                                                        let _408: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _411: u64;
                                                        let _413: error::ErrorCode;
                                                        let _457: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _460: ();
                                                        let _461: u64;
                                                        let _469: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _472: u64;
                                                        scope 102 {
                                                            debug residual => _408;
                                                            scope 103 {
                                                            }
                                                        }
                                                        scope 104 {
                                                            debug val => _411;
                                                            scope 105 {
                                                            }
                                                        }
                                                        scope 106 {
                                                            debug error_code => _413;
                                                            let _420: std::string::String;
                                                            let _439: std::string::String;
                                                            let mut _593: &[&str; 2];
                                                            let mut _594: &[&str; 2];
                                                            scope 107 {
                                                                debug res => _420;
                                                            }
                                                            scope 108 {
                                                                debug res => _439;
                                                            }
                                                        }
                                                        scope 109 {
                                                            debug residual => _457;
                                                            scope 110 {
                                                            }
                                                        }
                                                        scope 111 {
                                                            debug val => _460;
                                                            scope 112 {
                                                            }
                                                        }
                                                        scope 113 {
                                                            debug swap_price => _461;
                                                            let _473: u64;
                                                            let _478: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _481: u64;
                                                            scope 118 {
                                                                debug max_slippage_bps => _473;
                                                                let _482: u64;
                                                                scope 123 {
                                                                    debug max_slippage => _482;
                                                                    let _500: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _503: u64;
                                                                    let _505: error::ErrorCode;
                                                                    let _552: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _555: ();
                                                                    scope 124 {
                                                                        debug residual => _500;
                                                                        scope 125 {
                                                                        }
                                                                    }
                                                                    scope 126 {
                                                                        debug val => _503;
                                                                        scope 127 {
                                                                        }
                                                                    }
                                                                    scope 128 {
                                                                        debug error_code => _505;
                                                                        let _512: std::string::String;
                                                                        let _531: std::string::String;
                                                                        let mut _591: &[&str; 3];
                                                                        let mut _592: &[&str; 2];
                                                                        scope 129 {
                                                                            debug res => _512;
                                                                        }
                                                                        scope 130 {
                                                                            debug res => _531;
                                                                        }
                                                                    }
                                                                    scope 131 {
                                                                        debug residual => _552;
                                                                        scope 132 {
                                                                        }
                                                                    }
                                                                    scope 133 {
                                                                        debug val => _555;
                                                                        scope 134 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 119 {
                                                                debug residual => _478;
                                                                scope 120 {
                                                                }
                                                            }
                                                            scope 121 {
                                                                debug val => _481;
                                                                scope 122 {
                                                                }
                                                            }
                                                        }
                                                        scope 114 {
                                                            debug residual => _469;
                                                            scope 115 {
                                                            }
                                                        }
                                                        scope 116 {
                                                            debug val => _472;
                                                            scope 117 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 64 {
                                                    debug residual => _184;
                                                    scope 65 {
                                                    }
                                                }
                                                scope 66 {
                                                    debug val => _187;
                                                    scope 67 {
                                                    }
                                                }
                                            }
                                            scope 59 {
                                                debug residual => _174;
                                                scope 60 {
                                                }
                                            }
                                            scope 61 {
                                                debug val => _177;
                                                scope 62 {
                                                }
                                            }
                                        }
                                        scope 31 {
                                            debug residual => _72;
                                            scope 32 {
                                            }
                                        }
                                        scope 33 {
                                            debug val => _75;
                                            scope 34 {
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _61;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _64;
                                        scope 29 {
                                        }
                                    }
                                }
                                scope 21 {
                                    debug residual => _50;
                                    scope 22 {
                                    }
                                }
                                scope 23 {
                                    debug val => _53;
                                    scope 24 {
                                    }
                                }
                            }
                            scope 16 {
                                debug residual => _40;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _43;
                                scope 19 {
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _26;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _29;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _2;
        StorageLive(_14);
        _14 = _6;
        _12 = <u64 as SafeMath>::safe_add(move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = ((_11 as Continue).0: u64);
        _10 = _19;
        StorageDead(_19);
        StorageDead(_11);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _3;
        StorageLive(_24);
        _24 = _7;
        _22 = <u64 as SafeMath>::safe_sub(move _23, move _24) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_11);
        goto -> bb254;
    }

    bb7: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        _25 = discriminant(_21);
        switchInt(move _25) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_29);
        _29 = ((_21 as Continue).0: u64);
        _20 = _29;
        StorageDead(_29);
        StorageDead(_21);
        StorageLive(_30);
        _30 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_31);
        _31 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_32);
        _32 = (((*_4).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_33);
        _33 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_38);
        _38 = _10;
        _36 = calculate_share_price(move _37, move _38) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        goto -> bb253;
    }

    bb12: {
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_36);
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_43);
        _43 = ((_35 as Continue).0: u64);
        _34 = _43;
        StorageDead(_43);
        StorageDead(_35);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_48);
        _48 = _20;
        _46 = calculate_share_price(move _47, move _48) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_40);
        _40 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_35);
        goto -> bb252;
    }

    bb17: {
        StorageDead(_48);
        StorageDead(_47);
        _45 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_46);
        _49 = discriminant(_45);
        switchInt(move _49) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_53);
        _53 = ((_45 as Continue).0: u64);
        _44 = _53;
        StorageDead(_53);
        StorageDead(_45);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _6;
        StorageLive(_58);
        _58 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_59);
        _59 = _10;
        _56 = vault_amount_to_if_shares(move _57, move _58, move _59) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_50);
        _50 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_45);
        goto -> bb251;
    }

    bb22: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        _55 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _56) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_56);
        _60 = discriminant(_55);
        switchInt(move _60) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_64);
        _64 = ((_55 as Continue).0: u128);
        _54 = _64;
        StorageDead(_64);
        StorageDead(_55);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _7;
        StorageLive(_69);
        _69 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_70);
        _70 = _20;
        _67 = vault_amount_to_if_shares(move _68, move _69, move _70) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_61);
        _61 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_55);
        goto -> bb250;
    }

    bb27: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        _66 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _67) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_67);
        _71 = discriminant(_66);
        switchInt(move _71) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_75);
        _75 = ((_66 as Continue).0: u128);
        _65 = _75;
        StorageDead(_75);
        StorageDead(_66);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = _54;
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &((*_4).9: state::spot_market::InsuranceFund);
        _83 = InsuranceFund::get_protocol_shares(move _84) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_72);
        _72 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_66);
        goto -> bb249;
    }

    bb32: {
        StorageDead(_84);
        _82 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _83) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_83);
        _85 = discriminant(_82);
        switchInt(move _85) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_89);
        _89 = ((_82 as Continue).0: u128);
        _81 = _89;
        StorageDead(_89);
        _79 = Lt(move _80, move _81);
        switchInt(move _79) -> [0: bb38, otherwise: bb37];
    }

    bb35: {
        StorageLive(_86);
        _86 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb247;
    }

    bb37: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_90);
        _90 = ();
        _78 = std::result::Result::<(), error::ErrorCode>::Ok(move _90);
        StorageDead(_90);
        goto -> bb57;
    }

    bb38: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_91);
        _91 = error::ErrorCode::InsufficientIFShares;
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _602 = const _;
        _102 = &(*_602);
        _101 = &(*_102);
        _100 = move _101 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_101);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_91;
        _109 = &(*_110);
        _108 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _109) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_109);
        _107 = [move _108];
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = move _105 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_105);
        _99 = Arguments::<'_>::new_v1(move _100, move _104) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_104);
        StorageDead(_100);
        _98 = format(move _99) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_99);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_102);
        _97 = move _98;
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = <String as Deref>::deref(move _95) -> [return: bb42, unwind: bb268];
    }

    bb42: {
        _93 = &(*_94);
        StorageDead(_95);
        _92 = solana_program::log::sol_log(move _93) -> [return: bb43, unwind: bb268];
    }

    bb43: {
        StorageDead(_93);
        drop(_97) -> [return: bb44, unwind: bb269];
    }

    bb44: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _601 = const _;
        _121 = &(*_601);
        _120 = &(*_121);
        _119 = move _120 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_54;
        _128 = &(*_129);
        _127 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _128) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &((*_4).9: state::spot_market::InsuranceFund);
        _135 = InsuranceFund::get_protocol_shares(move _136) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_136);
        _134 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _135) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_135);
        _137 = discriminant(_134);
        switchInt(move _137) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_141);
        _141 = ((_134 as Continue).0: u128);
        _133 = _141;
        StorageDead(_141);
        _132 = &_133;
        _131 = &(*_132);
        _130 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _131) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_138);
        _138 = ((_134 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_121);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_91);
        goto -> bb247;
    }

    bb51: {
        StorageDead(_131);
        _126 = [move _127, move _130];
        StorageDead(_130);
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = move _124 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_124);
        _118 = Arguments::<'_>::new_v1(move _119, move _123) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_123);
        StorageDead(_119);
        _117 = format(move _118) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_118);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_121);
        _116 = move _117;
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = <String as Deref>::deref(move _114) -> [return: bb54, unwind: bb267];
    }

    bb54: {
        _112 = &(*_113);
        StorageDead(_114);
        _111 = solana_program::log::sol_log(move _112) -> [return: bb55, unwind: bb267];
    }

    bb55: {
        StorageDead(_112);
        drop(_116) -> [return: bb56, unwind: bb269];
    }

    bb56: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageLive(_142);
        _142 = _91;
        _78 = std::result::Result::<(), error::ErrorCode>::Err(move _142);
        StorageDead(_142);
        StorageDead(_91);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_79);
        _77 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _78) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_78);
        _143 = discriminant(_77);
        switchInt(move _143) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_147);
        _147 = ((_77 as Continue).0: ());
        _76 = _147;
        StorageDead(_147);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_152);
        _152 = _54;
        _150 = <u128 as SafeMath>::safe_sub(move _151, move _152) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_144);
        _144 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_146);
        StorageDead(_144);
        goto -> bb248;
    }

    bb62: {
        StorageDead(_152);
        StorageDead(_151);
        _149 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _150) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_150);
        _153 = discriminant(_149);
        switchInt(move _153) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_157);
        _157 = ((_149 as Continue).0: u128);
        _148 = _157;
        StorageDead(_157);
        (((*_4).9: state::spot_market::InsuranceFund).1: u128) = move _148;
        StorageDead(_148);
        StorageDead(_149);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_162);
        _162 = _65;
        _160 = <u128 as SafeMath>::safe_add(move _161, move _162) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_154);
        _154 = ((_149 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_148);
        StorageDead(_149);
        goto -> bb249;
    }

    bb67: {
        StorageDead(_162);
        StorageDead(_161);
        _159 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _160) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_160);
        _163 = discriminant(_159);
        switchInt(move _163) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_167);
        _167 = ((_159 as Continue).0: u128);
        _158 = _167;
        StorageDead(_167);
        (((*_5).9: state::spot_market::InsuranceFund).1: u128) = move _158;
        StorageDead(_158);
        StorageDead(_159);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_172);
        _172 = _2;
        _170 = calculate_share_price(move _171, move _172) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_164);
        _164 = ((_159 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_158);
        StorageDead(_159);
        goto -> bb249;
    }

    bb72: {
        StorageDead(_172);
        StorageDead(_171);
        _169 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _170) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_170);
        _173 = discriminant(_169);
        switchInt(move _173) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_177);
        _177 = ((_169 as Continue).0: u64);
        _168 = _177;
        StorageDead(_177);
        StorageDead(_169);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_182);
        _182 = _3;
        _180 = calculate_share_price(move _181, move _182) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_174);
        _174 = ((_169 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_169);
        goto -> bb246;
    }

    bb77: {
        StorageDead(_182);
        StorageDead(_181);
        _179 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _180) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_180);
        _183 = discriminant(_179);
        switchInt(move _183) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_187);
        _187 = ((_179 as Continue).0: u64);
        _178 = _187;
        StorageDead(_187);
        StorageDead(_179);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = _34;
        _189 = Gt(move _190, const 0_u64);
        switchInt(move _189) -> [0: bb83, otherwise: bb82];
    }

    bb80: {
        StorageLive(_184);
        _184 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_186);
        _186 = _184;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _186) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_179);
        goto -> bb245;
    }

    bb82: {
        StorageDead(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = _168;
        _191 = Gt(move _192, const 0_u64);
        switchInt(move _191) -> [0: bb106, otherwise: bb84];
    }

    bb83: {
        StorageDead(_190);
        goto -> bb107;
    }

    bb84: {
        StorageDead(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = _34;
        StorageLive(_199);
        _199 = _168;
        _200 = CheckedSub(_198, _199);
        assert(!move (_200.1: bool), "attempt to compute `{} - {}`, which would overflow", move _198, move _199) -> [success: bb85, unwind continue];
    }

    bb85: {
        _197 = move (_200.0: u64);
        StorageDead(_199);
        StorageDead(_198);
        _196 = Le(move _197, const 1_u64);
        switchInt(move _196) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        StorageDead(_197);
        StorageLive(_201);
        _201 = ();
        _195 = std::result::Result::<(), error::ErrorCode>::Ok(move _201);
        StorageDead(_201);
        goto -> bb101;
    }

    bb87: {
        StorageDead(_197);
        StorageLive(_202);
        _202 = error::ErrorCode::InvalidIfRebalanceSwap;
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _600 = const _;
        _213 = &(*_600);
        _212 = &(*_213);
        _211 = move _212 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_212);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &_202;
        _220 = &(*_221);
        _219 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _220) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_220);
        _218 = [move _219];
        StorageDead(_219);
        _217 = &_218;
        _216 = &(*_217);
        _215 = move _216 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_216);
        _210 = Arguments::<'_>::new_v1(move _211, move _215) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_215);
        StorageDead(_211);
        _209 = format(move _210) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_210);
        StorageDead(_221);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_213);
        _208 = move _209;
        StorageDead(_209);
        _207 = &_208;
        _206 = &(*_207);
        _205 = <String as Deref>::deref(move _206) -> [return: bb91, unwind: bb266];
    }

    bb91: {
        _204 = &(*_205);
        StorageDead(_206);
        _203 = solana_program::log::sol_log(move _204) -> [return: bb92, unwind: bb266];
    }

    bb92: {
        StorageDead(_204);
        drop(_208) -> [return: bb93, unwind: bb269];
    }

    bb93: {
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_203);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _599 = const _;
        _232 = &(*_599);
        _231 = &(*_232);
        _230 = move _231 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_231);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &_34;
        _239 = &(*_240);
        _238 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _239) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_239);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &_168;
        _242 = &(*_243);
        _241 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _242) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_242);
        _237 = [move _238, move _241];
        StorageDead(_241);
        StorageDead(_238);
        _236 = &_237;
        _235 = &(*_236);
        _234 = move _235 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_235);
        _229 = Arguments::<'_>::new_v1(move _230, move _234) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_234);
        StorageDead(_230);
        _228 = format(move _229) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_229);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_237);
        StorageDead(_236);
        StorageDead(_232);
        _227 = move _228;
        StorageDead(_228);
        _226 = &_227;
        _225 = &(*_226);
        _224 = <String as Deref>::deref(move _225) -> [return: bb98, unwind: bb265];
    }

    bb98: {
        _223 = &(*_224);
        StorageDead(_225);
        _222 = solana_program::log::sol_log(move _223) -> [return: bb99, unwind: bb265];
    }

    bb99: {
        StorageDead(_223);
        drop(_227) -> [return: bb100, unwind: bb269];
    }

    bb100: {
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_222);
        StorageLive(_244);
        _244 = _202;
        _195 = std::result::Result::<(), error::ErrorCode>::Err(move _244);
        StorageDead(_244);
        StorageDead(_202);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_196);
        _194 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _195) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_195);
        _245 = discriminant(_194);
        switchInt(move _245) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_249);
        _249 = ((_194 as Continue).0: ());
        _193 = _249;
        StorageDead(_249);
        StorageDead(_194);
        StorageDead(_193);
        _188 = const ();
        goto -> bb108;
    }

    bb104: {
        StorageLive(_246);
        _246 = ((_194 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_248);
        _248 = _246;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _248) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb245;
    }

    bb106: {
        StorageDead(_192);
        goto -> bb107;
    }

    bb107: {
        _188 = const ();
        goto -> bb108;
    }

    bb108: {
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = _44;
        _251 = Gt(move _252, const 0_u64);
        switchInt(move _251) -> [0: bb133, otherwise: bb109];
    }

    bb109: {
        StorageDead(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = _178;
        _253 = Gt(move _254, const 0_u64);
        switchInt(move _253) -> [0: bb132, otherwise: bb110];
    }

    bb110: {
        StorageDead(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = _44;
        StorageLive(_261);
        _261 = _178;
        _262 = CheckedSub(_260, _261);
        assert(!move (_262.1: bool), "attempt to compute `{} - {}`, which would overflow", move _260, move _261) -> [success: bb111, unwind continue];
    }

    bb111: {
        _259 = move (_262.0: u64);
        StorageDead(_261);
        StorageDead(_260);
        _258 = Le(move _259, const 1_u64);
        switchInt(move _258) -> [0: bb113, otherwise: bb112];
    }

    bb112: {
        StorageDead(_259);
        StorageLive(_263);
        _263 = ();
        _257 = std::result::Result::<(), error::ErrorCode>::Ok(move _263);
        StorageDead(_263);
        goto -> bb127;
    }

    bb113: {
        StorageDead(_259);
        StorageLive(_264);
        _264 = error::ErrorCode::InvalidIfRebalanceSwap;
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _598 = const _;
        _275 = &(*_598);
        _274 = &(*_275);
        _273 = move _274 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_274);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &_264;
        _282 = &(*_283);
        _281 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _282) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_282);
        _280 = [move _281];
        StorageDead(_281);
        _279 = &_280;
        _278 = &(*_279);
        _277 = move _278 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_278);
        _272 = Arguments::<'_>::new_v1(move _273, move _277) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_277);
        StorageDead(_273);
        _271 = format(move _272) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_272);
        StorageDead(_283);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_275);
        _270 = move _271;
        StorageDead(_271);
        _269 = &_270;
        _268 = &(*_269);
        _267 = <String as Deref>::deref(move _268) -> [return: bb117, unwind: bb264];
    }

    bb117: {
        _266 = &(*_267);
        StorageDead(_268);
        _265 = solana_program::log::sol_log(move _266) -> [return: bb118, unwind: bb264];
    }

    bb118: {
        StorageDead(_266);
        drop(_270) -> [return: bb119, unwind: bb269];
    }

    bb119: {
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_265);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _597 = const _;
        _294 = &(*_597);
        _293 = &(*_294);
        _292 = move _293 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_293);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &_44;
        _301 = &(*_302);
        _300 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _301) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_301);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &_178;
        _304 = &(*_305);
        _303 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _304) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_304);
        _299 = [move _300, move _303];
        StorageDead(_303);
        StorageDead(_300);
        _298 = &_299;
        _297 = &(*_298);
        _296 = move _297 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_297);
        _291 = Arguments::<'_>::new_v1(move _292, move _296) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_296);
        StorageDead(_292);
        _290 = format(move _291) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_291);
        StorageDead(_305);
        StorageDead(_302);
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_294);
        _289 = move _290;
        StorageDead(_290);
        _288 = &_289;
        _287 = &(*_288);
        _286 = <String as Deref>::deref(move _287) -> [return: bb124, unwind: bb263];
    }

    bb124: {
        _285 = &(*_286);
        StorageDead(_287);
        _284 = solana_program::log::sol_log(move _285) -> [return: bb125, unwind: bb263];
    }

    bb125: {
        StorageDead(_285);
        drop(_289) -> [return: bb126, unwind: bb269];
    }

    bb126: {
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_284);
        StorageLive(_306);
        _306 = _264;
        _257 = std::result::Result::<(), error::ErrorCode>::Err(move _306);
        StorageDead(_306);
        StorageDead(_264);
        goto -> bb127;
    }

    bb127: {
        StorageDead(_258);
        _256 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _257) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_257);
        _307 = discriminant(_256);
        switchInt(move _307) -> [0: bb129, 1: bb130, otherwise: bb4];
    }

    bb129: {
        StorageLive(_311);
        _311 = ((_256 as Continue).0: ());
        _255 = _311;
        StorageDead(_311);
        StorageDead(_256);
        StorageDead(_255);
        _250 = const ();
        goto -> bb135;
    }

    bb130: {
        StorageLive(_308);
        _308 = ((_256 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_310);
        _310 = _308;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _310) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb245;
    }

    bb132: {
        StorageDead(_254);
        goto -> bb134;
    }

    bb133: {
        StorageDead(_252);
        goto -> bb134;
    }

    bb134: {
        _250 = const ();
        goto -> bb135;
    }

    bb135: {
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = ((*_1).2: u64);
        StorageLive(_316);
        _316 = _6;
        _314 = <u64 as SafeMath>::safe_add(move _315, move _316) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_316);
        StorageDead(_315);
        _313 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _314) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_314);
        _317 = discriminant(_313);
        switchInt(move _317) -> [0: bb138, 1: bb139, otherwise: bb4];
    }

    bb138: {
        StorageLive(_321);
        _321 = ((_313 as Continue).0: u64);
        _312 = _321;
        StorageDead(_321);
        ((*_1).2: u64) = move _312;
        StorageDead(_312);
        StorageDead(_313);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = ((*_1).7: u64);
        StorageLive(_326);
        _326 = _6;
        _324 = <u64 as SafeMath>::safe_add(move _325, move _326) -> [return: bb141, unwind continue];
    }

    bb139: {
        StorageLive(_318);
        _318 = ((_313 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_320);
        _320 = _318;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _320) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_320);
        StorageDead(_318);
        StorageDead(_312);
        StorageDead(_313);
        goto -> bb245;
    }

    bb141: {
        StorageDead(_326);
        StorageDead(_325);
        _323 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _324) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_324);
        _327 = discriminant(_323);
        switchInt(move _327) -> [0: bb143, 1: bb144, otherwise: bb4];
    }

    bb143: {
        StorageLive(_331);
        _331 = ((_323 as Continue).0: u64);
        _322 = _331;
        StorageDead(_331);
        ((*_1).7: u64) = move _322;
        StorageDead(_322);
        StorageDead(_323);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = ((*_1).3: u64);
        StorageLive(_336);
        _336 = _7;
        _334 = <u64 as SafeMath>::safe_add(move _335, move _336) -> [return: bb146, unwind continue];
    }

    bb144: {
        StorageLive(_328);
        _328 = ((_323 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_330);
        _330 = _328;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _330) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_322);
        StorageDead(_323);
        goto -> bb245;
    }

    bb146: {
        StorageDead(_336);
        StorageDead(_335);
        _333 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _334) -> [return: bb147, unwind continue];
    }

    bb147: {
        StorageDead(_334);
        _337 = discriminant(_333);
        switchInt(move _337) -> [0: bb148, 1: bb149, otherwise: bb4];
    }

    bb148: {
        StorageLive(_341);
        _341 = ((_333 as Continue).0: u64);
        _332 = _341;
        StorageDead(_341);
        ((*_1).3: u64) = move _332;
        StorageDead(_332);
        StorageDead(_333);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = ((*_1).7: u64);
        StorageLive(_347);
        _347 = ((*_1).8: u64);
        _345 = Le(move _346, move _347);
        switchInt(move _345) -> [0: bb152, otherwise: bb151];
    }

    bb149: {
        StorageLive(_338);
        _338 = ((_333 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_340);
        _340 = _338;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _340) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_332);
        StorageDead(_333);
        goto -> bb245;
    }

    bb151: {
        StorageDead(_347);
        StorageDead(_346);
        StorageLive(_348);
        _348 = ();
        _344 = std::result::Result::<(), error::ErrorCode>::Ok(move _348);
        StorageDead(_348);
        goto -> bb166;
    }

    bb152: {
        StorageDead(_347);
        StorageDead(_346);
        StorageLive(_349);
        _349 = error::ErrorCode::InvalidIfRebalanceSwap;
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _596 = const _;
        _360 = &(*_596);
        _359 = &(*_360);
        _358 = move _359 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_359);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = &_349;
        _367 = &(*_368);
        _366 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _367) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_367);
        _365 = [move _366];
        StorageDead(_366);
        _364 = &_365;
        _363 = &(*_364);
        _362 = move _363 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_363);
        _357 = Arguments::<'_>::new_v1(move _358, move _362) -> [return: bb154, unwind continue];
    }

    bb154: {
        StorageDead(_362);
        StorageDead(_358);
        _356 = format(move _357) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_357);
        StorageDead(_368);
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_360);
        _355 = move _356;
        StorageDead(_356);
        _354 = &_355;
        _353 = &(*_354);
        _352 = <String as Deref>::deref(move _353) -> [return: bb156, unwind: bb262];
    }

    bb156: {
        _351 = &(*_352);
        StorageDead(_353);
        _350 = solana_program::log::sol_log(move _351) -> [return: bb157, unwind: bb262];
    }

    bb157: {
        StorageDead(_351);
        drop(_355) -> [return: bb158, unwind: bb269];
    }

    bb158: {
        StorageDead(_355);
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_350);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _595 = const _;
        _379 = &(*_595);
        _378 = &(*_379);
        _377 = move _378 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_378);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &((*_1).7: u64);
        _386 = &(*_387);
        _385 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _386) -> [return: bb159, unwind continue];
    }

    bb159: {
        StorageDead(_386);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = &((*_1).8: u64);
        _389 = &(*_390);
        _388 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _389) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_389);
        _384 = [move _385, move _388];
        StorageDead(_388);
        StorageDead(_385);
        _383 = &_384;
        _382 = &(*_383);
        _381 = move _382 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_382);
        _376 = Arguments::<'_>::new_v1(move _377, move _381) -> [return: bb161, unwind continue];
    }

    bb161: {
        StorageDead(_381);
        StorageDead(_377);
        _375 = format(move _376) -> [return: bb162, unwind continue];
    }

    bb162: {
        StorageDead(_376);
        StorageDead(_390);
        StorageDead(_387);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_379);
        _374 = move _375;
        StorageDead(_375);
        _373 = &_374;
        _372 = &(*_373);
        _371 = <String as Deref>::deref(move _372) -> [return: bb163, unwind: bb261];
    }

    bb163: {
        _370 = &(*_371);
        StorageDead(_372);
        _369 = solana_program::log::sol_log(move _370) -> [return: bb164, unwind: bb261];
    }

    bb164: {
        StorageDead(_370);
        drop(_374) -> [return: bb165, unwind: bb269];
    }

    bb165: {
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_369);
        StorageLive(_391);
        _391 = _349;
        _344 = std::result::Result::<(), error::ErrorCode>::Err(move _391);
        StorageDead(_391);
        StorageDead(_349);
        goto -> bb166;
    }

    bb166: {
        StorageDead(_345);
        _343 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _344) -> [return: bb167, unwind continue];
    }

    bb167: {
        StorageDead(_344);
        _392 = discriminant(_343);
        switchInt(move _392) -> [0: bb168, 1: bb169, otherwise: bb4];
    }

    bb168: {
        StorageLive(_396);
        _396 = ((_343 as Continue).0: ());
        _342 = _396;
        StorageDead(_396);
        StorageDead(_343);
        StorageDead(_342);
        StorageLive(_397);
        _397 = (((*_5).5: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _402 = _8;
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = _397;
        _405 = <i64 as Cast>::cast::<u64>(move _406) -> [return: bb171, unwind continue];
    }

    bb169: {
        StorageLive(_393);
        _393 = ((_343 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_395);
        _395 = _393;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _395) -> [return: bb170, unwind continue];
    }

    bb170: {
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_343);
        StorageDead(_342);
        goto -> bb245;
    }

    bb171: {
        StorageDead(_406);
        _404 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _405) -> [return: bb172, unwind continue];
    }

    bb172: {
        StorageDead(_405);
        _407 = discriminant(_404);
        switchInt(move _407) -> [0: bb173, 1: bb174, otherwise: bb4];
    }

    bb173: {
        StorageLive(_411);
        _411 = ((_404 as Continue).0: u64);
        _403 = _411;
        StorageDead(_411);
        _401 = Le(move _402, move _403);
        switchInt(move _401) -> [0: bb177, otherwise: bb176];
    }

    bb174: {
        StorageLive(_408);
        _408 = ((_404 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_410);
        _410 = _408;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _410) -> [return: bb175, unwind continue];
    }

    bb175: {
        StorageDead(_410);
        StorageDead(_408);
        StorageDead(_404);
        StorageDead(_403);
        StorageDead(_402);
        StorageDead(_401);
        StorageDead(_400);
        goto -> bb243;
    }

    bb176: {
        StorageDead(_404);
        StorageDead(_403);
        StorageDead(_402);
        StorageLive(_412);
        _412 = ();
        _400 = std::result::Result::<(), error::ErrorCode>::Ok(move _412);
        StorageDead(_412);
        goto -> bb191;
    }

    bb177: {
        StorageDead(_404);
        StorageDead(_403);
        StorageDead(_402);
        StorageLive(_413);
        _413 = error::ErrorCode::InvalidIfRebalanceSwap;
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _594 = const _;
        _424 = &(*_594);
        _423 = &(*_424);
        _422 = move _423 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_423);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = &_413;
        _431 = &(*_432);
        _430 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _431) -> [return: bb178, unwind continue];
    }

    bb178: {
        StorageDead(_431);
        _429 = [move _430];
        StorageDead(_430);
        _428 = &_429;
        _427 = &(*_428);
        _426 = move _427 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_427);
        _421 = Arguments::<'_>::new_v1(move _422, move _426) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_426);
        StorageDead(_422);
        _420 = format(move _421) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_421);
        StorageDead(_432);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_424);
        _419 = move _420;
        StorageDead(_420);
        _418 = &_419;
        _417 = &(*_418);
        _416 = <String as Deref>::deref(move _417) -> [return: bb181, unwind: bb260];
    }

    bb181: {
        _415 = &(*_416);
        StorageDead(_417);
        _414 = solana_program::log::sol_log(move _415) -> [return: bb182, unwind: bb260];
    }

    bb182: {
        StorageDead(_415);
        drop(_419) -> [return: bb183, unwind: bb269];
    }

    bb183: {
        StorageDead(_419);
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_414);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _593 = const _;
        _443 = &(*_593);
        _442 = &(*_443);
        _441 = move _442 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_442);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        _451 = &_8;
        _450 = &(*_451);
        _449 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _450) -> [return: bb184, unwind continue];
    }

    bb184: {
        StorageDead(_450);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = &_397;
        _453 = &(*_454);
        _452 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _453) -> [return: bb185, unwind continue];
    }

    bb185: {
        StorageDead(_453);
        _448 = [move _449, move _452];
        StorageDead(_452);
        StorageDead(_449);
        _447 = &_448;
        _446 = &(*_447);
        _445 = move _446 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_446);
        _440 = Arguments::<'_>::new_v1(move _441, move _445) -> [return: bb186, unwind continue];
    }

    bb186: {
        StorageDead(_445);
        StorageDead(_441);
        _439 = format(move _440) -> [return: bb187, unwind continue];
    }

    bb187: {
        StorageDead(_440);
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_443);
        _438 = move _439;
        StorageDead(_439);
        _437 = &_438;
        _436 = &(*_437);
        _435 = <String as Deref>::deref(move _436) -> [return: bb188, unwind: bb259];
    }

    bb188: {
        _434 = &(*_435);
        StorageDead(_436);
        _433 = solana_program::log::sol_log(move _434) -> [return: bb189, unwind: bb259];
    }

    bb189: {
        StorageDead(_434);
        drop(_438) -> [return: bb190, unwind: bb269];
    }

    bb190: {
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_435);
        StorageDead(_433);
        StorageLive(_455);
        _455 = _413;
        _400 = std::result::Result::<(), error::ErrorCode>::Err(move _455);
        StorageDead(_455);
        StorageDead(_413);
        goto -> bb191;
    }

    bb191: {
        StorageDead(_401);
        _399 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _400) -> [return: bb192, unwind continue];
    }

    bb192: {
        StorageDead(_400);
        _456 = discriminant(_399);
        switchInt(move _456) -> [0: bb193, 1: bb194, otherwise: bb4];
    }

    bb193: {
        StorageLive(_460);
        _460 = ((_399 as Continue).0: ());
        _398 = _460;
        StorageDead(_460);
        StorageDead(_399);
        StorageDead(_398);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = _6;
        StorageLive(_465);
        _465 = _7;
        StorageLive(_466);
        StorageLive(_467);
        _467 = (*_5);
        _466 = SpotMarket::get_precision(move _467) -> [return: bb196, unwind continue];
    }

    bb194: {
        StorageLive(_457);
        _457 = ((_399 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_459);
        _459 = _457;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _459) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_459);
        StorageDead(_457);
        goto -> bb243;
    }

    bb196: {
        StorageDead(_467);
        _463 = math::orders::calculate_fill_price(move _464, move _465, move _466) -> [return: bb197, unwind continue];
    }

    bb197: {
        StorageDead(_466);
        StorageDead(_465);
        StorageDead(_464);
        _462 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _463) -> [return: bb198, unwind continue];
    }

    bb198: {
        StorageDead(_463);
        _468 = discriminant(_462);
        switchInt(move _468) -> [0: bb199, 1: bb200, otherwise: bb4];
    }

    bb199: {
        StorageLive(_472);
        _472 = ((_462 as Continue).0: u64);
        _461 = _472;
        StorageDead(_472);
        StorageDead(_462);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        _476 = ((*_1).12: u16);
        _475 = <u16 as Cast>::cast::<u64>(move _476) -> [return: bb202, unwind continue];
    }

    bb200: {
        StorageLive(_469);
        _469 = ((_462 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_471);
        _471 = _469;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _471) -> [return: bb201, unwind continue];
    }

    bb201: {
        StorageDead(_471);
        StorageDead(_469);
        StorageDead(_462);
        goto -> bb242;
    }

    bb202: {
        StorageDead(_476);
        _474 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _475) -> [return: bb203, unwind continue];
    }

    bb203: {
        StorageDead(_475);
        _477 = discriminant(_474);
        switchInt(move _477) -> [0: bb204, 1: bb205, otherwise: bb4];
    }

    bb204: {
        StorageLive(_481);
        _481 = ((_474 as Continue).0: u64);
        _473 = _481;
        StorageDead(_481);
        StorageDead(_474);
        StorageLive(_482);
        StorageLive(_483);
        _483 = _8;
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = _473;
        _485 = <u64 as Ord>::max(move _486, const 1_u64) -> [return: bb207, unwind continue];
    }

    bb205: {
        StorageLive(_478);
        _478 = ((_474 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_480);
        _480 = _478;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _480) -> [return: bb206, unwind continue];
    }

    bb206: {
        StorageDead(_480);
        StorageDead(_478);
        StorageDead(_474);
        goto -> bb241;
    }

    bb207: {
        StorageDead(_486);
        _487 = Eq(_485, const 0_u64);
        assert(!move _487, "attempt to divide `{}` by zero", const 10000_u64) -> [success: bb208, unwind continue];
    }

    bb208: {
        _484 = Div(const 10000_u64, move _485);
        StorageDead(_485);
        _488 = Eq(_484, const 0_u64);
        assert(!move _488, "attempt to divide `{}` by zero", _483) -> [success: bb209, unwind continue];
    }

    bb209: {
        _482 = Div(move _483, move _484);
        StorageDead(_484);
        StorageDead(_483);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        _493 = _461;
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        _497 = _8;
        StorageLive(_498);
        _498 = _482;
        _496 = <u64 as SafeMath>::safe_add(move _497, move _498) -> [return: bb210, unwind continue];
    }

    bb210: {
        StorageDead(_498);
        StorageDead(_497);
        _495 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _496) -> [return: bb211, unwind continue];
    }

    bb211: {
        StorageDead(_496);
        _499 = discriminant(_495);
        switchInt(move _499) -> [0: bb212, 1: bb213, otherwise: bb4];
    }

    bb212: {
        StorageLive(_503);
        _503 = ((_495 as Continue).0: u64);
        _494 = _503;
        StorageDead(_503);
        _492 = Le(move _493, move _494);
        switchInt(move _492) -> [0: bb216, otherwise: bb215];
    }

    bb213: {
        StorageLive(_500);
        _500 = ((_495 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_502);
        _502 = _500;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _502) -> [return: bb214, unwind continue];
    }

    bb214: {
        StorageDead(_502);
        StorageDead(_500);
        StorageDead(_495);
        StorageDead(_494);
        StorageDead(_493);
        StorageDead(_492);
        StorageDead(_491);
        goto -> bb240;
    }

    bb215: {
        StorageDead(_495);
        StorageDead(_494);
        StorageDead(_493);
        StorageLive(_504);
        _504 = ();
        _491 = std::result::Result::<(), error::ErrorCode>::Ok(move _504);
        StorageDead(_504);
        goto -> bb231;
    }

    bb216: {
        StorageDead(_495);
        StorageDead(_494);
        StorageDead(_493);
        StorageLive(_505);
        _505 = error::ErrorCode::InvalidIfRebalanceSwap;
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        _592 = const _;
        _516 = &(*_592);
        _515 = &(*_516);
        _514 = move _515 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_515);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = &_505;
        _523 = &(*_524);
        _522 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _523) -> [return: bb217, unwind continue];
    }

    bb217: {
        StorageDead(_523);
        _521 = [move _522];
        StorageDead(_522);
        _520 = &_521;
        _519 = &(*_520);
        _518 = move _519 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_519);
        _513 = Arguments::<'_>::new_v1(move _514, move _518) -> [return: bb218, unwind continue];
    }

    bb218: {
        StorageDead(_518);
        StorageDead(_514);
        _512 = format(move _513) -> [return: bb219, unwind continue];
    }

    bb219: {
        StorageDead(_513);
        StorageDead(_524);
        StorageDead(_521);
        StorageDead(_520);
        StorageDead(_516);
        _511 = move _512;
        StorageDead(_512);
        _510 = &_511;
        _509 = &(*_510);
        _508 = <String as Deref>::deref(move _509) -> [return: bb220, unwind: bb258];
    }

    bb220: {
        _507 = &(*_508);
        StorageDead(_509);
        _506 = solana_program::log::sol_log(move _507) -> [return: bb221, unwind: bb258];
    }

    bb221: {
        StorageDead(_507);
        drop(_511) -> [return: bb222, unwind: bb269];
    }

    bb222: {
        StorageDead(_511);
        StorageDead(_510);
        StorageDead(_508);
        StorageDead(_506);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        _591 = const _;
        _535 = &(*_591);
        _534 = &(*_535);
        _533 = move _534 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_534);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        _543 = &_461;
        _542 = &(*_543);
        _541 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _542) -> [return: bb223, unwind continue];
    }

    bb223: {
        StorageDead(_542);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        _546 = &_8;
        _545 = &(*_546);
        _544 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _545) -> [return: bb224, unwind continue];
    }

    bb224: {
        StorageDead(_545);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        _549 = &_482;
        _548 = &(*_549);
        _547 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _548) -> [return: bb225, unwind continue];
    }

    bb225: {
        StorageDead(_548);
        _540 = [move _541, move _544, move _547];
        StorageDead(_547);
        StorageDead(_544);
        StorageDead(_541);
        _539 = &_540;
        _538 = &(*_539);
        _537 = move _538 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_538);
        _532 = Arguments::<'_>::new_v1(move _533, move _537) -> [return: bb226, unwind continue];
    }

    bb226: {
        StorageDead(_537);
        StorageDead(_533);
        _531 = format(move _532) -> [return: bb227, unwind continue];
    }

    bb227: {
        StorageDead(_532);
        StorageDead(_549);
        StorageDead(_546);
        StorageDead(_543);
        StorageDead(_540);
        StorageDead(_539);
        StorageDead(_535);
        _530 = move _531;
        StorageDead(_531);
        _529 = &_530;
        _528 = &(*_529);
        _527 = <String as Deref>::deref(move _528) -> [return: bb228, unwind: bb257];
    }

    bb228: {
        _526 = &(*_527);
        StorageDead(_528);
        _525 = solana_program::log::sol_log(move _526) -> [return: bb229, unwind: bb257];
    }

    bb229: {
        StorageDead(_526);
        drop(_530) -> [return: bb230, unwind: bb269];
    }

    bb230: {
        StorageDead(_530);
        StorageDead(_529);
        StorageDead(_527);
        StorageDead(_525);
        StorageLive(_550);
        _550 = _505;
        _491 = std::result::Result::<(), error::ErrorCode>::Err(move _550);
        StorageDead(_550);
        StorageDead(_505);
        goto -> bb231;
    }

    bb231: {
        StorageDead(_492);
        _490 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _491) -> [return: bb232, unwind continue];
    }

    bb232: {
        StorageDead(_491);
        _551 = discriminant(_490);
        switchInt(move _551) -> [0: bb233, 1: bb234, otherwise: bb4];
    }

    bb233: {
        StorageLive(_555);
        _555 = ((_490 as Continue).0: ());
        _489 = _555;
        StorageDead(_555);
        StorageDead(_490);
        StorageDead(_489);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        _570 = _9;
        StorageLive(_571);
        _571 = ((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_572);
        _572 = ((*_1).11: u16);
        StorageLive(_573);
        _573 = ((*_1).10: u16);
        StorageLive(_574);
        _574 = _6;
        StorageLive(_575);
        _575 = _7;
        StorageLive(_576);
        _576 = _8;
        StorageLive(_577);
        _577 = _397;
        StorageLive(_578);
        _578 = _10;
        StorageLive(_579);
        _579 = _20;
        StorageLive(_580);
        _580 = _2;
        StorageLive(_581);
        _581 = _3;
        StorageLive(_582);
        _582 = _30;
        StorageLive(_583);
        _583 = _31;
        StorageLive(_584);
        _584 = _32;
        StorageLive(_585);
        _585 = _33;
        StorageLive(_586);
        _586 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_587);
        _587 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_588);
        _588 = (((*_4).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_589);
        _589 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        _569 = InsuranceFundSwapRecord { rebalance_config: move _571, in_if_total_shares_before: move _582, out_if_total_shares_before: move _583, in_if_user_shares_before: move _584, out_if_user_shares_before: move _585, in_if_total_shares_after: move _586, out_if_total_shares_after: move _587, in_if_user_shares_after: move _588, out_if_user_shares_after: move _589, ts: move _570, in_amount: move _574, out_amount: move _575, out_oracle_price: move _576, out_oracle_price_twap: move _577, in_vault_amount_before: move _578, out_vault_amount_before: move _579, in_fund_vault_amount_after: move _580, out_fund_vault_amount_after: move _581, in_market_index: move _572, out_market_index: move _573 };
        StorageDead(_589);
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_586);
        StorageDead(_585);
        StorageDead(_584);
        StorageDead(_583);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_577);
        StorageDead(_576);
        StorageDead(_575);
        StorageDead(_574);
        StorageDead(_573);
        StorageDead(_572);
        StorageDead(_571);
        StorageDead(_570);
        _568 = &_569;
        _567 = &(*_568);
        _566 = <InsuranceFundSwapRecord as anchor_lang::Event>::data(move _567) -> [return: bb236, unwind continue];
    }

    bb234: {
        StorageLive(_552);
        _552 = ((_490 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_554);
        _554 = _552;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _554) -> [return: bb235, unwind continue];
    }

    bb235: {
        StorageDead(_554);
        StorageDead(_552);
        goto -> bb240;
    }

    bb236: {
        StorageDead(_567);
        _565 = &_566;
        _564 = &(*_565);
        _563 = <Vec<u8> as Deref>::deref(move _564) -> [return: bb237, unwind: bb256];
    }

    bb237: {
        _562 = &(*_563);
        StorageDead(_564);
        _561 = [move _562];
        StorageDead(_562);
        _560 = &_561;
        _559 = &(*_560);
        _558 = move _559 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_559);
        _557 = solana_program::log::sol_log_data(move _558) -> [return: bb238, unwind: bb256];
    }

    bb238: {
        StorageDead(_558);
        drop(_566) -> [return: bb239, unwind: bb269];
    }

    bb239: {
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_566);
        StorageDead(_565);
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_560);
        StorageDead(_557);
        _556 = const ();
        StorageDead(_556);
        StorageLive(_590);
        _590 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _590);
        StorageDead(_590);
        StorageDead(_482);
        StorageDead(_473);
        StorageDead(_461);
        StorageDead(_397);
        StorageDead(_178);
        StorageDead(_168);
        StorageDead(_65);
        StorageDead(_54);
        StorageDead(_44);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_20);
        StorageDead(_10);
        goto -> bb255;
    }

    bb240: {
        StorageDead(_490);
        StorageDead(_489);
        StorageDead(_482);
        goto -> bb241;
    }

    bb241: {
        StorageDead(_473);
        goto -> bb242;
    }

    bb242: {
        StorageDead(_461);
        goto -> bb244;
    }

    bb243: {
        StorageDead(_399);
        StorageDead(_398);
        goto -> bb244;
    }

    bb244: {
        StorageDead(_397);
        goto -> bb245;
    }

    bb245: {
        StorageDead(_178);
        goto -> bb246;
    }

    bb246: {
        StorageDead(_168);
        goto -> bb249;
    }

    bb247: {
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb249;
    }

    bb249: {
        StorageDead(_65);
        goto -> bb250;
    }

    bb250: {
        StorageDead(_54);
        goto -> bb251;
    }

    bb251: {
        StorageDead(_44);
        goto -> bb252;
    }

    bb252: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb253;
    }

    bb253: {
        StorageDead(_20);
        goto -> bb254;
    }

    bb254: {
        StorageDead(_10);
        goto -> bb255;
    }

    bb255: {
        return;
    }

    bb256 (cleanup): {
        drop(_566) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb257 (cleanup): {
        drop(_530) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb258 (cleanup): {
        drop(_511) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        drop(_438) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb260 (cleanup): {
        drop(_419) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb261 (cleanup): {
        drop(_374) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb262 (cleanup): {
        drop(_355) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb263 (cleanup): {
        drop(_289) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        drop(_270) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb265 (cleanup): {
        drop(_227) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb266 (cleanup): {
        drop(_208) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        drop(_116) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        drop(_97) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        resume;
    }
}
