// MIR for `if_staker::handle_remove_insurance_fund_stake` before PreCodegen

fn if_staker::handle_remove_insurance_fund_stake(_1: anchor_lang::context::Context<'_, '_, '_, '_, if_staker::RemoveInsuranceFundStake<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: anchor_lang::prelude::Clock;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _15: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _20: anchor_lang::prelude::Clock;
    let mut _23: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _25: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, error::ErrorCode>;
    let mut _26: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _27: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _28: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _37: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _38: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _40: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _49: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _50: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _51: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _52: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _61: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _62: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _65: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _66: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _72: ();
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _74: std::result::Result<(), error::ErrorCode>;
    let mut _75: bool;
    let mut _76: &state::spot_market::SpotMarket;
    let _77: &state::spot_market::SpotMarket;
    let mut _78: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _79: state::paused_operations::InsuranceFundOperation;
    let mut _80: ();
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: &std::string::String;
    let _86: &std::string::String;
    let _87: std::string::String;
    let mut _89: std::fmt::Arguments<'_>;
    let mut _90: &[&str];
    let mut _91: &[&str; 2];
    let _92: &[&str; 2];
    let _93: [&str; 2];
    let mut _94: &[core::fmt::rt::Argument<'_>];
    let mut _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: &[core::fmt::rt::Argument<'_>; 1];
    let _97: [core::fmt::rt::Argument<'_>; 1];
    let mut _98: core::fmt::rt::Argument<'_>;
    let mut _99: &error::ErrorCode;
    let _100: &error::ErrorCode;
    let _101: ();
    let mut _102: &str;
    let _103: &str;
    let mut _104: &std::string::String;
    let _105: &std::string::String;
    let _106: std::string::String;
    let mut _108: std::fmt::Arguments<'_>;
    let mut _109: &[&str];
    let mut _110: &[&str; 1];
    let _111: &[&str; 1];
    let _112: [&str; 1];
    let mut _113: error::ErrorCode;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _119: ();
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _121: std::result::Result<(), error::ErrorCode>;
    let mut _122: bool;
    let mut _123: u16;
    let mut _124: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _125: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _126: u16;
    let mut _127: ();
    let _129: ();
    let mut _130: &str;
    let _131: &str;
    let mut _132: &std::string::String;
    let _133: &std::string::String;
    let _134: std::string::String;
    let mut _136: std::fmt::Arguments<'_>;
    let mut _137: &[&str];
    let mut _138: &[&str; 2];
    let _139: &[&str; 2];
    let _140: [&str; 2];
    let mut _141: &[core::fmt::rt::Argument<'_>];
    let mut _142: &[core::fmt::rt::Argument<'_>; 1];
    let _143: &[core::fmt::rt::Argument<'_>; 1];
    let _144: [core::fmt::rt::Argument<'_>; 1];
    let mut _145: core::fmt::rt::Argument<'_>;
    let mut _146: &error::ErrorCode;
    let _147: &error::ErrorCode;
    let _148: ();
    let mut _149: &str;
    let _150: &str;
    let mut _151: error::ErrorCode;
    let mut _152: isize;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _157: ();
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _159: std::result::Result<(), error::ErrorCode>;
    let mut _160: bool;
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _162: std::result::Result<bool, error::ErrorCode>;
    let mut _163: state::spot_market::SpotMarket;
    let mut _164: &state::spot_market::SpotMarket;
    let mut _165: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _171: ();
    let _173: ();
    let mut _174: &str;
    let _175: &str;
    let mut _176: &std::string::String;
    let _177: &std::string::String;
    let _178: std::string::String;
    let mut _180: std::fmt::Arguments<'_>;
    let mut _181: &[&str];
    let mut _182: &[&str; 2];
    let _183: &[&str; 2];
    let _184: [&str; 2];
    let mut _185: &[core::fmt::rt::Argument<'_>];
    let mut _186: &[core::fmt::rt::Argument<'_>; 1];
    let _187: &[core::fmt::rt::Argument<'_>; 1];
    let _188: [core::fmt::rt::Argument<'_>; 1];
    let mut _189: core::fmt::rt::Argument<'_>;
    let mut _190: &error::ErrorCode;
    let _191: &error::ErrorCode;
    let _192: ();
    let mut _193: &str;
    let _194: &str;
    let mut _195: error::ErrorCode;
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _203: std::result::Result<u64, error::ErrorCode>;
    let mut _204: u64;
    let mut _205: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _206: &anchor_spl::token_interface::TokenAccount;
    let _207: &anchor_spl::token_interface::TokenAccount;
    let mut _208: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _209: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _210: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _211: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _212: &mut state::user::UserStats;
    let mut _213: &mut state::user::UserStats;
    let mut _214: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _215: &mut state::spot_market::SpotMarket;
    let mut _216: &mut state::spot_market::SpotMarket;
    let mut _217: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _218: i64;
    let mut _219: isize;
    let mut _221: !;
    let mut _222: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _224: ();
    let mut _225: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _226: std::result::Result<(), anchor_lang::error::Error>;
    let mut _227: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _228: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _229: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _230: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _231: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _232: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _233: &anchor_lang::prelude::AccountInfo<'_>;
    let _234: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _235: u8;
    let mut _236: &state::state::State;
    let mut _237: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _238: u64;
    let mut _239: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _240: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _241: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _242: bool;
    let mut _243: &state::spot_market::SpotMarket;
    let _244: &state::spot_market::SpotMarket;
    let mut _245: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _246: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _247: isize;
    let mut _249: !;
    let mut _250: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _252: ();
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _254: std::result::Result<(), anchor_lang::error::Error>;
    let mut _255: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _256: isize;
    let mut _258: !;
    let mut _259: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _261: ();
    let mut _262: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _263: std::result::Result<(), error::ErrorCode>;
    let mut _264: bool;
    let mut _265: u64;
    let mut _266: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _267: &anchor_spl::token_interface::TokenAccount;
    let _268: &anchor_spl::token_interface::TokenAccount;
    let mut _269: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _270: ();
    let _272: ();
    let mut _273: &str;
    let _274: &str;
    let mut _275: &std::string::String;
    let _276: &std::string::String;
    let _277: std::string::String;
    let mut _279: std::fmt::Arguments<'_>;
    let mut _280: &[&str];
    let mut _281: &[&str; 2];
    let _282: &[&str; 2];
    let _283: [&str; 2];
    let mut _284: &[core::fmt::rt::Argument<'_>];
    let mut _285: &[core::fmt::rt::Argument<'_>; 1];
    let _286: &[core::fmt::rt::Argument<'_>; 1];
    let _287: [core::fmt::rt::Argument<'_>; 1];
    let mut _288: core::fmt::rt::Argument<'_>;
    let mut _289: &error::ErrorCode;
    let _290: &error::ErrorCode;
    let _291: ();
    let mut _292: &str;
    let _293: &str;
    let mut _294: error::ErrorCode;
    let mut _295: isize;
    let mut _297: !;
    let mut _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _300: i64;
    let mut _301: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _302: std::result::Result<i64, error::ErrorCode>;
    let mut _303: &state::spot_market::SpotMarket;
    let _304: &state::spot_market::SpotMarket;
    let mut _305: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _306: isize;
    let mut _308: !;
    let mut _309: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _311: ();
    let mut _317: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _318: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _319: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _320: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _321: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _322: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _323: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _324: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _325: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _326: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _327: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _328: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _329: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _330: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _331: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _332: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _333: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _334: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _335: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>;
    let mut _336: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _373: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _374: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _375: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _376: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _377: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _378: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _13;
        let _21: i64;
        scope 10 {
            debug now => _21;
            let _22: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
            let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _33: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
            scope 11 {
                debug insurance_fund_stake => _22;
                let _34: &mut std::cell::RefMut<'_, state::user::UserStats>;
                let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _45: std::cell::RefMut<'_, state::user::UserStats>;
                scope 16 {
                    debug user_stats => _34;
                    let _46: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _57: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    scope 21 {
                        debug spot_market => _46;
                        let _58: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                        scope 26 {
                            debug state => _58;
                            let _59: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                            scope 27 {
                                debug remaining_accounts_iter => _59;
                                let _63: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _71: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                scope 28 {
                                    debug mint => _63;
                                    let _81: error::ErrorCode;
                                    let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _118: ();
                                    let _128: error::ErrorCode;
                                    let _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _156: ();
                                    let _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _170: bool;
                                    let _172: error::ErrorCode;
                                    let _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _200: ();
                                    let _201: u64;
                                    let _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _223: u64;
                                    scope 33 {
                                        debug error_code => _81;
                                        let _88: std::string::String;
                                        let _107: std::string::String;
                                        let mut _315: &[&str; 1];
                                        let mut _316: &[&str; 2];
                                        scope 34 {
                                            debug res => _88;
                                        }
                                        scope 35 {
                                            debug res => _107;
                                        }
                                    }
                                    scope 36 {
                                        debug residual => _115;
                                        scope 37 {
                                        }
                                    }
                                    scope 38 {
                                        debug val => _118;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug error_code => _128;
                                        let _135: std::string::String;
                                        let mut _314: &[&str; 2];
                                        scope 41 {
                                            debug res => _135;
                                        }
                                    }
                                    scope 42 {
                                        debug residual => _153;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => _156;
                                        scope 45 {
                                        }
                                    }
                                    scope 46 {
                                        debug residual => _167;
                                        scope 47 {
                                        }
                                    }
                                    scope 48 {
                                        debug val => _170;
                                        scope 49 {
                                        }
                                    }
                                    scope 50 {
                                        debug error_code => _172;
                                        let _179: std::string::String;
                                        let mut _313: &[&str; 2];
                                        scope 51 {
                                            debug res => _179;
                                        }
                                    }
                                    scope 52 {
                                        debug residual => _197;
                                        scope 53 {
                                        }
                                    }
                                    scope 54 {
                                        debug val => _200;
                                        scope 55 {
                                        }
                                    }
                                    scope 56 {
                                        debug amount => _201;
                                        let _248: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _251: ();
                                        let _257: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _260: ();
                                        let _271: error::ErrorCode;
                                        let _296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _299: ();
                                        let _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _310: i64;
                                        scope 61 {
                                            debug residual => _248;
                                            scope 62 {
                                            }
                                        }
                                        scope 63 {
                                            debug val => _251;
                                            scope 64 {
                                            }
                                        }
                                        scope 65 {
                                            debug residual => _257;
                                            scope 66 {
                                            }
                                        }
                                        scope 67 {
                                            debug val => _260;
                                            scope 68 {
                                            }
                                        }
                                        scope 69 {
                                            debug error_code => _271;
                                            let _278: std::string::String;
                                            let mut _312: &[&str; 2];
                                            scope 70 {
                                                debug res => _278;
                                            }
                                        }
                                        scope 71 {
                                            debug residual => _296;
                                            scope 72 {
                                            }
                                        }
                                        scope 73 {
                                            debug val => _299;
                                            scope 74 {
                                            }
                                        }
                                        scope 75 {
                                            debug residual => _307;
                                            scope 76 {
                                            }
                                        }
                                        scope 77 {
                                            debug val => _310;
                                            scope 78 {
                                            }
                                        }
                                    }
                                    scope 57 {
                                        debug residual => _220;
                                        scope 58 {
                                        }
                                    }
                                    scope 59 {
                                        debug val => _223;
                                        scope 60 {
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _68;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _71;
                                    scope 32 {
                                    }
                                }
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _54;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _57;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _42;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _45;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _30;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _33;
                scope 15 {
                }
            }
        }
    }
    scope 6 {
        debug residual => _17;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _20;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _317 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _7 = &((*_317).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _318 = deref_copy (*_7);
        _372 = (((_318.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_372);
        _5 = constraints::withdraw_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb159];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _337 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb166];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _363 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb150;
    }

    bb7: {
        _14 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _15) -> [return: bb8, unwind: bb159];
    }

    bb8: {
        StorageDead(_15);
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_14 as Continue).0: anchor_lang::prelude::Clock);
        _13 = move _20;
        StorageDead(_20);
        _339 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_21);
        _21 = (_13.4: i64);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _319 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _27 = &((*_319).2: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _26 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load_mut(move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _19) -> [return: bb11, unwind: bb165];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        _361 = discriminant(_14);
        StorageDead(_14);
        goto -> bb149;
    }

    bb12: {
        StorageDead(_27);
        StorageLive(_28);
        _28 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _25 = std::result::Result::<RefMut<'_, InsuranceFundStake>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _26, move _28) -> [return: bb13, unwind: bb159];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_26);
        _24 = <std::result::Result<RefMut<'_, InsuranceFundStake>, error::ErrorCode> as Try>::branch(move _25) -> [return: bb14, unwind: bb159];
    }

    bb14: {
        StorageDead(_25);
        _29 = discriminant(_24);
        switchInt(move _29) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_33);
        _33 = move ((_24 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _23 = move _33;
        StorageDead(_33);
        _22 = &mut _23;
        _343 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _320 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _39 = &((*_320).3: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _38 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _39) -> [return: bb18, unwind: bb158];
    }

    bb16: {
        StorageLive(_30);
        _30 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb17, unwind: bb164];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_30);
        _341 = discriminant(_24);
        StorageDead(_24);
        goto -> bb148;
    }

    bb18: {
        StorageDead(_39);
        StorageLive(_40);
        _40 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _37 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _38, move _40) -> [return: bb19, unwind: bb158];
    }

    bb19: {
        StorageDead(_40);
        StorageDead(_38);
        _36 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _37) -> [return: bb20, unwind: bb158];
    }

    bb20: {
        StorageDead(_37);
        _41 = discriminant(_36);
        switchInt(move _41) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_45);
        _45 = move ((_36 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _35 = move _45;
        StorageDead(_45);
        _34 = &mut _35;
        _347 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _321 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _51 = &((*_321).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _50 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _51) -> [return: bb24, unwind: bb157];
    }

    bb22: {
        StorageLive(_42);
        _42 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb23, unwind: bb163];
    }

    bb23: {
        StorageDead(_44);
        StorageDead(_42);
        _345 = discriminant(_36);
        StorageDead(_36);
        goto -> bb147;
    }

    bb24: {
        StorageDead(_51);
        StorageLive(_52);
        _52 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _49 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _50, move _52) -> [return: bb25, unwind: bb157];
    }

    bb25: {
        StorageDead(_52);
        StorageDead(_50);
        _48 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _49) -> [return: bb26, unwind: bb157];
    }

    bb26: {
        StorageDead(_49);
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_57);
        _57 = move ((_48 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _47 = move _57;
        StorageDead(_57);
        _46 = &mut _47;
        _351 = discriminant(_48);
        StorageDead(_48);
        StorageLive(_58);
        _322 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _58 = &((*_322).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _323 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _62 = &(*_323);
        _61 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _62) -> [return: bb30, unwind: bb156];
    }

    bb28: {
        StorageLive(_54);
        _54 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb29, unwind: bb162];
    }

    bb29: {
        StorageDead(_56);
        StorageDead(_54);
        _349 = discriminant(_48);
        StorageDead(_48);
        goto -> bb146;
    }

    bb30: {
        StorageDead(_62);
        _60 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _61) -> [return: bb31, unwind: bb156];
    }

    bb31: {
        StorageDead(_61);
        _59 = &mut _60;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut (*_59);
        _65 = get_token_mint(move _66) -> [return: bb32, unwind: bb156];
    }

    bb32: {
        StorageDead(_66);
        _64 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _65) -> [return: bb33, unwind: bb156];
    }

    bb33: {
        StorageDead(_65);
        _67 = discriminant(_64);
        switchInt(move _67) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_71);
        _71 = move ((_64 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _63 = move _71;
        StorageDead(_71);
        StorageDead(_64);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(*_46);
        _77 = <RefMut<'_, SpotMarket> as Deref>::deref(move _78) -> [return: bb37, unwind: bb156];
    }

    bb35: {
        StorageLive(_68);
        _68 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb36, unwind: bb156];
    }

    bb36: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_64);
        goto -> bb145;
    }

    bb37: {
        _76 = &(*_77);
        StorageDead(_78);
        StorageLive(_79);
        _79 = InsuranceFundOperation::Remove;
        _75 = SpotMarket::is_insurance_fund_operation_paused(move _76, move _79) -> [return: bb38, unwind: bb156];
    }

    bb38: {
        switchInt(move _75) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_77);
        StorageLive(_81);
        _81 = error::ErrorCode::InsuranceFundOperationPaused;
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _316 = const _;
        _92 = &(*_316);
        _91 = &(*_92);
        _90 = move _91 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &_81;
        _99 = &(*_100);
        _98 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _99) -> [return: bb41, unwind: bb156];
    }

    bb40: {
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_77);
        StorageLive(_80);
        _80 = ();
        _74 = std::result::Result::<(), error::ErrorCode>::Ok(move _80);
        StorageDead(_80);
        goto -> bb52;
    }

    bb41: {
        StorageDead(_99);
        _97 = [move _98];
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = move _95 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_95);
        _89 = Arguments::<'_>::new_v1(move _90, move _94) -> [return: bb42, unwind: bb156];
    }

    bb42: {
        StorageDead(_94);
        StorageDead(_90);
        _88 = format(move _89) -> [return: bb43, unwind: bb156];
    }

    bb43: {
        StorageDead(_89);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_92);
        _87 = move _88;
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = <String as Deref>::deref(move _85) -> [return: bb44, unwind: bb155];
    }

    bb44: {
        _83 = &(*_84);
        StorageDead(_85);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb45, unwind: bb155];
    }

    bb45: {
        StorageDead(_83);
        drop(_87) -> [return: bb46, unwind: bb156];
    }

    bb46: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _315 = const _;
        _111 = &(*_315);
        _110 = &(*_111);
        _109 = move _110 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_110);
        _108 = Arguments::<'_>::new_const(move _109) -> [return: bb47, unwind: bb156];
    }

    bb47: {
        StorageDead(_109);
        _107 = format(move _108) -> [return: bb48, unwind: bb156];
    }

    bb48: {
        StorageDead(_108);
        StorageDead(_111);
        _106 = move _107;
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = <String as Deref>::deref(move _104) -> [return: bb49, unwind: bb154];
    }

    bb49: {
        _102 = &(*_103);
        StorageDead(_104);
        _101 = solana_program::log::sol_log(move _102) -> [return: bb50, unwind: bb154];
    }

    bb50: {
        StorageDead(_102);
        drop(_106) -> [return: bb51, unwind: bb156];
    }

    bb51: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_101);
        StorageLive(_113);
        _113 = _81;
        _74 = std::result::Result::<(), error::ErrorCode>::Err(move _113);
        StorageDead(_113);
        StorageDead(_81);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_75);
        _73 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _74) -> [return: bb53, unwind: bb156];
    }

    bb53: {
        StorageDead(_74);
        _114 = discriminant(_73);
        switchInt(move _114) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_118);
        _118 = ((_73 as Continue).0: ());
        _72 = _118;
        StorageDead(_118);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &(*_22);
        _124 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _125) -> [return: bb57, unwind: bb156];
    }

    bb55: {
        StorageLive(_115);
        _115 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb56, unwind: bb156];
    }

    bb56: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb145;
    }

    bb57: {
        StorageDead(_125);
        _123 = ((*_124).8: u16);
        StorageLive(_126);
        _126 = _2;
        _122 = Eq(move _123, move _126);
        switchInt(move _122) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_127);
        _127 = ();
        _121 = std::result::Result::<(), error::ErrorCode>::Ok(move _127);
        StorageDead(_127);
        goto -> bb67;
    }

    bb59: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_128);
        _128 = error::ErrorCode::IncorrectSpotMarketAccountPassed;
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _314 = const _;
        _139 = &(*_314);
        _138 = &(*_139);
        _137 = move _138 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_128;
        _146 = &(*_147);
        _145 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _146) -> [return: bb60, unwind: bb156];
    }

    bb60: {
        StorageDead(_146);
        _144 = [move _145];
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        _141 = move _142 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_142);
        _136 = Arguments::<'_>::new_v1(move _137, move _141) -> [return: bb61, unwind: bb156];
    }

    bb61: {
        StorageDead(_141);
        StorageDead(_137);
        _135 = format(move _136) -> [return: bb62, unwind: bb156];
    }

    bb62: {
        StorageDead(_136);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_139);
        _134 = move _135;
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _131 = <String as Deref>::deref(move _132) -> [return: bb63, unwind: bb153];
    }

    bb63: {
        _130 = &(*_131);
        StorageDead(_132);
        _129 = solana_program::log::sol_log(move _130) -> [return: bb64, unwind: bb153];
    }

    bb64: {
        StorageDead(_130);
        drop(_134) -> [return: bb65, unwind: bb156];
    }

    bb65: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = const "insurance_fund_stake does not match market_index";
        _149 = &(*_150);
        _148 = solana_program::log::sol_log(move _149) -> [return: bb66, unwind: bb156];
    }

    bb66: {
        StorageDead(_149);
        StorageDead(_150);
        StorageDead(_148);
        StorageLive(_151);
        _151 = _128;
        _121 = std::result::Result::<(), error::ErrorCode>::Err(move _151);
        StorageDead(_151);
        StorageDead(_128);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_122);
        _120 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _121) -> [return: bb68, unwind: bb156];
    }

    bb68: {
        StorageDead(_121);
        _152 = discriminant(_120);
        switchInt(move _152) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_156);
        _156 = ((_120 as Continue).0: ());
        _119 = _156;
        StorageDead(_156);
        StorageDead(_120);
        StorageDead(_119);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &(*_46);
        _164 = <RefMut<'_, SpotMarket> as Deref>::deref(move _165) -> [return: bb72, unwind: bb156];
    }

    bb70: {
        StorageLive(_153);
        _153 = ((_120 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_155);
        _155 = _153;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _155) -> [return: bb71, unwind: bb156];
    }

    bb71: {
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb145;
    }

    bb72: {
        _163 = (*_164);
        StorageDead(_165);
        _162 = SpotMarket::is_healthy_utilization(move _163) -> [return: bb73, unwind: bb156];
    }

    bb73: {
        StorageDead(_163);
        _161 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _162) -> [return: bb74, unwind: bb156];
    }

    bb74: {
        StorageDead(_162);
        _166 = discriminant(_161);
        switchInt(move _166) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_170);
        _170 = ((_161 as Continue).0: bool);
        _160 = _170;
        StorageDead(_170);
        switchInt(move _160) -> [0: bb79, otherwise: bb78];
    }

    bb76: {
        StorageLive(_167);
        _167 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_169);
        _169 = _167;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _169) -> [return: bb77, unwind: bb156];
    }

    bb77: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        goto -> bb144;
    }

    bb78: {
        StorageDead(_164);
        StorageDead(_161);
        StorageLive(_171);
        _171 = ();
        _159 = std::result::Result::<(), error::ErrorCode>::Ok(move _171);
        StorageDead(_171);
        goto -> bb87;
    }

    bb79: {
        StorageDead(_164);
        StorageDead(_161);
        StorageLive(_172);
        _172 = error::ErrorCode::SpotMarketInsufficientDeposits;
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _313 = const _;
        _183 = &(*_313);
        _182 = &(*_183);
        _181 = move _182 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_182);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_172;
        _190 = &(*_191);
        _189 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _190) -> [return: bb80, unwind: bb156];
    }

    bb80: {
        StorageDead(_190);
        _188 = [move _189];
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = move _186 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_186);
        _180 = Arguments::<'_>::new_v1(move _181, move _185) -> [return: bb81, unwind: bb156];
    }

    bb81: {
        StorageDead(_185);
        StorageDead(_181);
        _179 = format(move _180) -> [return: bb82, unwind: bb156];
    }

    bb82: {
        StorageDead(_180);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_183);
        _178 = move _179;
        StorageDead(_179);
        _177 = &_178;
        _176 = &(*_177);
        _175 = <String as Deref>::deref(move _176) -> [return: bb83, unwind: bb152];
    }

    bb83: {
        _174 = &(*_175);
        StorageDead(_176);
        _173 = solana_program::log::sol_log(move _174) -> [return: bb84, unwind: bb152];
    }

    bb84: {
        StorageDead(_174);
        drop(_178) -> [return: bb85, unwind: bb156];
    }

    bb85: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_173);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = const "spot market utilization above health threshold";
        _193 = &(*_194);
        _192 = solana_program::log::sol_log(move _193) -> [return: bb86, unwind: bb156];
    }

    bb86: {
        StorageDead(_193);
        StorageDead(_194);
        StorageDead(_192);
        StorageLive(_195);
        _195 = _172;
        _159 = std::result::Result::<(), error::ErrorCode>::Err(move _195);
        StorageDead(_195);
        StorageDead(_172);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_160);
        _158 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _159) -> [return: bb88, unwind: bb156];
    }

    bb88: {
        StorageDead(_159);
        _196 = discriminant(_158);
        switchInt(move _196) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        StorageLive(_200);
        _200 = ((_158 as Continue).0: ());
        _157 = _200;
        StorageDead(_200);
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _324 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _325 = deref_copy ((*_324).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _373 = (((_325.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _208 = &(*_373);
        _207 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _208) -> [return: bb92, unwind: bb156];
    }

    bb90: {
        StorageLive(_197);
        _197 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_199);
        _199 = _197;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _199) -> [return: bb91, unwind: bb156];
    }

    bb91: {
        StorageDead(_199);
        StorageDead(_197);
        goto -> bb144;
    }

    bb92: {
        _206 = &(*_207);
        _205 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _206) -> [return: bb93, unwind: bb156];
    }

    bb93: {
        StorageDead(_208);
        StorageDead(_206);
        _204 = ((*_205).2: u64);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &mut (*_22);
        _210 = <RefMut<'_, InsuranceFundStake> as DerefMut>::deref_mut(move _211) -> [return: bb94, unwind: bb156];
    }

    bb94: {
        _209 = &mut (*_210);
        StorageDead(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &mut (*_34);
        _213 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _214) -> [return: bb95, unwind: bb156];
    }

    bb95: {
        _212 = &mut (*_213);
        StorageDead(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &mut (*_46);
        _216 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _217) -> [return: bb96, unwind: bb156];
    }

    bb96: {
        _215 = &mut (*_216);
        StorageDead(_217);
        StorageLive(_218);
        _218 = _21;
        _203 = controller::insurance::remove_insurance_fund_stake(move _204, move _209, move _212, move _215, move _218) -> [return: bb97, unwind: bb156];
    }

    bb97: {
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_204);
        _202 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _203) -> [return: bb98, unwind: bb156];
    }

    bb98: {
        StorageDead(_203);
        _219 = discriminant(_202);
        switchInt(move _219) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        StorageLive(_223);
        _223 = ((_202 as Continue).0: u64);
        _201 = _223;
        StorageDead(_223);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_202);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _326 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _228 = &((*_326).8: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _227 = &(*_228);
        StorageLive(_229);
        StorageLive(_230);
        _327 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _230 = &((*_327).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _328 = deref_copy (*_230);
        _374 = (((_328.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _229 = &(*_374);
        StorageLive(_231);
        StorageLive(_232);
        _329 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _232 = &((*_329).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _330 = deref_copy (*_232);
        _375 = (((_330.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _231 = &(*_375);
        StorageLive(_233);
        StorageLive(_234);
        _331 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _234 = &((*_331).6: anchor_lang::prelude::AccountInfo<'_>);
        _233 = &(*_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _332 = deref_copy (*_58);
        _376 = (((_332.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _237 = &(*_376);
        _236 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _237) -> [return: bb102, unwind: bb156];
    }

    bb100: {
        StorageLive(_220);
        _220 = ((_202 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_222);
        _222 = _220;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _222) -> [return: bb101, unwind: bb156];
    }

    bb101: {
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_202);
        goto -> bb143;
    }

    bb102: {
        StorageDead(_237);
        _235 = ((*_236).15: u8);
        StorageLive(_238);
        _238 = _201;
        StorageLive(_239);
        StorageLive(_240);
        _240 = &_63;
        _239 = &(*_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &(*_46);
        _244 = <RefMut<'_, SpotMarket> as Deref>::deref(move _245) -> [return: bb103, unwind: bb156];
    }

    bb103: {
        _243 = &(*_244);
        StorageDead(_245);
        _242 = SpotMarket::has_transfer_hook(move _243) -> [return: bb104, unwind: bb156];
    }

    bb104: {
        switchInt(move _242) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        StorageDead(_244);
        StorageDead(_243);
        StorageLive(_246);
        _246 = &mut (*_59);
        _241 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _246);
        StorageDead(_246);
        goto -> bb107;
    }

    bb106: {
        StorageDead(_244);
        StorageDead(_243);
        _241 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb107;
    }

    bb107: {
        StorageDead(_242);
        _226 = send_from_program_vault(move _227, move _229, move _231, move _233, move _235, move _238, move _239, move _241) -> [return: bb108, unwind: bb156];
    }

    bb108: {
        StorageDead(_241);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_227);
        _225 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _226) -> [return: bb109, unwind: bb156];
    }

    bb109: {
        StorageDead(_226);
        _247 = discriminant(_225);
        switchInt(move _247) -> [0: bb110, 1: bb111, otherwise: bb4];
    }

    bb110: {
        StorageLive(_251);
        _251 = ((_225 as Continue).0: ());
        _224 = _251;
        StorageDead(_251);
        _353 = discriminant(_225);
        StorageDead(_240);
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _333 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _334 = deref_copy ((*_333).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _377 = (((_334.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _255 = &mut (*_377);
        _254 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _255) -> [return: bb113, unwind: bb156];
    }

    bb111: {
        StorageLive(_248);
        _248 = move ((_225 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_250);
        _250 = move _248;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _250) -> [return: bb112, unwind: bb161];
    }

    bb112: {
        StorageDead(_250);
        StorageDead(_248);
        _359 = discriminant(_225);
        StorageDead(_240);
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_224);
        goto -> bb143;
    }

    bb113: {
        StorageDead(_255);
        _253 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _254) -> [return: bb114, unwind: bb156];
    }

    bb114: {
        StorageDead(_254);
        _256 = discriminant(_253);
        switchInt(move _256) -> [0: bb115, 1: bb116, otherwise: bb4];
    }

    bb115: {
        StorageLive(_260);
        _260 = ((_253 as Continue).0: ());
        _252 = _260;
        StorageDead(_260);
        _355 = discriminant(_253);
        StorageDead(_253);
        StorageDead(_252);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _335 = deref_copy (_1.1: &mut instructions::if_staker::RemoveInsuranceFundStake<'_>);
        _336 = deref_copy ((*_335).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _378 = (((_336.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _269 = &(*_378);
        _268 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _269) -> [return: bb118, unwind: bb156];
    }

    bb116: {
        StorageLive(_257);
        _257 = move ((_253 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_259);
        _259 = move _257;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _259) -> [return: bb117, unwind: bb160];
    }

    bb117: {
        StorageDead(_259);
        StorageDead(_257);
        _357 = discriminant(_253);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb143;
    }

    bb118: {
        _267 = &(*_268);
        _266 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _267) -> [return: bb119, unwind: bb156];
    }

    bb119: {
        StorageDead(_269);
        StorageDead(_267);
        _265 = ((*_266).2: u64);
        _264 = Gt(move _265, const 0_u64);
        switchInt(move _264) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_265);
        StorageLive(_270);
        _270 = ();
        _263 = std::result::Result::<(), error::ErrorCode>::Ok(move _270);
        StorageDead(_270);
        goto -> bb129;
    }

    bb121: {
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_265);
        StorageLive(_271);
        _271 = error::ErrorCode::InvalidIFDetected;
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _312 = const _;
        _282 = &(*_312);
        _281 = &(*_282);
        _280 = move _281 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_281);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = &_271;
        _289 = &(*_290);
        _288 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _289) -> [return: bb122, unwind: bb156];
    }

    bb122: {
        StorageDead(_289);
        _287 = [move _288];
        StorageDead(_288);
        _286 = &_287;
        _285 = &(*_286);
        _284 = move _285 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_285);
        _279 = Arguments::<'_>::new_v1(move _280, move _284) -> [return: bb123, unwind: bb156];
    }

    bb123: {
        StorageDead(_284);
        StorageDead(_280);
        _278 = format(move _279) -> [return: bb124, unwind: bb156];
    }

    bb124: {
        StorageDead(_279);
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_282);
        _277 = move _278;
        StorageDead(_278);
        _276 = &_277;
        _275 = &(*_276);
        _274 = <String as Deref>::deref(move _275) -> [return: bb125, unwind: bb151];
    }

    bb125: {
        _273 = &(*_274);
        StorageDead(_275);
        _272 = solana_program::log::sol_log(move _273) -> [return: bb126, unwind: bb151];
    }

    bb126: {
        StorageDead(_273);
        drop(_277) -> [return: bb127, unwind: bb156];
    }

    bb127: {
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_272);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = const "insurance_fund_vault.amount must remain > 0";
        _292 = &(*_293);
        _291 = solana_program::log::sol_log(move _292) -> [return: bb128, unwind: bb156];
    }

    bb128: {
        StorageDead(_292);
        StorageDead(_293);
        StorageDead(_291);
        StorageLive(_294);
        _294 = _271;
        _263 = std::result::Result::<(), error::ErrorCode>::Err(move _294);
        StorageDead(_294);
        StorageDead(_271);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_264);
        _262 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _263) -> [return: bb130, unwind: bb156];
    }

    bb130: {
        StorageDead(_263);
        _295 = discriminant(_262);
        switchInt(move _295) -> [0: bb131, 1: bb132, otherwise: bb4];
    }

    bb131: {
        StorageLive(_299);
        _299 = ((_262 as Continue).0: ());
        _261 = _299;
        StorageDead(_299);
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &(*_46);
        _304 = <RefMut<'_, SpotMarket> as Deref>::deref(move _305) -> [return: bb134, unwind: bb156];
    }

    bb132: {
        StorageLive(_296);
        _296 = ((_262 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_298);
        _298 = _296;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _298) -> [return: bb133, unwind: bb156];
    }

    bb133: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_262);
        StorageDead(_261);
        goto -> bb143;
    }

    bb134: {
        _303 = &(*_304);
        StorageDead(_305);
        _302 = validate_spot_balances(move _303) -> [return: bb135, unwind: bb156];
    }

    bb135: {
        StorageDead(_303);
        _301 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _302) -> [return: bb136, unwind: bb156];
    }

    bb136: {
        StorageDead(_302);
        _306 = discriminant(_301);
        switchInt(move _306) -> [0: bb137, 1: bb138, otherwise: bb4];
    }

    bb137: {
        StorageLive(_310);
        _310 = ((_301 as Continue).0: i64);
        _300 = _310;
        StorageDead(_310);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_300);
        StorageLive(_311);
        _311 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _311);
        StorageDead(_311);
        StorageDead(_201);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        drop(_47) -> [return: bb140, unwind: bb157];
    }

    bb138: {
        StorageLive(_307);
        _307 = ((_301 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_309);
        _309 = _307;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _309) -> [return: bb139, unwind: bb156];
    }

    bb139: {
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_300);
        goto -> bb143;
    }

    bb140: {
        StorageDead(_47);
        StorageDead(_46);
        drop(_35) -> [return: bb141, unwind: bb158];
    }

    bb141: {
        StorageDead(_35);
        StorageDead(_34);
        drop(_23) -> [return: bb142, unwind: bb159];
    }

    bb142: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_13);
        goto -> bb150;
    }

    bb143: {
        StorageDead(_201);
        goto -> bb145;
    }

    bb144: {
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        drop(_47) -> [return: bb146, unwind: bb157];
    }

    bb146: {
        StorageDead(_47);
        StorageDead(_46);
        drop(_35) -> [return: bb147, unwind: bb158];
    }

    bb147: {
        StorageDead(_35);
        StorageDead(_34);
        drop(_23) -> [return: bb148, unwind: bb159];
    }

    bb148: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_13);
        goto -> bb150;
    }

    bb150: {
        return;
    }

    bb151 (cleanup): {
        drop(_277) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_178) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_134) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_106) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_87) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_47) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_35) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_23) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        resume;
    }

    bb160 (cleanup): {
        _365 = discriminant(_253);
        goto -> bb156;
    }

    bb161 (cleanup): {
        _366 = discriminant(_225);
        goto -> bb156;
    }

    bb162 (cleanup): {
        _367 = discriminant(_48);
        goto -> bb157;
    }

    bb163 (cleanup): {
        _368 = discriminant(_36);
        goto -> bb158;
    }

    bb164 (cleanup): {
        _369 = discriminant(_24);
        goto -> bb159;
    }

    bb165 (cleanup): {
        _370 = discriminant(_14);
        goto -> bb159;
    }

    bb166 (cleanup): {
        _371 = discriminant(_4);
        goto -> bb159;
    }
}
