// MIR for `is_auction_complete` after PreCodegen

fn is_auction_complete(_1: u64, _2: u8, _3: u64) -> std::result::Result<bool, error::ErrorCode> {
    debug order_slot => _1;
    debug auction_duration => _2;
    debug slot => _3;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u8;
    let mut _7: !;
    let _8: u64;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _10: std::result::Result<u64, error::ErrorCode>;
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: u64;
    let mut _18: bool;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _22: std::result::Result<u64, error::ErrorCode>;
    let mut _23: u8;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug slots_elapsed => _8;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: u64;
        scope 6 {
            debug residual => _25;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _28;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Eq(move _6, const 0_u8);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb14;
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _3;
        StorageLive(_12);
        _12 = _1;
        _10 = <u64 as SafeMath>::safe_sub(move _11, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: u64);
        _8 = _17;
        StorageDead(_17);
        StorageDead(_9);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _8;
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _2;
        _22 = <u8 as Cast>::cast::<u64>(move _23) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb14;
    }

    bb9: {
        StorageDead(_23);
        _21 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_21 as Continue).0: u64);
        _20 = _28;
        StorageDead(_28);
        _18 = Gt(move _19, move _20);
        StorageDead(_20);
        StorageDead(_19);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _18);
        StorageDead(_18);
        StorageDead(_8);
        StorageDead(_21);
        goto -> bb14;
    }

    bb12: {
        StorageLive(_25);
        _25 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_8);
        StorageDead(_21);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}
