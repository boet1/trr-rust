digraph Mir_0_3877 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PerpMarketMap::&lt;'a&gt;::load(_1: &amp;ReErased std::collections::BTreeSet&lt;u16, std::alloc::Global&gt;, _2: &amp;ReErased mut std::iter::Peekable&lt;std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;&gt;) -&gt; std::result::Result&lt;state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, error::ErrorCode&gt;<br align="left"/>let mut _3: state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _4: std::collections::BTreeMap&lt;u16, anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;, std::alloc::Global&gt;;<br align="left"/>let _5: [u8; 8_usize];<br align="left"/>let _6: ();<br align="left"/>let mut _7: ();<br align="left"/>let mut _8: std::option::Option&lt;&amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _9: &amp;ReErased mut std::iter::Peekable&lt;std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;&gt;;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: &amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _12: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;&gt;;<br align="left"/>let mut _14: std::result::Result&lt;std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _15: std::result::Result&lt;std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _16: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _17: std::result::Result&lt;std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _18: error::ErrorCode;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _23: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let _24: usize;<br align="left"/>let _25: ();<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: usize;<br align="left"/>let mut _28: &amp;ReErased [u8];<br align="left"/>let _29: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _30: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _31: usize;<br align="left"/>let mut _32: !;<br align="left"/>let _33: &amp;ReErased [u8; 8_usize];<br align="left"/>let _34: usize;<br align="left"/>let _35: &amp;ReErased [u8];<br align="left"/>let _36: &amp;ReErased [u8];<br align="left"/>let mut _37: &amp;ReErased [u8];<br align="left"/>let _38: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _39: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _40: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _41: usize;<br align="left"/>let mut _42: usize;<br align="left"/>let mut _43: usize;<br align="left"/>let mut _44: (usize, bool);<br align="left"/>let mut _45: &amp;ReErased [u8];<br align="left"/>let _46: ();<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: &amp;ReErased &amp;ReErased [u8; 8_usize];<br align="left"/>let mut _49: &amp;ReErased &amp;ReErased [u8; 8_usize];<br align="left"/>let _50: &amp;ReErased [u8; 8_usize];<br align="left"/>let mut _51: !;<br align="left"/>let _52: u16;<br align="left"/>let mut _53: [u8; 2_usize];<br align="left"/>let mut _54: &amp;ReErased [u8; 2_usize];<br align="left"/>let _55: usize;<br align="left"/>let _56: &amp;ReErased [u8];<br align="left"/>let _57: &amp;ReErased [u8];<br align="left"/>let mut _58: &amp;ReErased [u8];<br align="left"/>let _59: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _60: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _61: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _62: usize;<br align="left"/>let mut _63: usize;<br align="left"/>let mut _64: usize;<br align="left"/>let mut _65: (usize, bool);<br align="left"/>let mut _66: &amp;ReErased [u8];<br align="left"/>let _67: ();<br align="left"/>let mut _68: bool;<br align="left"/>let mut _69: &amp;ReErased std::collections::BTreeMap&lt;u16, anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _70: &amp;ReErased u16;<br align="left"/>let _71: &amp;ReErased u16;<br align="left"/>let mut _72: !;<br align="left"/>let _73: ();<br align="left"/>let mut _74: &amp;ReErased str;<br align="left"/>let _75: &amp;ReErased str;<br align="left"/>let mut _76: &amp;ReErased std::string::String;<br align="left"/>let _77: &amp;ReErased std::string::String;<br align="left"/>let _78: std::string::String;<br align="left"/>let _79: std::string::String;<br align="left"/>let mut _80: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _81: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _82: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _83: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _84: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _85: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _86: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _87: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _88: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _89: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _90: &amp;ReErased u16;<br align="left"/>let _91: &amp;ReErased u16;<br align="left"/>let mut _92: error::ErrorCode;<br align="left"/>let _93: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _94: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _95: std::result::Result&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _96: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _97: &amp;ReErased mut std::iter::Peekable&lt;std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;&gt;;<br align="left"/>let mut _98: isize;<br align="left"/>let _99: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _100: !;<br align="left"/>let mut _101: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _102: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _103: bool;<br align="left"/>let _104: ();<br align="left"/>let mut _105: bool;<br align="left"/>let mut _106: &amp;ReErased std::collections::BTreeSet&lt;u16, std::alloc::Global&gt;;<br align="left"/>let mut _107: &amp;ReErased u16;<br align="left"/>let _108: &amp;ReErased u16;<br align="left"/>let mut _109: bool;<br align="left"/>let mut _110: !;<br align="left"/>let _111: ();<br align="left"/>let mut _112: &amp;ReErased str;<br align="left"/>let _113: &amp;ReErased str;<br align="left"/>let mut _114: &amp;ReErased std::string::String;<br align="left"/>let _115: &amp;ReErased std::string::String;<br align="left"/>let _116: std::string::String;<br align="left"/>let _117: std::string::String;<br align="left"/>let mut _118: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _119: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _120: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _121: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _122: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _123: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _124: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _125: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _126: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _127: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _128: &amp;ReErased u16;<br align="left"/>let _129: &amp;ReErased u16;<br align="left"/>let mut _130: error::ErrorCode;<br align="left"/>let _131: anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _132: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _133: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _134: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _135: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _136: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _137: error::ErrorCode;<br align="left"/>let mut _138: isize;<br align="left"/>let _139: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _140: !;<br align="left"/>let mut _141: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _142: anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _143: std::option::Option&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _144: &amp;ReErased mut std::collections::BTreeMap&lt;u16, anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _145: u16;<br align="left"/>let mut _146: anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _147: !;<br align="left"/>let _148: ();<br align="left"/>let mut _149: !;<br align="left"/>let mut _150: state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _151: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _152: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _153: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _154: &amp;ReErased mut [u8];<br align="left"/>let mut _155: &amp;ReErased mut [u8];<br align="left"/>let mut _156: &amp;ReErased mut [u8];<br align="left"/>let mut _157: isize;<br align="left"/>let mut _158: isize;<br align="left"/>let mut _159: isize;<br align="left"/>let mut _160: isize;<br align="left"/>let mut _161: isize;<br align="left"/>debug writable_markets =&gt; _1;<br align="left"/>debug account_info_iter =&gt; _2;<br align="left"/>debug perp_market_map =&gt; _3;<br align="left"/>debug market_discriminator =&gt; _5;<br align="left"/>debug account_info =&gt; _11;<br align="left"/>debug data =&gt; _12;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>debug expected_data_len =&gt; _24;<br align="left"/>debug account_discriminator =&gt; _33;<br align="left"/>debug offset =&gt; _34;<br align="left"/>debug slice =&gt; _35;<br align="left"/>debug market_index =&gt; _52;<br align="left"/>debug offset =&gt; _55;<br align="left"/>debug slice =&gt; _56;<br align="left"/>debug res =&gt; _79;<br align="left"/>debug account_info =&gt; _93;<br align="left"/>debug residual =&gt; _99;<br align="left"/>debug val =&gt; _102;<br align="left"/>debug is_writable =&gt; _103;<br align="left"/>debug res =&gt; _117;<br align="left"/>debug account_loader =&gt; _131;<br align="left"/>debug residual =&gt; _139;<br align="left"/>debug val =&gt; _142;<br align="left"/>>;
    bb0__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/></td></tr><tr><td align="left">_4 = BTreeMap::&lt;u16, anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt;&gt;::new()</td></tr></table>>];
    bb1__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = PerpMarketMap::&lt;'_&gt;(move _4)<br/>StorageDead(_4)<br/>StorageLive(_5)<br/></td></tr><tr><td align="left">_5 = &lt;PerpMarket as anchor_lang::Discriminator&gt;::discriminator()</td></tr></table>>];
    bb2__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;mut (*_2)<br/></td></tr><tr><td align="left">_8 = Peekable::&lt;std::slice::Iter&lt;'_, anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt;::peek(move _9)</td></tr></table>>];
    bb4__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_10 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb5__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_8 as Some).0: &amp;&amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_153 = deref_copy (*_11)<br/>_16 = &amp;(*_153)<br/></td></tr><tr><td align="left">_15 = anchor_lang::prelude::AccountInfo::&lt;'_&gt;::try_borrow_data(move _16)</td></tr></table>>];
    bb6__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = error::ErrorCode::CouldNotLoadMarketData<br/>_17 = std::result::Result::&lt;Ref&lt;'_, &amp;mut [u8]&gt;, error::ErrorCode&gt;::Err(move _18)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_14 = std::result::Result::&lt;Ref&lt;'_, &amp;mut [u8]&gt;, anchor_lang::prelude::ProgramError&gt;::or::&lt;error::ErrorCode&gt;(move _15, move _17)</td></tr></table>>];
    bb7__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;Ref&lt;'_, &amp;mut [u8]&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb8__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_19 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb9__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = move ((_13 as Continue).0: std::cell::Ref&lt;'_, &amp;mut [u8]&gt;)<br/>_12 = move _23<br/>StorageDead(_23)<br/>_159 = discriminant(_13)<br/>StorageDead(_13)<br/>StorageLive(_24)<br/>_24 = const _<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = &amp;_12<br/></td></tr><tr><td align="left">_29 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _30)</td></tr></table>>];
    bb10__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb11__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_22)<br/>_22 = _20<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;PerpMarketMap&lt;'_&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb12__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>_157 = discriminant(_13)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_154 = deref_copy (*_29)<br/>_28 = &amp;(*_154)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_27 = core::slice::&lt;impl [u8]&gt;::len(move _28)</td></tr></table>>];
    bb14__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageLive(_31)<br/>_31 = _24<br/>_26 = Lt(move _27, move _31)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb15__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>_6 = const ()<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>_25 = const ()<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = const 0_usize<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = &amp;_12<br/></td></tr><tr><td align="left">_38 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _39)</td></tr></table>>];
    bb17__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_155 = deref_copy (*_38)<br/>_37 = &amp;(*_155)<br/>StorageDead(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = _34<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = _34<br/>_44 = CheckedAdd(_43, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_44.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _43, const 8_usize)</td></tr></table>>];
    bb18__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_42 = move (_44.0: usize)<br/>StorageDead(_43)<br/>_40 = std::ops::Range::&lt;usize&gt; { start: move _41, end: move _42 }<br/>StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">_36 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _37, move _40)</td></tr></table>>];
    bb19__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_37)<br/>_35 = &amp;(*_36)<br/>StorageLive(_45)<br/>_45 = &amp;(*_35)<br/></td></tr><tr><td align="left">_33 = PerpMarketMap::&lt;'a&gt;::load::as_array::&lt;u8&gt;(move _45)</td></tr></table>>];
    bb20__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = &amp;_33<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = &amp;_5<br/>_49 = &amp;_50<br/></td></tr><tr><td align="left">_47 = &lt;&amp;[u8; 8] as PartialEq&gt;::ne(move _48, move _49)</td></tr></table>>];
    bb21__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb22__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>_6 = const ()<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>_46 = const ()<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = const 1160_usize<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_60 = &amp;_12<br/></td></tr><tr><td align="left">_59 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _60)</td></tr></table>>];
    bb24__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_156 = deref_copy (*_59)<br/>_58 = &amp;(*_156)<br/>StorageDead(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>_62 = _55<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = _55<br/>_65 = CheckedAdd(_64, const 2_usize)<br/></td></tr><tr><td align="left">assert(!move (_65.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _64, const 2_usize)</td></tr></table>>];
    bb25__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_63 = move (_65.0: usize)<br/>StorageDead(_64)<br/>_61 = std::ops::Range::&lt;usize&gt; { start: move _62, end: move _63 }<br/>StorageDead(_63)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">_57 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _58, move _61)</td></tr></table>>];
    bb26__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_58)<br/>_56 = &amp;(*_57)<br/>StorageLive(_66)<br/>_66 = &amp;(*_56)<br/></td></tr><tr><td align="left">_54 = PerpMarketMap::&lt;'a&gt;::load::as_array::&lt;u8&gt;(move _66)</td></tr></table>>];
    bb27__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>StorageDead(_59)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>_53 = (*_54)<br/></td></tr><tr><td align="left">_52 = core::num::&lt;impl u16&gt;::from_le_bytes(move _53)</td></tr></table>>];
    bb28__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_54)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = &amp;(_3.0: std::collections::BTreeMap&lt;u16, anchor_lang::prelude::AccountLoader&lt;'_, state::perp_market::PerpMarket&gt;&gt;)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;_52<br/>_70 = &amp;(*_71)<br/></td></tr><tr><td align="left">_68 = BTreeMap::&lt;u16, anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt;&gt;::contains_key::&lt;u16&gt;(move _69, move _70)</td></tr></table>>];
    bb29__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left">switchInt(move _68)</td></tr></table>>];
    bb30__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_151 = const _<br/>_83 = &amp;(*_151)<br/>_82 = &amp;(*_83)<br/>_81 = move _82 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_82)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = &amp;_52<br/>_90 = &amp;(*_91)<br/></td></tr><tr><td align="left">_89 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _90)</td></tr></table>>];
    bb31__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>_88 = [move _89]<br/>StorageDead(_89)<br/>_87 = &amp;_88<br/>_86 = &amp;(*_87)<br/>_85 = move _86 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_86)<br/></td></tr><tr><td align="left">_80 = Arguments::&lt;'_&gt;::new_v1(move _81, move _85)</td></tr></table>>];
    bb32__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">_79 = format(move _80)</td></tr></table>>];
    bb33__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_91)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>StorageDead(_83)<br/>_78 = move _79<br/>StorageDead(_79)<br/>_77 = &amp;_78<br/>_76 = &amp;(*_77)<br/></td></tr><tr><td align="left">_75 = &lt;String as Deref&gt;::deref(move _76)</td></tr></table>>];
    bb34__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_74 = &amp;(*_75)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">_73 = solana_program::log::sol_log(move _74)</td></tr></table>>];
    bb35__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/></td></tr><tr><td align="left">drop(_78)</td></tr></table>>];
    bb36__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_75)<br/>StorageDead(_73)<br/>StorageLive(_92)<br/>_92 = error::ErrorCode::InvalidMarketAccount<br/>_0 = std::result::Result::&lt;PerpMarketMap&lt;'_&gt;, error::ErrorCode&gt;::Err(move _92)<br/>StorageDead(_92)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/>_67 = const ()<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>_97 = &amp;mut (*_2)<br/></td></tr><tr><td align="left">_96 = &lt;Peekable&lt;std::slice::Iter&lt;'_, anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt; as Iterator&gt;::next(move _97)</td></tr></table>>];
    bb38__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/></td></tr><tr><td align="left">_95 = &lt;Option&lt;&amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt; as SafeUnwrap&gt;::safe_unwrap(move _96)</td></tr></table>>];
    bb39__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/></td></tr><tr><td align="left">_94 = &lt;std::result::Result&lt;&amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _95)</td></tr></table>>];
    bb40__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>_98 = discriminant(_94)<br/></td></tr><tr><td align="left">switchInt(move _98)</td></tr></table>>];
    bb41__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageLive(_102)<br/>_102 = ((_94 as Continue).0: &amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_93 = _102<br/>StorageDead(_102)<br/>StorageDead(_94)<br/>StorageLive(_103)<br/>_103 = ((*_93).6: bool)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>_106 = &amp;(*_1)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>_108 = &amp;_52<br/>_107 = &amp;(*_108)<br/></td></tr><tr><td align="left">_105 = BTreeSet::&lt;u16&gt;::contains::&lt;u16&gt;(move _106, move _107)</td></tr></table>>];
    bb42__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_99)<br/>_99 = ((_94 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_101)<br/>_101 = _99<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;PerpMarketMap&lt;'_&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _101)</td></tr></table>>];
    bb43__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_101)<br/>StorageDead(_99)<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left">switchInt(move _105)</td></tr></table>>];
    bb45__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_107)<br/>StorageDead(_106)<br/>StorageLive(_109)<br/>_109 = _103<br/></td></tr><tr><td align="left">switchInt(move _109)</td></tr></table>>];
    bb46__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageLive(_111)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>_152 = const _<br/>_121 = &amp;(*_152)<br/>_120 = &amp;(*_121)<br/>_119 = move _120 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_120)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>_129 = &amp;_52<br/>_128 = &amp;(*_129)<br/></td></tr><tr><td align="left">_127 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _128)</td></tr></table>>];
    bb47__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>_126 = [move _127]<br/>StorageDead(_127)<br/>_125 = &amp;_126<br/>_124 = &amp;(*_125)<br/>_123 = move _124 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_124)<br/></td></tr><tr><td align="left">_118 = Arguments::&lt;'_&gt;::new_v1(move _119, move _123)</td></tr></table>>];
    bb48__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">_117 = format(move _118)</td></tr></table>>];
    bb49__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>StorageDead(_129)<br/>StorageDead(_126)<br/>StorageDead(_125)<br/>StorageDead(_121)<br/>_116 = move _117<br/>StorageDead(_117)<br/>_115 = &amp;_116<br/>_114 = &amp;(*_115)<br/></td></tr><tr><td align="left">_113 = &lt;String as Deref&gt;::deref(move _114)</td></tr></table>>];
    bb50__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">_112 = &amp;(*_113)<br/>StorageDead(_114)<br/></td></tr><tr><td align="left">_111 = solana_program::log::sol_log(move _112)</td></tr></table>>];
    bb51__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/></td></tr><tr><td align="left">drop(_116)</td></tr></table>>];
    bb52__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_116)<br/>StorageDead(_115)<br/>StorageDead(_113)<br/>StorageDead(_111)<br/>StorageLive(_130)<br/>_130 = error::ErrorCode::MarketWrongMutability<br/>_0 = std::result::Result::&lt;PerpMarketMap&lt;'_&gt;, error::ErrorCode&gt;::Err(move _130)<br/>StorageDead(_130)<br/>StorageDead(_109)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_107)<br/>StorageDead(_106)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">_104 = const ()<br/>StorageDead(_109)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>StorageLive(_134)<br/>StorageLive(_135)<br/>_135 = &amp;(*_93)<br/></td></tr><tr><td align="left">_134 = anchor_lang::prelude::AccountLoader::&lt;'_, PerpMarket&gt;::try_from(move _135)</td></tr></table>>];
    bb55__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>_137 = error::ErrorCode::InvalidMarketAccount<br/>_136 = std::result::Result::&lt;anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt;, error::ErrorCode&gt;::Err(move _137)<br/>StorageDead(_137)<br/></td></tr><tr><td align="left">_133 = std::result::Result::&lt;anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt;, anchor_lang::error::Error&gt;::or::&lt;error::ErrorCode&gt;(move _134, move _136)</td></tr></table>>];
    bb56__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/>StorageDead(_134)<br/></td></tr><tr><td align="left">_132 = &lt;std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _133)</td></tr></table>>];
    bb57__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_133)<br/>_138 = discriminant(_132)<br/></td></tr><tr><td align="left">switchInt(move _138)</td></tr></table>>];
    bb58__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageLive(_142)<br/>_142 = move ((_132 as Continue).0: anchor_lang::prelude::AccountLoader&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_131 = move _142<br/>StorageDead(_142)<br/>StorageDead(_132)<br/>StorageLive(_143)<br/>StorageLive(_144)<br/>_144 = &amp;mut (_3.0: std::collections::BTreeMap&lt;u16, anchor_lang::prelude::AccountLoader&lt;'_, state::perp_market::PerpMarket&gt;&gt;)<br/>StorageLive(_145)<br/>_145 = _52<br/>StorageLive(_146)<br/>_146 = move _131<br/></td></tr><tr><td align="left">_143 = BTreeMap::&lt;u16, anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt;&gt;::insert(move _144, move _145, move _146)</td></tr></table>>];
    bb59__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageLive(_139)<br/>_139 = ((_132 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_141)<br/>_141 = _139<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;PerpMarketMap&lt;'_&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _141)</td></tr></table>>];
    bb60__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_141)<br/>StorageDead(_139)<br/>StorageDead(_132)<br/>StorageDead(_131)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_146)<br/>StorageDead(_145)<br/>StorageDead(_144)<br/>StorageDead(_143)<br/>_7 = const ()<br/>StorageDead(_131)<br/>StorageDead(_103)<br/>StorageDead(_93)<br/>StorageDead(_52)<br/>StorageDead(_33)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb62__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_148)<br/>_6 = const ()<br/>StorageDead(_148)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/></td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb65__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_6)<br/>StorageLive(_150)<br/>_150 = move _3<br/>_0 = std::result::Result::&lt;PerpMarketMap&lt;'_&gt;, error::ErrorCode&gt;::Ok(move _150)<br/>StorageDead(_150)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb68__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb69__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_33)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb70__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb71__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb72__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left">return</td></tr></table>>];
    bb73__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">73 (cleanup)</td></tr><tr><td align="left">drop(_116)</td></tr></table>>];
    bb74__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">74 (cleanup)</td></tr><tr><td align="left">drop(_78)</td></tr></table>>];
    bb75__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">75 (cleanup)</td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb76__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">76 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb77__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">77 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb78__0_3877 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">78 (cleanup)</td></tr><tr><td align="left" balign="left">_161 = discriminant(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_3877 -> bb1__0_3877 [label="return"];
    bb1__0_3877 -> bb2__0_3877 [label="return"];
    bb1__0_3877 -> bb76__0_3877 [label="unwind"];
    bb2__0_3877 -> bb3__0_3877 [label=""];
    bb3__0_3877 -> bb4__0_3877 [label="return"];
    bb3__0_3877 -> bb76__0_3877 [label="unwind"];
    bb4__0_3877 -> bb5__0_3877 [label="1"];
    bb4__0_3877 -> bb63__0_3877 [label="otherwise"];
    bb5__0_3877 -> bb6__0_3877 [label="return"];
    bb5__0_3877 -> bb76__0_3877 [label="unwind"];
    bb6__0_3877 -> bb7__0_3877 [label="return"];
    bb6__0_3877 -> bb76__0_3877 [label="unwind"];
    bb7__0_3877 -> bb8__0_3877 [label="return"];
    bb7__0_3877 -> bb76__0_3877 [label="unwind"];
    bb8__0_3877 -> bb9__0_3877 [label="0"];
    bb8__0_3877 -> bb11__0_3877 [label="1"];
    bb8__0_3877 -> bb10__0_3877 [label="otherwise"];
    bb9__0_3877 -> bb13__0_3877 [label="return"];
    bb9__0_3877 -> bb75__0_3877 [label="unwind"];
    bb11__0_3877 -> bb12__0_3877 [label="return"];
    bb11__0_3877 -> bb78__0_3877 [label="unwind"];
    bb12__0_3877 -> bb70__0_3877 [label=""];
    bb13__0_3877 -> bb14__0_3877 [label="return"];
    bb13__0_3877 -> bb75__0_3877 [label="unwind"];
    bb14__0_3877 -> bb16__0_3877 [label="0"];
    bb14__0_3877 -> bb15__0_3877 [label="otherwise"];
    bb15__0_3877 -> bb64__0_3877 [label=""];
    bb16__0_3877 -> bb17__0_3877 [label="return"];
    bb16__0_3877 -> bb75__0_3877 [label="unwind"];
    bb17__0_3877 -> bb18__0_3877 [label="success"];
    bb17__0_3877 -> bb75__0_3877 [label="unwind"];
    bb18__0_3877 -> bb19__0_3877 [label="return"];
    bb18__0_3877 -> bb75__0_3877 [label="unwind"];
    bb19__0_3877 -> bb20__0_3877 [label="return"];
    bb19__0_3877 -> bb75__0_3877 [label="unwind"];
    bb20__0_3877 -> bb21__0_3877 [label="return"];
    bb20__0_3877 -> bb75__0_3877 [label="unwind"];
    bb21__0_3877 -> bb23__0_3877 [label="0"];
    bb21__0_3877 -> bb22__0_3877 [label="otherwise"];
    bb22__0_3877 -> bb64__0_3877 [label=""];
    bb23__0_3877 -> bb24__0_3877 [label="return"];
    bb23__0_3877 -> bb75__0_3877 [label="unwind"];
    bb24__0_3877 -> bb25__0_3877 [label="success"];
    bb24__0_3877 -> bb75__0_3877 [label="unwind"];
    bb25__0_3877 -> bb26__0_3877 [label="return"];
    bb25__0_3877 -> bb75__0_3877 [label="unwind"];
    bb26__0_3877 -> bb27__0_3877 [label="return"];
    bb26__0_3877 -> bb75__0_3877 [label="unwind"];
    bb27__0_3877 -> bb28__0_3877 [label="return"];
    bb27__0_3877 -> bb75__0_3877 [label="unwind"];
    bb28__0_3877 -> bb29__0_3877 [label="return"];
    bb28__0_3877 -> bb75__0_3877 [label="unwind"];
    bb29__0_3877 -> bb37__0_3877 [label="0"];
    bb29__0_3877 -> bb30__0_3877 [label="otherwise"];
    bb30__0_3877 -> bb31__0_3877 [label="return"];
    bb30__0_3877 -> bb75__0_3877 [label="unwind"];
    bb31__0_3877 -> bb32__0_3877 [label="return"];
    bb31__0_3877 -> bb75__0_3877 [label="unwind"];
    bb32__0_3877 -> bb33__0_3877 [label="return"];
    bb32__0_3877 -> bb75__0_3877 [label="unwind"];
    bb33__0_3877 -> bb34__0_3877 [label="return"];
    bb33__0_3877 -> bb74__0_3877 [label="unwind"];
    bb34__0_3877 -> bb35__0_3877 [label="return"];
    bb34__0_3877 -> bb74__0_3877 [label="unwind"];
    bb35__0_3877 -> bb36__0_3877 [label="return"];
    bb35__0_3877 -> bb75__0_3877 [label="unwind"];
    bb36__0_3877 -> bb69__0_3877 [label=""];
    bb37__0_3877 -> bb38__0_3877 [label="return"];
    bb37__0_3877 -> bb75__0_3877 [label="unwind"];
    bb38__0_3877 -> bb39__0_3877 [label="return"];
    bb38__0_3877 -> bb75__0_3877 [label="unwind"];
    bb39__0_3877 -> bb40__0_3877 [label="return"];
    bb39__0_3877 -> bb75__0_3877 [label="unwind"];
    bb40__0_3877 -> bb41__0_3877 [label="0"];
    bb40__0_3877 -> bb42__0_3877 [label="1"];
    bb40__0_3877 -> bb10__0_3877 [label="otherwise"];
    bb41__0_3877 -> bb44__0_3877 [label="return"];
    bb41__0_3877 -> bb75__0_3877 [label="unwind"];
    bb42__0_3877 -> bb43__0_3877 [label="return"];
    bb42__0_3877 -> bb75__0_3877 [label="unwind"];
    bb43__0_3877 -> bb68__0_3877 [label=""];
    bb44__0_3877 -> bb53__0_3877 [label="0"];
    bb44__0_3877 -> bb45__0_3877 [label="otherwise"];
    bb45__0_3877 -> bb46__0_3877 [label="0"];
    bb45__0_3877 -> bb54__0_3877 [label="otherwise"];
    bb46__0_3877 -> bb47__0_3877 [label="return"];
    bb46__0_3877 -> bb75__0_3877 [label="unwind"];
    bb47__0_3877 -> bb48__0_3877 [label="return"];
    bb47__0_3877 -> bb75__0_3877 [label="unwind"];
    bb48__0_3877 -> bb49__0_3877 [label="return"];
    bb48__0_3877 -> bb75__0_3877 [label="unwind"];
    bb49__0_3877 -> bb50__0_3877 [label="return"];
    bb49__0_3877 -> bb73__0_3877 [label="unwind"];
    bb50__0_3877 -> bb51__0_3877 [label="return"];
    bb50__0_3877 -> bb73__0_3877 [label="unwind"];
    bb51__0_3877 -> bb52__0_3877 [label="return"];
    bb51__0_3877 -> bb75__0_3877 [label="unwind"];
    bb52__0_3877 -> bb67__0_3877 [label=""];
    bb53__0_3877 -> bb54__0_3877 [label=""];
    bb54__0_3877 -> bb55__0_3877 [label="return"];
    bb54__0_3877 -> bb75__0_3877 [label="unwind"];
    bb55__0_3877 -> bb56__0_3877 [label="return"];
    bb55__0_3877 -> bb75__0_3877 [label="unwind"];
    bb56__0_3877 -> bb57__0_3877 [label="return"];
    bb56__0_3877 -> bb75__0_3877 [label="unwind"];
    bb57__0_3877 -> bb58__0_3877 [label="0"];
    bb57__0_3877 -> bb59__0_3877 [label="1"];
    bb57__0_3877 -> bb10__0_3877 [label="otherwise"];
    bb58__0_3877 -> bb61__0_3877 [label="return"];
    bb58__0_3877 -> bb75__0_3877 [label="unwind"];
    bb59__0_3877 -> bb60__0_3877 [label="return"];
    bb59__0_3877 -> bb75__0_3877 [label="unwind"];
    bb60__0_3877 -> bb67__0_3877 [label=""];
    bb61__0_3877 -> bb62__0_3877 [label="return"];
    bb61__0_3877 -> bb76__0_3877 [label="unwind"];
    bb62__0_3877 -> bb3__0_3877 [label=""];
    bb63__0_3877 -> bb66__0_3877 [label=""];
    bb64__0_3877 -> bb65__0_3877 [label="return"];
    bb64__0_3877 -> bb76__0_3877 [label="unwind"];
    bb65__0_3877 -> bb66__0_3877 [label=""];
    bb66__0_3877 -> bb72__0_3877 [label=""];
    bb67__0_3877 -> bb68__0_3877 [label=""];
    bb68__0_3877 -> bb69__0_3877 [label=""];
    bb69__0_3877 -> bb70__0_3877 [label="return"];
    bb69__0_3877 -> bb76__0_3877 [label="unwind"];
    bb70__0_3877 -> bb71__0_3877 [label="return"];
    bb70__0_3877 -> bb77__0_3877 [label="unwind"];
    bb71__0_3877 -> bb72__0_3877 [label=""];
    bb73__0_3877 -> bb75__0_3877 [label="return"];
    bb74__0_3877 -> bb75__0_3877 [label="return"];
    bb75__0_3877 -> bb76__0_3877 [label="return"];
    bb76__0_3877 -> bb77__0_3877 [label="return"];
    bb78__0_3877 -> bb76__0_3877 [label=""];
}
