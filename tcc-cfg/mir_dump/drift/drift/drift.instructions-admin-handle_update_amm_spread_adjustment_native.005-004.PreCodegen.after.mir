// MIR for `admin::handle_update_amm_spread_adjustment_native` after PreCodegen

fn admin::handle_update_amm_spread_adjustment_native(_1: &[anchor_lang::prelude::AccountInfo<'_>], _2: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug data => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &anchor_lang::prelude::AccountInfo<'_>;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let _7: ();
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &anchor_lang::prelude::Pubkey;
    let _12: anchor_lang::prelude::Pubkey;
    let mut _13: !;
    let _14: !;
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[&str; 2];
    let _18: &[&str; 2];
    let _19: [&str; 2];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let mut _21: &[core::fmt::rt::Argument<'_>; 2];
    let _22: &[core::fmt::rt::Argument<'_>; 2];
    let _23: [core::fmt::rt::Argument<'_>; 2];
    let mut _24: core::fmt::rt::Argument<'_>;
    let mut _25: &&anchor_lang::prelude::Pubkey;
    let _26: &&anchor_lang::prelude::Pubkey;
    let mut _27: core::fmt::rt::Argument<'_>;
    let mut _28: &anchor_lang::prelude::Pubkey;
    let _29: &anchor_lang::prelude::Pubkey;
    let _30: anchor_lang::prelude::Pubkey;
    let mut _32: &std::cell::RefCell<&mut [u8]>;
    let _33: &std::cell::RefCell<&mut [u8]>;
    let mut _34: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let _35: usize;
    let mut _36: usize;
    let mut _37: bool;
    let _38: ();
    let mut _39: &mut [u8];
    let mut _40: &mut [u8];
    let mut _41: &mut [u8];
    let mut _42: &mut &mut [u8];
    let mut _43: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _44: std::ops::Range<usize>;
    let mut _45: &[u8];
    let mut _46: &[u8; 1];
    let _47: &[u8; 1];
    let _48: [u8; 1];
    let mut _49: u8;
    let _50: usize;
    let mut _51: usize;
    let mut _52: bool;
    let mut _53: ();
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut [u8];
    scope 1 {
        debug signer_account => _3;
        let mut _31: std::cell::RefMut<'_, &mut [u8]>;
        let mut _54: &[&str; 2];
        scope 2 {
            debug perp_market => _31;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const 1_usize;
        _5 = Len((*_1));
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = &(*_1)[_4];
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_3).5: bool);
        switchInt(move _8) -> [0: bb7, otherwise: bb2];
    }

    bb2: {
        StorageLive(_9);
        StorageLive(_10);
        _55 = deref_copy ((*_3).0: &anchor_lang::prelude::Pubkey);
        _10 = &(*_55);
        StorageLive(_11);
        StorageLive(_12);
        _12 = amm_spread_adjust_wallet::id() -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = &_12;
        _9 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _7 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = const 0_usize;
        _36 = Len((*_1));
        _37 = Lt(_35, _36);
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> [success: bb12, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb7;
    }

    bb7: {
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _54 = const _;
        _18 = &(*_54);
        _17 = &(*_18);
        _16 = move _17 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &((*_3).0: &anchor_lang::prelude::Pubkey);
        _25 = &(*_26);
        _24 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = amm_spread_adjust_wallet::id() -> [return: bb9, unwind continue];
    }

    bb9: {
        _29 = &_30;
        _28 = &(*_29);
        _27 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_28);
        _23 = [move _24, move _27];
        StorageDead(_27);
        StorageDead(_24);
        _22 = &_23;
        _21 = &(*_22);
        _20 = move _21 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_21);
        _15 = Arguments::<'_>::new_v1(move _16, move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_16);
        _14 = panic_fmt(move _15) -> unwind continue;
    }

    bb12: {
        _34 = &((*_1)[_35].2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _33 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = RefCell::<&mut [u8]>::borrow_mut(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &mut _31;
        _42 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _43) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _56 = deref_copy (*_42);
        _41 = &mut (*_56);
        StorageDead(_43);
        StorageLive(_44);
        _44 = std::ops::Range::<usize> { start: const 934_usize, end: const 935_usize };
        _40 = <[u8] as IndexMut<std::ops::Range<usize>>>::index_mut(move _41, move _44) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _39 = &mut (*_40);
        StorageDead(_44);
        StorageDead(_41);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = const 0_usize;
        _51 = Len((*_2));
        _52 = Lt(_50, _51);
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> [success: bb17, unwind: bb20];
    }

    bb17: {
        _49 = (*_2)[_50];
        _48 = [move _49];
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = move _46 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_46);
        _38 = core::slice::<impl [u8]>::copy_from_slice(move _39, move _45) -> [return: bb18, unwind: bb20];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_53);
        _53 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _53);
        StorageDead(_53);
        drop(_31) -> [return: bb19, unwind: bb21];
    }

    bb19: {
        StorageDead(_31);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb20 (cleanup): {
        drop(_31) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }
}
