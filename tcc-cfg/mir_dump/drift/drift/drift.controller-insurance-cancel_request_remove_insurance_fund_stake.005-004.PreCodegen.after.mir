// MIR for `controller::insurance::cancel_request_remove_insurance_fund_stake` after PreCodegen

fn controller::insurance::cancel_request_remove_insurance_fund_stake(_1: u64, _2: &mut InsuranceFundStake, _3: &mut UserStats, _4: &mut SpotMarket, _5: i64) -> std::result::Result<(), error::ErrorCode> {
    debug insurance_vault_amount => _1;
    debug insurance_fund_stake => _2;
    debug user_stats => _3;
    debug spot_market => _4;
    debug now => _5;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _8: std::result::Result<(), error::ErrorCode>;
    let mut _9: u64;
    let mut _10: &mut state::spot_market::SpotMarket;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: ();
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _20: &mut state::spot_market::SpotMarket;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: ();
    let _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _30: &state::spot_market::SpotMarket;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: u128;
    let _38: ();
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _40: std::result::Result<(), error::ErrorCode>;
    let mut _41: bool;
    let mut _42: u128;
    let mut _43: u128;
    let mut _44: ();
    let _46: ();
    let mut _47: &str;
    let _48: &str;
    let mut _49: &std::string::String;
    let _50: &std::string::String;
    let _51: std::string::String;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[&str; 2];
    let _56: &[&str; 2];
    let _57: [&str; 2];
    let mut _58: &[core::fmt::rt::Argument<'_>];
    let mut _59: &[core::fmt::rt::Argument<'_>; 1];
    let _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: [core::fmt::rt::Argument<'_>; 1];
    let mut _62: core::fmt::rt::Argument<'_>;
    let mut _63: &error::ErrorCode;
    let _64: &error::ErrorCode;
    let _65: ();
    let mut _66: &str;
    let _67: &str;
    let mut _68: error::ErrorCode;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _74: ();
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _76: std::result::Result<(), error::ErrorCode>;
    let mut _77: bool;
    let mut _78: u128;
    let mut _79: ();
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: &std::string::String;
    let _85: &std::string::String;
    let _86: std::string::String;
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let mut _90: &[&str; 2];
    let _91: &[&str; 2];
    let _92: [&str; 2];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let mut _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: [core::fmt::rt::Argument<'_>; 1];
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &error::ErrorCode;
    let _99: &error::ErrorCode;
    let _100: ();
    let mut _101: &str;
    let _102: &str;
    let mut _103: error::ErrorCode;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _111: std::result::Result<u128, error::ErrorCode>;
    let mut _112: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _113: &state::spot_market::SpotMarket;
    let mut _114: u64;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _120: ();
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _122: std::result::Result<(), error::ErrorCode>;
    let mut _123: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _124: u128;
    let mut _125: &state::spot_market::SpotMarket;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _131: u128;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _133: std::result::Result<u128, error::ErrorCode>;
    let mut _134: u128;
    let mut _135: u128;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _141: u128;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _143: std::result::Result<u128, error::ErrorCode>;
    let mut _144: u128;
    let mut _145: u128;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _152: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _153: std::result::Result<u128, error::ErrorCode>;
    let mut _154: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _155: &state::spot_market::SpotMarket;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _161: ();
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _163: std::result::Result<(), error::ErrorCode>;
    let mut _164: u64;
    let mut _165: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _166: &mut state::user::UserStats;
    let mut _167: &mut state::spot_market::SpotMarket;
    let mut _168: i64;
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _174: ();
    let _175: ();
    let mut _176: &[&[u8]];
    let mut _177: &[&[u8]; 1];
    let _178: &[&[u8]; 1];
    let _179: [&[u8]; 1];
    let mut _180: &[u8];
    let _181: &[u8];
    let mut _182: &std::vec::Vec<u8>;
    let _183: &std::vec::Vec<u8>;
    let _184: std::vec::Vec<u8>;
    let mut _185: &state::events::InsuranceFundStakeRecord;
    let _186: &state::events::InsuranceFundStakeRecord;
    let _187: state::events::InsuranceFundStakeRecord;
    let mut _188: i64;
    let mut _189: anchor_lang::prelude::Pubkey;
    let mut _190: state::events::StakeAction;
    let mut _191: u16;
    let mut _192: u64;
    let mut _193: u128;
    let mut _194: u128;
    let mut _195: u128;
    let mut _196: u128;
    let mut _197: u128;
    let mut _198: u128;
    let mut _199: i64;
    let mut _200: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _22;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _25;
        scope 8 {
        }
    }
    scope 9 {
        debug if_shares_before => _26;
        let _36: u128;
        scope 14 {
            debug total_if_shares_before => _36;
            let _37: u128;
            scope 15 {
                debug user_if_shares_before => _37;
                let _45: error::ErrorCode;
                let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _73: ();
                let _80: error::ErrorCode;
                let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _108: ();
                let _109: u128;
                let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _119: u128;
                scope 16 {
                    debug error_code => _45;
                    let _52: std::string::String;
                    let mut _202: &[&str; 2];
                    scope 17 {
                        debug res => _52;
                    }
                }
                scope 18 {
                    debug residual => _70;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _73;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug error_code => _80;
                    let _87: std::string::String;
                    let mut _201: &[&str; 2];
                    scope 23 {
                        debug res => _87;
                    }
                }
                scope 24 {
                    debug residual => _105;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _108;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug if_shares_lost => _109;
                    let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _130: ();
                    let _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _140: u128;
                    let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _150: u128;
                    let _151: u128;
                    let _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _160: u128;
                    scope 33 {
                        debug residual => _127;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _130;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug residual => _137;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug val => _140;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug residual => _147;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug val => _150;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug if_shares_after => _151;
                        let _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _173: ();
                        scope 50 {
                            debug residual => _170;
                            scope 51 {
                            }
                        }
                        scope 52 {
                            debug val => _173;
                            scope 53 {
                            }
                        }
                    }
                    scope 46 {
                        debug residual => _157;
                        scope 47 {
                        }
                    }
                    scope 48 {
                        debug val => _160;
                        scope 49 {
                        }
                    }
                }
                scope 29 {
                    debug residual => _116;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _119;
                    scope 32 {
                    }
                }
            }
        }
    }
    scope 10 {
        debug residual => _32;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _35;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        StorageLive(_10);
        _10 = &mut (*_4);
        _8 = apply_rebase_to_insurance_fund(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: ());
        _6 = _15;
        StorageDead(_15);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_2);
        StorageLive(_20);
        _20 = &mut (*_4);
        _18 = apply_rebase_to_insurance_fund_stake(move _19, move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb83;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_17 as Continue).0: ());
        _16 = _25;
        StorageDead(_25);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_2);
        StorageLive(_30);
        _30 = &(*_4);
        _28 = InsuranceFundStake::checked_if_shares(move _29, move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb83;
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_27 as Continue).0: u128);
        _26 = _35;
        StorageDead(_35);
        StorageDead(_27);
        StorageLive(_36);
        _36 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_37);
        _37 = (((*_4).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = ((*_2).3: u128);
        StorageLive(_43);
        _43 = (((*_4).9: state::spot_market::InsuranceFund).3: u128);
        _41 = Eq(move _42, move _43);
        switchInt(move _41) -> [0: bb18, otherwise: bb17];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        goto -> bb82;
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_44);
        _44 = ();
        _40 = std::result::Result::<(), error::ErrorCode>::Ok(move _44);
        StorageDead(_44);
        goto -> bb26;
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_45);
        _45 = error::ErrorCode::InvalidIFRebase;
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _202 = const _;
        _56 = &(*_202);
        _55 = &(*_56);
        _54 = move _55 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_55);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_45;
        _63 = &(*_64);
        _62 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _63) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_63);
        _61 = [move _62];
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = move _59 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_59);
        _53 = Arguments::<'_>::new_v1(move _54, move _58) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_54);
        _52 = format(move _53) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_53);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_56);
        _51 = move _52;
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = <String as Deref>::deref(move _49) -> [return: bb22, unwind: bb86];
    }

    bb22: {
        _47 = &(*_48);
        StorageDead(_49);
        _46 = solana_program::log::sol_log(move _47) -> [return: bb23, unwind: bb86];
    }

    bb23: {
        StorageDead(_47);
        drop(_51) -> [return: bb24, unwind: bb87];
    }

    bb24: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = const "if stake base != spot market base";
        _66 = &(*_67);
        _65 = solana_program::log::sol_log(move _66) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_66);
        StorageDead(_67);
        StorageDead(_65);
        StorageLive(_68);
        _68 = _45;
        _40 = std::result::Result::<(), error::ErrorCode>::Err(move _68);
        StorageDead(_68);
        StorageDead(_45);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_41);
        _39 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _40) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_40);
        _69 = discriminant(_39);
        switchInt(move _69) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_73);
        _73 = ((_39 as Continue).0: ());
        _38 = _73;
        StorageDead(_73);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = ((*_2).2: u128);
        _77 = Ne(move _78, const 0_u128);
        switchInt(move _77) -> [0: bb32, otherwise: bb31];
    }

    bb29: {
        StorageLive(_70);
        _70 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb81;
    }

    bb31: {
        StorageDead(_78);
        StorageLive(_79);
        _79 = ();
        _76 = std::result::Result::<(), error::ErrorCode>::Ok(move _79);
        StorageDead(_79);
        goto -> bb40;
    }

    bb32: {
        StorageDead(_78);
        StorageLive(_80);
        _80 = error::ErrorCode::InvalidIFUnstakeCancel;
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _201 = const _;
        _91 = &(*_201);
        _90 = &(*_91);
        _89 = move _90 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_80;
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _98) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_98);
        _96 = [move _97];
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_94);
        _88 = Arguments::<'_>::new_v1(move _89, move _93) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_93);
        StorageDead(_89);
        _87 = format(move _88) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_88);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        _86 = move _87;
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = <String as Deref>::deref(move _84) -> [return: bb36, unwind: bb85];
    }

    bb36: {
        _82 = &(*_83);
        StorageDead(_84);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb37, unwind: bb85];
    }

    bb37: {
        StorageDead(_82);
        drop(_86) -> [return: bb38, unwind: bb87];
    }

    bb38: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = const "No withdraw request in progress";
        _101 = &(*_102);
        _100 = solana_program::log::sol_log(move _101) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_101);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_103);
        _103 = _80;
        _76 = std::result::Result::<(), error::ErrorCode>::Err(move _103);
        StorageDead(_103);
        StorageDead(_80);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_77);
        _75 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _76) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_76);
        _104 = discriminant(_75);
        switchInt(move _104) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_108);
        _108 = ((_75 as Continue).0: ());
        _74 = _108;
        StorageDead(_108);
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_2);
        StorageLive(_113);
        _113 = &(*_4);
        StorageLive(_114);
        _114 = _1;
        _111 = calculate_if_shares_lost(move _112, move _113, move _114) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_105);
        _105 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb81;
    }

    bb45: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        _110 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _111) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_111);
        _115 = discriminant(_110);
        switchInt(move _115) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_119);
        _119 = ((_110 as Continue).0: u128);
        _109 = _119;
        StorageDead(_119);
        StorageDead(_110);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut (*_2);
        StorageLive(_124);
        _124 = _109;
        StorageLive(_125);
        _125 = &(*_4);
        _122 = InsuranceFundStake::decrease_if_shares(move _123, move _124, move _125) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_116);
        _116 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_110);
        goto -> bb80;
    }

    bb50: {
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        _121 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _122) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_122);
        _126 = discriminant(_121);
        switchInt(move _126) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_130);
        _130 = ((_121 as Continue).0: ());
        _120 = _130;
        StorageDead(_130);
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_135);
        _135 = _109;
        _133 = <u128 as SafeMath>::safe_sub(move _134, move _135) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_127);
        _127 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb80;
    }

    bb55: {
        StorageDead(_135);
        StorageDead(_134);
        _132 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _133) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_133);
        _136 = discriminant(_132);
        switchInt(move _136) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_140);
        _140 = ((_132 as Continue).0: u128);
        _131 = _140;
        StorageDead(_140);
        (((*_4).9: state::spot_market::InsuranceFund).1: u128) = move _131;
        StorageDead(_131);
        StorageDead(_132);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = (((*_4).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_145);
        _145 = _109;
        _143 = <u128 as SafeMath>::safe_sub(move _144, move _145) -> [return: bb60, unwind continue];
    }

    bb58: {
        StorageLive(_137);
        _137 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_139);
        _139 = _137;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _139) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_131);
        StorageDead(_132);
        goto -> bb80;
    }

    bb60: {
        StorageDead(_145);
        StorageDead(_144);
        _142 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _143) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_143);
        _146 = discriminant(_142);
        switchInt(move _146) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_150);
        _150 = ((_142 as Continue).0: u128);
        _141 = _150;
        StorageDead(_150);
        (((*_4).9: state::spot_market::InsuranceFund).2: u128) = move _141;
        StorageDead(_141);
        StorageDead(_142);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &(*_2);
        StorageLive(_155);
        _155 = &(*_4);
        _153 = InsuranceFundStake::checked_if_shares(move _154, move _155) -> [return: bb65, unwind continue];
    }

    bb63: {
        StorageLive(_147);
        _147 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_141);
        StorageDead(_142);
        goto -> bb80;
    }

    bb65: {
        StorageDead(_155);
        StorageDead(_154);
        _152 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _153) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_153);
        _156 = discriminant(_152);
        switchInt(move _156) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_160);
        _160 = ((_152 as Continue).0: u128);
        _151 = _160;
        StorageDead(_160);
        StorageDead(_152);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = _1;
        StorageLive(_165);
        _165 = &mut (*_2);
        StorageLive(_166);
        _166 = &mut (*_3);
        StorageLive(_167);
        _167 = &mut (*_4);
        StorageLive(_168);
        _168 = _5;
        _163 = update_user_stats_if_stake_amount(const 0_i64, move _164, move _165, move _166, move _167, move _168) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_157);
        _157 = ((_152 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_159);
        _159 = _157;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _159) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_152);
        goto -> bb79;
    }

    bb70: {
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_164);
        _162 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _163) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_163);
        _169 = discriminant(_162);
        switchInt(move _169) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_173);
        _173 = ((_162 as Continue).0: ());
        _161 = _173;
        StorageDead(_173);
        StorageDead(_162);
        StorageDead(_161);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = _5;
        StorageLive(_189);
        _189 = ((*_3).0: anchor_lang::prelude::Pubkey);
        StorageLive(_190);
        _190 = StakeAction::UnstakeCancelRequest;
        StorageLive(_191);
        _191 = ((*_4).42: u16);
        StorageLive(_192);
        _192 = _1;
        StorageLive(_193);
        _193 = _26;
        StorageLive(_194);
        _194 = _37;
        StorageLive(_195);
        _195 = _36;
        StorageLive(_196);
        _196 = _151;
        StorageLive(_197);
        _197 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_198);
        _198 = (((*_4).9: state::spot_market::InsuranceFund).2: u128);
        _187 = InsuranceFundStakeRecord { ts: move _188, user_authority: move _189, action: move _190, amount: const 0_u64, market_index: move _191, insurance_vault_amount_before: move _192, if_shares_before: move _193, user_if_shares_before: move _194, total_if_shares_before: move _195, if_shares_after: move _196, user_if_shares_after: move _198, total_if_shares_after: move _197 };
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_188);
        _186 = &_187;
        _185 = &(*_186);
        _184 = <InsuranceFundStakeRecord as anchor_lang::Event>::data(move _185) -> [return: bb75, unwind continue];
    }

    bb73: {
        StorageLive(_170);
        _170 = ((_162 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_172);
        _172 = _170;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _172) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_162);
        StorageDead(_161);
        goto -> bb79;
    }

    bb75: {
        StorageDead(_185);
        _183 = &_184;
        _182 = &(*_183);
        _181 = <Vec<u8> as Deref>::deref(move _182) -> [return: bb76, unwind: bb84];
    }

    bb76: {
        _180 = &(*_181);
        StorageDead(_182);
        _179 = [move _180];
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        _176 = move _177 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_177);
        _175 = solana_program::log::sol_log_data(move _176) -> [return: bb77, unwind: bb84];
    }

    bb77: {
        StorageDead(_176);
        drop(_184) -> [return: bb78, unwind: bb87];
    }

    bb78: {
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_175);
        _174 = const ();
        StorageDead(_174);
        ((*_2).2: u128) = const 0_u128;
        ((*_2).5: u64) = const 0_u64;
        StorageLive(_199);
        _199 = _5;
        ((*_2).6: i64) = move _199;
        StorageDead(_199);
        StorageLive(_200);
        _200 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _200);
        StorageDead(_200);
        StorageDead(_151);
        StorageDead(_109);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_26);
        goto -> bb83;
    }

    bb79: {
        StorageDead(_151);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_109);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_26);
        goto -> bb83;
    }

    bb83: {
        return;
    }

    bb84 (cleanup): {
        drop(_184) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_86) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_51) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        resume;
    }
}
