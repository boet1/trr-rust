// MIR for `oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::load` before PreCodegen

fn oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::load(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, _2: u64, _3: Option<state::state::OracleGuardRails>) -> std::result::Result<OracleMap<'_>, error::ErrorCode> {
    debug account_info_iter => _1;
    debug slot => _2;
    debug oracle_guard_rails => _3;
    let mut _0: std::result::Result<state::oracle_map::OracleMap<'_>, error::ErrorCode>;
    let mut _4: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let _5: ();
    let mut _6: ();
    let mut _7: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _8: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _9: isize;
    let mut _11: !;
    let _12: ();
    let mut _13: bool;
    let mut _14: &[anchor_lang::prelude::Pubkey];
    let mut _15: &[anchor_lang::prelude::Pubkey; 4];
    let _16: [anchor_lang::prelude::Pubkey; 4];
    let mut _17: &anchor_lang::prelude::Pubkey;
    let _18: &&anchor_lang::prelude::Pubkey;
    let mut _19: !;
    let _21: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _23: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _24: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _25: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: &anchor_lang::prelude::AccountInfo<'_>;
    let _33: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _34: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _35: anchor_lang::prelude::Pubkey;
    let mut _36: anchor_lang::prelude::AccountInfo<'_>;
    let mut _37: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _38: bool;
    let mut _39: &&anchor_lang::prelude::Pubkey;
    let mut _40: &&anchor_lang::prelude::Pubkey;
    let _41: &anchor_lang::prelude::Pubkey;
    let _42: anchor_lang::prelude::Pubkey;
    let mut _43: !;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _46: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _47: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _48: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _49: {closure@programs/drift/src/state/oracle_map.rs:199:67: 199:70};
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _58: &[u8];
    let mut _59: &[u8];
    let _60: &&mut [u8];
    let mut _61: &std::cell::Ref<'_, &mut [u8]>;
    let mut _62: std::ops::Range<usize>;
    let mut _63: usize;
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: (usize, bool);
    let mut _67: &[u8];
    let _68: ();
    let mut _69: bool;
    let mut _70: &&[u8; 8];
    let mut _71: &&[u8; 8];
    let _72: &[u8; 8];
    let _73: [u8; 8];
    let mut _75: bool;
    let mut _76: usize;
    let mut _77: &[u8];
    let _78: &&mut [u8];
    let mut _79: &std::cell::Ref<'_, &mut [u8]>;
    let mut _80: usize;
    let mut _81: !;
    let mut _82: bool;
    let mut _83: &&[u8; 8];
    let mut _84: &&[u8; 8];
    let _85: &[u8; 8];
    let _86: [u8; 8];
    let mut _88: bool;
    let mut _89: usize;
    let mut _90: &[u8];
    let _91: &&mut [u8];
    let mut _92: &std::cell::Ref<'_, &mut [u8]>;
    let mut _93: usize;
    let mut _94: !;
    let mut _95: !;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _98: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _99: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _100: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: &anchor_lang::prelude::AccountInfo<'_>;
    let _108: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _109: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _110: anchor_lang::prelude::Pubkey;
    let mut _111: anchor_lang::prelude::AccountInfo<'_>;
    let mut _112: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _113: !;
    let _114: ();
    let mut _115: !;
    let mut _117: isize;
    let mut _119: state::oracle_map::OracleMap<'_>;
    let mut _120: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _121: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _122: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), math::oracle::OracleValidity>;
    let mut _123: u64;
    let mut _124: state::state::OracleGuardRails;
    let mut _125: state::oracle::OraclePriceData;
    let mut _126: std::option::Option<u64>;
    let mut _128: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _129: &anchor_lang::prelude::Pubkey;
    let mut _130: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _131: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _132: &mut [u8];
    let mut _133: &mut [u8];
    let mut _134: &mut [u8];
    let mut _135: bool;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    scope 1 {
        debug oracles => _4;
        let _116: state::state::OracleGuardRails;
        scope 2 {
            debug account_info => _10;
            let _10: &&anchor_lang::prelude::AccountInfo<'_>;
            let _20: &anchor_lang::prelude::AccountInfo<'_>;
            let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _30: &anchor_lang::prelude::AccountInfo<'_>;
            let _44: std::cell::Ref<'_, &mut [u8]>;
            let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _54: std::cell::Ref<'_, &mut [u8]>;
            let mut _127: &[anchor_lang::prelude::Pubkey; 4];
            scope 3 {
                debug account_info => _20;
                let _31: anchor_lang::prelude::Pubkey;
                scope 8 {
                    debug pubkey => _31;
                }
            }
            scope 4 {
                debug residual => _27;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _30;
                scope 7 {
                }
            }
            scope 9 {
                debug data => _44;
                let _55: &[u8; 8];
                let _56: usize;
                scope 14 {
                    debug account_discriminator => _55;
                    let _74: usize;
                    let _87: usize;
                    let _96: &anchor_lang::prelude::AccountInfo<'_>;
                    let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _105: &anchor_lang::prelude::AccountInfo<'_>;
                    scope 19 {
                        debug expected_data_len => _74;
                    }
                    scope 20 {
                        debug expected_data_len => _87;
                    }
                    scope 21 {
                        debug account_info => _96;
                        let _106: anchor_lang::prelude::Pubkey;
                        scope 26 {
                            debug pubkey => _106;
                        }
                    }
                    scope 22 {
                        debug residual => _102;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _105;
                        scope 25 {
                        }
                    }
                }
                scope 15 {
                    debug offset => _56;
                    let _57: &[u8];
                    scope 16 {
                        debug slice => _57;
                        scope 17 {
                            scope 18 {
                            }
                        }
                    }
                }
            }
            scope 10 {
                debug residual => _51;
                scope 11 {
                }
            }
            scope 12 {
                debug val => _54;
                scope 13 {
                }
            }
        }
        scope 27 {
            debug ogr => _116;
        }
        scope 28 {
            debug o => _118;
            let _118: state::state::OracleGuardRails;
        }
    }

    bb0: {
        _135 = const false;
        StorageLive(_4);
        _135 = const true;
        _4 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_5);
        goto -> bb2;
    }

    bb2: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut (*_1);
        _7 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _8) -> [return: bb3, unwind: bb83];
    }

    bb3: {
        StorageDead(_8);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb4, otherwise: bb60];
    }

    bb4: {
        StorageLive(_10);
        _10 = ((_7 as Some).0: &&anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _127 = const _;
        _15 = &(*_127);
        _14 = move _15 as &[anchor_lang::prelude::Pubkey] (PointerCoercion(Unsize));
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _128 = deref_copy (*_10);
        _18 = &((*_128).3: &anchor_lang::prelude::Pubkey);
        _129 = deref_copy (*_18);
        _17 = &(*_129);
        _13 = core::slice::<impl [anchor_lang::prelude::Pubkey]>::contains(move _14, move _17) -> [return: bb5, unwind: bb83];
    }

    bb5: {
        switchInt(move _13) -> [0: bb18, otherwise: bb6];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut (*_1);
        _24 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _25) -> [return: bb7, unwind: bb83];
    }

    bb7: {
        StorageDead(_25);
        _23 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _24) -> [return: bb8, unwind: bb83];
    }

    bb8: {
        StorageDead(_24);
        _22 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _23) -> [return: bb9, unwind: bb83];
    }

    bb9: {
        StorageDead(_23);
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_30);
        _30 = ((_22 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _21 = &(*_30);
        StorageDead(_30);
        _20 = &(*_21);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_20);
        _31 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _32) -> [return: bb14, unwind: bb83];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_27);
        _27 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb13, unwind: bb83];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb74;
    }

    bb14: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _4;
        StorageLive(_35);
        _35 = _31;
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_20);
        _36 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _37) -> [return: bb15, unwind: bb83];
    }

    bb15: {
        StorageDead(_37);
        _33 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::insert(move _34, move _35, move _36) -> [return: bb16, unwind: bb83];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        drop(_33) -> [return: bb17, unwind: bb83];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_20);
        goto -> bb67;
    }

    bb18: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageLive(_38);
        StorageLive(_39);
        _130 = deref_copy (*_10);
        _39 = &((*_130).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = id() -> [return: bb19, unwind: bb83];
    }

    bb19: {
        _41 = &_42;
        _40 = &_41;
        _38 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _39, move _40) -> [return: bb20, unwind: bb83];
    }

    bb20: {
        switchInt(move _38) -> [0: bb59, otherwise: bb21];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _131 = deref_copy (*_10);
        _48 = &(*_131);
        _47 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _48) -> [return: bb22, unwind: bb83];
    }

    bb22: {
        StorageDead(_48);
        StorageLive(_49);
        _49 = {closure@programs/drift/src/state/oracle_map.rs:199:67: 199:70};
        _46 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/oracle_map.rs:199:67: 199:70}>(move _47, move _49) -> [return: bb23, unwind: bb83];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_47);
        _45 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _46) -> [return: bb24, unwind: bb83];
    }

    bb24: {
        StorageDead(_46);
        _50 = discriminant(_45);
        switchInt(move _50) -> [0: bb25, 1: bb26, otherwise: bb11];
    }

    bb25: {
        StorageLive(_54);
        _54 = move ((_45 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _44 = move _54;
        StorageDead(_54);
        _138 = discriminant(_45);
        StorageDead(_45);
        StorageLive(_55);
        StorageLive(_56);
        _56 = const 0_usize;
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_44;
        _60 = <Ref<'_, &mut [u8]> as Deref>::deref(move _61) -> [return: bb28, unwind: bb79];
    }

    bb26: {
        StorageLive(_51);
        _51 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb27, unwind: bb81];
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_51);
        _136 = discriminant(_45);
        StorageDead(_45);
        goto -> bb73;
    }

    bb28: {
        _132 = deref_copy (*_60);
        _59 = &(*_132);
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _56;
        StorageLive(_64);
        StorageLive(_65);
        _65 = _56;
        _66 = CheckedAdd(_65, const 8_usize);
        assert(!move (_66.1: bool), "attempt to compute `{} + {}`, which would overflow", move _65, const 8_usize) -> [success: bb29, unwind: bb79];
    }

    bb29: {
        _64 = move (_66.0: usize);
        StorageDead(_65);
        _62 = std::ops::Range::<usize> { start: move _63, end: move _64 };
        StorageDead(_64);
        StorageDead(_63);
        _58 = <[u8] as Index<std::ops::Range<usize>>>::index(move _59, move _62) -> [return: bb30, unwind: bb79];
    }

    bb30: {
        StorageDead(_62);
        StorageDead(_59);
        _57 = &(*_58);
        StorageLive(_67);
        _67 = &(*_57);
        _55 = OracleMap::<'a>::load::as_array::<u8>(move _67) -> [return: bb31, unwind: bb79];
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_55;
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = <PrelaunchOracle as anchor_lang::Discriminator>::discriminator() -> [return: bb32, unwind: bb79];
    }

    bb32: {
        _72 = &_73;
        _71 = &_72;
        _69 = <&[u8; 8] as PartialEq>::eq(move _70, move _71) -> [return: bb33, unwind: bb79];
    }

    bb33: {
        switchInt(move _69) -> [0: bb39, otherwise: bb34];
    }

    bb34: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_74);
        _74 = const _;
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_44;
        _78 = <Ref<'_, &mut [u8]> as Deref>::deref(move _79) -> [return: bb35, unwind: bb79];
    }

    bb35: {
        _133 = deref_copy (*_78);
        _77 = &(*_133);
        StorageDead(_79);
        _76 = core::slice::<impl [u8]>::len(move _77) -> [return: bb36, unwind: bb79];
    }

    bb36: {
        StorageDead(_77);
        StorageLive(_80);
        _80 = _74;
        _75 = Lt(move _76, move _80);
        switchInt(move _75) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        _5 = const ();
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb62;
    }

    bb38: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        _68 = const ();
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb48;
    }

    bb39: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_55;
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = <PythLazerOracle as anchor_lang::Discriminator>::discriminator() -> [return: bb40, unwind: bb79];
    }

    bb40: {
        _85 = &_86;
        _84 = &_85;
        _82 = <&[u8; 8] as PartialEq>::eq(move _83, move _84) -> [return: bb41, unwind: bb79];
    }

    bb41: {
        switchInt(move _82) -> [0: bb47, otherwise: bb42];
    }

    bb42: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageLive(_87);
        _87 = const _;
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_44;
        _91 = <Ref<'_, &mut [u8]> as Deref>::deref(move _92) -> [return: bb43, unwind: bb79];
    }

    bb43: {
        _134 = deref_copy (*_91);
        _90 = &(*_134);
        StorageDead(_92);
        _89 = core::slice::<impl [u8]>::len(move _90) -> [return: bb44, unwind: bb79];
    }

    bb44: {
        StorageDead(_90);
        StorageLive(_93);
        _93 = _87;
        _88 = Lt(move _89, move _93);
        switchInt(move _88) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        _5 = const ();
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb61;
    }

    bb46: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        _68 = const ();
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_82);
        goto -> bb48;
    }

    bb47: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        _5 = const ();
        goto -> bb61;
    }

    bb48: {
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &mut (*_1);
        _99 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _100) -> [return: bb49, unwind: bb79];
    }

    bb49: {
        StorageDead(_100);
        _98 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _99) -> [return: bb50, unwind: bb79];
    }

    bb50: {
        StorageDead(_99);
        _97 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _98) -> [return: bb51, unwind: bb79];
    }

    bb51: {
        StorageDead(_98);
        _101 = discriminant(_97);
        switchInt(move _101) -> [0: bb52, 1: bb53, otherwise: bb11];
    }

    bb52: {
        StorageLive(_105);
        _105 = ((_97 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _96 = _105;
        StorageDead(_105);
        StorageDead(_97);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &(*_96);
        _106 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _107) -> [return: bb55, unwind: bb79];
    }

    bb53: {
        StorageLive(_102);
        _102 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb54, unwind: bb79];
    }

    bb54: {
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_55);
        drop(_44) -> [return: bb73, unwind: bb83];
    }

    bb55: {
        StorageDead(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &mut _4;
        StorageLive(_110);
        _110 = _106;
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_96);
        _111 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _112) -> [return: bb56, unwind: bb79];
    }

    bb56: {
        StorageDead(_112);
        _108 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::insert(move _109, move _110, move _111) -> [return: bb57, unwind: bb79];
    }

    bb57: {
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        drop(_108) -> [return: bb58, unwind: bb79];
    }

    bb58: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_96);
        StorageDead(_55);
        drop(_44) -> [return: bb66, unwind: bb83];
    }

    bb59: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        _12 = const ();
        StorageDead(_38);
        StorageDead(_13);
        StorageDead(_12);
        _5 = const ();
        goto -> bb64;
    }

    bb60: {
        StorageLive(_114);
        _5 = const ();
        StorageDead(_114);
        goto -> bb65;
    }

    bb61: {
        StorageDead(_82);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_55);
        drop(_44) -> [return: bb63, unwind: bb83];
    }

    bb63: {
        StorageDead(_44);
        StorageDead(_38);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_10);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_7);
        StorageDead(_5);
        StorageLive(_116);
        _117 = discriminant(_3);
        switchInt(move _117) -> [1: bb68, otherwise: bb69];
    }

    bb66: {
        StorageDead(_44);
        StorageDead(_38);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb2;
    }

    bb68: {
        StorageLive(_118);
        _118 = ((_3 as Some).0: state::state::OracleGuardRails);
        _116 = _118;
        StorageDead(_118);
        goto -> bb70;
    }

    bb69: {
        _116 = <state::state::OracleGuardRails as Default>::default() -> [return: bb84, unwind: bb83];
    }

    bb70: {
        StorageLive(_119);
        StorageLive(_120);
        _135 = const false;
        _120 = move _4;
        StorageLive(_121);
        _121 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::new() -> [return: bb71, unwind: bb78];
    }

    bb71: {
        StorageLive(_122);
        _122 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OracleValidity>::new() -> [return: bb72, unwind: bb77];
    }

    bb72: {
        StorageLive(_123);
        _123 = _2;
        StorageLive(_124);
        _124 = _116;
        StorageLive(_125);
        StorageLive(_126);
        _126 = Option::<u64>::None;
        _125 = OraclePriceData { price: const _, confidence: const 1_u64, delay: const 0_i64, has_sufficient_number_of_data_points: const true, sequence_id: move _126 };
        StorageDead(_126);
        _119 = OracleMap::<'_> { oracles: move _120, price_data: move _121, validity: move _122, slot: move _123, oracle_guard_rails: move _124, quote_asset_price_data: move _125 };
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        _0 = std::result::Result::<OracleMap<'_>, error::ErrorCode>::Ok(move _119);
        StorageDead(_119);
        StorageDead(_116);
        _135 = const false;
        StorageDead(_4);
        goto -> bb76;
    }

    bb73: {
        StorageDead(_44);
        StorageDead(_38);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_5);
        drop(_4) -> [return: bb75, unwind: bb80];
    }

    bb75: {
        _135 = const false;
        StorageDead(_4);
        goto -> bb76;
    }

    bb76: {
        return;
    }

    bb77 (cleanup): {
        drop(_121) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_120) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_44) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        resume;
    }

    bb81 (cleanup): {
        _140 = discriminant(_45);
        goto -> bb83;
    }

    bb82 (cleanup): {
        drop(_4) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_135) -> [0: bb80, otherwise: bb82];
    }

    bb84: {
        goto -> bb70;
    }
}
