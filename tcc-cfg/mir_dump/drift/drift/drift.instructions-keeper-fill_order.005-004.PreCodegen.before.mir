// MIR for `fill_order` before PreCodegen

fn fill_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::FillOrder<'_>>, _2: u32, _3: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug order_id => _2;
    debug market_index => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: &anchor_lang::prelude::Clock;
    let _5: anchor_lang::prelude::Clock;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _7: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _12: anchor_lang::prelude::Clock;
    let mut _15: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _16: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _17: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _21: instructions::optional_accounts::AccountMaps<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _23: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _24: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _25: &std::collections::BTreeSet<u16>;
    let _26: &std::collections::BTreeSet<u16>;
    let _27: std::collections::BTreeSet<u16>;
    let mut _28: u16;
    let mut _29: &std::collections::BTreeSet<u16>;
    let _30: &std::collections::BTreeSet<u16>;
    let _31: std::collections::BTreeSet<u16>;
    let mut _32: u64;
    let mut _33: std::option::Option<state::state::OracleGuardRails>;
    let mut _34: state::state::OracleGuardRails;
    let mut _35: &state::state::State;
    let mut _36: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>);
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>)>;
    let mut _46: std::result::Result<(state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>), error::ErrorCode>;
    let mut _47: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _53: i128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _55: std::result::Result<i128, error::ErrorCode>;
    let mut _56: u16;
    let mut _57: &state::perp_market_map::PerpMarketMap<'_>;
    let _58: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _59: &mut state::oracle_map::OracleMap<'_>;
    let mut _60: &mut state::oracle_map::OracleMap<'_>;
    let mut _61: &state::state::State;
    let _62: &state::state::State;
    let mut _63: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _64: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _65: &anchor_lang::prelude::Clock;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: (u64, u64);
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _73: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _74: u32;
    let mut _75: &state::state::State;
    let _76: &state::state::State;
    let mut _77: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _78: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _79: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _80: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _81: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _82: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _83: &state::spot_market_map::SpotMarketMap<'_>;
    let _84: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _85: &state::perp_market_map::PerpMarketMap<'_>;
    let _86: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _87: &mut state::oracle_map::OracleMap<'_>;
    let mut _88: &mut state::oracle_map::OracleMap<'_>;
    let mut _89: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _90: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _91: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _92: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _93: &state::user_map::UserMap<'_>;
    let _94: &state::user_map::UserMap<'_>;
    let mut _95: &state::user_map::UserStatsMap<'_>;
    let _96: &state::user_map::UserStatsMap<'_>;
    let mut _97: std::option::Option<u32>;
    let mut _98: &anchor_lang::prelude::Clock;
    let mut _99: state::fill_mode::FillMode;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: ();
    let mut _106: &mut instructions::keeper::FillOrder<'_>;
    let mut _107: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _108: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _109: &mut instructions::keeper::FillOrder<'_>;
    let mut _110: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _111: &mut instructions::keeper::FillOrder<'_>;
    let mut _112: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _113: &mut instructions::keeper::FillOrder<'_>;
    let mut _114: &mut instructions::keeper::FillOrder<'_>;
    let mut _115: &mut instructions::keeper::FillOrder<'_>;
    let mut _116: &mut instructions::keeper::FillOrder<'_>;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _135: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _136: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug clock => _4;
        let _13: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 6 {
            debug state => _13;
            let _14: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
            scope 7 {
                debug remaining_accounts_iter => _14;
                let _18: state::perp_market_map::PerpMarketMap<'_>;
                let _19: state::spot_market_map::SpotMarketMap<'_>;
                let mut _20: state::oracle_map::OracleMap<'_>;
                let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _41: instructions::optional_accounts::AccountMaps<'_>;
                scope 8 {
                    debug perp_market_map => _18;
                    debug spot_market_map => _19;
                    debug oracle_map => _20;
                    let _42: state::user_map::UserMap<'_>;
                    let _43: state::user_map::UserStatsMap<'_>;
                    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _52: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>);
                    scope 13 {
                        debug makers_and_referrer => _42;
                        debug makers_and_referrer_stats => _43;
                        let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _70: i128;
                        let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _104: (u64, u64);
                        scope 18 {
                            debug residual => _67;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => _70;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug residual => _101;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _104;
                            scope 25 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _49;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _52;
                        scope 17 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _38;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _41;
                    scope 12 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _7) -> [return: bb2, unwind: bb61];
    }

    bb2: {
        StorageDead(_7);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_6 as Continue).0: anchor_lang::prelude::Clock);
        _5 = move _12;
        StorageDead(_12);
        _4 = &_5;
        _117 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_13);
        _106 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _13 = &((*_106).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _107 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _17 = &(*_107);
        _16 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _11) -> [return: bb6, unwind: bb64];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _127 = discriminant(_6);
        StorageDead(_6);
        goto -> bb51;
    }

    bb7: {
        StorageDead(_17);
        _15 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        _14 = &mut _15;
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut (*_14);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _3;
        _27 = get_writable_perp_market_set(move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = BTreeSet::<u16>::new() -> [return: bb10, unwind: bb60];
    }

    bb10: {
        _30 = &_31;
        _29 = &(*_30);
        StorageLive(_32);
        _32 = ((*_4).0: u64);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _108 = deref_copy (*_13);
        _134 = (((_108.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _36 = &(*_134);
        _35 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _36) -> [return: bb11, unwind: bb59];
    }

    bb11: {
        StorageDead(_36);
        _34 = ((*_35).7: state::state::OracleGuardRails);
        _33 = Option::<state::state::OracleGuardRails>::Some(move _34);
        StorageDead(_34);
        _23 = load_maps(move _24, move _25, move _29, move _32, move _33) -> [return: bb12, unwind: bb59];
    }

    bb12: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _23) -> [return: bb13, unwind: bb59];
    }

    bb13: {
        StorageDead(_23);
        _37 = discriminant(_22);
        switchInt(move _37) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_41);
        _41 = move ((_22 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _21 = move _41;
        StorageDead(_41);
        StorageLive(_18);
        _18 = move (_21.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_19);
        _19 = move (_21.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_20);
        _20 = move (_21.2: state::oracle_map::OracleMap<'_>);
        _121 = discriminant(_22);
        StorageDead(_35);
        drop(_31) -> [return: bb17, unwind: bb55];
    }

    bb15: {
        StorageLive(_38);
        _38 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb16, unwind: bb63];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_38);
        _119 = discriminant(_22);
        StorageDead(_35);
        drop(_31) -> [return: bb48, unwind: bb60];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_30);
        drop(_27) -> [return: bb18, unwind: bb56];
    }

    bb18: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut (*_14);
        _46 = load_user_maps::<'_, '_>(move _47, const true) -> [return: bb19, unwind: bb56];
    }

    bb19: {
        StorageDead(_47);
        _45 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as Try>::branch(move _46) -> [return: bb20, unwind: bb56];
    }

    bb20: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_52);
        _52 = move ((_45 as Continue).0: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>));
        _44 = move _52;
        StorageDead(_52);
        StorageLive(_42);
        _42 = move (_44.0: state::user_map::UserMap<'_>);
        StorageLive(_43);
        _43 = move (_44.1: state::user_map::UserStatsMap<'_>);
        _125 = discriminant(_45);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _3;
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_18;
        _57 = &(*_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut _20;
        _59 = &mut (*_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _109 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _64 = &((*_109).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _110 = deref_copy (*_64);
        _135 = (((_110.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _63 = &(*_135);
        _62 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _63) -> [return: bb24, unwind: bb53];
    }

    bb22: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb23, unwind: bb62];
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_49);
        _123 = discriminant(_45);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb44;
    }

    bb24: {
        _61 = &(*_62);
        StorageDead(_63);
        StorageLive(_65);
        _65 = &(*_4);
        _55 = update_amm(move _56, move _57, move _59, move _61, move _65) -> [return: bb25, unwind: bb53];
    }

    bb25: {
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        _54 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb26, unwind: bb53];
    }

    bb26: {
        StorageDead(_55);
        _66 = discriminant(_54);
        switchInt(move _66) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_70);
        _70 = ((_54 as Continue).0: i128);
        _53 = _70;
        StorageDead(_70);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _2;
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _111 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _78 = &((*_111).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _112 = deref_copy (*_78);
        _136 = (((_112.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _77 = &(*_136);
        _76 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _77) -> [return: bb30, unwind: bb53];
    }

    bb28: {
        StorageLive(_67);
        _67 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb29, unwind: bb53];
    }

    bb29: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb41;
    }

    bb30: {
        _75 = &(*_76);
        StorageDead(_77);
        StorageLive(_79);
        StorageLive(_80);
        _113 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _80 = &((*_113).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _79 = &(*_80);
        StorageLive(_81);
        StorageLive(_82);
        _114 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _82 = &((*_114).5: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _81 = &(*_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_19;
        _83 = &(*_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_18;
        _85 = &(*_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &mut _20;
        _87 = &mut (*_88);
        StorageLive(_89);
        StorageLive(_90);
        _115 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _90 = &((*_115).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _89 = &(*_90);
        StorageLive(_91);
        StorageLive(_92);
        _116 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _92 = &((*_116).3: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _91 = &(*_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_42;
        _93 = &(*_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_43;
        _95 = &(*_96);
        StorageLive(_97);
        _97 = Option::<u32>::None;
        StorageLive(_98);
        _98 = &(*_4);
        StorageLive(_99);
        _99 = FillMode::Fill;
        _73 = controller::orders::fill_perp_order(move _74, move _75, move _79, move _81, move _83, move _85, move _87, move _89, move _91, move _93, move _95, move _97, move _98, move _99) -> [return: bb31, unwind: bb53];
    }

    bb31: {
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_75);
        StorageDead(_74);
        _72 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _73) -> [return: bb32, unwind: bb53];
    }

    bb32: {
        StorageDead(_73);
        _100 = discriminant(_72);
        switchInt(move _100) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_104);
        _104 = ((_72 as Continue).0: (u64, u64));
        _71 = _104;
        StorageDead(_104);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_105);
        _105 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _105);
        StorageDead(_105);
        drop(_43) -> [return: bb36, unwind: bb54];
    }

    bb34: {
        StorageLive(_101);
        _101 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb35, unwind: bb53];
    }

    bb35: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb41;
    }

    bb36: {
        StorageDead(_43);
        drop(_42) -> [return: bb37, unwind: bb56];
    }

    bb37: {
        StorageDead(_42);
        drop(_20) -> [return: bb38, unwind: bb57];
    }

    bb38: {
        StorageDead(_20);
        drop(_19) -> [return: bb39, unwind: bb58];
    }

    bb39: {
        StorageDead(_19);
        drop(_18) -> [return: bb40, unwind: bb61];
    }

    bb40: {
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb52;
    }

    bb41: {
        drop(_43) -> [return: bb42, unwind: bb54];
    }

    bb42: {
        StorageDead(_43);
        drop(_42) -> [return: bb43, unwind: bb56];
    }

    bb43: {
        StorageDead(_42);
        goto -> bb44;
    }

    bb44: {
        drop(_20) -> [return: bb45, unwind: bb57];
    }

    bb45: {
        StorageDead(_20);
        drop(_19) -> [return: bb46, unwind: bb58];
    }

    bb46: {
        StorageDead(_19);
        drop(_18) -> [return: bb47, unwind: bb61];
    }

    bb47: {
        StorageDead(_18);
        goto -> bb50;
    }

    bb48: {
        StorageDead(_31);
        StorageDead(_30);
        drop(_27) -> [return: bb49, unwind: bb61];
    }

    bb49: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb52;
    }

    bb52: {
        return;
    }

    bb53 (cleanup): {
        drop(_43) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_42) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_27) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_20) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_19) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_18) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_31) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_27) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        resume;
    }

    bb62 (cleanup): {
        _130 = discriminant(_45);
        goto -> bb56;
    }

    bb63 (cleanup): {
        _132 = discriminant(_22);
        goto -> bb59;
    }

    bb64 (cleanup): {
        _133 = discriminant(_6);
        goto -> bb61;
    }
}
