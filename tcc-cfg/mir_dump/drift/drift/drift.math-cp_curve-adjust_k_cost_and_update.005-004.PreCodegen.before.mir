// MIR for `adjust_k_cost_and_update` before PreCodegen

fn adjust_k_cost_and_update(_1: &mut PerpMarket, _2: &UpdateKResult) -> std::result::Result<i128, error::ErrorCode> {
    debug market => _1;
    debug update_k_result => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _3: u128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _5: std::result::Result<u128, error::ErrorCode>;
    let mut _6: i128;
    let mut _7: &state::perp_market::AMM;
    let _8: &state::perp_market::AMM;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u128;
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: &mut state::perp_market::PerpMarket;
    let mut _18: &math::cp_curve::UpdateKResult;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: (u128, i128);
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128)>;
    let mut _28: std::result::Result<(u128, i128), error::ErrorCode>;
    let mut _29: i128;
    let mut _30: u128;
    let mut _31: &state::perp_market::AMM;
    let _32: &state::perp_market::AMM;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: i128;
    scope 1 {
        debug current_net_market_value => _3;
        let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _23: ();
        let _24: u128;
        let _25: i128;
        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _37: (u128, i128);
        scope 6 {
            debug residual => _20;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _23;
            scope 9 {
            }
        }
        scope 10 {
            debug _new_net_market_value => _24;
            debug cost => _25;
        }
        scope 11 {
            debug residual => _34;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _37;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (((*_1).1: state::perp_market::AMM).15: i128);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).1: state::perp_market::AMM);
        _7 = &(*_8);
        _5 = calculate_base_asset_value(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_4 as Continue).0: u128);
        _3 = _13;
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut (*_1);
        StorageLive(_18);
        _18 = &(*_2);
        _16 = cp_curve::update_k(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        goto -> bb17;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_15 as Continue).0: ());
        _14 = _23;
        StorageDead(_23);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = (((*_1).1: state::perp_market::AMM).15: i128);
        StorageLive(_30);
        _30 = _3;
        StorageLive(_31);
        StorageLive(_32);
        _32 = &((*_1).1: state::perp_market::AMM);
        _31 = &(*_32);
        _28 = calculate_base_asset_value_and_pnl(move _29, move _30, move _31) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb17;
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<(u128, i128), error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _33 = discriminant(_27);
        switchInt(move _33) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_37);
        _37 = ((_27 as Continue).0: (u128, i128));
        _26 = _37;
        StorageDead(_37);
        StorageLive(_24);
        _24 = (_26.0: u128);
        StorageLive(_25);
        _25 = (_26.1: i128);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_38);
        _38 = _25;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _38);
        StorageDead(_38);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_3);
        goto -> bb18;
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_3);
        goto -> bb18;
    }

    bb18: {
        return;
    }
}
