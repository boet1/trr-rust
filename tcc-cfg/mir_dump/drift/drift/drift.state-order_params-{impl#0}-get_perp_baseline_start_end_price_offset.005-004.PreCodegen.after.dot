digraph Mir_0_3644 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn order_params::OrderParams::get_perp_baseline_start_end_price_offset(_1: &amp;ReErased state::perp_market::PerpMarket, _2: controller::position::PositionDirection, _3: u64) -&gt; std::result::Result&lt;(i64, i64), error::ErrorCode&gt;<br align="left"/>let _4: u64;<br align="left"/>let mut _5: i64;<br align="left"/>let _6: i64;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _8: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _9: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _10: controller::position::PositionDirection;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: i64;<br align="left"/>let _16: u64;<br align="left"/>let _17: u64;<br align="left"/>let mut _18: (u64, u64);<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _20: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _21: state::perp_market::PerpMarket;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: (u64, u64);<br align="left"/>let _27: u32;<br align="left"/>let mut _28: bool;<br align="left"/>let mut _29: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _30: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _31: controller::position::PositionDirection;<br align="left"/>let mut _32: u64;<br align="left"/>let mut _33: u64;<br align="left"/>let mut _34: u64;<br align="left"/>let mut _35: u64;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _38: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _39: u64;<br align="left"/>let mut _40: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _41: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _42: u64;<br align="left"/>let mut _43: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _44: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _45: u32;<br align="left"/>let mut _46: isize;<br align="left"/>let _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _48: !;<br align="left"/>let mut _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _50: u64;<br align="left"/>let mut _51: u64;<br align="left"/>let mut _52: isize;<br align="left"/>let _53: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _56: u64;<br align="left"/>let mut _57: isize;<br align="left"/>let _58: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _59: !;<br align="left"/>let mut _60: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _61: u64;<br align="left"/>let _62: ();<br align="left"/>let mut _63: bool;<br align="left"/>let mut _64: u64;<br align="left"/>let mut _65: u64;<br align="left"/>let mut _66: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _67: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _68: u64;<br align="left"/>let mut _69: u64;<br align="left"/>let mut _70: isize;<br align="left"/>let _71: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _72: !;<br align="left"/>let mut _73: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _74: u64;<br align="left"/>let mut _75: u64;<br align="left"/>let mut _76: u64;<br align="left"/>let mut _77: u64;<br align="left"/>let mut _78: u64;<br align="left"/>let mut _79: u64;<br align="left"/>let mut _80: bool;<br align="left"/>let mut _81: u64;<br align="left"/>let mut _82: u64;<br align="left"/>let mut _83: u64;<br align="left"/>let mut _84: bool;<br align="left"/>let _85: i64;<br align="left"/>let mut _86: bool;<br align="left"/>let mut _87: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _88: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _89: controller::position::PositionDirection;<br align="left"/>let _90: i64;<br align="left"/>let mut _91: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _92: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _93: i64;<br align="left"/>let mut _94: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _95: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _96: u64;<br align="left"/>let mut _97: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _98: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _99: u64;<br align="left"/>let mut _100: u64;<br align="left"/>let mut _101: isize;<br align="left"/>let _102: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _103: !;<br align="left"/>let mut _104: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _105: u64;<br align="left"/>let mut _106: isize;<br align="left"/>let _107: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _108: !;<br align="left"/>let mut _109: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _110: i64;<br align="left"/>let mut _111: i64;<br align="left"/>let mut _112: isize;<br align="left"/>let _113: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _114: !;<br align="left"/>let mut _115: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _116: i64;<br align="left"/>let mut _117: i64;<br align="left"/>let mut _118: i64;<br align="left"/>let _119: i64;<br align="left"/>let mut _120: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _121: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _122: i64;<br align="left"/>let mut _123: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _124: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _125: u64;<br align="left"/>let mut _126: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _127: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _128: u64;<br align="left"/>let mut _129: u64;<br align="left"/>let mut _130: isize;<br align="left"/>let _131: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _132: !;<br align="left"/>let mut _133: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _134: u64;<br align="left"/>let mut _135: isize;<br align="left"/>let _136: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _137: !;<br align="left"/>let mut _138: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _139: i64;<br align="left"/>let mut _140: i64;<br align="left"/>let mut _141: isize;<br align="left"/>let _142: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _143: !;<br align="left"/>let mut _144: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _145: i64;<br align="left"/>let mut _146: i64;<br align="left"/>let mut _147: i64;<br align="left"/>let mut _148: (i64, i64);<br align="left"/>let mut _149: i64;<br align="left"/>let mut _150: i64;<br align="left"/>let mut _151: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _152: &amp;ReErased controller::position::PositionDirection;<br align="left"/>debug perp_market =&gt; _1;<br align="left"/>debug direction =&gt; _2;<br align="left"/>debug end_buffer_scalar =&gt; _3;<br align="left"/>debug oracle_twap =&gt; _4;<br align="left"/>debug baseline_start_price_offset =&gt; _6;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug min_divisor =&gt; _16;<br align="left"/>debug max_divisor =&gt; _17;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>debug amm_spread_side_pct =&gt; _27;<br align="left"/>debug baseline_end_price_buffer =&gt; _32;<br align="left"/>debug residual =&gt; _47;<br align="left"/>debug val =&gt; _50;<br align="left"/>debug residual =&gt; _53;<br align="left"/>debug val =&gt; _56;<br align="left"/>debug residual =&gt; _58;<br align="left"/>debug val =&gt; _61;<br align="left"/>debug residual =&gt; _71;<br align="left"/>debug val =&gt; _74;<br align="left"/>debug baseline_end_price_offset =&gt; _85;<br align="left"/>debug auction_end_price =&gt; _90;<br align="left"/>debug residual =&gt; _102;<br align="left"/>debug val =&gt; _105;<br align="left"/>debug residual =&gt; _107;<br align="left"/>debug val =&gt; _110;<br align="left"/>debug residual =&gt; _113;<br align="left"/>debug val =&gt; _116;<br align="left"/>debug auction_end_price =&gt; _119;<br align="left"/>debug residual =&gt; _131;<br align="left"/>debug val =&gt; _134;<br align="left"/>debug residual =&gt; _136;<br align="left"/>debug val =&gt; _139;<br align="left"/>debug residual =&gt; _142;<br align="left"/>debug val =&gt; _145;<br align="left"/>>;
    bb0__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64)<br/></td></tr><tr><td align="left">_4 = core::num::&lt;impl i64&gt;::unsigned_abs(move _5)</td></tr></table>>];
    bb1__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_1)<br/>StorageLive(_10)<br/>_10 = _2<br/></td></tr><tr><td align="left">_8 = order_params::OrderParams::get_perp_baseline_start_price_offset(move _9, move _10)</td></tr></table>>];
    bb2__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb3__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_11 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb4__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_7 as Continue).0: i64)<br/>_6 = _15<br/>StorageDead(_15)<br/>StorageDead(_7)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = (*_1)<br/></td></tr><tr><td align="left">_20 = PerpMarket::get_auction_end_min_max_divisors(move _21)</td></tr></table>>];
    bb5__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb7__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb9__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_22 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb10__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_19 as Continue).0: (u64, u64))<br/>_18 = _26<br/>StorageDead(_26)<br/>StorageLive(_16)<br/>_16 = (_18.0: u64)<br/>StorageLive(_17)<br/>_17 = (_18.1: u64)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = &amp;_2<br/>StorageLive(_30)<br/>_152 = const _<br/>_30 = &amp;(*_152)<br/></td></tr><tr><td align="left">_28 = &lt;controller::position::PositionDirection as PartialEq&gt;::eq(move _29, move _30)</td></tr></table>>];
    bb11__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb12__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb14__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>_27 = (((*_1).1: state::perp_market::AMM).66: u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>_27 = (((*_1).1: state::perp_market::AMM).65: u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = (((*_1).1: state::perp_market::AMM).60: u64)<br/>StorageLive(_35)<br/>_35 = (((*_1).1: state::perp_market::AMM).61: u64)<br/></td></tr><tr><td align="left">_33 = &lt;u64 as Ord&gt;::max(move _34, move _35)</td></tr></table>>];
    bb17__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = _27<br/></td></tr><tr><td align="left">_44 = &lt;u32 as Cast&gt;::cast::&lt;u64&gt;(move _45)</td></tr></table>>];
    bb18__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/></td></tr><tr><td align="left">_43 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _44)</td></tr></table>>];
    bb19__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_46 = discriminant(_43)<br/></td></tr><tr><td align="left">switchInt(move _46)</td></tr></table>>];
    bb20__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_43 as Continue).0: u64)<br/>_42 = _50<br/>StorageDead(_50)<br/>StorageLive(_51)<br/>_51 = _4<br/></td></tr><tr><td align="left">_41 = &lt;u64 as SafeMath&gt;::safe_mul(move _42, move _51)</td></tr></table>>];
    bb21__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_43 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_49)<br/>_49 = _47<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _49)</td></tr></table>>];
    bb22__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">_40 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _41)</td></tr></table>>];
    bb24__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>_52 = discriminant(_40)<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb25__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_40 as Continue).0: u64)<br/>_39 = _56<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">_38 = &lt;u64 as SafeMath&gt;::safe_div(move _39, const _)</td></tr></table>>];
    bb26__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_40 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_55)<br/>_55 = _53<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _55)</td></tr></table>>];
    bb27__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/></td></tr><tr><td align="left">_37 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _38)</td></tr></table>>];
    bb29__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_57 = discriminant(_37)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb30__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = ((_37 as Continue).0: u64)<br/>_36 = _61<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">_32 = &lt;u64 as Ord&gt;::max(move _33, move _36)</td></tr></table>>];
    bb31__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = ((_37 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_60)<br/>_60 = _58<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _60)</td></tr></table>>];
    bb32__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_33)<br/>StorageDead(_43)<br/>StorageDead(_40)<br/>StorageDead(_37)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = _3<br/>_63 = Ge(move _64, const 1_u64)<br/></td></tr><tr><td align="left">switchInt(move _63)</td></tr></table>>];
    bb34__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_68 = _32<br/>StorageLive(_69)<br/>_69 = _3<br/></td></tr><tr><td align="left">_67 = &lt;u64 as SafeMath&gt;::safe_mul(move _68, move _69)</td></tr></table>>];
    bb35__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">_66 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _67)</td></tr></table>>];
    bb36__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>_70 = discriminant(_66)<br/></td></tr><tr><td align="left">switchInt(move _70)</td></tr></table>>];
    bb37__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_74)<br/>_74 = ((_66 as Continue).0: u64)<br/>_65 = _74<br/>StorageDead(_74)<br/>_32 = move _65<br/>_62 = const ()<br/>StorageDead(_65)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_71)<br/>_71 = ((_66 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_73)<br/>_73 = _71<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _73)</td></tr></table>>];
    bb39__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageDead(_71)<br/>StorageDead(_65)<br/>StorageDead(_66)<br/>StorageDead(_63)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>_62 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_62)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>_76 = _32<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>_78 = _4<br/>StorageLive(_79)<br/>_79 = _16<br/>_80 = Eq(_79, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _80, &quot;attempt to divide `{}` by zero&quot;, _78)</td></tr></table>>];
    bb42__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">_77 = Div(move _78, move _79)<br/>StorageDead(_79)<br/>StorageDead(_78)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>_82 = _4<br/>StorageLive(_83)<br/>_83 = _17<br/>_84 = Eq(_83, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _84, &quot;attempt to divide `{}` by zero&quot;, _82)</td></tr></table>>];
    bb43__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">_81 = Div(move _82, move _83)<br/>StorageDead(_83)<br/>StorageDead(_82)<br/></td></tr><tr><td align="left">_75 = &lt;u64 as Ord&gt;::clamp(move _76, move _77, move _81)</td></tr></table>>];
    bb44__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>_32 = move _75<br/>StorageDead(_75)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>_87 = &amp;_2<br/>StorageLive(_88)<br/>_151 = const _<br/>_88 = &amp;(*_151)<br/></td></tr><tr><td align="left">_86 = &lt;controller::position::PositionDirection as PartialEq&gt;::eq(move _87, move _88)</td></tr></table>>];
    bb45__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left">switchInt(move _86)</td></tr></table>>];
    bb46__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_87)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>_99 = (((*_1).1: state::perp_market::AMM).43: u64)<br/>StorageLive(_100)<br/>_100 = _32<br/></td></tr><tr><td align="left">_98 = &lt;u64 as SafeMath&gt;::safe_sub(move _99, move _100)</td></tr></table>>];
    bb47__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_99)<br/></td></tr><tr><td align="left">_97 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _98)</td></tr></table>>];
    bb48__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>_101 = discriminant(_97)<br/></td></tr><tr><td align="left">switchInt(move _101)</td></tr></table>>];
    bb49__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_105)<br/>_105 = ((_97 as Continue).0: u64)<br/>_96 = _105<br/>StorageDead(_105)<br/></td></tr><tr><td align="left">_95 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _96)</td></tr></table>>];
    bb50__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_102)<br/>_102 = ((_97 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_104)<br/>_104 = _102<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _104)</td></tr></table>>];
    bb51__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/>StorageDead(_102)<br/>StorageDead(_96)<br/>StorageDead(_95)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/></td></tr><tr><td align="left">_94 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _95)</td></tr></table>>];
    bb53__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>_106 = discriminant(_94)<br/></td></tr><tr><td align="left">switchInt(move _106)</td></tr></table>>];
    bb54__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_110)<br/>_110 = ((_94 as Continue).0: i64)<br/>_93 = _110<br/>StorageDead(_110)<br/>StorageLive(_111)<br/>_111 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64)<br/></td></tr><tr><td align="left">_92 = &lt;i64 as SafeMath&gt;::safe_sub(move _93, move _111)</td></tr></table>>];
    bb55__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_107)<br/>_107 = ((_94 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_109)<br/>_109 = _107<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _109)</td></tr></table>>];
    bb56__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/>StorageDead(_107)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_93)<br/></td></tr><tr><td align="left">_91 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _92)</td></tr></table>>];
    bb58__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>_112 = discriminant(_91)<br/></td></tr><tr><td align="left">switchInt(move _112)</td></tr></table>>];
    bb59__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageLive(_116)<br/>_116 = ((_91 as Continue).0: i64)<br/>_90 = _116<br/>StorageDead(_116)<br/>StorageDead(_97)<br/>StorageDead(_94)<br/>StorageDead(_91)<br/>StorageLive(_117)<br/>_117 = _90<br/>StorageLive(_118)<br/>_118 = _6<br/></td></tr><tr><td align="left">_85 = &lt;i64 as Ord&gt;::min(move _117, move _118)</td></tr></table>>];
    bb60__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageLive(_113)<br/>_113 = ((_91 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_115)<br/>_115 = _113<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _115)</td></tr></table>>];
    bb61__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_115)<br/>StorageDead(_113)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>StorageDead(_117)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_87)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>_128 = (((*_1).1: state::perp_market::AMM).44: u64)<br/>StorageLive(_129)<br/>_129 = _32<br/></td></tr><tr><td align="left">_127 = &lt;u64 as SafeMath&gt;::safe_add(move _128, move _129)</td></tr></table>>];
    bb64__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>StorageDead(_128)<br/></td></tr><tr><td align="left">_126 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _127)</td></tr></table>>];
    bb65__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_127)<br/>_130 = discriminant(_126)<br/></td></tr><tr><td align="left">switchInt(move _130)</td></tr></table>>];
    bb66__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageLive(_134)<br/>_134 = ((_126 as Continue).0: u64)<br/>_125 = _134<br/>StorageDead(_134)<br/></td></tr><tr><td align="left">_124 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _125)</td></tr></table>>];
    bb67__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageLive(_131)<br/>_131 = ((_126 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_133)<br/>_133 = _131<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _133)</td></tr></table>>];
    bb68__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_133)<br/>StorageDead(_131)<br/>StorageDead(_125)<br/>StorageDead(_124)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb69__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/></td></tr><tr><td align="left">_123 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _124)</td></tr></table>>];
    bb70__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>_135 = discriminant(_123)<br/></td></tr><tr><td align="left">switchInt(move _135)</td></tr></table>>];
    bb71__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageLive(_139)<br/>_139 = ((_123 as Continue).0: i64)<br/>_122 = _139<br/>StorageDead(_139)<br/>StorageLive(_140)<br/>_140 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64)<br/></td></tr><tr><td align="left">_121 = &lt;i64 as SafeMath&gt;::safe_sub(move _122, move _140)</td></tr></table>>];
    bb72__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageLive(_136)<br/>_136 = ((_123 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_138)<br/>_138 = _136<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _138)</td></tr></table>>];
    bb73__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>StorageDead(_136)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb74__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_140)<br/>StorageDead(_122)<br/></td></tr><tr><td align="left">_120 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _121)</td></tr></table>>];
    bb75__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>_141 = discriminant(_120)<br/></td></tr><tr><td align="left">switchInt(move _141)</td></tr></table>>];
    bb76__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageLive(_145)<br/>_145 = ((_120 as Continue).0: i64)<br/>_119 = _145<br/>StorageDead(_145)<br/>StorageDead(_126)<br/>StorageDead(_123)<br/>StorageDead(_120)<br/>StorageLive(_146)<br/>_146 = _119<br/>StorageLive(_147)<br/>_147 = _6<br/></td></tr><tr><td align="left">_85 = &lt;i64 as Ord&gt;::max(move _146, move _147)</td></tr></table>>];
    bb77__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageLive(_142)<br/>_142 = ((_120 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_144)<br/>_144 = _142<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _144)</td></tr></table>>];
    bb78__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_144)<br/>StorageDead(_142)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb79__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_147)<br/>StorageDead(_146)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb80__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>_149 = _6<br/>StorageLive(_150)<br/>_150 = _85<br/>_148 = (move _149, move _150)<br/>StorageDead(_150)<br/>StorageDead(_149)<br/>_0 = std::result::Result::&lt;(i64, i64), error::ErrorCode&gt;::Ok(move _148)<br/>StorageDead(_148)<br/>StorageDead(_85)<br/>StorageDead(_32)<br/>StorageDead(_27)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb81__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_122)<br/>StorageDead(_121)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb82__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_126)<br/>StorageDead(_123)<br/>StorageDead(_120)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb83__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageDead(_92)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb84__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>StorageDead(_94)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb85__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_85)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb86__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb87__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_33)<br/>StorageDead(_43)<br/>StorageDead(_40)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb88__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_27)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb89__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb90__0_3644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3644 -> bb1__0_3644 [label="return"];
    bb1__0_3644 -> bb2__0_3644 [label="return"];
    bb2__0_3644 -> bb3__0_3644 [label="return"];
    bb3__0_3644 -> bb4__0_3644 [label="0"];
    bb3__0_3644 -> bb6__0_3644 [label="1"];
    bb3__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb4__0_3644 -> bb8__0_3644 [label="return"];
    bb6__0_3644 -> bb7__0_3644 [label="return"];
    bb7__0_3644 -> bb89__0_3644 [label=""];
    bb8__0_3644 -> bb9__0_3644 [label="return"];
    bb9__0_3644 -> bb10__0_3644 [label="0"];
    bb9__0_3644 -> bb11__0_3644 [label="1"];
    bb9__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb10__0_3644 -> bb13__0_3644 [label="return"];
    bb11__0_3644 -> bb12__0_3644 [label="return"];
    bb12__0_3644 -> bb89__0_3644 [label=""];
    bb13__0_3644 -> bb15__0_3644 [label="0"];
    bb13__0_3644 -> bb14__0_3644 [label="otherwise"];
    bb14__0_3644 -> bb16__0_3644 [label=""];
    bb15__0_3644 -> bb16__0_3644 [label=""];
    bb16__0_3644 -> bb17__0_3644 [label="return"];
    bb17__0_3644 -> bb18__0_3644 [label="return"];
    bb18__0_3644 -> bb19__0_3644 [label="return"];
    bb19__0_3644 -> bb20__0_3644 [label="0"];
    bb19__0_3644 -> bb21__0_3644 [label="1"];
    bb19__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb20__0_3644 -> bb23__0_3644 [label="return"];
    bb21__0_3644 -> bb22__0_3644 [label="return"];
    bb22__0_3644 -> bb86__0_3644 [label=""];
    bb23__0_3644 -> bb24__0_3644 [label="return"];
    bb24__0_3644 -> bb25__0_3644 [label="0"];
    bb24__0_3644 -> bb26__0_3644 [label="1"];
    bb24__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb25__0_3644 -> bb28__0_3644 [label="return"];
    bb26__0_3644 -> bb27__0_3644 [label="return"];
    bb27__0_3644 -> bb86__0_3644 [label=""];
    bb28__0_3644 -> bb29__0_3644 [label="return"];
    bb29__0_3644 -> bb30__0_3644 [label="0"];
    bb29__0_3644 -> bb31__0_3644 [label="1"];
    bb29__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb30__0_3644 -> bb33__0_3644 [label="return"];
    bb31__0_3644 -> bb32__0_3644 [label="return"];
    bb32__0_3644 -> bb87__0_3644 [label=""];
    bb33__0_3644 -> bb40__0_3644 [label="0"];
    bb33__0_3644 -> bb34__0_3644 [label="otherwise"];
    bb34__0_3644 -> bb35__0_3644 [label="return"];
    bb35__0_3644 -> bb36__0_3644 [label="return"];
    bb36__0_3644 -> bb37__0_3644 [label="0"];
    bb36__0_3644 -> bb38__0_3644 [label="1"];
    bb36__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb37__0_3644 -> bb41__0_3644 [label=""];
    bb38__0_3644 -> bb39__0_3644 [label="return"];
    bb39__0_3644 -> bb88__0_3644 [label=""];
    bb40__0_3644 -> bb41__0_3644 [label=""];
    bb41__0_3644 -> bb42__0_3644 [label="success"];
    bb42__0_3644 -> bb43__0_3644 [label="success"];
    bb43__0_3644 -> bb44__0_3644 [label="return"];
    bb44__0_3644 -> bb45__0_3644 [label="return"];
    bb45__0_3644 -> bb63__0_3644 [label="0"];
    bb45__0_3644 -> bb46__0_3644 [label="otherwise"];
    bb46__0_3644 -> bb47__0_3644 [label="return"];
    bb47__0_3644 -> bb48__0_3644 [label="return"];
    bb48__0_3644 -> bb49__0_3644 [label="0"];
    bb48__0_3644 -> bb50__0_3644 [label="1"];
    bb48__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb49__0_3644 -> bb52__0_3644 [label="return"];
    bb50__0_3644 -> bb51__0_3644 [label="return"];
    bb51__0_3644 -> bb83__0_3644 [label=""];
    bb52__0_3644 -> bb53__0_3644 [label="return"];
    bb53__0_3644 -> bb54__0_3644 [label="0"];
    bb53__0_3644 -> bb55__0_3644 [label="1"];
    bb53__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb54__0_3644 -> bb57__0_3644 [label="return"];
    bb55__0_3644 -> bb56__0_3644 [label="return"];
    bb56__0_3644 -> bb83__0_3644 [label=""];
    bb57__0_3644 -> bb58__0_3644 [label="return"];
    bb58__0_3644 -> bb59__0_3644 [label="0"];
    bb58__0_3644 -> bb60__0_3644 [label="1"];
    bb58__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb59__0_3644 -> bb62__0_3644 [label="return"];
    bb60__0_3644 -> bb61__0_3644 [label="return"];
    bb61__0_3644 -> bb84__0_3644 [label=""];
    bb62__0_3644 -> bb80__0_3644 [label=""];
    bb63__0_3644 -> bb64__0_3644 [label="return"];
    bb64__0_3644 -> bb65__0_3644 [label="return"];
    bb65__0_3644 -> bb66__0_3644 [label="0"];
    bb65__0_3644 -> bb67__0_3644 [label="1"];
    bb65__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb66__0_3644 -> bb69__0_3644 [label="return"];
    bb67__0_3644 -> bb68__0_3644 [label="return"];
    bb68__0_3644 -> bb81__0_3644 [label=""];
    bb69__0_3644 -> bb70__0_3644 [label="return"];
    bb70__0_3644 -> bb71__0_3644 [label="0"];
    bb70__0_3644 -> bb72__0_3644 [label="1"];
    bb70__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb71__0_3644 -> bb74__0_3644 [label="return"];
    bb72__0_3644 -> bb73__0_3644 [label="return"];
    bb73__0_3644 -> bb81__0_3644 [label=""];
    bb74__0_3644 -> bb75__0_3644 [label="return"];
    bb75__0_3644 -> bb76__0_3644 [label="0"];
    bb75__0_3644 -> bb77__0_3644 [label="1"];
    bb75__0_3644 -> bb5__0_3644 [label="otherwise"];
    bb76__0_3644 -> bb79__0_3644 [label="return"];
    bb77__0_3644 -> bb78__0_3644 [label="return"];
    bb78__0_3644 -> bb82__0_3644 [label=""];
    bb79__0_3644 -> bb80__0_3644 [label=""];
    bb80__0_3644 -> bb90__0_3644 [label=""];
    bb81__0_3644 -> bb82__0_3644 [label=""];
    bb82__0_3644 -> bb85__0_3644 [label=""];
    bb83__0_3644 -> bb84__0_3644 [label=""];
    bb84__0_3644 -> bb85__0_3644 [label=""];
    bb85__0_3644 -> bb88__0_3644 [label=""];
    bb86__0_3644 -> bb87__0_3644 [label=""];
    bb87__0_3644 -> bb88__0_3644 [label=""];
    bb88__0_3644 -> bb89__0_3644 [label=""];
    bb89__0_3644 -> bb90__0_3644 [label=""];
}
