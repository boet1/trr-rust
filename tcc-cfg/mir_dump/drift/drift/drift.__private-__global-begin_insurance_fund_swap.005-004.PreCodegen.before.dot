digraph Mir_0_19404 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn __global::begin_insurance_fund_swap(_1: &amp;ReErased anchor_lang::prelude::Pubkey, _2: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;], _3: &amp;ReErased [u8]) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: &amp;ReErased str;<br align="left"/>let _6: &amp;ReErased str;<br align="left"/>let _7: instruction::BeginInsuranceFundSwap;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;, instruction::BeginInsuranceFundSwap&gt;;<br align="left"/>let mut _9: std::result::Result&lt;instruction::BeginInsuranceFundSwap, anchor_lang::error::ErrorCode&gt;;<br align="left"/>let mut _10: std::result::Result&lt;instruction::BeginInsuranceFundSwap, std::io::Error&gt;;<br align="left"/>let mut _11: &amp;ReErased mut &amp;ReErased [u8];<br align="left"/>let mut _12: &amp;ReErased mut &amp;ReErased [u8];<br align="left"/>let mut _13: &amp;ReErased [u8];<br align="left"/>let _14: &amp;ReErased [u8];<br align="left"/>let mut _15: &amp;ReErased [u8];<br align="left"/>let mut _16: std::ops::RangeFull;<br align="left"/>let mut _17: Closure(DefId(0:19406 ~ drift[d311]::__private::__global::begin_insurance_fund_swap::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((std::io::Error,)) -&gt; anchor_lang::error::ErrorCode, []), ()]);<br align="left"/>let mut _18: isize;<br align="left"/>let _19: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;;<br align="left"/>let _22: instruction::BeginInsuranceFundSwap;<br align="left"/>let _23: u16;<br align="left"/>let _24: u16;<br align="left"/>let _25: u64;<br align="left"/>let mut _26: instructions::if_staker::InsuranceFundSwapBumps;<br align="left"/>let mut _27: std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _28: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _29: instructions::if_staker::InsuranceFundSwap&lt;ReErased&gt;;<br align="left"/>let mut _30: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, instructions::if_staker::InsuranceFundSwap&lt;ReErased&gt;&gt;;<br align="left"/>let mut _31: std::result::Result&lt;instructions::if_staker::InsuranceFundSwap&lt;ReErased&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _32: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _33: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _34: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _35: &amp;ReErased [u8];<br align="left"/>let mut _36: &amp;ReErased mut instructions::if_staker::InsuranceFundSwapBumps;<br align="left"/>let mut _37: &amp;ReErased mut instructions::if_staker::InsuranceFundSwapBumps;<br align="left"/>let mut _38: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _39: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _40: isize;<br align="left"/>let _41: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _42: !;<br align="left"/>let mut _43: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _44: instructions::if_staker::InsuranceFundSwap&lt;ReErased&gt;;<br align="left"/>let _45: ();<br align="left"/>let mut _46: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _47: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _48: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::if_staker::InsuranceFundSwap&lt;ReErased&gt;&gt;;<br align="left"/>let mut _49: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _50: &amp;ReErased mut instructions::if_staker::InsuranceFundSwap&lt;ReErased&gt;;<br align="left"/>let mut _51: &amp;ReErased mut instructions::if_staker::InsuranceFundSwap&lt;ReErased&gt;;<br align="left"/>let mut _52: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _53: instructions::if_staker::InsuranceFundSwapBumps;<br align="left"/>let mut _54: u16;<br align="left"/>let mut _55: u16;<br align="left"/>let mut _56: u64;<br align="left"/>let mut _57: isize;<br align="left"/>let _58: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _59: !;<br align="left"/>let mut _60: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _61: ();<br align="left"/>let mut _62: &amp;ReErased instructions::if_staker::InsuranceFundSwap&lt;ReErased&gt;;<br align="left"/>let mut _63: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _64: isize;<br align="left"/>let mut _65: isize;<br align="left"/>let mut _66: isize;<br align="left"/>let mut _67: isize;<br align="left"/>let mut _68: isize;<br align="left"/>let mut _69: isize;<br align="left"/>let mut _70: isize;<br align="left"/>let mut _71: isize;<br align="left"/>let mut _72: isize;<br align="left"/>let mut _73: isize;<br align="left"/>debug __program_id =&gt; _1;<br align="left"/>debug __accounts =&gt; _2;<br align="left"/>debug __ix_data =&gt; _3;<br align="left"/>debug ix =&gt; _7;<br align="left"/>debug residual =&gt; _19;<br align="left"/>debug val =&gt; _22;<br align="left"/>debug in_market_index =&gt; _23;<br align="left"/>debug out_market_index =&gt; _24;<br align="left"/>debug amount_in =&gt; _25;<br align="left"/>debug __bumps =&gt; _26;<br align="left"/>debug __reallocs =&gt; _27;<br align="left"/>debug __remaining_accounts =&gt; _28;<br align="left"/>debug __accounts =&gt; _29;<br align="left"/>debug residual =&gt; _41;<br align="left"/>debug val =&gt; _44;<br align="left"/>debug result =&gt; _45;<br align="left"/>debug residual =&gt; _58;<br align="left"/>debug val =&gt; _61;<br align="left"/>>;
    bb0__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = const &quot;Instruction: BeginInsuranceFundSwap&quot;<br/>_5 = &amp;(*_6)<br/></td></tr><tr><td align="left">_4 = solana_program::log::sol_log(move _5)</td></tr></table>>];
    bb1__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;(*_3)<br/>StorageLive(_16)<br/>_16 = RangeFull<br/></td></tr><tr><td align="left">_14 = &lt;[u8] as Index&lt;RangeFull&gt;&gt;::index(move _15, move _16)</td></tr></table>>];
    bb2__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>_13 = &amp;(*_14)<br/>_12 = &amp;mut _13<br/>_11 = &amp;mut (*_12)<br/></td></tr><tr><td align="left">_10 = &lt;BeginInsuranceFundSwap as BorshDeserialize&gt;::deserialize(move _11)</td></tr></table>>];
    bb3__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageLive(_17)<br/>_17 = {closure@programs/drift/src/lib.rs:69:1: 69:11}<br/></td></tr><tr><td align="left">_9 = std::result::Result::&lt;BeginInsuranceFundSwap, std::io::Error&gt;::map_err::&lt;anchor_lang::error::ErrorCode, {closure@programs/drift/src/lib.rs:69:1: 69:11}&gt;(move _10, move _17)</td></tr></table>>];
    bb4__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;BeginInsuranceFundSwap, anchor_lang::error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb5__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_18 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb6__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = move ((_8 as Continue).0: instruction::BeginInsuranceFundSwap)<br/>_7 = move _22<br/>StorageDead(_22)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/>StorageLive(_23)<br/>_23 = (_7.0: u16)<br/>StorageLive(_24)<br/>_24 = (_7.1: u16)<br/>StorageLive(_25)<br/>_25 = (_7.2: u64)<br/>StorageLive(_26)<br/></td></tr><tr><td align="left">_26 = &lt;InsuranceFundSwapBumps as Default&gt;::default()</td></tr></table>>];
    bb7__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;)<br/>StorageLive(_21)<br/>_21 = _19<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::ErrorCode&gt;&gt;&gt;::from_residual(move _21)</td></tr></table>>];
    bb9__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/></td></tr><tr><td align="left">_27 = BTreeSet::&lt;anchor_lang::prelude::Pubkey&gt;::new()</td></tr></table>>];
    bb11__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = &amp;(*_2)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;(*_1)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = &amp;mut _28<br/>_33 = &amp;mut (*_34)<br/>StorageLive(_35)<br/>_35 = &amp;(*_3)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = &amp;mut _26<br/>_36 = &amp;mut (*_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = &amp;mut _27<br/>_38 = &amp;mut (*_39)<br/></td></tr><tr><td align="left">_31 = &lt;if_staker::InsuranceFundSwap&lt;'_&gt; as anchor_lang::Accounts&lt;'_, InsuranceFundSwapBumps&gt;&gt;::try_accounts(move _32, move _33, move _35, move _36, move _38)</td></tr></table>>];
    bb12__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_30 = &lt;std::result::Result&lt;if_staker::InsuranceFundSwap&lt;'_&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _31)</td></tr></table>>];
    bb13__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>_40 = discriminant(_30)<br/></td></tr><tr><td align="left">switchInt(move _40)</td></tr></table>>];
    bb14__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = move ((_30 as Continue).0: instructions::if_staker::InsuranceFundSwap&lt;'_&gt;)<br/>_29 = move _44<br/>StorageDead(_44)<br/>_64 = discriminant(_30)<br/>StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_30)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = &amp;(*_1)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = &amp;mut _29<br/>_50 = &amp;mut (*_51)<br/>StorageLive(_52)<br/>_52 = &amp;(*_28)<br/>StorageLive(_53)<br/>_53 = move _26<br/></td></tr><tr><td align="left">_48 = anchor_lang::context::Context::&lt;'_, '_, '_, '_, if_staker::InsuranceFundSwap&lt;'_&gt;&gt;::new(move _49, move _50, move _52, move _53)</td></tr></table>>];
    bb15__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = move ((_30 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_43)<br/>_43 = move _41<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _43)</td></tr></table>>];
    bb16__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_41)<br/>_70 = discriminant(_30)<br/>StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_52)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/>StorageLive(_54)<br/>_54 = _23<br/>StorageLive(_55)<br/>_55 = _24<br/>StorageLive(_56)<br/>_56 = _25<br/></td></tr><tr><td align="left">_47 = drift::begin_insurance_fund_swap::&lt;'_, '_&gt;(move _48, move _54, move _55, move _56)</td></tr></table>>];
    bb18__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">_46 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _47)</td></tr></table>>];
    bb19__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>_57 = discriminant(_46)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb20__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = ((_46 as Continue).0: ())<br/>_45 = _61<br/>StorageDead(_61)<br/>_66 = discriminant(_46)<br/>StorageDead(_51)<br/>StorageDead(_46)<br/>StorageLive(_62)<br/>_62 = &amp;_29<br/>StorageLive(_63)<br/>_63 = &amp;(*_1)<br/></td></tr><tr><td align="left">_0 = &lt;if_staker::InsuranceFundSwap&lt;'_&gt; as anchor_lang::AccountsExit&lt;'_&gt;&gt;::exit(move _62, move _63)</td></tr></table>>];
    bb21__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = move ((_46 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_60)<br/>_60 = move _58<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _60)</td></tr></table>>];
    bb22__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_58)<br/>_68 = discriminant(_46)<br/>StorageDead(_51)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">drop(_29)</td></tr></table>>];
    bb23__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_62)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">drop(_29)</td></tr></table>>];
    bb24__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">drop(_27)</td></tr></table>>];
    bb25__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">drop(_27)</td></tr></table>>];
    bb27__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left">return</td></tr></table>>];
    bb30__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">30 (cleanup)</td></tr><tr><td align="left">drop(_29)</td></tr></table>>];
    bb31__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">31 (cleanup)</td></tr><tr><td align="left">drop(_27)</td></tr></table>>];
    bb32__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">32 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb33__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">33 (cleanup)</td></tr><tr><td align="left" balign="left">_72 = discriminant(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_19404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">34 (cleanup)</td></tr><tr><td align="left" balign="left">_73 = discriminant(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_19404 -> bb1__0_19404 [label="return"];
    bb1__0_19404 -> bb2__0_19404 [label="return"];
    bb2__0_19404 -> bb3__0_19404 [label="return"];
    bb3__0_19404 -> bb4__0_19404 [label="return"];
    bb3__0_19404 -> bb32__0_19404 [label="unwind"];
    bb4__0_19404 -> bb5__0_19404 [label="return"];
    bb5__0_19404 -> bb6__0_19404 [label="0"];
    bb5__0_19404 -> bb8__0_19404 [label="1"];
    bb5__0_19404 -> bb7__0_19404 [label="otherwise"];
    bb6__0_19404 -> bb10__0_19404 [label="return"];
    bb8__0_19404 -> bb9__0_19404 [label="return"];
    bb9__0_19404 -> bb28__0_19404 [label=""];
    bb10__0_19404 -> bb11__0_19404 [label="return"];
    bb11__0_19404 -> bb12__0_19404 [label="return"];
    bb11__0_19404 -> bb31__0_19404 [label="unwind"];
    bb12__0_19404 -> bb13__0_19404 [label="return"];
    bb12__0_19404 -> bb31__0_19404 [label="unwind"];
    bb13__0_19404 -> bb14__0_19404 [label="0"];
    bb13__0_19404 -> bb15__0_19404 [label="1"];
    bb13__0_19404 -> bb7__0_19404 [label="otherwise"];
    bb14__0_19404 -> bb17__0_19404 [label="return"];
    bb14__0_19404 -> bb30__0_19404 [label="unwind"];
    bb15__0_19404 -> bb16__0_19404 [label="return"];
    bb15__0_19404 -> bb34__0_19404 [label="unwind"];
    bb16__0_19404 -> bb26__0_19404 [label=""];
    bb17__0_19404 -> bb18__0_19404 [label="return"];
    bb17__0_19404 -> bb30__0_19404 [label="unwind"];
    bb18__0_19404 -> bb19__0_19404 [label="return"];
    bb18__0_19404 -> bb30__0_19404 [label="unwind"];
    bb19__0_19404 -> bb20__0_19404 [label="0"];
    bb19__0_19404 -> bb21__0_19404 [label="1"];
    bb19__0_19404 -> bb7__0_19404 [label="otherwise"];
    bb20__0_19404 -> bb23__0_19404 [label="return"];
    bb20__0_19404 -> bb30__0_19404 [label="unwind"];
    bb21__0_19404 -> bb22__0_19404 [label="return"];
    bb21__0_19404 -> bb33__0_19404 [label="unwind"];
    bb22__0_19404 -> bb26__0_19404 [label="return"];
    bb22__0_19404 -> bb31__0_19404 [label="unwind"];
    bb23__0_19404 -> bb24__0_19404 [label="return"];
    bb23__0_19404 -> bb31__0_19404 [label="unwind"];
    bb24__0_19404 -> bb25__0_19404 [label="return"];
    bb24__0_19404 -> bb32__0_19404 [label="unwind"];
    bb25__0_19404 -> bb29__0_19404 [label=""];
    bb26__0_19404 -> bb27__0_19404 [label="return"];
    bb26__0_19404 -> bb32__0_19404 [label="unwind"];
    bb27__0_19404 -> bb28__0_19404 [label=""];
    bb28__0_19404 -> bb29__0_19404 [label=""];
    bb30__0_19404 -> bb31__0_19404 [label="return"];
    bb31__0_19404 -> bb32__0_19404 [label="return"];
    bb33__0_19404 -> bb30__0_19404 [label=""];
    bb34__0_19404 -> bb31__0_19404 [label=""];
}
