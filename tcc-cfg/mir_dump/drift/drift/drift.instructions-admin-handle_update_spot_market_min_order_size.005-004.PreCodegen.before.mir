// MIR for `admin::handle_update_spot_market_min_order_size` before PreCodegen

fn admin::handle_update_spot_market_min_order_size(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug order_size => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _14: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 1];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &u16;
    let _43: &u16;
    let _44: &state::spot_market::SpotMarket;
    let mut _45: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _46: ();
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _48: std::result::Result<(), error::ErrorCode>;
    let mut _49: bool;
    let mut _50: u16;
    let mut _51: &state::spot_market::SpotMarket;
    let mut _52: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _53: bool;
    let mut _54: u64;
    let mut _55: ();
    let _57: ();
    let mut _58: &str;
    let _59: &str;
    let mut _60: &std::string::String;
    let _61: &std::string::String;
    let _62: std::string::String;
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[&str; 2];
    let _67: &[&str; 2];
    let _68: [&str; 2];
    let mut _69: &[core::fmt::rt::Argument<'_>];
    let mut _70: &[core::fmt::rt::Argument<'_>; 1];
    let _71: &[core::fmt::rt::Argument<'_>; 1];
    let _72: [core::fmt::rt::Argument<'_>; 1];
    let mut _73: core::fmt::rt::Argument<'_>;
    let mut _74: &error::ErrorCode;
    let _75: &error::ErrorCode;
    let mut _76: error::ErrorCode;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: &std::string::String;
    let _86: &std::string::String;
    let _87: std::string::String;
    let mut _89: std::fmt::Arguments<'_>;
    let mut _90: &[&str];
    let mut _91: &[&str; 2];
    let _92: &[&str; 2];
    let _93: [&str; 2];
    let mut _94: &[core::fmt::rt::Argument<'_>];
    let mut _95: &[core::fmt::rt::Argument<'_>; 2];
    let _96: &[core::fmt::rt::Argument<'_>; 2];
    let _97: [core::fmt::rt::Argument<'_>; 2];
    let mut _98: core::fmt::rt::Argument<'_>;
    let mut _99: &u64;
    let _100: &u64;
    let _101: &state::spot_market::SpotMarket;
    let mut _102: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _103: core::fmt::rt::Argument<'_>;
    let mut _104: &u64;
    let _105: &u64;
    let mut _106: u64;
    let mut _107: &mut state::spot_market::SpotMarket;
    let mut _108: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _109: ();
    let mut _113: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _114: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _13;
        let _31: std::string::String;
        let _56: error::ErrorCode;
        let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _81: ();
        let _88: std::string::String;
        let mut _110: &[&str; 2];
        let mut _112: &[&str; 1];
        scope 10 {
            debug res => _31;
        }
        scope 11 {
            debug error_code => _56;
            let _63: std::string::String;
            let mut _111: &[&str; 2];
            scope 12 {
                debug res => _63;
            }
        }
        scope 13 {
            debug residual => _78;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _81;
            scope 16 {
            }
        }
        scope 17 {
            debug res => _88;
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _113 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _7 = &((*_113).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _6 = &(*_7);
        _5 = constraints::spot_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _115 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _114 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _18 = &((*_114).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb54];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _121 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb47;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb52];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb52];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _119 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _112 = const _;
        _35 = &(*_112);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_13);
        _44 = <RefMut<'_, SpotMarket> as Deref>::deref(move _45) -> [return: bb13, unwind: bb51];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb53];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _117 = discriminant(_15);
        StorageDead(_15);
        goto -> bb46;
    }

    bb13: {
        StorageDead(_45);
        _43 = &((*_44).42: u16);
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _42) -> [return: bb14, unwind: bb51];
    }

    bb14: {
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb15, unwind: bb51];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <String as Deref>::deref(move _28) -> [return: bb17, unwind: bb50];
    }

    bb17: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb18, unwind: bb50];
    }

    bb18: {
        StorageDead(_26);
        drop(_30) -> [return: bb19, unwind: bb51];
    }

    bb19: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &(*_13);
        _51 = <RefMut<'_, SpotMarket> as Deref>::deref(move _52) -> [return: bb20, unwind: bb51];
    }

    bb20: {
        StorageDead(_52);
        _50 = ((*_51).42: u16);
        _49 = Eq(move _50, const 0_u16);
        switchInt(move _49) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb23;
    }

    bb22: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _2;
        _53 = Gt(move _54, const 0_u64);
        switchInt(move _53) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_54);
        StorageLive(_55);
        _55 = ();
        _48 = std::result::Result::<(), error::ErrorCode>::Ok(move _55);
        StorageDead(_55);
        goto -> bb31;
    }

    bb24: {
        StorageDead(_54);
        StorageLive(_56);
        _56 = error::ErrorCode::DefaultError;
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _111 = const _;
        _67 = &(*_111);
        _66 = &(*_67);
        _65 = move _66 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_56;
        _74 = &(*_75);
        _73 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _74) -> [return: bb25, unwind: bb51];
    }

    bb25: {
        StorageDead(_74);
        _72 = [move _73];
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = move _70 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_70);
        _64 = Arguments::<'_>::new_v1(move _65, move _69) -> [return: bb26, unwind: bb51];
    }

    bb26: {
        StorageDead(_69);
        StorageDead(_65);
        _63 = format(move _64) -> [return: bb27, unwind: bb51];
    }

    bb27: {
        StorageDead(_64);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        _62 = move _63;
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = <String as Deref>::deref(move _60) -> [return: bb28, unwind: bb49];
    }

    bb28: {
        _58 = &(*_59);
        StorageDead(_60);
        _57 = solana_program::log::sol_log(move _58) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        StorageDead(_58);
        drop(_62) -> [return: bb30, unwind: bb51];
    }

    bb30: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_76);
        _76 = _56;
        _48 = std::result::Result::<(), error::ErrorCode>::Err(move _76);
        StorageDead(_76);
        StorageDead(_56);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_53);
        StorageDead(_49);
        _47 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _48) -> [return: bb32, unwind: bb51];
    }

    bb32: {
        StorageDead(_48);
        _77 = discriminant(_47);
        switchInt(move _77) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_81);
        _81 = ((_47 as Continue).0: ());
        _46 = _81;
        StorageDead(_81);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _110 = const _;
        _92 = &(*_110);
        _91 = &(*_92);
        _90 = move _91 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &(*_13);
        _101 = <RefMut<'_, SpotMarket> as Deref>::deref(move _102) -> [return: bb36, unwind: bb51];
    }

    bb34: {
        StorageLive(_78);
        _78 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb35, unwind: bb51];
    }

    bb35: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_47);
        StorageDead(_46);
        drop(_14) -> [return: bb46, unwind: bb52];
    }

    bb36: {
        StorageDead(_102);
        _100 = &((*_101).27: u64);
        _99 = &(*_100);
        _98 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _99) -> [return: bb37, unwind: bb51];
    }

    bb37: {
        StorageDead(_99);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_2;
        _104 = &(*_105);
        _103 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _104) -> [return: bb38, unwind: bb51];
    }

    bb38: {
        StorageDead(_104);
        _97 = [move _98, move _103];
        StorageDead(_103);
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = move _95 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_95);
        _89 = Arguments::<'_>::new_v1(move _90, move _94) -> [return: bb39, unwind: bb51];
    }

    bb39: {
        StorageDead(_94);
        StorageDead(_90);
        _88 = format(move _89) -> [return: bb40, unwind: bb51];
    }

    bb40: {
        StorageDead(_89);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_92);
        _87 = move _88;
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = <String as Deref>::deref(move _85) -> [return: bb41, unwind: bb48];
    }

    bb41: {
        _83 = &(*_84);
        StorageDead(_85);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb42, unwind: bb48];
    }

    bb42: {
        StorageDead(_83);
        drop(_87) -> [return: bb43, unwind: bb51];
    }

    bb43: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_106);
        _106 = _2;
        StorageLive(_107);
        StorageLive(_108);
        _108 = &mut (*_13);
        _107 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _108) -> [return: bb44, unwind: bb51];
    }

    bb44: {
        StorageDead(_108);
        ((*_107).27: u64) = move _106;
        StorageDead(_106);
        StorageDead(_107);
        StorageLive(_109);
        _109 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _109);
        StorageDead(_109);
        drop(_14) -> [return: bb45, unwind: bb52];
    }

    bb45: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb47;
    }

    bb46: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb47;
    }

    bb47: {
        return;
    }

    bb48 (cleanup): {
        drop(_87) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_62) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_30) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_14) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        resume;
    }

    bb53 (cleanup): {
        _123 = discriminant(_15);
        goto -> bb52;
    }

    bb54 (cleanup): {
        _124 = discriminant(_4);
        goto -> bb52;
    }
}
