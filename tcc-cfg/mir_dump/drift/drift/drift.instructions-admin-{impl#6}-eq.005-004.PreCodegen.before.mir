// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:1688:66: 1688:75>::eq` before PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:1688:66: 1688:75>::eq(_1: &admin::UpdatePerpMarketSummaryStatsParams, _2: &admin::UpdatePerpMarketSummaryStatsParams) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::option::Option<i64>;
    let mut _5: &std::option::Option<i64>;
    let mut _6: bool;
    let mut _7: &std::option::Option<i64>;
    let mut _8: &std::option::Option<i64>;
    let mut _9: bool;
    let mut _10: &std::option::Option<bool>;
    let mut _11: &std::option::Option<bool>;
    let mut _12: &std::option::Option<bool>;
    let mut _13: &std::option::Option<bool>;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: std::option::Option<i64>);
        StorageLive(_5);
        _5 = &((*_2).0: std::option::Option<i64>);
        _3 = <Option<i64> as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: std::option::Option<i64>);
        StorageLive(_8);
        _8 = &((*_2).1: std::option::Option<i64>);
        _6 = <Option<i64> as PartialEq>::eq(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: std::option::Option<bool>);
        StorageLive(_11);
        _11 = &((*_2).2: std::option::Option<bool>);
        _9 = <Option<bool> as PartialEq>::eq(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _9) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        _12 = &((*_1).3: std::option::Option<bool>);
        StorageLive(_13);
        _13 = &((*_2).3: std::option::Option<bool>);
        _0 = <Option<bool> as PartialEq>::eq(move _12, move _13) -> [return: bb11, unwind continue];
    }

    bb7: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb10;
    }

    bb8: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb10;
    }

    bb10: {
        _0 = const false;
        goto -> bb12;
    }

    bb11: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
