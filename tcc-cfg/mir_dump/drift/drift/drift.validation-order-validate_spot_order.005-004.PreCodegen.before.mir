// MIR for `validate_spot_order` before PreCodegen

fn validate_spot_order(_1: &Order, _2: u64, _3: u64) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug step_size => _2;
    debug min_order_size => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: isize;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _7: std::result::Result<(), error::ErrorCode>;
    let mut _8: &state::user::Order;
    let mut _9: u64;
    let mut _10: u64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: ();
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _17: std::result::Result<(), error::ErrorCode>;
    let mut _18: &state::user::Order;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _27: std::result::Result<(), error::ErrorCode>;
    let mut _28: &state::user::Order;
    let mut _29: u64;
    let mut _30: u64;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: ();
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _37: std::result::Result<(), error::ErrorCode>;
    let mut _38: &state::user::Order;
    let mut _39: u64;
    let mut _40: u64;
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: ();
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _47: std::result::Result<(), error::ErrorCode>;
    let mut _48: &state::user::Order;
    let mut _49: u64;
    let mut _50: u64;
    let mut _51: isize;
    let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _55: ();
    let mut _56: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _22;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _25;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _32;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _35;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _42;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _45;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _52;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _55;
        scope 20 {
        }
    }

    bb0: {
        StorageLive(_4);
        _5 = discriminant(((*_1).13: state::user::OrderType));
        switchInt(move _5) -> [0: bb3, 1: bb9, 2: bb15, 3: bb21, 4: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_1);
        StorageLive(_49);
        _49 = _2;
        StorageLive(_50);
        _50 = _3;
        _47 = validate_oracle_order(move _48, move _49, move _50) -> [return: bb27, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        StorageLive(_9);
        _9 = _2;
        StorageLive(_10);
        _10 = _3;
        _7 = validate_market_order(move _8, move _9, move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_15);
        _15 = ((_6 as Continue).0: ());
        _4 = _15;
        StorageDead(_15);
        StorageDead(_6);
        goto -> bb32;
    }

    bb7: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        goto -> bb33;
    }

    bb9: {
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_1);
        StorageLive(_19);
        _19 = _2;
        StorageLive(_20);
        _20 = _3;
        _17 = validate_spot_limit_order(move _18, move _19, move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        StorageLive(_25);
        _25 = ((_16 as Continue).0: ());
        _4 = _25;
        StorageDead(_25);
        StorageDead(_16);
        goto -> bb32;
    }

    bb13: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_16);
        goto -> bb33;
    }

    bb15: {
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_1);
        StorageLive(_29);
        _29 = _2;
        StorageLive(_30);
        _30 = _3;
        _27 = validate_trigger_market_order(move _28, move _29, move _30) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        _26 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _27) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb18, 1: bb19, otherwise: bb2];
    }

    bb18: {
        StorageLive(_35);
        _35 = ((_26 as Continue).0: ());
        _4 = _35;
        StorageDead(_35);
        StorageDead(_26);
        goto -> bb32;
    }

    bb19: {
        StorageLive(_32);
        _32 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_26);
        goto -> bb33;
    }

    bb21: {
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_1);
        StorageLive(_39);
        _39 = _2;
        StorageLive(_40);
        _40 = _3;
        _37 = validate_trigger_limit_order(move _38, move _39, move _40) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        _36 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _37) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_37);
        _41 = discriminant(_36);
        switchInt(move _41) -> [0: bb24, 1: bb25, otherwise: bb2];
    }

    bb24: {
        StorageLive(_45);
        _45 = ((_36 as Continue).0: ());
        _4 = _45;
        StorageDead(_45);
        StorageDead(_36);
        goto -> bb32;
    }

    bb25: {
        StorageLive(_42);
        _42 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_36);
        goto -> bb33;
    }

    bb27: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _46 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _47) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_47);
        _51 = discriminant(_46);
        switchInt(move _51) -> [0: bb29, 1: bb30, otherwise: bb2];
    }

    bb29: {
        StorageLive(_55);
        _55 = ((_46 as Continue).0: ());
        _4 = _55;
        StorageDead(_55);
        StorageDead(_46);
        goto -> bb32;
    }

    bb30: {
        StorageLive(_52);
        _52 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_46);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_4);
        StorageLive(_56);
        _56 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _56);
        StorageDead(_56);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_4);
        goto -> bb34;
    }

    bb34: {
        return;
    }
}
