// MIR for `calculate_max_borrow_token_amount` after PreCodegen

fn calculate_max_borrow_token_amount(_1: u128, _2: u128, _3: u128, _4: u128, _5: u128, _6: u8) -> std::result::Result<u128, error::ErrorCode> {
    debug deposit_token_amount => _1;
    debug deposit_token_twap => _2;
    debug borrow_token_twap => _3;
    debug withdraw_guard_threshold => _4;
    debug max_token_borrows => _5;
    debug pool_id => _6;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _7: u128;
    let mut _8: u128;
    let mut _9: u128;
    let mut _11: bool;
    let mut _12: u8;
    let mut _13: u128;
    let mut _14: u128;
    let mut _15: u128;
    let mut _16: u128;
    let mut _17: u128;
    let mut _18: u128;
    let mut _19: bool;
    let mut _20: u128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: u128;
    let mut _24: u128;
    let mut _25: u128;
    let mut _26: bool;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: u128;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _34: std::result::Result<u128, error::ErrorCode>;
    let mut _35: u128;
    let mut _36: u128;
    let mut _37: u128;
    let mut _38: bool;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: u128;
    let mut _45: u128;
    let mut _46: u128;
    let mut _47: u128;
    let mut _48: u128;
    let mut _49: u128;
    let mut _50: u128;
    let mut _51: bool;
    let mut _52: u128;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _54: std::result::Result<u128, error::ErrorCode>;
    let mut _55: u128;
    let mut _56: u128;
    let mut _57: u128;
    let mut _58: bool;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: u128;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _66: std::result::Result<u128, error::ErrorCode>;
    let mut _67: u128;
    let mut _68: u128;
    let mut _69: u128;
    let mut _70: bool;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: u128;
    let mut _77: u128;
    scope 1 {
        debug lesser_deposit_amount => _7;
        let _10: u128;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: u128;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: u128;
        let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _63: u128;
        let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _75: u128;
        scope 2 {
            debug max_borrow_token => _10;
        }
        scope 3 {
            debug residual => _28;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _31;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _40;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _43;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _60;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _63;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _72;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _75;
            scope 18 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        StorageLive(_9);
        _9 = _2;
        _7 = <u128 as Ord>::min(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _6;
        _11 = Eq(move _12, const 0_u8);
        switchInt(move _11) -> [0: bb21, otherwise: bb2];
    }

    bb2: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _4;
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _7;
        _19 = Eq(const 3_u128, const 0_u128);
        assert(!move _19, "attempt to divide `{}` by zero", _18) -> [success: bb3, unwind continue];
    }

    bb3: {
        _17 = Div(move _18, const 3_u128);
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _3;
        StorageLive(_24);
        StorageLive(_25);
        _25 = _7;
        _26 = Eq(const 5_u128, const 0_u128);
        assert(!move _26, "attempt to divide `{}` by zero", _25) -> [success: bb4, unwind continue];
    }

    bb4: {
        _24 = Div(move _25, const 5_u128);
        StorageDead(_25);
        _22 = <u128 as SafeMath>::safe_add(move _23, move _24) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_22);
        _27 = discriminant(_21);
        switchInt(move _27) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_31);
        _31 = ((_21 as Continue).0: u128);
        _20 = _31;
        StorageDead(_31);
        _16 = <u128 as Ord>::max(move _17, move _20) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_28);
        _28 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb41;
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_17);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _7;
        StorageLive(_36);
        StorageLive(_37);
        _37 = _7;
        _38 = Eq(const 14_u128, const 0_u128);
        assert(!move _38, "attempt to divide `{}` by zero", _37) -> [success: bb12, unwind continue];
    }

    bb12: {
        _36 = Div(move _37, const 14_u128);
        StorageDead(_37);
        _34 = <u128 as SafeMath>::safe_sub(move _35, move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        _39 = discriminant(_33);
        switchInt(move _39) -> [0: bb15, 1: bb16, otherwise: bb8];
    }

    bb15: {
        StorageLive(_43);
        _43 = ((_33 as Continue).0: u128);
        _32 = _43;
        StorageDead(_43);
        _15 = <u128 as Ord>::min(move _16, move _32) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_40);
        _40 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_32);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_33);
        goto -> bb41;
    }

    bb18: {
        StorageDead(_32);
        StorageDead(_16);
        _13 = <u128 as Ord>::max(move _14, move _15) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_44);
        _44 = _5;
        _10 = <u128 as Ord>::min(move _13, move _44) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_13);
        StorageDead(_33);
        StorageDead(_21);
        goto -> bb39;
    }

    bb21: {
        StorageDead(_12);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _4;
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _7;
        _51 = Eq(const 2_u128, const 0_u128);
        assert(!move _51, "attempt to divide `{}` by zero", _50) -> [success: bb22, unwind continue];
    }

    bb22: {
        _49 = Div(move _50, const 2_u128);
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _3;
        StorageLive(_56);
        StorageLive(_57);
        _57 = _7;
        _58 = Eq(const 3_u128, const 0_u128);
        assert(!move _58, "attempt to divide `{}` by zero", _57) -> [success: bb23, unwind continue];
    }

    bb23: {
        _56 = Div(move _57, const 3_u128);
        StorageDead(_57);
        _54 = <u128 as SafeMath>::safe_add(move _55, move _56) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _54) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_54);
        _59 = discriminant(_53);
        switchInt(move _59) -> [0: bb26, 1: bb27, otherwise: bb8];
    }

    bb26: {
        StorageLive(_63);
        _63 = ((_53 as Continue).0: u128);
        _52 = _63;
        StorageDead(_63);
        _48 = <u128 as Ord>::max(move _49, move _52) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_60);
        _60 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb40;
    }

    bb29: {
        StorageDead(_52);
        StorageDead(_49);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _7;
        StorageLive(_68);
        StorageLive(_69);
        _69 = _7;
        _70 = Eq(const 20_u128, const 0_u128);
        assert(!move _70, "attempt to divide `{}` by zero", _69) -> [success: bb30, unwind continue];
    }

    bb30: {
        _68 = Div(move _69, const 20_u128);
        StorageDead(_69);
        _66 = <u128 as SafeMath>::safe_sub(move _67, move _68) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_68);
        StorageDead(_67);
        _65 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _66) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_66);
        _71 = discriminant(_65);
        switchInt(move _71) -> [0: bb33, 1: bb34, otherwise: bb8];
    }

    bb33: {
        StorageLive(_75);
        _75 = ((_65 as Continue).0: u128);
        _64 = _75;
        StorageDead(_75);
        _47 = <u128 as Ord>::min(move _48, move _64) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_72);
        _72 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_64);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_65);
        goto -> bb40;
    }

    bb36: {
        StorageDead(_64);
        StorageDead(_48);
        _45 = <u128 as Ord>::max(move _46, move _47) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_76);
        _76 = _5;
        _10 = <u128 as Ord>::min(move _45, move _76) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_45);
        StorageDead(_65);
        StorageDead(_53);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_11);
        StorageLive(_77);
        _77 = _10;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _77);
        StorageDead(_77);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb43;
    }

    bb40: {
        StorageDead(_53);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_21);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb43;
    }

    bb43: {
        return;
    }
}
