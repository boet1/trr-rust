// MIR for `update_spot_balances_and_cumulative_deposits_with_limits` before PreCodegen

fn update_spot_balances_and_cumulative_deposits_with_limits(_1: u128, _2: &SpotBalanceType, _3: &mut SpotMarket, _4: &mut User) -> std::result::Result<(), error::ErrorCode> {
    debug token_amount => _1;
    debug update_direction => _2;
    debug spot_market => _3;
    debug user => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: usize;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _7: std::result::Result<usize, error::ErrorCode>;
    let mut _8: &mut state::user::User;
    let mut _9: u16;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: usize;
    let _15: ();
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _17: std::result::Result<(), error::ErrorCode>;
    let mut _18: u128;
    let mut _19: &state::spot_market::SpotBalanceType;
    let mut _20: &mut state::spot_market::SpotMarket;
    let mut _21: &mut state::user::SpotPosition;
    let mut _22: &mut state::user::SpotPosition;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _26: std::option::Option<u128>;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _34: std::result::Result<bool, error::ErrorCode>;
    let mut _35: &state::spot_market::SpotMarket;
    let mut _36: std::option::Option<&state::user::User>;
    let mut _37: &state::user::User;
    let mut _38: std::option::Option<u128>;
    let mut _39: u128;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: ();
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _47: std::result::Result<(), error::ErrorCode>;
    let mut _48: bool;
    let mut _49: ();
    let _51: ();
    let mut _52: &str;
    let _53: &str;
    let mut _54: &std::string::String;
    let _55: &std::string::String;
    let _56: std::string::String;
    let mut _58: std::fmt::Arguments<'_>;
    let mut _59: &[&str];
    let mut _60: &[&str; 2];
    let _61: &[&str; 2];
    let _62: [&str; 2];
    let mut _63: &[core::fmt::rt::Argument<'_>];
    let mut _64: &[core::fmt::rt::Argument<'_>; 1];
    let _65: &[core::fmt::rt::Argument<'_>; 1];
    let _66: [core::fmt::rt::Argument<'_>; 1];
    let mut _67: core::fmt::rt::Argument<'_>;
    let mut _68: &error::ErrorCode;
    let _69: &error::ErrorCode;
    let _70: ();
    let mut _71: &str;
    let _72: &str;
    let mut _73: &std::string::String;
    let _74: &std::string::String;
    let _75: std::string::String;
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[&str; 3];
    let _80: &[&str; 3];
    let _81: [&str; 3];
    let mut _82: &[core::fmt::rt::Argument<'_>];
    let mut _83: &[core::fmt::rt::Argument<'_>; 3];
    let _84: &[core::fmt::rt::Argument<'_>; 3];
    let _85: [core::fmt::rt::Argument<'_>; 3];
    let mut _86: core::fmt::rt::Argument<'_>;
    let mut _87: &u16;
    let _88: &u16;
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &u128;
    let _91: &u128;
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: &anchor_lang::prelude::Pubkey;
    let _94: &anchor_lang::prelude::Pubkey;
    let mut _95: error::ErrorCode;
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _101: ();
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _103: std::result::Result<(), error::ErrorCode>;
    let mut _104: bool;
    let mut _105: isize;
    let mut _106: ();
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _111: &std::string::String;
    let _112: &std::string::String;
    let _113: std::string::String;
    let mut _115: std::fmt::Arguments<'_>;
    let mut _116: &[&str];
    let mut _117: &[&str; 2];
    let _118: &[&str; 2];
    let _119: [&str; 2];
    let mut _120: &[core::fmt::rt::Argument<'_>];
    let mut _121: &[core::fmt::rt::Argument<'_>; 1];
    let _122: &[core::fmt::rt::Argument<'_>; 1];
    let _123: [core::fmt::rt::Argument<'_>; 1];
    let mut _124: core::fmt::rt::Argument<'_>;
    let mut _125: &error::ErrorCode;
    let _126: &error::ErrorCode;
    let _127: ();
    let mut _128: &str;
    let _129: &str;
    let mut _130: &std::string::String;
    let _131: &std::string::String;
    let _132: std::string::String;
    let mut _134: std::fmt::Arguments<'_>;
    let mut _135: &[&str];
    let mut _136: &[&str; 2];
    let _137: &[&str; 2];
    let _138: [&str; 2];
    let mut _139: &[core::fmt::rt::Argument<'_>];
    let mut _140: &[core::fmt::rt::Argument<'_>; 1];
    let _141: &[core::fmt::rt::Argument<'_>; 1];
    let _142: [core::fmt::rt::Argument<'_>; 1];
    let mut _143: core::fmt::rt::Argument<'_>;
    let mut _144: &u16;
    let _145: &u16;
    let mut _146: error::ErrorCode;
    let mut _147: isize;
    let mut _149: !;
    let mut _150: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _152: ();
    let mut _153: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _154: std::result::Result<(), error::ErrorCode>;
    let mut _155: bool;
    let mut _156: &state::spot_market::SpotMarket;
    let mut _157: state::paused_operations::SpotOperation;
    let mut _158: ();
    let _160: ();
    let mut _161: &str;
    let _162: &str;
    let mut _163: &std::string::String;
    let _164: &std::string::String;
    let _165: std::string::String;
    let mut _167: std::fmt::Arguments<'_>;
    let mut _168: &[&str];
    let mut _169: &[&str; 2];
    let _170: &[&str; 2];
    let _171: [&str; 2];
    let mut _172: &[core::fmt::rt::Argument<'_>];
    let mut _173: &[core::fmt::rt::Argument<'_>; 1];
    let _174: &[core::fmt::rt::Argument<'_>; 1];
    let _175: [core::fmt::rt::Argument<'_>; 1];
    let mut _176: core::fmt::rt::Argument<'_>;
    let mut _177: &error::ErrorCode;
    let _178: &error::ErrorCode;
    let _179: ();
    let mut _180: &str;
    let _181: &str;
    let mut _182: &std::string::String;
    let _183: &std::string::String;
    let _184: std::string::String;
    let mut _186: std::fmt::Arguments<'_>;
    let mut _187: &[&str];
    let mut _188: &[&str; 2];
    let _189: &[&str; 2];
    let _190: [&str; 2];
    let mut _191: &[core::fmt::rt::Argument<'_>];
    let mut _192: &[core::fmt::rt::Argument<'_>; 1];
    let _193: &[core::fmt::rt::Argument<'_>; 1];
    let _194: [core::fmt::rt::Argument<'_>; 1];
    let mut _195: core::fmt::rt::Argument<'_>;
    let mut _196: &u16;
    let _197: &u16;
    let mut _198: error::ErrorCode;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _204: ();
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _206: std::result::Result<(), error::ErrorCode>;
    let mut _207: bool;
    let mut _208: &state::spot_market::AssetTier;
    let mut _209: &state::spot_market::AssetTier;
    let _210: state::spot_market::AssetTier;
    let mut _211: bool;
    let mut _212: &&state::spot_market::SpotBalanceType;
    let _213: &state::spot_market::SpotBalanceType;
    let mut _214: &state::user::SpotPosition;
    let _215: usize;
    let mut _216: usize;
    let mut _217: bool;
    let mut _218: &&state::spot_market::SpotBalanceType;
    let _219: &state::spot_market::SpotBalanceType;
    let _220: state::spot_market::SpotBalanceType;
    let mut _221: ();
    let _223: ();
    let mut _224: &str;
    let _225: &str;
    let mut _226: &std::string::String;
    let _227: &std::string::String;
    let _228: std::string::String;
    let mut _230: std::fmt::Arguments<'_>;
    let mut _231: &[&str];
    let mut _232: &[&str; 2];
    let _233: &[&str; 2];
    let _234: [&str; 2];
    let mut _235: &[core::fmt::rt::Argument<'_>];
    let mut _236: &[core::fmt::rt::Argument<'_>; 1];
    let _237: &[core::fmt::rt::Argument<'_>; 1];
    let _238: [core::fmt::rt::Argument<'_>; 1];
    let mut _239: core::fmt::rt::Argument<'_>;
    let mut _240: &error::ErrorCode;
    let _241: &error::ErrorCode;
    let _242: ();
    let mut _243: &str;
    let _244: &str;
    let mut _245: &std::string::String;
    let _246: &std::string::String;
    let _247: std::string::String;
    let mut _249: std::fmt::Arguments<'_>;
    let mut _250: &[&str];
    let mut _251: &[&str; 2];
    let _252: &[&str; 2];
    let _253: [&str; 2];
    let mut _254: &[core::fmt::rt::Argument<'_>];
    let mut _255: &[core::fmt::rt::Argument<'_>; 1];
    let _256: &[core::fmt::rt::Argument<'_>; 1];
    let _257: [core::fmt::rt::Argument<'_>; 1];
    let mut _258: core::fmt::rt::Argument<'_>;
    let mut _259: &u16;
    let _260: &u16;
    let mut _261: error::ErrorCode;
    let mut _262: isize;
    let mut _264: !;
    let mut _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _267: ();
    scope 1 {
        debug spot_position_index => _5;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: ();
        let _32: bool;
        let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _44: bool;
        scope 6 {
            debug residual => _28;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _31;
            scope 9 {
            }
        }
        scope 10 {
            debug valid_withdraw => _32;
            let _50: error::ErrorCode;
            let _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _100: ();
            let _107: error::ErrorCode;
            let _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _151: ();
            let _159: error::ErrorCode;
            let _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _203: ();
            let _222: error::ErrorCode;
            let _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _266: ();
            let mut _270: &&state::spot_market::SpotBalanceType;
            let mut _271: &state::spot_market::AssetTier;
            scope 15 {
                debug error_code => _50;
                let _57: std::string::String;
                let _76: std::string::String;
                let mut _276: &[&str; 3];
                let mut _277: &[&str; 2];
                scope 16 {
                    debug res => _57;
                }
                scope 17 {
                    debug res => _76;
                }
            }
            scope 18 {
                debug residual => _97;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _100;
                scope 21 {
                }
            }
            scope 22 {
                debug error_code => _107;
                let _114: std::string::String;
                let _133: std::string::String;
                let mut _274: &[&str; 2];
                let mut _275: &[&str; 2];
                scope 23 {
                    debug res => _114;
                }
                scope 24 {
                    debug res => _133;
                }
            }
            scope 25 {
                debug residual => _148;
                scope 26 {
                }
            }
            scope 27 {
                debug val => _151;
                scope 28 {
                }
            }
            scope 29 {
                debug error_code => _159;
                let _166: std::string::String;
                let _185: std::string::String;
                let mut _272: &[&str; 2];
                let mut _273: &[&str; 2];
                scope 30 {
                    debug res => _166;
                }
                scope 31 {
                    debug res => _185;
                }
            }
            scope 32 {
                debug residual => _200;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _203;
                scope 35 {
                }
            }
            scope 36 {
                debug error_code => _222;
                let _229: std::string::String;
                let _248: std::string::String;
                let mut _268: &[&str; 2];
                let mut _269: &[&str; 2];
                scope 37 {
                    debug res => _229;
                }
                scope 38 {
                    debug res => _248;
                }
            }
            scope 39 {
                debug residual => _263;
                scope 40 {
                }
            }
            scope 41 {
                debug val => _266;
                scope 42 {
                }
            }
        }
        scope 11 {
            debug residual => _41;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _44;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut (*_4);
        StorageLive(_9);
        _9 = ((*_3).42: u16);
        _7 = User::force_get_spot_position_index(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: usize);
        _5 = _14;
        StorageDead(_14);
        StorageDead(_6);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _1;
        StorageLive(_19);
        _19 = &(*_2);
        StorageLive(_20);
        _20 = &mut (*_3);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _5;
        _24 = Len(((*_4).3: [state::user::SpotPosition; 8]));
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        goto -> bb108;
    }

    bb7: {
        _22 = &mut ((*_4).3: [state::user::SpotPosition; 8])[_23];
        _21 = &mut (*_22);
        StorageLive(_26);
        _26 = Option::<u128>::None;
        _17 = update_spot_balances_and_cumulative_deposits(move _18, move _19, move _20, move _21, const true, move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_17);
        _27 = discriminant(_16);
        switchInt(move _27) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_31);
        _31 = ((_16 as Continue).0: ());
        _15 = _31;
        StorageDead(_31);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(*_3);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_4);
        _36 = Option::<&User>::Some(move _37);
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _1;
        _38 = Option::<u128>::Some(move _39);
        StorageDead(_39);
        _34 = check_withdraw_limits(move _35, move _36, move _38) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb108;
    }

    bb13: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        _40 = discriminant(_33);
        switchInt(move _40) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_44);
        _44 = ((_33 as Continue).0: bool);
        _32 = _44;
        StorageDead(_44);
        StorageDead(_33);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _32;
        switchInt(move _48) -> [0: bb19, otherwise: bb18];
    }

    bb16: {
        StorageLive(_41);
        _41 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_33);
        goto -> bb107;
    }

    bb18: {
        StorageLive(_49);
        _49 = ();
        _47 = std::result::Result::<(), error::ErrorCode>::Ok(move _49);
        StorageDead(_49);
        goto -> bb34;
    }

    bb19: {
        StorageLive(_50);
        _50 = error::ErrorCode::DailyWithdrawLimit;
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _277 = const _;
        _61 = &(*_277);
        _60 = &(*_61);
        _59 = move _60 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_50;
        _68 = &(*_69);
        _67 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _68) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_68);
        _66 = [move _67];
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = move _64 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_64);
        _58 = Arguments::<'_>::new_v1(move _59, move _63) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_63);
        StorageDead(_59);
        _57 = format(move _58) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_58);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_61);
        _56 = move _57;
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = <String as Deref>::deref(move _54) -> [return: bb23, unwind: bb117];
    }

    bb23: {
        _52 = &(*_53);
        StorageDead(_54);
        _51 = solana_program::log::sol_log(move _52) -> [return: bb24, unwind: bb117];
    }

    bb24: {
        StorageDead(_52);
        drop(_56) -> [return: bb25, unwind: bb118];
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _276 = const _;
        _80 = &(*_276);
        _79 = &(*_80);
        _78 = move _79 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_79);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &((*_3).42: u16);
        _87 = &(*_88);
        _86 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _87) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_87);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_1;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _90) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_90);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &((*_4).0: anchor_lang::prelude::Pubkey);
        _93 = &(*_94);
        _92 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _93) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_93);
        _85 = [move _86, move _89, move _92];
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_86);
        _84 = &_85;
        _83 = &(*_84);
        _82 = move _83 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_83);
        _77 = Arguments::<'_>::new_v1(move _78, move _82) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_82);
        StorageDead(_78);
        _76 = format(move _77) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_77);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_80);
        _75 = move _76;
        StorageDead(_76);
        _74 = &_75;
        _73 = &(*_74);
        _72 = <String as Deref>::deref(move _73) -> [return: bb31, unwind: bb116];
    }

    bb31: {
        _71 = &(*_72);
        StorageDead(_73);
        _70 = solana_program::log::sol_log(move _71) -> [return: bb32, unwind: bb116];
    }

    bb32: {
        StorageDead(_71);
        drop(_75) -> [return: bb33, unwind: bb118];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_95);
        _95 = _50;
        _47 = std::result::Result::<(), error::ErrorCode>::Err(move _95);
        StorageDead(_95);
        StorageDead(_50);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_48);
        _46 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _47) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_47);
        _96 = discriminant(_46);
        switchInt(move _96) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_100);
        _100 = ((_46 as Continue).0: ());
        _45 = _100;
        StorageDead(_100);
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _105 = discriminant(((*_3).45: state::perp_market::MarketStatus));
        switchInt(move _105) -> [1: bb40, 6: bb40, 7: bb40, otherwise: bb39];
    }

    bb37: {
        StorageLive(_97);
        _97 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_99);
        _99 = _97;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _99) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb107;
    }

    bb39: {
        _104 = const false;
        goto -> bb41;
    }

    bb40: {
        _104 = const true;
        goto -> bb41;
    }

    bb41: {
        switchInt(move _104) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        StorageLive(_106);
        _106 = ();
        _103 = std::result::Result::<(), error::ErrorCode>::Ok(move _106);
        StorageDead(_106);
        goto -> bb56;
    }

    bb43: {
        StorageLive(_107);
        _107 = error::ErrorCode::MarketWithdrawPaused;
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _275 = const _;
        _118 = &(*_275);
        _117 = &(*_118);
        _116 = move _117 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_117);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_107;
        _125 = &(*_126);
        _124 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _125) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_125);
        _123 = [move _124];
        StorageDead(_124);
        _122 = &_123;
        _121 = &(*_122);
        _120 = move _121 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_121);
        _115 = Arguments::<'_>::new_v1(move _116, move _120) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_116);
        _114 = format(move _115) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_115);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_118);
        _113 = move _114;
        StorageDead(_114);
        _112 = &_113;
        _111 = &(*_112);
        _110 = <String as Deref>::deref(move _111) -> [return: bb47, unwind: bb115];
    }

    bb47: {
        _109 = &(*_110);
        StorageDead(_111);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb48, unwind: bb115];
    }

    bb48: {
        StorageDead(_109);
        drop(_113) -> [return: bb49, unwind: bb118];
    }

    bb49: {
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_108);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _274 = const _;
        _137 = &(*_274);
        _136 = &(*_137);
        _135 = move _136 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_136);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &((*_3).42: u16);
        _144 = &(*_145);
        _143 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _144) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_144);
        _142 = [move _143];
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = move _140 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_140);
        _134 = Arguments::<'_>::new_v1(move _135, move _139) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_139);
        StorageDead(_135);
        _133 = format(move _134) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_134);
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_137);
        _132 = move _133;
        StorageDead(_133);
        _131 = &_132;
        _130 = &(*_131);
        _129 = <String as Deref>::deref(move _130) -> [return: bb53, unwind: bb114];
    }

    bb53: {
        _128 = &(*_129);
        StorageDead(_130);
        _127 = solana_program::log::sol_log(move _128) -> [return: bb54, unwind: bb114];
    }

    bb54: {
        StorageDead(_128);
        drop(_132) -> [return: bb55, unwind: bb118];
    }

    bb55: {
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_146);
        _146 = _107;
        _103 = std::result::Result::<(), error::ErrorCode>::Err(move _146);
        StorageDead(_146);
        StorageDead(_107);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_104);
        _102 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _103) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_103);
        _147 = discriminant(_102);
        switchInt(move _147) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_151);
        _151 = ((_102 as Continue).0: ());
        _101 = _151;
        StorageDead(_151);
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &(*_3);
        StorageLive(_157);
        _157 = SpotOperation::Withdraw;
        _155 = SpotMarket::is_operation_paused(move _156, move _157) -> [return: bb61, unwind continue];
    }

    bb59: {
        StorageLive(_148);
        _148 = ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_150);
        _150 = _148;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _150) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb107;
    }

    bb61: {
        switchInt(move _155) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_159);
        _159 = error::ErrorCode::MarketWithdrawPaused;
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _273 = const _;
        _170 = &(*_273);
        _169 = &(*_170);
        _168 = move _169 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_169);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &_159;
        _177 = &(*_178);
        _176 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _177) -> [return: bb64, unwind continue];
    }

    bb63: {
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_158);
        _158 = ();
        _154 = std::result::Result::<(), error::ErrorCode>::Ok(move _158);
        StorageDead(_158);
        goto -> bb76;
    }

    bb64: {
        StorageDead(_177);
        _175 = [move _176];
        StorageDead(_176);
        _174 = &_175;
        _173 = &(*_174);
        _172 = move _173 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_173);
        _167 = Arguments::<'_>::new_v1(move _168, move _172) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_172);
        StorageDead(_168);
        _166 = format(move _167) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_167);
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_170);
        _165 = move _166;
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = <String as Deref>::deref(move _163) -> [return: bb67, unwind: bb113];
    }

    bb67: {
        _161 = &(*_162);
        StorageDead(_163);
        _160 = solana_program::log::sol_log(move _161) -> [return: bb68, unwind: bb113];
    }

    bb68: {
        StorageDead(_161);
        drop(_165) -> [return: bb69, unwind: bb118];
    }

    bb69: {
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_160);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _272 = const _;
        _189 = &(*_272);
        _188 = &(*_189);
        _187 = move _188 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_188);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &((*_3).42: u16);
        _196 = &(*_197);
        _195 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _196) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_196);
        _194 = [move _195];
        StorageDead(_195);
        _193 = &_194;
        _192 = &(*_193);
        _191 = move _192 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_192);
        _186 = Arguments::<'_>::new_v1(move _187, move _191) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_191);
        StorageDead(_187);
        _185 = format(move _186) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_186);
        StorageDead(_197);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_189);
        _184 = move _185;
        StorageDead(_185);
        _183 = &_184;
        _182 = &(*_183);
        _181 = <String as Deref>::deref(move _182) -> [return: bb73, unwind: bb112];
    }

    bb73: {
        _180 = &(*_181);
        StorageDead(_182);
        _179 = solana_program::log::sol_log(move _180) -> [return: bb74, unwind: bb112];
    }

    bb74: {
        StorageDead(_180);
        drop(_184) -> [return: bb75, unwind: bb118];
    }

    bb75: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_179);
        StorageLive(_198);
        _198 = _159;
        _154 = std::result::Result::<(), error::ErrorCode>::Err(move _198);
        StorageDead(_198);
        StorageDead(_159);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_155);
        _153 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _154) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_154);
        _199 = discriminant(_153);
        switchInt(move _199) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_203);
        _203 = ((_153 as Continue).0: ());
        _152 = _203;
        StorageDead(_203);
        StorageDead(_153);
        StorageDead(_152);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &((*_3).46: state::spot_market::AssetTier);
        StorageLive(_209);
        _271 = const _;
        _209 = &(*_271);
        _207 = <state::spot_market::AssetTier as PartialEq>::eq(move _208, move _209) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_200);
        _200 = ((_153 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_202);
        _202 = _200;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _202) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb107;
    }

    bb81: {
        switchInt(move _207) -> [0: bb88, otherwise: bb82];
    }

    bb82: {
        StorageDead(_209);
        StorageDead(_208);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = _5;
        _216 = Len(((*_4).3: [state::user::SpotPosition; 8]));
        _217 = Lt(_215, _216);
        assert(move _217, "index out of bounds: the length is {} but the index is {}", move _216, _215) -> [success: bb83, unwind continue];
    }

    bb83: {
        _214 = &((*_4).3: [state::user::SpotPosition; 8])[_215];
        _213 = <SpotPosition as SpotBalance>::balance_type(move _214) -> [return: bb84, unwind continue];
    }

    bb84: {
        _212 = &_213;
        StorageDead(_214);
        StorageLive(_218);
        _270 = const _;
        _218 = &(*_270);
        _211 = <&SpotBalanceType as PartialEq>::eq(move _212, move _218) -> [return: bb85, unwind continue];
    }

    bb85: {
        switchInt(move _211) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_212);
        StorageLive(_222);
        _222 = error::ErrorCode::ProtectedAssetTierViolation;
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _269 = const _;
        _233 = &(*_269);
        _232 = &(*_233);
        _231 = move _232 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_232);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &_222;
        _240 = &(*_241);
        _239 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _240) -> [return: bb90, unwind continue];
    }

    bb87: {
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_212);
        goto -> bb89;
    }

    bb88: {
        StorageDead(_209);
        StorageDead(_208);
        goto -> bb89;
    }

    bb89: {
        StorageLive(_221);
        _221 = ();
        _206 = std::result::Result::<(), error::ErrorCode>::Ok(move _221);
        StorageDead(_221);
        goto -> bb102;
    }

    bb90: {
        StorageDead(_240);
        _238 = [move _239];
        StorageDead(_239);
        _237 = &_238;
        _236 = &(*_237);
        _235 = move _236 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_236);
        _230 = Arguments::<'_>::new_v1(move _231, move _235) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_235);
        StorageDead(_231);
        _229 = format(move _230) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_230);
        StorageDead(_241);
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_233);
        _228 = move _229;
        StorageDead(_229);
        _227 = &_228;
        _226 = &(*_227);
        _225 = <String as Deref>::deref(move _226) -> [return: bb93, unwind: bb111];
    }

    bb93: {
        _224 = &(*_225);
        StorageDead(_226);
        _223 = solana_program::log::sol_log(move _224) -> [return: bb94, unwind: bb111];
    }

    bb94: {
        StorageDead(_224);
        drop(_228) -> [return: bb95, unwind: bb118];
    }

    bb95: {
        StorageDead(_228);
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_223);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _268 = const _;
        _252 = &(*_268);
        _251 = &(*_252);
        _250 = move _251 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_251);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &((*_3).42: u16);
        _259 = &(*_260);
        _258 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _259) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_259);
        _257 = [move _258];
        StorageDead(_258);
        _256 = &_257;
        _255 = &(*_256);
        _254 = move _255 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_255);
        _249 = Arguments::<'_>::new_v1(move _250, move _254) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_254);
        StorageDead(_250);
        _248 = format(move _249) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_249);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_252);
        _247 = move _248;
        StorageDead(_248);
        _246 = &_247;
        _245 = &(*_246);
        _244 = <String as Deref>::deref(move _245) -> [return: bb99, unwind: bb110];
    }

    bb99: {
        _243 = &(*_244);
        StorageDead(_245);
        _242 = solana_program::log::sol_log(move _243) -> [return: bb100, unwind: bb110];
    }

    bb100: {
        StorageDead(_243);
        drop(_247) -> [return: bb101, unwind: bb118];
    }

    bb101: {
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_242);
        StorageLive(_261);
        _261 = _222;
        _206 = std::result::Result::<(), error::ErrorCode>::Err(move _261);
        StorageDead(_261);
        StorageDead(_222);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_211);
        StorageDead(_207);
        _205 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _206) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_206);
        _262 = discriminant(_205);
        switchInt(move _262) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_266);
        _266 = ((_205 as Continue).0: ());
        _204 = _266;
        StorageDead(_266);
        StorageDead(_205);
        StorageDead(_204);
        StorageLive(_267);
        _267 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _267);
        StorageDead(_267);
        StorageDead(_32);
        StorageDead(_5);
        goto -> bb109;
    }

    bb105: {
        StorageLive(_263);
        _263 = ((_205 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_265);
        _265 = _263;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _265) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_205);
        StorageDead(_204);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_32);
        goto -> bb108;
    }

    bb108: {
        StorageDead(_5);
        goto -> bb109;
    }

    bb109: {
        return;
    }

    bb110 (cleanup): {
        drop(_247) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_228) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_184) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_165) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_132) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_113) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_75) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_56) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        resume;
    }
}
