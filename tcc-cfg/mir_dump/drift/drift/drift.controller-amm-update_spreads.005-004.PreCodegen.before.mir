// MIR for `update_spreads` before PreCodegen

fn update_spreads(_1: &mut PerpMarket, _2: u64, _3: Option<u64>) -> std::result::Result<(u32, u32), error::ErrorCode> {
    debug market => _1;
    debug reserve_price => _2;
    debug slot => _3;
    let mut _0: std::result::Result<(u32, u32), error::ErrorCode>;
    let _4: i64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _6: std::result::Result<i64, error::ErrorCode>;
    let mut _7: state::perp_market::AMM;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: i64;
    let mut _14: bool;
    let mut _15: i64;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _18: std::result::Result<i128, error::ErrorCode>;
    let mut _19: i128;
    let mut _20: u128;
    let mut _21: u128;
    let mut _22: u128;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _30: std::result::Result<i128, error::ErrorCode>;
    let mut _31: i128;
    let mut _32: i128;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _34: std::result::Result<i128, error::ErrorCode>;
    let mut _35: i64;
    let mut _36: i64;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _38: std::result::Result<i64, error::ErrorCode>;
    let mut _39: state::perp_market::AMM;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _56: std::result::Result<i32, error::ErrorCode>;
    let mut _57: u64;
    let mut _58: i64;
    let mut _59: i128;
    let mut _60: u64;
    let mut _61: i64;
    let mut _62: u64;
    let mut _63: i64;
    let mut _64: u64;
    let mut _65: i64;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: (u32, u32);
    let mut _74: bool;
    let mut _75: u8;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u32, u32)>;
    let mut _77: std::result::Result<(u32, u32), error::ErrorCode>;
    let mut _78: u32;
    let mut _79: i64;
    let mut _80: u64;
    let mut _81: u32;
    let mut _82: u128;
    let mut _83: u128;
    let mut _84: u128;
    let mut _85: i128;
    let mut _86: u64;
    let mut _87: i128;
    let mut _88: i64;
    let mut _89: u128;
    let mut _90: u128;
    let mut _91: u128;
    let mut _92: u64;
    let mut _93: u64;
    let mut _94: u64;
    let mut _95: u64;
    let mut _96: u64;
    let mut _97: i8;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _105: std::result::Result<u32, error::ErrorCode>;
    let mut _106: u32;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: u32;
    let mut _113: u32;
    let _114: ();
    let mut _115: bool;
    let mut _116: i8;
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _119: std::result::Result<u32, error::ErrorCode>;
    let mut _120: u8;
    let mut _121: i8;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: u32;
    let mut _128: u32;
    let mut _129: u32;
    let mut _130: u32;
    let mut _131: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _132: std::result::Result<u32, error::ErrorCode>;
    let mut _133: u32;
    let mut _134: u32;
    let mut _135: u32;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _141: u32;
    let mut _142: u32;
    let mut _143: u32;
    let mut _144: u32;
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _146: std::result::Result<u32, error::ErrorCode>;
    let mut _147: u32;
    let mut _148: u32;
    let mut _149: u32;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _155: bool;
    let mut _156: i8;
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _159: std::result::Result<u32, error::ErrorCode>;
    let mut _160: i8;
    let mut _161: isize;
    let mut _163: !;
    let mut _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _166: u32;
    let mut _167: u32;
    let mut _168: u32;
    let mut _169: u32;
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _171: std::result::Result<u32, error::ErrorCode>;
    let mut _172: u32;
    let mut _173: u32;
    let mut _174: u32;
    let mut _175: isize;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _180: u32;
    let mut _181: u32;
    let mut _182: u32;
    let mut _183: u32;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _185: std::result::Result<u32, error::ErrorCode>;
    let mut _186: u32;
    let mut _187: u32;
    let mut _188: u32;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _194: u32;
    let mut _195: u32;
    let mut _198: i32;
    let mut _199: i32;
    let mut _200: i32;
    let mut _201: i32;
    let mut _202: bool;
    let mut _203: u8;
    let _204: ();
    let mut _205: bool;
    let mut _207: std::option::Option<u64>;
    let mut _208: {closure@programs/drift/src/controller/amm.rs:273:43: 273:46};
    let mut _209: &&mut state::perp_market::PerpMarket;
    let mut _212: i128;
    let mut _213: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _214: std::result::Result<i128, error::ErrorCode>;
    let mut _215: i32;
    let mut _216: isize;
    let mut _218: !;
    let mut _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _221: i128;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _223: std::result::Result<i128, error::ErrorCode>;
    let mut _224: i32;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _231: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _232: std::result::Result<i32, error::ErrorCode>;
    let mut _233: i128;
    let mut _234: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _235: std::result::Result<i128, error::ErrorCode>;
    let mut _236: i128;
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _238: std::result::Result<i128, error::ErrorCode>;
    let mut _239: i128;
    let mut _240: i128;
    let mut _241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _242: std::result::Result<i128, error::ErrorCode>;
    let mut _243: i128;
    let mut _244: i128;
    let mut _245: isize;
    let mut _247: !;
    let mut _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _250: i128;
    let mut _251: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _252: std::result::Result<i128, error::ErrorCode>;
    let mut _253: i128;
    let mut _254: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _255: std::result::Result<i128, error::ErrorCode>;
    let mut _256: u64;
    let mut _257: isize;
    let mut _259: !;
    let mut _260: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _262: isize;
    let mut _264: !;
    let mut _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _267: isize;
    let mut _269: !;
    let mut _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _272: isize;
    let mut _274: !;
    let mut _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _282: i32;
    let mut _283: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _284: std::result::Result<i32, error::ErrorCode>;
    let mut _285: i128;
    let mut _286: i128;
    let mut _287: isize;
    let mut _289: !;
    let mut _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _292: i32;
    let mut _293: i32;
    let mut _294: i32;
    let mut _295: i32;
    let mut _296: bool;
    let mut _297: i32;
    let mut _298: i32;
    let mut _299: i32;
    let mut _300: (i32, bool);
    let mut _301: i32;
    let mut _302: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _303: std::result::Result<i32, error::ErrorCode>;
    let mut _304: i32;
    let mut _305: i32;
    let mut _306: isize;
    let mut _308: !;
    let mut _309: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _311: bool;
    let mut _312: i32;
    let mut _313: u32;
    let mut _314: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _315: std::result::Result<u32, error::ErrorCode>;
    let mut _316: u32;
    let mut _317: u32;
    let mut _318: i32;
    let mut _319: isize;
    let mut _321: !;
    let mut _322: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _324: u32;
    let mut _325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _326: std::result::Result<u32, error::ErrorCode>;
    let mut _327: u32;
    let mut _328: u32;
    let mut _329: i32;
    let mut _330: isize;
    let mut _332: !;
    let mut _333: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _335: u32;
    let mut _336: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _337: std::result::Result<u32, error::ErrorCode>;
    let mut _338: u32;
    let mut _339: u32;
    let mut _340: i32;
    let mut _341: isize;
    let mut _343: !;
    let mut _344: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _346: u32;
    let mut _347: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _348: std::result::Result<u32, error::ErrorCode>;
    let mut _349: u32;
    let mut _350: u32;
    let mut _351: i32;
    let mut _352: isize;
    let mut _354: !;
    let mut _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _357: i32;
    let _358: ();
    let mut _359: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _360: std::result::Result<(), error::ErrorCode>;
    let mut _361: &mut state::perp_market::PerpMarket;
    let mut _362: isize;
    let mut _364: !;
    let mut _365: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _367: (u32, u32);
    let mut _368: u32;
    let mut _369: u32;
    scope 1 {
        debug max_ref_offset => _4;
        let _13: i32;
        let _16: i128;
        let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _27: i128;
        scope 6 {
            debug reference_price_offset => _13;
            let mut _71: u32;
            let mut _72: u32;
            let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _102: (u32, u32);
            let _103: u32;
            let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _111: u32;
            scope 29 {
                debug long_spread => _71;
                debug short_spread => _72;
                let _117: u32;
                let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _126: u32;
                let _157: u32;
                let _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _165: u32;
                let _196: bool;
                let _197: bool;
                scope 39 {
                    debug adjustment => _117;
                    let _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _140: u32;
                    let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _154: u32;
                    scope 44 {
                        debug residual => _137;
                        scope 45 {
                        }
                    }
                    scope 46 {
                        debug val => _140;
                        scope 47 {
                        }
                    }
                    scope 48 {
                        debug residual => _151;
                        scope 49 {
                        }
                    }
                    scope 50 {
                        debug val => _154;
                        scope 51 {
                        }
                    }
                }
                scope 40 {
                    debug residual => _123;
                    scope 41 {
                    }
                }
                scope 42 {
                    debug val => _126;
                    scope 43 {
                    }
                }
                scope 52 {
                    debug adjustment => _157;
                    let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _179: u32;
                    let _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _193: u32;
                    scope 57 {
                        debug residual => _176;
                        scope 58 {
                        }
                    }
                    scope 59 {
                        debug val => _179;
                        scope 60 {
                        }
                    }
                    scope 61 {
                        debug residual => _190;
                        scope 62 {
                        }
                    }
                    scope 63 {
                        debug val => _193;
                        scope 64 {
                        }
                    }
                }
                scope 53 {
                    debug residual => _162;
                    scope 54 {
                    }
                }
                scope 55 {
                    debug val => _165;
                    scope 56 {
                    }
                }
                scope 65 {
                    debug do_reference_price_smooth => _196;
                    let _206: u64;
                    let _363: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _366: ();
                    scope 67 {
                        debug slots_passed => _206;
                        let _210: i32;
                        let _211: i128;
                        let _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _220: i128;
                        let _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _229: i128;
                        scope 68 {
                            debug reference_price_delta => _210;
                            let _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _310: i32;
                            let _320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _323: u32;
                            let _331: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _334: u32;
                            let _342: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _345: u32;
                            let _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _356: u32;
                            scope 107 {
                                debug residual => _307;
                                scope 108 {
                                }
                            }
                            scope 109 {
                                debug val => _310;
                                scope 110 {
                                }
                            }
                            scope 111 {
                                debug residual => _320;
                                scope 112 {
                                }
                            }
                            scope 113 {
                                debug val => _323;
                                scope 114 {
                                }
                            }
                            scope 115 {
                                debug residual => _331;
                                scope 116 {
                                }
                            }
                            scope 117 {
                                debug val => _334;
                                scope 118 {
                                }
                            }
                            scope 119 {
                                debug residual => _342;
                                scope 120 {
                                }
                            }
                            scope 121 {
                                debug val => _345;
                                scope 122 {
                                }
                            }
                            scope 123 {
                                debug residual => _353;
                                scope 124 {
                                }
                            }
                            scope 125 {
                                debug val => _356;
                                scope 126 {
                                }
                            }
                        }
                        scope 69 {
                            debug full_offset_delta => _211;
                            let _230: i32;
                            let _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _249: i128;
                            let _258: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _261: i128;
                            let _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _266: i128;
                            let _268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _271: i128;
                            let _273: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _276: i128;
                            let _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _281: i32;
                            scope 78 {
                                debug raw => _230;
                                let _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _291: i32;
                                scope 103 {
                                    debug residual => _288;
                                    scope 104 {
                                    }
                                }
                                scope 105 {
                                    debug val => _291;
                                    scope 106 {
                                    }
                                }
                            }
                            scope 79 {
                                debug residual => _246;
                                scope 80 {
                                }
                            }
                            scope 81 {
                                debug val => _249;
                                scope 82 {
                                }
                            }
                            scope 83 {
                                debug residual => _258;
                                scope 84 {
                                }
                            }
                            scope 85 {
                                debug val => _261;
                                scope 86 {
                                }
                            }
                            scope 87 {
                                debug residual => _263;
                                scope 88 {
                                }
                            }
                            scope 89 {
                                debug val => _266;
                                scope 90 {
                                }
                            }
                            scope 91 {
                                debug residual => _268;
                                scope 92 {
                                }
                            }
                            scope 93 {
                                debug val => _271;
                                scope 94 {
                                }
                            }
                            scope 95 {
                                debug residual => _273;
                                scope 96 {
                                }
                            }
                            scope 97 {
                                debug val => _276;
                                scope 98 {
                                }
                            }
                            scope 99 {
                                debug residual => _278;
                                scope 100 {
                                }
                            }
                            scope 101 {
                                debug val => _281;
                                scope 102 {
                                }
                            }
                        }
                        scope 70 {
                            debug residual => _217;
                            scope 71 {
                            }
                        }
                        scope 72 {
                            debug val => _220;
                            scope 73 {
                            }
                        }
                        scope 74 {
                            debug residual => _226;
                            scope 75 {
                            }
                        }
                        scope 76 {
                            debug val => _229;
                            scope 77 {
                            }
                        }
                    }
                    scope 127 {
                        debug residual => _363;
                        scope 128 {
                        }
                    }
                    scope 129 {
                        debug val => _366;
                        scope 130 {
                        }
                    }
                }
                scope 66 {
                    debug sign_changed => _197;
                }
            }
            scope 30 {
                debug residual => _99;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _102;
                scope 33 {
                }
            }
            scope 34 {
                debug half_base_spread => _103;
            }
            scope 35 {
                debug residual => _108;
                scope 36 {
                }
            }
            scope 37 {
                debug val => _111;
                scope 38 {
                }
            }
        }
        scope 7 {
            debug liquidity_ratio => _16;
            let _28: i128;
            let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _44: i64;
            let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _49: i128;
            let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _54: i128;
            scope 12 {
                debug signed_liquidity_ratio => _28;
                let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _70: i32;
                scope 25 {
                    debug residual => _67;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _70;
                    scope 28 {
                    }
                }
            }
            scope 13 {
                debug residual => _41;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _44;
                scope 16 {
                }
            }
            scope 17 {
                debug residual => _46;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _49;
                scope 20 {
                }
            }
            scope 21 {
                debug residual => _51;
                scope 22 {
                }
            }
            scope 23 {
                debug val => _54;
                scope 24 {
                }
            }
        }
        scope 8 {
            debug residual => _24;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _27;
            scope 11 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: state::perp_market::AMM);
        _6 = AMM::get_max_reference_price_offset(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: i64);
        _4 = _12;
        StorageDead(_12);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _4;
        _14 = Gt(move _15, const 0_i64);
        switchInt(move _14) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_5);
        goto -> bb221;
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = (((*_1).1: state::perp_market::AMM).15: i128);
        StorageLive(_20);
        _20 = (((*_1).1: state::perp_market::AMM).5: u128);
        StorageLive(_21);
        _21 = (((*_1).1: state::perp_market::AMM).8: u128);
        StorageLive(_22);
        _22 = (((*_1).1: state::perp_market::AMM).9: u128);
        _18 = calculate_inventory_liquidity_ratio(move _19, move _20, move _21, move _22) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        _13 = const 0_i32;
        goto -> bb35;
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_18);
        _23 = discriminant(_17);
        switchInt(move _23) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_17 as Continue).0: i128);
        _16 = _27;
        StorageDead(_27);
        StorageDead(_17);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _16;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = ((*_1).1: state::perp_market::AMM);
        _38 = AMM::get_protocol_owned_position(move _39) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_24);
        _24 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_17);
        goto -> bb218;
    }

    bb14: {
        StorageDead(_39);
        _37 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _38) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_38);
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_44);
        _44 = ((_37 as Continue).0: i64);
        _36 = _44;
        StorageDead(_44);
        _35 = core::num::<impl i64>::signum(move _36) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_41);
        _41 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb216;
    }

    bb19: {
        StorageDead(_36);
        _34 = <i64 as Cast>::cast::<i128>(move _35) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_35);
        _33 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_34);
        _45 = discriminant(_33);
        switchInt(move _45) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_49);
        _49 = ((_33 as Continue).0: i128);
        _32 = _49;
        StorageDead(_49);
        _30 = <i128 as SafeMath>::safe_mul(move _31, move _32) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_46);
        _46 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_48);
        StorageDead(_46);
        goto -> bb216;
    }

    bb25: {
        StorageDead(_32);
        StorageDead(_31);
        _29 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_30);
        _50 = discriminant(_29);
        switchInt(move _50) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_54);
        _54 = ((_29 as Continue).0: i128);
        _28 = _54;
        StorageDead(_54);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_29);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _2;
        StorageLive(_58);
        _58 = (((*_1).1: state::perp_market::AMM).27: i64);
        StorageLive(_59);
        _59 = _28;
        StorageLive(_60);
        _60 = (((*_1).1: state::perp_market::AMM).54: u64);
        StorageLive(_61);
        _61 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_62);
        _62 = (((*_1).1: state::perp_market::AMM).46: u64);
        StorageLive(_63);
        _63 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_64);
        _64 = (((*_1).1: state::perp_market::AMM).45: u64);
        StorageLive(_65);
        _65 = _4;
        _56 = calculate_reference_price_offset(move _57, move _58, move _59, move _60, move _61, move _62, move _63, move _64, move _65) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_51);
        _51 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb217;
    }

    bb30: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        _55 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _56) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_56);
        _66 = discriminant(_55);
        switchInt(move _66) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_70);
        _70 = ((_55 as Continue).0: i32);
        _13 = _70;
        StorageDead(_70);
        StorageDead(_28);
        StorageDead(_16);
        StorageDead(_55);
        goto -> bb35;
    }

    bb33: {
        StorageLive(_67);
        _67 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_28);
        StorageDead(_16);
        StorageDead(_55);
        goto -> bb219;
    }

    bb35: {
        StorageDead(_14);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = (((*_1).1: state::perp_market::AMM).70: u8);
        _74 = Gt(move _75, const 0_u8);
        switchInt(move _74) -> [0: bb42, otherwise: bb36];
    }

    bb36: {
        StorageDead(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = (((*_1).1: state::perp_market::AMM).63: u32);
        StorageLive(_79);
        _79 = (((*_1).1: state::perp_market::AMM).42: i64);
        StorageLive(_80);
        _80 = (((*_1).1: state::perp_market::AMM).48: u64);
        StorageLive(_81);
        _81 = (((*_1).1: state::perp_market::AMM).64: u32);
        StorageLive(_82);
        _82 = (((*_1).1: state::perp_market::AMM).6: u128);
        StorageLive(_83);
        _83 = (((*_1).1: state::perp_market::AMM).12: u128);
        StorageLive(_84);
        _84 = (((*_1).1: state::perp_market::AMM).11: u128);
        StorageLive(_85);
        _85 = (((*_1).1: state::perp_market::AMM).15: i128);
        StorageLive(_86);
        _86 = _2;
        StorageLive(_87);
        _87 = (((*_1).1: state::perp_market::AMM).31: i128);
        StorageLive(_88);
        _88 = (((*_1).1: state::perp_market::AMM).49: i64);
        StorageLive(_89);
        _89 = (((*_1).1: state::perp_market::AMM).5: u128);
        StorageLive(_90);
        _90 = (((*_1).1: state::perp_market::AMM).8: u128);
        StorageLive(_91);
        _91 = (((*_1).1: state::perp_market::AMM).9: u128);
        StorageLive(_92);
        _92 = (((*_1).1: state::perp_market::AMM).60: u64);
        StorageLive(_93);
        _93 = (((*_1).1: state::perp_market::AMM).61: u64);
        StorageLive(_94);
        _94 = (((*_1).1: state::perp_market::AMM).57: u64);
        StorageLive(_95);
        _95 = (((*_1).1: state::perp_market::AMM).58: u64);
        StorageLive(_96);
        _96 = (((*_1).1: state::perp_market::AMM).56: u64);
        StorageLive(_97);
        _97 = (((*_1).1: state::perp_market::AMM).83: i8);
        _77 = calculate_spread(move _78, move _79, move _80, move _81, move _82, move _83, move _84, move _85, move _86, move _87, move _88, move _89, move _90, move _91, move _92, move _93, move _94, move _95, move _96, move _97) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        _76 = <std::result::Result<(u32, u32), error::ErrorCode> as Try>::branch(move _77) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_77);
        _98 = discriminant(_76);
        switchInt(move _98) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_102);
        _102 = ((_76 as Continue).0: (u32, u32));
        _73 = _102;
        StorageDead(_102);
        StorageDead(_76);
        goto -> bb48;
    }

    bb40: {
        StorageLive(_99);
        _99 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_76);
        goto -> bb215;
    }

    bb42: {
        StorageDead(_75);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = (((*_1).1: state::perp_market::AMM).63: u32);
        _105 = <u32 as SafeMath>::safe_div(move _106, const 2_u32) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_106);
        _104 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _105) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_105);
        _107 = discriminant(_104);
        switchInt(move _107) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_111);
        _111 = ((_104 as Continue).0: u32);
        _103 = _111;
        StorageDead(_111);
        StorageDead(_104);
        StorageLive(_112);
        _112 = _103;
        StorageLive(_113);
        _113 = _103;
        _73 = (move _112, move _113);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_103);
        goto -> bb48;
    }

    bb46: {
        StorageLive(_108);
        _108 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb215;
    }

    bb48: {
        StorageDead(_74);
        StorageLive(_71);
        _71 = (_73.0: u32);
        StorageLive(_72);
        _72 = (_73.1: u32);
        StorageDead(_73);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = (((*_1).1: state::perp_market::AMM).77: i8);
        _115 = Lt(move _116, const 0_i8);
        switchInt(move _115) -> [0: bb72, otherwise: bb49];
    }

    bb49: {
        StorageDead(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = (((*_1).1: state::perp_market::AMM).77: i8);
        _120 = core::num::<impl i8>::unsigned_abs(move _121) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_121);
        _119 = <u8 as Cast>::cast::<u32>(move _120) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_120);
        _118 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _119) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_119);
        _122 = discriminant(_118);
        switchInt(move _122) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_126);
        _126 = ((_118 as Continue).0: u32);
        _117 = _126;
        StorageDead(_126);
        StorageDead(_118);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _71;
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _71;
        StorageLive(_135);
        _135 = _117;
        _133 = core::num::<impl u32>::saturating_mul(move _134, move _135) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_123);
        _123 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_118);
        goto -> bb212;
    }

    bb56: {
        StorageDead(_135);
        StorageDead(_134);
        _132 = <u32 as SafeMath>::safe_div(move _133, const 100_u32) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_133);
        _131 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _132) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_132);
        _136 = discriminant(_131);
        switchInt(move _136) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_140);
        _140 = ((_131 as Continue).0: u32);
        _130 = _140;
        StorageDead(_140);
        _128 = core::num::<impl u32>::saturating_sub(move _129, move _130) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_137);
        _137 = ((_131 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_139);
        _139 = _137;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _139) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_131);
        goto -> bb212;
    }

    bb62: {
        StorageDead(_130);
        StorageDead(_129);
        _127 = <u32 as Ord>::max(move _128, const 1_u32) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_128);
        _71 = move _127;
        StorageDead(_127);
        StorageDead(_131);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = _72;
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = _72;
        StorageLive(_149);
        _149 = _117;
        _147 = core::num::<impl u32>::saturating_mul(move _148, move _149) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_149);
        StorageDead(_148);
        _146 = <u32 as SafeMath>::safe_div(move _147, const 100_u32) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_147);
        _145 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _146) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_146);
        _150 = discriminant(_145);
        switchInt(move _150) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_154);
        _154 = ((_145 as Continue).0: u32);
        _144 = _154;
        StorageDead(_154);
        _142 = core::num::<impl u32>::saturating_sub(move _143, move _144) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_151);
        _151 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_145);
        goto -> bb212;
    }

    bb70: {
        StorageDead(_144);
        StorageDead(_143);
        _141 = <u32 as Ord>::max(move _142, const 1_u32) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_142);
        _72 = move _141;
        StorageDead(_141);
        StorageDead(_145);
        _114 = const ();
        StorageDead(_117);
        goto -> bb97;
    }

    bb72: {
        StorageDead(_116);
        StorageLive(_155);
        StorageLive(_156);
        _156 = (((*_1).1: state::perp_market::AMM).77: i8);
        _155 = Gt(move _156, const 0_i8);
        switchInt(move _155) -> [0: bb95, otherwise: bb73];
    }

    bb73: {
        StorageDead(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = (((*_1).1: state::perp_market::AMM).77: i8);
        _159 = <i8 as Cast>::cast::<u32>(move _160) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_160);
        _158 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _159) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_159);
        _161 = discriminant(_158);
        switchInt(move _161) -> [0: bb76, 1: bb77, otherwise: bb4];
    }

    bb76: {
        StorageLive(_165);
        _165 = ((_158 as Continue).0: u32);
        _157 = _165;
        StorageDead(_165);
        StorageDead(_158);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = _71;
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _71;
        StorageLive(_174);
        _174 = _157;
        _172 = core::num::<impl u32>::saturating_mul(move _173, move _174) -> [return: bb79, unwind continue];
    }

    bb77: {
        StorageLive(_162);
        _162 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_164);
        _164 = _162;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _164) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_158);
        goto -> bb211;
    }

    bb79: {
        StorageDead(_174);
        StorageDead(_173);
        _171 = <u32 as SafeMath>::safe_div_ceil(move _172, const 100_u32) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_172);
        _170 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _171) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_171);
        _175 = discriminant(_170);
        switchInt(move _175) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_179);
        _179 = ((_170 as Continue).0: u32);
        _169 = _179;
        StorageDead(_179);
        _167 = core::num::<impl u32>::saturating_add(move _168, move _169) -> [return: bb85, unwind continue];
    }

    bb83: {
        StorageLive(_176);
        _176 = ((_170 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_170);
        goto -> bb211;
    }

    bb85: {
        StorageDead(_169);
        StorageDead(_168);
        _166 = <u32 as Ord>::max(move _167, const 1_u32) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_167);
        _71 = move _166;
        StorageDead(_166);
        StorageDead(_170);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _72;
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = _72;
        StorageLive(_188);
        _188 = _157;
        _186 = core::num::<impl u32>::saturating_mul(move _187, move _188) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_188);
        StorageDead(_187);
        _185 = <u32 as SafeMath>::safe_div_ceil(move _186, const 100_u32) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_186);
        _184 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _185) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_185);
        _189 = discriminant(_184);
        switchInt(move _189) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_193);
        _193 = ((_184 as Continue).0: u32);
        _183 = _193;
        StorageDead(_193);
        _181 = core::num::<impl u32>::saturating_add(move _182, move _183) -> [return: bb93, unwind continue];
    }

    bb91: {
        StorageLive(_190);
        _190 = ((_184 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_192);
        _192 = _190;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _192) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_184);
        goto -> bb211;
    }

    bb93: {
        StorageDead(_183);
        StorageDead(_182);
        _180 = <u32 as Ord>::max(move _181, const 1_u32) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_181);
        _72 = move _180;
        StorageDead(_180);
        StorageDead(_184);
        _114 = const ();
        StorageDead(_157);
        goto -> bb96;
    }

    bb95: {
        StorageDead(_156);
        _114 = const ();
        goto -> bb96;
    }

    bb96: {
        StorageDead(_155);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_194);
        _194 = _71;
        (((*_1).1: state::perp_market::AMM).65: u32) = move _194;
        StorageDead(_194);
        StorageLive(_195);
        _195 = _72;
        (((*_1).1: state::perp_market::AMM).66: u32) = move _195;
        StorageDead(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = _13;
        _198 = core::num::<impl i32>::signum(move _199) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = (((*_1).1: state::perp_market::AMM).82: i32);
        _200 = core::num::<impl i32>::signum(move _201) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_201);
        _197 = Ne(move _198, move _200);
        StorageDead(_200);
        StorageDead(_198);
        StorageLive(_202);
        _202 = _197;
        switchInt(move _202) -> [0: bb101, otherwise: bb100];
    }

    bb100: {
        StorageLive(_203);
        _203 = (((*_1).1: state::perp_market::AMM).70: u8);
        _196 = Gt(move _203, const 100_u8);
        StorageDead(_203);
        goto -> bb102;
    }

    bb101: {
        _196 = const false;
        goto -> bb102;
    }

    bb102: {
        StorageDead(_202);
        StorageDead(_197);
        StorageLive(_204);
        StorageLive(_205);
        _205 = _196;
        switchInt(move _205) -> [0: bb194, otherwise: bb103];
    }

    bb103: {
        StorageLive(_206);
        StorageLive(_207);
        _207 = _3;
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_1;
        _208 = {closure@programs/drift/src/controller/amm.rs:273:43: 273:46} { market: move _209 };
        StorageDead(_209);
        _206 = Option::<u64>::map_or::<u64, {closure@programs/drift/src/controller/amm.rs:273:43: 273:46}>(move _207, const 0_u64, move _208) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_208);
        StorageDead(_207);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = _13;
        _214 = <i32 as Cast>::cast::<i128>(move _215) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_215);
        _213 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _214) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_214);
        _216 = discriminant(_213);
        switchInt(move _216) -> [0: bb107, 1: bb108, otherwise: bb4];
    }

    bb107: {
        StorageLive(_220);
        _220 = ((_213 as Continue).0: i128);
        _212 = _220;
        StorageDead(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = (((*_1).1: state::perp_market::AMM).82: i32);
        _223 = <i32 as Cast>::cast::<i128>(move _224) -> [return: bb110, unwind continue];
    }

    bb108: {
        StorageLive(_217);
        _217 = ((_213 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_219);
        _219 = _217;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _219) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_212);
        goto -> bb207;
    }

    bb110: {
        StorageDead(_224);
        _222 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _223) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_223);
        _225 = discriminant(_222);
        switchInt(move _225) -> [0: bb112, 1: bb113, otherwise: bb4];
    }

    bb112: {
        StorageLive(_229);
        _229 = ((_222 as Continue).0: i128);
        _221 = _229;
        StorageDead(_229);
        _211 = core::num::<impl i128>::saturating_sub(move _212, move _221) -> [return: bb115, unwind continue];
    }

    bb113: {
        StorageLive(_226);
        _226 = ((_222 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_228);
        _228 = _226;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _228) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_221);
        StorageDead(_212);
        StorageDead(_222);
        goto -> bb207;
    }

    bb115: {
        StorageDead(_221);
        StorageDead(_212);
        StorageDead(_222);
        StorageDead(_213);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = _211;
        _243 = core::num::<impl i128>::abs(move _244) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_244);
        _242 = <i128 as Cast>::cast::<i128>(move _243) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_243);
        _241 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _242) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_242);
        _245 = discriminant(_241);
        switchInt(move _245) -> [0: bb119, 1: bb120, otherwise: bb4];
    }

    bb119: {
        StorageLive(_249);
        _249 = ((_241 as Continue).0: i128);
        _240 = _249;
        StorageDead(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = _206;
        _255 = <u64 as Cast>::cast::<i128>(move _256) -> [return: bb122, unwind continue];
    }

    bb120: {
        StorageLive(_246);
        _246 = ((_241 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_248);
        _248 = _246;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _248) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_232);
        goto -> bb206;
    }

    bb122: {
        StorageDead(_256);
        _254 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _255) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_255);
        _257 = discriminant(_254);
        switchInt(move _257) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_261);
        _261 = ((_254 as Continue).0: i128);
        _253 = _261;
        StorageDead(_261);
        _252 = <i128 as SafeMath>::safe_mul(move _253, const 1000_i128) -> [return: bb127, unwind continue];
    }

    bb125: {
        StorageLive(_258);
        _258 = ((_254 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_260);
        _260 = _258;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _260) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb202;
    }

    bb127: {
        StorageDead(_253);
        _251 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _252) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_252);
        _262 = discriminant(_251);
        switchInt(move _262) -> [0: bb129, 1: bb130, otherwise: bb4];
    }

    bb129: {
        StorageLive(_266);
        _266 = ((_251 as Continue).0: i128);
        _250 = _266;
        StorageDead(_266);
        _239 = <i128 as Ord>::min(move _240, move _250) -> [return: bb132, unwind continue];
    }

    bb130: {
        StorageLive(_263);
        _263 = ((_251 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_265);
        _265 = _263;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _265) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_265);
        StorageDead(_263);
        goto -> bb202;
    }

    bb132: {
        StorageDead(_250);
        StorageDead(_240);
        _238 = <i128 as Cast>::cast::<i128>(move _239) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_239);
        _237 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _238) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_238);
        _267 = discriminant(_237);
        switchInt(move _267) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        StorageLive(_271);
        _271 = ((_237 as Continue).0: i128);
        _236 = _271;
        StorageDead(_271);
        _235 = <i128 as SafeMath>::safe_div(move _236, const 10_i128) -> [return: bb138, unwind continue];
    }

    bb136: {
        StorageLive(_268);
        _268 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_270);
        _270 = _268;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _270) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_270);
        StorageDead(_268);
        goto -> bb203;
    }

    bb138: {
        StorageDead(_236);
        _234 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _235) -> [return: bb139, unwind continue];
    }

    bb139: {
        StorageDead(_235);
        _272 = discriminant(_234);
        switchInt(move _272) -> [0: bb140, 1: bb141, otherwise: bb4];
    }

    bb140: {
        StorageLive(_276);
        _276 = ((_234 as Continue).0: i128);
        _233 = _276;
        StorageDead(_276);
        _232 = <i128 as Cast>::cast::<i32>(move _233) -> [return: bb143, unwind continue];
    }

    bb141: {
        StorageLive(_273);
        _273 = ((_234 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_275);
        _275 = _273;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _275) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_275);
        StorageDead(_273);
        goto -> bb204;
    }

    bb143: {
        StorageDead(_233);
        _231 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _232) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_232);
        _277 = discriminant(_231);
        switchInt(move _277) -> [0: bb145, 1: bb146, otherwise: bb4];
    }

    bb145: {
        StorageLive(_281);
        _281 = ((_231 as Continue).0: i32);
        _230 = _281;
        StorageDead(_281);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_241);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_231);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = _211;
        _285 = core::num::<impl i128>::signum(move _286) -> [return: bb148, unwind continue];
    }

    bb146: {
        StorageLive(_278);
        _278 = ((_231 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_280);
        _280 = _278;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _280) -> [return: bb147, unwind continue];
    }

    bb147: {
        StorageDead(_280);
        StorageDead(_278);
        goto -> bb205;
    }

    bb148: {
        StorageDead(_286);
        _284 = <i128 as Cast>::cast::<i32>(move _285) -> [return: bb149, unwind continue];
    }

    bb149: {
        StorageDead(_285);
        _283 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _284) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_284);
        _287 = discriminant(_283);
        switchInt(move _287) -> [0: bb151, 1: bb152, otherwise: bb4];
    }

    bb151: {
        StorageLive(_291);
        _291 = ((_283 as Continue).0: i32);
        _282 = _291;
        StorageDead(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = _230;
        _293 = <i32 as Ord>::max(move _294, const 10_i32) -> [return: bb154, unwind continue];
    }

    bb152: {
        StorageLive(_288);
        _288 = ((_283 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_290);
        _290 = _288;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _290) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_282);
        StorageDead(_230);
        StorageDead(_211);
        StorageDead(_283);
        goto -> bb209;
    }

    bb154: {
        StorageDead(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = (((*_1).1: state::perp_market::AMM).82: i32);
        _296 = Ne(move _297, const 0_i32);
        switchInt(move _296) -> [0: bb157, otherwise: bb155];
    }

    bb155: {
        StorageDead(_297);
        StorageLive(_298);
        _298 = (((*_1).1: state::perp_market::AMM).82: i32);
        _295 = core::num::<impl i32>::abs(move _298) -> [return: bb156, unwind continue];
    }

    bb156: {
        StorageDead(_298);
        goto -> bb159;
    }

    bb157: {
        StorageDead(_297);
        StorageLive(_299);
        _299 = _13;
        _295 = core::num::<impl i32>::abs(move _299) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_299);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_296);
        _292 = <i32 as Ord>::min(move _293, move _295) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_295);
        StorageDead(_293);
        _300 = CheckedMul(_282, _292);
        assert(!move (_300.1: bool), "attempt to compute `{} * {}`, which would overflow", move _282, move _292) -> [success: bb161, unwind continue];
    }

    bb161: {
        _210 = move (_300.0: i32);
        StorageDead(_292);
        StorageDead(_282);
        StorageDead(_230);
        StorageDead(_211);
        StorageDead(_283);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = (((*_1).1: state::perp_market::AMM).82: i32);
        StorageLive(_305);
        _305 = _210;
        _303 = <i32 as SafeMath>::safe_add(move _304, move _305) -> [return: bb162, unwind continue];
    }

    bb162: {
        StorageDead(_305);
        StorageDead(_304);
        _302 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _303) -> [return: bb163, unwind continue];
    }

    bb163: {
        StorageDead(_303);
        _306 = discriminant(_302);
        switchInt(move _306) -> [0: bb164, 1: bb165, otherwise: bb4];
    }

    bb164: {
        StorageLive(_310);
        _310 = ((_302 as Continue).0: i32);
        _301 = _310;
        StorageDead(_310);
        (((*_1).1: state::perp_market::AMM).82: i32) = move _301;
        StorageDead(_301);
        StorageDead(_302);
        StorageLive(_311);
        StorageLive(_312);
        _312 = _210;
        _311 = Lt(move _312, const 0_i32);
        switchInt(move _311) -> [0: bb168, otherwise: bb167];
    }

    bb165: {
        StorageLive(_307);
        _307 = ((_302 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_309);
        _309 = _307;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _309) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_301);
        StorageDead(_302);
        goto -> bb209;
    }

    bb167: {
        StorageDead(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _316 = (((*_1).1: state::perp_market::AMM).65: u32);
        StorageLive(_317);
        StorageLive(_318);
        _318 = _210;
        _317 = core::num::<impl i32>::unsigned_abs(move _318) -> [return: bb169, unwind continue];
    }

    bb168: {
        StorageDead(_312);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = (((*_1).1: state::perp_market::AMM).66: u32);
        StorageLive(_339);
        StorageLive(_340);
        _340 = _210;
        _339 = core::num::<impl i32>::unsigned_abs(move _340) -> [return: bb181, unwind continue];
    }

    bb169: {
        StorageDead(_318);
        _315 = <u32 as SafeMath>::safe_add(move _316, move _317) -> [return: bb170, unwind continue];
    }

    bb170: {
        StorageDead(_317);
        StorageDead(_316);
        _314 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _315) -> [return: bb171, unwind continue];
    }

    bb171: {
        StorageDead(_315);
        _319 = discriminant(_314);
        switchInt(move _319) -> [0: bb172, 1: bb173, otherwise: bb4];
    }

    bb172: {
        StorageLive(_323);
        _323 = ((_314 as Continue).0: u32);
        _313 = _323;
        StorageDead(_323);
        (((*_1).1: state::perp_market::AMM).65: u32) = move _313;
        StorageDead(_313);
        StorageDead(_314);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = (((*_1).1: state::perp_market::AMM).66: u32);
        StorageLive(_328);
        StorageLive(_329);
        _329 = (((*_1).1: state::perp_market::AMM).82: i32);
        _328 = core::num::<impl i32>::unsigned_abs(move _329) -> [return: bb175, unwind continue];
    }

    bb173: {
        StorageLive(_320);
        _320 = ((_314 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_322);
        _322 = _320;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _322) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_313);
        StorageDead(_314);
        goto -> bb201;
    }

    bb175: {
        StorageDead(_329);
        _326 = <u32 as SafeMath>::safe_add(move _327, move _328) -> [return: bb176, unwind continue];
    }

    bb176: {
        StorageDead(_328);
        StorageDead(_327);
        _325 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _326) -> [return: bb177, unwind continue];
    }

    bb177: {
        StorageDead(_326);
        _330 = discriminant(_325);
        switchInt(move _330) -> [0: bb178, 1: bb179, otherwise: bb4];
    }

    bb178: {
        StorageLive(_334);
        _334 = ((_325 as Continue).0: u32);
        _324 = _334;
        StorageDead(_334);
        (((*_1).1: state::perp_market::AMM).66: u32) = move _324;
        StorageDead(_324);
        StorageDead(_325);
        _204 = const ();
        goto -> bb193;
    }

    bb179: {
        StorageLive(_331);
        _331 = ((_325 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_333);
        _333 = _331;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _333) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_324);
        StorageDead(_325);
        goto -> bb201;
    }

    bb181: {
        StorageDead(_340);
        _337 = <u32 as SafeMath>::safe_add(move _338, move _339) -> [return: bb182, unwind continue];
    }

    bb182: {
        StorageDead(_339);
        StorageDead(_338);
        _336 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _337) -> [return: bb183, unwind continue];
    }

    bb183: {
        StorageDead(_337);
        _341 = discriminant(_336);
        switchInt(move _341) -> [0: bb184, 1: bb185, otherwise: bb4];
    }

    bb184: {
        StorageLive(_345);
        _345 = ((_336 as Continue).0: u32);
        _335 = _345;
        StorageDead(_345);
        (((*_1).1: state::perp_market::AMM).66: u32) = move _335;
        StorageDead(_335);
        StorageDead(_336);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _349 = (((*_1).1: state::perp_market::AMM).65: u32);
        StorageLive(_350);
        StorageLive(_351);
        _351 = (((*_1).1: state::perp_market::AMM).82: i32);
        _350 = core::num::<impl i32>::unsigned_abs(move _351) -> [return: bb187, unwind continue];
    }

    bb185: {
        StorageLive(_342);
        _342 = ((_336 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_344);
        _344 = _342;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _344) -> [return: bb186, unwind continue];
    }

    bb186: {
        StorageDead(_344);
        StorageDead(_342);
        StorageDead(_335);
        StorageDead(_336);
        goto -> bb201;
    }

    bb187: {
        StorageDead(_351);
        _348 = <u32 as SafeMath>::safe_add(move _349, move _350) -> [return: bb188, unwind continue];
    }

    bb188: {
        StorageDead(_350);
        StorageDead(_349);
        _347 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _348) -> [return: bb189, unwind continue];
    }

    bb189: {
        StorageDead(_348);
        _352 = discriminant(_347);
        switchInt(move _352) -> [0: bb190, 1: bb191, otherwise: bb4];
    }

    bb190: {
        StorageLive(_356);
        _356 = ((_347 as Continue).0: u32);
        _346 = _356;
        StorageDead(_356);
        (((*_1).1: state::perp_market::AMM).65: u32) = move _346;
        StorageDead(_346);
        StorageDead(_347);
        _204 = const ();
        goto -> bb193;
    }

    bb191: {
        StorageLive(_353);
        _353 = ((_347 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_355);
        _355 = _353;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _355) -> [return: bb192, unwind continue];
    }

    bb192: {
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_346);
        StorageDead(_347);
        goto -> bb201;
    }

    bb193: {
        StorageDead(_311);
        StorageDead(_210);
        StorageDead(_206);
        goto -> bb195;
    }

    bb194: {
        StorageLive(_357);
        _357 = _13;
        (((*_1).1: state::perp_market::AMM).82: i32) = move _357;
        StorageDead(_357);
        _204 = const ();
        goto -> bb195;
    }

    bb195: {
        StorageDead(_205);
        StorageDead(_204);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &mut (*_1);
        _360 = update_spread_reserves(move _361) -> [return: bb196, unwind continue];
    }

    bb196: {
        StorageDead(_361);
        _359 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _360) -> [return: bb197, unwind continue];
    }

    bb197: {
        StorageDead(_360);
        _362 = discriminant(_359);
        switchInt(move _362) -> [0: bb198, 1: bb199, otherwise: bb4];
    }

    bb198: {
        StorageLive(_366);
        _366 = ((_359 as Continue).0: ());
        _358 = _366;
        StorageDead(_366);
        StorageDead(_359);
        StorageDead(_358);
        StorageLive(_367);
        StorageLive(_368);
        _368 = _71;
        StorageLive(_369);
        _369 = _72;
        _367 = (move _368, move _369);
        StorageDead(_369);
        StorageDead(_368);
        _0 = std::result::Result::<(u32, u32), error::ErrorCode>::Ok(move _367);
        StorageDead(_367);
        StorageDead(_196);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_13);
        StorageDead(_4);
        goto -> bb222;
    }

    bb199: {
        StorageLive(_363);
        _363 = ((_359 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_365);
        _365 = _363;
        _0 = <std::result::Result<(u32, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _365) -> [return: bb200, unwind continue];
    }

    bb200: {
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_359);
        StorageDead(_358);
        goto -> bb210;
    }

    bb201: {
        StorageDead(_311);
        goto -> bb209;
    }

    bb202: {
        StorageDead(_250);
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_238);
        goto -> bb203;
    }

    bb203: {
        StorageDead(_236);
        StorageDead(_235);
        goto -> bb204;
    }

    bb204: {
        StorageDead(_233);
        StorageDead(_232);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_254);
        StorageDead(_251);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_241);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_230);
        goto -> bb208;
    }

    bb207: {
        StorageDead(_213);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_211);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_210);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_204);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_196);
        goto -> bb214;
    }

    bb211: {
        StorageDead(_157);
        StorageDead(_155);
        goto -> bb213;
    }

    bb212: {
        StorageDead(_117);
        goto -> bb213;
    }

    bb213: {
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb214;
    }

    bb214: {
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb220;
    }

    bb215: {
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb220;
    }

    bb216: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb218;
    }

    bb218: {
        StorageDead(_16);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_14);
        goto -> bb220;
    }

    bb220: {
        StorageDead(_13);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_4);
        goto -> bb222;
    }

    bb222: {
        return;
    }
}
