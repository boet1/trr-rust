// MIR for `keeper::handle_update_spot_market_cumulative_interest` after PreCodegen

fn keeper::handle_update_spot_market_cumulative_interest(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdateSpotMarketCumulativeInterest<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _6: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: ();
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _14: std::result::Result<(), anchor_lang::error::Error>;
    let mut _15: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _16: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _21: ();
    let _22: ();
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _24: std::result::Result<(), anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::AccountInfo<'_>;
    let _26: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _27: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _28: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _33: ();
    let _34: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _35: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _37: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _38: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _40: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _49: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle_map::OracleMap<'_>>;
    let mut _59: std::result::Result<state::oracle_map::OracleMap<'_>, error::ErrorCode>;
    let mut _60: &anchor_lang::prelude::AccountInfo<'_>;
    let _61: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _62: u64;
    let mut _63: std::option::Option<state::state::OracleGuardRails>;
    let mut _64: state::state::OracleGuardRails;
    let mut _65: &state::state::State;
    let mut _66: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _74: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _75: &mut state::oracle_map::OracleMap<'_>;
    let mut _76: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _77: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _78: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _79: &state::spot_market::SpotMarket;
    let _80: &state::spot_market::SpotMarket;
    let mut _81: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _87: ();
    let mut _88: bool;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _90: std::result::Result<bool, error::ErrorCode>;
    let mut _91: &state::state::State;
    let _92: &state::state::State;
    let mut _93: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _99: ();
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _101: std::result::Result<(), error::ErrorCode>;
    let mut _102: &mut state::spot_market::SpotMarket;
    let mut _103: &mut state::spot_market::SpotMarket;
    let mut _104: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _105: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _106: &state::oracle::OraclePriceData;
    let mut _107: i64;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _113: ();
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _115: std::result::Result<(), error::ErrorCode>;
    let mut _116: &mut state::spot_market::SpotMarket;
    let mut _117: &mut state::spot_market::SpotMarket;
    let mut _118: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _119: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _120: &state::oracle::OraclePriceData;
    let mut _121: i64;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _127: i64;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _129: std::result::Result<i64, error::ErrorCode>;
    let mut _130: &state::spot_market::SpotMarket;
    let _131: &state::spot_market::SpotMarket;
    let mut _132: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _133: u64;
    let mut _134: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _135: &anchor_spl::token_interface::TokenAccount;
    let _136: &anchor_spl::token_interface::TokenAccount;
    let mut _137: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _138: isize;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _143: ();
    let mut _144: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>;
    let mut _145: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>;
    let mut _146: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _147: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>;
    let mut _148: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>;
    let mut _149: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>;
    let mut _150: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>;
    let mut _151: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>;
    let mut _152: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _153: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _154: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>;
    let mut _155: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _187: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _188: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _189: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _18;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _21;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _30;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _33;
        scope 12 {
        }
    }
    scope 13 {
        debug spot_market => _34;
        let _46: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 18 {
            debug state => _46;
            let _47: anchor_lang::prelude::Clock;
            let _51: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _54: anchor_lang::prelude::Clock;
            scope 19 {
                debug clock => _47;
                let _55: i64;
                scope 24 {
                    debug now => _55;
                    let _56: u64;
                    scope 25 {
                        debug clock_slot => _56;
                        let mut _57: state::oracle_map::OracleMap<'_>;
                        let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _71: state::oracle_map::OracleMap<'_>;
                        scope 26 {
                            debug oracle_map => _57;
                            let _72: &state::oracle::OraclePriceData;
                            let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _86: &state::oracle::OraclePriceData;
                            scope 31 {
                                debug oracle_price_data => _72;
                                let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _98: bool;
                                let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _112: ();
                                let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _126: ();
                                let _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _142: i64;
                                scope 36 {
                                    debug residual => _95;
                                    scope 37 {
                                    }
                                }
                                scope 38 {
                                    debug val => _98;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug residual => _109;
                                    scope 41 {
                                    }
                                }
                                scope 42 {
                                    debug val => _112;
                                    scope 43 {
                                    }
                                }
                                scope 44 {
                                    debug residual => _123;
                                    scope 45 {
                                    }
                                }
                                scope 46 {
                                    debug val => _126;
                                    scope 47 {
                                    }
                                }
                                scope 48 {
                                    debug residual => _139;
                                    scope 49 {
                                    }
                                }
                                scope 50 {
                                    debug val => _142;
                                    scope 51 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _83;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _86;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _68;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _71;
                            scope 30 {
                            }
                        }
                    }
                }
            }
            scope 20 {
                debug residual => _51;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _54;
                scope 23 {
                }
            }
        }
    }
    scope 14 {
        debug residual => _42;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _45;
        scope 17 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _144 = deref_copy (_1.1: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>);
        _6 = &((*_144).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _5 = &(*_6);
        _4 = constraints::spot_market_valid(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb80];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _156 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _145 = deref_copy (_1.1: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>);
        _16 = &((*_145).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _146 = deref_copy (*_16);
        _186 = (((_146.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _15 = &(*_186);
        _14 = constraints::exchange_not_paused(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb86];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _178 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb77;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb80];
    }

    bb8: {
        StorageDead(_14);
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_13 as Continue).0: ());
        _12 = _21;
        StorageDead(_21);
        _158 = discriminant(_13);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _147 = deref_copy (_1.1: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>);
        _26 = &((*_147).2: anchor_lang::prelude::AccountInfo<'_>);
        _25 = &(*_26);
        StorageLive(_27);
        StorageLive(_28);
        _148 = deref_copy (_1.1: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>);
        _28 = &((*_148).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _27 = &(*_28);
        _24 = constraints::valid_oracle_for_spot_market(move _25, move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _20) -> [return: bb11, unwind: bb85];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _176 = discriminant(_13);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb77;
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_25);
        _23 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _24) -> [return: bb13, unwind: bb80];
    }

    bb13: {
        StorageDead(_24);
        _29 = discriminant(_23);
        switchInt(move _29) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_33);
        _33 = ((_23 as Continue).0: ());
        _22 = _33;
        StorageDead(_33);
        _160 = discriminant(_23);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _149 = deref_copy (_1.1: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>);
        _39 = &((*_149).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _38 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _39) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_30);
        _30 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _32) -> [return: bb16, unwind: bb84];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_30);
        _174 = discriminant(_23);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb77;
    }

    bb17: {
        StorageDead(_39);
        StorageLive(_40);
        _40 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _37 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _38, move _40) -> [return: bb18, unwind: bb80];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        _36 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _37) -> [return: bb19, unwind: bb80];
    }

    bb19: {
        StorageDead(_37);
        _41 = discriminant(_36);
        switchInt(move _41) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_45);
        _45 = move ((_36 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _35 = move _45;
        StorageDead(_45);
        _34 = &mut _35;
        _164 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_46);
        _150 = deref_copy (_1.1: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>);
        _46 = &((*_150).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb23, unwind: bb79];
    }

    bb21: {
        StorageLive(_42);
        _42 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb22, unwind: bb83];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_42);
        _162 = discriminant(_36);
        StorageDead(_36);
        goto -> bb76;
    }

    bb23: {
        _48 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _49) -> [return: bb24, unwind: bb79];
    }

    bb24: {
        StorageDead(_49);
        _50 = discriminant(_48);
        switchInt(move _50) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_54);
        _54 = move ((_48 as Continue).0: anchor_lang::prelude::Clock);
        _47 = move _54;
        StorageDead(_54);
        _166 = discriminant(_48);
        StorageDead(_48);
        StorageLive(_55);
        _55 = (_47.4: i64);
        StorageLive(_56);
        _56 = (_47.0: u64);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _151 = deref_copy (_1.1: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>);
        _61 = &((*_151).2: anchor_lang::prelude::AccountInfo<'_>);
        _60 = &(*_61);
        StorageLive(_62);
        _62 = _56;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _152 = deref_copy (*_46);
        _187 = (((_152.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _66 = &(*_187);
        _65 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _66) -> [return: bb28, unwind: bb79];
    }

    bb26: {
        StorageLive(_51);
        _51 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _53) -> [return: bb27, unwind: bb82];
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_51);
        _172 = discriminant(_48);
        StorageDead(_48);
        goto -> bb75;
    }

    bb28: {
        StorageDead(_66);
        _64 = ((*_65).7: state::state::OracleGuardRails);
        _63 = Option::<state::state::OracleGuardRails>::Some(move _64);
        StorageDead(_64);
        _59 = OracleMap::<'_>::load_one(move _60, move _62, move _63) -> [return: bb29, unwind: bb79];
    }

    bb29: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        _58 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as Try>::branch(move _59) -> [return: bb30, unwind: bb79];
    }

    bb30: {
        StorageDead(_59);
        _67 = discriminant(_58);
        switchInt(move _67) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_71);
        _71 = move ((_58 as Continue).0: state::oracle_map::OracleMap<'_>);
        _57 = move _71;
        StorageDead(_71);
        _170 = discriminant(_58);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_58);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &mut _57;
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(*_34);
        _80 = <RefMut<'_, SpotMarket> as Deref>::deref(move _81) -> [return: bb34, unwind: bb78];
    }

    bb32: {
        StorageLive(_68);
        _68 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb33, unwind: bb81];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_68);
        _168 = discriminant(_58);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_58);
        goto -> bb74;
    }

    bb34: {
        _79 = &(*_80);
        StorageDead(_81);
        _78 = SpotMarket::oracle_id(move _79) -> [return: bb35, unwind: bb78];
    }

    bb35: {
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _74 = OracleMap::<'_>::get_price_data(move _75, move _76) -> [return: bb36, unwind: bb78];
    }

    bb36: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _74) -> [return: bb37, unwind: bb78];
    }

    bb37: {
        StorageDead(_74);
        _82 = discriminant(_73);
        switchInt(move _82) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_86);
        _86 = ((_73 as Continue).0: &state::oracle::OraclePriceData);
        _72 = _86;
        StorageDead(_86);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _153 = deref_copy (*_46);
        _188 = (((_153.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _93 = &(*_188);
        _92 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _93) -> [return: bb41, unwind: bb78];
    }

    bb39: {
        StorageLive(_83);
        _83 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb40, unwind: bb78];
    }

    bb40: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        goto -> bb73;
    }

    bb41: {
        _91 = &(*_92);
        StorageDead(_93);
        _90 = state::state::State::funding_paused(move _91) -> [return: bb42, unwind: bb78];
    }

    bb42: {
        StorageDead(_91);
        _89 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _90) -> [return: bb43, unwind: bb78];
    }

    bb43: {
        StorageDead(_90);
        _94 = discriminant(_89);
        switchInt(move _94) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_98);
        _98 = ((_89 as Continue).0: bool);
        _88 = _98;
        StorageDead(_98);
        switchInt(move _88) -> [0: bb48, otherwise: bb47];
    }

    bb45: {
        StorageLive(_95);
        _95 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb46, unwind: bb78];
    }

    bb46: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_89);
        goto -> bb72;
    }

    bb47: {
        StorageDead(_92);
        StorageDead(_89);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &mut (*_34);
        _117 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _118) -> [return: bb55, unwind: bb78];
    }

    bb48: {
        StorageDead(_92);
        StorageDead(_89);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &mut (*_34);
        _103 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _104) -> [return: bb49, unwind: bb78];
    }

    bb49: {
        _102 = &mut (*_103);
        StorageDead(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_72);
        _105 = Option::<&OraclePriceData>::Some(move _106);
        StorageDead(_106);
        StorageLive(_107);
        _107 = _55;
        _101 = controller::spot_balance::update_spot_market_cumulative_interest(move _102, move _105, move _107) -> [return: bb50, unwind: bb78];
    }

    bb50: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_102);
        _100 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _101) -> [return: bb51, unwind: bb78];
    }

    bb51: {
        StorageDead(_101);
        _108 = discriminant(_100);
        switchInt(move _108) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_112);
        _112 = ((_100 as Continue).0: ());
        _99 = _112;
        StorageDead(_112);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_99);
        _87 = const ();
        goto -> bb61;
    }

    bb53: {
        StorageLive(_109);
        _109 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb54, unwind: bb78];
    }

    bb54: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb72;
    }

    bb55: {
        _116 = &mut (*_117);
        StorageDead(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &(*_72);
        _119 = Option::<&OraclePriceData>::Some(move _120);
        StorageDead(_120);
        StorageLive(_121);
        _121 = _55;
        _115 = update_spot_market_twap_stats(move _116, move _119, move _121) -> [return: bb56, unwind: bb78];
    }

    bb56: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_116);
        _114 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _115) -> [return: bb57, unwind: bb78];
    }

    bb57: {
        StorageDead(_115);
        _122 = discriminant(_114);
        switchInt(move _122) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_126);
        _126 = ((_114 as Continue).0: ());
        _113 = _126;
        StorageDead(_126);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        _87 = const ();
        goto -> bb61;
    }

    bb59: {
        StorageLive(_123);
        _123 = ((_114 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb60, unwind: bb78];
    }

    bb60: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb72;
    }

    bb61: {
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &(*_34);
        _131 = <RefMut<'_, SpotMarket> as Deref>::deref(move _132) -> [return: bb62, unwind: bb78];
    }

    bb62: {
        _130 = &(*_131);
        StorageDead(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _154 = deref_copy (_1.1: &mut instructions::keeper::UpdateSpotMarketCumulativeInterest<'_>);
        _155 = deref_copy ((*_154).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _189 = (((_155.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _137 = &(*_189);
        _136 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _137) -> [return: bb63, unwind: bb78];
    }

    bb63: {
        _135 = &(*_136);
        _134 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _135) -> [return: bb64, unwind: bb78];
    }

    bb64: {
        StorageDead(_137);
        StorageDead(_135);
        _133 = ((*_134).2: u64);
        _129 = validate_spot_market_vault_amount(move _130, move _133) -> [return: bb65, unwind: bb78];
    }

    bb65: {
        StorageDead(_133);
        StorageDead(_130);
        _128 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _129) -> [return: bb66, unwind: bb78];
    }

    bb66: {
        StorageDead(_129);
        _138 = discriminant(_128);
        switchInt(move _138) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_142);
        _142 = ((_128 as Continue).0: i64);
        _127 = _142;
        StorageDead(_142);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_143);
        _143 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _143);
        StorageDead(_143);
        StorageDead(_72);
        drop(_57) -> [return: bb70, unwind: bb79];
    }

    bb68: {
        StorageLive(_139);
        _139 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_141);
        _141 = _139;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _141) -> [return: bb69, unwind: bb78];
    }

    bb69: {
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb73;
    }

    bb70: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_47);
        StorageDead(_46);
        drop(_35) -> [return: bb71, unwind: bb80];
    }

    bb71: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb77;
    }

    bb72: {
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_72);
        drop(_57) -> [return: bb74, unwind: bb79];
    }

    bb74: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_47);
        StorageDead(_46);
        drop(_35) -> [return: bb76, unwind: bb80];
    }

    bb76: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb77;
    }

    bb77: {
        return;
    }

    bb78 (cleanup): {
        drop(_57) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_35) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        resume;
    }

    bb81 (cleanup): {
        _180 = discriminant(_58);
        goto -> bb79;
    }

    bb82 (cleanup): {
        _181 = discriminant(_48);
        goto -> bb79;
    }

    bb83 (cleanup): {
        _182 = discriminant(_36);
        goto -> bb80;
    }

    bb84 (cleanup): {
        _183 = discriminant(_23);
        goto -> bb80;
    }

    bb85 (cleanup): {
        _184 = discriminant(_13);
        goto -> bb80;
    }

    bb86 (cleanup): {
        _185 = discriminant(_3);
        goto -> bb80;
    }
}
