// MIR for `validate_perp_market` after PreCodegen

fn validate_perp_market(_1: &PerpMarket) -> std::result::Result<(), error::ErrorCode> {
    debug market => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: i128;
    let mut _3: (i128, i128);
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _5: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _6: i128;
    let mut _7: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _9: std::result::Result<u128, error::ErrorCode>;
    let mut _10: u64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u128;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: (i128, i128);
    let mut _22: (i128, i128);
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _24: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _25: i128;
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u64;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: ();
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _42: std::result::Result<(), error::ErrorCode>;
    let mut _43: bool;
    let mut _44: i128;
    let mut _45: bool;
    let mut _46: i128;
    let mut _47: ();
    let _49: ();
    let mut _50: &str;
    let _51: &str;
    let mut _52: &std::string::String;
    let _53: &std::string::String;
    let _54: std::string::String;
    let mut _56: std::fmt::Arguments<'_>;
    let mut _57: &[&str];
    let mut _58: &[&str; 2];
    let _59: &[&str; 2];
    let _60: [&str; 2];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let mut _62: &[core::fmt::rt::Argument<'_>; 1];
    let _63: &[core::fmt::rt::Argument<'_>; 1];
    let _64: [core::fmt::rt::Argument<'_>; 1];
    let mut _65: core::fmt::rt::Argument<'_>;
    let mut _66: &error::ErrorCode;
    let _67: &error::ErrorCode;
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: &std::string::String;
    let _72: &std::string::String;
    let _73: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[&str; 3];
    let _78: &[&str; 3];
    let _79: [&str; 3];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let mut _81: &[core::fmt::rt::Argument<'_>; 3];
    let _82: &[core::fmt::rt::Argument<'_>; 3];
    let _83: [core::fmt::rt::Argument<'_>; 3];
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &u16;
    let _86: &u16;
    let mut _87: core::fmt::rt::Argument<'_>;
    let mut _88: &i128;
    let _89: &i128;
    let mut _90: core::fmt::rt::Argument<'_>;
    let mut _91: &u64;
    let _92: &u64;
    let mut _93: error::ErrorCode;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _99: ();
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _101: std::result::Result<(), error::ErrorCode>;
    let mut _102: bool;
    let mut _103: i128;
    let mut _104: i128;
    let mut _105: i128;
    let mut _106: (i128, bool);
    let mut _107: i128;
    let mut _108: ();
    let _110: ();
    let mut _111: &str;
    let _112: &str;
    let mut _113: &std::string::String;
    let _114: &std::string::String;
    let _115: std::string::String;
    let mut _117: std::fmt::Arguments<'_>;
    let mut _118: &[&str];
    let mut _119: &[&str; 2];
    let _120: &[&str; 2];
    let _121: [&str; 2];
    let mut _122: &[core::fmt::rt::Argument<'_>];
    let mut _123: &[core::fmt::rt::Argument<'_>; 1];
    let _124: &[core::fmt::rt::Argument<'_>; 1];
    let _125: [core::fmt::rt::Argument<'_>; 1];
    let mut _126: core::fmt::rt::Argument<'_>;
    let mut _127: &error::ErrorCode;
    let _128: &error::ErrorCode;
    let _129: ();
    let mut _130: &str;
    let _131: &str;
    let mut _132: &std::string::String;
    let _133: &std::string::String;
    let _134: std::string::String;
    let mut _136: std::fmt::Arguments<'_>;
    let mut _137: &[&str];
    let mut _138: &[&str; 3];
    let _139: &[&str; 3];
    let _140: [&str; 3];
    let mut _141: &[core::fmt::rt::Argument<'_>];
    let mut _142: &[core::fmt::rt::Argument<'_>; 3];
    let _143: &[core::fmt::rt::Argument<'_>; 3];
    let _144: [core::fmt::rt::Argument<'_>; 3];
    let mut _145: core::fmt::rt::Argument<'_>;
    let mut _146: &i128;
    let _147: &i128;
    let mut _148: core::fmt::rt::Argument<'_>;
    let mut _149: &i128;
    let _150: &i128;
    let mut _151: core::fmt::rt::Argument<'_>;
    let mut _152: &i128;
    let _153: &i128;
    let mut _154: error::ErrorCode;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _160: ();
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _162: std::result::Result<(), error::ErrorCode>;
    let mut _163: bool;
    let mut _164: i128;
    let mut _165: i128;
    let mut _166: ();
    let _168: ();
    let mut _169: &str;
    let _170: &str;
    let mut _171: &std::string::String;
    let _172: &std::string::String;
    let _173: std::string::String;
    let mut _175: std::fmt::Arguments<'_>;
    let mut _176: &[&str];
    let mut _177: &[&str; 2];
    let _178: &[&str; 2];
    let _179: [&str; 2];
    let mut _180: &[core::fmt::rt::Argument<'_>];
    let mut _181: &[core::fmt::rt::Argument<'_>; 1];
    let _182: &[core::fmt::rt::Argument<'_>; 1];
    let _183: [core::fmt::rt::Argument<'_>; 1];
    let mut _184: core::fmt::rt::Argument<'_>;
    let mut _185: &error::ErrorCode;
    let _186: &error::ErrorCode;
    let _187: ();
    let mut _188: &str;
    let _189: &str;
    let mut _190: &std::string::String;
    let _191: &std::string::String;
    let _192: std::string::String;
    let mut _194: std::fmt::Arguments<'_>;
    let mut _195: &[&str];
    let mut _196: &[&str; 3];
    let _197: &[&str; 3];
    let _198: [&str; 3];
    let mut _199: &[core::fmt::rt::Argument<'_>];
    let mut _200: &[core::fmt::rt::Argument<'_>; 2];
    let _201: &[core::fmt::rt::Argument<'_>; 2];
    let _202: [core::fmt::rt::Argument<'_>; 2];
    let mut _203: core::fmt::rt::Argument<'_>;
    let mut _204: &u16;
    let _205: &u16;
    let mut _206: core::fmt::rt::Argument<'_>;
    let mut _207: &i128;
    let _208: &i128;
    let mut _209: error::ErrorCode;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _215: ();
    let mut _216: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _217: std::result::Result<(), error::ErrorCode>;
    let mut _218: bool;
    let mut _219: u128;
    let mut _220: ();
    let _222: ();
    let mut _223: &str;
    let _224: &str;
    let mut _225: &std::string::String;
    let _226: &std::string::String;
    let _227: std::string::String;
    let mut _229: std::fmt::Arguments<'_>;
    let mut _230: &[&str];
    let mut _231: &[&str; 2];
    let _232: &[&str; 2];
    let _233: [&str; 2];
    let mut _234: &[core::fmt::rt::Argument<'_>];
    let mut _235: &[core::fmt::rt::Argument<'_>; 1];
    let _236: &[core::fmt::rt::Argument<'_>; 1];
    let _237: [core::fmt::rt::Argument<'_>; 1];
    let mut _238: core::fmt::rt::Argument<'_>;
    let mut _239: &error::ErrorCode;
    let _240: &error::ErrorCode;
    let _241: ();
    let mut _242: &str;
    let _243: &str;
    let mut _244: &std::string::String;
    let _245: &std::string::String;
    let _246: std::string::String;
    let mut _248: std::fmt::Arguments<'_>;
    let mut _249: &[&str];
    let mut _250: &[&str; 2];
    let _251: &[&str; 2];
    let _252: [&str; 2];
    let mut _253: &[core::fmt::rt::Argument<'_>];
    let mut _254: &[core::fmt::rt::Argument<'_>; 1];
    let _255: &[core::fmt::rt::Argument<'_>; 1];
    let _256: [core::fmt::rt::Argument<'_>; 1];
    let mut _257: core::fmt::rt::Argument<'_>;
    let mut _258: &u16;
    let _259: &u16;
    let mut _260: error::ErrorCode;
    let mut _261: isize;
    let mut _263: !;
    let mut _264: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _266: ();
    let mut _267: bool;
    let mut _268: &state::perp_market::MarketStatus;
    let mut _269: &state::perp_market::MarketStatus;
    let _270: state::perp_market::MarketStatus;
    let _271: ();
    let mut _272: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _273: std::result::Result<(), error::ErrorCode>;
    let mut _274: bool;
    let mut _275: u128;
    let mut _276: u128;
    let mut _277: i128;
    let mut _278: ();
    let _280: ();
    let mut _281: &str;
    let _282: &str;
    let mut _283: &std::string::String;
    let _284: &std::string::String;
    let _285: std::string::String;
    let mut _287: std::fmt::Arguments<'_>;
    let mut _288: &[&str];
    let mut _289: &[&str; 2];
    let _290: &[&str; 2];
    let _291: [&str; 2];
    let mut _292: &[core::fmt::rt::Argument<'_>];
    let mut _293: &[core::fmt::rt::Argument<'_>; 1];
    let _294: &[core::fmt::rt::Argument<'_>; 1];
    let _295: [core::fmt::rt::Argument<'_>; 1];
    let mut _296: core::fmt::rt::Argument<'_>;
    let mut _297: &error::ErrorCode;
    let _298: &error::ErrorCode;
    let _299: ();
    let mut _300: &str;
    let _301: &str;
    let mut _302: &std::string::String;
    let _303: &std::string::String;
    let _304: std::string::String;
    let mut _306: std::fmt::Arguments<'_>;
    let mut _307: &[&str];
    let mut _308: &[&str; 3];
    let _309: &[&str; 3];
    let _310: [&str; 3];
    let mut _311: &[core::fmt::rt::Argument<'_>];
    let mut _312: &[core::fmt::rt::Argument<'_>; 3];
    let _313: &[core::fmt::rt::Argument<'_>; 3];
    let _314: [core::fmt::rt::Argument<'_>; 3];
    let mut _315: core::fmt::rt::Argument<'_>;
    let mut _316: &u16;
    let _317: &u16;
    let mut _318: core::fmt::rt::Argument<'_>;
    let mut _319: &u128;
    let _320: &u128;
    let mut _321: core::fmt::rt::Argument<'_>;
    let mut _322: &i128;
    let _323: &i128;
    let mut _324: error::ErrorCode;
    let mut _325: isize;
    let mut _327: !;
    let mut _328: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _330: ();
    let mut _331: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _332: std::result::Result<(), error::ErrorCode>;
    let mut _333: bool;
    let mut _334: u128;
    let mut _335: u128;
    let mut _336: bool;
    let mut _337: u128;
    let mut _338: u128;
    let mut _339: ();
    let _341: ();
    let mut _342: &str;
    let _343: &str;
    let mut _344: &std::string::String;
    let _345: &std::string::String;
    let _346: std::string::String;
    let mut _348: std::fmt::Arguments<'_>;
    let mut _349: &[&str];
    let mut _350: &[&str; 2];
    let _351: &[&str; 2];
    let _352: [&str; 2];
    let mut _353: &[core::fmt::rt::Argument<'_>];
    let mut _354: &[core::fmt::rt::Argument<'_>; 1];
    let _355: &[core::fmt::rt::Argument<'_>; 1];
    let _356: [core::fmt::rt::Argument<'_>; 1];
    let mut _357: core::fmt::rt::Argument<'_>;
    let mut _358: &error::ErrorCode;
    let _359: &error::ErrorCode;
    let _360: ();
    let mut _361: &str;
    let _362: &str;
    let mut _363: &std::string::String;
    let _364: &std::string::String;
    let _365: std::string::String;
    let mut _367: std::fmt::Arguments<'_>;
    let mut _368: &[&str];
    let mut _369: &[&str; 4];
    let _370: &[&str; 4];
    let _371: [&str; 4];
    let mut _372: &[core::fmt::rt::Argument<'_>];
    let mut _373: &[core::fmt::rt::Argument<'_>; 4];
    let _374: &[core::fmt::rt::Argument<'_>; 4];
    let _375: [core::fmt::rt::Argument<'_>; 4];
    let mut _376: core::fmt::rt::Argument<'_>;
    let mut _377: &u16;
    let _378: &u16;
    let mut _379: core::fmt::rt::Argument<'_>;
    let mut _380: &u128;
    let _381: &u128;
    let mut _382: core::fmt::rt::Argument<'_>;
    let mut _383: &u128;
    let _384: &u128;
    let mut _385: core::fmt::rt::Argument<'_>;
    let mut _386: &u128;
    let _387: &u128;
    let mut _388: error::ErrorCode;
    let mut _389: isize;
    let mut _391: !;
    let mut _392: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _395: u128;
    let mut _397: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _398: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _399: math::bn::U192;
    let mut _400: math::bn::U192;
    let mut _401: isize;
    let mut _403: !;
    let mut _404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _407: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _408: std::result::Result<u128, error::ErrorCode>;
    let mut _409: math::bn::U192;
    let mut _410: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _411: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _412: math::bn::U192;
    let mut _413: math::bn::U192;
    let mut _414: u128;
    let mut _415: isize;
    let mut _417: !;
    let mut _418: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _420: isize;
    let mut _422: !;
    let mut _423: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _426: i128;
    let mut _427: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _428: std::result::Result<i128, error::ErrorCode>;
    let mut _429: i128;
    let mut _430: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _431: std::result::Result<i128, error::ErrorCode>;
    let mut _432: u128;
    let mut _433: isize;
    let mut _435: !;
    let mut _436: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _438: i128;
    let mut _439: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _440: std::result::Result<i128, error::ErrorCode>;
    let mut _441: u128;
    let mut _442: isize;
    let mut _444: !;
    let mut _445: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _447: isize;
    let mut _449: !;
    let mut _450: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _452: ();
    let mut _453: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _454: std::result::Result<(), error::ErrorCode>;
    let mut _455: bool;
    let mut _456: i128;
    let mut _457: ();
    let _459: ();
    let mut _460: &str;
    let _461: &str;
    let mut _462: &std::string::String;
    let _463: &std::string::String;
    let _464: std::string::String;
    let mut _466: std::fmt::Arguments<'_>;
    let mut _467: &[&str];
    let mut _468: &[&str; 2];
    let _469: &[&str; 2];
    let _470: [&str; 2];
    let mut _471: &[core::fmt::rt::Argument<'_>];
    let mut _472: &[core::fmt::rt::Argument<'_>; 1];
    let _473: &[core::fmt::rt::Argument<'_>; 1];
    let _474: [core::fmt::rt::Argument<'_>; 1];
    let mut _475: core::fmt::rt::Argument<'_>;
    let mut _476: &error::ErrorCode;
    let _477: &error::ErrorCode;
    let _478: ();
    let mut _479: &str;
    let _480: &str;
    let mut _481: &std::string::String;
    let _482: &std::string::String;
    let _483: std::string::String;
    let mut _485: std::fmt::Arguments<'_>;
    let mut _486: &[&str];
    let mut _487: &[&str; 7];
    let _488: &[&str; 7];
    let _489: [&str; 7];
    let mut _490: &[core::fmt::rt::Argument<'_>];
    let mut _491: &[core::fmt::rt::Argument<'_>; 6];
    let _492: &[core::fmt::rt::Argument<'_>; 6];
    let _493: [core::fmt::rt::Argument<'_>; 6];
    let mut _494: core::fmt::rt::Argument<'_>;
    let mut _495: &u16;
    let _496: &u16;
    let mut _497: core::fmt::rt::Argument<'_>;
    let mut _498: &math::bn::U192;
    let _499: &math::bn::U192;
    let mut _500: core::fmt::rt::Argument<'_>;
    let mut _501: &u128;
    let _502: &u128;
    let mut _503: core::fmt::rt::Argument<'_>;
    let mut _504: &u128;
    let _505: &u128;
    let mut _506: core::fmt::rt::Argument<'_>;
    let mut _507: &u128;
    let _508: &u128;
    let mut _509: core::fmt::rt::Argument<'_>;
    let mut _510: &i128;
    let _511: &i128;
    let mut _512: error::ErrorCode;
    let mut _513: isize;
    let mut _515: !;
    let mut _516: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _518: ();
    let mut _519: bool;
    let mut _520: u32;
    let _521: ();
    let mut _522: bool;
    let mut _523: i32;
    let _524: ();
    let mut _525: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _526: std::result::Result<(), error::ErrorCode>;
    let mut _527: bool;
    let mut _528: u128;
    let mut _529: u128;
    let mut _530: bool;
    let mut _531: u128;
    let mut _532: u128;
    let mut _533: ();
    let _535: ();
    let mut _536: &str;
    let _537: &str;
    let mut _538: &std::string::String;
    let _539: &std::string::String;
    let _540: std::string::String;
    let mut _542: std::fmt::Arguments<'_>;
    let mut _543: &[&str];
    let mut _544: &[&str; 2];
    let _545: &[&str; 2];
    let _546: [&str; 2];
    let mut _547: &[core::fmt::rt::Argument<'_>];
    let mut _548: &[core::fmt::rt::Argument<'_>; 1];
    let _549: &[core::fmt::rt::Argument<'_>; 1];
    let _550: [core::fmt::rt::Argument<'_>; 1];
    let mut _551: core::fmt::rt::Argument<'_>;
    let mut _552: &error::ErrorCode;
    let _553: &error::ErrorCode;
    let _554: ();
    let mut _555: &str;
    let _556: &str;
    let mut _557: &std::string::String;
    let _558: &std::string::String;
    let _559: std::string::String;
    let mut _561: std::fmt::Arguments<'_>;
    let mut _562: &[&str];
    let mut _563: &[&str; 5];
    let _564: &[&str; 5];
    let _565: [&str; 5];
    let mut _566: &[core::fmt::rt::Argument<'_>];
    let mut _567: &[core::fmt::rt::Argument<'_>; 5];
    let _568: &[core::fmt::rt::Argument<'_>; 5];
    let _569: [core::fmt::rt::Argument<'_>; 5];
    let mut _570: core::fmt::rt::Argument<'_>;
    let mut _571: &u16;
    let _572: &u16;
    let mut _573: core::fmt::rt::Argument<'_>;
    let mut _574: &u128;
    let _575: &u128;
    let mut _576: core::fmt::rt::Argument<'_>;
    let mut _577: &u128;
    let _578: &u128;
    let mut _579: core::fmt::rt::Argument<'_>;
    let mut _580: &u128;
    let _581: &u128;
    let mut _582: core::fmt::rt::Argument<'_>;
    let mut _583: &u128;
    let _584: &u128;
    let mut _585: error::ErrorCode;
    let mut _586: isize;
    let mut _588: !;
    let mut _589: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _591: bool;
    let mut _592: i32;
    let _593: ();
    let mut _594: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _595: std::result::Result<(), error::ErrorCode>;
    let mut _596: bool;
    let mut _597: u128;
    let mut _598: u128;
    let mut _599: bool;
    let mut _600: u128;
    let mut _601: u128;
    let mut _602: ();
    let _604: ();
    let mut _605: &str;
    let _606: &str;
    let mut _607: &std::string::String;
    let _608: &std::string::String;
    let _609: std::string::String;
    let mut _611: std::fmt::Arguments<'_>;
    let mut _612: &[&str];
    let mut _613: &[&str; 2];
    let _614: &[&str; 2];
    let _615: [&str; 2];
    let mut _616: &[core::fmt::rt::Argument<'_>];
    let mut _617: &[core::fmt::rt::Argument<'_>; 1];
    let _618: &[core::fmt::rt::Argument<'_>; 1];
    let _619: [core::fmt::rt::Argument<'_>; 1];
    let mut _620: core::fmt::rt::Argument<'_>;
    let mut _621: &error::ErrorCode;
    let _622: &error::ErrorCode;
    let _623: ();
    let mut _624: &str;
    let _625: &str;
    let mut _626: &std::string::String;
    let _627: &std::string::String;
    let _628: std::string::String;
    let mut _630: std::fmt::Arguments<'_>;
    let mut _631: &[&str];
    let mut _632: &[&str; 5];
    let _633: &[&str; 5];
    let _634: [&str; 5];
    let mut _635: &[core::fmt::rt::Argument<'_>];
    let mut _636: &[core::fmt::rt::Argument<'_>; 5];
    let _637: &[core::fmt::rt::Argument<'_>; 5];
    let _638: [core::fmt::rt::Argument<'_>; 5];
    let mut _639: core::fmt::rt::Argument<'_>;
    let mut _640: &u16;
    let _641: &u16;
    let mut _642: core::fmt::rt::Argument<'_>;
    let mut _643: &u128;
    let _644: &u128;
    let mut _645: core::fmt::rt::Argument<'_>;
    let mut _646: &u128;
    let _647: &u128;
    let mut _648: core::fmt::rt::Argument<'_>;
    let mut _649: &u128;
    let _650: &u128;
    let mut _651: core::fmt::rt::Argument<'_>;
    let mut _652: &u128;
    let _653: &u128;
    let mut _654: error::ErrorCode;
    let mut _655: isize;
    let mut _657: !;
    let mut _658: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _660: ();
    let mut _661: bool;
    let mut _662: i8;
    let mut _663: bool;
    let mut _664: i8;
    let _665: ();
    let mut _666: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _667: std::result::Result<(), error::ErrorCode>;
    let mut _668: bool;
    let mut _669: u32;
    let mut _670: u32;
    let mut _671: u32;
    let mut _672: (u32, bool);
    let mut _673: u32;
    let mut _674: ();
    let _676: ();
    let mut _677: &str;
    let _678: &str;
    let mut _679: &std::string::String;
    let _680: &std::string::String;
    let _681: std::string::String;
    let mut _683: std::fmt::Arguments<'_>;
    let mut _684: &[&str];
    let mut _685: &[&str; 2];
    let _686: &[&str; 2];
    let _687: [&str; 2];
    let mut _688: &[core::fmt::rt::Argument<'_>];
    let mut _689: &[core::fmt::rt::Argument<'_>; 1];
    let _690: &[core::fmt::rt::Argument<'_>; 1];
    let _691: [core::fmt::rt::Argument<'_>; 1];
    let mut _692: core::fmt::rt::Argument<'_>;
    let mut _693: &error::ErrorCode;
    let _694: &error::ErrorCode;
    let _695: ();
    let mut _696: &str;
    let _697: &str;
    let mut _698: &std::string::String;
    let _699: &std::string::String;
    let _700: std::string::String;
    let mut _702: std::fmt::Arguments<'_>;
    let mut _703: &[&str];
    let mut _704: &[&str; 4];
    let _705: &[&str; 4];
    let _706: [&str; 4];
    let mut _707: &[core::fmt::rt::Argument<'_>];
    let mut _708: &[core::fmt::rt::Argument<'_>; 4];
    let _709: &[core::fmt::rt::Argument<'_>; 4];
    let _710: [core::fmt::rt::Argument<'_>; 4];
    let mut _711: core::fmt::rt::Argument<'_>;
    let mut _712: &u16;
    let _713: &u16;
    let mut _714: core::fmt::rt::Argument<'_>;
    let mut _715: &u32;
    let _716: &u32;
    let mut _717: core::fmt::rt::Argument<'_>;
    let mut _718: &u32;
    let _719: &u32;
    let mut _720: core::fmt::rt::Argument<'_>;
    let mut _721: &u32;
    let _722: &u32;
    let mut _723: error::ErrorCode;
    let mut _724: isize;
    let mut _726: !;
    let mut _727: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _729: ();
    let mut _730: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _731: std::result::Result<(), error::ErrorCode>;
    let mut _732: bool;
    let mut _733: u64;
    let mut _734: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _735: std::result::Result<u64, error::ErrorCode>;
    let mut _736: u32;
    let mut _737: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _738: std::result::Result<u32, error::ErrorCode>;
    let mut _739: u32;
    let mut _740: u32;
    let mut _741: isize;
    let mut _743: !;
    let mut _744: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _746: isize;
    let mut _748: !;
    let mut _749: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _751: ();
    let _753: ();
    let mut _754: &str;
    let _755: &str;
    let mut _756: &std::string::String;
    let _757: &std::string::String;
    let _758: std::string::String;
    let mut _760: std::fmt::Arguments<'_>;
    let mut _761: &[&str];
    let mut _762: &[&str; 2];
    let _763: &[&str; 2];
    let _764: [&str; 2];
    let mut _765: &[core::fmt::rt::Argument<'_>];
    let mut _766: &[core::fmt::rt::Argument<'_>; 1];
    let _767: &[core::fmt::rt::Argument<'_>; 1];
    let _768: [core::fmt::rt::Argument<'_>; 1];
    let mut _769: core::fmt::rt::Argument<'_>;
    let mut _770: &error::ErrorCode;
    let _771: &error::ErrorCode;
    let _772: ();
    let mut _773: &str;
    let _774: &str;
    let mut _775: &std::string::String;
    let _776: &std::string::String;
    let _777: std::string::String;
    let mut _779: std::fmt::Arguments<'_>;
    let mut _780: &[&str];
    let mut _781: &[&str; 5];
    let _782: &[&str; 5];
    let _783: [&str; 5];
    let mut _784: &[core::fmt::rt::Argument<'_>];
    let mut _785: &[core::fmt::rt::Argument<'_>; 4];
    let _786: &[core::fmt::rt::Argument<'_>; 4];
    let _787: [core::fmt::rt::Argument<'_>; 4];
    let mut _788: core::fmt::rt::Argument<'_>;
    let mut _789: &u16;
    let _790: &u16;
    let mut _791: core::fmt::rt::Argument<'_>;
    let mut _792: &u32;
    let _793: &u32;
    let mut _794: core::fmt::rt::Argument<'_>;
    let mut _795: &u32;
    let _796: &u32;
    let mut _797: core::fmt::rt::Argument<'_>;
    let mut _798: &u32;
    let _799: &u32;
    let mut _800: error::ErrorCode;
    let mut _801: isize;
    let mut _803: !;
    let mut _804: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _806: ();
    let mut _807: bool;
    let mut _808: i128;
    let _809: ();
    let mut _810: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _811: std::result::Result<(), error::ErrorCode>;
    let mut _812: bool;
    let mut _813: u128;
    let mut _814: u128;
    let mut _815: ();
    let _817: ();
    let mut _818: &str;
    let _819: &str;
    let mut _820: &std::string::String;
    let _821: &std::string::String;
    let _822: std::string::String;
    let mut _824: std::fmt::Arguments<'_>;
    let mut _825: &[&str];
    let mut _826: &[&str; 2];
    let _827: &[&str; 2];
    let _828: [&str; 2];
    let mut _829: &[core::fmt::rt::Argument<'_>];
    let mut _830: &[core::fmt::rt::Argument<'_>; 1];
    let _831: &[core::fmt::rt::Argument<'_>; 1];
    let _832: [core::fmt::rt::Argument<'_>; 1];
    let mut _833: core::fmt::rt::Argument<'_>;
    let mut _834: &error::ErrorCode;
    let _835: &error::ErrorCode;
    let _836: ();
    let mut _837: &str;
    let _838: &str;
    let mut _839: &std::string::String;
    let _840: &std::string::String;
    let _841: std::string::String;
    let mut _843: std::fmt::Arguments<'_>;
    let mut _844: &[&str];
    let mut _845: &[&str; 2];
    let _846: &[&str; 2];
    let _847: [&str; 2];
    let mut _848: &[core::fmt::rt::Argument<'_>];
    let mut _849: &[core::fmt::rt::Argument<'_>; 1];
    let _850: &[core::fmt::rt::Argument<'_>; 1];
    let _851: [core::fmt::rt::Argument<'_>; 1];
    let mut _852: core::fmt::rt::Argument<'_>;
    let mut _853: &u16;
    let _854: &u16;
    let mut _855: error::ErrorCode;
    let mut _856: isize;
    let mut _858: !;
    let mut _859: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _861: bool;
    let mut _862: i128;
    let _863: ();
    let mut _864: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _865: std::result::Result<(), error::ErrorCode>;
    let mut _866: bool;
    let mut _867: u128;
    let mut _868: u128;
    let mut _869: ();
    let _871: ();
    let mut _872: &str;
    let _873: &str;
    let mut _874: &std::string::String;
    let _875: &std::string::String;
    let _876: std::string::String;
    let mut _878: std::fmt::Arguments<'_>;
    let mut _879: &[&str];
    let mut _880: &[&str; 2];
    let _881: &[&str; 2];
    let _882: [&str; 2];
    let mut _883: &[core::fmt::rt::Argument<'_>];
    let mut _884: &[core::fmt::rt::Argument<'_>; 1];
    let _885: &[core::fmt::rt::Argument<'_>; 1];
    let _886: [core::fmt::rt::Argument<'_>; 1];
    let mut _887: core::fmt::rt::Argument<'_>;
    let mut _888: &error::ErrorCode;
    let _889: &error::ErrorCode;
    let _890: ();
    let mut _891: &str;
    let _892: &str;
    let mut _893: &std::string::String;
    let _894: &std::string::String;
    let _895: std::string::String;
    let mut _897: std::fmt::Arguments<'_>;
    let mut _898: &[&str];
    let mut _899: &[&str; 3];
    let _900: &[&str; 3];
    let _901: [&str; 3];
    let mut _902: &[core::fmt::rt::Argument<'_>];
    let mut _903: &[core::fmt::rt::Argument<'_>; 3];
    let _904: &[core::fmt::rt::Argument<'_>; 3];
    let _905: [core::fmt::rt::Argument<'_>; 3];
    let mut _906: core::fmt::rt::Argument<'_>;
    let mut _907: &u16;
    let _908: &u16;
    let mut _909: core::fmt::rt::Argument<'_>;
    let mut _910: &u128;
    let _911: &u128;
    let mut _912: core::fmt::rt::Argument<'_>;
    let mut _913: &u128;
    let _914: &u128;
    let mut _915: error::ErrorCode;
    let mut _916: isize;
    let mut _918: !;
    let mut _919: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _921: ();
    let mut _922: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _923: std::result::Result<(), error::ErrorCode>;
    let mut _924: bool;
    let mut _925: u128;
    let mut _926: u128;
    let mut _927: ();
    let _929: ();
    let mut _930: &str;
    let _931: &str;
    let mut _932: &std::string::String;
    let _933: &std::string::String;
    let _934: std::string::String;
    let mut _936: std::fmt::Arguments<'_>;
    let mut _937: &[&str];
    let mut _938: &[&str; 2];
    let _939: &[&str; 2];
    let _940: [&str; 2];
    let mut _941: &[core::fmt::rt::Argument<'_>];
    let mut _942: &[core::fmt::rt::Argument<'_>; 1];
    let _943: &[core::fmt::rt::Argument<'_>; 1];
    let _944: [core::fmt::rt::Argument<'_>; 1];
    let mut _945: core::fmt::rt::Argument<'_>;
    let mut _946: &error::ErrorCode;
    let _947: &error::ErrorCode;
    let _948: ();
    let mut _949: &str;
    let _950: &str;
    let mut _951: &std::string::String;
    let _952: &std::string::String;
    let _953: std::string::String;
    let mut _955: std::fmt::Arguments<'_>;
    let mut _956: &[&str];
    let mut _957: &[&str; 3];
    let _958: &[&str; 3];
    let _959: [&str; 3];
    let mut _960: &[core::fmt::rt::Argument<'_>];
    let mut _961: &[core::fmt::rt::Argument<'_>; 3];
    let _962: &[core::fmt::rt::Argument<'_>; 3];
    let _963: [core::fmt::rt::Argument<'_>; 3];
    let mut _964: core::fmt::rt::Argument<'_>;
    let mut _965: &u16;
    let _966: &u16;
    let mut _967: core::fmt::rt::Argument<'_>;
    let mut _968: &u128;
    let _969: &u128;
    let mut _970: core::fmt::rt::Argument<'_>;
    let mut _971: &u128;
    let _972: &u128;
    let mut _973: error::ErrorCode;
    let mut _974: isize;
    let mut _976: !;
    let mut _977: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _979: ();
    let mut _980: bool;
    let mut _981: u32;
    let _982: ();
    let mut _983: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _984: std::result::Result<(), error::ErrorCode>;
    let mut _985: bool;
    let mut _986: u32;
    let mut _987: u32;
    let mut _988: bool;
    let mut _989: u32;
    let mut _990: u32;
    let mut _991: u32;
    let mut _992: (u32, bool);
    let mut _993: ();
    let _995: ();
    let mut _996: &str;
    let _997: &str;
    let mut _998: &std::string::String;
    let _999: &std::string::String;
    let _1000: std::string::String;
    let mut _1002: std::fmt::Arguments<'_>;
    let mut _1003: &[&str];
    let mut _1004: &[&str; 2];
    let _1005: &[&str; 2];
    let _1006: [&str; 2];
    let mut _1007: &[core::fmt::rt::Argument<'_>];
    let mut _1008: &[core::fmt::rt::Argument<'_>; 1];
    let _1009: &[core::fmt::rt::Argument<'_>; 1];
    let _1010: [core::fmt::rt::Argument<'_>; 1];
    let mut _1011: core::fmt::rt::Argument<'_>;
    let mut _1012: &error::ErrorCode;
    let _1013: &error::ErrorCode;
    let _1014: ();
    let mut _1015: &str;
    let _1016: &str;
    let mut _1017: &std::string::String;
    let _1018: &std::string::String;
    let _1019: std::string::String;
    let mut _1021: std::fmt::Arguments<'_>;
    let mut _1022: &[&str];
    let mut _1023: &[&str; 2];
    let _1024: &[&str; 2];
    let _1025: [&str; 2];
    let mut _1026: &[core::fmt::rt::Argument<'_>];
    let mut _1027: &[core::fmt::rt::Argument<'_>; 1];
    let _1028: &[core::fmt::rt::Argument<'_>; 1];
    let _1029: [core::fmt::rt::Argument<'_>; 1];
    let mut _1030: core::fmt::rt::Argument<'_>;
    let mut _1031: &u16;
    let _1032: &u16;
    let mut _1033: error::ErrorCode;
    let mut _1034: isize;
    let mut _1036: !;
    let mut _1037: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1039: ();
    let mut _1040: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1041: std::result::Result<(), error::ErrorCode>;
    let mut _1042: bool;
    let mut _1043: u64;
    let mut _1044: u64;
    let mut _1045: i64;
    let mut _1046: ();
    let _1048: ();
    let mut _1049: &str;
    let _1050: &str;
    let mut _1051: &std::string::String;
    let _1052: &std::string::String;
    let _1053: std::string::String;
    let mut _1055: std::fmt::Arguments<'_>;
    let mut _1056: &[&str];
    let mut _1057: &[&str; 2];
    let _1058: &[&str; 2];
    let _1059: [&str; 2];
    let mut _1060: &[core::fmt::rt::Argument<'_>];
    let mut _1061: &[core::fmt::rt::Argument<'_>; 1];
    let _1062: &[core::fmt::rt::Argument<'_>; 1];
    let _1063: [core::fmt::rt::Argument<'_>; 1];
    let mut _1064: core::fmt::rt::Argument<'_>;
    let mut _1065: &error::ErrorCode;
    let _1066: &error::ErrorCode;
    let _1067: ();
    let mut _1068: &str;
    let _1069: &str;
    let mut _1070: &std::string::String;
    let _1071: &std::string::String;
    let _1072: std::string::String;
    let mut _1074: std::fmt::Arguments<'_>;
    let mut _1075: &[&str];
    let mut _1076: &[&str; 3];
    let _1077: &[&str; 3];
    let _1078: [&str; 3];
    let mut _1079: &[core::fmt::rt::Argument<'_>];
    let mut _1080: &[core::fmt::rt::Argument<'_>; 3];
    let _1081: &[core::fmt::rt::Argument<'_>; 3];
    let _1082: [core::fmt::rt::Argument<'_>; 3];
    let mut _1083: core::fmt::rt::Argument<'_>;
    let mut _1084: &u16;
    let _1085: &u16;
    let mut _1086: core::fmt::rt::Argument<'_>;
    let mut _1087: &u64;
    let _1088: &u64;
    let mut _1089: core::fmt::rt::Argument<'_>;
    let mut _1090: &u64;
    let _1091: &u64;
    let _1092: u64;
    let mut _1093: i64;
    let mut _1094: error::ErrorCode;
    let mut _1095: isize;
    let mut _1097: !;
    let mut _1098: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1100: ();
    scope 1 {
        debug remainder_base_asset_amount_long => _2;
        let _21: i128;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: u128;
        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _39: (i128, i128);
        scope 10 {
            debug remainder_base_asset_amount_short => _21;
            let _48: error::ErrorCode;
            let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _98: ();
            let _109: error::ErrorCode;
            let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _159: ();
            let _167: error::ErrorCode;
            let _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _214: ();
            let _221: error::ErrorCode;
            let _262: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _265: ();
            let _279: error::ErrorCode;
            let _326: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _329: ();
            let _340: error::ErrorCode;
            let _390: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _393: ();
            let _394: math::bn::U192;
            let mut _1125: &state::perp_market::MarketStatus;
            scope 19 {
                debug error_code => _48;
                let _55: std::string::String;
                let _74: std::string::String;
                let mut _1132: &[&str; 3];
                let mut _1133: &[&str; 2];
                scope 20 {
                    debug res => _55;
                }
                scope 21 {
                    debug res => _74;
                }
            }
            scope 22 {
                debug residual => _95;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _98;
                scope 25 {
                }
            }
            scope 26 {
                debug error_code => _109;
                let _116: std::string::String;
                let _135: std::string::String;
                let mut _1130: &[&str; 3];
                let mut _1131: &[&str; 2];
                scope 27 {
                    debug res => _116;
                }
                scope 28 {
                    debug res => _135;
                }
            }
            scope 29 {
                debug residual => _156;
                scope 30 {
                }
            }
            scope 31 {
                debug val => _159;
                scope 32 {
                }
            }
            scope 33 {
                debug error_code => _167;
                let _174: std::string::String;
                let _193: std::string::String;
                let mut _1128: &[&str; 3];
                let mut _1129: &[&str; 2];
                scope 34 {
                    debug res => _174;
                }
                scope 35 {
                    debug res => _193;
                }
            }
            scope 36 {
                debug residual => _211;
                scope 37 {
                }
            }
            scope 38 {
                debug val => _214;
                scope 39 {
                }
            }
            scope 40 {
                debug error_code => _221;
                let _228: std::string::String;
                let _247: std::string::String;
                let mut _1126: &[&str; 2];
                let mut _1127: &[&str; 2];
                scope 41 {
                    debug res => _228;
                }
                scope 42 {
                    debug res => _247;
                }
            }
            scope 43 {
                debug residual => _262;
                scope 44 {
                }
            }
            scope 45 {
                debug val => _265;
                scope 46 {
                }
            }
            scope 47 {
                debug error_code => _279;
                let _286: std::string::String;
                let _305: std::string::String;
                let mut _1123: &[&str; 3];
                let mut _1124: &[&str; 2];
                scope 48 {
                    debug res => _286;
                }
                scope 49 {
                    debug res => _305;
                }
            }
            scope 50 {
                debug residual => _326;
                scope 51 {
                }
            }
            scope 52 {
                debug val => _329;
                scope 53 {
                }
            }
            scope 54 {
                debug error_code => _340;
                let _347: std::string::String;
                let _366: std::string::String;
                let mut _1121: &[&str; 4];
                let mut _1122: &[&str; 2];
                scope 55 {
                    debug res => _347;
                }
                scope 56 {
                    debug res => _366;
                }
            }
            scope 57 {
                debug residual => _390;
                scope 58 {
                }
            }
            scope 59 {
                debug val => _393;
                scope 60 {
                }
            }
            scope 61 {
                debug invariant_sqrt_u192 => _394;
                let _396: math::bn::U192;
                let _402: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _405: math::bn::U192;
                scope 62 {
                    debug invariant => _396;
                    let _406: u128;
                    let _416: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _419: math::bn::U192;
                    let _421: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _424: u128;
                    scope 67 {
                        debug quote_asset_reserve => _406;
                        let _425: i128;
                        let _434: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _437: i128;
                        let _443: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _446: i128;
                        let _448: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _451: i128;
                        scope 76 {
                            debug rounding_diff => _425;
                            let _458: error::ErrorCode;
                            let _514: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _517: ();
                            let _534: error::ErrorCode;
                            let _587: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _590: ();
                            let _603: error::ErrorCode;
                            let _656: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _659: ();
                            let _675: error::ErrorCode;
                            let _725: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _728: ();
                            let _742: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _745: u32;
                            let _747: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _750: u64;
                            let _752: error::ErrorCode;
                            let _802: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _805: ();
                            let _816: error::ErrorCode;
                            let _857: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _860: ();
                            let _870: error::ErrorCode;
                            let _917: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _920: ();
                            let _928: error::ErrorCode;
                            let _975: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _978: ();
                            let _994: error::ErrorCode;
                            let _1035: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _1038: ();
                            let _1047: error::ErrorCode;
                            let _1096: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _1099: ();
                            scope 89 {
                                debug error_code => _458;
                                let _465: std::string::String;
                                let _484: std::string::String;
                                let mut _1119: &[&str; 7];
                                let mut _1120: &[&str; 2];
                                scope 90 {
                                    debug res => _465;
                                }
                                scope 91 {
                                    debug res => _484;
                                }
                            }
                            scope 92 {
                                debug residual => _514;
                                scope 93 {
                                }
                            }
                            scope 94 {
                                debug val => _517;
                                scope 95 {
                                }
                            }
                            scope 96 {
                                debug error_code => _534;
                                let _541: std::string::String;
                                let _560: std::string::String;
                                let mut _1117: &[&str; 5];
                                let mut _1118: &[&str; 2];
                                scope 97 {
                                    debug res => _541;
                                }
                                scope 98 {
                                    debug res => _560;
                                }
                            }
                            scope 99 {
                                debug residual => _587;
                                scope 100 {
                                }
                            }
                            scope 101 {
                                debug val => _590;
                                scope 102 {
                                }
                            }
                            scope 103 {
                                debug error_code => _603;
                                let _610: std::string::String;
                                let _629: std::string::String;
                                let mut _1115: &[&str; 5];
                                let mut _1116: &[&str; 2];
                                scope 104 {
                                    debug res => _610;
                                }
                                scope 105 {
                                    debug res => _629;
                                }
                            }
                            scope 106 {
                                debug residual => _656;
                                scope 107 {
                                }
                            }
                            scope 108 {
                                debug val => _659;
                                scope 109 {
                                }
                            }
                            scope 110 {
                                debug error_code => _675;
                                let _682: std::string::String;
                                let _701: std::string::String;
                                let mut _1113: &[&str; 4];
                                let mut _1114: &[&str; 2];
                                scope 111 {
                                    debug res => _682;
                                }
                                scope 112 {
                                    debug res => _701;
                                }
                            }
                            scope 113 {
                                debug residual => _725;
                                scope 114 {
                                }
                            }
                            scope 115 {
                                debug val => _728;
                                scope 116 {
                                }
                            }
                            scope 117 {
                                debug residual => _742;
                                scope 118 {
                                }
                            }
                            scope 119 {
                                debug val => _745;
                                scope 120 {
                                }
                            }
                            scope 121 {
                                debug residual => _747;
                                scope 122 {
                                }
                            }
                            scope 123 {
                                debug val => _750;
                                scope 124 {
                                }
                            }
                            scope 125 {
                                debug error_code => _752;
                                let _759: std::string::String;
                                let _778: std::string::String;
                                let mut _1111: &[&str; 5];
                                let mut _1112: &[&str; 2];
                                scope 126 {
                                    debug res => _759;
                                }
                                scope 127 {
                                    debug res => _778;
                                }
                            }
                            scope 128 {
                                debug residual => _802;
                                scope 129 {
                                }
                            }
                            scope 130 {
                                debug val => _805;
                                scope 131 {
                                }
                            }
                            scope 132 {
                                debug error_code => _816;
                                let _823: std::string::String;
                                let _842: std::string::String;
                                let mut _1105: &[&str; 2];
                                let mut _1106: &[&str; 2];
                                scope 133 {
                                    debug res => _823;
                                }
                                scope 134 {
                                    debug res => _842;
                                }
                            }
                            scope 135 {
                                debug residual => _857;
                                scope 136 {
                                }
                            }
                            scope 137 {
                                debug val => _860;
                                scope 138 {
                                }
                            }
                            scope 139 {
                                debug error_code => _870;
                                let _877: std::string::String;
                                let _896: std::string::String;
                                let mut _1107: &[&str; 3];
                                let mut _1108: &[&str; 2];
                                scope 140 {
                                    debug res => _877;
                                }
                                scope 141 {
                                    debug res => _896;
                                }
                            }
                            scope 142 {
                                debug residual => _917;
                                scope 143 {
                                }
                            }
                            scope 144 {
                                debug val => _920;
                                scope 145 {
                                }
                            }
                            scope 146 {
                                debug error_code => _928;
                                let _935: std::string::String;
                                let _954: std::string::String;
                                let mut _1109: &[&str; 3];
                                let mut _1110: &[&str; 2];
                                scope 147 {
                                    debug res => _935;
                                }
                                scope 148 {
                                    debug res => _954;
                                }
                            }
                            scope 149 {
                                debug residual => _975;
                                scope 150 {
                                }
                            }
                            scope 151 {
                                debug val => _978;
                                scope 152 {
                                }
                            }
                            scope 153 {
                                debug error_code => _994;
                                let _1001: std::string::String;
                                let _1020: std::string::String;
                                let mut _1103: &[&str; 2];
                                let mut _1104: &[&str; 2];
                                scope 154 {
                                    debug res => _1001;
                                }
                                scope 155 {
                                    debug res => _1020;
                                }
                            }
                            scope 156 {
                                debug residual => _1035;
                                scope 157 {
                                }
                            }
                            scope 158 {
                                debug val => _1038;
                                scope 159 {
                                }
                            }
                            scope 160 {
                                debug error_code => _1047;
                                let _1054: std::string::String;
                                let _1073: std::string::String;
                                let mut _1101: &[&str; 3];
                                let mut _1102: &[&str; 2];
                                scope 161 {
                                    debug res => _1054;
                                }
                                scope 162 {
                                    debug res => _1073;
                                }
                            }
                            scope 163 {
                                debug residual => _1096;
                                scope 164 {
                                }
                            }
                            scope 165 {
                                debug val => _1099;
                                scope 166 {
                                }
                            }
                        }
                        scope 77 {
                            debug residual => _434;
                            scope 78 {
                            }
                        }
                        scope 79 {
                            debug val => _437;
                            scope 80 {
                            }
                        }
                        scope 81 {
                            debug residual => _443;
                            scope 82 {
                            }
                        }
                        scope 83 {
                            debug val => _446;
                            scope 84 {
                            }
                        }
                        scope 85 {
                            debug residual => _448;
                            scope 86 {
                            }
                        }
                        scope 87 {
                            debug val => _451;
                            scope 88 {
                            }
                        }
                    }
                    scope 68 {
                        debug residual => _416;
                        scope 69 {
                        }
                    }
                    scope 70 {
                        debug val => _419;
                        scope 71 {
                        }
                    }
                    scope 72 {
                        debug residual => _421;
                        scope 73 {
                        }
                    }
                    scope 74 {
                        debug val => _424;
                        scope 75 {
                        }
                    }
                }
                scope 63 {
                    debug residual => _402;
                    scope 64 {
                    }
                }
                scope 65 {
                    debug val => _405;
                    scope 66 {
                    }
                }
            }
        }
        scope 11 {
            debug residual => _31;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _34;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _36;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _39;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _17;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _20;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (((*_1).1: state::perp_market::AMM).13: i128);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = (((*_1).1: state::perp_market::AMM).52: u64);
        _9 = <u64 as Cast>::cast::<u128>(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: u128);
        _7 = _15;
        StorageDead(_15);
        _5 = standardize_base_asset_amount_with_remainder_i128(move _6, move _7) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb466;
    }

    bb7: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _5) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_5);
        _16 = discriminant(_4);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_4 as Continue).0: (i128, i128));
        _3 = _20;
        StorageDead(_20);
        StorageLive(_2);
        _2 = (_3.1: i128);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = (((*_1).1: state::perp_market::AMM).14: i128);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = (((*_1).1: state::perp_market::AMM).52: u64);
        _28 = <u64 as Cast>::cast::<u128>(move _29) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_17);
        _17 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb466;
    }

    bb12: {
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u128);
        _26 = _34;
        StorageDead(_34);
        _24 = standardize_base_asset_amount_with_remainder_i128(move _25, move _26) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb464;
    }

    bb17: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _24) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_24);
        _35 = discriminant(_23);
        switchInt(move _35) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_39);
        _39 = ((_23 as Continue).0: (i128, i128));
        _22 = _39;
        StorageDead(_39);
        StorageLive(_21);
        _21 = (_22.1: i128);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _2;
        _43 = Eq(move _44, const 0_i128);
        switchInt(move _43) -> [0: bb23, otherwise: bb22];
    }

    bb20: {
        StorageLive(_36);
        _36 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_36);
        goto -> bb464;
    }

    bb22: {
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _21;
        _45 = Eq(move _46, const 0_i128);
        switchInt(move _45) -> [0: bb25, otherwise: bb24];
    }

    bb23: {
        StorageDead(_44);
        goto -> bb26;
    }

    bb24: {
        StorageDead(_46);
        StorageLive(_47);
        _47 = ();
        _42 = std::result::Result::<(), error::ErrorCode>::Ok(move _47);
        StorageDead(_47);
        goto -> bb41;
    }

    bb25: {
        StorageDead(_46);
        goto -> bb26;
    }

    bb26: {
        StorageLive(_48);
        _48 = error::ErrorCode::InvalidPositionDelta;
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _1133 = const _;
        _59 = &(*_1133);
        _58 = &(*_59);
        _57 = move _58 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_48;
        _66 = &(*_67);
        _65 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _66) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_66);
        _64 = [move _65];
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = move _62 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_62);
        _56 = Arguments::<'_>::new_v1(move _57, move _61) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_61);
        StorageDead(_57);
        _55 = format(move _56) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_56);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        _54 = move _55;
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        _51 = <String as Deref>::deref(move _52) -> [return: bb30, unwind: bb499];
    }

    bb30: {
        _50 = &(*_51);
        StorageDead(_52);
        _49 = solana_program::log::sol_log(move _50) -> [return: bb31, unwind: bb499];
    }

    bb31: {
        StorageDead(_50);
        drop(_54) -> [return: bb32, unwind: bb500];
    }

    bb32: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _1132 = const _;
        _78 = &(*_1132);
        _77 = &(*_78);
        _76 = move _77 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_77);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &((*_1).21: u16);
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _85) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_85);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_21;
        _88 = &(*_89);
        _87 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _88) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_88);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(((*_1).1: state::perp_market::AMM).52: u64);
        _91 = &(*_92);
        _90 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _91) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_91);
        _83 = [move _84, move _87, move _90];
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = move _81 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_81);
        _75 = Arguments::<'_>::new_v1(move _76, move _80) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_80);
        StorageDead(_76);
        _74 = format(move _75) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_75);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_78);
        _73 = move _74;
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = <String as Deref>::deref(move _71) -> [return: bb38, unwind: bb498];
    }

    bb38: {
        _69 = &(*_70);
        StorageDead(_71);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb39, unwind: bb498];
    }

    bb39: {
        StorageDead(_69);
        drop(_73) -> [return: bb40, unwind: bb500];
    }

    bb40: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_93);
        _93 = _48;
        _42 = std::result::Result::<(), error::ErrorCode>::Err(move _93);
        StorageDead(_93);
        StorageDead(_48);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_45);
        StorageDead(_43);
        _41 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _42) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_42);
        _94 = discriminant(_41);
        switchInt(move _94) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_98);
        _98 = ((_41 as Continue).0: ());
        _40 = _98;
        StorageDead(_98);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = (((*_1).1: state::perp_market::AMM).13: i128);
        StorageLive(_105);
        _105 = (((*_1).1: state::perp_market::AMM).14: i128);
        _106 = CheckedAdd(_104, _105);
        assert(!move (_106.1: bool), "attempt to compute `{} + {}`, which would overflow", move _104, move _105) -> [success: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_95);
        _95 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb463;
    }

    bb46: {
        _103 = move (_106.0: i128);
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_107);
        _107 = (((*_1).1: state::perp_market::AMM).15: i128);
        _102 = Eq(move _103, move _107);
        switchInt(move _102) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        StorageDead(_107);
        StorageDead(_103);
        StorageLive(_108);
        _108 = ();
        _101 = std::result::Result::<(), error::ErrorCode>::Ok(move _108);
        StorageDead(_108);
        goto -> bb63;
    }

    bb48: {
        StorageDead(_107);
        StorageDead(_103);
        StorageLive(_109);
        _109 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _1131 = const _;
        _120 = &(*_1131);
        _119 = &(*_120);
        _118 = move _119 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_119);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &_109;
        _127 = &(*_128);
        _126 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _127) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_127);
        _125 = [move _126];
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = move _123 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_123);
        _117 = Arguments::<'_>::new_v1(move _118, move _122) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_122);
        StorageDead(_118);
        _116 = format(move _117) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_117);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_120);
        _115 = move _116;
        StorageDead(_116);
        _114 = &_115;
        _113 = &(*_114);
        _112 = <String as Deref>::deref(move _113) -> [return: bb52, unwind: bb497];
    }

    bb52: {
        _111 = &(*_112);
        StorageDead(_113);
        _110 = solana_program::log::sol_log(move _111) -> [return: bb53, unwind: bb497];
    }

    bb53: {
        StorageDead(_111);
        drop(_115) -> [return: bb54, unwind: bb500];
    }

    bb54: {
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_110);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _1130 = const _;
        _139 = &(*_1130);
        _138 = &(*_139);
        _137 = move _138 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &(((*_1).1: state::perp_market::AMM).13: i128);
        _146 = &(*_147);
        _145 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _146) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &(((*_1).1: state::perp_market::AMM).14: i128);
        _149 = &(*_150);
        _148 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _149) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_149);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &(((*_1).1: state::perp_market::AMM).15: i128);
        _152 = &(*_153);
        _151 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _152) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_152);
        _144 = [move _145, move _148, move _151];
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        _141 = move _142 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_142);
        _136 = Arguments::<'_>::new_v1(move _137, move _141) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_141);
        StorageDead(_137);
        _135 = format(move _136) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_136);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_139);
        _134 = move _135;
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _131 = <String as Deref>::deref(move _132) -> [return: bb60, unwind: bb496];
    }

    bb60: {
        _130 = &(*_131);
        StorageDead(_132);
        _129 = solana_program::log::sol_log(move _130) -> [return: bb61, unwind: bb496];
    }

    bb61: {
        StorageDead(_130);
        drop(_134) -> [return: bb62, unwind: bb500];
    }

    bb62: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageLive(_154);
        _154 = _109;
        _101 = std::result::Result::<(), error::ErrorCode>::Err(move _154);
        StorageDead(_154);
        StorageDead(_109);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_102);
        _100 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _101) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_101);
        _155 = discriminant(_100);
        switchInt(move _155) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_159);
        _159 = ((_100 as Continue).0: ());
        _99 = _159;
        StorageDead(_159);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = (((*_1).1: state::perp_market::AMM).15: i128);
        StorageLive(_165);
        _165 = const _ as i128 (IntToInt);
        _163 = Le(move _164, move _165);
        switchInt(move _163) -> [0: bb69, otherwise: bb68];
    }

    bb66: {
        StorageLive(_156);
        _156 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb463;
    }

    bb68: {
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_166);
        _166 = ();
        _162 = std::result::Result::<(), error::ErrorCode>::Ok(move _166);
        StorageDead(_166);
        goto -> bb83;
    }

    bb69: {
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_167);
        _167 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _1129 = const _;
        _178 = &(*_1129);
        _177 = &(*_178);
        _176 = move _177 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_177);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &_167;
        _185 = &(*_186);
        _184 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _185) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_185);
        _183 = [move _184];
        StorageDead(_184);
        _182 = &_183;
        _181 = &(*_182);
        _180 = move _181 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_181);
        _175 = Arguments::<'_>::new_v1(move _176, move _180) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_180);
        StorageDead(_176);
        _174 = format(move _175) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_175);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_178);
        _173 = move _174;
        StorageDead(_174);
        _172 = &_173;
        _171 = &(*_172);
        _170 = <String as Deref>::deref(move _171) -> [return: bb73, unwind: bb495];
    }

    bb73: {
        _169 = &(*_170);
        StorageDead(_171);
        _168 = solana_program::log::sol_log(move _169) -> [return: bb74, unwind: bb495];
    }

    bb74: {
        StorageDead(_169);
        drop(_173) -> [return: bb75, unwind: bb500];
    }

    bb75: {
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _1128 = const _;
        _197 = &(*_1128);
        _196 = &(*_197);
        _195 = move _196 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_196);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &((*_1).21: u16);
        _204 = &(*_205);
        _203 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _204) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_204);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &(((*_1).1: state::perp_market::AMM).15: i128);
        _207 = &(*_208);
        _206 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _207) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_207);
        _202 = [move _203, move _206];
        StorageDead(_206);
        StorageDead(_203);
        _201 = &_202;
        _200 = &(*_201);
        _199 = move _200 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_200);
        _194 = Arguments::<'_>::new_v1(move _195, move _199) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_199);
        StorageDead(_195);
        _193 = format(move _194) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_194);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_197);
        _192 = move _193;
        StorageDead(_193);
        _191 = &_192;
        _190 = &(*_191);
        _189 = <String as Deref>::deref(move _190) -> [return: bb80, unwind: bb494];
    }

    bb80: {
        _188 = &(*_189);
        StorageDead(_190);
        _187 = solana_program::log::sol_log(move _188) -> [return: bb81, unwind: bb494];
    }

    bb81: {
        StorageDead(_188);
        drop(_192) -> [return: bb82, unwind: bb500];
    }

    bb82: {
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_187);
        StorageLive(_209);
        _209 = _167;
        _162 = std::result::Result::<(), error::ErrorCode>::Err(move _209);
        StorageDead(_209);
        StorageDead(_167);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_163);
        _161 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _162) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_162);
        _210 = discriminant(_161);
        switchInt(move _210) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_214);
        _214 = ((_161 as Continue).0: ());
        _160 = _214;
        StorageDead(_214);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = (((*_1).1: state::perp_market::AMM).11: u128);
        _218 = Gt(move _219, const 0_u128);
        switchInt(move _218) -> [0: bb89, otherwise: bb88];
    }

    bb86: {
        StorageLive(_211);
        _211 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_213);
        _213 = _211;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _213) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb463;
    }

    bb88: {
        StorageDead(_219);
        StorageLive(_220);
        _220 = ();
        _217 = std::result::Result::<(), error::ErrorCode>::Ok(move _220);
        StorageDead(_220);
        goto -> bb102;
    }

    bb89: {
        StorageDead(_219);
        StorageLive(_221);
        _221 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _1127 = const _;
        _232 = &(*_1127);
        _231 = &(*_232);
        _230 = move _231 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_231);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &_221;
        _239 = &(*_240);
        _238 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _239) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_239);
        _237 = [move _238];
        StorageDead(_238);
        _236 = &_237;
        _235 = &(*_236);
        _234 = move _235 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_235);
        _229 = Arguments::<'_>::new_v1(move _230, move _234) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_234);
        StorageDead(_230);
        _228 = format(move _229) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_229);
        StorageDead(_240);
        StorageDead(_237);
        StorageDead(_236);
        StorageDead(_232);
        _227 = move _228;
        StorageDead(_228);
        _226 = &_227;
        _225 = &(*_226);
        _224 = <String as Deref>::deref(move _225) -> [return: bb93, unwind: bb493];
    }

    bb93: {
        _223 = &(*_224);
        StorageDead(_225);
        _222 = solana_program::log::sol_log(move _223) -> [return: bb94, unwind: bb493];
    }

    bb94: {
        StorageDead(_223);
        drop(_227) -> [return: bb95, unwind: bb500];
    }

    bb95: {
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_222);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _1126 = const _;
        _251 = &(*_1126);
        _250 = &(*_251);
        _249 = move _250 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_250);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &((*_1).21: u16);
        _258 = &(*_259);
        _257 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _258) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_258);
        _256 = [move _257];
        StorageDead(_257);
        _255 = &_256;
        _254 = &(*_255);
        _253 = move _254 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_254);
        _248 = Arguments::<'_>::new_v1(move _249, move _253) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_253);
        StorageDead(_249);
        _247 = format(move _248) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_248);
        StorageDead(_259);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_251);
        _246 = move _247;
        StorageDead(_247);
        _245 = &_246;
        _244 = &(*_245);
        _243 = <String as Deref>::deref(move _244) -> [return: bb99, unwind: bb492];
    }

    bb99: {
        _242 = &(*_243);
        StorageDead(_244);
        _241 = solana_program::log::sol_log(move _242) -> [return: bb100, unwind: bb492];
    }

    bb100: {
        StorageDead(_242);
        drop(_246) -> [return: bb101, unwind: bb500];
    }

    bb101: {
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_241);
        StorageLive(_260);
        _260 = _221;
        _217 = std::result::Result::<(), error::ErrorCode>::Err(move _260);
        StorageDead(_260);
        StorageDead(_221);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_218);
        _216 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _217) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_217);
        _261 = discriminant(_216);
        switchInt(move _261) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_265);
        _265 = ((_216 as Continue).0: ());
        _215 = _265;
        StorageDead(_265);
        StorageDead(_216);
        StorageDead(_215);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &((*_1).22: state::perp_market::MarketStatus);
        StorageLive(_269);
        _1125 = const _;
        _269 = &(*_1125);
        _267 = <state::perp_market::MarketStatus as PartialEq>::ne(move _268, move _269) -> [return: bb107, unwind continue];
    }

    bb105: {
        StorageLive(_262);
        _262 = ((_216 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_264);
        _264 = _262;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _264) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_216);
        StorageDead(_215);
        goto -> bb463;
    }

    bb107: {
        switchInt(move _267) -> [0: bb131, otherwise: bb108];
    }

    bb108: {
        StorageDead(_269);
        StorageDead(_268);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = (((*_1).1: state::perp_market::AMM).10: u128);
        StorageLive(_276);
        StorageLive(_277);
        _277 = (((*_1).1: state::perp_market::AMM).15: i128);
        _276 = core::num::<impl i128>::unsigned_abs(move _277) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_277);
        _274 = Gt(move _275, move _276);
        switchInt(move _274) -> [0: bb111, otherwise: bb110];
    }

    bb110: {
        StorageDead(_276);
        StorageDead(_275);
        StorageLive(_278);
        _278 = ();
        _273 = std::result::Result::<(), error::ErrorCode>::Ok(move _278);
        StorageDead(_278);
        goto -> bb126;
    }

    bb111: {
        StorageDead(_276);
        StorageDead(_275);
        StorageLive(_279);
        _279 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _1124 = const _;
        _290 = &(*_1124);
        _289 = &(*_290);
        _288 = move _289 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_289);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        _298 = &_279;
        _297 = &(*_298);
        _296 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _297) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_297);
        _295 = [move _296];
        StorageDead(_296);
        _294 = &_295;
        _293 = &(*_294);
        _292 = move _293 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_293);
        _287 = Arguments::<'_>::new_v1(move _288, move _292) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_292);
        StorageDead(_288);
        _286 = format(move _287) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_287);
        StorageDead(_298);
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_290);
        _285 = move _286;
        StorageDead(_286);
        _284 = &_285;
        _283 = &(*_284);
        _282 = <String as Deref>::deref(move _283) -> [return: bb115, unwind: bb491];
    }

    bb115: {
        _281 = &(*_282);
        StorageDead(_283);
        _280 = solana_program::log::sol_log(move _281) -> [return: bb116, unwind: bb491];
    }

    bb116: {
        StorageDead(_281);
        drop(_285) -> [return: bb117, unwind: bb500];
    }

    bb117: {
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_282);
        StorageDead(_280);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _1123 = const _;
        _309 = &(*_1123);
        _308 = &(*_309);
        _307 = move _308 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_308);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        _317 = &((*_1).21: u16);
        _316 = &(*_317);
        _315 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _316) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_316);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &(((*_1).1: state::perp_market::AMM).10: u128);
        _319 = &(*_320);
        _318 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _319) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_319);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        _323 = &(((*_1).1: state::perp_market::AMM).15: i128);
        _322 = &(*_323);
        _321 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _322) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_322);
        _314 = [move _315, move _318, move _321];
        StorageDead(_321);
        StorageDead(_318);
        StorageDead(_315);
        _313 = &_314;
        _312 = &(*_313);
        _311 = move _312 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_312);
        _306 = Arguments::<'_>::new_v1(move _307, move _311) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_311);
        StorageDead(_307);
        _305 = format(move _306) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_306);
        StorageDead(_323);
        StorageDead(_320);
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_313);
        StorageDead(_309);
        _304 = move _305;
        StorageDead(_305);
        _303 = &_304;
        _302 = &(*_303);
        _301 = <String as Deref>::deref(move _302) -> [return: bb123, unwind: bb490];
    }

    bb123: {
        _300 = &(*_301);
        StorageDead(_302);
        _299 = solana_program::log::sol_log(move _300) -> [return: bb124, unwind: bb490];
    }

    bb124: {
        StorageDead(_300);
        drop(_304) -> [return: bb125, unwind: bb500];
    }

    bb125: {
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_301);
        StorageDead(_299);
        StorageLive(_324);
        _324 = _279;
        _273 = std::result::Result::<(), error::ErrorCode>::Err(move _324);
        StorageDead(_324);
        StorageDead(_279);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_274);
        _272 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _273) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_273);
        _325 = discriminant(_272);
        switchInt(move _325) -> [0: bb128, 1: bb129, otherwise: bb4];
    }

    bb128: {
        StorageLive(_329);
        _329 = ((_272 as Continue).0: ());
        _271 = _329;
        StorageDead(_329);
        StorageDead(_272);
        StorageDead(_271);
        _266 = const ();
        goto -> bb132;
    }

    bb129: {
        StorageLive(_326);
        _326 = ((_272 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_328);
        _328 = _326;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _328) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_328);
        StorageDead(_326);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_267);
        StorageDead(_266);
        goto -> bb463;
    }

    bb131: {
        StorageDead(_269);
        StorageDead(_268);
        _266 = const ();
        goto -> bb132;
    }

    bb132: {
        StorageDead(_267);
        StorageDead(_266);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = (((*_1).1: state::perp_market::AMM).10: u128);
        StorageLive(_335);
        _335 = (((*_1).1: state::perp_market::AMM).5: u128);
        _333 = Ge(move _334, move _335);
        switchInt(move _333) -> [0: bb134, otherwise: bb133];
    }

    bb133: {
        StorageDead(_335);
        StorageDead(_334);
        goto -> bb135;
    }

    bb134: {
        StorageDead(_335);
        StorageDead(_334);
        StorageLive(_336);
        StorageLive(_337);
        _337 = (((*_1).1: state::perp_market::AMM).10: u128);
        StorageLive(_338);
        _338 = (((*_1).1: state::perp_market::AMM).6: u128);
        _336 = Ge(move _337, move _338);
        switchInt(move _336) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_339);
        _339 = ();
        _332 = std::result::Result::<(), error::ErrorCode>::Ok(move _339);
        StorageDead(_339);
        goto -> bb152;
    }

    bb136: {
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_340);
        _340 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _1122 = const _;
        _351 = &(*_1122);
        _350 = &(*_351);
        _349 = move _350 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_350);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &_340;
        _358 = &(*_359);
        _357 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _358) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_358);
        _356 = [move _357];
        StorageDead(_357);
        _355 = &_356;
        _354 = &(*_355);
        _353 = move _354 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_354);
        _348 = Arguments::<'_>::new_v1(move _349, move _353) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_353);
        StorageDead(_349);
        _347 = format(move _348) -> [return: bb139, unwind continue];
    }

    bb139: {
        StorageDead(_348);
        StorageDead(_359);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_351);
        _346 = move _347;
        StorageDead(_347);
        _345 = &_346;
        _344 = &(*_345);
        _343 = <String as Deref>::deref(move _344) -> [return: bb140, unwind: bb489];
    }

    bb140: {
        _342 = &(*_343);
        StorageDead(_344);
        _341 = solana_program::log::sol_log(move _342) -> [return: bb141, unwind: bb489];
    }

    bb141: {
        StorageDead(_342);
        drop(_346) -> [return: bb142, unwind: bb500];
    }

    bb142: {
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_341);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _1121 = const _;
        _370 = &(*_1121);
        _369 = &(*_370);
        _368 = move _369 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_369);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &((*_1).21: u16);
        _377 = &(*_378);
        _376 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _377) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_377);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &(((*_1).1: state::perp_market::AMM).10: u128);
        _380 = &(*_381);
        _379 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _380) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_380);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = &(((*_1).1: state::perp_market::AMM).5: u128);
        _383 = &(*_384);
        _382 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _383) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_383);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &(((*_1).1: state::perp_market::AMM).6: u128);
        _386 = &(*_387);
        _385 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _386) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_386);
        _375 = [move _376, move _379, move _382, move _385];
        StorageDead(_385);
        StorageDead(_382);
        StorageDead(_379);
        StorageDead(_376);
        _374 = &_375;
        _373 = &(*_374);
        _372 = move _373 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_373);
        _367 = Arguments::<'_>::new_v1(move _368, move _372) -> [return: bb147, unwind continue];
    }

    bb147: {
        StorageDead(_372);
        StorageDead(_368);
        _366 = format(move _367) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_367);
        StorageDead(_387);
        StorageDead(_384);
        StorageDead(_381);
        StorageDead(_378);
        StorageDead(_375);
        StorageDead(_374);
        StorageDead(_370);
        _365 = move _366;
        StorageDead(_366);
        _364 = &_365;
        _363 = &(*_364);
        _362 = <String as Deref>::deref(move _363) -> [return: bb149, unwind: bb488];
    }

    bb149: {
        _361 = &(*_362);
        StorageDead(_363);
        _360 = solana_program::log::sol_log(move _361) -> [return: bb150, unwind: bb488];
    }

    bb150: {
        StorageDead(_361);
        drop(_365) -> [return: bb151, unwind: bb500];
    }

    bb151: {
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_360);
        StorageLive(_388);
        _388 = _340;
        _332 = std::result::Result::<(), error::ErrorCode>::Err(move _388);
        StorageDead(_388);
        StorageDead(_340);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_336);
        StorageDead(_333);
        _331 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _332) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_332);
        _389 = discriminant(_331);
        switchInt(move _389) -> [0: bb154, 1: bb155, otherwise: bb4];
    }

    bb154: {
        StorageLive(_393);
        _393 = ((_331 as Continue).0: ());
        _330 = _393;
        StorageDead(_393);
        StorageDead(_331);
        StorageDead(_330);
        StorageLive(_394);
        StorageLive(_395);
        _395 = (((*_1).1: state::perp_market::AMM).10: u128);
        _394 = <U192 as From<u128>>::from(move _395) -> [return: bb157, unwind continue];
    }

    bb155: {
        StorageLive(_390);
        _390 = ((_331 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_392);
        _392 = _390;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _392) -> [return: bb156, unwind continue];
    }

    bb156: {
        StorageDead(_392);
        StorageDead(_390);
        StorageDead(_331);
        StorageDead(_330);
        goto -> bb463;
    }

    bb157: {
        StorageDead(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = _394;
        StorageLive(_400);
        _400 = _394;
        _398 = <U192 as SafeMath>::safe_mul(move _399, move _400) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_400);
        StorageDead(_399);
        _397 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _398) -> [return: bb159, unwind continue];
    }

    bb159: {
        StorageDead(_398);
        _401 = discriminant(_397);
        switchInt(move _401) -> [0: bb160, 1: bb161, otherwise: bb4];
    }

    bb160: {
        StorageLive(_405);
        _405 = ((_397 as Continue).0: math::bn::U192);
        _396 = _405;
        StorageDead(_405);
        StorageDead(_397);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _412 = _396;
        StorageLive(_413);
        StorageLive(_414);
        _414 = (((*_1).1: state::perp_market::AMM).5: u128);
        _413 = <U192 as From<u128>>::from(move _414) -> [return: bb163, unwind continue];
    }

    bb161: {
        StorageLive(_402);
        _402 = ((_397 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_404);
        _404 = _402;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _404) -> [return: bb162, unwind continue];
    }

    bb162: {
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_397);
        goto -> bb462;
    }

    bb163: {
        StorageDead(_414);
        _411 = <U192 as SafeMath>::safe_div(move _412, move _413) -> [return: bb164, unwind continue];
    }

    bb164: {
        StorageDead(_413);
        StorageDead(_412);
        _410 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _411) -> [return: bb165, unwind continue];
    }

    bb165: {
        StorageDead(_411);
        _415 = discriminant(_410);
        switchInt(move _415) -> [0: bb166, 1: bb167, otherwise: bb4];
    }

    bb166: {
        StorageLive(_419);
        _419 = ((_410 as Continue).0: math::bn::U192);
        _409 = _419;
        StorageDead(_419);
        _408 = U192::try_to_u128(move _409) -> [return: bb169, unwind continue];
    }

    bb167: {
        StorageLive(_416);
        _416 = ((_410 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_418);
        _418 = _416;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _418) -> [return: bb168, unwind continue];
    }

    bb168: {
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_409);
        StorageDead(_408);
        goto -> bb460;
    }

    bb169: {
        StorageDead(_409);
        _407 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _408) -> [return: bb170, unwind continue];
    }

    bb170: {
        StorageDead(_408);
        _420 = discriminant(_407);
        switchInt(move _420) -> [0: bb171, 1: bb172, otherwise: bb4];
    }

    bb171: {
        StorageLive(_424);
        _424 = ((_407 as Continue).0: u128);
        _406 = _424;
        StorageDead(_424);
        StorageDead(_410);
        StorageDead(_407);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = _406;
        _431 = <u128 as Cast>::cast::<i128>(move _432) -> [return: bb174, unwind continue];
    }

    bb172: {
        StorageLive(_421);
        _421 = ((_407 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_423);
        _423 = _421;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _423) -> [return: bb173, unwind continue];
    }

    bb173: {
        StorageDead(_423);
        StorageDead(_421);
        goto -> bb460;
    }

    bb174: {
        StorageDead(_432);
        _430 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _431) -> [return: bb175, unwind continue];
    }

    bb175: {
        StorageDead(_431);
        _433 = discriminant(_430);
        switchInt(move _433) -> [0: bb176, 1: bb177, otherwise: bb4];
    }

    bb176: {
        StorageLive(_437);
        _437 = ((_430 as Continue).0: i128);
        _429 = _437;
        StorageDead(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        _441 = (((*_1).1: state::perp_market::AMM).6: u128);
        _440 = <u128 as Cast>::cast::<i128>(move _441) -> [return: bb179, unwind continue];
    }

    bb177: {
        StorageLive(_434);
        _434 = ((_430 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_436);
        _436 = _434;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _436) -> [return: bb178, unwind continue];
    }

    bb178: {
        StorageDead(_436);
        StorageDead(_434);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_426);
        goto -> bb458;
    }

    bb179: {
        StorageDead(_441);
        _439 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _440) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_440);
        _442 = discriminant(_439);
        switchInt(move _442) -> [0: bb181, 1: bb182, otherwise: bb4];
    }

    bb181: {
        StorageLive(_446);
        _446 = ((_439 as Continue).0: i128);
        _438 = _446;
        StorageDead(_446);
        _428 = <i128 as SafeMath>::safe_sub(move _429, move _438) -> [return: bb184, unwind continue];
    }

    bb182: {
        StorageLive(_443);
        _443 = ((_439 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_445);
        _445 = _443;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _445) -> [return: bb183, unwind continue];
    }

    bb183: {
        StorageDead(_445);
        StorageDead(_443);
        StorageDead(_438);
        StorageDead(_429);
        StorageDead(_428);
        goto -> bb457;
    }

    bb184: {
        StorageDead(_438);
        StorageDead(_429);
        _427 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _428) -> [return: bb185, unwind continue];
    }

    bb185: {
        StorageDead(_428);
        _447 = discriminant(_427);
        switchInt(move _447) -> [0: bb186, 1: bb187, otherwise: bb4];
    }

    bb186: {
        StorageLive(_451);
        _451 = ((_427 as Continue).0: i128);
        _426 = _451;
        StorageDead(_451);
        _425 = core::num::<impl i128>::abs(move _426) -> [return: bb189, unwind continue];
    }

    bb187: {
        StorageLive(_448);
        _448 = ((_427 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_450);
        _450 = _448;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _450) -> [return: bb188, unwind continue];
    }

    bb188: {
        StorageDead(_450);
        StorageDead(_448);
        goto -> bb457;
    }

    bb189: {
        StorageDead(_426);
        StorageDead(_439);
        StorageDead(_430);
        StorageDead(_427);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        _456 = _425;
        _455 = Le(move _456, const 15_i128);
        switchInt(move _455) -> [0: bb191, otherwise: bb190];
    }

    bb190: {
        StorageDead(_456);
        StorageLive(_457);
        _457 = ();
        _454 = std::result::Result::<(), error::ErrorCode>::Ok(move _457);
        StorageDead(_457);
        goto -> bb209;
    }

    bb191: {
        StorageDead(_456);
        StorageLive(_458);
        _458 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _1120 = const _;
        _469 = &(*_1120);
        _468 = &(*_469);
        _467 = move _468 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_468);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = &_458;
        _476 = &(*_477);
        _475 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _476) -> [return: bb192, unwind continue];
    }

    bb192: {
        StorageDead(_476);
        _474 = [move _475];
        StorageDead(_475);
        _473 = &_474;
        _472 = &(*_473);
        _471 = move _472 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_472);
        _466 = Arguments::<'_>::new_v1(move _467, move _471) -> [return: bb193, unwind continue];
    }

    bb193: {
        StorageDead(_471);
        StorageDead(_467);
        _465 = format(move _466) -> [return: bb194, unwind continue];
    }

    bb194: {
        StorageDead(_466);
        StorageDead(_477);
        StorageDead(_474);
        StorageDead(_473);
        StorageDead(_469);
        _464 = move _465;
        StorageDead(_465);
        _463 = &_464;
        _462 = &(*_463);
        _461 = <String as Deref>::deref(move _462) -> [return: bb195, unwind: bb487];
    }

    bb195: {
        _460 = &(*_461);
        StorageDead(_462);
        _459 = solana_program::log::sol_log(move _460) -> [return: bb196, unwind: bb487];
    }

    bb196: {
        StorageDead(_460);
        drop(_464) -> [return: bb197, unwind: bb500];
    }

    bb197: {
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_459);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        _1119 = const _;
        _488 = &(*_1119);
        _487 = &(*_488);
        _486 = move _487 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_487);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        _496 = &((*_1).21: u16);
        _495 = &(*_496);
        _494 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _495) -> [return: bb198, unwind continue];
    }

    bb198: {
        StorageDead(_495);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = &_396;
        _498 = &(*_499);
        _497 = core::fmt::rt::Argument::<'_>::new_display::<U192>(move _498) -> [return: bb199, unwind continue];
    }

    bb199: {
        StorageDead(_498);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        _502 = &(((*_1).1: state::perp_market::AMM).5: u128);
        _501 = &(*_502);
        _500 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _501) -> [return: bb200, unwind continue];
    }

    bb200: {
        StorageDead(_501);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &(((*_1).1: state::perp_market::AMM).6: u128);
        _504 = &(*_505);
        _503 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _504) -> [return: bb201, unwind continue];
    }

    bb201: {
        StorageDead(_504);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = &_406;
        _507 = &(*_508);
        _506 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _507) -> [return: bb202, unwind continue];
    }

    bb202: {
        StorageDead(_507);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &_425;
        _510 = &(*_511);
        _509 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _510) -> [return: bb203, unwind continue];
    }

    bb203: {
        StorageDead(_510);
        _493 = [move _494, move _497, move _500, move _503, move _506, move _509];
        StorageDead(_509);
        StorageDead(_506);
        StorageDead(_503);
        StorageDead(_500);
        StorageDead(_497);
        StorageDead(_494);
        _492 = &_493;
        _491 = &(*_492);
        _490 = move _491 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_491);
        _485 = Arguments::<'_>::new_v1(move _486, move _490) -> [return: bb204, unwind continue];
    }

    bb204: {
        StorageDead(_490);
        StorageDead(_486);
        _484 = format(move _485) -> [return: bb205, unwind continue];
    }

    bb205: {
        StorageDead(_485);
        StorageDead(_511);
        StorageDead(_508);
        StorageDead(_505);
        StorageDead(_502);
        StorageDead(_499);
        StorageDead(_496);
        StorageDead(_493);
        StorageDead(_492);
        StorageDead(_488);
        _483 = move _484;
        StorageDead(_484);
        _482 = &_483;
        _481 = &(*_482);
        _480 = <String as Deref>::deref(move _481) -> [return: bb206, unwind: bb486];
    }

    bb206: {
        _479 = &(*_480);
        StorageDead(_481);
        _478 = solana_program::log::sol_log(move _479) -> [return: bb207, unwind: bb486];
    }

    bb207: {
        StorageDead(_479);
        drop(_483) -> [return: bb208, unwind: bb500];
    }

    bb208: {
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_480);
        StorageDead(_478);
        StorageLive(_512);
        _512 = _458;
        _454 = std::result::Result::<(), error::ErrorCode>::Err(move _512);
        StorageDead(_512);
        StorageDead(_458);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_455);
        _453 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _454) -> [return: bb210, unwind continue];
    }

    bb210: {
        StorageDead(_454);
        _513 = discriminant(_453);
        switchInt(move _513) -> [0: bb211, 1: bb212, otherwise: bb4];
    }

    bb211: {
        StorageLive(_517);
        _517 = ((_453 as Continue).0: ());
        _452 = _517;
        StorageDead(_517);
        StorageDead(_453);
        StorageDead(_452);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _520 = (((*_1).1: state::perp_market::AMM).63: u32);
        _519 = Gt(move _520, const 0_u32);
        switchInt(move _519) -> [0: bb215, otherwise: bb214];
    }

    bb212: {
        StorageLive(_514);
        _514 = ((_453 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_516);
        _516 = _514;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _516) -> [return: bb213, unwind continue];
    }

    bb213: {
        StorageDead(_516);
        StorageDead(_514);
        StorageDead(_453);
        StorageDead(_452);
        goto -> bb459;
    }

    bb214: {
        StorageDead(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        _523 = (((*_1).1: state::perp_market::AMM).82: i32);
        _522 = Le(move _523, const 0_i32);
        switchInt(move _522) -> [0: bb243, otherwise: bb216];
    }

    bb215: {
        StorageDead(_520);
        _518 = const ();
        goto -> bb274;
    }

    bb216: {
        StorageDead(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        _528 = (((*_1).1: state::perp_market::AMM).39: u128);
        StorageLive(_529);
        _529 = (((*_1).1: state::perp_market::AMM).5: u128);
        _527 = Ge(move _528, move _529);
        switchInt(move _527) -> [0: bb220, otherwise: bb217];
    }

    bb217: {
        StorageDead(_529);
        StorageDead(_528);
        StorageLive(_530);
        StorageLive(_531);
        _531 = (((*_1).1: state::perp_market::AMM).40: u128);
        StorageLive(_532);
        _532 = (((*_1).1: state::perp_market::AMM).6: u128);
        _530 = Le(move _531, move _532);
        switchInt(move _530) -> [0: bb219, otherwise: bb218];
    }

    bb218: {
        StorageDead(_532);
        StorageDead(_531);
        StorageLive(_533);
        _533 = ();
        _526 = std::result::Result::<(), error::ErrorCode>::Ok(move _533);
        StorageDead(_533);
        goto -> bb238;
    }

    bb219: {
        StorageDead(_532);
        StorageDead(_531);
        goto -> bb221;
    }

    bb220: {
        StorageDead(_529);
        StorageDead(_528);
        goto -> bb221;
    }

    bb221: {
        StorageLive(_534);
        _534 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        _1118 = const _;
        _545 = &(*_1118);
        _544 = &(*_545);
        _543 = move _544 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_544);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        _553 = &_534;
        _552 = &(*_553);
        _551 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _552) -> [return: bb222, unwind continue];
    }

    bb222: {
        StorageDead(_552);
        _550 = [move _551];
        StorageDead(_551);
        _549 = &_550;
        _548 = &(*_549);
        _547 = move _548 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_548);
        _542 = Arguments::<'_>::new_v1(move _543, move _547) -> [return: bb223, unwind continue];
    }

    bb223: {
        StorageDead(_547);
        StorageDead(_543);
        _541 = format(move _542) -> [return: bb224, unwind continue];
    }

    bb224: {
        StorageDead(_542);
        StorageDead(_553);
        StorageDead(_550);
        StorageDead(_549);
        StorageDead(_545);
        _540 = move _541;
        StorageDead(_541);
        _539 = &_540;
        _538 = &(*_539);
        _537 = <String as Deref>::deref(move _538) -> [return: bb225, unwind: bb485];
    }

    bb225: {
        _536 = &(*_537);
        StorageDead(_538);
        _535 = solana_program::log::sol_log(move _536) -> [return: bb226, unwind: bb485];
    }

    bb226: {
        StorageDead(_536);
        drop(_540) -> [return: bb227, unwind: bb500];
    }

    bb227: {
        StorageDead(_540);
        StorageDead(_539);
        StorageDead(_537);
        StorageDead(_535);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _1117 = const _;
        _564 = &(*_1117);
        _563 = &(*_564);
        _562 = move _563 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_563);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _572 = &((*_1).21: u16);
        _571 = &(*_572);
        _570 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _571) -> [return: bb228, unwind continue];
    }

    bb228: {
        StorageDead(_571);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        _575 = &(((*_1).1: state::perp_market::AMM).39: u128);
        _574 = &(*_575);
        _573 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _574) -> [return: bb229, unwind continue];
    }

    bb229: {
        StorageDead(_574);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        _578 = &(((*_1).1: state::perp_market::AMM).5: u128);
        _577 = &(*_578);
        _576 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _577) -> [return: bb230, unwind continue];
    }

    bb230: {
        StorageDead(_577);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        _581 = &(((*_1).1: state::perp_market::AMM).40: u128);
        _580 = &(*_581);
        _579 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _580) -> [return: bb231, unwind continue];
    }

    bb231: {
        StorageDead(_580);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        _584 = &(((*_1).1: state::perp_market::AMM).6: u128);
        _583 = &(*_584);
        _582 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _583) -> [return: bb232, unwind continue];
    }

    bb232: {
        StorageDead(_583);
        _569 = [move _570, move _573, move _576, move _579, move _582];
        StorageDead(_582);
        StorageDead(_579);
        StorageDead(_576);
        StorageDead(_573);
        StorageDead(_570);
        _568 = &_569;
        _567 = &(*_568);
        _566 = move _567 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_567);
        _561 = Arguments::<'_>::new_v1(move _562, move _566) -> [return: bb233, unwind continue];
    }

    bb233: {
        StorageDead(_566);
        StorageDead(_562);
        _560 = format(move _561) -> [return: bb234, unwind continue];
    }

    bb234: {
        StorageDead(_561);
        StorageDead(_584);
        StorageDead(_581);
        StorageDead(_578);
        StorageDead(_575);
        StorageDead(_572);
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_564);
        _559 = move _560;
        StorageDead(_560);
        _558 = &_559;
        _557 = &(*_558);
        _556 = <String as Deref>::deref(move _557) -> [return: bb235, unwind: bb484];
    }

    bb235: {
        _555 = &(*_556);
        StorageDead(_557);
        _554 = solana_program::log::sol_log(move _555) -> [return: bb236, unwind: bb484];
    }

    bb236: {
        StorageDead(_555);
        drop(_559) -> [return: bb237, unwind: bb500];
    }

    bb237: {
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_554);
        StorageLive(_585);
        _585 = _534;
        _526 = std::result::Result::<(), error::ErrorCode>::Err(move _585);
        StorageDead(_585);
        StorageDead(_534);
        goto -> bb238;
    }

    bb238: {
        StorageDead(_530);
        StorageDead(_527);
        _525 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _526) -> [return: bb239, unwind continue];
    }

    bb239: {
        StorageDead(_526);
        _586 = discriminant(_525);
        switchInt(move _586) -> [0: bb240, 1: bb241, otherwise: bb4];
    }

    bb240: {
        StorageLive(_590);
        _590 = ((_525 as Continue).0: ());
        _524 = _590;
        StorageDead(_590);
        StorageDead(_525);
        StorageDead(_524);
        _521 = const ();
        goto -> bb244;
    }

    bb241: {
        StorageLive(_587);
        _587 = ((_525 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_589);
        _589 = _587;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _589) -> [return: bb242, unwind continue];
    }

    bb242: {
        StorageDead(_589);
        StorageDead(_587);
        StorageDead(_525);
        StorageDead(_524);
        StorageDead(_522);
        StorageDead(_521);
        goto -> bb456;
    }

    bb243: {
        StorageDead(_523);
        _521 = const ();
        goto -> bb244;
    }

    bb244: {
        StorageDead(_522);
        StorageDead(_521);
        StorageLive(_591);
        StorageLive(_592);
        _592 = (((*_1).1: state::perp_market::AMM).82: i32);
        _591 = Ge(move _592, const 0_i32);
        switchInt(move _591) -> [0: bb272, otherwise: bb245];
    }

    bb245: {
        StorageDead(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        _597 = (((*_1).1: state::perp_market::AMM).37: u128);
        StorageLive(_598);
        _598 = (((*_1).1: state::perp_market::AMM).5: u128);
        _596 = Le(move _597, move _598);
        switchInt(move _596) -> [0: bb249, otherwise: bb246];
    }

    bb246: {
        StorageDead(_598);
        StorageDead(_597);
        StorageLive(_599);
        StorageLive(_600);
        _600 = (((*_1).1: state::perp_market::AMM).38: u128);
        StorageLive(_601);
        _601 = (((*_1).1: state::perp_market::AMM).6: u128);
        _599 = Ge(move _600, move _601);
        switchInt(move _599) -> [0: bb248, otherwise: bb247];
    }

    bb247: {
        StorageDead(_601);
        StorageDead(_600);
        StorageLive(_602);
        _602 = ();
        _595 = std::result::Result::<(), error::ErrorCode>::Ok(move _602);
        StorageDead(_602);
        goto -> bb267;
    }

    bb248: {
        StorageDead(_601);
        StorageDead(_600);
        goto -> bb250;
    }

    bb249: {
        StorageDead(_598);
        StorageDead(_597);
        goto -> bb250;
    }

    bb250: {
        StorageLive(_603);
        _603 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        _1116 = const _;
        _614 = &(*_1116);
        _613 = &(*_614);
        _612 = move _613 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_613);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        _622 = &_603;
        _621 = &(*_622);
        _620 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _621) -> [return: bb251, unwind continue];
    }

    bb251: {
        StorageDead(_621);
        _619 = [move _620];
        StorageDead(_620);
        _618 = &_619;
        _617 = &(*_618);
        _616 = move _617 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_617);
        _611 = Arguments::<'_>::new_v1(move _612, move _616) -> [return: bb252, unwind continue];
    }

    bb252: {
        StorageDead(_616);
        StorageDead(_612);
        _610 = format(move _611) -> [return: bb253, unwind continue];
    }

    bb253: {
        StorageDead(_611);
        StorageDead(_622);
        StorageDead(_619);
        StorageDead(_618);
        StorageDead(_614);
        _609 = move _610;
        StorageDead(_610);
        _608 = &_609;
        _607 = &(*_608);
        _606 = <String as Deref>::deref(move _607) -> [return: bb254, unwind: bb483];
    }

    bb254: {
        _605 = &(*_606);
        StorageDead(_607);
        _604 = solana_program::log::sol_log(move _605) -> [return: bb255, unwind: bb483];
    }

    bb255: {
        StorageDead(_605);
        drop(_609) -> [return: bb256, unwind: bb500];
    }

    bb256: {
        StorageDead(_609);
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_604);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        _1115 = const _;
        _633 = &(*_1115);
        _632 = &(*_633);
        _631 = move _632 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_632);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        _641 = &((*_1).21: u16);
        _640 = &(*_641);
        _639 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _640) -> [return: bb257, unwind continue];
    }

    bb257: {
        StorageDead(_640);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        _644 = &(((*_1).1: state::perp_market::AMM).37: u128);
        _643 = &(*_644);
        _642 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _643) -> [return: bb258, unwind continue];
    }

    bb258: {
        StorageDead(_643);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        _647 = &(((*_1).1: state::perp_market::AMM).5: u128);
        _646 = &(*_647);
        _645 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _646) -> [return: bb259, unwind continue];
    }

    bb259: {
        StorageDead(_646);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        _650 = &(((*_1).1: state::perp_market::AMM).38: u128);
        _649 = &(*_650);
        _648 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _649) -> [return: bb260, unwind continue];
    }

    bb260: {
        StorageDead(_649);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        _653 = &(((*_1).1: state::perp_market::AMM).6: u128);
        _652 = &(*_653);
        _651 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _652) -> [return: bb261, unwind continue];
    }

    bb261: {
        StorageDead(_652);
        _638 = [move _639, move _642, move _645, move _648, move _651];
        StorageDead(_651);
        StorageDead(_648);
        StorageDead(_645);
        StorageDead(_642);
        StorageDead(_639);
        _637 = &_638;
        _636 = &(*_637);
        _635 = move _636 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_636);
        _630 = Arguments::<'_>::new_v1(move _631, move _635) -> [return: bb262, unwind continue];
    }

    bb262: {
        StorageDead(_635);
        StorageDead(_631);
        _629 = format(move _630) -> [return: bb263, unwind continue];
    }

    bb263: {
        StorageDead(_630);
        StorageDead(_653);
        StorageDead(_650);
        StorageDead(_647);
        StorageDead(_644);
        StorageDead(_641);
        StorageDead(_638);
        StorageDead(_637);
        StorageDead(_633);
        _628 = move _629;
        StorageDead(_629);
        _627 = &_628;
        _626 = &(*_627);
        _625 = <String as Deref>::deref(move _626) -> [return: bb264, unwind: bb482];
    }

    bb264: {
        _624 = &(*_625);
        StorageDead(_626);
        _623 = solana_program::log::sol_log(move _624) -> [return: bb265, unwind: bb482];
    }

    bb265: {
        StorageDead(_624);
        drop(_628) -> [return: bb266, unwind: bb500];
    }

    bb266: {
        StorageDead(_628);
        StorageDead(_627);
        StorageDead(_625);
        StorageDead(_623);
        StorageLive(_654);
        _654 = _603;
        _595 = std::result::Result::<(), error::ErrorCode>::Err(move _654);
        StorageDead(_654);
        StorageDead(_603);
        goto -> bb267;
    }

    bb267: {
        StorageDead(_599);
        StorageDead(_596);
        _594 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _595) -> [return: bb268, unwind continue];
    }

    bb268: {
        StorageDead(_595);
        _655 = discriminant(_594);
        switchInt(move _655) -> [0: bb269, 1: bb270, otherwise: bb4];
    }

    bb269: {
        StorageLive(_659);
        _659 = ((_594 as Continue).0: ());
        _593 = _659;
        StorageDead(_659);
        StorageDead(_594);
        StorageDead(_593);
        _518 = const ();
        goto -> bb273;
    }

    bb270: {
        StorageLive(_656);
        _656 = ((_594 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_658);
        _658 = _656;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _658) -> [return: bb271, unwind continue];
    }

    bb271: {
        StorageDead(_658);
        StorageDead(_656);
        StorageDead(_594);
        StorageDead(_593);
        StorageDead(_591);
        goto -> bb456;
    }

    bb272: {
        StorageDead(_592);
        _518 = const ();
        goto -> bb273;
    }

    bb273: {
        StorageDead(_591);
        goto -> bb274;
    }

    bb274: {
        StorageDead(_519);
        StorageDead(_518);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        _662 = (((*_1).1: state::perp_market::AMM).77: i8);
        _661 = Ge(move _662, const 0_i8);
        switchInt(move _661) -> [0: bb301, otherwise: bb275];
    }

    bb275: {
        StorageDead(_662);
        StorageLive(_663);
        StorageLive(_664);
        _664 = (((*_1).1: state::perp_market::AMM).83: i8);
        _663 = Ge(move _664, const 0_i8);
        switchInt(move _663) -> [0: bb300, otherwise: bb276];
    }

    bb276: {
        StorageDead(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        _670 = (((*_1).1: state::perp_market::AMM).65: u32);
        StorageLive(_671);
        _671 = (((*_1).1: state::perp_market::AMM).66: u32);
        _672 = CheckedAdd(_670, _671);
        assert(!move (_672.1: bool), "attempt to compute `{} + {}`, which would overflow", move _670, move _671) -> [success: bb277, unwind continue];
    }

    bb277: {
        _669 = move (_672.0: u32);
        StorageDead(_671);
        StorageDead(_670);
        StorageLive(_673);
        _673 = (((*_1).1: state::perp_market::AMM).63: u32);
        _668 = Ge(move _669, move _673);
        switchInt(move _668) -> [0: bb279, otherwise: bb278];
    }

    bb278: {
        StorageDead(_673);
        StorageDead(_669);
        StorageLive(_674);
        _674 = ();
        _667 = std::result::Result::<(), error::ErrorCode>::Ok(move _674);
        StorageDead(_674);
        goto -> bb295;
    }

    bb279: {
        StorageDead(_673);
        StorageDead(_669);
        StorageLive(_675);
        _675 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        _1114 = const _;
        _686 = &(*_1114);
        _685 = &(*_686);
        _684 = move _685 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_685);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        _694 = &_675;
        _693 = &(*_694);
        _692 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _693) -> [return: bb280, unwind continue];
    }

    bb280: {
        StorageDead(_693);
        _691 = [move _692];
        StorageDead(_692);
        _690 = &_691;
        _689 = &(*_690);
        _688 = move _689 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_689);
        _683 = Arguments::<'_>::new_v1(move _684, move _688) -> [return: bb281, unwind continue];
    }

    bb281: {
        StorageDead(_688);
        StorageDead(_684);
        _682 = format(move _683) -> [return: bb282, unwind continue];
    }

    bb282: {
        StorageDead(_683);
        StorageDead(_694);
        StorageDead(_691);
        StorageDead(_690);
        StorageDead(_686);
        _681 = move _682;
        StorageDead(_682);
        _680 = &_681;
        _679 = &(*_680);
        _678 = <String as Deref>::deref(move _679) -> [return: bb283, unwind: bb481];
    }

    bb283: {
        _677 = &(*_678);
        StorageDead(_679);
        _676 = solana_program::log::sol_log(move _677) -> [return: bb284, unwind: bb481];
    }

    bb284: {
        StorageDead(_677);
        drop(_681) -> [return: bb285, unwind: bb500];
    }

    bb285: {
        StorageDead(_681);
        StorageDead(_680);
        StorageDead(_678);
        StorageDead(_676);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        _1113 = const _;
        _705 = &(*_1113);
        _704 = &(*_705);
        _703 = move _704 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_704);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        _713 = &((*_1).21: u16);
        _712 = &(*_713);
        _711 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _712) -> [return: bb286, unwind continue];
    }

    bb286: {
        StorageDead(_712);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        _716 = &(((*_1).1: state::perp_market::AMM).65: u32);
        _715 = &(*_716);
        _714 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _715) -> [return: bb287, unwind continue];
    }

    bb287: {
        StorageDead(_715);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        _719 = &(((*_1).1: state::perp_market::AMM).66: u32);
        _718 = &(*_719);
        _717 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _718) -> [return: bb288, unwind continue];
    }

    bb288: {
        StorageDead(_718);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        _722 = &(((*_1).1: state::perp_market::AMM).63: u32);
        _721 = &(*_722);
        _720 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _721) -> [return: bb289, unwind continue];
    }

    bb289: {
        StorageDead(_721);
        _710 = [move _711, move _714, move _717, move _720];
        StorageDead(_720);
        StorageDead(_717);
        StorageDead(_714);
        StorageDead(_711);
        _709 = &_710;
        _708 = &(*_709);
        _707 = move _708 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_708);
        _702 = Arguments::<'_>::new_v1(move _703, move _707) -> [return: bb290, unwind continue];
    }

    bb290: {
        StorageDead(_707);
        StorageDead(_703);
        _701 = format(move _702) -> [return: bb291, unwind continue];
    }

    bb291: {
        StorageDead(_702);
        StorageDead(_722);
        StorageDead(_719);
        StorageDead(_716);
        StorageDead(_713);
        StorageDead(_710);
        StorageDead(_709);
        StorageDead(_705);
        _700 = move _701;
        StorageDead(_701);
        _699 = &_700;
        _698 = &(*_699);
        _697 = <String as Deref>::deref(move _698) -> [return: bb292, unwind: bb480];
    }

    bb292: {
        _696 = &(*_697);
        StorageDead(_698);
        _695 = solana_program::log::sol_log(move _696) -> [return: bb293, unwind: bb480];
    }

    bb293: {
        StorageDead(_696);
        drop(_700) -> [return: bb294, unwind: bb500];
    }

    bb294: {
        StorageDead(_700);
        StorageDead(_699);
        StorageDead(_697);
        StorageDead(_695);
        StorageLive(_723);
        _723 = _675;
        _667 = std::result::Result::<(), error::ErrorCode>::Err(move _723);
        StorageDead(_723);
        StorageDead(_675);
        goto -> bb295;
    }

    bb295: {
        StorageDead(_668);
        _666 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _667) -> [return: bb296, unwind continue];
    }

    bb296: {
        StorageDead(_667);
        _724 = discriminant(_666);
        switchInt(move _724) -> [0: bb297, 1: bb298, otherwise: bb4];
    }

    bb297: {
        StorageLive(_728);
        _728 = ((_666 as Continue).0: ());
        _665 = _728;
        StorageDead(_728);
        StorageDead(_666);
        StorageDead(_665);
        _660 = const ();
        goto -> bb303;
    }

    bb298: {
        StorageLive(_725);
        _725 = ((_666 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_727);
        _727 = _725;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _727) -> [return: bb299, unwind continue];
    }

    bb299: {
        StorageDead(_727);
        StorageDead(_725);
        StorageDead(_666);
        StorageDead(_665);
        StorageDead(_663);
        StorageDead(_661);
        StorageDead(_660);
        goto -> bb459;
    }

    bb300: {
        StorageDead(_664);
        goto -> bb302;
    }

    bb301: {
        StorageDead(_662);
        goto -> bb302;
    }

    bb302: {
        _660 = const ();
        goto -> bb303;
    }

    bb303: {
        StorageDead(_663);
        StorageDead(_661);
        StorageDead(_660);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        _739 = (((*_1).1: state::perp_market::AMM).65: u32);
        StorageLive(_740);
        _740 = (((*_1).1: state::perp_market::AMM).66: u32);
        _738 = <u32 as SafeMath>::safe_add(move _739, move _740) -> [return: bb304, unwind continue];
    }

    bb304: {
        StorageDead(_740);
        StorageDead(_739);
        _737 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _738) -> [return: bb305, unwind continue];
    }

    bb305: {
        StorageDead(_738);
        _741 = discriminant(_737);
        switchInt(move _741) -> [0: bb306, 1: bb307, otherwise: bb4];
    }

    bb306: {
        StorageLive(_745);
        _745 = ((_737 as Continue).0: u32);
        _736 = _745;
        StorageDead(_745);
        _735 = <u32 as Cast>::cast::<u64>(move _736) -> [return: bb309, unwind continue];
    }

    bb307: {
        StorageLive(_742);
        _742 = ((_737 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_744);
        _744 = _742;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _744) -> [return: bb308, unwind continue];
    }

    bb308: {
        StorageDead(_744);
        StorageDead(_742);
        StorageDead(_736);
        StorageDead(_735);
        goto -> bb454;
    }

    bb309: {
        StorageDead(_736);
        _734 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _735) -> [return: bb310, unwind continue];
    }

    bb310: {
        StorageDead(_735);
        _746 = discriminant(_734);
        switchInt(move _746) -> [0: bb311, 1: bb312, otherwise: bb4];
    }

    bb311: {
        StorageLive(_750);
        _750 = ((_734 as Continue).0: u64);
        _733 = _750;
        StorageDead(_750);
        _732 = Le(move _733, const _);
        switchInt(move _732) -> [0: bb315, otherwise: bb314];
    }

    bb312: {
        StorageLive(_747);
        _747 = ((_734 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_749);
        _749 = _747;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _749) -> [return: bb313, unwind continue];
    }

    bb313: {
        StorageDead(_749);
        StorageDead(_747);
        goto -> bb454;
    }

    bb314: {
        StorageDead(_737);
        StorageDead(_734);
        StorageDead(_733);
        StorageLive(_751);
        _751 = ();
        _731 = std::result::Result::<(), error::ErrorCode>::Ok(move _751);
        StorageDead(_751);
        goto -> bb331;
    }

    bb315: {
        StorageDead(_737);
        StorageDead(_734);
        StorageDead(_733);
        StorageLive(_752);
        _752 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        _1112 = const _;
        _763 = &(*_1112);
        _762 = &(*_763);
        _761 = move _762 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_762);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        _771 = &_752;
        _770 = &(*_771);
        _769 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _770) -> [return: bb316, unwind continue];
    }

    bb316: {
        StorageDead(_770);
        _768 = [move _769];
        StorageDead(_769);
        _767 = &_768;
        _766 = &(*_767);
        _765 = move _766 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_766);
        _760 = Arguments::<'_>::new_v1(move _761, move _765) -> [return: bb317, unwind continue];
    }

    bb317: {
        StorageDead(_765);
        StorageDead(_761);
        _759 = format(move _760) -> [return: bb318, unwind continue];
    }

    bb318: {
        StorageDead(_760);
        StorageDead(_771);
        StorageDead(_768);
        StorageDead(_767);
        StorageDead(_763);
        _758 = move _759;
        StorageDead(_759);
        _757 = &_758;
        _756 = &(*_757);
        _755 = <String as Deref>::deref(move _756) -> [return: bb319, unwind: bb479];
    }

    bb319: {
        _754 = &(*_755);
        StorageDead(_756);
        _753 = solana_program::log::sol_log(move _754) -> [return: bb320, unwind: bb479];
    }

    bb320: {
        StorageDead(_754);
        drop(_758) -> [return: bb321, unwind: bb500];
    }

    bb321: {
        StorageDead(_758);
        StorageDead(_757);
        StorageDead(_755);
        StorageDead(_753);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        _1111 = const _;
        _782 = &(*_1111);
        _781 = &(*_782);
        _780 = move _781 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_781);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        _790 = &((*_1).21: u16);
        _789 = &(*_790);
        _788 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _789) -> [return: bb322, unwind continue];
    }

    bb322: {
        StorageDead(_789);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        _793 = &(((*_1).1: state::perp_market::AMM).65: u32);
        _792 = &(*_793);
        _791 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _792) -> [return: bb323, unwind continue];
    }

    bb323: {
        StorageDead(_792);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        _796 = &(((*_1).1: state::perp_market::AMM).66: u32);
        _795 = &(*_796);
        _794 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _795) -> [return: bb324, unwind continue];
    }

    bb324: {
        StorageDead(_795);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _799 = &(((*_1).1: state::perp_market::AMM).64: u32);
        _798 = &(*_799);
        _797 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _798) -> [return: bb325, unwind continue];
    }

    bb325: {
        StorageDead(_798);
        _787 = [move _788, move _791, move _794, move _797];
        StorageDead(_797);
        StorageDead(_794);
        StorageDead(_791);
        StorageDead(_788);
        _786 = &_787;
        _785 = &(*_786);
        _784 = move _785 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_785);
        _779 = Arguments::<'_>::new_v1(move _780, move _784) -> [return: bb326, unwind continue];
    }

    bb326: {
        StorageDead(_784);
        StorageDead(_780);
        _778 = format(move _779) -> [return: bb327, unwind continue];
    }

    bb327: {
        StorageDead(_779);
        StorageDead(_799);
        StorageDead(_796);
        StorageDead(_793);
        StorageDead(_790);
        StorageDead(_787);
        StorageDead(_786);
        StorageDead(_782);
        _777 = move _778;
        StorageDead(_778);
        _776 = &_777;
        _775 = &(*_776);
        _774 = <String as Deref>::deref(move _775) -> [return: bb328, unwind: bb478];
    }

    bb328: {
        _773 = &(*_774);
        StorageDead(_775);
        _772 = solana_program::log::sol_log(move _773) -> [return: bb329, unwind: bb478];
    }

    bb329: {
        StorageDead(_773);
        drop(_777) -> [return: bb330, unwind: bb500];
    }

    bb330: {
        StorageDead(_777);
        StorageDead(_776);
        StorageDead(_774);
        StorageDead(_772);
        StorageLive(_800);
        _800 = _752;
        _731 = std::result::Result::<(), error::ErrorCode>::Err(move _800);
        StorageDead(_800);
        StorageDead(_752);
        goto -> bb331;
    }

    bb331: {
        StorageDead(_732);
        _730 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _731) -> [return: bb332, unwind continue];
    }

    bb332: {
        StorageDead(_731);
        _801 = discriminant(_730);
        switchInt(move _801) -> [0: bb333, 1: bb334, otherwise: bb4];
    }

    bb333: {
        StorageLive(_805);
        _805 = ((_730 as Continue).0: ());
        _729 = _805;
        StorageDead(_805);
        StorageDead(_730);
        StorageDead(_729);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        _808 = (((*_1).1: state::perp_market::AMM).15: i128);
        _807 = Gt(move _808, const 0_i128);
        switchInt(move _807) -> [0: bb337, otherwise: bb336];
    }

    bb334: {
        StorageLive(_802);
        _802 = ((_730 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_804);
        _804 = _802;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _804) -> [return: bb335, unwind continue];
    }

    bb335: {
        StorageDead(_804);
        StorageDead(_802);
        goto -> bb455;
    }

    bb336: {
        StorageDead(_808);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        _813 = (((*_1).1: state::perp_market::AMM).12: u128);
        StorageLive(_814);
        _814 = (((*_1).1: state::perp_market::AMM).6: u128);
        _812 = Le(move _813, move _814);
        switchInt(move _812) -> [0: bb339, otherwise: bb338];
    }

    bb337: {
        StorageDead(_808);
        StorageLive(_861);
        StorageLive(_862);
        _862 = (((*_1).1: state::perp_market::AMM).15: i128);
        _861 = Lt(move _862, const 0_i128);
        switchInt(move _861) -> [0: bb358, otherwise: bb357];
    }

    bb338: {
        StorageDead(_814);
        StorageDead(_813);
        StorageLive(_815);
        _815 = ();
        _811 = std::result::Result::<(), error::ErrorCode>::Ok(move _815);
        StorageDead(_815);
        goto -> bb352;
    }

    bb339: {
        StorageDead(_814);
        StorageDead(_813);
        StorageLive(_816);
        _816 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        _1106 = const _;
        _827 = &(*_1106);
        _826 = &(*_827);
        _825 = move _826 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_826);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        StorageLive(_832);
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        _835 = &_816;
        _834 = &(*_835);
        _833 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _834) -> [return: bb340, unwind continue];
    }

    bb340: {
        StorageDead(_834);
        _832 = [move _833];
        StorageDead(_833);
        _831 = &_832;
        _830 = &(*_831);
        _829 = move _830 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_830);
        _824 = Arguments::<'_>::new_v1(move _825, move _829) -> [return: bb341, unwind continue];
    }

    bb341: {
        StorageDead(_829);
        StorageDead(_825);
        _823 = format(move _824) -> [return: bb342, unwind continue];
    }

    bb342: {
        StorageDead(_824);
        StorageDead(_835);
        StorageDead(_832);
        StorageDead(_831);
        StorageDead(_827);
        _822 = move _823;
        StorageDead(_823);
        _821 = &_822;
        _820 = &(*_821);
        _819 = <String as Deref>::deref(move _820) -> [return: bb343, unwind: bb477];
    }

    bb343: {
        _818 = &(*_819);
        StorageDead(_820);
        _817 = solana_program::log::sol_log(move _818) -> [return: bb344, unwind: bb477];
    }

    bb344: {
        StorageDead(_818);
        drop(_822) -> [return: bb345, unwind: bb500];
    }

    bb345: {
        StorageDead(_822);
        StorageDead(_821);
        StorageDead(_819);
        StorageDead(_817);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        _1105 = const _;
        _846 = &(*_1105);
        _845 = &(*_846);
        _844 = move _845 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_845);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        _854 = &((*_1).21: u16);
        _853 = &(*_854);
        _852 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _853) -> [return: bb346, unwind continue];
    }

    bb346: {
        StorageDead(_853);
        _851 = [move _852];
        StorageDead(_852);
        _850 = &_851;
        _849 = &(*_850);
        _848 = move _849 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_849);
        _843 = Arguments::<'_>::new_v1(move _844, move _848) -> [return: bb347, unwind continue];
    }

    bb347: {
        StorageDead(_848);
        StorageDead(_844);
        _842 = format(move _843) -> [return: bb348, unwind continue];
    }

    bb348: {
        StorageDead(_843);
        StorageDead(_854);
        StorageDead(_851);
        StorageDead(_850);
        StorageDead(_846);
        _841 = move _842;
        StorageDead(_842);
        _840 = &_841;
        _839 = &(*_840);
        _838 = <String as Deref>::deref(move _839) -> [return: bb349, unwind: bb476];
    }

    bb349: {
        _837 = &(*_838);
        StorageDead(_839);
        _836 = solana_program::log::sol_log(move _837) -> [return: bb350, unwind: bb476];
    }

    bb350: {
        StorageDead(_837);
        drop(_841) -> [return: bb351, unwind: bb500];
    }

    bb351: {
        StorageDead(_841);
        StorageDead(_840);
        StorageDead(_838);
        StorageDead(_836);
        StorageLive(_855);
        _855 = _816;
        _811 = std::result::Result::<(), error::ErrorCode>::Err(move _855);
        StorageDead(_855);
        StorageDead(_816);
        goto -> bb352;
    }

    bb352: {
        StorageDead(_812);
        _810 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _811) -> [return: bb353, unwind continue];
    }

    bb353: {
        StorageDead(_811);
        _856 = discriminant(_810);
        switchInt(move _856) -> [0: bb354, 1: bb355, otherwise: bb4];
    }

    bb354: {
        StorageLive(_860);
        _860 = ((_810 as Continue).0: ());
        _809 = _860;
        StorageDead(_860);
        StorageDead(_810);
        StorageDead(_809);
        _806 = const ();
        goto -> bb402;
    }

    bb355: {
        StorageLive(_857);
        _857 = ((_810 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_859);
        _859 = _857;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _859) -> [return: bb356, unwind continue];
    }

    bb356: {
        StorageDead(_859);
        StorageDead(_857);
        StorageDead(_810);
        StorageDead(_809);
        goto -> bb453;
    }

    bb357: {
        StorageDead(_862);
        StorageLive(_863);
        StorageLive(_864);
        StorageLive(_865);
        StorageLive(_866);
        StorageLive(_867);
        _867 = (((*_1).1: state::perp_market::AMM).12: u128);
        StorageLive(_868);
        _868 = (((*_1).1: state::perp_market::AMM).6: u128);
        _866 = Ge(move _867, move _868);
        switchInt(move _866) -> [0: bb360, otherwise: bb359];
    }

    bb358: {
        StorageDead(_862);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        _925 = (((*_1).1: state::perp_market::AMM).12: u128);
        StorageLive(_926);
        _926 = (((*_1).1: state::perp_market::AMM).6: u128);
        _924 = Eq(move _925, move _926);
        switchInt(move _924) -> [0: bb381, otherwise: bb380];
    }

    bb359: {
        StorageDead(_868);
        StorageDead(_867);
        StorageLive(_869);
        _869 = ();
        _865 = std::result::Result::<(), error::ErrorCode>::Ok(move _869);
        StorageDead(_869);
        goto -> bb375;
    }

    bb360: {
        StorageDead(_868);
        StorageDead(_867);
        StorageLive(_870);
        _870 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        _1108 = const _;
        _881 = &(*_1108);
        _880 = &(*_881);
        _879 = move _880 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_880);
        StorageLive(_883);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        _889 = &_870;
        _888 = &(*_889);
        _887 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _888) -> [return: bb361, unwind continue];
    }

    bb361: {
        StorageDead(_888);
        _886 = [move _887];
        StorageDead(_887);
        _885 = &_886;
        _884 = &(*_885);
        _883 = move _884 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_884);
        _878 = Arguments::<'_>::new_v1(move _879, move _883) -> [return: bb362, unwind continue];
    }

    bb362: {
        StorageDead(_883);
        StorageDead(_879);
        _877 = format(move _878) -> [return: bb363, unwind continue];
    }

    bb363: {
        StorageDead(_878);
        StorageDead(_889);
        StorageDead(_886);
        StorageDead(_885);
        StorageDead(_881);
        _876 = move _877;
        StorageDead(_877);
        _875 = &_876;
        _874 = &(*_875);
        _873 = <String as Deref>::deref(move _874) -> [return: bb364, unwind: bb475];
    }

    bb364: {
        _872 = &(*_873);
        StorageDead(_874);
        _871 = solana_program::log::sol_log(move _872) -> [return: bb365, unwind: bb475];
    }

    bb365: {
        StorageDead(_872);
        drop(_876) -> [return: bb366, unwind: bb500];
    }

    bb366: {
        StorageDead(_876);
        StorageDead(_875);
        StorageDead(_873);
        StorageDead(_871);
        StorageLive(_890);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        StorageLive(_900);
        _1107 = const _;
        _900 = &(*_1107);
        _899 = &(*_900);
        _898 = move _899 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_899);
        StorageLive(_902);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        _908 = &((*_1).21: u16);
        _907 = &(*_908);
        _906 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _907) -> [return: bb367, unwind continue];
    }

    bb367: {
        StorageDead(_907);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        _911 = &(((*_1).1: state::perp_market::AMM).12: u128);
        _910 = &(*_911);
        _909 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _910) -> [return: bb368, unwind continue];
    }

    bb368: {
        StorageDead(_910);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        _914 = &(((*_1).1: state::perp_market::AMM).6: u128);
        _913 = &(*_914);
        _912 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _913) -> [return: bb369, unwind continue];
    }

    bb369: {
        StorageDead(_913);
        _905 = [move _906, move _909, move _912];
        StorageDead(_912);
        StorageDead(_909);
        StorageDead(_906);
        _904 = &_905;
        _903 = &(*_904);
        _902 = move _903 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_903);
        _897 = Arguments::<'_>::new_v1(move _898, move _902) -> [return: bb370, unwind continue];
    }

    bb370: {
        StorageDead(_902);
        StorageDead(_898);
        _896 = format(move _897) -> [return: bb371, unwind continue];
    }

    bb371: {
        StorageDead(_897);
        StorageDead(_914);
        StorageDead(_911);
        StorageDead(_908);
        StorageDead(_905);
        StorageDead(_904);
        StorageDead(_900);
        _895 = move _896;
        StorageDead(_896);
        _894 = &_895;
        _893 = &(*_894);
        _892 = <String as Deref>::deref(move _893) -> [return: bb372, unwind: bb474];
    }

    bb372: {
        _891 = &(*_892);
        StorageDead(_893);
        _890 = solana_program::log::sol_log(move _891) -> [return: bb373, unwind: bb474];
    }

    bb373: {
        StorageDead(_891);
        drop(_895) -> [return: bb374, unwind: bb500];
    }

    bb374: {
        StorageDead(_895);
        StorageDead(_894);
        StorageDead(_892);
        StorageDead(_890);
        StorageLive(_915);
        _915 = _870;
        _865 = std::result::Result::<(), error::ErrorCode>::Err(move _915);
        StorageDead(_915);
        StorageDead(_870);
        goto -> bb375;
    }

    bb375: {
        StorageDead(_866);
        _864 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _865) -> [return: bb376, unwind continue];
    }

    bb376: {
        StorageDead(_865);
        _916 = discriminant(_864);
        switchInt(move _916) -> [0: bb377, 1: bb378, otherwise: bb4];
    }

    bb377: {
        StorageLive(_920);
        _920 = ((_864 as Continue).0: ());
        _863 = _920;
        StorageDead(_920);
        StorageDead(_864);
        StorageDead(_863);
        _806 = const ();
        goto -> bb401;
    }

    bb378: {
        StorageLive(_917);
        _917 = ((_864 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_919);
        _919 = _917;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _919) -> [return: bb379, unwind continue];
    }

    bb379: {
        StorageDead(_919);
        StorageDead(_917);
        StorageDead(_864);
        StorageDead(_863);
        goto -> bb452;
    }

    bb380: {
        StorageDead(_926);
        StorageDead(_925);
        StorageLive(_927);
        _927 = ();
        _923 = std::result::Result::<(), error::ErrorCode>::Ok(move _927);
        StorageDead(_927);
        goto -> bb396;
    }

    bb381: {
        StorageDead(_926);
        StorageDead(_925);
        StorageLive(_928);
        _928 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_929);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        StorageLive(_936);
        StorageLive(_937);
        StorageLive(_938);
        StorageLive(_939);
        _1110 = const _;
        _939 = &(*_1110);
        _938 = &(*_939);
        _937 = move _938 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_938);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        StorageLive(_946);
        StorageLive(_947);
        _947 = &_928;
        _946 = &(*_947);
        _945 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _946) -> [return: bb382, unwind continue];
    }

    bb382: {
        StorageDead(_946);
        _944 = [move _945];
        StorageDead(_945);
        _943 = &_944;
        _942 = &(*_943);
        _941 = move _942 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_942);
        _936 = Arguments::<'_>::new_v1(move _937, move _941) -> [return: bb383, unwind continue];
    }

    bb383: {
        StorageDead(_941);
        StorageDead(_937);
        _935 = format(move _936) -> [return: bb384, unwind continue];
    }

    bb384: {
        StorageDead(_936);
        StorageDead(_947);
        StorageDead(_944);
        StorageDead(_943);
        StorageDead(_939);
        _934 = move _935;
        StorageDead(_935);
        _933 = &_934;
        _932 = &(*_933);
        _931 = <String as Deref>::deref(move _932) -> [return: bb385, unwind: bb473];
    }

    bb385: {
        _930 = &(*_931);
        StorageDead(_932);
        _929 = solana_program::log::sol_log(move _930) -> [return: bb386, unwind: bb473];
    }

    bb386: {
        StorageDead(_930);
        drop(_934) -> [return: bb387, unwind: bb500];
    }

    bb387: {
        StorageDead(_934);
        StorageDead(_933);
        StorageDead(_931);
        StorageDead(_929);
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        StorageLive(_958);
        _1109 = const _;
        _958 = &(*_1109);
        _957 = &(*_958);
        _956 = move _957 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_957);
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        StorageLive(_964);
        StorageLive(_965);
        StorageLive(_966);
        _966 = &((*_1).21: u16);
        _965 = &(*_966);
        _964 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _965) -> [return: bb388, unwind continue];
    }

    bb388: {
        StorageDead(_965);
        StorageLive(_967);
        StorageLive(_968);
        StorageLive(_969);
        _969 = &(((*_1).1: state::perp_market::AMM).12: u128);
        _968 = &(*_969);
        _967 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _968) -> [return: bb389, unwind continue];
    }

    bb389: {
        StorageDead(_968);
        StorageLive(_970);
        StorageLive(_971);
        StorageLive(_972);
        _972 = &(((*_1).1: state::perp_market::AMM).6: u128);
        _971 = &(*_972);
        _970 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _971) -> [return: bb390, unwind continue];
    }

    bb390: {
        StorageDead(_971);
        _963 = [move _964, move _967, move _970];
        StorageDead(_970);
        StorageDead(_967);
        StorageDead(_964);
        _962 = &_963;
        _961 = &(*_962);
        _960 = move _961 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_961);
        _955 = Arguments::<'_>::new_v1(move _956, move _960) -> [return: bb391, unwind continue];
    }

    bb391: {
        StorageDead(_960);
        StorageDead(_956);
        _954 = format(move _955) -> [return: bb392, unwind continue];
    }

    bb392: {
        StorageDead(_955);
        StorageDead(_972);
        StorageDead(_969);
        StorageDead(_966);
        StorageDead(_963);
        StorageDead(_962);
        StorageDead(_958);
        _953 = move _954;
        StorageDead(_954);
        _952 = &_953;
        _951 = &(*_952);
        _950 = <String as Deref>::deref(move _951) -> [return: bb393, unwind: bb472];
    }

    bb393: {
        _949 = &(*_950);
        StorageDead(_951);
        _948 = solana_program::log::sol_log(move _949) -> [return: bb394, unwind: bb472];
    }

    bb394: {
        StorageDead(_949);
        drop(_953) -> [return: bb395, unwind: bb500];
    }

    bb395: {
        StorageDead(_953);
        StorageDead(_952);
        StorageDead(_950);
        StorageDead(_948);
        StorageLive(_973);
        _973 = _928;
        _923 = std::result::Result::<(), error::ErrorCode>::Err(move _973);
        StorageDead(_973);
        StorageDead(_928);
        goto -> bb396;
    }

    bb396: {
        StorageDead(_924);
        _922 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _923) -> [return: bb397, unwind continue];
    }

    bb397: {
        StorageDead(_923);
        _974 = discriminant(_922);
        switchInt(move _974) -> [0: bb398, 1: bb399, otherwise: bb4];
    }

    bb398: {
        StorageLive(_978);
        _978 = ((_922 as Continue).0: ());
        _921 = _978;
        StorageDead(_978);
        StorageDead(_922);
        StorageDead(_921);
        _806 = const ();
        goto -> bb401;
    }

    bb399: {
        StorageLive(_975);
        _975 = ((_922 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_977);
        _977 = _975;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _977) -> [return: bb400, unwind continue];
    }

    bb400: {
        StorageDead(_977);
        StorageDead(_975);
        StorageDead(_922);
        StorageDead(_921);
        goto -> bb452;
    }

    bb401: {
        StorageDead(_861);
        goto -> bb402;
    }

    bb402: {
        StorageDead(_807);
        StorageDead(_806);
        StorageLive(_979);
        StorageLive(_980);
        StorageLive(_981);
        _981 = (((*_1).1: state::perp_market::AMM).63: u32);
        _980 = Gt(move _981, const 0_u32);
        switchInt(move _980) -> [0: bb427, otherwise: bb403];
    }

    bb403: {
        StorageDead(_981);
        StorageLive(_982);
        StorageLive(_983);
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        _986 = (((*_1).1: state::perp_market::AMM).64: u32);
        StorageLive(_987);
        _987 = (((*_1).1: state::perp_market::AMM).63: u32);
        _985 = Gt(move _986, move _987);
        switchInt(move _985) -> [0: bb408, otherwise: bb404];
    }

    bb404: {
        StorageDead(_987);
        StorageDead(_986);
        StorageLive(_988);
        StorageLive(_989);
        _989 = (((*_1).1: state::perp_market::AMM).64: u32);
        StorageLive(_990);
        StorageLive(_991);
        _991 = ((*_1).15: u32);
        _992 = CheckedMul(_991, const 100_u32);
        assert(!move (_992.1: bool), "attempt to compute `{} * {}`, which would overflow", move _991, const 100_u32) -> [success: bb405, unwind continue];
    }

    bb405: {
        _990 = move (_992.0: u32);
        StorageDead(_991);
        _988 = Lt(move _989, move _990);
        switchInt(move _988) -> [0: bb407, otherwise: bb406];
    }

    bb406: {
        StorageDead(_990);
        StorageDead(_989);
        StorageLive(_993);
        _993 = ();
        _984 = std::result::Result::<(), error::ErrorCode>::Ok(move _993);
        StorageDead(_993);
        goto -> bb422;
    }

    bb407: {
        StorageDead(_990);
        StorageDead(_989);
        goto -> bb409;
    }

    bb408: {
        StorageDead(_987);
        StorageDead(_986);
        goto -> bb409;
    }

    bb409: {
        StorageLive(_994);
        _994 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_995);
        StorageLive(_996);
        StorageLive(_997);
        StorageLive(_998);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        _1104 = const _;
        _1005 = &(*_1104);
        _1004 = &(*_1005);
        _1003 = move _1004 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1004);
        StorageLive(_1007);
        StorageLive(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        StorageLive(_1011);
        StorageLive(_1012);
        StorageLive(_1013);
        _1013 = &_994;
        _1012 = &(*_1013);
        _1011 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1012) -> [return: bb410, unwind continue];
    }

    bb410: {
        StorageDead(_1012);
        _1010 = [move _1011];
        StorageDead(_1011);
        _1009 = &_1010;
        _1008 = &(*_1009);
        _1007 = move _1008 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1008);
        _1002 = Arguments::<'_>::new_v1(move _1003, move _1007) -> [return: bb411, unwind continue];
    }

    bb411: {
        StorageDead(_1007);
        StorageDead(_1003);
        _1001 = format(move _1002) -> [return: bb412, unwind continue];
    }

    bb412: {
        StorageDead(_1002);
        StorageDead(_1013);
        StorageDead(_1010);
        StorageDead(_1009);
        StorageDead(_1005);
        _1000 = move _1001;
        StorageDead(_1001);
        _999 = &_1000;
        _998 = &(*_999);
        _997 = <String as Deref>::deref(move _998) -> [return: bb413, unwind: bb471];
    }

    bb413: {
        _996 = &(*_997);
        StorageDead(_998);
        _995 = solana_program::log::sol_log(move _996) -> [return: bb414, unwind: bb471];
    }

    bb414: {
        StorageDead(_996);
        drop(_1000) -> [return: bb415, unwind: bb500];
    }

    bb415: {
        StorageDead(_1000);
        StorageDead(_999);
        StorageDead(_997);
        StorageDead(_995);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        _1103 = const _;
        _1024 = &(*_1103);
        _1023 = &(*_1024);
        _1022 = move _1023 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1023);
        StorageLive(_1026);
        StorageLive(_1027);
        StorageLive(_1028);
        StorageLive(_1029);
        StorageLive(_1030);
        StorageLive(_1031);
        StorageLive(_1032);
        _1032 = &((*_1).21: u16);
        _1031 = &(*_1032);
        _1030 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1031) -> [return: bb416, unwind continue];
    }

    bb416: {
        StorageDead(_1031);
        _1029 = [move _1030];
        StorageDead(_1030);
        _1028 = &_1029;
        _1027 = &(*_1028);
        _1026 = move _1027 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1027);
        _1021 = Arguments::<'_>::new_v1(move _1022, move _1026) -> [return: bb417, unwind continue];
    }

    bb417: {
        StorageDead(_1026);
        StorageDead(_1022);
        _1020 = format(move _1021) -> [return: bb418, unwind continue];
    }

    bb418: {
        StorageDead(_1021);
        StorageDead(_1032);
        StorageDead(_1029);
        StorageDead(_1028);
        StorageDead(_1024);
        _1019 = move _1020;
        StorageDead(_1020);
        _1018 = &_1019;
        _1017 = &(*_1018);
        _1016 = <String as Deref>::deref(move _1017) -> [return: bb419, unwind: bb470];
    }

    bb419: {
        _1015 = &(*_1016);
        StorageDead(_1017);
        _1014 = solana_program::log::sol_log(move _1015) -> [return: bb420, unwind: bb470];
    }

    bb420: {
        StorageDead(_1015);
        drop(_1019) -> [return: bb421, unwind: bb500];
    }

    bb421: {
        StorageDead(_1019);
        StorageDead(_1018);
        StorageDead(_1016);
        StorageDead(_1014);
        StorageLive(_1033);
        _1033 = _994;
        _984 = std::result::Result::<(), error::ErrorCode>::Err(move _1033);
        StorageDead(_1033);
        StorageDead(_994);
        goto -> bb422;
    }

    bb422: {
        StorageDead(_988);
        StorageDead(_985);
        _983 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _984) -> [return: bb423, unwind continue];
    }

    bb423: {
        StorageDead(_984);
        _1034 = discriminant(_983);
        switchInt(move _1034) -> [0: bb424, 1: bb425, otherwise: bb4];
    }

    bb424: {
        StorageLive(_1038);
        _1038 = ((_983 as Continue).0: ());
        _982 = _1038;
        StorageDead(_1038);
        StorageDead(_983);
        StorageDead(_982);
        _979 = const ();
        goto -> bb428;
    }

    bb425: {
        StorageLive(_1035);
        _1035 = ((_983 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1037);
        _1037 = _1035;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1037) -> [return: bb426, unwind continue];
    }

    bb426: {
        StorageDead(_1037);
        StorageDead(_1035);
        StorageDead(_983);
        StorageDead(_982);
        StorageDead(_980);
        StorageDead(_979);
        goto -> bb459;
    }

    bb427: {
        StorageDead(_981);
        _979 = const ();
        goto -> bb428;
    }

    bb428: {
        StorageDead(_980);
        StorageDead(_979);
        StorageLive(_1039);
        StorageLive(_1040);
        StorageLive(_1041);
        StorageLive(_1042);
        StorageLive(_1043);
        _1043 = (((*_1).4: state::perp_market::InsuranceClaim).1: u64);
        StorageLive(_1044);
        StorageLive(_1045);
        _1045 = (((*_1).4: state::perp_market::InsuranceClaim).0: i64);
        _1044 = core::num::<impl i64>::unsigned_abs(move _1045) -> [return: bb429, unwind continue];
    }

    bb429: {
        StorageDead(_1045);
        _1042 = Ge(move _1043, move _1044);
        switchInt(move _1042) -> [0: bb431, otherwise: bb430];
    }

    bb430: {
        StorageDead(_1044);
        StorageDead(_1043);
        StorageLive(_1046);
        _1046 = ();
        _1041 = std::result::Result::<(), error::ErrorCode>::Ok(move _1046);
        StorageDead(_1046);
        goto -> bb447;
    }

    bb431: {
        StorageDead(_1044);
        StorageDead(_1043);
        StorageLive(_1047);
        _1047 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_1048);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        StorageLive(_1055);
        StorageLive(_1056);
        StorageLive(_1057);
        StorageLive(_1058);
        _1102 = const _;
        _1058 = &(*_1102);
        _1057 = &(*_1058);
        _1056 = move _1057 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1057);
        StorageLive(_1060);
        StorageLive(_1061);
        StorageLive(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        StorageLive(_1066);
        _1066 = &_1047;
        _1065 = &(*_1066);
        _1064 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1065) -> [return: bb432, unwind continue];
    }

    bb432: {
        StorageDead(_1065);
        _1063 = [move _1064];
        StorageDead(_1064);
        _1062 = &_1063;
        _1061 = &(*_1062);
        _1060 = move _1061 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1061);
        _1055 = Arguments::<'_>::new_v1(move _1056, move _1060) -> [return: bb433, unwind continue];
    }

    bb433: {
        StorageDead(_1060);
        StorageDead(_1056);
        _1054 = format(move _1055) -> [return: bb434, unwind continue];
    }

    bb434: {
        StorageDead(_1055);
        StorageDead(_1066);
        StorageDead(_1063);
        StorageDead(_1062);
        StorageDead(_1058);
        _1053 = move _1054;
        StorageDead(_1054);
        _1052 = &_1053;
        _1051 = &(*_1052);
        _1050 = <String as Deref>::deref(move _1051) -> [return: bb435, unwind: bb469];
    }

    bb435: {
        _1049 = &(*_1050);
        StorageDead(_1051);
        _1048 = solana_program::log::sol_log(move _1049) -> [return: bb436, unwind: bb469];
    }

    bb436: {
        StorageDead(_1049);
        drop(_1053) -> [return: bb437, unwind: bb500];
    }

    bb437: {
        StorageDead(_1053);
        StorageDead(_1052);
        StorageDead(_1050);
        StorageDead(_1048);
        StorageLive(_1067);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        StorageLive(_1075);
        StorageLive(_1076);
        StorageLive(_1077);
        _1101 = const _;
        _1077 = &(*_1101);
        _1076 = &(*_1077);
        _1075 = move _1076 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1076);
        StorageLive(_1079);
        StorageLive(_1080);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        _1085 = &((*_1).21: u16);
        _1084 = &(*_1085);
        _1083 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1084) -> [return: bb438, unwind continue];
    }

    bb438: {
        StorageDead(_1084);
        StorageLive(_1086);
        StorageLive(_1087);
        StorageLive(_1088);
        _1088 = &(((*_1).4: state::perp_market::InsuranceClaim).1: u64);
        _1087 = &(*_1088);
        _1086 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1087) -> [return: bb439, unwind continue];
    }

    bb439: {
        StorageDead(_1087);
        StorageLive(_1089);
        StorageLive(_1090);
        StorageLive(_1091);
        StorageLive(_1092);
        StorageLive(_1093);
        _1093 = (((*_1).4: state::perp_market::InsuranceClaim).0: i64);
        _1092 = core::num::<impl i64>::unsigned_abs(move _1093) -> [return: bb440, unwind continue];
    }

    bb440: {
        StorageDead(_1093);
        _1091 = &_1092;
        _1090 = &(*_1091);
        _1089 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1090) -> [return: bb441, unwind continue];
    }

    bb441: {
        StorageDead(_1090);
        _1082 = [move _1083, move _1086, move _1089];
        StorageDead(_1089);
        StorageDead(_1086);
        StorageDead(_1083);
        _1081 = &_1082;
        _1080 = &(*_1081);
        _1079 = move _1080 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1080);
        _1074 = Arguments::<'_>::new_v1(move _1075, move _1079) -> [return: bb442, unwind continue];
    }

    bb442: {
        StorageDead(_1079);
        StorageDead(_1075);
        _1073 = format(move _1074) -> [return: bb443, unwind continue];
    }

    bb443: {
        StorageDead(_1074);
        StorageDead(_1092);
        StorageDead(_1091);
        StorageDead(_1088);
        StorageDead(_1085);
        StorageDead(_1082);
        StorageDead(_1081);
        StorageDead(_1077);
        _1072 = move _1073;
        StorageDead(_1073);
        _1071 = &_1072;
        _1070 = &(*_1071);
        _1069 = <String as Deref>::deref(move _1070) -> [return: bb444, unwind: bb468];
    }

    bb444: {
        _1068 = &(*_1069);
        StorageDead(_1070);
        _1067 = solana_program::log::sol_log(move _1068) -> [return: bb445, unwind: bb468];
    }

    bb445: {
        StorageDead(_1068);
        drop(_1072) -> [return: bb446, unwind: bb500];
    }

    bb446: {
        StorageDead(_1072);
        StorageDead(_1071);
        StorageDead(_1069);
        StorageDead(_1067);
        StorageLive(_1094);
        _1094 = _1047;
        _1041 = std::result::Result::<(), error::ErrorCode>::Err(move _1094);
        StorageDead(_1094);
        StorageDead(_1047);
        goto -> bb447;
    }

    bb447: {
        StorageDead(_1042);
        _1040 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1041) -> [return: bb448, unwind continue];
    }

    bb448: {
        StorageDead(_1041);
        _1095 = discriminant(_1040);
        switchInt(move _1095) -> [0: bb449, 1: bb450, otherwise: bb4];
    }

    bb449: {
        StorageLive(_1099);
        _1099 = ((_1040 as Continue).0: ());
        _1039 = _1099;
        StorageDead(_1099);
        StorageDead(_1040);
        StorageDead(_1039);
        StorageLive(_1100);
        _1100 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1100);
        StorageDead(_1100);
        StorageDead(_425);
        StorageDead(_406);
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_21);
        StorageDead(_2);
        goto -> bb467;
    }

    bb450: {
        StorageLive(_1096);
        _1096 = ((_1040 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1098);
        _1098 = _1096;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1098) -> [return: bb451, unwind continue];
    }

    bb451: {
        StorageDead(_1098);
        StorageDead(_1096);
        StorageDead(_1040);
        StorageDead(_1039);
        goto -> bb459;
    }

    bb452: {
        StorageDead(_861);
        goto -> bb453;
    }

    bb453: {
        StorageDead(_807);
        StorageDead(_806);
        goto -> bb459;
    }

    bb454: {
        StorageDead(_737);
        StorageDead(_734);
        StorageDead(_733);
        StorageDead(_732);
        StorageDead(_731);
        goto -> bb455;
    }

    bb455: {
        StorageDead(_730);
        StorageDead(_729);
        goto -> bb459;
    }

    bb456: {
        StorageDead(_519);
        StorageDead(_518);
        goto -> bb459;
    }

    bb457: {
        StorageDead(_426);
        StorageDead(_439);
        goto -> bb458;
    }

    bb458: {
        StorageDead(_430);
        StorageDead(_427);
        goto -> bb459;
    }

    bb459: {
        StorageDead(_425);
        goto -> bb461;
    }

    bb460: {
        StorageDead(_410);
        StorageDead(_407);
        goto -> bb461;
    }

    bb461: {
        StorageDead(_406);
        goto -> bb462;
    }

    bb462: {
        StorageDead(_396);
        StorageDead(_394);
        goto -> bb463;
    }

    bb463: {
        StorageDead(_21);
        goto -> bb465;
    }

    bb464: {
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb465;
    }

    bb465: {
        StorageDead(_2);
        goto -> bb467;
    }

    bb466: {
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb467;
    }

    bb467: {
        return;
    }

    bb468 (cleanup): {
        drop(_1072) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb469 (cleanup): {
        drop(_1053) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb470 (cleanup): {
        drop(_1019) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb471 (cleanup): {
        drop(_1000) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb472 (cleanup): {
        drop(_953) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb473 (cleanup): {
        drop(_934) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb474 (cleanup): {
        drop(_895) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb475 (cleanup): {
        drop(_876) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb476 (cleanup): {
        drop(_841) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb477 (cleanup): {
        drop(_822) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb478 (cleanup): {
        drop(_777) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb479 (cleanup): {
        drop(_758) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb480 (cleanup): {
        drop(_700) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb481 (cleanup): {
        drop(_681) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb482 (cleanup): {
        drop(_628) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb483 (cleanup): {
        drop(_609) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb484 (cleanup): {
        drop(_559) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb485 (cleanup): {
        drop(_540) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb486 (cleanup): {
        drop(_483) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb487 (cleanup): {
        drop(_464) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb488 (cleanup): {
        drop(_365) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb489 (cleanup): {
        drop(_346) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb490 (cleanup): {
        drop(_304) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb491 (cleanup): {
        drop(_285) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb492 (cleanup): {
        drop(_246) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb493 (cleanup): {
        drop(_227) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb494 (cleanup): {
        drop(_192) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb495 (cleanup): {
        drop(_173) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb496 (cleanup): {
        drop(_134) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb497 (cleanup): {
        drop(_115) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb498 (cleanup): {
        drop(_73) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb499 (cleanup): {
        drop(_54) -> [return: bb500, unwind terminate(cleanup)];
    }

    bb500 (cleanup): {
        resume;
    }
}
