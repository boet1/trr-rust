digraph Mir_0_356 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_margin_freed(_1: &amp;ReErased state::user::User, _2: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _3: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _4: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _5: u32, _6: u128) -&gt; std::result::Result&lt;(u64, state::margin_calculation::MarginCalculation), error::ErrorCode&gt;<br align="left"/>let _7: state::margin_calculation::MarginCalculation;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::margin_calculation::MarginCalculation&gt;;<br align="left"/>let mut _9: std::result::Result&lt;state::margin_calculation::MarginCalculation, error::ErrorCode&gt;;<br align="left"/>let mut _10: &amp;ReErased state::user::User;<br align="left"/>let mut _11: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _12: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _13: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _14: state::margin_calculation::MarginContext;<br align="left"/>let mut _15: u32;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: state::margin_calculation::MarginCalculation;<br align="left"/>let _21: u128;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _23: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _24: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _25: isize;<br align="left"/>let _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _27: !;<br align="left"/>let mut _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _29: u128;<br align="left"/>let _30: u64;<br align="left"/>let mut _31: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _32: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _33: u128;<br align="left"/>let mut _34: u128;<br align="left"/>let mut _35: u128;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: u64;<br align="left"/>let mut _41: (u64, state::margin_calculation::MarginCalculation);<br align="left"/>let mut _42: u64;<br align="left"/>let mut _43: state::margin_calculation::MarginCalculation;<br align="left"/>debug user =&gt; _1;<br align="left"/>debug perp_market_map =&gt; _2;<br align="left"/>debug spot_market_map =&gt; _3;<br align="left"/>debug oracle_map =&gt; _4;<br align="left"/>debug liquidation_margin_buffer_ratio =&gt; _5;<br align="left"/>debug initial_margin_shortage =&gt; _6;<br align="left"/>debug margin_calculation_after =&gt; _7;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug new_margin_shortage =&gt; _21;<br align="left"/>debug residual =&gt; _26;<br align="left"/>debug val =&gt; _29;<br align="left"/>debug margin_freed =&gt; _30;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>>;
    bb0__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;(*_1)<br/>StorageLive(_11)<br/>_11 = &amp;(*_2)<br/>StorageLive(_12)<br/>_12 = &amp;(*_3)<br/>StorageLive(_13)<br/>_13 = &amp;mut (*_4)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = _5<br/></td></tr><tr><td align="left">_14 = MarginContext::liquidation(move _15)</td></tr></table>>];
    bb1__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/></td></tr><tr><td align="left">_9 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _10, move _11, move _12, move _13, move _14)</td></tr></table>>];
    bb2__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;MarginCalculation, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb3__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_16 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb4__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_8 as Continue).0: state::margin_calculation::MarginCalculation)<br/>_7 = _20<br/>StorageDead(_20)<br/>StorageDead(_8)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;_7<br/></td></tr><tr><td align="left">_23 = MarginCalculation::margin_shortage(move _24)</td></tr></table>>];
    bb5__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, MarginCalculation), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb7__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb9__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_25 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb10__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_22 as Continue).0: u128)<br/>_21 = _29<br/>StorageDead(_29)<br/>StorageDead(_22)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _6<br/>StorageLive(_35)<br/>_35 = _21<br/></td></tr><tr><td align="left">_33 = core::num::&lt;impl u128&gt;::saturating_sub(move _34, move _35)</td></tr></table>>];
    bb11__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_28)<br/>_28 = _26<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, MarginCalculation), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _28)</td></tr></table>>];
    bb12__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _33)</td></tr></table>>];
    bb14__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">_31 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _32)</td></tr></table>>];
    bb15__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>_36 = discriminant(_31)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb16__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_31 as Continue).0: u64)<br/>_30 = _40<br/>StorageDead(_40)<br/>StorageDead(_31)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = _30<br/>StorageLive(_43)<br/>_43 = _7<br/>_41 = (move _42, move _43)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>_0 = std::result::Result::&lt;(u64, MarginCalculation), error::ErrorCode&gt;::Ok(move _41)<br/>StorageDead(_41)<br/>StorageDead(_30)<br/>StorageDead(_21)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_31 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, MarginCalculation), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb18__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_356 -> bb1__0_356 [label="return"];
    bb1__0_356 -> bb2__0_356 [label="return"];
    bb2__0_356 -> bb3__0_356 [label="return"];
    bb3__0_356 -> bb4__0_356 [label="0"];
    bb3__0_356 -> bb6__0_356 [label="1"];
    bb3__0_356 -> bb5__0_356 [label="otherwise"];
    bb4__0_356 -> bb8__0_356 [label="return"];
    bb6__0_356 -> bb7__0_356 [label="return"];
    bb7__0_356 -> bb20__0_356 [label=""];
    bb8__0_356 -> bb9__0_356 [label="return"];
    bb9__0_356 -> bb10__0_356 [label="0"];
    bb9__0_356 -> bb11__0_356 [label="1"];
    bb9__0_356 -> bb5__0_356 [label="otherwise"];
    bb10__0_356 -> bb13__0_356 [label="return"];
    bb11__0_356 -> bb12__0_356 [label="return"];
    bb12__0_356 -> bb19__0_356 [label=""];
    bb13__0_356 -> bb14__0_356 [label="return"];
    bb14__0_356 -> bb15__0_356 [label="return"];
    bb15__0_356 -> bb16__0_356 [label="0"];
    bb15__0_356 -> bb17__0_356 [label="1"];
    bb15__0_356 -> bb5__0_356 [label="otherwise"];
    bb16__0_356 -> bb21__0_356 [label=""];
    bb17__0_356 -> bb18__0_356 [label="return"];
    bb18__0_356 -> bb19__0_356 [label=""];
    bb19__0_356 -> bb20__0_356 [label=""];
    bb20__0_356 -> bb21__0_356 [label=""];
}
