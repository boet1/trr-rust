// MIR for `insert_maker_order_info` after PreCodegen

fn insert_maker_order_info(_1: &mut Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, _2: (anchor_lang::prelude::Pubkey, usize, u64), _3: controller::position::PositionDirection) -> () {
    debug maker_orders_info => _1;
    debug maker_order_info => _2;
    debug direction => _3;
    let mut _0: ();
    let _4: u64;
    let mut _6: std::result::Result<usize, usize>;
    let mut _7: &[(anchor_lang::prelude::Pubkey, usize, u64)];
    let _8: &[(anchor_lang::prelude::Pubkey, usize, u64)];
    let mut _9: &std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _10: {closure@programs/drift/src/controller/orders.rs:1668:58: 1668:64};
    let mut _11: &controller::position::PositionDirection;
    let mut _12: &u64;
    let mut _13: isize;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: &std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let _20: ();
    let mut _21: &mut std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _22: usize;
    let mut _23: (anchor_lang::prelude::Pubkey, usize, u64);
    scope 1 {
        debug price => _4;
        let _5: usize;
        let _14: usize;
        let _15: usize;
        scope 2 {
            debug index => _5;
        }
        scope 3 {
            debug index => _14;
        }
        scope 4 {
            debug index => _15;
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = (_2.2: u64);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        _8 = <Vec<(anchor_lang::prelude::Pubkey, usize, u64)> as Deref>::deref(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &(*_8);
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &_3;
        StorageLive(_12);
        _12 = &_4;
        _10 = {closure@programs/drift/src/controller/orders.rs:1668:58: 1668:64} { direction: move _11, price: move _12 };
        StorageDead(_12);
        StorageDead(_11);
        _6 = core::slice::<impl [(anchor_lang::prelude::Pubkey, usize, u64)]>::binary_search_by::<'_, {closure@programs/drift/src/controller/orders.rs:1668:58: 1668:64}>(move _7, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        _13 = discriminant(_6);
        switchInt(move _13) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_6 as Err).0: usize);
        _5 = _15;
        StorageDead(_15);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_6 as Ok).0: usize);
        _5 = _14;
        StorageDead(_14);
        goto -> bb6;
    }

    bb6: {
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _5;
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_1);
        _18 = Vec::<(anchor_lang::prelude::Pubkey, usize, u64)>::capacity(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        _16 = Lt(move _17, move _18);
        switchInt(move _16) -> [0: bb10, otherwise: bb8];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut (*_1);
        StorageLive(_22);
        _22 = _5;
        StorageLive(_23);
        _23 = _2;
        _20 = Vec::<(anchor_lang::prelude::Pubkey, usize, u64)>::insert(move _21, move _22, move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _0 = const ();
        goto -> bb11;
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_17);
        _0 = const ();
        goto -> bb11;
    }

    bb11: {
        StorageDead(_16);
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}
