// MIR for `instructions::user::handle_withdraw` after PreCodegen

fn instructions::user::handle_withdraw(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::Withdraw<'_>>, _2: u16, _3: u64, _4: bool) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug amount => _3;
    debug reduce_only => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _9: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: anchor_lang::prelude::Pubkey;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _18: std::cell::RefMut<'_, state::user::User>;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _20: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _21: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _22: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _23: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _31: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _32: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _33: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _34: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _42: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _52: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _53: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _54: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _58: instructions::optional_accounts::AccountMaps<'_>;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _60: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _61: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _62: &std::collections::BTreeSet<u16>;
    let _63: &std::collections::BTreeSet<u16>;
    let _64: std::collections::BTreeSet<u16>;
    let mut _65: &std::collections::BTreeSet<u16>;
    let _66: &std::collections::BTreeSet<u16>;
    let _67: std::collections::BTreeSet<u16>;
    let mut _68: u16;
    let mut _69: u64;
    let mut _70: std::option::Option<state::state::OracleGuardRails>;
    let mut _71: state::state::OracleGuardRails;
    let mut _72: &state::state::State;
    let mut _73: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _81: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _82: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _88: ();
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _90: std::result::Result<(), error::ErrorCode>;
    let mut _91: bool;
    let mut _92: &state::user::User;
    let _93: &state::user::User;
    let mut _94: &std::cell::RefMut<'_, state::user::User>;
    let mut _95: ();
    let _97: ();
    let mut _98: &str;
    let _99: &str;
    let mut _100: &std::string::String;
    let _101: &std::string::String;
    let _102: std::string::String;
    let mut _104: std::fmt::Arguments<'_>;
    let mut _105: &[&str];
    let mut _106: &[&str; 2];
    let _107: &[&str; 2];
    let _108: [&str; 2];
    let mut _109: &[core::fmt::rt::Argument<'_>];
    let mut _110: &[core::fmt::rt::Argument<'_>; 1];
    let _111: &[core::fmt::rt::Argument<'_>; 1];
    let _112: [core::fmt::rt::Argument<'_>; 1];
    let mut _113: core::fmt::rt::Argument<'_>;
    let mut _114: &error::ErrorCode;
    let _115: &error::ErrorCode;
    let mut _116: error::ErrorCode;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _124: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _126: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _127: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _128: &u16;
    let _129: &u16;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _137: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _138: &mut state::oracle_map::OracleMap<'_>;
    let mut _139: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _140: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _141: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _142: &state::spot_market::SpotMarket;
    let _143: &state::spot_market::SpotMarket;
    let mut _144: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _150: ();
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _152: std::result::Result<(), error::ErrorCode>;
    let mut _153: &mut state::spot_market::SpotMarket;
    let mut _154: &mut state::spot_market::SpotMarket;
    let mut _155: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _156: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _157: &state::oracle::OraclePriceData;
    let mut _158: i64;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _164: &state::spot_market::SpotMarket;
    let _165: &state::spot_market::SpotMarket;
    let mut _166: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _169: bool;
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _172: std::result::Result<usize, error::ErrorCode>;
    let mut _173: &mut state::user::User;
    let mut _174: &mut state::user::User;
    let mut _175: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _176: u16;
    let mut _177: isize;
    let mut _179: !;
    let mut _180: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _183: bool;
    let _184: ();
    let mut _185: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _186: std::result::Result<(), error::ErrorCode>;
    let mut _187: bool;
    let mut _188: &state::spot_market::SpotBalanceType;
    let _189: &state::user::User;
    let mut _190: &std::cell::RefMut<'_, state::user::User>;
    let _191: usize;
    let mut _192: usize;
    let mut _193: bool;
    let mut _194: &state::spot_market::SpotBalanceType;
    let _195: state::spot_market::SpotBalanceType;
    let mut _196: ();
    let _198: ();
    let mut _199: &str;
    let _200: &str;
    let mut _201: &std::string::String;
    let _202: &std::string::String;
    let _203: std::string::String;
    let mut _205: std::fmt::Arguments<'_>;
    let mut _206: &[&str];
    let mut _207: &[&str; 2];
    let _208: &[&str; 2];
    let _209: [&str; 2];
    let mut _210: &[core::fmt::rt::Argument<'_>];
    let mut _211: &[core::fmt::rt::Argument<'_>; 1];
    let _212: &[core::fmt::rt::Argument<'_>; 1];
    let _213: [core::fmt::rt::Argument<'_>; 1];
    let mut _214: core::fmt::rt::Argument<'_>;
    let mut _215: &error::ErrorCode;
    let _216: &error::ErrorCode;
    let mut _217: error::ErrorCode;
    let mut _218: isize;
    let mut _220: !;
    let mut _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _224: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _225: std::result::Result<u64, error::ErrorCode>;
    let mut _226: u16;
    let mut _227: &state::user::User;
    let _228: &state::user::User;
    let mut _229: &std::cell::RefMut<'_, state::user::User>;
    let mut _230: &state::perp_market_map::PerpMarketMap<'_>;
    let _231: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _232: &state::spot_market_map::SpotMarketMap<'_>;
    let _233: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _234: &mut state::oracle_map::OracleMap<'_>;
    let mut _235: &mut state::oracle_map::OracleMap<'_>;
    let mut _236: isize;
    let mut _238: !;
    let mut _239: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _242: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _243: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _244: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _245: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _246: &u16;
    let _247: &u16;
    let mut _248: isize;
    let mut _250: !;
    let mut _251: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _254: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _255: std::result::Result<u64, error::ErrorCode>;
    let mut _256: u128;
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _258: std::result::Result<u128, error::ErrorCode>;
    let mut _259: &state::user::SpotPosition;
    let _260: &state::user::User;
    let mut _261: &std::cell::RefMut<'_, state::user::User>;
    let _262: usize;
    let mut _263: usize;
    let mut _264: bool;
    let mut _265: &state::spot_market::SpotMarket;
    let _266: &state::spot_market::SpotMarket;
    let mut _267: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _268: isize;
    let mut _270: !;
    let mut _271: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _273: isize;
    let mut _275: !;
    let mut _276: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _278: u64;
    let mut _279: u64;
    let mut _280: u64;
    let mut _281: u64;
    let mut _283: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _284: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _285: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _286: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _287: &u16;
    let _288: &u16;
    let mut _289: isize;
    let mut _291: !;
    let mut _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _295: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _296: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _297: &mut state::oracle_map::OracleMap<'_>;
    let mut _298: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _299: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _300: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _301: &state::spot_market::SpotMarket;
    let _302: &state::spot_market::SpotMarket;
    let mut _303: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _304: isize;
    let mut _306: !;
    let mut _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _309: ();
    let mut _310: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _311: std::result::Result<(), error::ErrorCode>;
    let mut _312: &mut state::user::User;
    let mut _313: &mut state::user::User;
    let mut _314: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _315: u64;
    let mut _316: i64;
    let mut _317: u128;
    let mut _318: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _319: std::result::Result<u128, error::ErrorCode>;
    let mut _320: u64;
    let mut _321: state::spot_market::SpotMarket;
    let mut _322: &state::spot_market::SpotMarket;
    let mut _323: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _324: isize;
    let mut _326: !;
    let mut _327: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _329: isize;
    let mut _331: !;
    let mut _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _334: ();
    let mut _335: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _336: std::result::Result<(), error::ErrorCode>;
    let mut _337: u128;
    let mut _338: u64;
    let mut _339: &state::spot_market::SpotBalanceType;
    let _340: &state::spot_market::SpotBalanceType;
    let _341: state::spot_market::SpotBalanceType;
    let mut _342: &mut state::spot_market::SpotMarket;
    let mut _343: &mut state::spot_market::SpotMarket;
    let mut _344: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _345: &mut state::user::User;
    let mut _346: &mut state::user::User;
    let mut _347: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _348: isize;
    let mut _350: !;
    let mut _351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _353: bool;
    let mut _354: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _355: std::result::Result<bool, error::ErrorCode>;
    let mut _356: &mut state::user::User;
    let mut _357: &mut state::user::User;
    let mut _358: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _359: &state::perp_market_map::PerpMarketMap<'_>;
    let _360: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _361: &state::spot_market_map::SpotMarketMap<'_>;
    let _362: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _363: &mut state::oracle_map::OracleMap<'_>;
    let mut _364: &mut state::oracle_map::OracleMap<'_>;
    let mut _365: math::margin::MarginRequirementType;
    let mut _366: u16;
    let mut _367: u128;
    let mut _368: u64;
    let mut _369: &mut state::user::UserStats;
    let mut _370: &mut state::user::UserStats;
    let mut _371: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _372: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _373: i64;
    let mut _374: isize;
    let mut _376: !;
    let mut _377: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _379: ();
    let mut _380: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _381: std::result::Result<(), error::ErrorCode>;
    let mut _382: &state::user::User;
    let _383: &state::user::User;
    let mut _384: &std::cell::RefMut<'_, state::user::User>;
    let mut _385: &state::perp_market_map::PerpMarketMap<'_>;
    let _386: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _387: &state::spot_market_map::SpotMarketMap<'_>;
    let _388: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _389: &mut state::oracle_map::OracleMap<'_>;
    let mut _390: &mut state::oracle_map::OracleMap<'_>;
    let mut _391: isize;
    let mut _393: !;
    let mut _394: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _396: ();
    let mut _397: bool;
    let mut _398: &state::user::User;
    let _399: &state::user::User;
    let mut _400: &std::cell::RefMut<'_, state::user::User>;
    let _401: ();
    let mut _402: &mut state::user::User;
    let mut _403: &mut state::user::User;
    let mut _404: &mut std::cell::RefMut<'_, state::user::User>;
    let _405: ();
    let mut _406: &mut state::user::User;
    let mut _407: &mut state::user::User;
    let mut _408: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _409: u64;
    let mut _411: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _412: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _413: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _414: &u16;
    let _415: &u16;
    let mut _416: isize;
    let mut _418: !;
    let mut _419: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _422: &state::oracle::OraclePriceData;
    let mut _423: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _424: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _425: &mut state::oracle_map::OracleMap<'_>;
    let mut _426: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _427: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _428: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _429: &state::spot_market::SpotMarket;
    let _430: &state::spot_market::SpotMarket;
    let mut _431: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _432: isize;
    let mut _434: !;
    let mut _435: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _438: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _439: &state::user::User;
    let _440: &state::user::User;
    let mut _441: &std::cell::RefMut<'_, state::user::User>;
    let mut _442: u16;
    let mut _443: {closure@programs/drift/src/instructions/user.rs:803:24: 803:29};
    let mut _445: bool;
    let mut _448: &state::spot_market::SpotMarket;
    let mut _449: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _450: u64;
    let mut _451: std::option::Option<u64>;
    let mut _452: std::option::Option<u64>;
    let mut _453: u64;
    let mut _454: std::option::Option<u64>;
    let mut _455: &mut state::spot_market::SpotMarket;
    let mut _456: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _458: i64;
    let mut _459: u64;
    let mut _460: anchor_lang::prelude::Pubkey;
    let mut _461: &state::user::User;
    let mut _462: &std::cell::RefMut<'_, state::user::User>;
    let mut _463: anchor_lang::prelude::Pubkey;
    let mut _464: state::events::DepositDirection;
    let mut _465: i64;
    let mut _466: u64;
    let mut _467: u16;
    let mut _468: u128;
    let mut _469: &state::spot_market::SpotMarket;
    let mut _470: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _471: u128;
    let mut _472: &state::spot_market::SpotMarket;
    let mut _473: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _474: u128;
    let mut _475: &state::spot_market::SpotMarket;
    let mut _476: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _477: u128;
    let mut _478: &state::spot_market::SpotMarket;
    let mut _479: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _480: u64;
    let mut _481: &state::user::User;
    let mut _482: &std::cell::RefMut<'_, state::user::User>;
    let mut _483: u64;
    let mut _484: &state::user::User;
    let mut _485: &std::cell::RefMut<'_, state::user::User>;
    let mut _486: state::events::DepositExplanation;
    let mut _487: std::option::Option<anchor_lang::prelude::Pubkey>;
    let _488: ();
    let _489: ();
    let mut _490: &[&[u8]];
    let mut _491: &[&[u8]; 1];
    let _492: &[&[u8]; 1];
    let _493: [&[u8]; 1];
    let mut _494: &[u8];
    let _495: &[u8];
    let mut _496: &std::vec::Vec<u8>;
    let _497: &std::vec::Vec<u8>;
    let _498: std::vec::Vec<u8>;
    let mut _499: &state::events::DepositRecord;
    let _500: &state::events::DepositRecord;
    let _501: ();
    let mut _502: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _503: std::result::Result<(), anchor_lang::error::Error>;
    let mut _504: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _505: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _506: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _507: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _508: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _509: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _510: &anchor_lang::prelude::AccountInfo<'_>;
    let _511: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _512: u8;
    let mut _513: &state::state::State;
    let mut _514: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _515: u64;
    let mut _516: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _517: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _518: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _519: bool;
    let mut _520: &state::spot_market::SpotMarket;
    let _521: &state::spot_market::SpotMarket;
    let mut _522: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _523: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _524: isize;
    let mut _526: !;
    let mut _527: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _529: ();
    let mut _530: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _531: std::result::Result<(), anchor_lang::error::Error>;
    let mut _532: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _533: isize;
    let mut _535: !;
    let mut _536: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _538: i64;
    let mut _539: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _540: std::result::Result<i64, error::ErrorCode>;
    let mut _541: &state::spot_market::SpotMarket;
    let _542: &state::spot_market::SpotMarket;
    let mut _543: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _544: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _545: u64;
    let mut _546: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _547: &anchor_spl::token_interface::TokenAccount;
    let _548: &anchor_spl::token_interface::TokenAccount;
    let mut _549: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _550: isize;
    let mut _552: !;
    let mut _553: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _555: ();
    let mut _556: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _557: std::result::Result<(), error::ErrorCode>;
    let mut _558: &state::spot_market::SpotMarket;
    let _559: &state::spot_market::SpotMarket;
    let mut _560: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _561: bool;
    let mut _562: isize;
    let mut _564: !;
    let mut _565: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _567: ();
    let mut _572: &mut instructions::user::Withdraw<'_>;
    let mut _573: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _574: &mut instructions::user::Withdraw<'_>;
    let mut _575: &mut instructions::user::Withdraw<'_>;
    let mut _576: &mut instructions::user::Withdraw<'_>;
    let mut _577: &mut instructions::user::Withdraw<'_>;
    let mut _578: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _579: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _580: &mut instructions::user::Withdraw<'_>;
    let mut _581: &mut instructions::user::Withdraw<'_>;
    let mut _582: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _583: &mut instructions::user::Withdraw<'_>;
    let mut _584: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _585: &mut instructions::user::Withdraw<'_>;
    let mut _586: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _587: &mut instructions::user::Withdraw<'_>;
    let mut _588: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _589: &mut instructions::user::Withdraw<'_>;
    let mut _590: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: isize;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: isize;
    let mut _605: isize;
    let mut _606: isize;
    let mut _607: isize;
    let mut _608: isize;
    let mut _609: isize;
    let mut _610: isize;
    let mut _611: isize;
    let mut _612: isize;
    let mut _613: isize;
    let mut _614: isize;
    let mut _615: isize;
    let mut _616: isize;
    let mut _617: isize;
    let mut _618: isize;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _648: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _649: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _650: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _651: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _652: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _653: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug user_key => _15;
        let _17: &mut std::cell::RefMut<'_, state::user::User>;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: std::cell::RefMut<'_, state::user::User>;
        scope 6 {
            debug user => _17;
            let mut _29: std::cell::RefMut<'_, state::user::UserStats>;
            let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _39: std::cell::RefMut<'_, state::user::UserStats>;
            scope 11 {
                debug user_stats => _29;
                let _40: anchor_lang::prelude::Clock;
                let _44: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _47: anchor_lang::prelude::Clock;
                scope 16 {
                    debug clock => _40;
                    let _48: i64;
                    scope 21 {
                        debug now => _48;
                        let _49: u64;
                        scope 22 {
                            debug slot => _49;
                            let _50: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                            scope 23 {
                                debug state => _50;
                                let _51: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                                scope 24 {
                                    debug remaining_accounts_iter => _51;
                                    let _55: state::perp_market_map::PerpMarketMap<'_>;
                                    let _56: state::spot_market_map::SpotMarketMap<'_>;
                                    let mut _57: state::oracle_map::OracleMap<'_>;
                                    let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _78: instructions::optional_accounts::AccountMaps<'_>;
                                    scope 25 {
                                        debug perp_market_map => _55;
                                        debug spot_market_map => _56;
                                        debug oracle_map => _57;
                                        let _79: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                        let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _87: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                        scope 30 {
                                            debug mint => _79;
                                            let _96: error::ErrorCode;
                                            let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _121: ();
                                            let _122: bool;
                                            let _123: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                            let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _134: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                            scope 35 {
                                                debug error_code => _96;
                                                let _103: std::string::String;
                                                let mut _571: &[&str; 2];
                                                scope 36 {
                                                    debug res => _103;
                                                }
                                            }
                                            scope 37 {
                                                debug residual => _118;
                                                scope 38 {
                                                }
                                            }
                                            scope 39 {
                                                debug val => _121;
                                                scope 40 {
                                                }
                                            }
                                            scope 41 {
                                                debug spot_market_is_reduce_only => _122;
                                                let _167: u64;
                                                let _168: bool;
                                                scope 56 {
                                                    debug amount => _167;
                                                    let _375: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _378: bool;
                                                    let _392: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _395: ();
                                                    let mut _410: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                    let _417: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _420: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                    scope 111 {
                                                        debug residual => _375;
                                                        scope 112 {
                                                        }
                                                    }
                                                    scope 113 {
                                                        debug val => _378;
                                                        scope 114 {
                                                        }
                                                    }
                                                    scope 115 {
                                                        debug residual => _392;
                                                        scope 116 {
                                                        }
                                                    }
                                                    scope 117 {
                                                        debug val => _395;
                                                        scope 118 {
                                                        }
                                                    }
                                                    scope 119 {
                                                        debug spot_market => _410;
                                                        let _421: i64;
                                                        let _433: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _436: &state::oracle::OraclePriceData;
                                                        scope 124 {
                                                            debug oracle_price => _421;
                                                            let _437: bool;
                                                            scope 129 {
                                                                debug is_borrow => _437;
                                                                let _444: state::events::DepositExplanation;
                                                                scope 130 {
                                                                    debug deposit_explanation => _444;
                                                                    let _446: u64;
                                                                    let _447: u64;
                                                                    scope 131 {
                                                                        debug deposit_record_id => _446;
                                                                        let _457: state::events::DepositRecord;
                                                                        scope 133 {
                                                                            debug deposit_record => _457;
                                                                            let _525: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _528: ();
                                                                            let _534: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _537: ();
                                                                            let _551: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _554: i64;
                                                                            let _563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _566: ();
                                                                            scope 134 {
                                                                                debug residual => _525;
                                                                                scope 135 {
                                                                                }
                                                                            }
                                                                            scope 136 {
                                                                                debug val => _528;
                                                                                scope 137 {
                                                                                }
                                                                            }
                                                                            scope 138 {
                                                                                debug residual => _534;
                                                                                scope 139 {
                                                                                }
                                                                            }
                                                                            scope 140 {
                                                                                debug val => _537;
                                                                                scope 141 {
                                                                                }
                                                                            }
                                                                            scope 142 {
                                                                                debug residual => _551;
                                                                                scope 143 {
                                                                                }
                                                                            }
                                                                            scope 144 {
                                                                                debug val => _554;
                                                                                scope 145 {
                                                                                }
                                                                            }
                                                                            scope 146 {
                                                                                debug residual => _563;
                                                                                scope 147 {
                                                                                }
                                                                            }
                                                                            scope 148 {
                                                                                debug val => _566;
                                                                                scope 149 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 132 {
                                                                        debug current_id => _447;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 125 {
                                                            debug residual => _433;
                                                            scope 126 {
                                                            }
                                                        }
                                                        scope 127 {
                                                            debug val => _436;
                                                            scope 128 {
                                                            }
                                                        }
                                                    }
                                                    scope 120 {
                                                        debug residual => _417;
                                                        scope 121 {
                                                        }
                                                    }
                                                    scope 122 {
                                                        debug val => _420;
                                                        scope 123 {
                                                        }
                                                    }
                                                }
                                                scope 57 {
                                                    debug reduce_only => _168;
                                                    let _170: usize;
                                                    let _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _181: usize;
                                                    scope 58 {
                                                        debug position_index => _170;
                                                        let _182: u64;
                                                        let _197: error::ErrorCode;
                                                        let _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _222: ();
                                                        let _223: u64;
                                                        let _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _240: u64;
                                                        let mut _570: &state::spot_market::SpotBalanceType;
                                                        scope 63 {
                                                            debug amount => _182;
                                                            let _282: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                            let _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _293: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                            scope 89 {
                                                                debug spot_market => _282;
                                                                let _294: &state::oracle::OraclePriceData;
                                                                let _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _308: &state::oracle::OraclePriceData;
                                                                scope 94 {
                                                                    debug oracle_price_data => _294;
                                                                    let _325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _328: u128;
                                                                    let _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _333: ();
                                                                    let _349: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _352: ();
                                                                    let mut _568: &state::spot_market::SpotBalanceType;
                                                                    scope 99 {
                                                                        debug residual => _325;
                                                                        scope 100 {
                                                                        }
                                                                    }
                                                                    scope 101 {
                                                                        debug val => _328;
                                                                        scope 102 {
                                                                        }
                                                                    }
                                                                    scope 103 {
                                                                        debug residual => _330;
                                                                        scope 104 {
                                                                        }
                                                                    }
                                                                    scope 105 {
                                                                        debug val => _333;
                                                                        scope 106 {
                                                                        }
                                                                    }
                                                                    scope 107 {
                                                                        debug residual => _349;
                                                                        scope 108 {
                                                                        }
                                                                    }
                                                                    scope 109 {
                                                                        debug val => _352;
                                                                        scope 110 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 95 {
                                                                    debug residual => _305;
                                                                    scope 96 {
                                                                    }
                                                                }
                                                                scope 97 {
                                                                    debug val => _308;
                                                                    scope 98 {
                                                                    }
                                                                }
                                                            }
                                                            scope 90 {
                                                                debug residual => _290;
                                                                scope 91 {
                                                                }
                                                            }
                                                            scope 92 {
                                                                debug val => _293;
                                                                scope 93 {
                                                                }
                                                            }
                                                        }
                                                        scope 64 {
                                                            debug error_code => _197;
                                                            let _204: std::string::String;
                                                            let mut _569: &[&str; 2];
                                                            scope 65 {
                                                                debug res => _204;
                                                            }
                                                        }
                                                        scope 66 {
                                                            debug residual => _219;
                                                            scope 67 {
                                                            }
                                                        }
                                                        scope 68 {
                                                            debug val => _222;
                                                            scope 69 {
                                                            }
                                                        }
                                                        scope 70 {
                                                            debug max_withdrawable_amount => _223;
                                                            let _241: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                            let _249: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _252: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                            scope 75 {
                                                                debug spot_market => _241;
                                                                let _253: u64;
                                                                let _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _272: u128;
                                                                let _274: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _277: u64;
                                                                scope 80 {
                                                                    debug existing_deposit_amount => _253;
                                                                }
                                                                scope 81 {
                                                                    debug residual => _269;
                                                                    scope 82 {
                                                                    }
                                                                }
                                                                scope 83 {
                                                                    debug val => _272;
                                                                    scope 84 {
                                                                    }
                                                                }
                                                                scope 85 {
                                                                    debug residual => _274;
                                                                    scope 86 {
                                                                    }
                                                                }
                                                                scope 87 {
                                                                    debug val => _277;
                                                                    scope 88 {
                                                                    }
                                                                }
                                                            }
                                                            scope 76 {
                                                                debug residual => _249;
                                                                scope 77 {
                                                                }
                                                            }
                                                            scope 78 {
                                                                debug val => _252;
                                                                scope 79 {
                                                                }
                                                            }
                                                        }
                                                        scope 71 {
                                                            debug residual => _237;
                                                            scope 72 {
                                                            }
                                                        }
                                                        scope 73 {
                                                            debug val => _240;
                                                            scope 74 {
                                                            }
                                                        }
                                                    }
                                                    scope 59 {
                                                        debug residual => _178;
                                                        scope 60 {
                                                        }
                                                    }
                                                    scope 61 {
                                                        debug val => _181;
                                                        scope 62 {
                                                        }
                                                    }
                                                }
                                            }
                                            scope 42 {
                                                debug spot_market => _123;
                                                let _135: &state::oracle::OraclePriceData;
                                                let _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _149: &state::oracle::OraclePriceData;
                                                scope 47 {
                                                    debug oracle_price_data => _135;
                                                    let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _163: ();
                                                    scope 52 {
                                                        debug residual => _160;
                                                        scope 53 {
                                                        }
                                                    }
                                                    scope 54 {
                                                        debug val => _163;
                                                        scope 55 {
                                                        }
                                                    }
                                                }
                                                scope 48 {
                                                    debug residual => _146;
                                                    scope 49 {
                                                    }
                                                }
                                                scope 50 {
                                                    debug val => _149;
                                                    scope 51 {
                                                    }
                                                }
                                            }
                                            scope 43 {
                                                debug residual => _131;
                                                scope 44 {
                                                }
                                            }
                                            scope 45 {
                                                debug val => _134;
                                                scope 46 {
                                                }
                                            }
                                        }
                                        scope 31 {
                                            debug residual => _84;
                                            scope 32 {
                                            }
                                        }
                                        scope 33 {
                                            debug val => _87;
                                            scope 34 {
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _75;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _78;
                                        scope 29 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 17 {
                    debug residual => _44;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _47;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _36;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _39;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _25;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _28;
            scope 10 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _572 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _9 = &((*_572).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _573 = deref_copy (*_9);
        _647 = (((_573.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _8 = &(*_647);
        _7 = constraints::withdraw_not_paused(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb300];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _591 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        _574 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _16 = &((*_574).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _15 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb311];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _633 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb284;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _575 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _22 = &((*_575).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _21 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        StorageLive(_23);
        _23 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _20 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _21, move _23) -> [return: bb9, unwind: bb300];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_21);
        _19 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _20) -> [return: bb10, unwind: bb300];
    }

    bb10: {
        StorageDead(_20);
        _24 = discriminant(_19);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_28);
        _28 = move ((_19 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _18 = move _28;
        StorageDead(_28);
        _17 = &mut _18;
        _595 = discriminant(_19);
        StorageDead(_19);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _576 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _33 = &((*_576).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _32 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _33) -> [return: bb14, unwind: bb299];
    }

    bb12: {
        StorageLive(_25);
        _25 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb13, unwind: bb310];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        _593 = discriminant(_19);
        StorageDead(_19);
        goto -> bb283;
    }

    bb14: {
        StorageDead(_33);
        StorageLive(_34);
        _34 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _31 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _32, move _34) -> [return: bb15, unwind: bb299];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_32);
        _30 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _31) -> [return: bb16, unwind: bb299];
    }

    bb16: {
        StorageDead(_31);
        _35 = discriminant(_30);
        switchInt(move _35) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_39);
        _39 = move ((_30 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _29 = move _39;
        StorageDead(_39);
        _599 = discriminant(_30);
        StorageDead(_30);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb20, unwind: bb298];
    }

    bb18: {
        StorageLive(_36);
        _36 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb19, unwind: bb309];
    }

    bb19: {
        StorageDead(_38);
        StorageDead(_36);
        _597 = discriminant(_30);
        StorageDead(_30);
        goto -> bb282;
    }

    bb20: {
        _41 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _42) -> [return: bb21, unwind: bb298];
    }

    bb21: {
        StorageDead(_42);
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_47);
        _47 = move ((_41 as Continue).0: anchor_lang::prelude::Clock);
        _40 = move _47;
        StorageDead(_47);
        _601 = discriminant(_41);
        StorageDead(_41);
        StorageLive(_48);
        _48 = (_40.4: i64);
        StorageLive(_49);
        _49 = (_40.0: u64);
        StorageLive(_50);
        _577 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _50 = &((*_577).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _578 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _54 = &(*_578);
        _53 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _54) -> [return: bb25, unwind: bb298];
    }

    bb23: {
        StorageLive(_44);
        _44 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _46) -> [return: bb24, unwind: bb308];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_44);
        _631 = discriminant(_41);
        StorageDead(_41);
        goto -> bb281;
    }

    bb25: {
        StorageDead(_54);
        _52 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _53) -> [return: bb26, unwind: bb298];
    }

    bb26: {
        StorageDead(_53);
        _51 = &mut _52;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut (*_51);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = BTreeSet::<u16>::new() -> [return: bb27, unwind: bb298];
    }

    bb27: {
        _63 = &_64;
        _62 = &(*_63);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _2;
        _67 = get_writable_spot_market_set(move _68) -> [return: bb28, unwind: bb297];
    }

    bb28: {
        StorageDead(_68);
        _66 = &_67;
        _65 = &(*_66);
        StorageLive(_69);
        _69 = (_40.0: u64);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _579 = deref_copy (*_50);
        _648 = (((_579.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _73 = &(*_648);
        _72 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _73) -> [return: bb29, unwind: bb296];
    }

    bb29: {
        StorageDead(_73);
        _71 = ((*_72).7: state::state::OracleGuardRails);
        _70 = Option::<state::state::OracleGuardRails>::Some(move _71);
        StorageDead(_71);
        _60 = load_maps(move _61, move _62, move _65, move _69, move _70) -> [return: bb30, unwind: bb296];
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        _59 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _60) -> [return: bb31, unwind: bb296];
    }

    bb31: {
        StorageDead(_60);
        _74 = discriminant(_59);
        switchInt(move _74) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_78);
        _78 = move ((_59 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _58 = move _78;
        StorageDead(_78);
        StorageLive(_55);
        _55 = move (_58.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_56);
        _56 = move (_58.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_57);
        _57 = move (_58.2: state::oracle_map::OracleMap<'_>);
        _605 = discriminant(_59);
        StorageDead(_72);
        drop(_67) -> [return: bb35, unwind: bb292];
    }

    bb33: {
        StorageLive(_75);
        _75 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb34, unwind: bb307];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_75);
        _603 = discriminant(_59);
        StorageDead(_72);
        drop(_67) -> [return: bb278, unwind: bb297];
    }

    bb35: {
        StorageDead(_67);
        StorageDead(_66);
        drop(_64) -> [return: bb36, unwind: bb293];
    }

    bb36: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &mut (*_51);
        _81 = get_token_mint(move _82) -> [return: bb37, unwind: bb293];
    }

    bb37: {
        StorageDead(_82);
        _80 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _81) -> [return: bb38, unwind: bb293];
    }

    bb38: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_87);
        _87 = move ((_80 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _79 = move _87;
        StorageDead(_87);
        StorageDead(_80);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &(*_17);
        _93 = <RefMut<'_, User> as Deref>::deref(move _94) -> [return: bb42, unwind: bb293];
    }

    bb40: {
        StorageLive(_84);
        _84 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb41, unwind: bb293];
    }

    bb41: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_80);
        goto -> bb274;
    }

    bb42: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = User::is_bankrupt(move _92) -> [return: bb43, unwind: bb293];
    }

    bb43: {
        switchInt(move _91) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        StorageDead(_92);
        StorageDead(_93);
        StorageLive(_96);
        _96 = error::ErrorCode::UserBankrupt;
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _571 = const _;
        _107 = &(*_571);
        _106 = &(*_107);
        _105 = move _106 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_106);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &_96;
        _114 = &(*_115);
        _113 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _114) -> [return: bb46, unwind: bb293];
    }

    bb45: {
        StorageDead(_92);
        StorageDead(_93);
        StorageLive(_95);
        _95 = ();
        _90 = std::result::Result::<(), error::ErrorCode>::Ok(move _95);
        StorageDead(_95);
        goto -> bb52;
    }

    bb46: {
        StorageDead(_114);
        _112 = [move _113];
        StorageDead(_113);
        _111 = &_112;
        _110 = &(*_111);
        _109 = move _110 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_110);
        _104 = Arguments::<'_>::new_v1(move _105, move _109) -> [return: bb47, unwind: bb293];
    }

    bb47: {
        StorageDead(_109);
        StorageDead(_105);
        _103 = format(move _104) -> [return: bb48, unwind: bb293];
    }

    bb48: {
        StorageDead(_104);
        StorageDead(_115);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_107);
        _102 = move _103;
        StorageDead(_103);
        _101 = &_102;
        _100 = &(*_101);
        _99 = <String as Deref>::deref(move _100) -> [return: bb49, unwind: bb291];
    }

    bb49: {
        _98 = &(*_99);
        StorageDead(_100);
        _97 = solana_program::log::sol_log(move _98) -> [return: bb50, unwind: bb291];
    }

    bb50: {
        StorageDead(_98);
        drop(_102) -> [return: bb51, unwind: bb293];
    }

    bb51: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_97);
        StorageLive(_116);
        _116 = _96;
        _90 = std::result::Result::<(), error::ErrorCode>::Err(move _116);
        StorageDead(_116);
        StorageDead(_96);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_91);
        _89 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _90) -> [return: bb53, unwind: bb293];
    }

    bb53: {
        StorageDead(_90);
        _117 = discriminant(_89);
        switchInt(move _117) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_121);
        _121 = ((_89 as Continue).0: ());
        _88 = _121;
        StorageDead(_121);
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_56;
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_2;
        _128 = &(*_129);
        _126 = SpotMarketMap::<'_>::get_ref_mut(move _127, move _128) -> [return: bb57, unwind: bb293];
    }

    bb55: {
        StorageLive(_118);
        _118 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb56, unwind: bb293];
    }

    bb56: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb274;
    }

    bb57: {
        StorageDead(_128);
        StorageDead(_127);
        _125 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _126) -> [return: bb58, unwind: bb293];
    }

    bb58: {
        StorageDead(_126);
        _130 = discriminant(_125);
        switchInt(move _130) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_134);
        _134 = move ((_125 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _124 = move _134;
        StorageDead(_134);
        _123 = &mut _124;
        _609 = discriminant(_125);
        StorageDead(_129);
        StorageDead(_125);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &mut _57;
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &(*_123);
        _143 = <RefMut<'_, SpotMarket> as Deref>::deref(move _144) -> [return: bb62, unwind: bb290];
    }

    bb60: {
        StorageLive(_131);
        _131 = ((_125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb61, unwind: bb306];
    }

    bb61: {
        StorageDead(_133);
        StorageDead(_131);
        _607 = discriminant(_125);
        StorageDead(_129);
        StorageDead(_125);
        goto -> bb272;
    }

    bb62: {
        _142 = &(*_143);
        StorageDead(_144);
        _141 = SpotMarket::oracle_id(move _142) -> [return: bb63, unwind: bb290];
    }

    bb63: {
        StorageDead(_142);
        _140 = &_141;
        _139 = &(*_140);
        _137 = OracleMap::<'_>::get_price_data(move _138, move _139) -> [return: bb64, unwind: bb290];
    }

    bb64: {
        StorageDead(_139);
        StorageDead(_138);
        _136 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _137) -> [return: bb65, unwind: bb290];
    }

    bb65: {
        StorageDead(_137);
        _145 = discriminant(_136);
        switchInt(move _145) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_149);
        _149 = ((_136 as Continue).0: &state::oracle::OraclePriceData);
        _135 = _149;
        StorageDead(_149);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &mut (*_123);
        _154 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _155) -> [return: bb69, unwind: bb290];
    }

    bb67: {
        StorageLive(_146);
        _146 = ((_136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_148);
        _148 = _146;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _148) -> [return: bb68, unwind: bb290];
    }

    bb68: {
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        goto -> bb271;
    }

    bb69: {
        _153 = &mut (*_154);
        StorageDead(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &(*_135);
        _156 = Option::<&OraclePriceData>::Some(move _157);
        StorageDead(_157);
        StorageLive(_158);
        _158 = _48;
        _152 = controller::spot_balance::update_spot_market_cumulative_interest(move _153, move _156, move _158) -> [return: bb70, unwind: bb290];
    }

    bb70: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_153);
        _151 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _152) -> [return: bb71, unwind: bb290];
    }

    bb71: {
        StorageDead(_152);
        _159 = discriminant(_151);
        switchInt(move _159) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_163);
        _163 = ((_151 as Continue).0: ());
        _150 = _163;
        StorageDead(_163);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &(*_123);
        _165 = <RefMut<'_, SpotMarket> as Deref>::deref(move _166) -> [return: bb75, unwind: bb290];
    }

    bb73: {
        StorageLive(_160);
        _160 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb74, unwind: bb290];
    }

    bb74: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_150);
        goto -> bb271;
    }

    bb75: {
        _164 = &(*_165);
        StorageDead(_166);
        _122 = SpotMarket::is_reduce_only(move _164) -> [return: bb76, unwind: bb290];
    }

    bb76: {
        StorageDead(_164);
        StorageDead(_135);
        drop(_124) -> [return: bb77, unwind: bb293];
    }

    bb77: {
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_165);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = _4;
        switchInt(move _169) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        _168 = const true;
        goto -> bb80;
    }

    bb79: {
        _168 = _122;
        goto -> bb80;
    }

    bb80: {
        StorageDead(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &mut (*_17);
        _174 = <RefMut<'_, User> as DerefMut>::deref_mut(move _175) -> [return: bb81, unwind: bb293];
    }

    bb81: {
        _173 = &mut (*_174);
        StorageDead(_175);
        StorageLive(_176);
        _176 = _2;
        _172 = User::force_get_spot_position_index(move _173, move _176) -> [return: bb82, unwind: bb293];
    }

    bb82: {
        StorageDead(_176);
        StorageDead(_173);
        _171 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _172) -> [return: bb83, unwind: bb293];
    }

    bb83: {
        StorageDead(_172);
        _177 = discriminant(_171);
        switchInt(move _177) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_181);
        _181 = ((_171 as Continue).0: usize);
        _170 = _181;
        StorageDead(_181);
        StorageDead(_174);
        StorageDead(_171);
        StorageLive(_182);
        StorageLive(_183);
        _183 = _168;
        switchInt(move _183) -> [0: bb88, otherwise: bb87];
    }

    bb85: {
        StorageLive(_178);
        _178 = ((_171 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_180);
        _180 = _178;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _180) -> [return: bb86, unwind: bb293];
    }

    bb86: {
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_174);
        StorageDead(_171);
        goto -> bb269;
    }

    bb87: {
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_17);
        _189 = <RefMut<'_, User> as Deref>::deref(move _190) -> [return: bb89, unwind: bb293];
    }

    bb88: {
        _182 = _3;
        goto -> bb132;
    }

    bb89: {
        StorageDead(_190);
        StorageLive(_191);
        _191 = _170;
        _192 = Len(((*_189).3: [state::user::SpotPosition; 8]));
        _193 = Lt(_191, _192);
        assert(move _193, "index out of bounds: the length is {} but the index is {}", move _192, _191) -> [success: bb90, unwind: bb293];
    }

    bb90: {
        _188 = &(((*_189).3: [state::user::SpotPosition; 8])[_191].5: state::spot_market::SpotBalanceType);
        StorageLive(_194);
        _570 = const _;
        _194 = &(*_570);
        _187 = <SpotBalanceType as PartialEq>::eq(move _188, move _194) -> [return: bb91, unwind: bb293];
    }

    bb91: {
        switchInt(move _187) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_196);
        _196 = ();
        _186 = std::result::Result::<(), error::ErrorCode>::Ok(move _196);
        StorageDead(_196);
        goto -> bb100;
    }

    bb93: {
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_197);
        _197 = error::ErrorCode::ReduceOnlyWithdrawIncreasedRisk;
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _569 = const _;
        _208 = &(*_569);
        _207 = &(*_208);
        _206 = move _207 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_207);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &_197;
        _215 = &(*_216);
        _214 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _215) -> [return: bb94, unwind: bb293];
    }

    bb94: {
        StorageDead(_215);
        _213 = [move _214];
        StorageDead(_214);
        _212 = &_213;
        _211 = &(*_212);
        _210 = move _211 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_211);
        _205 = Arguments::<'_>::new_v1(move _206, move _210) -> [return: bb95, unwind: bb293];
    }

    bb95: {
        StorageDead(_210);
        StorageDead(_206);
        _204 = format(move _205) -> [return: bb96, unwind: bb293];
    }

    bb96: {
        StorageDead(_205);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_208);
        _203 = move _204;
        StorageDead(_204);
        _202 = &_203;
        _201 = &(*_202);
        _200 = <String as Deref>::deref(move _201) -> [return: bb97, unwind: bb289];
    }

    bb97: {
        _199 = &(*_200);
        StorageDead(_201);
        _198 = solana_program::log::sol_log(move _199) -> [return: bb98, unwind: bb289];
    }

    bb98: {
        StorageDead(_199);
        drop(_203) -> [return: bb99, unwind: bb293];
    }

    bb99: {
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_198);
        StorageLive(_217);
        _217 = _197;
        _186 = std::result::Result::<(), error::ErrorCode>::Err(move _217);
        StorageDead(_217);
        StorageDead(_197);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_187);
        _185 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _186) -> [return: bb101, unwind: bb293];
    }

    bb101: {
        StorageDead(_186);
        _218 = discriminant(_185);
        switchInt(move _218) -> [0: bb102, 1: bb103, otherwise: bb4];
    }

    bb102: {
        StorageLive(_222);
        _222 = ((_185 as Continue).0: ());
        _184 = _222;
        StorageDead(_222);
        StorageDead(_185);
        StorageDead(_184);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = _2;
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &(*_17);
        _228 = <RefMut<'_, User> as Deref>::deref(move _229) -> [return: bb105, unwind: bb293];
    }

    bb103: {
        StorageLive(_219);
        _219 = ((_185 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_221);
        _221 = _219;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _221) -> [return: bb104, unwind: bb293];
    }

    bb104: {
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_185);
        StorageDead(_184);
        goto -> bb267;
    }

    bb105: {
        _227 = &(*_228);
        StorageDead(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &_55;
        _230 = &(*_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_56;
        _232 = &(*_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &mut _57;
        _234 = &mut (*_235);
        _225 = calculate_max_withdrawable_amount(move _226, move _227, move _230, move _232, move _234) -> [return: bb106, unwind: bb293];
    }

    bb106: {
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_227);
        StorageDead(_226);
        _224 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _225) -> [return: bb107, unwind: bb293];
    }

    bb107: {
        StorageDead(_225);
        _236 = discriminant(_224);
        switchInt(move _236) -> [0: bb108, 1: bb109, otherwise: bb4];
    }

    bb108: {
        StorageLive(_240);
        _240 = ((_224 as Continue).0: u64);
        _223 = _240;
        StorageDead(_240);
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_224);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &_56;
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_2;
        _246 = &(*_247);
        _244 = SpotMarketMap::<'_>::get_ref(move _245, move _246) -> [return: bb111, unwind: bb293];
    }

    bb109: {
        StorageLive(_237);
        _237 = ((_224 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_239);
        _239 = _237;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _239) -> [return: bb110, unwind: bb293];
    }

    bb110: {
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_224);
        goto -> bb266;
    }

    bb111: {
        StorageDead(_246);
        StorageDead(_245);
        _243 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _244) -> [return: bb112, unwind: bb293];
    }

    bb112: {
        StorageDead(_244);
        _248 = discriminant(_243);
        switchInt(move _248) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        StorageLive(_252);
        _252 = move ((_243 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _242 = move _252;
        StorageDead(_252);
        _241 = &_242;
        _613 = discriminant(_243);
        StorageDead(_247);
        StorageDead(_243);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &(*_17);
        _260 = <RefMut<'_, User> as Deref>::deref(move _261) -> [return: bb116, unwind: bb288];
    }

    bb114: {
        StorageLive(_249);
        _249 = ((_243 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_251);
        _251 = _249;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _251) -> [return: bb115, unwind: bb305];
    }

    bb115: {
        StorageDead(_251);
        StorageDead(_249);
        _611 = discriminant(_243);
        StorageDead(_247);
        StorageDead(_243);
        goto -> bb265;
    }

    bb116: {
        StorageDead(_261);
        StorageLive(_262);
        _262 = _170;
        _263 = Len(((*_260).3: [state::user::SpotPosition; 8]));
        _264 = Lt(_262, _263);
        assert(move _264, "index out of bounds: the length is {} but the index is {}", move _263, _262) -> [success: bb117, unwind: bb288];
    }

    bb117: {
        _259 = &((*_260).3: [state::user::SpotPosition; 8])[_262];
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &(*_241);
        _266 = <Ref<'_, SpotMarket> as Deref>::deref(move _267) -> [return: bb118, unwind: bb288];
    }

    bb118: {
        _265 = &(*_266);
        StorageDead(_267);
        _258 = SpotPosition::get_token_amount(move _259, move _265) -> [return: bb119, unwind: bb288];
    }

    bb119: {
        StorageDead(_265);
        StorageDead(_259);
        _257 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _258) -> [return: bb120, unwind: bb288];
    }

    bb120: {
        StorageDead(_258);
        _268 = discriminant(_257);
        switchInt(move _268) -> [0: bb121, 1: bb122, otherwise: bb4];
    }

    bb121: {
        StorageLive(_272);
        _272 = ((_257 as Continue).0: u128);
        _256 = _272;
        StorageDead(_272);
        _255 = <u128 as Cast>::cast::<u64>(move _256) -> [return: bb124, unwind: bb288];
    }

    bb122: {
        StorageLive(_269);
        _269 = ((_257 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_271);
        _271 = _269;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _271) -> [return: bb123, unwind: bb288];
    }

    bb123: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_256);
        StorageDead(_255);
        goto -> bb264;
    }

    bb124: {
        StorageDead(_256);
        _254 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _255) -> [return: bb125, unwind: bb288];
    }

    bb125: {
        StorageDead(_255);
        _273 = discriminant(_254);
        switchInt(move _273) -> [0: bb126, 1: bb127, otherwise: bb4];
    }

    bb126: {
        StorageLive(_277);
        _277 = ((_254 as Continue).0: u64);
        _253 = _277;
        StorageDead(_277);
        StorageDead(_266);
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_254);
        StorageLive(_278);
        StorageLive(_279);
        _279 = _3;
        StorageLive(_280);
        _280 = _223;
        _278 = <u64 as Ord>::min(move _279, move _280) -> [return: bb129, unwind: bb288];
    }

    bb127: {
        StorageLive(_274);
        _274 = ((_254 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_276);
        _276 = _274;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _276) -> [return: bb128, unwind: bb288];
    }

    bb128: {
        StorageDead(_276);
        StorageDead(_274);
        goto -> bb264;
    }

    bb129: {
        StorageDead(_280);
        StorageDead(_279);
        StorageLive(_281);
        _281 = _253;
        _182 = <u64 as Ord>::min(move _278, move _281) -> [return: bb130, unwind: bb288];
    }

    bb130: {
        StorageDead(_281);
        StorageDead(_278);
        StorageDead(_253);
        drop(_242) -> [return: bb131, unwind: bb293];
    }

    bb131: {
        StorageDead(_242);
        StorageDead(_241);
        StorageDead(_223);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_183);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_56;
        StorageLive(_287);
        StorageLive(_288);
        _288 = &_2;
        _287 = &(*_288);
        _285 = SpotMarketMap::<'_>::get_ref_mut(move _286, move _287) -> [return: bb133, unwind: bb293];
    }

    bb133: {
        StorageDead(_287);
        StorageDead(_286);
        _284 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _285) -> [return: bb134, unwind: bb293];
    }

    bb134: {
        StorageDead(_285);
        _289 = discriminant(_284);
        switchInt(move _289) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        StorageLive(_293);
        _293 = move ((_284 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _283 = move _293;
        StorageDead(_293);
        _282 = &mut _283;
        _617 = discriminant(_284);
        StorageDead(_288);
        StorageDead(_284);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &mut _57;
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &(*_282);
        _302 = <RefMut<'_, SpotMarket> as Deref>::deref(move _303) -> [return: bb138, unwind: bb287];
    }

    bb136: {
        StorageLive(_290);
        _290 = ((_284 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_292);
        _292 = _290;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _292) -> [return: bb137, unwind: bb304];
    }

    bb137: {
        StorageDead(_292);
        StorageDead(_290);
        _615 = discriminant(_284);
        StorageDead(_288);
        StorageDead(_284);
        goto -> bb263;
    }

    bb138: {
        _301 = &(*_302);
        StorageDead(_303);
        _300 = SpotMarket::oracle_id(move _301) -> [return: bb139, unwind: bb287];
    }

    bb139: {
        StorageDead(_301);
        _299 = &_300;
        _298 = &(*_299);
        _296 = OracleMap::<'_>::get_price_data(move _297, move _298) -> [return: bb140, unwind: bb287];
    }

    bb140: {
        StorageDead(_298);
        StorageDead(_297);
        _295 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _296) -> [return: bb141, unwind: bb287];
    }

    bb141: {
        StorageDead(_296);
        _304 = discriminant(_295);
        switchInt(move _304) -> [0: bb142, 1: bb143, otherwise: bb4];
    }

    bb142: {
        StorageLive(_308);
        _308 = ((_295 as Continue).0: &state::oracle::OraclePriceData);
        _294 = _308;
        StorageDead(_308);
        StorageDead(_302);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_295);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &mut (*_17);
        _313 = <RefMut<'_, User> as DerefMut>::deref_mut(move _314) -> [return: bb145, unwind: bb287];
    }

    bb143: {
        StorageLive(_305);
        _305 = ((_295 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_307);
        _307 = _305;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _307) -> [return: bb144, unwind: bb287];
    }

    bb144: {
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_302);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_295);
        goto -> bb262;
    }

    bb145: {
        _312 = &mut (*_313);
        StorageDead(_314);
        StorageLive(_315);
        _315 = _182;
        StorageLive(_316);
        _316 = ((*_294).0: i64);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        _323 = &(*_282);
        _322 = <RefMut<'_, SpotMarket> as Deref>::deref(move _323) -> [return: bb146, unwind: bb287];
    }

    bb146: {
        _321 = (*_322);
        StorageDead(_323);
        _320 = SpotMarket::get_precision(move _321) -> [return: bb147, unwind: bb287];
    }

    bb147: {
        StorageDead(_321);
        _319 = <u64 as Cast>::cast::<u128>(move _320) -> [return: bb148, unwind: bb287];
    }

    bb148: {
        StorageDead(_320);
        _318 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _319) -> [return: bb149, unwind: bb287];
    }

    bb149: {
        StorageDead(_319);
        _324 = discriminant(_318);
        switchInt(move _324) -> [0: bb150, 1: bb151, otherwise: bb4];
    }

    bb150: {
        StorageLive(_328);
        _328 = ((_318 as Continue).0: u128);
        _317 = _328;
        StorageDead(_328);
        _311 = User::increment_total_withdraws(move _312, move _315, move _316, move _317) -> [return: bb153, unwind: bb287];
    }

    bb151: {
        StorageLive(_325);
        _325 = ((_318 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_327);
        _327 = _325;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _327) -> [return: bb152, unwind: bb287];
    }

    bb152: {
        StorageDead(_327);
        StorageDead(_325);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_312);
        StorageDead(_311);
        goto -> bb261;
    }

    bb153: {
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_312);
        _310 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _311) -> [return: bb154, unwind: bb287];
    }

    bb154: {
        StorageDead(_311);
        _329 = discriminant(_310);
        switchInt(move _329) -> [0: bb155, 1: bb156, otherwise: bb4];
    }

    bb155: {
        StorageLive(_333);
        _333 = ((_310 as Continue).0: ());
        _309 = _333;
        StorageDead(_333);
        StorageDead(_322);
        StorageDead(_318);
        StorageDead(_313);
        StorageDead(_310);
        StorageDead(_309);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = _182;
        _337 = move _338 as u128 (IntToInt);
        StorageDead(_338);
        StorageLive(_339);
        StorageLive(_340);
        _568 = const _;
        _340 = &(*_568);
        _339 = &(*_340);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = &mut (*_282);
        _343 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _344) -> [return: bb158, unwind: bb287];
    }

    bb156: {
        StorageLive(_330);
        _330 = ((_310 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_332);
        _332 = _330;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _332) -> [return: bb157, unwind: bb287];
    }

    bb157: {
        StorageDead(_332);
        StorageDead(_330);
        goto -> bb261;
    }

    bb158: {
        _342 = &mut (*_343);
        StorageDead(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &mut (*_17);
        _346 = <RefMut<'_, User> as DerefMut>::deref_mut(move _347) -> [return: bb159, unwind: bb287];
    }

    bb159: {
        _345 = &mut (*_346);
        StorageDead(_347);
        _336 = update_spot_balances_and_cumulative_deposits_with_limits(move _337, move _339, move _342, move _345) -> [return: bb160, unwind: bb287];
    }

    bb160: {
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_337);
        _335 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _336) -> [return: bb161, unwind: bb287];
    }

    bb161: {
        StorageDead(_336);
        _348 = discriminant(_335);
        switchInt(move _348) -> [0: bb162, 1: bb163, otherwise: bb4];
    }

    bb162: {
        StorageLive(_352);
        _352 = ((_335 as Continue).0: ());
        _334 = _352;
        StorageDead(_352);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_340);
        StorageDead(_335);
        StorageDead(_334);
        _167 = _182;
        StorageDead(_294);
        drop(_283) -> [return: bb165, unwind: bb293];
    }

    bb163: {
        StorageLive(_349);
        _349 = ((_335 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_351);
        _351 = _349;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _351) -> [return: bb164, unwind: bb287];
    }

    bb164: {
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_340);
        StorageDead(_335);
        StorageDead(_334);
        goto -> bb262;
    }

    bb165: {
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_182);
        StorageDead(_170);
        StorageDead(_168);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &mut (*_17);
        _357 = <RefMut<'_, User> as DerefMut>::deref_mut(move _358) -> [return: bb166, unwind: bb293];
    }

    bb166: {
        _356 = &mut (*_357);
        StorageDead(_358);
        StorageLive(_359);
        StorageLive(_360);
        _360 = &_55;
        _359 = &(*_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &_56;
        _361 = &(*_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = &mut _57;
        _363 = &mut (*_364);
        StorageLive(_365);
        _365 = math::margin::MarginRequirementType::Initial;
        StorageLive(_366);
        _366 = _2;
        StorageLive(_367);
        StorageLive(_368);
        _368 = _167;
        _367 = move _368 as u128 (IntToInt);
        StorageDead(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &mut _29;
        _371 = &mut (*_372);
        _370 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _371) -> [return: bb167, unwind: bb293];
    }

    bb167: {
        _369 = &mut (*_370);
        StorageDead(_371);
        StorageLive(_373);
        _373 = _48;
        _355 = User::meets_withdraw_margin_requirement_and_increment_fuel_bonus(move _356, move _359, move _361, move _363, move _365, move _366, move _367, move _369, move _373) -> [return: bb168, unwind: bb293];
    }

    bb168: {
        StorageDead(_373);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_366);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_356);
        _354 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _355) -> [return: bb169, unwind: bb293];
    }

    bb169: {
        StorageDead(_355);
        _374 = discriminant(_354);
        switchInt(move _374) -> [0: bb170, 1: bb171, otherwise: bb4];
    }

    bb170: {
        StorageLive(_378);
        _378 = ((_354 as Continue).0: bool);
        _353 = _378;
        StorageDead(_378);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_353);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = &(*_17);
        _383 = <RefMut<'_, User> as Deref>::deref(move _384) -> [return: bb173, unwind: bb293];
    }

    bb171: {
        StorageLive(_375);
        _375 = ((_354 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_377);
        _377 = _375;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _377) -> [return: bb172, unwind: bb293];
    }

    bb172: {
        StorageDead(_377);
        StorageDead(_375);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_353);
        goto -> bb270;
    }

    bb173: {
        _382 = &(*_383);
        StorageDead(_384);
        StorageLive(_385);
        StorageLive(_386);
        _386 = &_55;
        _385 = &(*_386);
        StorageLive(_387);
        StorageLive(_388);
        _388 = &_56;
        _387 = &(*_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = &mut _57;
        _389 = &mut (*_390);
        _381 = math::margin::validate_spot_margin_trading(move _382, move _385, move _387, move _389) -> [return: bb174, unwind: bb293];
    }

    bb174: {
        StorageDead(_389);
        StorageDead(_387);
        StorageDead(_385);
        StorageDead(_382);
        _380 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _381) -> [return: bb175, unwind: bb293];
    }

    bb175: {
        StorageDead(_381);
        _391 = discriminant(_380);
        switchInt(move _391) -> [0: bb176, 1: bb177, otherwise: bb4];
    }

    bb176: {
        StorageLive(_395);
        _395 = ((_380 as Continue).0: ());
        _379 = _395;
        StorageDead(_395);
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_383);
        StorageDead(_380);
        StorageDead(_379);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = &(*_17);
        _399 = <RefMut<'_, User> as Deref>::deref(move _400) -> [return: bb179, unwind: bb293];
    }

    bb177: {
        StorageLive(_392);
        _392 = ((_380 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_394);
        _394 = _392;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _394) -> [return: bb178, unwind: bb293];
    }

    bb178: {
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_383);
        StorageDead(_380);
        StorageDead(_379);
        goto -> bb270;
    }

    bb179: {
        _398 = &(*_399);
        StorageDead(_400);
        _397 = User::is_being_liquidated(move _398) -> [return: bb180, unwind: bb293];
    }

    bb180: {
        switchInt(move _397) -> [0: bb184, otherwise: bb181];
    }

    bb181: {
        StorageDead(_399);
        StorageDead(_398);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &mut (*_17);
        _403 = <RefMut<'_, User> as DerefMut>::deref_mut(move _404) -> [return: bb182, unwind: bb293];
    }

    bb182: {
        _402 = &mut (*_403);
        StorageDead(_404);
        _401 = User::exit_liquidation(move _402) -> [return: bb183, unwind: bb293];
    }

    bb183: {
        StorageDead(_402);
        StorageDead(_403);
        StorageDead(_401);
        _396 = const ();
        goto -> bb185;
    }

    bb184: {
        StorageDead(_399);
        StorageDead(_398);
        _396 = const ();
        goto -> bb185;
    }

    bb185: {
        StorageDead(_397);
        StorageDead(_396);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &mut (*_17);
        _407 = <RefMut<'_, User> as DerefMut>::deref_mut(move _408) -> [return: bb186, unwind: bb293];
    }

    bb186: {
        _406 = &mut (*_407);
        StorageDead(_408);
        StorageLive(_409);
        _409 = _49;
        _405 = User::update_last_active_slot(move _406, move _409) -> [return: bb187, unwind: bb293];
    }

    bb187: {
        StorageDead(_409);
        StorageDead(_406);
        StorageDead(_407);
        StorageDead(_405);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &_56;
        StorageLive(_414);
        StorageLive(_415);
        _415 = &_2;
        _414 = &(*_415);
        _412 = SpotMarketMap::<'_>::get_ref_mut(move _413, move _414) -> [return: bb188, unwind: bb293];
    }

    bb188: {
        StorageDead(_414);
        StorageDead(_413);
        _411 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _412) -> [return: bb189, unwind: bb293];
    }

    bb189: {
        StorageDead(_412);
        _416 = discriminant(_411);
        switchInt(move _416) -> [0: bb190, 1: bb191, otherwise: bb4];
    }

    bb190: {
        StorageLive(_420);
        _420 = move ((_411 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _410 = move _420;
        StorageDead(_420);
        _621 = discriminant(_411);
        StorageDead(_415);
        StorageDead(_411);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &mut _57;
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &_410;
        _430 = <RefMut<'_, SpotMarket> as Deref>::deref(move _431) -> [return: bb193, unwind: bb286];
    }

    bb191: {
        StorageLive(_417);
        _417 = ((_411 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_419);
        _419 = _417;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _419) -> [return: bb192, unwind: bb303];
    }

    bb192: {
        StorageDead(_419);
        StorageDead(_417);
        _619 = discriminant(_411);
        StorageDead(_415);
        StorageDead(_411);
        goto -> bb260;
    }

    bb193: {
        _429 = &(*_430);
        StorageDead(_431);
        _428 = SpotMarket::oracle_id(move _429) -> [return: bb194, unwind: bb286];
    }

    bb194: {
        StorageDead(_429);
        _427 = &_428;
        _426 = &(*_427);
        _424 = OracleMap::<'_>::get_price_data(move _425, move _426) -> [return: bb195, unwind: bb286];
    }

    bb195: {
        StorageDead(_426);
        StorageDead(_425);
        _423 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _424) -> [return: bb196, unwind: bb286];
    }

    bb196: {
        StorageDead(_424);
        _432 = discriminant(_423);
        switchInt(move _432) -> [0: bb197, 1: bb198, otherwise: bb4];
    }

    bb197: {
        StorageLive(_436);
        _436 = ((_423 as Continue).0: &state::oracle::OraclePriceData);
        _422 = _436;
        StorageDead(_436);
        _421 = ((*_422).0: i64);
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_423);
        StorageDead(_422);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        _441 = &(*_17);
        _440 = <RefMut<'_, User> as Deref>::deref(move _441) -> [return: bb200, unwind: bb286];
    }

    bb198: {
        StorageLive(_433);
        _433 = ((_423 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_435);
        _435 = _433;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _435) -> [return: bb199, unwind: bb286];
    }

    bb199: {
        StorageDead(_435);
        StorageDead(_433);
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_423);
        StorageDead(_422);
        goto -> bb259;
    }

    bb200: {
        _439 = &(*_440);
        StorageDead(_441);
        StorageLive(_442);
        _442 = _2;
        _438 = User::get_spot_position(move _439, move _442) -> [return: bb201, unwind: bb286];
    }

    bb201: {
        StorageDead(_442);
        StorageDead(_439);
        StorageLive(_443);
        _443 = {closure@programs/drift/src/instructions/user.rs:803:24: 803:29};
        _437 = std::result::Result::<&SpotPosition, error::ErrorCode>::map_or::<bool, {closure@programs/drift/src/instructions/user.rs:803:24: 803:29}>(move _438, const false, move _443) -> [return: bb202, unwind: bb286];
    }

    bb202: {
        StorageDead(_443);
        StorageDead(_438);
        StorageDead(_440);
        StorageLive(_444);
        StorageLive(_445);
        _445 = _437;
        switchInt(move _445) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        _444 = DepositExplanation::Borrow;
        goto -> bb205;
    }

    bb204: {
        _444 = DepositExplanation::None;
        goto -> bb205;
    }

    bb205: {
        StorageDead(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = &_410;
        _448 = <RefMut<'_, SpotMarket> as Deref>::deref(move _449) -> [return: bb206, unwind: bb286];
    }

    bb206: {
        StorageDead(_449);
        _447 = ((*_448).30: u64);
        StorageDead(_448);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _453 = _447;
        _452 = core::num::<impl u64>::checked_add(move _453, const 1_u64) -> [return: bb207, unwind: bb286];
    }

    bb207: {
        StorageDead(_453);
        StorageLive(_454);
        _454 = Option::<u64>::Some(const 1_u64);
        _451 = Option::<u64>::or(move _452, move _454) -> [return: bb208, unwind: bb286];
    }

    bb208: {
        StorageDead(_454);
        StorageDead(_452);
        _450 = Option::<u64>::unwrap(move _451) -> [return: bb209, unwind: bb286];
    }

    bb209: {
        StorageDead(_451);
        StorageLive(_455);
        StorageLive(_456);
        _456 = &mut _410;
        _455 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _456) -> [return: bb210, unwind: bb286];
    }

    bb210: {
        StorageDead(_456);
        ((*_455).30: u64) = move _450;
        StorageDead(_450);
        StorageDead(_455);
        _446 = _447;
        StorageDead(_447);
        StorageLive(_457);
        StorageLive(_458);
        _458 = _48;
        StorageLive(_459);
        _459 = _446;
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = &(*_17);
        _461 = <RefMut<'_, User> as Deref>::deref(move _462) -> [return: bb211, unwind: bb286];
    }

    bb211: {
        StorageDead(_462);
        _460 = ((*_461).0: anchor_lang::prelude::Pubkey);
        StorageLive(_463);
        _463 = _15;
        StorageLive(_464);
        _464 = DepositDirection::Withdraw;
        StorageLive(_465);
        _465 = _421;
        StorageLive(_466);
        _466 = _167;
        StorageLive(_467);
        _467 = _2;
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _470 = &_410;
        _469 = <RefMut<'_, SpotMarket> as Deref>::deref(move _470) -> [return: bb212, unwind: bb286];
    }

    bb212: {
        StorageDead(_470);
        _468 = ((*_469).11: u128);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _473 = &_410;
        _472 = <RefMut<'_, SpotMarket> as Deref>::deref(move _473) -> [return: bb213, unwind: bb286];
    }

    bb213: {
        StorageDead(_473);
        _471 = ((*_472).12: u128);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        _476 = &_410;
        _475 = <RefMut<'_, SpotMarket> as Deref>::deref(move _476) -> [return: bb214, unwind: bb286];
    }

    bb214: {
        StorageDead(_476);
        _474 = ((*_475).13: u128);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _479 = &_410;
        _478 = <RefMut<'_, SpotMarket> as Deref>::deref(move _479) -> [return: bb215, unwind: bb286];
    }

    bb215: {
        StorageDead(_479);
        _477 = ((*_478).14: u128);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &(*_17);
        _481 = <RefMut<'_, User> as Deref>::deref(move _482) -> [return: bb216, unwind: bb286];
    }

    bb216: {
        StorageDead(_482);
        _480 = ((*_481).7: u64);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        _485 = &(*_17);
        _484 = <RefMut<'_, User> as Deref>::deref(move _485) -> [return: bb217, unwind: bb286];
    }

    bb217: {
        StorageDead(_485);
        _483 = ((*_484).8: u64);
        StorageLive(_486);
        _486 = _444;
        StorageLive(_487);
        _487 = Option::<anchor_lang::prelude::Pubkey>::None;
        _457 = DepositRecord { ts: move _458, user_authority: move _460, user: move _463, direction: move _464, deposit_record_id: move _459, amount: move _466, market_index: move _467, oracle_price: move _465, market_deposit_balance: move _468, market_withdraw_balance: move _471, market_cumulative_deposit_interest: move _474, market_cumulative_borrow_interest: move _477, total_deposits_after: move _480, total_withdraws_after: move _483, explanation: move _486, transfer_user: move _487 };
        StorageDead(_487);
        StorageDead(_486);
        StorageDead(_483);
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_474);
        StorageDead(_471);
        StorageDead(_468);
        StorageDead(_467);
        StorageDead(_466);
        StorageDead(_465);
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_458);
        StorageDead(_484);
        StorageDead(_481);
        StorageDead(_478);
        StorageDead(_475);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_461);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        _500 = &_457;
        _499 = &(*_500);
        _498 = <DepositRecord as anchor_lang::Event>::data(move _499) -> [return: bb218, unwind: bb286];
    }

    bb218: {
        StorageDead(_499);
        _497 = &_498;
        _496 = &(*_497);
        _495 = <Vec<u8> as Deref>::deref(move _496) -> [return: bb219, unwind: bb285];
    }

    bb219: {
        _494 = &(*_495);
        StorageDead(_496);
        _493 = [move _494];
        StorageDead(_494);
        _492 = &_493;
        _491 = &(*_492);
        _490 = move _491 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_491);
        _489 = solana_program::log::sol_log_data(move _490) -> [return: bb220, unwind: bb285];
    }

    bb220: {
        StorageDead(_490);
        drop(_498) -> [return: bb221, unwind: bb286];
    }

    bb221: {
        StorageDead(_500);
        StorageDead(_498);
        StorageDead(_497);
        StorageDead(_495);
        StorageDead(_493);
        StorageDead(_492);
        StorageDead(_489);
        _488 = const ();
        StorageDead(_488);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _580 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _505 = &((*_580).7: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _504 = &(*_505);
        StorageLive(_506);
        StorageLive(_507);
        _581 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _507 = &((*_581).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _582 = deref_copy (*_507);
        _649 = (((_582.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _506 = &(*_649);
        StorageLive(_508);
        StorageLive(_509);
        _583 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _509 = &((*_583).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _584 = deref_copy (*_509);
        _650 = (((_584.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _508 = &(*_650);
        StorageLive(_510);
        StorageLive(_511);
        _585 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _511 = &((*_585).5: anchor_lang::prelude::AccountInfo<'_>);
        _510 = &(*_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _586 = deref_copy (*_50);
        _651 = (((_586.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _514 = &(*_651);
        _513 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _514) -> [return: bb222, unwind: bb286];
    }

    bb222: {
        StorageDead(_514);
        _512 = ((*_513).15: u8);
        StorageLive(_515);
        _515 = _167;
        StorageLive(_516);
        StorageLive(_517);
        _517 = &_79;
        _516 = &(*_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        _522 = &_410;
        _521 = <RefMut<'_, SpotMarket> as Deref>::deref(move _522) -> [return: bb223, unwind: bb286];
    }

    bb223: {
        _520 = &(*_521);
        StorageDead(_522);
        _519 = SpotMarket::has_transfer_hook(move _520) -> [return: bb224, unwind: bb286];
    }

    bb224: {
        switchInt(move _519) -> [0: bb226, otherwise: bb225];
    }

    bb225: {
        StorageDead(_521);
        StorageDead(_520);
        StorageLive(_523);
        _523 = &mut (*_51);
        _518 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _523);
        StorageDead(_523);
        goto -> bb227;
    }

    bb226: {
        StorageDead(_521);
        StorageDead(_520);
        _518 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb227;
    }

    bb227: {
        StorageDead(_519);
        _503 = send_from_program_vault(move _504, move _506, move _508, move _510, move _512, move _515, move _516, move _518) -> [return: bb228, unwind: bb286];
    }

    bb228: {
        StorageDead(_518);
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_508);
        StorageDead(_506);
        StorageDead(_504);
        _502 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _503) -> [return: bb229, unwind: bb286];
    }

    bb229: {
        StorageDead(_503);
        _524 = discriminant(_502);
        switchInt(move _524) -> [0: bb230, 1: bb231, otherwise: bb4];
    }

    bb230: {
        StorageLive(_528);
        _528 = ((_502 as Continue).0: ());
        _501 = _528;
        StorageDead(_528);
        _623 = discriminant(_502);
        StorageDead(_517);
        StorageDead(_513);
        StorageDead(_511);
        StorageDead(_509);
        StorageDead(_507);
        StorageDead(_505);
        StorageDead(_502);
        StorageDead(_501);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        _587 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _588 = deref_copy ((*_587).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _652 = (((_588.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _532 = &mut (*_652);
        _531 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _532) -> [return: bb233, unwind: bb286];
    }

    bb231: {
        StorageLive(_525);
        _525 = move ((_502 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_527);
        _527 = move _525;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _527) -> [return: bb232, unwind: bb302];
    }

    bb232: {
        StorageDead(_527);
        StorageDead(_525);
        _629 = discriminant(_502);
        StorageDead(_517);
        StorageDead(_513);
        StorageDead(_511);
        StorageDead(_509);
        StorageDead(_507);
        StorageDead(_505);
        StorageDead(_502);
        StorageDead(_501);
        goto -> bb258;
    }

    bb233: {
        StorageDead(_532);
        _530 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _531) -> [return: bb234, unwind: bb286];
    }

    bb234: {
        StorageDead(_531);
        _533 = discriminant(_530);
        switchInt(move _533) -> [0: bb235, 1: bb236, otherwise: bb4];
    }

    bb235: {
        StorageLive(_537);
        _537 = ((_530 as Continue).0: ());
        _529 = _537;
        StorageDead(_537);
        _625 = discriminant(_530);
        StorageDead(_530);
        StorageDead(_529);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        _544 = &_410;
        _543 = &(*_544);
        _542 = <RefMut<'_, SpotMarket> as Deref>::deref(move _543) -> [return: bb238, unwind: bb286];
    }

    bb236: {
        StorageLive(_534);
        _534 = move ((_530 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_536);
        _536 = move _534;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _536) -> [return: bb237, unwind: bb301];
    }

    bb237: {
        StorageDead(_536);
        StorageDead(_534);
        _627 = discriminant(_530);
        StorageDead(_530);
        StorageDead(_529);
        goto -> bb258;
    }

    bb238: {
        _541 = &(*_542);
        StorageDead(_543);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        _589 = deref_copy (_1.1: &mut instructions::user::Withdraw<'_>);
        _590 = deref_copy ((*_589).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _653 = (((_590.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _549 = &(*_653);
        _548 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _549) -> [return: bb239, unwind: bb286];
    }

    bb239: {
        _547 = &(*_548);
        _546 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _547) -> [return: bb240, unwind: bb286];
    }

    bb240: {
        StorageDead(_549);
        StorageDead(_547);
        _545 = ((*_546).2: u64);
        _540 = validate_spot_market_vault_amount(move _541, move _545) -> [return: bb241, unwind: bb286];
    }

    bb241: {
        StorageDead(_545);
        StorageDead(_541);
        _539 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _540) -> [return: bb242, unwind: bb286];
    }

    bb242: {
        StorageDead(_540);
        _550 = discriminant(_539);
        switchInt(move _550) -> [0: bb243, 1: bb244, otherwise: bb4];
    }

    bb243: {
        StorageLive(_554);
        _554 = ((_539 as Continue).0: i64);
        _538 = _554;
        StorageDead(_554);
        StorageDead(_548);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_542);
        StorageDead(_539);
        StorageDead(_538);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        _560 = &_410;
        _559 = <RefMut<'_, SpotMarket> as Deref>::deref(move _560) -> [return: bb246, unwind: bb286];
    }

    bb244: {
        StorageLive(_551);
        _551 = ((_539 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_553);
        _553 = _551;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _553) -> [return: bb245, unwind: bb286];
    }

    bb245: {
        StorageDead(_553);
        StorageDead(_551);
        StorageDead(_548);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_542);
        StorageDead(_539);
        StorageDead(_538);
        goto -> bb258;
    }

    bb246: {
        _558 = &(*_559);
        StorageDead(_560);
        StorageLive(_561);
        _561 = _437;
        _557 = SpotMarket::validate_max_token_deposits_and_borrows(move _558, move _561) -> [return: bb247, unwind: bb286];
    }

    bb247: {
        StorageDead(_561);
        StorageDead(_558);
        _556 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _557) -> [return: bb248, unwind: bb286];
    }

    bb248: {
        StorageDead(_557);
        _562 = discriminant(_556);
        switchInt(move _562) -> [0: bb249, 1: bb250, otherwise: bb4];
    }

    bb249: {
        StorageLive(_566);
        _566 = ((_556 as Continue).0: ());
        _555 = _566;
        StorageDead(_566);
        StorageDead(_559);
        StorageDead(_556);
        StorageDead(_555);
        StorageLive(_567);
        _567 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _567);
        StorageDead(_567);
        StorageDead(_457);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_437);
        StorageDead(_421);
        drop(_410) -> [return: bb252, unwind: bb293];
    }

    bb250: {
        StorageLive(_563);
        _563 = ((_556 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_565);
        _565 = _563;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _565) -> [return: bb251, unwind: bb286];
    }

    bb251: {
        StorageDead(_565);
        StorageDead(_563);
        StorageDead(_559);
        StorageDead(_556);
        StorageDead(_555);
        goto -> bb258;
    }

    bb252: {
        StorageDead(_410);
        StorageDead(_167);
        StorageDead(_122);
        StorageDead(_79);
        drop(_57) -> [return: bb253, unwind: bb294];
    }

    bb253: {
        StorageDead(_57);
        drop(_56) -> [return: bb254, unwind: bb295];
    }

    bb254: {
        StorageDead(_56);
        drop(_55) -> [return: bb255, unwind: bb298];
    }

    bb255: {
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_40);
        drop(_29) -> [return: bb256, unwind: bb299];
    }

    bb256: {
        StorageDead(_29);
        drop(_18) -> [return: bb257, unwind: bb300];
    }

    bb257: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        goto -> bb284;
    }

    bb258: {
        StorageDead(_457);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_437);
        goto -> bb259;
    }

    bb259: {
        StorageDead(_421);
        drop(_410) -> [return: bb260, unwind: bb293];
    }

    bb260: {
        StorageDead(_410);
        goto -> bb270;
    }

    bb261: {
        StorageDead(_322);
        StorageDead(_318);
        StorageDead(_313);
        StorageDead(_310);
        StorageDead(_309);
        goto -> bb262;
    }

    bb262: {
        StorageDead(_294);
        drop(_283) -> [return: bb263, unwind: bb293];
    }

    bb263: {
        StorageDead(_283);
        StorageDead(_282);
        goto -> bb268;
    }

    bb264: {
        StorageDead(_266);
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_253);
        drop(_242) -> [return: bb265, unwind: bb293];
    }

    bb265: {
        StorageDead(_242);
        StorageDead(_241);
        goto -> bb266;
    }

    bb266: {
        StorageDead(_223);
        goto -> bb267;
    }

    bb267: {
        StorageDead(_183);
        goto -> bb268;
    }

    bb268: {
        StorageDead(_182);
        goto -> bb269;
    }

    bb269: {
        StorageDead(_170);
        StorageDead(_168);
        goto -> bb270;
    }

    bb270: {
        StorageDead(_167);
        goto -> bb273;
    }

    bb271: {
        StorageDead(_135);
        drop(_124) -> [return: bb272, unwind: bb293];
    }

    bb272: {
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb273;
    }

    bb273: {
        StorageDead(_122);
        goto -> bb274;
    }

    bb274: {
        StorageDead(_79);
        drop(_57) -> [return: bb275, unwind: bb294];
    }

    bb275: {
        StorageDead(_57);
        drop(_56) -> [return: bb276, unwind: bb295];
    }

    bb276: {
        StorageDead(_56);
        drop(_55) -> [return: bb277, unwind: bb298];
    }

    bb277: {
        StorageDead(_55);
        goto -> bb280;
    }

    bb278: {
        StorageDead(_67);
        StorageDead(_66);
        drop(_64) -> [return: bb279, unwind: bb298];
    }

    bb279: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb280;
    }

    bb280: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb281;
    }

    bb281: {
        StorageDead(_40);
        drop(_29) -> [return: bb282, unwind: bb299];
    }

    bb282: {
        StorageDead(_29);
        drop(_18) -> [return: bb283, unwind: bb300];
    }

    bb283: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        goto -> bb284;
    }

    bb284: {
        return;
    }

    bb285 (cleanup): {
        drop(_498) -> [return: bb286, unwind terminate(cleanup)];
    }

    bb286 (cleanup): {
        drop(_410) -> [return: bb293, unwind terminate(cleanup)];
    }

    bb287 (cleanup): {
        drop(_283) -> [return: bb293, unwind terminate(cleanup)];
    }

    bb288 (cleanup): {
        drop(_242) -> [return: bb293, unwind terminate(cleanup)];
    }

    bb289 (cleanup): {
        drop(_203) -> [return: bb293, unwind terminate(cleanup)];
    }

    bb290 (cleanup): {
        drop(_124) -> [return: bb293, unwind terminate(cleanup)];
    }

    bb291 (cleanup): {
        drop(_102) -> [return: bb293, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        drop(_64) -> [return: bb293, unwind terminate(cleanup)];
    }

    bb293 (cleanup): {
        drop(_57) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb294 (cleanup): {
        drop(_56) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb295 (cleanup): {
        drop(_55) -> [return: bb298, unwind terminate(cleanup)];
    }

    bb296 (cleanup): {
        drop(_67) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb297 (cleanup): {
        drop(_64) -> [return: bb298, unwind terminate(cleanup)];
    }

    bb298 (cleanup): {
        drop(_29) -> [return: bb299, unwind terminate(cleanup)];
    }

    bb299 (cleanup): {
        drop(_18) -> [return: bb300, unwind terminate(cleanup)];
    }

    bb300 (cleanup): {
        resume;
    }

    bb301 (cleanup): {
        _635 = discriminant(_530);
        goto -> bb286;
    }

    bb302 (cleanup): {
        _636 = discriminant(_502);
        goto -> bb286;
    }

    bb303 (cleanup): {
        _637 = discriminant(_411);
        goto -> bb293;
    }

    bb304 (cleanup): {
        _638 = discriminant(_284);
        goto -> bb293;
    }

    bb305 (cleanup): {
        _639 = discriminant(_243);
        goto -> bb293;
    }

    bb306 (cleanup): {
        _640 = discriminant(_125);
        goto -> bb293;
    }

    bb307 (cleanup): {
        _642 = discriminant(_59);
        goto -> bb296;
    }

    bb308 (cleanup): {
        _643 = discriminant(_41);
        goto -> bb298;
    }

    bb309 (cleanup): {
        _644 = discriminant(_30);
        goto -> bb299;
    }

    bb310 (cleanup): {
        _645 = discriminant(_19);
        goto -> bb300;
    }

    bb311 (cleanup): {
        _646 = discriminant(_6);
        goto -> bb300;
    }
}
