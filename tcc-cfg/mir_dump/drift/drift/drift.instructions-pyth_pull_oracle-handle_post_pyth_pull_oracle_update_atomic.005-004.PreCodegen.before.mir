// MIR for `pyth_pull_oracle::handle_post_pyth_pull_oracle_update_atomic` before PreCodegen

fn pyth_pull_oracle::handle_post_pyth_pull_oracle_update_atomic(_1: anchor_lang::context::Context<'_, '_, '_, '_, pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>>, _2: [u8; 32], _3: Vec<u8>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug feed_id => _2;
    debug params => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: anchor_lang::prelude::AccountInfo<'_>;
    let mut _5: &anchor_lang::prelude::Program<'_, pyth_solana_receiver_sdk::program::PythSolanaReceiver>;
    let mut _7: anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: &anchor_lang::prelude::Signer<'_>;
    let mut _9: anchor_lang::prelude::AccountInfo<'_>;
    let mut _10: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _11: anchor_lang::prelude::AccountInfo<'_>;
    let mut _12: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _13: anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let _16: [&[u8]; 3];
    let mut _17: &[u8];
    let _18: &[u8];
    let mut _19: &[u8; 32];
    let mut _20: &[u8];
    let mut _21: &[u8; 1];
    let _22: &[u8; 1];
    let _23: [u8; 1];
    let mut _24: u8;
    let _26: [&[&[u8]]; 1];
    let mut _27: &[&[u8]];
    let _28: &[&[u8]];
    let mut _29: &[&[u8]; 3];
    let mut _30: std::ops::RangeFull;
    let mut _32: anchor_lang::prelude::AccountInfo<'_>;
    let mut _33: pyth_solana_receiver_sdk::cpi::accounts::PostUpdateAtomic<'_>;
    let mut _34: &[&[&[u8]]];
    let mut _35: &[&[&[u8]]; 1];
    let mut _37: std::result::Result<pyth_solana_receiver_sdk::PostUpdateAtomicParams, std::io::Error>;
    let mut _38: &mut &[u8];
    let mut _39: &mut &[u8];
    let mut _40: &[u8];
    let _41: &[u8];
    let mut _42: &std::vec::Vec<u8>;
    let mut _43: std::ops::RangeFull;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, i64>;
    let mut _46: std::result::Result<i64, anchor_lang::error::Error>;
    let mut _47: &anchor_lang::prelude::AccountInfo<'_>;
    let _48: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, i64>;
    let mut _56: std::result::Result<i64, anchor_lang::error::Error>;
    let mut _57: &pythnet_sdk::wire::PrefixedVec<u16, u8>;
    let _58: &pythnet_sdk::wire::PrefixedVec<u16, u8>;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _64: ();
    let mut _65: bool;
    let mut _66: i64;
    let mut _67: i64;
    let _68: ();
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _70: std::result::Result<(), anchor_lang::error::Error>;
    let mut _71: anchor_lang::context::CpiContext<'_, '_, '_, '_, pyth_solana_receiver_sdk::cpi::accounts::PostUpdateAtomic<'_>>;
    let mut _72: pyth_solana_receiver_sdk::PostUpdateAtomicParams;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _78: ();
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _81: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _82: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, pyth_solana_receiver_sdk::price_update::PriceUpdateV2>;
    let mut _90: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceUpdateV2, anchor_lang::error::Error>;
    let mut _91: &mut &[u8];
    let mut _92: &mut &[u8];
    let mut _93: &[u8];
    let _94: &[u8];
    let mut _95: &[u8];
    let _96: &&mut [u8];
    let mut _97: &std::cell::Ref<'_, &mut [u8]>;
    let mut _98: std::ops::RangeFull;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _104: ();
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _106: std::result::Result<(), error::ErrorCode>;
    let mut _107: bool;
    let mut _108: &[u8; 32];
    let mut _109: &[u8; 32];
    let mut _110: ();
    let _112: ();
    let mut _113: &str;
    let _114: &str;
    let mut _115: &std::string::String;
    let _116: &std::string::String;
    let _117: std::string::String;
    let mut _119: std::fmt::Arguments<'_>;
    let mut _120: &[&str];
    let mut _121: &[&str; 2];
    let _122: &[&str; 2];
    let _123: [&str; 2];
    let mut _124: &[core::fmt::rt::Argument<'_>];
    let mut _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: &[core::fmt::rt::Argument<'_>; 1];
    let _127: [core::fmt::rt::Argument<'_>; 1];
    let mut _128: core::fmt::rt::Argument<'_>;
    let mut _129: &error::ErrorCode;
    let _130: &error::ErrorCode;
    let mut _131: error::ErrorCode;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: &std::string::String;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[&str; 2];
    let _147: &[&str; 2];
    let _148: [&str; 2];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let mut _150: &[core::fmt::rt::Argument<'_>; 2];
    let _151: &[core::fmt::rt::Argument<'_>; 2];
    let _152: [core::fmt::rt::Argument<'_>; 2];
    let mut _153: core::fmt::rt::Argument<'_>;
    let mut _154: &i64;
    let _155: &i64;
    let mut _156: core::fmt::rt::Argument<'_>;
    let mut _157: &i64;
    let _158: &i64;
    let _159: ();
    let mut _160: &str;
    let _161: &str;
    let mut _162: &std::string::String;
    let _163: &std::string::String;
    let _164: std::string::String;
    let mut _166: std::fmt::Arguments<'_>;
    let mut _167: &[&str];
    let mut _168: &[&str; 2];
    let _169: &[&str; 2];
    let _170: [&str; 2];
    let mut _171: &[core::fmt::rt::Argument<'_>];
    let mut _172: &[core::fmt::rt::Argument<'_>; 2];
    let _173: &[core::fmt::rt::Argument<'_>; 2];
    let _174: [core::fmt::rt::Argument<'_>; 2];
    let mut _175: core::fmt::rt::Argument<'_>;
    let mut _176: &i64;
    let _177: &i64;
    let mut _178: core::fmt::rt::Argument<'_>;
    let mut _179: &i64;
    let _180: &i64;
    let mut _181: ();
    let mut _185: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>;
    let mut _186: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>;
    let mut _187: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>;
    let mut _188: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>;
    let mut _189: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>;
    let mut _190: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>;
    let mut _191: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>;
    let mut _192: &mut [u8];
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    scope 1 {
        debug cpi_program => _4;
        let _6: pyth_solana_receiver_sdk::cpi::accounts::PostUpdateAtomic<'_>;
        scope 2 {
            debug cpi_accounts => _6;
            let _15: &[&[u8]; 3];
            scope 3 {
                debug seeds => _15;
                let _25: &[&[&[u8]]; 1];
                scope 4 {
                    debug signer_seeds => _25;
                    let _31: anchor_lang::context::CpiContext<'_, '_, '_, '_, pyth_solana_receiver_sdk::cpi::accounts::PostUpdateAtomic<'_>>;
                    scope 5 {
                        debug cpi_context => _31;
                        let _36: pyth_solana_receiver_sdk::PostUpdateAtomicParams;
                        scope 6 {
                            debug params => _36;
                            let _44: i64;
                            let _50: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _53: i64;
                            scope 7 {
                                debug current_timestamp => _44;
                                let _54: i64;
                                let _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _63: i64;
                                scope 12 {
                                    debug next_timestamp => _54;
                                    let _74: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _77: ();
                                    let _79: std::cell::Ref<'_, &mut [u8]>;
                                    let _84: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                    let _87: std::cell::Ref<'_, &mut [u8]>;
                                    let _143: std::string::String;
                                    let _165: std::string::String;
                                    let mut _182: &[&str; 2];
                                    let mut _184: &[&str; 2];
                                    scope 17 {
                                        debug residual => _74;
                                        scope 18 {
                                        }
                                    }
                                    scope 19 {
                                        debug val => _77;
                                        scope 20 {
                                        }
                                    }
                                    scope 21 {
                                        debug price_feed_account_data => _79;
                                        let _88: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
                                        let _100: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _103: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
                                        scope 26 {
                                            debug price_feed_account => _88;
                                            let _111: error::ErrorCode;
                                            let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _136: ();
                                            scope 31 {
                                                debug error_code => _111;
                                                let _118: std::string::String;
                                                let mut _183: &[&str; 2];
                                                scope 32 {
                                                    debug res => _118;
                                                }
                                            }
                                            scope 33 {
                                                debug residual => _133;
                                                scope 34 {
                                                }
                                            }
                                            scope 35 {
                                                debug val => _136;
                                                scope 36 {
                                                }
                                            }
                                        }
                                        scope 27 {
                                            debug residual => _100;
                                            scope 28 {
                                            }
                                        }
                                        scope 29 {
                                            debug val => _103;
                                            scope 30 {
                                            }
                                        }
                                    }
                                    scope 22 {
                                        debug residual => _84;
                                        scope 23 {
                                        }
                                    }
                                    scope 24 {
                                        debug val => _87;
                                        scope 25 {
                                        }
                                    }
                                    scope 37 {
                                        debug res => _143;
                                    }
                                    scope 38 {
                                        debug res => _165;
                                    }
                                }
                                scope 13 {
                                    debug residual => _60;
                                    scope 14 {
                                    }
                                }
                                scope 15 {
                                    debug val => _63;
                                    scope 16 {
                                    }
                                }
                            }
                            scope 8 {
                                debug residual => _50;
                                scope 9 {
                                }
                            }
                            scope 10 {
                                debug val => _53;
                                scope 11 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _196 = const false;
        _195 = const false;
        _194 = const false;
        _193 = const false;
        StorageLive(_4);
        StorageLive(_5);
        _185 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>);
        _5 = &((*_185).1: anchor_lang::prelude::Program<'_, pyth_solana_receiver_sdk::program::PythSolanaReceiver>);
        _4 = <anchor_lang::prelude::Program<'_, PythSolanaReceiver> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _5) -> [return: bb1, unwind: bb89];
    }

    bb1: {
        _196 = const true;
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _186 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>);
        _8 = &((*_186).0: anchor_lang::prelude::Signer<'_>);
        _7 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _8) -> [return: bb2, unwind: bb107];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _187 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>);
        _10 = &((*_187).2: anchor_lang::prelude::AccountInfo<'_>);
        _9 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _10) -> [return: bb3, unwind: bb88];
    }

    bb3: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _188 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>);
        _12 = &((*_188).3: anchor_lang::prelude::AccountInfo<'_>);
        _11 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _12) -> [return: bb4, unwind: bb87];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _189 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>);
        _14 = &((*_189).3: anchor_lang::prelude::AccountInfo<'_>);
        _13 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _14) -> [return: bb5, unwind: bb86];
    }

    bb5: {
        StorageDead(_14);
        _195 = const true;
        _6 = PostUpdateAtomic::<'_> { payer: move _7, guardian_set: move _9, price_update_account: move _11, write_authority: move _13 };
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_2;
        _18 = <[u8; 32] as AsRef<[u8]>>::as_ref(move _19) -> [return: bb6, unwind: bb105];
    }

    bb6: {
        _17 = &(*_18);
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = ((_1.3: instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomicBumps).0: u8);
        _23 = [move _24];
        StorageDead(_24);
        _22 = &_23;
        _21 = &(*_22);
        _20 = move _21 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_21);
        _16 = [const _, move _17, move _20];
        StorageDead(_20);
        StorageDead(_17);
        _15 = &_16;
        StorageDead(_22);
        StorageDead(_18);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_15);
        StorageLive(_30);
        _30 = RangeFull;
        _28 = <[&[u8]; 3] as Index<RangeFull>>::index(move _29, move _30) -> [return: bb7, unwind: bb105];
    }

    bb7: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = &(*_28);
        _26 = [move _27];
        StorageDead(_27);
        _25 = &_26;
        StorageLive(_31);
        StorageLive(_32);
        _196 = const false;
        _32 = move _4;
        StorageLive(_33);
        _195 = const false;
        _33 = move _6;
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(*_25);
        _34 = move _35 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_35);
        _31 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, PostUpdateAtomic<'_>>::new_with_signer(move _32, move _33, move _34) -> [return: bb8, unwind: bb105];
    }

    bb8: {
        _194 = const true;
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_3;
        StorageLive(_43);
        _43 = RangeFull;
        _41 = <Vec<u8> as Index<RangeFull>>::index(move _42, move _43) -> [return: bb9, unwind: bb103];
    }

    bb9: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = &(*_41);
        _39 = &mut _40;
        _38 = &mut (*_39);
        _37 = <PostUpdateAtomicParams as BorshDeserialize>::deserialize(move _38) -> [return: bb10, unwind: bb103];
    }

    bb10: {
        StorageDead(_38);
        _36 = std::result::Result::<PostUpdateAtomicParams, std::io::Error>::unwrap(move _37) -> [return: bb11, unwind: bb103];
    }

    bb11: {
        _193 = const true;
        StorageDead(_37);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _190 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>);
        _48 = &((*_190).3: anchor_lang::prelude::AccountInfo<'_>);
        _47 = &(*_48);
        _46 = get_timestamp_from_price_feed_account(move _47) -> [return: bb12, unwind: bb101];
    }

    bb12: {
        StorageDead(_47);
        _45 = <std::result::Result<i64, anchor_lang::error::Error> as Try>::branch(move _46) -> [return: bb13, unwind: bb101];
    }

    bb13: {
        StorageDead(_46);
        _49 = discriminant(_45);
        switchInt(move _49) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        StorageLive(_53);
        _53 = ((_45 as Continue).0: i64);
        _44 = _53;
        StorageDead(_53);
        _197 = discriminant(_45);
        StorageDead(_48);
        StorageDead(_45);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &((_36.1: pythnet_sdk::wire::v1::MerklePriceUpdate).0: pythnet_sdk::wire::PrefixedVec<u16, u8>);
        _57 = &(*_58);
        _56 = get_timestamp_from_price_update_message(move _57) -> [return: bb18, unwind: bb101];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        StorageLive(_50);
        _50 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_52);
        _52 = move _50;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _52) -> [return: bb17, unwind: bb99];
    }

    bb17: {
        StorageDead(_52);
        StorageDead(_50);
        _215 = discriminant(_45);
        StorageDead(_48);
        StorageDead(_45);
        goto -> bb78;
    }

    bb18: {
        StorageDead(_57);
        _55 = <std::result::Result<i64, anchor_lang::error::Error> as Try>::branch(move _56) -> [return: bb19, unwind: bb101];
    }

    bb19: {
        StorageDead(_56);
        _59 = discriminant(_55);
        switchInt(move _59) -> [0: bb20, 1: bb21, otherwise: bb15];
    }

    bb20: {
        StorageLive(_63);
        _63 = ((_55 as Continue).0: i64);
        _54 = _63;
        StorageDead(_63);
        _199 = discriminant(_55);
        StorageDead(_58);
        StorageDead(_55);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _54;
        StorageLive(_67);
        _67 = _44;
        _65 = Gt(move _66, move _67);
        switchInt(move _65) -> [0: bb63, otherwise: bb23];
    }

    bb21: {
        StorageLive(_60);
        _60 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_62);
        _62 = move _60;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _62) -> [return: bb22, unwind: bb98];
    }

    bb22: {
        StorageDead(_62);
        StorageDead(_60);
        _213 = discriminant(_55);
        StorageDead(_58);
        StorageDead(_55);
        goto -> bb77;
    }

    bb23: {
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _194 = const false;
        _71 = move _31;
        StorageLive(_72);
        _193 = const false;
        _72 = move _36;
        _70 = post_update_atomic(move _71, move _72) -> [return: bb24, unwind: bb101];
    }

    bb24: {
        StorageDead(_72);
        StorageDead(_71);
        _69 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _70) -> [return: bb25, unwind: bb101];
    }

    bb25: {
        StorageDead(_70);
        _73 = discriminant(_69);
        switchInt(move _73) -> [0: bb26, 1: bb27, otherwise: bb15];
    }

    bb26: {
        StorageLive(_77);
        _77 = ((_69 as Continue).0: ());
        _68 = _77;
        StorageDead(_77);
        _201 = discriminant(_69);
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _191 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullOracleUpdateAtomic<'_>);
        _82 = &((*_191).3: anchor_lang::prelude::AccountInfo<'_>);
        _81 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _82) -> [return: bb29, unwind: bb101];
    }

    bb27: {
        StorageLive(_74);
        _74 = move ((_69 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_76);
        _76 = move _74;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _76) -> [return: bb28, unwind: bb97];
    }

    bb28: {
        StorageDead(_76);
        StorageDead(_74);
        _211 = discriminant(_69);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb76;
    }

    bb29: {
        StorageDead(_82);
        _80 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _81) -> [return: bb30, unwind: bb101];
    }

    bb30: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb31, 1: bb32, otherwise: bb15];
    }

    bb31: {
        StorageLive(_87);
        _87 = move ((_80 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _79 = move _87;
        StorageDead(_87);
        _203 = discriminant(_80);
        StorageDead(_80);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_79;
        _96 = <Ref<'_, &mut [u8]> as Deref>::deref(move _97) -> [return: bb34, unwind: bb85];
    }

    bb32: {
        StorageLive(_84);
        _84 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_86);
        _86 = move _84;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _86) -> [return: bb33, unwind: bb96];
    }

    bb33: {
        StorageDead(_86);
        StorageDead(_84);
        _209 = discriminant(_80);
        StorageDead(_80);
        goto -> bb75;
    }

    bb34: {
        _192 = deref_copy (*_96);
        _95 = &(*_192);
        StorageDead(_97);
        StorageLive(_98);
        _98 = RangeFull;
        _94 = <[u8] as Index<RangeFull>>::index(move _95, move _98) -> [return: bb35, unwind: bb85];
    }

    bb35: {
        StorageDead(_98);
        StorageDead(_95);
        _93 = &(*_94);
        _92 = &mut _93;
        _91 = &mut (*_92);
        _90 = <PriceUpdateV2 as anchor_lang::AccountDeserialize>::try_deserialize(move _91) -> [return: bb36, unwind: bb85];
    }

    bb36: {
        StorageDead(_91);
        _89 = <std::result::Result<PriceUpdateV2, anchor_lang::error::Error> as Try>::branch(move _90) -> [return: bb37, unwind: bb85];
    }

    bb37: {
        StorageDead(_90);
        _99 = discriminant(_89);
        switchInt(move _99) -> [0: bb38, 1: bb39, otherwise: bb15];
    }

    bb38: {
        StorageLive(_103);
        _103 = move ((_89 as Continue).0: pyth_solana_receiver_sdk::price_update::PriceUpdateV2);
        _88 = move _103;
        StorageDead(_103);
        _205 = discriminant(_89);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_89);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &((_88.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).0: [u8; 32]);
        StorageLive(_109);
        _109 = &_2;
        _107 = <[u8; 32] as PartialEq>::eq(move _108, move _109) -> [return: bb41, unwind: bb85];
    }

    bb39: {
        StorageLive(_100);
        _100 = move ((_89 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_102);
        _102 = move _100;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _102) -> [return: bb40, unwind: bb95];
    }

    bb40: {
        StorageDead(_102);
        StorageDead(_100);
        _207 = discriminant(_89);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_89);
        goto -> bb74;
    }

    bb41: {
        switchInt(move _107) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_110);
        _110 = ();
        _106 = std::result::Result::<(), error::ErrorCode>::Ok(move _110);
        StorageDead(_110);
        goto -> bb50;
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_111);
        _111 = error::ErrorCode::OraclePriceFeedMessageMismatch;
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _183 = const _;
        _122 = &(*_183);
        _121 = &(*_122);
        _120 = move _121 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_121);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_111;
        _129 = &(*_130);
        _128 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _129) -> [return: bb44, unwind: bb85];
    }

    bb44: {
        StorageDead(_129);
        _127 = [move _128];
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = move _125 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_125);
        _119 = Arguments::<'_>::new_v1(move _120, move _124) -> [return: bb45, unwind: bb85];
    }

    bb45: {
        StorageDead(_124);
        StorageDead(_120);
        _118 = format(move _119) -> [return: bb46, unwind: bb85];
    }

    bb46: {
        StorageDead(_119);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        _117 = move _118;
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = <String as Deref>::deref(move _115) -> [return: bb47, unwind: bb84];
    }

    bb47: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = solana_program::log::sol_log(move _113) -> [return: bb48, unwind: bb84];
    }

    bb48: {
        StorageDead(_113);
        drop(_117) -> [return: bb49, unwind: bb85];
    }

    bb49: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_131);
        _131 = _111;
        _106 = std::result::Result::<(), error::ErrorCode>::Err(move _131);
        StorageDead(_131);
        StorageDead(_111);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_107);
        _105 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _106) -> [return: bb51, unwind: bb85];
    }

    bb51: {
        StorageDead(_106);
        _132 = discriminant(_105);
        switchInt(move _132) -> [0: bb52, 1: bb53, otherwise: bb15];
    }

    bb52: {
        StorageLive(_136);
        _136 = ((_105 as Continue).0: ());
        _104 = _136;
        StorageDead(_136);
        StorageDead(_105);
        StorageDead(_104);
        _78 = const ();
        StorageDead(_88);
        drop(_79) -> [return: bb55, unwind: bb101];
    }

    bb53: {
        StorageLive(_133);
        _133 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb54, unwind: bb85];
    }

    bb54: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb74;
    }

    bb55: {
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _182 = const _;
        _147 = &(*_182);
        _146 = &(*_147);
        _145 = move _146 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_44;
        _154 = &(*_155);
        _153 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _154) -> [return: bb56, unwind: bb101];
    }

    bb56: {
        StorageDead(_154);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_54;
        _157 = &(*_158);
        _156 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _157) -> [return: bb57, unwind: bb101];
    }

    bb57: {
        StorageDead(_157);
        _152 = [move _153, move _156];
        StorageDead(_156);
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        _144 = Arguments::<'_>::new_v1(move _145, move _149) -> [return: bb58, unwind: bb101];
    }

    bb58: {
        StorageDead(_149);
        StorageDead(_145);
        _143 = format(move _144) -> [return: bb59, unwind: bb101];
    }

    bb59: {
        StorageDead(_144);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        _142 = move _143;
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = <String as Deref>::deref(move _140) -> [return: bb60, unwind: bb83];
    }

    bb60: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb61, unwind: bb83];
    }

    bb61: {
        StorageDead(_138);
        drop(_142) -> [return: bb62, unwind: bb101];
    }

    bb62: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        _64 = const ();
        goto -> bb71;
    }

    bb63: {
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _184 = const _;
        _169 = &(*_184);
        _168 = &(*_169);
        _167 = move _168 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_168);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_44;
        _176 = &(*_177);
        _175 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _176) -> [return: bb64, unwind: bb101];
    }

    bb64: {
        StorageDead(_176);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_54;
        _179 = &(*_180);
        _178 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _179) -> [return: bb65, unwind: bb101];
    }

    bb65: {
        StorageDead(_179);
        _174 = [move _175, move _178];
        StorageDead(_178);
        StorageDead(_175);
        _173 = &_174;
        _172 = &(*_173);
        _171 = move _172 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_172);
        _166 = Arguments::<'_>::new_v1(move _167, move _171) -> [return: bb66, unwind: bb101];
    }

    bb66: {
        StorageDead(_171);
        StorageDead(_167);
        _165 = format(move _166) -> [return: bb67, unwind: bb101];
    }

    bb67: {
        StorageDead(_166);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_169);
        _164 = move _165;
        StorageDead(_165);
        _163 = &_164;
        _162 = &(*_163);
        _161 = <String as Deref>::deref(move _162) -> [return: bb68, unwind: bb82];
    }

    bb68: {
        _160 = &(*_161);
        StorageDead(_162);
        _159 = solana_program::log::sol_log(move _160) -> [return: bb69, unwind: bb82];
    }

    bb69: {
        StorageDead(_160);
        drop(_164) -> [return: bb70, unwind: bb101];
    }

    bb70: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_159);
        _64 = const ();
        goto -> bb71;
    }

    bb71: {
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_181);
        _181 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _181);
        StorageDead(_181);
        StorageDead(_54);
        StorageDead(_44);
        switchInt(_193) -> [0: bb72, otherwise: bb91];
    }

    bb72: {
        _193 = const false;
        StorageDead(_36);
        switchInt(_194) -> [0: bb73, otherwise: bb92];
    }

    bb73: {
        _194 = const false;
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_16);
        StorageDead(_15);
        _195 = const false;
        StorageDead(_6);
        _196 = const false;
        StorageDead(_4);
        drop(_3) -> [return: bb81, unwind: bb90];
    }

    bb74: {
        StorageDead(_88);
        drop(_79) -> [return: bb75, unwind: bb101];
    }

    bb75: {
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_54);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_44);
        switchInt(_193) -> [0: bb79, otherwise: bb93];
    }

    bb79: {
        _193 = const false;
        StorageDead(_36);
        switchInt(_194) -> [0: bb80, otherwise: bb94];
    }

    bb80: {
        _194 = const false;
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_16);
        StorageDead(_15);
        _195 = const false;
        StorageDead(_6);
        _196 = const false;
        StorageDead(_4);
        drop(_3) -> [return: bb81, unwind: bb90];
    }

    bb81: {
        return;
    }

    bb82 (cleanup): {
        drop(_164) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_142) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_117) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_79) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_11) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_9) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_7) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_3) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        resume;
    }

    bb91: {
        drop(_36) -> [return: bb72, unwind: bb103];
    }

    bb92: {
        drop(_31) -> [return: bb73, unwind: bb105];
    }

    bb93: {
        drop(_36) -> [return: bb79, unwind: bb103];
    }

    bb94: {
        drop(_31) -> [return: bb80, unwind: bb105];
    }

    bb95 (cleanup): {
        _217 = discriminant(_89);
        goto -> bb85;
    }

    bb96 (cleanup): {
        _218 = discriminant(_80);
        goto -> bb101;
    }

    bb97 (cleanup): {
        _219 = discriminant(_69);
        goto -> bb101;
    }

    bb98 (cleanup): {
        _220 = discriminant(_55);
        goto -> bb101;
    }

    bb99 (cleanup): {
        _221 = discriminant(_45);
        goto -> bb101;
    }

    bb100 (cleanup): {
        drop(_36) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        switchInt(_193) -> [0: bb103, otherwise: bb100];
    }

    bb102 (cleanup): {
        drop(_31) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        switchInt(_194) -> [0: bb105, otherwise: bb102];
    }

    bb104 (cleanup): {
        drop(_6) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_195) -> [0: bb107, otherwise: bb104];
    }

    bb106 (cleanup): {
        drop(_4) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        switchInt(_196) -> [0: bb89, otherwise: bb106];
    }
}
