// MIR for `admin::handle_deposit_into_spot_market_vault` before PreCodegen

fn admin::handle_deposit_into_spot_market_vault(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::DepositIntoSpotMarketVault<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _15: std::result::Result<(), anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _17: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _22: ();
    let _23: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _24: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _26: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _27: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _28: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _29: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _35: ();
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _37: std::result::Result<(), error::ErrorCode>;
    let mut _38: bool;
    let mut _39: &state::spot_market::SpotMarket;
    let _40: &state::spot_market::SpotMarket;
    let mut _41: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _42: state::paused_operations::SpotOperation;
    let mut _43: ();
    let _45: ();
    let mut _46: &str;
    let _47: &str;
    let mut _48: &std::string::String;
    let _49: &std::string::String;
    let _50: std::string::String;
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let mut _54: &[&str; 2];
    let _55: &[&str; 2];
    let _56: [&str; 2];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let mut _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: &[core::fmt::rt::Argument<'_>; 1];
    let _60: [core::fmt::rt::Argument<'_>; 1];
    let mut _61: core::fmt::rt::Argument<'_>;
    let mut _62: &error::ErrorCode;
    let _63: &error::ErrorCode;
    let _64: ();
    let mut _65: &str;
    let _66: &str;
    let mut _67: error::ErrorCode;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _75: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _76: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _79: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _80: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _86: ();
    let mut _87: &str;
    let _88: &str;
    let mut _89: &std::string::String;
    let _90: &std::string::String;
    let _91: std::string::String;
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let mut _95: &[&str; 3];
    let _96: &[&str; 3];
    let _97: [&str; 3];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let mut _99: &[core::fmt::rt::Argument<'_>; 2];
    let _100: &[core::fmt::rt::Argument<'_>; 2];
    let _101: [core::fmt::rt::Argument<'_>; 2];
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &u64;
    let _104: &u64;
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &u16;
    let _107: &u16;
    let _108: &state::spot_market::SpotMarket;
    let mut _109: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _112: std::result::Result<u128, error::ErrorCode>;
    let mut _113: &state::spot_market::SpotMarket;
    let _114: &state::spot_market::SpotMarket;
    let mut _115: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _123: std::result::Result<u128, error::ErrorCode>;
    let mut _124: u128;
    let mut _125: u128;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _127: std::result::Result<u128, error::ErrorCode>;
    let mut _128: u64;
    let mut _129: isize;
    let mut _131: !;
    let mut _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _139: ();
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _141: std::result::Result<(), error::ErrorCode>;
    let mut _142: bool;
    let mut _143: u128;
    let mut _144: u128;
    let mut _145: ();
    let _147: ();
    let mut _148: &str;
    let _149: &str;
    let mut _150: &std::string::String;
    let _151: &std::string::String;
    let _152: std::string::String;
    let mut _154: std::fmt::Arguments<'_>;
    let mut _155: &[&str];
    let mut _156: &[&str; 2];
    let _157: &[&str; 2];
    let _158: [&str; 2];
    let mut _159: &[core::fmt::rt::Argument<'_>];
    let mut _160: &[core::fmt::rt::Argument<'_>; 1];
    let _161: &[core::fmt::rt::Argument<'_>; 1];
    let _162: [core::fmt::rt::Argument<'_>; 1];
    let mut _163: core::fmt::rt::Argument<'_>;
    let mut _164: &error::ErrorCode;
    let _165: &error::ErrorCode;
    let _166: ();
    let mut _167: &str;
    let _168: &str;
    let mut _169: &std::string::String;
    let _170: &std::string::String;
    let _171: std::string::String;
    let mut _173: std::fmt::Arguments<'_>;
    let mut _174: &[&str];
    let mut _175: &[&str; 3];
    let _176: &[&str; 3];
    let _177: [&str; 3];
    let mut _178: &[core::fmt::rt::Argument<'_>];
    let mut _179: &[core::fmt::rt::Argument<'_>; 2];
    let _180: &[core::fmt::rt::Argument<'_>; 2];
    let _181: [core::fmt::rt::Argument<'_>; 2];
    let mut _182: core::fmt::rt::Argument<'_>;
    let mut _183: &u128;
    let _184: &u128;
    let mut _185: core::fmt::rt::Argument<'_>;
    let mut _186: &u128;
    let _187: &u128;
    let mut _188: error::ErrorCode;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _195: state::spot_market::SpotMarket;
    let mut _196: &state::spot_market::SpotMarket;
    let mut _197: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _199: &state::spot_market::SpotMarket;
    let mut _200: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _203: std::result::Result<u128, error::ErrorCode>;
    let mut _204: u128;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _206: std::result::Result<u128, error::ErrorCode>;
    let mut _207: u128;
    let mut _208: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _209: std::result::Result<u128, error::ErrorCode>;
    let mut _210: u128;
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _212: std::result::Result<u128, error::ErrorCode>;
    let mut _213: u128;
    let mut _214: isize;
    let mut _216: !;
    let mut _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _219: u128;
    let mut _220: &state::spot_market::SpotMarket;
    let mut _221: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _222: isize;
    let mut _224: !;
    let mut _225: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _232: u128;
    let mut _233: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _234: std::result::Result<u128, error::ErrorCode>;
    let mut _235: u64;
    let mut _236: isize;
    let mut _238: !;
    let mut _239: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _241: isize;
    let mut _243: !;
    let mut _244: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _246: ();
    let mut _247: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _248: std::result::Result<(), error::ErrorCode>;
    let mut _249: bool;
    let mut _250: u128;
    let mut _251: u128;
    let mut _252: ();
    let _254: ();
    let mut _255: &str;
    let _256: &str;
    let mut _257: &std::string::String;
    let _258: &std::string::String;
    let _259: std::string::String;
    let mut _261: std::fmt::Arguments<'_>;
    let mut _262: &[&str];
    let mut _263: &[&str; 2];
    let _264: &[&str; 2];
    let _265: [&str; 2];
    let mut _266: &[core::fmt::rt::Argument<'_>];
    let mut _267: &[core::fmt::rt::Argument<'_>; 1];
    let _268: &[core::fmt::rt::Argument<'_>; 1];
    let _269: [core::fmt::rt::Argument<'_>; 1];
    let mut _270: core::fmt::rt::Argument<'_>;
    let mut _271: &error::ErrorCode;
    let _272: &error::ErrorCode;
    let _273: ();
    let mut _274: &str;
    let _275: &str;
    let mut _276: &std::string::String;
    let _277: &std::string::String;
    let _278: std::string::String;
    let mut _280: std::fmt::Arguments<'_>;
    let mut _281: &[&str];
    let mut _282: &[&str; 3];
    let _283: &[&str; 3];
    let _284: [&str; 3];
    let mut _285: &[core::fmt::rt::Argument<'_>];
    let mut _286: &[core::fmt::rt::Argument<'_>; 2];
    let _287: &[core::fmt::rt::Argument<'_>; 2];
    let _288: [core::fmt::rt::Argument<'_>; 2];
    let mut _289: core::fmt::rt::Argument<'_>;
    let mut _290: &u128;
    let _291: &u128;
    let mut _292: core::fmt::rt::Argument<'_>;
    let mut _293: &u128;
    let _294: &u128;
    let mut _295: error::ErrorCode;
    let mut _296: isize;
    let mut _298: !;
    let mut _299: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _301: u128;
    let mut _302: &mut state::spot_market::SpotMarket;
    let mut _303: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _304: ();
    let mut _305: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _306: std::result::Result<(), anchor_lang::error::Error>;
    let mut _307: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _308: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _309: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _310: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _311: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _312: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _313: &anchor_lang::prelude::AccountInfo<'_>;
    let _314: &anchor_lang::prelude::AccountInfo<'_>;
    let _315: anchor_lang::prelude::AccountInfo<'_>;
    let mut _316: &anchor_lang::prelude::Signer<'_>;
    let mut _317: u64;
    let mut _318: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _319: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _320: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _321: bool;
    let mut _322: &state::spot_market::SpotMarket;
    let _323: &state::spot_market::SpotMarket;
    let mut _324: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _325: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _326: isize;
    let mut _328: !;
    let mut _329: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _331: ();
    let mut _332: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _333: std::result::Result<(), anchor_lang::error::Error>;
    let mut _334: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _335: isize;
    let mut _337: !;
    let mut _338: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _340: i64;
    let mut _341: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _342: std::result::Result<i64, error::ErrorCode>;
    let mut _343: &state::spot_market::SpotMarket;
    let _344: &state::spot_market::SpotMarket;
    let mut _345: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _346: u64;
    let mut _347: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _348: &anchor_spl::token_interface::TokenAccount;
    let _349: &anchor_spl::token_interface::TokenAccount;
    let mut _350: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _351: isize;
    let mut _353: !;
    let mut _354: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _356: ();
    let mut _357: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _358: std::result::Result<(), error::ErrorCode>;
    let mut _359: &state::spot_market::SpotMarket;
    let _360: &state::spot_market::SpotMarket;
    let mut _361: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _362: isize;
    let mut _364: !;
    let mut _365: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _367: ();
    let _368: ();
    let mut _369: &[&[u8]];
    let mut _370: &[&[u8]; 1];
    let _371: &[&[u8]; 1];
    let _372: [&[u8]; 1];
    let mut _373: &[u8];
    let _374: &[u8];
    let mut _375: &std::vec::Vec<u8>;
    let _376: &std::vec::Vec<u8>;
    let _377: std::vec::Vec<u8>;
    let mut _378: &state::events::SpotMarketVaultDepositRecord;
    let _379: &state::events::SpotMarketVaultDepositRecord;
    let _380: state::events::SpotMarketVaultDepositRecord;
    let mut _381: i64;
    let mut _382: anchor_lang::prelude::Clock;
    let mut _383: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _384: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _385: isize;
    let mut _387: !;
    let mut _388: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _390: u16;
    let mut _391: &state::spot_market::SpotMarket;
    let mut _392: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _393: u128;
    let mut _394: &state::spot_market::SpotMarket;
    let mut _395: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _396: u128;
    let mut _397: u128;
    let mut _398: u64;
    let mut _399: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _400: std::result::Result<u64, error::ErrorCode>;
    let mut _401: u128;
    let mut _402: isize;
    let mut _404: !;
    let mut _405: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _407: u64;
    let mut _408: ();
    let mut _415: &mut instructions::admin::DepositIntoSpotMarketVault<'_>;
    let mut _416: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _417: &mut instructions::admin::DepositIntoSpotMarketVault<'_>;
    let mut _418: &mut instructions::admin::DepositIntoSpotMarketVault<'_>;
    let mut _419: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _420: &mut instructions::admin::DepositIntoSpotMarketVault<'_>;
    let mut _421: &mut instructions::admin::DepositIntoSpotMarketVault<'_>;
    let mut _422: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _423: &mut instructions::admin::DepositIntoSpotMarketVault<'_>;
    let mut _424: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _425: &mut instructions::admin::DepositIntoSpotMarketVault<'_>;
    let mut _426: &mut instructions::admin::DepositIntoSpotMarketVault<'_>;
    let mut _427: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _428: &mut instructions::admin::DepositIntoSpotMarketVault<'_>;
    let mut _429: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _430: bool;
    let mut _431: bool;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _463: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _464: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _465: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _466: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _19;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _22;
        scope 8 {
        }
    }
    scope 9 {
        debug spot_market => _23;
        let _44: error::ErrorCode;
        let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _72: ();
        let _73: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
        scope 14 {
            debug error_code => _44;
            let _51: std::string::String;
            let mut _414: &[&str; 2];
            scope 15 {
                debug res => _51;
            }
        }
        scope 16 {
            debug residual => _69;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _72;
            scope 19 {
            }
        }
        scope 20 {
            debug remaining_accounts_iter => _73;
            let _77: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
            let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _85: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
            scope 21 {
                debug mint => _77;
                let _92: std::string::String;
                let _110: u128;
                let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _120: u128;
                let mut _413: &[&str; 3];
                scope 26 {
                    debug res => _92;
                }
                scope 27 {
                    debug deposit_token_amount_before => _110;
                    let _121: u128;
                    let _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _133: u128;
                    let _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _138: u128;
                    scope 32 {
                        debug deposit_token_amount_after => _121;
                        let _146: error::ErrorCode;
                        let _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _193: ();
                        let _194: u64;
                        scope 41 {
                            debug error_code => _146;
                            let _153: std::string::String;
                            let _172: std::string::String;
                            let mut _411: &[&str; 3];
                            let mut _412: &[&str; 2];
                            scope 42 {
                                debug res => _153;
                            }
                            scope 43 {
                                debug res => _172;
                            }
                        }
                        scope 44 {
                            debug residual => _190;
                            scope 45 {
                            }
                        }
                        scope 46 {
                            debug val => _193;
                            scope 47 {
                            }
                        }
                        scope 48 {
                            debug token_precision => _194;
                            let _198: u128;
                            scope 49 {
                                debug cumulative_deposit_interest_before => _198;
                                let _201: u128;
                                let _215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _218: u128;
                                let _223: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _226: u128;
                                let _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _231: u128;
                                let _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _240: u128;
                                let _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _245: u128;
                                scope 50 {
                                    debug cumulative_deposit_interest_after => _201;
                                    let _253: error::ErrorCode;
                                    let _297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _300: ();
                                    let _327: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _330: ();
                                    let _336: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _339: ();
                                    let _352: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _355: i64;
                                    let _363: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _366: ();
                                    let _386: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                    let _389: anchor_lang::prelude::Clock;
                                    let _403: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _406: u64;
                                    scope 71 {
                                        debug error_code => _253;
                                        let _260: std::string::String;
                                        let _279: std::string::String;
                                        let mut _409: &[&str; 3];
                                        let mut _410: &[&str; 2];
                                        scope 72 {
                                            debug res => _260;
                                        }
                                        scope 73 {
                                            debug res => _279;
                                        }
                                    }
                                    scope 74 {
                                        debug residual => _297;
                                        scope 75 {
                                        }
                                    }
                                    scope 76 {
                                        debug val => _300;
                                        scope 77 {
                                        }
                                    }
                                    scope 78 {
                                        debug residual => _327;
                                        scope 79 {
                                        }
                                    }
                                    scope 80 {
                                        debug val => _330;
                                        scope 81 {
                                        }
                                    }
                                    scope 82 {
                                        debug residual => _336;
                                        scope 83 {
                                        }
                                    }
                                    scope 84 {
                                        debug val => _339;
                                        scope 85 {
                                        }
                                    }
                                    scope 86 {
                                        debug residual => _352;
                                        scope 87 {
                                        }
                                    }
                                    scope 88 {
                                        debug val => _355;
                                        scope 89 {
                                        }
                                    }
                                    scope 90 {
                                        debug residual => _363;
                                        scope 91 {
                                        }
                                    }
                                    scope 92 {
                                        debug val => _366;
                                        scope 93 {
                                        }
                                    }
                                    scope 94 {
                                        debug residual => _386;
                                        scope 95 {
                                        }
                                    }
                                    scope 96 {
                                        debug val => _389;
                                        scope 97 {
                                        }
                                    }
                                    scope 98 {
                                        debug residual => _403;
                                        scope 99 {
                                        }
                                    }
                                    scope 100 {
                                        debug val => _406;
                                        scope 101 {
                                        }
                                    }
                                }
                                scope 51 {
                                    debug residual => _215;
                                    scope 52 {
                                    }
                                }
                                scope 53 {
                                    debug val => _218;
                                    scope 54 {
                                    }
                                }
                                scope 55 {
                                    debug residual => _223;
                                    scope 56 {
                                    }
                                }
                                scope 57 {
                                    debug val => _226;
                                    scope 58 {
                                    }
                                }
                                scope 59 {
                                    debug residual => _228;
                                    scope 60 {
                                    }
                                }
                                scope 61 {
                                    debug val => _231;
                                    scope 62 {
                                    }
                                }
                                scope 63 {
                                    debug residual => _237;
                                    scope 64 {
                                    }
                                }
                                scope 65 {
                                    debug val => _240;
                                    scope 66 {
                                    }
                                }
                                scope 67 {
                                    debug residual => _242;
                                    scope 68 {
                                    }
                                }
                                scope 69 {
                                    debug val => _245;
                                    scope 70 {
                                    }
                                }
                            }
                        }
                    }
                    scope 33 {
                        debug residual => _130;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _133;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug residual => _135;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug val => _138;
                        scope 40 {
                        }
                    }
                }
                scope 28 {
                    debug residual => _117;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug val => _120;
                    scope 31 {
                    }
                }
            }
            scope 22 {
                debug residual => _82;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _85;
                scope 25 {
                }
            }
        }
    }
    scope 10 {
        debug residual => _31;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _34;
        scope 13 {
        }
    }

    bb0: {
        _431 = const false;
        _430 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _415 = deref_copy (_1.1: &mut instructions::admin::DepositIntoSpotMarketVault<'_>);
        _7 = &((*_415).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _416 = deref_copy (*_7);
        _462 = (((_416.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_462);
        _5 = constraints::deposit_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb205];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _432 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _417 = deref_copy (_1.1: &mut instructions::admin::DepositIntoSpotMarketVault<'_>);
        _17 = &((*_417).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _16 = &(*_17);
        _15 = constraints::spot_market_valid(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb212];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _454 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb195;
    }

    bb7: {
        StorageDead(_16);
        _14 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _15) -> [return: bb8, unwind: bb205];
    }

    bb8: {
        StorageDead(_15);
        _18 = discriminant(_14);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = ((_14 as Continue).0: ());
        _13 = _22;
        StorageDead(_22);
        _434 = discriminant(_14);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _418 = deref_copy (_1.1: &mut instructions::admin::DepositIntoSpotMarketVault<'_>);
        _28 = &((*_418).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _27 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _28) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_19);
        _19 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _21) -> [return: bb11, unwind: bb211];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        _452 = discriminant(_14);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb195;
    }

    bb12: {
        StorageDead(_28);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _26 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _27, move _29) -> [return: bb13, unwind: bb205];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_27);
        _25 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _26) -> [return: bb14, unwind: bb205];
    }

    bb14: {
        StorageDead(_26);
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_34);
        _34 = move ((_25 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _24 = move _34;
        StorageDead(_34);
        _23 = &mut _24;
        _438 = discriminant(_25);
        StorageDead(_25);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_23);
        _40 = <RefMut<'_, SpotMarket> as Deref>::deref(move _41) -> [return: bb18, unwind: bb204];
    }

    bb16: {
        StorageLive(_31);
        _31 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb17, unwind: bb210];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        _436 = discriminant(_25);
        StorageDead(_25);
        goto -> bb194;
    }

    bb18: {
        _39 = &(*_40);
        StorageDead(_41);
        StorageLive(_42);
        _42 = SpotOperation::Deposit;
        _38 = SpotMarket::is_operation_paused(move _39, move _42) -> [return: bb19, unwind: bb204];
    }

    bb19: {
        switchInt(move _38) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_40);
        StorageLive(_44);
        _44 = error::ErrorCode::DefaultError;
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _414 = const _;
        _55 = &(*_414);
        _54 = &(*_55);
        _53 = move _54 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_54);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_44;
        _62 = &(*_63);
        _61 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _62) -> [return: bb22, unwind: bb204];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_40);
        StorageLive(_43);
        _43 = ();
        _37 = std::result::Result::<(), error::ErrorCode>::Ok(move _43);
        StorageDead(_43);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_62);
        _60 = [move _61];
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = move _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_58);
        _52 = Arguments::<'_>::new_v1(move _53, move _57) -> [return: bb23, unwind: bb204];
    }

    bb23: {
        StorageDead(_57);
        StorageDead(_53);
        _51 = format(move _52) -> [return: bb24, unwind: bb204];
    }

    bb24: {
        StorageDead(_52);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_55);
        _50 = move _51;
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = <String as Deref>::deref(move _48) -> [return: bb25, unwind: bb203];
    }

    bb25: {
        _46 = &(*_47);
        StorageDead(_48);
        _45 = solana_program::log::sol_log(move _46) -> [return: bb26, unwind: bb203];
    }

    bb26: {
        StorageDead(_46);
        drop(_50) -> [return: bb27, unwind: bb204];
    }

    bb27: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = const "spot market deposits paused";
        _65 = &(*_66);
        _64 = solana_program::log::sol_log(move _65) -> [return: bb28, unwind: bb204];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_66);
        StorageDead(_64);
        StorageLive(_67);
        _67 = _44;
        _37 = std::result::Result::<(), error::ErrorCode>::Err(move _67);
        StorageDead(_67);
        StorageDead(_44);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_38);
        _36 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _37) -> [return: bb30, unwind: bb204];
    }

    bb30: {
        StorageDead(_37);
        _68 = discriminant(_36);
        switchInt(move _68) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_72);
        _72 = ((_36 as Continue).0: ());
        _35 = _72;
        StorageDead(_72);
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _419 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _76 = &(*_419);
        _75 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _76) -> [return: bb34, unwind: bb204];
    }

    bb32: {
        StorageLive(_69);
        _69 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb33, unwind: bb204];
    }

    bb33: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb193;
    }

    bb34: {
        StorageDead(_76);
        _74 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _75) -> [return: bb35, unwind: bb204];
    }

    bb35: {
        StorageDead(_75);
        _73 = &mut _74;
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut (*_73);
        _79 = get_token_mint(move _80) -> [return: bb36, unwind: bb204];
    }

    bb36: {
        StorageDead(_80);
        _78 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _79) -> [return: bb37, unwind: bb204];
    }

    bb37: {
        StorageDead(_79);
        _81 = discriminant(_78);
        switchInt(move _81) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_85);
        _85 = move ((_78 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _77 = move _85;
        StorageDead(_85);
        StorageDead(_78);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _413 = const _;
        _96 = &(*_413);
        _95 = &(*_96);
        _94 = move _95 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_2;
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _103) -> [return: bb41, unwind: bb204];
    }

    bb39: {
        StorageLive(_82);
        _82 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb40, unwind: bb204];
    }

    bb40: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_78);
        goto -> bb192;
    }

    bb41: {
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &(*_23);
        _108 = <RefMut<'_, SpotMarket> as Deref>::deref(move _109) -> [return: bb42, unwind: bb204];
    }

    bb42: {
        StorageDead(_109);
        _107 = &((*_108).42: u16);
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _106) -> [return: bb43, unwind: bb204];
    }

    bb43: {
        StorageDead(_106);
        _101 = [move _102, move _105];
        StorageDead(_105);
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = move _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_99);
        _93 = Arguments::<'_>::new_v1(move _94, move _98) -> [return: bb44, unwind: bb204];
    }

    bb44: {
        StorageDead(_98);
        StorageDead(_94);
        _92 = format(move _93) -> [return: bb45, unwind: bb204];
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_96);
        _91 = move _92;
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = <String as Deref>::deref(move _89) -> [return: bb46, unwind: bb202];
    }

    bb46: {
        _87 = &(*_88);
        StorageDead(_89);
        _86 = solana_program::log::sol_log(move _87) -> [return: bb47, unwind: bb202];
    }

    bb47: {
        StorageDead(_87);
        drop(_91) -> [return: bb48, unwind: bb204];
    }

    bb48: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_23);
        _114 = <RefMut<'_, SpotMarket> as Deref>::deref(move _115) -> [return: bb49, unwind: bb204];
    }

    bb49: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = SpotMarket::get_deposits(move _113) -> [return: bb50, unwind: bb204];
    }

    bb50: {
        StorageDead(_113);
        _111 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _112) -> [return: bb51, unwind: bb204];
    }

    bb51: {
        StorageDead(_112);
        _116 = discriminant(_111);
        switchInt(move _116) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_120);
        _120 = ((_111 as Continue).0: u128);
        _110 = _120;
        StorageDead(_120);
        StorageDead(_114);
        StorageDead(_111);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = _110;
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _2;
        _127 = <u64 as Cast>::cast::<u128>(move _128) -> [return: bb55, unwind: bb204];
    }

    bb53: {
        StorageLive(_117);
        _117 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb54, unwind: bb204];
    }

    bb54: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        goto -> bb191;
    }

    bb55: {
        StorageDead(_128);
        _126 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _127) -> [return: bb56, unwind: bb204];
    }

    bb56: {
        StorageDead(_127);
        _129 = discriminant(_126);
        switchInt(move _129) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_133);
        _133 = ((_126 as Continue).0: u128);
        _125 = _133;
        StorageDead(_133);
        _123 = <u128 as SafeMath>::safe_add(move _124, move _125) -> [return: bb60, unwind: bb204];
    }

    bb58: {
        StorageLive(_130);
        _130 = ((_126 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_132);
        _132 = _130;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _132) -> [return: bb59, unwind: bb204];
    }

    bb59: {
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb189;
    }

    bb60: {
        StorageDead(_125);
        StorageDead(_124);
        _122 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _123) -> [return: bb61, unwind: bb204];
    }

    bb61: {
        StorageDead(_123);
        _134 = discriminant(_122);
        switchInt(move _134) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_138);
        _138 = ((_122 as Continue).0: u128);
        _121 = _138;
        StorageDead(_138);
        StorageDead(_126);
        StorageDead(_122);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = _121;
        StorageLive(_144);
        _144 = _110;
        _142 = Gt(move _143, move _144);
        switchInt(move _142) -> [0: bb66, otherwise: bb65];
    }

    bb63: {
        StorageLive(_135);
        _135 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_137);
        _137 = _135;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _137) -> [return: bb64, unwind: bb204];
    }

    bb64: {
        StorageDead(_137);
        StorageDead(_135);
        goto -> bb189;
    }

    bb65: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_145);
        _145 = ();
        _141 = std::result::Result::<(), error::ErrorCode>::Ok(move _145);
        StorageDead(_145);
        goto -> bb80;
    }

    bb66: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_146);
        _146 = error::ErrorCode::DefaultError;
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _412 = const _;
        _157 = &(*_412);
        _156 = &(*_157);
        _155 = move _156 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_156);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_146;
        _164 = &(*_165);
        _163 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _164) -> [return: bb67, unwind: bb204];
    }

    bb67: {
        StorageDead(_164);
        _162 = [move _163];
        StorageDead(_163);
        _161 = &_162;
        _160 = &(*_161);
        _159 = move _160 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_160);
        _154 = Arguments::<'_>::new_v1(move _155, move _159) -> [return: bb68, unwind: bb204];
    }

    bb68: {
        StorageDead(_159);
        StorageDead(_155);
        _153 = format(move _154) -> [return: bb69, unwind: bb204];
    }

    bb69: {
        StorageDead(_154);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_157);
        _152 = move _153;
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = <String as Deref>::deref(move _150) -> [return: bb70, unwind: bb201];
    }

    bb70: {
        _148 = &(*_149);
        StorageDead(_150);
        _147 = solana_program::log::sol_log(move _148) -> [return: bb71, unwind: bb201];
    }

    bb71: {
        StorageDead(_148);
        drop(_152) -> [return: bb72, unwind: bb204];
    }

    bb72: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_147);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _411 = const _;
        _176 = &(*_411);
        _175 = &(*_176);
        _174 = move _175 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_175);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_121;
        _183 = &(*_184);
        _182 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _183) -> [return: bb73, unwind: bb204];
    }

    bb73: {
        StorageDead(_183);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_110;
        _186 = &(*_187);
        _185 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _186) -> [return: bb74, unwind: bb204];
    }

    bb74: {
        StorageDead(_186);
        _181 = [move _182, move _185];
        StorageDead(_185);
        StorageDead(_182);
        _180 = &_181;
        _179 = &(*_180);
        _178 = move _179 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_179);
        _173 = Arguments::<'_>::new_v1(move _174, move _178) -> [return: bb75, unwind: bb204];
    }

    bb75: {
        StorageDead(_178);
        StorageDead(_174);
        _172 = format(move _173) -> [return: bb76, unwind: bb204];
    }

    bb76: {
        StorageDead(_173);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_176);
        _171 = move _172;
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = <String as Deref>::deref(move _169) -> [return: bb77, unwind: bb200];
    }

    bb77: {
        _167 = &(*_168);
        StorageDead(_169);
        _166 = solana_program::log::sol_log(move _167) -> [return: bb78, unwind: bb200];
    }

    bb78: {
        StorageDead(_167);
        drop(_171) -> [return: bb79, unwind: bb204];
    }

    bb79: {
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageLive(_188);
        _188 = _146;
        _141 = std::result::Result::<(), error::ErrorCode>::Err(move _188);
        StorageDead(_188);
        StorageDead(_146);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_142);
        _140 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _141) -> [return: bb81, unwind: bb204];
    }

    bb81: {
        StorageDead(_141);
        _189 = discriminant(_140);
        switchInt(move _189) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_193);
        _193 = ((_140 as Continue).0: ());
        _139 = _193;
        StorageDead(_193);
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &(*_23);
        _196 = <RefMut<'_, SpotMarket> as Deref>::deref(move _197) -> [return: bb85, unwind: bb204];
    }

    bb83: {
        StorageLive(_190);
        _190 = ((_140 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_192);
        _192 = _190;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _192) -> [return: bb84, unwind: bb204];
    }

    bb84: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb190;
    }

    bb85: {
        _195 = (*_196);
        StorageDead(_197);
        _194 = SpotMarket::get_precision(move _195) -> [return: bb86, unwind: bb204];
    }

    bb86: {
        StorageDead(_195);
        StorageDead(_196);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &(*_23);
        _199 = <RefMut<'_, SpotMarket> as Deref>::deref(move _200) -> [return: bb87, unwind: bb204];
    }

    bb87: {
        StorageDead(_200);
        _198 = ((*_199).13: u128);
        StorageDead(_199);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = _121;
        _212 = <u128 as SafeMath>::safe_mul(move _213, const _) -> [return: bb88, unwind: bb204];
    }

    bb88: {
        StorageDead(_213);
        _211 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _212) -> [return: bb89, unwind: bb204];
    }

    bb89: {
        StorageDead(_212);
        _214 = discriminant(_211);
        switchInt(move _214) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_218);
        _218 = ((_211 as Continue).0: u128);
        _210 = _218;
        StorageDead(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &(*_23);
        _220 = <RefMut<'_, SpotMarket> as Deref>::deref(move _221) -> [return: bb93, unwind: bb204];
    }

    bb91: {
        StorageLive(_215);
        _215 = ((_211 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_217);
        _217 = _215;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _217) -> [return: bb92, unwind: bb204];
    }

    bb92: {
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb187;
    }

    bb93: {
        StorageDead(_221);
        _219 = ((*_220).11: u128);
        _209 = <u128 as SafeMath>::safe_div(move _210, move _219) -> [return: bb94, unwind: bb204];
    }

    bb94: {
        StorageDead(_219);
        StorageDead(_210);
        _208 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _209) -> [return: bb95, unwind: bb204];
    }

    bb95: {
        StorageDead(_209);
        _222 = discriminant(_208);
        switchInt(move _222) -> [0: bb96, 1: bb97, otherwise: bb4];
    }

    bb96: {
        StorageLive(_226);
        _226 = ((_208 as Continue).0: u128);
        _207 = _226;
        StorageDead(_226);
        _206 = <u128 as SafeMath>::safe_mul(move _207, const _) -> [return: bb99, unwind: bb204];
    }

    bb97: {
        StorageLive(_223);
        _223 = ((_208 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_225);
        _225 = _223;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _225) -> [return: bb98, unwind: bb204];
    }

    bb98: {
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_207);
        StorageDead(_206);
        goto -> bb185;
    }

    bb99: {
        StorageDead(_207);
        _205 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _206) -> [return: bb100, unwind: bb204];
    }

    bb100: {
        StorageDead(_206);
        _227 = discriminant(_205);
        switchInt(move _227) -> [0: bb101, 1: bb102, otherwise: bb4];
    }

    bb101: {
        StorageLive(_231);
        _231 = ((_205 as Continue).0: u128);
        _204 = _231;
        StorageDead(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = _194;
        _234 = <u64 as Cast>::cast::<u128>(move _235) -> [return: bb104, unwind: bb204];
    }

    bb102: {
        StorageLive(_228);
        _228 = ((_205 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_230);
        _230 = _228;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _230) -> [return: bb103, unwind: bb204];
    }

    bb103: {
        StorageDead(_230);
        StorageDead(_228);
        goto -> bb185;
    }

    bb104: {
        StorageDead(_235);
        _233 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _234) -> [return: bb105, unwind: bb204];
    }

    bb105: {
        StorageDead(_234);
        _236 = discriminant(_233);
        switchInt(move _236) -> [0: bb106, 1: bb107, otherwise: bb4];
    }

    bb106: {
        StorageLive(_240);
        _240 = ((_233 as Continue).0: u128);
        _232 = _240;
        StorageDead(_240);
        _203 = <u128 as SafeMath>::safe_div(move _204, move _232) -> [return: bb109, unwind: bb204];
    }

    bb107: {
        StorageLive(_237);
        _237 = ((_233 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_239);
        _239 = _237;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _239) -> [return: bb108, unwind: bb204];
    }

    bb108: {
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_232);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb184;
    }

    bb109: {
        StorageDead(_232);
        StorageDead(_204);
        _202 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _203) -> [return: bb110, unwind: bb204];
    }

    bb110: {
        StorageDead(_203);
        _241 = discriminant(_202);
        switchInt(move _241) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        StorageLive(_245);
        _245 = ((_202 as Continue).0: u128);
        _201 = _245;
        StorageDead(_245);
        StorageDead(_233);
        StorageDead(_220);
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_202);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = _201;
        StorageLive(_251);
        _251 = _198;
        _249 = Gt(move _250, move _251);
        switchInt(move _249) -> [0: bb115, otherwise: bb114];
    }

    bb112: {
        StorageLive(_242);
        _242 = ((_202 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_244);
        _244 = _242;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _244) -> [return: bb113, unwind: bb204];
    }

    bb113: {
        StorageDead(_244);
        StorageDead(_242);
        goto -> bb184;
    }

    bb114: {
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_252);
        _252 = ();
        _248 = std::result::Result::<(), error::ErrorCode>::Ok(move _252);
        StorageDead(_252);
        goto -> bb129;
    }

    bb115: {
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_253);
        _253 = error::ErrorCode::DefaultError;
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _410 = const _;
        _264 = &(*_410);
        _263 = &(*_264);
        _262 = move _263 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_263);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &_253;
        _271 = &(*_272);
        _270 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _271) -> [return: bb116, unwind: bb204];
    }

    bb116: {
        StorageDead(_271);
        _269 = [move _270];
        StorageDead(_270);
        _268 = &_269;
        _267 = &(*_268);
        _266 = move _267 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_267);
        _261 = Arguments::<'_>::new_v1(move _262, move _266) -> [return: bb117, unwind: bb204];
    }

    bb117: {
        StorageDead(_266);
        StorageDead(_262);
        _260 = format(move _261) -> [return: bb118, unwind: bb204];
    }

    bb118: {
        StorageDead(_261);
        StorageDead(_272);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_264);
        _259 = move _260;
        StorageDead(_260);
        _258 = &_259;
        _257 = &(*_258);
        _256 = <String as Deref>::deref(move _257) -> [return: bb119, unwind: bb199];
    }

    bb119: {
        _255 = &(*_256);
        StorageDead(_257);
        _254 = solana_program::log::sol_log(move _255) -> [return: bb120, unwind: bb199];
    }

    bb120: {
        StorageDead(_255);
        drop(_259) -> [return: bb121, unwind: bb204];
    }

    bb121: {
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_254);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _409 = const _;
        _283 = &(*_409);
        _282 = &(*_283);
        _281 = move _282 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_282);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &_201;
        _290 = &(*_291);
        _289 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _290) -> [return: bb122, unwind: bb204];
    }

    bb122: {
        StorageDead(_290);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &_198;
        _293 = &(*_294);
        _292 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _293) -> [return: bb123, unwind: bb204];
    }

    bb123: {
        StorageDead(_293);
        _288 = [move _289, move _292];
        StorageDead(_292);
        StorageDead(_289);
        _287 = &_288;
        _286 = &(*_287);
        _285 = move _286 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_286);
        _280 = Arguments::<'_>::new_v1(move _281, move _285) -> [return: bb124, unwind: bb204];
    }

    bb124: {
        StorageDead(_285);
        StorageDead(_281);
        _279 = format(move _280) -> [return: bb125, unwind: bb204];
    }

    bb125: {
        StorageDead(_280);
        StorageDead(_294);
        StorageDead(_291);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_283);
        _278 = move _279;
        StorageDead(_279);
        _277 = &_278;
        _276 = &(*_277);
        _275 = <String as Deref>::deref(move _276) -> [return: bb126, unwind: bb198];
    }

    bb126: {
        _274 = &(*_275);
        StorageDead(_276);
        _273 = solana_program::log::sol_log(move _274) -> [return: bb127, unwind: bb198];
    }

    bb127: {
        StorageDead(_274);
        drop(_278) -> [return: bb128, unwind: bb204];
    }

    bb128: {
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_273);
        StorageLive(_295);
        _295 = _253;
        _248 = std::result::Result::<(), error::ErrorCode>::Err(move _295);
        StorageDead(_295);
        StorageDead(_253);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_249);
        _247 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _248) -> [return: bb130, unwind: bb204];
    }

    bb130: {
        StorageDead(_248);
        _296 = discriminant(_247);
        switchInt(move _296) -> [0: bb131, 1: bb132, otherwise: bb4];
    }

    bb131: {
        StorageLive(_300);
        _300 = ((_247 as Continue).0: ());
        _246 = _300;
        StorageDead(_300);
        StorageDead(_247);
        StorageDead(_246);
        StorageLive(_301);
        _301 = _201;
        StorageLive(_302);
        StorageLive(_303);
        _303 = &mut (*_23);
        _302 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _303) -> [return: bb134, unwind: bb204];
    }

    bb132: {
        StorageLive(_297);
        _297 = ((_247 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_299);
        _299 = _297;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _299) -> [return: bb133, unwind: bb204];
    }

    bb133: {
        StorageDead(_299);
        StorageDead(_297);
        StorageDead(_247);
        StorageDead(_246);
        goto -> bb188;
    }

    bb134: {
        StorageDead(_303);
        ((*_302).13: u128) = move _301;
        StorageDead(_301);
        StorageDead(_302);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        _420 = deref_copy (_1.1: &mut instructions::admin::DepositIntoSpotMarketVault<'_>);
        _308 = &((*_420).5: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _307 = &(*_308);
        StorageLive(_309);
        StorageLive(_310);
        _421 = deref_copy (_1.1: &mut instructions::admin::DepositIntoSpotMarketVault<'_>);
        _310 = &((*_421).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _422 = deref_copy (*_310);
        _463 = (((_422.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _309 = &(*_463);
        StorageLive(_311);
        StorageLive(_312);
        _423 = deref_copy (_1.1: &mut instructions::admin::DepositIntoSpotMarketVault<'_>);
        _312 = &((*_423).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _424 = deref_copy (*_312);
        _464 = (((_424.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _311 = &(*_464);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _425 = deref_copy (_1.1: &mut instructions::admin::DepositIntoSpotMarketVault<'_>);
        _316 = &((*_425).2: anchor_lang::prelude::Signer<'_>);
        _315 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _316) -> [return: bb135, unwind: bb204];
    }

    bb135: {
        StorageDead(_316);
        _314 = &_315;
        _313 = &(*_314);
        StorageLive(_317);
        _317 = _2;
        StorageLive(_318);
        StorageLive(_319);
        _319 = &_77;
        _318 = &(*_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &(*_23);
        _323 = <RefMut<'_, SpotMarket> as Deref>::deref(move _324) -> [return: bb136, unwind: bb197];
    }

    bb136: {
        _322 = &(*_323);
        StorageDead(_324);
        _321 = SpotMarket::has_transfer_hook(move _322) -> [return: bb137, unwind: bb197];
    }

    bb137: {
        switchInt(move _321) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        StorageDead(_323);
        StorageDead(_322);
        StorageLive(_325);
        _325 = &mut (*_73);
        _320 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _325);
        StorageDead(_325);
        goto -> bb140;
    }

    bb139: {
        StorageDead(_323);
        StorageDead(_322);
        _320 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb140;
    }

    bb140: {
        StorageDead(_321);
        _306 = receive(move _307, move _309, move _311, move _313, move _317, move _318, move _320) -> [return: bb141, unwind: bb197];
    }

    bb141: {
        StorageDead(_320);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_313);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_307);
        _305 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _306) -> [return: bb142, unwind: bb197];
    }

    bb142: {
        StorageDead(_306);
        _326 = discriminant(_305);
        switchInt(move _326) -> [0: bb143, 1: bb144, otherwise: bb4];
    }

    bb143: {
        StorageLive(_330);
        _330 = ((_305 as Continue).0: ());
        _304 = _330;
        StorageDead(_330);
        _440 = discriminant(_305);
        StorageDead(_319);
        drop(_315) -> [return: bb146, unwind: bb204];
    }

    bb144: {
        StorageLive(_327);
        _327 = move ((_305 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_329);
        _329 = move _327;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _329) -> [return: bb145, unwind: bb209];
    }

    bb145: {
        StorageDead(_329);
        StorageDead(_327);
        _450 = discriminant(_305);
        StorageDead(_319);
        drop(_315) -> [return: bb183, unwind: bb204];
    }

    bb146: {
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _426 = deref_copy (_1.1: &mut instructions::admin::DepositIntoSpotMarketVault<'_>);
        _427 = deref_copy ((*_426).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _465 = (((_427.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _334 = &mut (*_465);
        _333 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _334) -> [return: bb147, unwind: bb204];
    }

    bb147: {
        StorageDead(_334);
        _332 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _333) -> [return: bb148, unwind: bb204];
    }

    bb148: {
        StorageDead(_333);
        _335 = discriminant(_332);
        switchInt(move _335) -> [0: bb149, 1: bb150, otherwise: bb4];
    }

    bb149: {
        StorageLive(_339);
        _339 = ((_332 as Continue).0: ());
        _331 = _339;
        StorageDead(_339);
        _442 = discriminant(_332);
        StorageDead(_332);
        StorageDead(_331);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = &(*_23);
        _344 = <RefMut<'_, SpotMarket> as Deref>::deref(move _345) -> [return: bb152, unwind: bb204];
    }

    bb150: {
        StorageLive(_336);
        _336 = move ((_332 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_338);
        _338 = move _336;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _338) -> [return: bb151, unwind: bb208];
    }

    bb151: {
        StorageDead(_338);
        StorageDead(_336);
        _448 = discriminant(_332);
        StorageDead(_332);
        StorageDead(_331);
        goto -> bb188;
    }

    bb152: {
        _343 = &(*_344);
        StorageDead(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _428 = deref_copy (_1.1: &mut instructions::admin::DepositIntoSpotMarketVault<'_>);
        _429 = deref_copy ((*_428).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _466 = (((_429.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _350 = &(*_466);
        _349 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _350) -> [return: bb153, unwind: bb204];
    }

    bb153: {
        _348 = &(*_349);
        _347 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _348) -> [return: bb154, unwind: bb204];
    }

    bb154: {
        StorageDead(_350);
        StorageDead(_348);
        _346 = ((*_347).2: u64);
        _342 = validate_spot_market_vault_amount(move _343, move _346) -> [return: bb155, unwind: bb204];
    }

    bb155: {
        StorageDead(_346);
        StorageDead(_343);
        _341 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _342) -> [return: bb156, unwind: bb204];
    }

    bb156: {
        StorageDead(_342);
        _351 = discriminant(_341);
        switchInt(move _351) -> [0: bb157, 1: bb158, otherwise: bb4];
    }

    bb157: {
        StorageLive(_355);
        _355 = ((_341 as Continue).0: i64);
        _340 = _355;
        StorageDead(_355);
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_341);
        StorageDead(_340);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &(*_23);
        _360 = <RefMut<'_, SpotMarket> as Deref>::deref(move _361) -> [return: bb160, unwind: bb204];
    }

    bb158: {
        StorageLive(_352);
        _352 = ((_341 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_354);
        _354 = _352;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _354) -> [return: bb159, unwind: bb204];
    }

    bb159: {
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb188;
    }

    bb160: {
        _359 = &(*_360);
        StorageDead(_361);
        _358 = SpotMarket::validate_max_token_deposits_and_borrows(move _359, const false) -> [return: bb161, unwind: bb204];
    }

    bb161: {
        StorageDead(_359);
        _357 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _358) -> [return: bb162, unwind: bb204];
    }

    bb162: {
        StorageDead(_358);
        _362 = discriminant(_357);
        switchInt(move _362) -> [0: bb163, 1: bb164, otherwise: bb4];
    }

    bb163: {
        StorageLive(_366);
        _366 = ((_357 as Continue).0: ());
        _356 = _366;
        StorageDead(_366);
        StorageDead(_360);
        StorageDead(_357);
        StorageDead(_356);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb166, unwind: bb204];
    }

    bb164: {
        StorageLive(_363);
        _363 = ((_357 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_365);
        _365 = _363;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _365) -> [return: bb165, unwind: bb204];
    }

    bb165: {
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_357);
        StorageDead(_356);
        goto -> bb188;
    }

    bb166: {
        _383 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _384) -> [return: bb167, unwind: bb204];
    }

    bb167: {
        _430 = const true;
        _431 = const true;
        StorageDead(_384);
        _385 = discriminant(_383);
        switchInt(move _385) -> [0: bb168, 1: bb169, otherwise: bb4];
    }

    bb168: {
        StorageLive(_389);
        _389 = move ((_383 as Continue).0: anchor_lang::prelude::Clock);
        _382 = move _389;
        StorageDead(_389);
        _381 = (_382.4: i64);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &(*_23);
        _391 = <RefMut<'_, SpotMarket> as Deref>::deref(move _392) -> [return: bb171, unwind: bb207];
    }

    bb169: {
        StorageLive(_386);
        _386 = move ((_383 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_388);
        _388 = move _386;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _388) -> [return: bb170, unwind: bb207];
    }

    bb170: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_381);
        StorageDead(_378);
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_370);
        StorageDead(_369);
        goto -> bb206;
    }

    bb171: {
        StorageDead(_392);
        _390 = ((*_391).42: u16);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = &(*_23);
        _394 = <RefMut<'_, SpotMarket> as Deref>::deref(move _395) -> [return: bb172, unwind: bb207];
    }

    bb172: {
        StorageDead(_395);
        _393 = ((*_394).11: u128);
        StorageLive(_396);
        _396 = _198;
        StorageLive(_397);
        _397 = _201;
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        _401 = _110;
        _400 = <u128 as Cast>::cast::<u64>(move _401) -> [return: bb173, unwind: bb207];
    }

    bb173: {
        StorageDead(_401);
        _399 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _400) -> [return: bb174, unwind: bb207];
    }

    bb174: {
        StorageDead(_400);
        _402 = discriminant(_399);
        switchInt(move _402) -> [0: bb175, 1: bb176, otherwise: bb4];
    }

    bb175: {
        StorageLive(_406);
        _406 = ((_399 as Continue).0: u64);
        _398 = _406;
        StorageDead(_406);
        StorageLive(_407);
        _407 = _2;
        _380 = SpotMarketVaultDepositRecord { ts: move _381, market_index: move _390, deposit_balance: move _393, cumulative_deposit_interest_before: move _396, cumulative_deposit_interest_after: move _397, deposit_token_amount_before: move _398, amount: move _407 };
        StorageDead(_407);
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_393);
        StorageDead(_390);
        StorageDead(_381);
        _379 = &_380;
        _378 = &(*_379);
        _377 = <SpotMarketVaultDepositRecord as anchor_lang::Event>::data(move _378) -> [return: bb178, unwind: bb207];
    }

    bb176: {
        StorageLive(_403);
        _403 = ((_399 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_405);
        _405 = _403;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _405) -> [return: bb177, unwind: bb207];
    }

    bb177: {
        StorageDead(_405);
        StorageDead(_403);
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_393);
        StorageDead(_390);
        StorageDead(_381);
        StorageDead(_378);
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_399);
        StorageDead(_394);
        StorageDead(_391);
        goto -> bb206;
    }

    bb178: {
        StorageDead(_378);
        _376 = &_377;
        _375 = &(*_376);
        _374 = <Vec<u8> as Deref>::deref(move _375) -> [return: bb179, unwind: bb196];
    }

    bb179: {
        _373 = &(*_374);
        StorageDead(_375);
        _372 = [move _373];
        StorageDead(_373);
        _371 = &_372;
        _370 = &(*_371);
        _369 = move _370 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_370);
        _368 = solana_program::log::sol_log_data(move _369) -> [return: bb180, unwind: bb196];
    }

    bb180: {
        StorageDead(_369);
        drop(_377) -> [return: bb181, unwind: bb207];
    }

    bb181: {
        StorageDead(_399);
        StorageDead(_394);
        StorageDead(_391);
        _444 = discriminant(_383);
        _430 = const false;
        _431 = const false;
        StorageDead(_383);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_377);
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_368);
        _367 = const ();
        StorageDead(_367);
        StorageLive(_408);
        _408 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _408);
        StorageDead(_408);
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_194);
        StorageDead(_121);
        StorageDead(_110);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        drop(_24) -> [return: bb182, unwind: bb205];
    }

    bb182: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb195;
    }

    bb183: {
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_304);
        goto -> bb188;
    }

    bb184: {
        StorageDead(_233);
        goto -> bb186;
    }

    bb185: {
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb186;
    }

    bb186: {
        StorageDead(_220);
        goto -> bb187;
    }

    bb187: {
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_202);
        goto -> bb188;
    }

    bb188: {
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_194);
        goto -> bb190;
    }

    bb189: {
        StorageDead(_126);
        StorageDead(_122);
        goto -> bb190;
    }

    bb190: {
        StorageDead(_121);
        goto -> bb191;
    }

    bb191: {
        StorageDead(_110);
        goto -> bb192;
    }

    bb192: {
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb193;
    }

    bb193: {
        drop(_24) -> [return: bb194, unwind: bb205];
    }

    bb194: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb195;
    }

    bb195: {
        return;
    }

    bb196 (cleanup): {
        drop(_377) -> [return: bb207, unwind terminate(cleanup)];
    }

    bb197 (cleanup): {
        drop(_315) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb198 (cleanup): {
        drop(_278) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        drop(_259) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        drop(_171) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb201 (cleanup): {
        drop(_152) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb202 (cleanup): {
        drop(_91) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        drop(_50) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        drop(_24) -> [return: bb205, unwind terminate(cleanup)];
    }

    bb205 (cleanup): {
        resume;
    }

    bb206: {
        _446 = discriminant(_383);
        _430 = const false;
        _431 = const false;
        StorageDead(_383);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_377);
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_368);
        StorageDead(_367);
        goto -> bb188;
    }

    bb207 (cleanup): {
        _456 = discriminant(_383);
        goto -> bb204;
    }

    bb208 (cleanup): {
        _457 = discriminant(_332);
        goto -> bb204;
    }

    bb209 (cleanup): {
        _458 = discriminant(_305);
        goto -> bb197;
    }

    bb210 (cleanup): {
        _459 = discriminant(_25);
        goto -> bb205;
    }

    bb211 (cleanup): {
        _460 = discriminant(_14);
        goto -> bb205;
    }

    bb212 (cleanup): {
        _461 = discriminant(_4);
        goto -> bb205;
    }
}
