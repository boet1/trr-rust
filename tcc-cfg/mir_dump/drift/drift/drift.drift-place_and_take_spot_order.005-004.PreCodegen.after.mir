// MIR for `drift::place_and_take_spot_order` after PreCodegen

fn drift::place_and_take_spot_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::PlaceAndTake<'_>>, _2: order_params::OrderParams, _3: Option<keeper::SpotFulfillmentType>, _4: Option<u32>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    debug fulfillment_type => _3;
    debug maker_order_id => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::PlaceAndTake<'_>>;
    let mut _6: state::order_params::OrderParams;
    let mut _7: instructions::keeper::SpotFulfillmentType;
    let mut _8: std::option::Option<instructions::keeper::SpotFulfillmentType>;
    let mut _9: instructions::keeper::SpotFulfillmentType;
    let mut _10: std::option::Option<u32>;

    bb0: {
        StorageLive(_5);
        _5 = move _1;
        StorageLive(_6);
        _6 = _2;
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        _9 = keeper::SpotFulfillmentType::Match;
        _7 = Option::<keeper::SpotFulfillmentType>::unwrap_or(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        _10 = _4;
        _0 = instructions::user::handle_place_and_take_spot_order::<'_, '_>(move _5, move _6, move _7, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        return;
    }
}
