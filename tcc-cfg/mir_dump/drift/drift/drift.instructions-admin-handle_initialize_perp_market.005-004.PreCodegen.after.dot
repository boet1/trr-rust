digraph Mir_0_1081 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn admin::handle_initialize_perp_market(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::admin::InitializePerpMarket&lt;ReErased&gt;&gt;, _2: u16, _3: u128, _4: u128, _5: i64, _6: u128, _7: state::oracle::OracleSource, _8: state::perp_market::ContractTier, _9: u32, _10: u32, _11: u32, _12: u32, _13: u32, _14: bool, _15: u32, _16: u32, _17: u128, _18: u64, _19: u64, _20: u64, _21: u64, _22: u64, _23: u128, _24: u8, _25: u8, _26: [u8; 32_usize]) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _27: ();<br align="left"/>let mut _28: &amp;ReErased str;<br align="left"/>let _29: &amp;ReErased str;<br align="left"/>let mut _30: &amp;ReErased std::string::String;<br align="left"/>let _31: &amp;ReErased std::string::String;<br align="left"/>let _32: std::string::String;<br align="left"/>let _33: std::string::String;<br align="left"/>let mut _34: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _35: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _36: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _37: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _38: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _39: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _40: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _41: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _42: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _43: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _44: &amp;ReErased u16;<br align="left"/>let _45: &amp;ReErased u16;<br align="left"/>let _46: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _47: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _48: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _49: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _50: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _51: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _52: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _53: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _54: isize;<br align="left"/>let _55: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _56: !;<br align="left"/>let mut _57: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _58: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _59: anchor_lang::prelude::Clock;<br align="left"/>let mut _60: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;, anchor_lang::prelude::Clock&gt;;<br align="left"/>let mut _61: std::result::Result&lt;anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _62: isize;<br align="left"/>let _63: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _64: !;<br align="left"/>let mut _65: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let _66: anchor_lang::prelude::Clock;<br align="left"/>let _67: i64;<br align="left"/>let _68: u64;<br align="left"/>let _69: ();<br align="left"/>let mut _70: bool;<br align="left"/>let mut _71: u128;<br align="left"/>let mut _72: u128;<br align="left"/>let mut _73: !;<br align="left"/>let mut _74: anchor_lang::error::Error;<br align="left"/>let mut _75: error::ErrorCode;<br align="left"/>let _76: ();<br align="left"/>let mut _77: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _78: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _79: bool;<br align="left"/>let mut _80: &amp;ReErased std::ops::RangeInclusive&lt;u8&gt;;<br align="left"/>let _81: std::ops::RangeInclusive&lt;u8&gt;;<br align="left"/>let mut _82: &amp;ReErased u8;<br align="left"/>let _83: &amp;ReErased u8;<br align="left"/>let mut _84: ();<br align="left"/>let _85: error::ErrorCode;<br align="left"/>let _86: ();<br align="left"/>let mut _87: &amp;ReErased str;<br align="left"/>let _88: &amp;ReErased str;<br align="left"/>let mut _89: &amp;ReErased std::string::String;<br align="left"/>let _90: &amp;ReErased std::string::String;<br align="left"/>let _91: std::string::String;<br align="left"/>let _92: std::string::String;<br align="left"/>let mut _93: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _94: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _95: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _96: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _97: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _98: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _99: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _100: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _101: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _102: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _103: &amp;ReErased error::ErrorCode;<br align="left"/>let _104: &amp;ReErased error::ErrorCode;<br align="left"/>let _105: ();<br align="left"/>let mut _106: &amp;ReErased str;<br align="left"/>let _107: &amp;ReErased str;<br align="left"/>let mut _108: &amp;ReErased std::string::String;<br align="left"/>let _109: &amp;ReErased std::string::String;<br align="left"/>let _110: std::string::String;<br align="left"/>let _111: std::string::String;<br align="left"/>let mut _112: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _113: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _114: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _115: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _116: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _117: error::ErrorCode;<br align="left"/>let mut _118: isize;<br align="left"/>let _119: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _120: !;<br align="left"/>let mut _121: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _122: ();<br align="left"/>let _123: ();<br align="left"/>let mut _124: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _125: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _126: bool;<br align="left"/>let mut _127: &amp;ReErased std::ops::RangeInclusive&lt;u8&gt;;<br align="left"/>let _128: std::ops::RangeInclusive&lt;u8&gt;;<br align="left"/>let mut _129: &amp;ReErased u8;<br align="left"/>let _130: &amp;ReErased u8;<br align="left"/>let mut _131: ();<br align="left"/>let _132: error::ErrorCode;<br align="left"/>let _133: ();<br align="left"/>let mut _134: &amp;ReErased str;<br align="left"/>let _135: &amp;ReErased str;<br align="left"/>let mut _136: &amp;ReErased std::string::String;<br align="left"/>let _137: &amp;ReErased std::string::String;<br align="left"/>let _138: std::string::String;<br align="left"/>let _139: std::string::String;<br align="left"/>let mut _140: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _141: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _142: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _143: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _144: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _145: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _146: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _147: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _148: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _149: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _150: &amp;ReErased error::ErrorCode;<br align="left"/>let _151: &amp;ReErased error::ErrorCode;<br align="left"/>let _152: ();<br align="left"/>let mut _153: &amp;ReErased str;<br align="left"/>let _154: &amp;ReErased str;<br align="left"/>let mut _155: &amp;ReErased std::string::String;<br align="left"/>let _156: &amp;ReErased std::string::String;<br align="left"/>let _157: std::string::String;<br align="left"/>let _158: std::string::String;<br align="left"/>let mut _159: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _160: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _161: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _162: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _163: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _164: error::ErrorCode;<br align="left"/>let mut _165: isize;<br align="left"/>let _166: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _167: !;<br align="left"/>let mut _168: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _169: ();<br align="left"/>let _170: u64;<br align="left"/>let mut _171: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _172: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _173: u128;<br align="left"/>let mut _174: u128;<br align="left"/>let mut _175: u128;<br align="left"/>let mut _176: isize;<br align="left"/>let _177: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _178: !;<br align="left"/>let mut _179: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _180: u64;<br align="left"/>let _181: ();<br align="left"/>let mut _182: (&amp;ReErased u128, &amp;ReErased u128);<br align="left"/>let mut _183: &amp;ReErased u128;<br align="left"/>let mut _184: &amp;ReErased u128;<br align="left"/>let _185: u128;<br align="left"/>let mut _186: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _187: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _188: u64;<br align="left"/>let mut _189: isize;<br align="left"/>let _190: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _191: !;<br align="left"/>let mut _192: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _193: u128;<br align="left"/>let _194: &amp;ReErased u128;<br align="left"/>let _195: &amp;ReErased u128;<br align="left"/>let mut _196: bool;<br align="left"/>let mut _197: u128;<br align="left"/>let mut _198: u128;<br align="left"/>let mut _199: !;<br align="left"/>let _200: core::panicking::AssertKind;<br align="left"/>let _201: !;<br align="left"/>let mut _202: core::panicking::AssertKind;<br align="left"/>let mut _203: &amp;ReErased u128;<br align="left"/>let _204: &amp;ReErased u128;<br align="left"/>let mut _205: &amp;ReErased u128;<br align="left"/>let _206: &amp;ReErased u128;<br align="left"/>let mut _207: std::option::Option&lt;std::fmt::Arguments&lt;ReErased&gt;&gt;;<br align="left"/>let _208: u128;<br align="left"/>let _209: math::bn::U192;<br align="left"/>let mut _210: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _211: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _212: math::bn::U192;<br align="left"/>let mut _213: u128;<br align="left"/>let mut _214: math::bn::U192;<br align="left"/>let mut _215: u128;<br align="left"/>let mut _216: isize;<br align="left"/>let _217: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _218: !;<br align="left"/>let mut _219: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _220: math::bn::U192;<br align="left"/>let _221: u128;<br align="left"/>let _222: u128;<br align="left"/>let mut _223: (u128, u128);<br align="left"/>let mut _224: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _225: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _226: u128;<br align="left"/>let mut _227: u128;<br align="left"/>let mut _228: isize;<br align="left"/>let _229: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _230: !;<br align="left"/>let mut _231: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _232: (u128, u128);<br align="left"/>let _233: ();<br align="left"/>let mut _234: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _235: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _236: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _237: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _238: isize;<br align="left"/>let _239: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _240: !;<br align="left"/>let mut _241: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _242: ();<br align="left"/>let _243: i64;<br align="left"/>let _244: i64;<br align="left"/>let _245: i64;<br align="left"/>let mut _246: (i64, i64, i64);<br align="left"/>let mut _247: isize;<br align="left"/>let _248: i64;<br align="left"/>let _249: i64;<br align="left"/>let mut _250: state::oracle::OraclePriceData;<br align="left"/>let mut _251: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _252: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _253: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _254: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _255: u64;<br align="left"/>let mut _256: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _257: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _258: state::oracle::OracleSource;<br align="left"/>let mut _259: isize;<br align="left"/>let _260: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _261: !;<br align="left"/>let mut _262: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _263: state::oracle::OraclePriceData;<br align="left"/>let _264: i64;<br align="left"/>let mut _265: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _266: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _267: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _268: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _269: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _270: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _271: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _272: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _273: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _274: state::oracle::OracleSource;<br align="left"/>let mut _275: isize;<br align="left"/>let _276: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _277: !;<br align="left"/>let mut _278: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _279: i64;<br align="left"/>let mut _280: i64;<br align="left"/>let mut _281: i64;<br align="left"/>let mut _282: i64;<br align="left"/>let _283: i64;<br align="left"/>let _284: i64;<br align="left"/>let mut _285: state::oracle::OraclePriceData;<br align="left"/>let mut _286: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _287: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _288: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _289: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _290: u64;<br align="left"/>let mut _291: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _292: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _293: state::oracle::OracleSource;<br align="left"/>let mut _294: isize;<br align="left"/>let _295: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _296: !;<br align="left"/>let mut _297: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _298: state::oracle::OraclePriceData;<br align="left"/>let _299: i64;<br align="left"/>let mut _300: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _301: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _302: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _303: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _304: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _305: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _306: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _307: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _308: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _309: state::oracle::OracleSource;<br align="left"/>let mut _310: isize;<br align="left"/>let _311: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _312: !;<br align="left"/>let mut _313: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _314: i64;<br align="left"/>let mut _315: i64;<br align="left"/>let mut _316: i64;<br align="left"/>let mut _317: i64;<br align="left"/>let _318: i64;<br align="left"/>let _319: i64;<br align="left"/>let mut _320: state::oracle::OraclePriceData;<br align="left"/>let mut _321: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _322: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _323: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _324: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _325: u64;<br align="left"/>let mut _326: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _327: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _328: state::oracle::OracleSource;<br align="left"/>let mut _329: isize;<br align="left"/>let _330: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _331: !;<br align="left"/>let mut _332: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _333: state::oracle::OraclePriceData;<br align="left"/>let _334: i64;<br align="left"/>let mut _335: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _336: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _337: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _338: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _339: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _340: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _341: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _342: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _343: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _344: state::oracle::OracleSource;<br align="left"/>let mut _345: isize;<br align="left"/>let _346: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _347: !;<br align="left"/>let mut _348: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _349: i64;<br align="left"/>let mut _350: i64;<br align="left"/>let mut _351: i64;<br align="left"/>let mut _352: i64;<br align="left"/>let _353: i64;<br align="left"/>let _354: i64;<br align="left"/>let mut _355: state::oracle::OraclePriceData;<br align="left"/>let mut _356: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _357: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _358: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _359: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _360: u64;<br align="left"/>let mut _361: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _362: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _363: state::oracle::OracleSource;<br align="left"/>let mut _364: isize;<br align="left"/>let _365: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _366: !;<br align="left"/>let mut _367: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _368: state::oracle::OraclePriceData;<br align="left"/>let mut _369: i64;<br align="left"/>let mut _370: i64;<br align="left"/>let _371: i64;<br align="left"/>let _372: i64;<br align="left"/>let mut _373: state::oracle::OraclePriceData;<br align="left"/>let mut _374: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _375: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _376: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _377: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _378: u64;<br align="left"/>let mut _379: isize;<br align="left"/>let _380: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _381: !;<br align="left"/>let mut _382: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _383: state::oracle::OraclePriceData;<br align="left"/>let mut _384: i64;<br align="left"/>let mut _385: i64;<br align="left"/>let mut _386: i64;<br align="left"/>let mut _387: !;<br align="left"/>let _388: ();<br align="left"/>let mut _389: &amp;ReErased str;<br align="left"/>let _390: &amp;ReErased str;<br align="left"/>let mut _391: anchor_lang::error::Error;<br align="left"/>let mut _392: error::ErrorCode;<br align="left"/>let _393: i64;<br align="left"/>let _394: i64;<br align="left"/>let mut _395: state::oracle::OraclePriceData;<br align="left"/>let mut _396: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _397: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _398: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _399: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _400: u64;<br align="left"/>let mut _401: isize;<br align="left"/>let _402: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _403: !;<br align="left"/>let mut _404: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _405: state::oracle::OraclePriceData;<br align="left"/>let mut _406: i64;<br align="left"/>let mut _407: i64;<br align="left"/>let mut _408: i64;<br align="left"/>let _409: i64;<br align="left"/>let _410: i64;<br align="left"/>let mut _411: state::oracle::OraclePriceData;<br align="left"/>let mut _412: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _413: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _414: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _415: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _416: u64;<br align="left"/>let mut _417: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _418: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _419: state::oracle::OracleSource;<br align="left"/>let mut _420: isize;<br align="left"/>let _421: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _422: !;<br align="left"/>let mut _423: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _424: state::oracle::OraclePriceData;<br align="left"/>let _425: i64;<br align="left"/>let mut _426: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _427: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _428: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _429: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _430: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _431: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _432: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _433: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _434: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _435: state::oracle::OracleSource;<br align="left"/>let mut _436: isize;<br align="left"/>let _437: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _438: !;<br align="left"/>let mut _439: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _440: i64;<br align="left"/>let mut _441: i64;<br align="left"/>let mut _442: i64;<br align="left"/>let mut _443: i64;<br align="left"/>let _444: i64;<br align="left"/>let _445: i64;<br align="left"/>let mut _446: state::oracle::OraclePriceData;<br align="left"/>let mut _447: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _448: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _449: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _450: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _451: u64;<br align="left"/>let mut _452: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _453: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _454: state::oracle::OracleSource;<br align="left"/>let mut _455: isize;<br align="left"/>let _456: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _457: !;<br align="left"/>let mut _458: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _459: state::oracle::OraclePriceData;<br align="left"/>let _460: i64;<br align="left"/>let mut _461: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _462: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _463: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _464: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _465: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _466: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _467: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _468: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _469: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _470: state::oracle::OracleSource;<br align="left"/>let mut _471: isize;<br align="left"/>let _472: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _473: !;<br align="left"/>let mut _474: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _475: i64;<br align="left"/>let mut _476: i64;<br align="left"/>let mut _477: i64;<br align="left"/>let mut _478: i64;<br align="left"/>let _479: i64;<br align="left"/>let _480: i64;<br align="left"/>let mut _481: state::oracle::OraclePriceData;<br align="left"/>let mut _482: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _483: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _484: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _485: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _486: u64;<br align="left"/>let mut _487: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _488: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _489: state::oracle::OracleSource;<br align="left"/>let mut _490: isize;<br align="left"/>let _491: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _492: !;<br align="left"/>let mut _493: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _494: state::oracle::OraclePriceData;<br align="left"/>let _495: i64;<br align="left"/>let mut _496: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _497: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _498: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _499: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _500: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _501: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _502: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _503: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _504: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _505: state::oracle::OracleSource;<br align="left"/>let mut _506: isize;<br align="left"/>let _507: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _508: !;<br align="left"/>let mut _509: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _510: i64;<br align="left"/>let mut _511: i64;<br align="left"/>let mut _512: i64;<br align="left"/>let mut _513: i64;<br align="left"/>let _514: i64;<br align="left"/>let _515: i64;<br align="left"/>let mut _516: state::oracle::OraclePriceData;<br align="left"/>let mut _517: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _518: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _519: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _520: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _521: u64;<br align="left"/>let mut _522: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _523: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _524: state::oracle::OracleSource;<br align="left"/>let mut _525: isize;<br align="left"/>let _526: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _527: !;<br align="left"/>let mut _528: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _529: state::oracle::OraclePriceData;<br align="left"/>let mut _530: i64;<br align="left"/>let mut _531: i64;<br align="left"/>let _532: i64;<br align="left"/>let _533: i64;<br align="left"/>let mut _534: state::oracle::OraclePriceData;<br align="left"/>let mut _535: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _536: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _537: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _538: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _539: u64;<br align="left"/>let mut _540: isize;<br align="left"/>let _541: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _542: !;<br align="left"/>let mut _543: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _544: state::oracle::OraclePriceData;<br align="left"/>let mut _545: i64;<br align="left"/>let mut _546: i64;<br align="left"/>let mut _547: i64;<br align="left"/>let _548: i64;<br align="left"/>let _549: i64;<br align="left"/>let mut _550: state::oracle::OraclePriceData;<br align="left"/>let mut _551: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _552: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _553: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _554: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _555: u64;<br align="left"/>let mut _556: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _557: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _558: state::oracle::OracleSource;<br align="left"/>let mut _559: isize;<br align="left"/>let _560: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _561: !;<br align="left"/>let mut _562: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _563: state::oracle::OraclePriceData;<br align="left"/>let _564: i64;<br align="left"/>let mut _565: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _566: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _567: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _568: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _569: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _570: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _571: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _572: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _573: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _574: state::oracle::OracleSource;<br align="left"/>let mut _575: isize;<br align="left"/>let _576: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _577: !;<br align="left"/>let mut _578: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _579: i64;<br align="left"/>let mut _580: i64;<br align="left"/>let mut _581: i64;<br align="left"/>let mut _582: i64;<br align="left"/>let _583: i64;<br align="left"/>let _584: i64;<br align="left"/>let mut _585: state::oracle::OraclePriceData;<br align="left"/>let mut _586: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _587: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _588: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _589: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _590: u64;<br align="left"/>let mut _591: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _592: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _593: state::oracle::OracleSource;<br align="left"/>let mut _594: isize;<br align="left"/>let _595: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _596: !;<br align="left"/>let mut _597: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _598: state::oracle::OraclePriceData;<br align="left"/>let _599: i64;<br align="left"/>let mut _600: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _601: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _602: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _603: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _604: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _605: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _606: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _607: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _608: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _609: state::oracle::OracleSource;<br align="left"/>let mut _610: isize;<br align="left"/>let _611: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _612: !;<br align="left"/>let mut _613: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _614: i64;<br align="left"/>let mut _615: i64;<br align="left"/>let mut _616: i64;<br align="left"/>let mut _617: i64;<br align="left"/>let _618: i64;<br align="left"/>let _619: i64;<br align="left"/>let mut _620: state::oracle::OraclePriceData;<br align="left"/>let mut _621: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _622: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _623: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _624: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _625: u64;<br align="left"/>let mut _626: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _627: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _628: state::oracle::OracleSource;<br align="left"/>let mut _629: isize;<br align="left"/>let _630: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _631: !;<br align="left"/>let mut _632: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _633: state::oracle::OraclePriceData;<br align="left"/>let _634: i64;<br align="left"/>let mut _635: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _636: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _637: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _638: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _639: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _640: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _641: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _642: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _643: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _644: state::oracle::OracleSource;<br align="left"/>let mut _645: isize;<br align="left"/>let _646: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _647: !;<br align="left"/>let mut _648: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _649: i64;<br align="left"/>let mut _650: i64;<br align="left"/>let mut _651: i64;<br align="left"/>let mut _652: i64;<br align="left"/>let _653: i64;<br align="left"/>let _654: i64;<br align="left"/>let mut _655: state::oracle::OraclePriceData;<br align="left"/>let mut _656: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _657: std::result::Result&lt;state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _658: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _659: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _660: u64;<br align="left"/>let mut _661: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _662: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _663: state::oracle::OracleSource;<br align="left"/>let mut _664: isize;<br align="left"/>let _665: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _666: !;<br align="left"/>let mut _667: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _668: state::oracle::OraclePriceData;<br align="left"/>let mut _669: i64;<br align="left"/>let mut _670: i64;<br align="left"/>let _671: ();<br align="left"/>let mut _672: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _673: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _674: u32;<br align="left"/>let mut _675: u32;<br align="left"/>let mut _676: u32;<br align="left"/>let mut _677: u32;<br align="left"/>let mut _678: isize;<br align="left"/>let _679: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _680: !;<br align="left"/>let mut _681: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _682: ();<br align="left"/>let _683: &amp;ReErased mut std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let _684: ();<br align="left"/>let mut _685: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _686: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _687: bool;<br align="left"/>let mut _688: u16;<br align="left"/>let mut _689: u16;<br align="left"/>let mut _690: &amp;ReErased state::state::State;<br align="left"/>let mut _691: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _692: ();<br align="left"/>let _693: error::ErrorCode;<br align="left"/>let _694: ();<br align="left"/>let mut _695: &amp;ReErased str;<br align="left"/>let _696: &amp;ReErased str;<br align="left"/>let mut _697: &amp;ReErased std::string::String;<br align="left"/>let _698: &amp;ReErased std::string::String;<br align="left"/>let _699: std::string::String;<br align="left"/>let _700: std::string::String;<br align="left"/>let mut _701: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _702: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _703: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _704: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _705: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _706: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _707: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _708: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _709: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _710: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _711: &amp;ReErased error::ErrorCode;<br align="left"/>let _712: &amp;ReErased error::ErrorCode;<br align="left"/>let _713: ();<br align="left"/>let mut _714: &amp;ReErased str;<br align="left"/>let _715: &amp;ReErased str;<br align="left"/>let mut _716: &amp;ReErased std::string::String;<br align="left"/>let _717: &amp;ReErased std::string::String;<br align="left"/>let _718: std::string::String;<br align="left"/>let _719: std::string::String;<br align="left"/>let mut _720: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _721: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _722: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _723: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _724: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _725: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _726: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _727: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _728: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _729: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _730: &amp;ReErased u16;<br align="left"/>let _731: &amp;ReErased u16;<br align="left"/>let mut _732: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _733: &amp;ReErased u16;<br align="left"/>let _734: &amp;ReErased u16;<br align="left"/>let _735: &amp;ReErased state::state::State;<br align="left"/>let mut _736: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _737: error::ErrorCode;<br align="left"/>let mut _738: isize;<br align="left"/>let _739: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _740: !;<br align="left"/>let mut _741: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _742: ();<br align="left"/>let _743: ();<br align="left"/>let mut _744: bool;<br align="left"/>let _745: ();<br align="left"/>let mut _746: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _747: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _748: bool;<br align="left"/>let mut _749: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _750: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _751: &amp;ReErased anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _752: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _753: &amp;ReErased state::state::State;<br align="left"/>let mut _754: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _755: ();<br align="left"/>let _756: error::ErrorCode;<br align="left"/>let _757: ();<br align="left"/>let mut _758: &amp;ReErased str;<br align="left"/>let _759: &amp;ReErased str;<br align="left"/>let mut _760: &amp;ReErased std::string::String;<br align="left"/>let _761: &amp;ReErased std::string::String;<br align="left"/>let _762: std::string::String;<br align="left"/>let _763: std::string::String;<br align="left"/>let mut _764: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _765: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _766: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _767: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _768: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _769: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _770: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _771: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _772: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _773: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _774: &amp;ReErased error::ErrorCode;<br align="left"/>let _775: &amp;ReErased error::ErrorCode;<br align="left"/>let _776: ();<br align="left"/>let mut _777: &amp;ReErased str;<br align="left"/>let _778: &amp;ReErased str;<br align="left"/>let mut _779: error::ErrorCode;<br align="left"/>let mut _780: isize;<br align="left"/>let _781: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _782: !;<br align="left"/>let mut _783: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _784: ();<br align="left"/>let mut _785: state::perp_market::PerpMarket;<br align="left"/>let mut _786: state::perp_market::ContractType;<br align="left"/>let mut _787: state::perp_market::ContractTier;<br align="left"/>let mut _788: state::perp_market::MarketStatus;<br align="left"/>let mut _789: bool;<br align="left"/>let mut _790: [u8; 32_usize];<br align="left"/>let mut _791: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _792: u16;<br align="left"/>let mut _793: u32;<br align="left"/>let mut _794: u32;<br align="left"/>let mut _795: u32;<br align="left"/>let mut _796: state::perp_market::PoolBalance;<br align="left"/>let mut _797: state::perp_market::InsuranceClaim;<br align="left"/>let mut _798: u64;<br align="left"/>let mut _799: u64;<br align="left"/>let mut _800: state::perp_market::InsuranceClaim;<br align="left"/>let mut _801: u32;<br align="left"/>let mut _802: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _803: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _804: isize;<br align="left"/>let _805: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _806: !;<br align="left"/>let mut _807: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _808: u32;<br align="left"/>let mut _809: u32;<br align="left"/>let mut _810: u32;<br align="left"/>let mut _811: [u8; 24_usize];<br align="left"/>let mut _812: state::perp_market::AMM;<br align="left"/>let mut _813: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _814: state::oracle::OracleSource;<br align="left"/>let mut _815: u128;<br align="left"/>let mut _816: u128;<br align="left"/>let mut _817: u128;<br align="left"/>let mut _818: u128;<br align="left"/>let mut _819: u128;<br align="left"/>let mut _820: u128;<br align="left"/>let mut _821: u128;<br align="left"/>let mut _822: i64;<br align="left"/>let mut _823: i64;<br align="left"/>let mut _824: u64;<br align="left"/>let mut _825: u64;<br align="left"/>let mut _826: i64;<br align="left"/>let mut _827: u128;<br align="left"/>let mut _828: u128;<br align="left"/>let mut _829: u128;<br align="left"/>let mut _830: u128;<br align="left"/>let mut _831: u128;<br align="left"/>let mut _832: state::oracle::HistoricalOracleData;<br align="left"/>let mut _833: i64;<br align="left"/>let mut _834: i64;<br align="left"/>let mut _835: i64;<br align="left"/>let mut _836: i64;<br align="left"/>let mut _837: i64;<br align="left"/>let mut _838: state::oracle::HistoricalOracleData;<br align="left"/>let mut _839: i64;<br align="left"/>let mut _840: u64;<br align="left"/>let mut _841: u64;<br align="left"/>let mut _842: u64;<br align="left"/>let mut _843: u32;<br align="left"/>let mut _844: u32;<br align="left"/>let mut _845: u64;<br align="left"/>let mut _846: u64;<br align="left"/>let mut _847: u128;<br align="left"/>let mut _848: i64;<br align="left"/>let mut _849: u8;<br align="left"/>let mut _850: state::perp_market::PoolBalance;<br align="left"/>let mut _851: u64;<br align="left"/>let mut _852: u8;<br align="left"/>let mut _853: [u8; 3_usize];<br align="left"/>let mut _854: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _855: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _856: ();<br align="left"/>let mut _857: u16;<br align="left"/>let mut _858: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u16&gt;;<br align="left"/>let mut _859: std::result::Result&lt;u16, error::ErrorCode&gt;;<br align="left"/>let mut _860: std::option::Option&lt;u16&gt;;<br align="left"/>let mut _861: u16;<br align="left"/>let mut _862: &amp;ReErased state::state::State;<br align="left"/>let mut _863: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _864: Closure(DefId(0:5487 ~ drift[d311]::instructions::admin::handle_initialize_perp_market::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn(()) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _865: isize;<br align="left"/>let _866: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _867: !;<br align="left"/>let mut _868: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _869: u16;<br align="left"/>let mut _870: &amp;ReErased mut state::state::State;<br align="left"/>let mut _871: &amp;ReErased mut anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let _872: ();<br align="left"/>let mut _873: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _874: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _875: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _876: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _877: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _878: u128;<br align="left"/>let mut _879: isize;<br align="left"/>let _880: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _881: !;<br align="left"/>let mut _882: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _883: ();<br align="left"/>let _884: ();<br align="left"/>let _885: ();<br align="left"/>let mut _886: &amp;ReErased str;<br align="left"/>let _887: &amp;ReErased str;<br align="left"/>let mut _888: &amp;ReErased std::string::String;<br align="left"/>let _889: &amp;ReErased std::string::String;<br align="left"/>let _890: std::string::String;<br align="left"/>let _891: std::string::String;<br align="left"/>let mut _892: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _893: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _894: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _895: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _896: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _897: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _898: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _899: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _900: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _901: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _902: &amp;ReErased i64;<br align="left"/>let _903: &amp;ReErased i64;<br align="left"/>let _904: i128;<br align="left"/>let _905: i128;<br align="left"/>let mut _906: (i128, i128);<br align="left"/>let mut _907: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i128, i128)&gt;;<br align="left"/>let mut _908: std::result::Result&lt;(i128, i128), error::ErrorCode&gt;;<br align="left"/>let mut _909: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _910: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _911: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _912: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _913: isize;<br align="left"/>let _914: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _915: !;<br align="left"/>let mut _916: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _917: (i128, i128);<br align="left"/>let _918: ();<br align="left"/>let _919: ();<br align="left"/>let mut _920: &amp;ReErased str;<br align="left"/>let _921: &amp;ReErased str;<br align="left"/>let mut _922: &amp;ReErased std::string::String;<br align="left"/>let _923: &amp;ReErased std::string::String;<br align="left"/>let _924: std::string::String;<br align="left"/>let _925: std::string::String;<br align="left"/>let mut _926: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _927: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _928: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _929: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _930: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _931: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _932: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _933: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _934: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _935: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _936: &amp;ReErased i128;<br align="left"/>let _937: &amp;ReErased i128;<br align="left"/>let _938: ();<br align="left"/>let mut _939: &amp;ReErased str;<br align="left"/>let _940: &amp;ReErased str;<br align="left"/>let mut _941: &amp;ReErased std::string::String;<br align="left"/>let _942: &amp;ReErased std::string::String;<br align="left"/>let _943: std::string::String;<br align="left"/>let _944: std::string::String;<br align="left"/>let mut _945: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _946: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _947: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _948: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _949: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _950: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _951: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _952: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _953: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _954: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _955: &amp;ReErased i128;<br align="left"/>let _956: &amp;ReErased i128;<br align="left"/>let _957: u64;<br align="left"/>let mut _958: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _959: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _960: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _961: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _962: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _963: isize;<br align="left"/>let _964: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _965: !;<br align="left"/>let mut _966: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _967: u64;<br align="left"/>let _968: u64;<br align="left"/>let _969: u64;<br align="left"/>let mut _970: (u64, u64);<br align="left"/>let mut _971: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _972: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _973: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _974: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _975: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _976: u64;<br align="left"/>let mut _977: isize;<br align="left"/>let _978: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _979: !;<br align="left"/>let mut _980: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _981: (u64, u64);<br align="left"/>let _982: ();<br align="left"/>let _983: ();<br align="left"/>let mut _984: &amp;ReErased str;<br align="left"/>let _985: &amp;ReErased str;<br align="left"/>let mut _986: &amp;ReErased std::string::String;<br align="left"/>let _987: &amp;ReErased std::string::String;<br align="left"/>let _988: std::string::String;<br align="left"/>let _989: std::string::String;<br align="left"/>let mut _990: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _991: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _992: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _993: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _994: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _995: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _996: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _997: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _998: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _999: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _1000: &amp;ReErased u64;<br align="left"/>let _1001: &amp;ReErased u64;<br align="left"/>let _1002: ();<br align="left"/>let mut _1003: &amp;ReErased str;<br align="left"/>let _1004: &amp;ReErased str;<br align="left"/>let mut _1005: &amp;ReErased std::string::String;<br align="left"/>let _1006: &amp;ReErased std::string::String;<br align="left"/>let _1007: std::string::String;<br align="left"/>let _1008: std::string::String;<br align="left"/>let mut _1009: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _1010: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _1011: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _1012: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _1013: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1014: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _1015: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _1016: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _1017: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _1018: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _1019: &amp;ReErased u64;<br align="left"/>let _1020: &amp;ReErased u64;<br align="left"/>let _1021: ();<br align="left"/>let mut _1022: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1023: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1024: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _1025: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1026: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1027: isize;<br align="left"/>let _1028: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1029: !;<br align="left"/>let mut _1030: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1031: ();<br align="left"/>let mut _1032: ();<br align="left"/>let mut _1033: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1034: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1035: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1036: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1037: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1038: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1039: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1040: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1041: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1042: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1043: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1044: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1045: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1046: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1047: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1048: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1049: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1050: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1051: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1052: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1053: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1054: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1055: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1056: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1057: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1058: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1059: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1060: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1061: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _1062: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1063: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1064: &amp;ReErased std::ops::RangeInclusive&lt;u8&gt;;<br align="left"/>let mut _1065: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1066: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1067: &amp;ReErased std::ops::RangeInclusive&lt;u8&gt;;<br align="left"/>let mut _1068: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1069: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1070: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1071: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1072: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1073: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1074: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1075: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1076: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1077: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1078: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1079: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1080: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1081: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1082: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1083: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1084: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1085: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1086: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1087: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1088: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1089: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1090: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1091: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1092: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1093: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1094: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1095: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1096: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1097: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _1098: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _1099: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1100: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _1101: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _1102: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1103: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _1104: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _1105: isize;<br align="left"/>let mut _1106: isize;<br align="left"/>let mut _1107: isize;<br align="left"/>let mut _1108: isize;<br align="left"/>let mut _1109: isize;<br align="left"/>let mut _1110: isize;<br align="left"/>let mut _1111: isize;<br align="left"/>let mut _1112: isize;<br align="left"/>let mut _1113: isize;<br align="left"/>let mut _1114: isize;<br align="left"/>let mut _1115: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _1116: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _1117: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _1118: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _1119: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug market_index =&gt; _2;<br align="left"/>debug amm_base_asset_reserve =&gt; _3;<br align="left"/>debug amm_quote_asset_reserve =&gt; _4;<br align="left"/>debug amm_periodicity =&gt; _5;<br align="left"/>debug amm_peg_multiplier =&gt; _6;<br align="left"/>debug oracle_source =&gt; _7;<br align="left"/>debug contract_tier =&gt; _8;<br align="left"/>debug margin_ratio_initial =&gt; _9;<br align="left"/>debug margin_ratio_maintenance =&gt; _10;<br align="left"/>debug liquidator_fee =&gt; _11;<br align="left"/>debug if_liquidation_fee =&gt; _12;<br align="left"/>debug imf_factor =&gt; _13;<br align="left"/>debug active_status =&gt; _14;<br align="left"/>debug base_spread =&gt; _15;<br align="left"/>debug max_spread =&gt; _16;<br align="left"/>debug max_open_interest =&gt; _17;<br align="left"/>debug max_revenue_withdraw_per_period =&gt; _18;<br align="left"/>debug quote_max_insurance =&gt; _19;<br align="left"/>debug order_step_size =&gt; _20;<br align="left"/>debug order_tick_size =&gt; _21;<br align="left"/>debug min_order_size =&gt; _22;<br align="left"/>debug concentration_coef_scale =&gt; _23;<br align="left"/>debug curve_update_intensity =&gt; _24;<br align="left"/>debug amm_jit_intensity =&gt; _25;<br align="left"/>debug name =&gt; _26;<br align="left"/>debug res =&gt; _33;<br align="left"/>debug perp_market_pubkey =&gt; _46;<br align="left"/>debug perp_market =&gt; _49;<br align="left"/>debug residual =&gt; _55;<br align="left"/>debug val =&gt; _58;<br align="left"/>debug clock =&gt; _59;<br align="left"/>debug residual =&gt; _63;<br align="left"/>debug val =&gt; _66;<br align="left"/>debug now =&gt; _67;<br align="left"/>debug clock_slot =&gt; _68;<br align="left"/>debug error_code =&gt; _85;<br align="left"/>debug res =&gt; _92;<br align="left"/>debug res =&gt; _111;<br align="left"/>debug residual =&gt; _119;<br align="left"/>debug val =&gt; _122;<br align="left"/>debug error_code =&gt; _132;<br align="left"/>debug res =&gt; _139;<br align="left"/>debug res =&gt; _158;<br align="left"/>debug residual =&gt; _166;<br align="left"/>debug val =&gt; _169;<br align="left"/>debug init_reserve_price =&gt; _170;<br align="left"/>debug residual =&gt; _177;<br align="left"/>debug val =&gt; _180;<br align="left"/>debug residual =&gt; _190;<br align="left"/>debug val =&gt; _193;<br align="left"/>debug left_val =&gt; _194;<br align="left"/>debug right_val =&gt; _195;<br align="left"/>debug kind =&gt; _200;<br align="left"/>debug concentration_coef =&gt; _208;<br align="left"/>debug _k =&gt; _209;<br align="left"/>debug residual =&gt; _217;<br align="left"/>debug val =&gt; _220;<br align="left"/>debug min_base_asset_reserve =&gt; _221;<br align="left"/>debug max_base_asset_reserve =&gt; _222;<br align="left"/>debug residual =&gt; _229;<br align="left"/>debug val =&gt; _232;<br align="left"/>debug residual =&gt; _239;<br align="left"/>debug val =&gt; _242;<br align="left"/>debug oracle_price =&gt; _243;<br align="left"/>debug oracle_delay =&gt; _244;<br align="left"/>debug last_oracle_price_twap =&gt; _245;<br align="left"/>debug oracle_price =&gt; _248;<br align="left"/>debug oracle_delay =&gt; _249;<br align="left"/>debug residual =&gt; _260;<br align="left"/>debug val =&gt; _263;<br align="left"/>debug last_oracle_price_twap =&gt; _264;<br align="left"/>debug residual =&gt; _276;<br align="left"/>debug val =&gt; _279;<br align="left"/>debug oracle_price =&gt; _283;<br align="left"/>debug oracle_delay =&gt; _284;<br align="left"/>debug residual =&gt; _295;<br align="left"/>debug val =&gt; _298;<br align="left"/>debug last_oracle_price_twap =&gt; _299;<br align="left"/>debug residual =&gt; _311;<br align="left"/>debug val =&gt; _314;<br align="left"/>debug oracle_price =&gt; _318;<br align="left"/>debug oracle_delay =&gt; _319;<br align="left"/>debug residual =&gt; _330;<br align="left"/>debug val =&gt; _333;<br align="left"/>debug last_oracle_price_twap =&gt; _334;<br align="left"/>debug residual =&gt; _346;<br align="left"/>debug val =&gt; _349;<br align="left"/>debug oracle_price =&gt; _353;<br align="left"/>debug oracle_delay =&gt; _354;<br align="left"/>debug residual =&gt; _365;<br align="left"/>debug val =&gt; _368;<br align="left"/>debug oracle_price =&gt; _371;<br align="left"/>debug oracle_delay =&gt; _372;<br align="left"/>debug residual =&gt; _380;<br align="left"/>debug val =&gt; _383;<br align="left"/>debug oracle_price =&gt; _393;<br align="left"/>debug oracle_delay =&gt; _394;<br align="left"/>debug residual =&gt; _402;<br align="left"/>debug val =&gt; _405;<br align="left"/>debug oracle_price =&gt; _409;<br align="left"/>debug oracle_delay =&gt; _410;<br align="left"/>debug residual =&gt; _421;<br align="left"/>debug val =&gt; _424;<br align="left"/>debug last_oracle_price_twap =&gt; _425;<br align="left"/>debug residual =&gt; _437;<br align="left"/>debug val =&gt; _440;<br align="left"/>debug oracle_price =&gt; _444;<br align="left"/>debug oracle_delay =&gt; _445;<br align="left"/>debug residual =&gt; _456;<br align="left"/>debug val =&gt; _459;<br align="left"/>debug last_oracle_price_twap =&gt; _460;<br align="left"/>debug residual =&gt; _472;<br align="left"/>debug val =&gt; _475;<br align="left"/>debug oracle_price =&gt; _479;<br align="left"/>debug oracle_delay =&gt; _480;<br align="left"/>debug residual =&gt; _491;<br align="left"/>debug val =&gt; _494;<br align="left"/>debug last_oracle_price_twap =&gt; _495;<br align="left"/>debug residual =&gt; _507;<br align="left"/>debug val =&gt; _510;<br align="left"/>debug oracle_price =&gt; _514;<br align="left"/>debug oracle_delay =&gt; _515;<br align="left"/>debug residual =&gt; _526;<br align="left"/>debug val =&gt; _529;<br align="left"/>debug oracle_price =&gt; _532;<br align="left"/>debug oracle_delay =&gt; _533;<br align="left"/>debug residual =&gt; _541;<br align="left"/>debug val =&gt; _544;<br align="left"/>debug oracle_price =&gt; _548;<br align="left"/>debug oracle_delay =&gt; _549;<br align="left"/>debug residual =&gt; _560;<br align="left"/>debug val =&gt; _563;<br align="left"/>debug last_oracle_price_twap =&gt; _564;<br align="left"/>debug residual =&gt; _576;<br align="left"/>debug val =&gt; _579;<br align="left"/>debug oracle_price =&gt; _583;<br align="left"/>debug oracle_delay =&gt; _584;<br align="left"/>debug residual =&gt; _595;<br align="left"/>debug val =&gt; _598;<br align="left"/>debug last_oracle_price_twap =&gt; _599;<br align="left"/>debug residual =&gt; _611;<br align="left"/>debug val =&gt; _614;<br align="left"/>debug oracle_price =&gt; _618;<br align="left"/>debug oracle_delay =&gt; _619;<br align="left"/>debug residual =&gt; _630;<br align="left"/>debug val =&gt; _633;<br align="left"/>debug last_oracle_price_twap =&gt; _634;<br align="left"/>debug residual =&gt; _646;<br align="left"/>debug val =&gt; _649;<br align="left"/>debug oracle_price =&gt; _653;<br align="left"/>debug oracle_delay =&gt; _654;<br align="left"/>debug residual =&gt; _665;<br align="left"/>debug val =&gt; _668;<br align="left"/>debug residual =&gt; _679;<br align="left"/>debug val =&gt; _682;<br align="left"/>debug state =&gt; _683;<br align="left"/>debug error_code =&gt; _693;<br align="left"/>debug res =&gt; _700;<br align="left"/>debug res =&gt; _719;<br align="left"/>debug residual =&gt; _739;<br align="left"/>debug val =&gt; _742;<br align="left"/>debug error_code =&gt; _756;<br align="left"/>debug res =&gt; _763;<br align="left"/>debug residual =&gt; _781;<br align="left"/>debug val =&gt; _784;<br align="left"/>debug residual =&gt; _805;<br align="left"/>debug val =&gt; _808;<br align="left"/>debug residual =&gt; _866;<br align="left"/>debug val =&gt; _869;<br align="left"/>debug residual =&gt; _880;<br align="left"/>debug val =&gt; _883;<br align="left"/>debug res =&gt; _891;<br align="left"/>debug amm_bid_size =&gt; _904;<br align="left"/>debug amm_ask_size =&gt; _905;<br align="left"/>debug residual =&gt; _914;<br align="left"/>debug val =&gt; _917;<br align="left"/>debug res =&gt; _925;<br align="left"/>debug res =&gt; _944;<br align="left"/>debug mrk =&gt; _957;<br align="left"/>debug residual =&gt; _964;<br align="left"/>debug val =&gt; _967;<br align="left"/>debug amm_bid_price =&gt; _968;<br align="left"/>debug amm_ask_price =&gt; _969;<br align="left"/>debug residual =&gt; _978;<br align="left"/>debug val =&gt; _981;<br align="left"/>debug res =&gt; _989;<br align="left"/>debug res =&gt; _1008;<br align="left"/>debug residual =&gt; _1028;<br align="left"/>debug val =&gt; _1031;<br align="left"/>>;
    bb0__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_1068 = const _<br/>_37 = &amp;(*_1068)<br/>_36 = &amp;(*_37)<br/>_35 = move _36 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_36)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = &amp;_2<br/>_44 = &amp;(*_45)<br/></td></tr><tr><td align="left">_43 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _44)</td></tr></table>>];
    bb1__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_42 = [move _43]<br/>StorageDead(_43)<br/>_41 = &amp;_42<br/>_40 = &amp;(*_41)<br/>_39 = move _40 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">_34 = Arguments::&lt;'_&gt;::new_v1(move _35, move _39)</td></tr></table>>];
    bb2__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_33 = format(move _34)</td></tr></table>>];
    bb3__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_45)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_37)<br/>_32 = move _33<br/>StorageDead(_33)<br/>_31 = &amp;_32<br/>_30 = &amp;(*_31)<br/></td></tr><tr><td align="left">_29 = &lt;String as Deref&gt;::deref(move _30)</td></tr></table>>];
    bb4__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_28 = &amp;(*_29)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_27 = solana_program::log::sol_log(move _28)</td></tr></table>>];
    bb5__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/></td></tr><tr><td align="left">drop(_32)</td></tr></table>>];
    bb6__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_1069 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_48 = &amp;((*_1069).2: anchor_lang::prelude::AccountLoader&lt;'_, state::perp_market::PerpMarket&gt;)<br/></td></tr><tr><td align="left">_47 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, PerpMarket&gt; as anchor_lang::ToAccountInfo&lt;'_&gt;&gt;::to_account_info(move _48)</td></tr></table>>];
    bb7__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_46 = (_47.0: &amp;anchor_lang::prelude::Pubkey)<br/></td></tr><tr><td align="left">drop(_47)</td></tr></table>>];
    bb8__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_1070 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_53 = &amp;((*_1070).2: anchor_lang::prelude::AccountLoader&lt;'_, state::perp_market::PerpMarket&gt;)<br/></td></tr><tr><td align="left">_52 = anchor_lang::prelude::AccountLoader::&lt;'_, PerpMarket&gt;::load_init(move _53)</td></tr></table>>];
    bb9__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/></td></tr><tr><td align="left">_51 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _52)</td></tr></table>>];
    bb10__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>_54 = discriminant(_51)<br/></td></tr><tr><td align="left">switchInt(move _54)</td></tr></table>>];
    bb11__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = move ((_51 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_50 = move _58<br/>StorageDead(_58)<br/>_49 = &amp;mut _50<br/>_1105 = discriminant(_51)<br/>StorageDead(_51)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/></td></tr><tr><td align="left">_61 = &lt;anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar&gt;::get()</td></tr></table>>];
    bb12__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb13__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_55)<br/>_55 = move ((_51 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_57)<br/>_57 = move _55<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _57)</td></tr></table>>];
    bb14__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageDead(_55)<br/>_1111 = discriminant(_51)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">_60 = &lt;std::result::Result&lt;anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError&gt; as Try&gt;::branch(move _61)</td></tr></table>>];
    bb16__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>_62 = discriminant(_60)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb17__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = move ((_60 as Continue).0: anchor_lang::prelude::Clock)<br/>_59 = move _66<br/>StorageDead(_66)<br/>_1107 = discriminant(_60)<br/>StorageDead(_60)<br/>StorageLive(_67)<br/>_67 = (_59.4: i64)<br/>StorageLive(_68)<br/>_68 = (_59.0: u64)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = _3<br/>StorageLive(_72)<br/>_72 = _4<br/>_70 = Ne(move _71, move _72)<br/></td></tr><tr><td align="left">switchInt(move _70)</td></tr></table>>];
    bb18__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = move ((_60 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;)<br/>StorageLive(_65)<br/>_65 = move _63<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::prelude::ProgramError&gt;&gt;&gt;::from_residual(move _65)</td></tr></table>>];
    bb19__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_63)<br/>_1109 = discriminant(_60)<br/>StorageDead(_60)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_71)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>_75 = error::ErrorCode::InvalidInitialPeg<br/></td></tr><tr><td align="left">_74 = &lt;error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _75)</td></tr></table>>];
    bb21__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _74)<br/>StorageDead(_74)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_71)<br/>_69 = const ()<br/>StorageDead(_70)<br/>StorageDead(_69)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>_1067 = const _<br/>_80 = &amp;(*_1067)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = &amp;_24<br/>_82 = &amp;(*_83)<br/></td></tr><tr><td align="left">_79 = RangeInclusive::&lt;u8&gt;::contains::&lt;u8&gt;(move _80, move _82)</td></tr></table>>];
    bb23__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left">switchInt(move _79)</td></tr></table>>];
    bb24__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_82)<br/>StorageDead(_80)<br/>StorageLive(_84)<br/>_84 = ()<br/>_78 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _84)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_82)<br/>StorageDead(_80)<br/>StorageLive(_85)<br/>_85 = error::ErrorCode::DefaultError<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_1066 = const _<br/>_96 = &amp;(*_1066)<br/>_95 = &amp;(*_96)<br/>_94 = move _95 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_95)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>_104 = &amp;_85<br/>_103 = &amp;(*_104)<br/></td></tr><tr><td align="left">_102 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _103)</td></tr></table>>];
    bb26__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>_101 = [move _102]<br/>StorageDead(_102)<br/>_100 = &amp;_101<br/>_99 = &amp;(*_100)<br/>_98 = move _99 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_99)<br/></td></tr><tr><td align="left">_93 = Arguments::&lt;'_&gt;::new_v1(move _94, move _98)</td></tr></table>>];
    bb27__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">_92 = format(move _93)</td></tr></table>>];
    bb28__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageDead(_104)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/>StorageDead(_96)<br/>_91 = move _92<br/>StorageDead(_92)<br/>_90 = &amp;_91<br/>_89 = &amp;(*_90)<br/></td></tr><tr><td align="left">_88 = &lt;String as Deref&gt;::deref(move _89)</td></tr></table>>];
    bb29__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_87 = &amp;(*_88)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">_86 = solana_program::log::sol_log(move _87)</td></tr></table>>];
    bb30__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/></td></tr><tr><td align="left">drop(_91)</td></tr></table>>];
    bb31__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_88)<br/>StorageDead(_86)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>_1065 = const _<br/>_115 = &amp;(*_1065)<br/>_114 = &amp;(*_115)<br/>_113 = move _114 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_114)<br/></td></tr><tr><td align="left">_112 = Arguments::&lt;'_&gt;::new_const(move _113)</td></tr></table>>];
    bb32__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_113)<br/></td></tr><tr><td align="left">_111 = format(move _112)</td></tr></table>>];
    bb33__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>StorageDead(_115)<br/>_110 = move _111<br/>StorageDead(_111)<br/>_109 = &amp;_110<br/>_108 = &amp;(*_109)<br/></td></tr><tr><td align="left">_107 = &lt;String as Deref&gt;::deref(move _108)</td></tr></table>>];
    bb34__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_106 = &amp;(*_107)<br/>StorageDead(_108)<br/></td></tr><tr><td align="left">_105 = solana_program::log::sol_log(move _106)</td></tr></table>>];
    bb35__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/></td></tr><tr><td align="left">drop(_110)</td></tr></table>>];
    bb36__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_109)<br/>StorageDead(_107)<br/>StorageDead(_105)<br/>StorageLive(_117)<br/>_117 = _85<br/>_78 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _117)<br/>StorageDead(_117)<br/>StorageDead(_85)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/></td></tr><tr><td align="left">_77 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _78)</td></tr></table>>];
    bb38__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>_118 = discriminant(_77)<br/></td></tr><tr><td align="left">switchInt(move _118)</td></tr></table>>];
    bb39__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_122)<br/>_122 = ((_77 as Continue).0: ())<br/>_76 = _122<br/>StorageDead(_122)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>_1064 = const _<br/>_127 = &amp;(*_1064)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>_130 = &amp;_25<br/>_129 = &amp;(*_130)<br/></td></tr><tr><td align="left">_126 = RangeInclusive::&lt;u8&gt;::contains::&lt;u8&gt;(move _127, move _129)</td></tr></table>>];
    bb40__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageLive(_119)<br/>_119 = ((_77 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_121)<br/>_121 = _119<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _121)</td></tr></table>>];
    bb41__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_119)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left">switchInt(move _126)</td></tr></table>>];
    bb43__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_130)<br/>StorageDead(_129)<br/>StorageDead(_127)<br/>StorageLive(_131)<br/>_131 = ()<br/>_125 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _131)<br/>StorageDead(_131)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_130)<br/>StorageDead(_129)<br/>StorageDead(_127)<br/>StorageLive(_132)<br/>_132 = error::ErrorCode::DefaultError<br/>StorageLive(_133)<br/>StorageLive(_134)<br/>StorageLive(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>_1063 = const _<br/>_143 = &amp;(*_1063)<br/>_142 = &amp;(*_143)<br/>_141 = move _142 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_142)<br/>StorageLive(_145)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>_151 = &amp;_132<br/>_150 = &amp;(*_151)<br/></td></tr><tr><td align="left">_149 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _150)</td></tr></table>>];
    bb45__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_150)<br/>_148 = [move _149]<br/>StorageDead(_149)<br/>_147 = &amp;_148<br/>_146 = &amp;(*_147)<br/>_145 = move _146 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_146)<br/></td></tr><tr><td align="left">_140 = Arguments::&lt;'_&gt;::new_v1(move _141, move _145)</td></tr></table>>];
    bb46__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_145)<br/>StorageDead(_141)<br/></td></tr><tr><td align="left">_139 = format(move _140)</td></tr></table>>];
    bb47__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_140)<br/>StorageDead(_151)<br/>StorageDead(_148)<br/>StorageDead(_147)<br/>StorageDead(_143)<br/>_138 = move _139<br/>StorageDead(_139)<br/>_137 = &amp;_138<br/>_136 = &amp;(*_137)<br/></td></tr><tr><td align="left">_135 = &lt;String as Deref&gt;::deref(move _136)</td></tr></table>>];
    bb48__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">_134 = &amp;(*_135)<br/>StorageDead(_136)<br/></td></tr><tr><td align="left">_133 = solana_program::log::sol_log(move _134)</td></tr></table>>];
    bb49__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/></td></tr><tr><td align="left">drop(_138)</td></tr></table>>];
    bb50__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>StorageDead(_137)<br/>StorageDead(_135)<br/>StorageDead(_133)<br/>StorageLive(_152)<br/>StorageLive(_153)<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>StorageLive(_156)<br/>StorageLive(_157)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>_1062 = const _<br/>_162 = &amp;(*_1062)<br/>_161 = &amp;(*_162)<br/>_160 = move _161 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">_159 = Arguments::&lt;'_&gt;::new_const(move _160)</td></tr></table>>];
    bb51__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_160)<br/></td></tr><tr><td align="left">_158 = format(move _159)</td></tr></table>>];
    bb52__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>StorageDead(_162)<br/>_157 = move _158<br/>StorageDead(_158)<br/>_156 = &amp;_157<br/>_155 = &amp;(*_156)<br/></td></tr><tr><td align="left">_154 = &lt;String as Deref&gt;::deref(move _155)</td></tr></table>>];
    bb53__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">_153 = &amp;(*_154)<br/>StorageDead(_155)<br/></td></tr><tr><td align="left">_152 = solana_program::log::sol_log(move _153)</td></tr></table>>];
    bb54__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_153)<br/></td></tr><tr><td align="left">drop(_157)</td></tr></table>>];
    bb55__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_157)<br/>StorageDead(_156)<br/>StorageDead(_154)<br/>StorageDead(_152)<br/>StorageLive(_164)<br/>_164 = _132<br/>_125 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _164)<br/>StorageDead(_164)<br/>StorageDead(_132)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_126)<br/></td></tr><tr><td align="left">_124 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _125)</td></tr></table>>];
    bb57__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/>_165 = discriminant(_124)<br/></td></tr><tr><td align="left">switchInt(move _165)</td></tr></table>>];
    bb58__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageLive(_169)<br/>_169 = ((_124 as Continue).0: ())<br/>_123 = _169<br/>StorageDead(_169)<br/>StorageDead(_124)<br/>StorageDead(_123)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>_173 = _4<br/>StorageLive(_174)<br/>_174 = _3<br/>StorageLive(_175)<br/>_175 = _6<br/></td></tr><tr><td align="left">_172 = calculate_price(move _173, move _174, move _175)</td></tr></table>>];
    bb59__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageLive(_166)<br/>_166 = ((_124 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_168)<br/>_168 = _166<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _168)</td></tr></table>>];
    bb60__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_168)<br/>StorageDead(_166)<br/>StorageDead(_124)<br/>StorageDead(_123)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_175)<br/>StorageDead(_174)<br/>StorageDead(_173)<br/></td></tr><tr><td align="left">_171 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _172)</td></tr></table>>];
    bb62__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_172)<br/>_176 = discriminant(_171)<br/></td></tr><tr><td align="left">switchInt(move _176)</td></tr></table>>];
    bb63__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_180)<br/>_180 = ((_171 as Continue).0: u64)<br/>_170 = _180<br/>StorageDead(_180)<br/>StorageDead(_171)<br/>StorageLive(_181)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>_183 = &amp;_6<br/>StorageLive(_184)<br/>StorageLive(_185)<br/>StorageLive(_186)<br/>StorageLive(_187)<br/>StorageLive(_188)<br/>_188 = _170<br/></td></tr><tr><td align="left">_187 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _188)</td></tr></table>>];
    bb64__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageLive(_177)<br/>_177 = ((_171 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_179)<br/>_179 = _177<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _179)</td></tr></table>>];
    bb65__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_179)<br/>StorageDead(_177)<br/>StorageDead(_171)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_188)<br/></td></tr><tr><td align="left">_186 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _187)</td></tr></table>>];
    bb67__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/>_189 = discriminant(_186)<br/></td></tr><tr><td align="left">switchInt(move _189)</td></tr></table>>];
    bb68__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageLive(_193)<br/>_193 = ((_186 as Continue).0: u128)<br/>_185 = _193<br/>StorageDead(_193)<br/>_184 = &amp;_185<br/>_182 = (move _183, move _184)<br/>StorageDead(_184)<br/>StorageDead(_183)<br/>StorageLive(_194)<br/>_194 = (_182.0: &amp;u128)<br/>StorageLive(_195)<br/>_195 = (_182.1: &amp;u128)<br/>StorageLive(_196)<br/>StorageLive(_197)<br/>_197 = (*_194)<br/>StorageLive(_198)<br/>_198 = (*_195)<br/>_196 = Eq(move _197, move _198)<br/></td></tr><tr><td align="left">switchInt(move _196)</td></tr></table>>];
    bb69__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageLive(_190)<br/>_190 = ((_186 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_192)<br/>_192 = _190<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _192)</td></tr></table>>];
    bb70__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_192)<br/>StorageDead(_190)<br/>StorageDead(_184)<br/>StorageDead(_183)<br/>StorageDead(_186)<br/>StorageDead(_185)<br/>StorageDead(_182)<br/>StorageDead(_181)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb71__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/>StorageDead(_197)<br/>_181 = const ()<br/>StorageDead(_196)<br/>StorageDead(_195)<br/>StorageDead(_194)<br/>StorageDead(_186)<br/>StorageDead(_185)<br/>StorageDead(_182)<br/>StorageDead(_181)<br/>StorageLive(_208)<br/>_208 = const _<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>StorageLive(_213)<br/>_213 = _3<br/></td></tr><tr><td align="left">_212 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _213)</td></tr></table>>];
    bb72__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/>StorageDead(_197)<br/>StorageLive(_200)<br/>_200 = core::panicking::AssertKind::Eq<br/>StorageLive(_201)<br/>StorageLive(_202)<br/>_202 = move _200<br/>StorageLive(_203)<br/>StorageLive(_204)<br/>_204 = &amp;(*_194)<br/>_203 = &amp;(*_204)<br/>StorageLive(_205)<br/>StorageLive(_206)<br/>_206 = &amp;(*_195)<br/>_205 = &amp;(*_206)<br/>StorageLive(_207)<br/>_207 = Option::&lt;Arguments&lt;'_&gt;&gt;::None<br/></td></tr><tr><td align="left">_201 = assert_failed::&lt;u128, u128&gt;(move _202, move _203, move _205, move _207)</td></tr></table>>];
    bb73__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_213)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>_215 = _4<br/></td></tr><tr><td align="left">_214 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _215)</td></tr></table>>];
    bb74__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_215)<br/></td></tr><tr><td align="left">_211 = &lt;U192 as SafeMath&gt;::safe_mul(move _212, move _214)</td></tr></table>>];
    bb75__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_214)<br/>StorageDead(_212)<br/></td></tr><tr><td align="left">_210 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _211)</td></tr></table>>];
    bb76__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_211)<br/>_216 = discriminant(_210)<br/></td></tr><tr><td align="left">switchInt(move _216)</td></tr></table>>];
    bb77__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageLive(_220)<br/>_220 = ((_210 as Continue).0: math::bn::U192)<br/>_209 = _220<br/>StorageDead(_220)<br/>StorageDead(_210)<br/>StorageLive(_223)<br/>StorageLive(_224)<br/>StorageLive(_225)<br/>StorageLive(_226)<br/>_226 = _208<br/>StorageLive(_227)<br/>_227 = _3<br/></td></tr><tr><td align="left">_225 = calculate_bid_ask_bounds(move _226, move _227)</td></tr></table>>];
    bb78__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageLive(_217)<br/>_217 = ((_210 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_219)<br/>_219 = _217<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _219)</td></tr></table>>];
    bb79__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_219)<br/>StorageDead(_217)<br/>StorageDead(_210)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb80__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_227)<br/>StorageDead(_226)<br/></td></tr><tr><td align="left">_224 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _225)</td></tr></table>>];
    bb81__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_225)<br/>_228 = discriminant(_224)<br/></td></tr><tr><td align="left">switchInt(move _228)</td></tr></table>>];
    bb82__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageLive(_232)<br/>_232 = ((_224 as Continue).0: (u128, u128))<br/>_223 = _232<br/>StorageDead(_232)<br/>StorageLive(_221)<br/>_221 = (_223.0: u128)<br/>StorageLive(_222)<br/>_222 = (_223.1: u128)<br/>StorageDead(_224)<br/>StorageDead(_223)<br/>StorageLive(_233)<br/>StorageLive(_234)<br/>StorageLive(_235)<br/>StorageLive(_236)<br/>StorageLive(_237)<br/>_1071 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_237 = &amp;((*_1071).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_236 = &amp;(*_237)<br/></td></tr><tr><td align="left">_235 = OracleMap::&lt;'_&gt;::validate_oracle_account_info(move _236)</td></tr></table>>];
    bb83__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageLive(_229)<br/>_229 = ((_224 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_231)<br/>_231 = _229<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _231)</td></tr></table>>];
    bb84__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_231)<br/>StorageDead(_229)<br/>StorageDead(_224)<br/>StorageDead(_223)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb85__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_236)<br/></td></tr><tr><td align="left">_234 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _235)</td></tr></table>>];
    bb86__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_235)<br/>_238 = discriminant(_234)<br/></td></tr><tr><td align="left">switchInt(move _238)</td></tr></table>>];
    bb87__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageLive(_242)<br/>_242 = ((_234 as Continue).0: ())<br/>_233 = _242<br/>StorageDead(_242)<br/>StorageDead(_237)<br/>StorageDead(_234)<br/>StorageDead(_233)<br/>StorageLive(_246)<br/>_247 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _247)</td></tr></table>>];
    bb88__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageLive(_239)<br/>_239 = ((_234 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_241)<br/>_241 = _239<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _241)</td></tr></table>>];
    bb89__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_241)<br/>StorageDead(_239)<br/>StorageDead(_237)<br/>StorageDead(_234)<br/>StorageDead(_233)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb90__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageLive(_655)<br/>StorageLive(_656)<br/>StorageLive(_657)<br/>StorageLive(_658)<br/>StorageLive(_659)<br/>_1072 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_659 = &amp;((*_1072).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_658 = &amp;(*_659)<br/>StorageLive(_660)<br/>_660 = _68<br/>StorageLive(_661)<br/>StorageLive(_662)<br/>_1041 = const _<br/>_662 = &amp;(*_1041)<br/>_661 = &amp;(*_662)<br/></td></tr><tr><td align="left">_657 = get_pyth_price(move _658, move _660, move _661)</td></tr></table>>];
    bb91__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageLive(_250)<br/>StorageLive(_251)<br/>StorageLive(_252)<br/>StorageLive(_253)<br/>StorageLive(_254)<br/>_1073 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_254 = &amp;((*_1073).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_253 = &amp;(*_254)<br/>StorageLive(_255)<br/>_255 = _68<br/>StorageLive(_256)<br/>StorageLive(_257)<br/>_1061 = const _<br/>_257 = &amp;(*_1061)<br/>_256 = &amp;(*_257)<br/></td></tr><tr><td align="left">_252 = get_pyth_price(move _253, move _255, move _256)</td></tr></table>>];
    bb92__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_256)<br/>StorageDead(_255)<br/>StorageDead(_253)<br/></td></tr><tr><td align="left">_251 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _252)</td></tr></table>>];
    bb93__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_252)<br/>_259 = discriminant(_251)<br/></td></tr><tr><td align="left">switchInt(move _259)</td></tr></table>>];
    bb94__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageLive(_263)<br/>_263 = ((_251 as Continue).0: state::oracle::OraclePriceData)<br/>_250 = _263<br/>StorageDead(_263)<br/>StorageLive(_248)<br/>_248 = (_250.0: i64)<br/>StorageLive(_249)<br/>_249 = (_250.2: i64)<br/>StorageDead(_257)<br/>StorageDead(_254)<br/>StorageDead(_251)<br/>StorageDead(_250)<br/>StorageLive(_264)<br/>StorageLive(_265)<br/>StorageLive(_266)<br/>StorageLive(_267)<br/>StorageLive(_268)<br/>StorageLive(_269)<br/>_269 = &amp;(*_49)<br/></td></tr><tr><td align="left">_268 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _269)</td></tr></table>>];
    bb95__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageLive(_260)<br/>_260 = ((_251 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_262)<br/>_262 = _260<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _262)</td></tr></table>>];
    bb96__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_262)<br/>StorageDead(_260)<br/>StorageDead(_257)<br/>StorageDead(_254)<br/>StorageDead(_251)<br/>StorageDead(_250)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb97__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_269)<br/>_267 = &amp;((*_268).1: state::perp_market::AMM)<br/>StorageLive(_270)<br/>StorageLive(_271)<br/>_1074 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_271 = &amp;((*_1074).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_270 = &amp;(*_271)<br/>StorageLive(_272)<br/>StorageLive(_273)<br/>_1060 = const _<br/>_273 = &amp;(*_1060)<br/>_272 = &amp;(*_273)<br/></td></tr><tr><td align="left">_266 = AMM::get_pyth_twap(move _267, move _270, move _272)</td></tr></table>>];
    bb98__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_272)<br/>StorageDead(_270)<br/>StorageDead(_267)<br/></td></tr><tr><td align="left">_265 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _266)</td></tr></table>>];
    bb99__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_266)<br/>_275 = discriminant(_265)<br/></td></tr><tr><td align="left">switchInt(move _275)</td></tr></table>>];
    bb100__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageLive(_279)<br/>_279 = ((_265 as Continue).0: i64)<br/>_264 = _279<br/>StorageDead(_279)<br/>StorageDead(_273)<br/>StorageDead(_271)<br/>StorageDead(_268)<br/>StorageDead(_265)<br/>StorageLive(_280)<br/>_280 = _248<br/>StorageLive(_281)<br/>_281 = _249<br/>StorageLive(_282)<br/>_282 = _264<br/>_246 = (move _280, move _281, move _282)<br/>StorageDead(_282)<br/>StorageDead(_281)<br/>StorageDead(_280)<br/>StorageDead(_264)<br/>StorageDead(_249)<br/>StorageDead(_248)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb101__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageLive(_276)<br/>_276 = ((_265 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_278)<br/>_278 = _276<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _278)</td></tr></table>>];
    bb102__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_278)<br/>StorageDead(_276)<br/>StorageDead(_273)<br/>StorageDead(_271)<br/>StorageDead(_268)<br/>StorageDead(_265)<br/>StorageDead(_264)<br/>StorageDead(_249)<br/>StorageDead(_248)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb103__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageLive(_285)<br/>StorageLive(_286)<br/>StorageLive(_287)<br/>StorageLive(_288)<br/>StorageLive(_289)<br/>_1075 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_289 = &amp;((*_1075).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_288 = &amp;(*_289)<br/>StorageLive(_290)<br/>_290 = _68<br/>StorageLive(_291)<br/>StorageLive(_292)<br/>_1059 = const _<br/>_292 = &amp;(*_1059)<br/>_291 = &amp;(*_292)<br/></td></tr><tr><td align="left">_287 = get_pyth_price(move _288, move _290, move _291)</td></tr></table>>];
    bb104__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_291)<br/>StorageDead(_290)<br/>StorageDead(_288)<br/></td></tr><tr><td align="left">_286 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _287)</td></tr></table>>];
    bb105__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageDead(_287)<br/>_294 = discriminant(_286)<br/></td></tr><tr><td align="left">switchInt(move _294)</td></tr></table>>];
    bb106__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageLive(_298)<br/>_298 = ((_286 as Continue).0: state::oracle::OraclePriceData)<br/>_285 = _298<br/>StorageDead(_298)<br/>StorageLive(_283)<br/>_283 = (_285.0: i64)<br/>StorageLive(_284)<br/>_284 = (_285.2: i64)<br/>StorageDead(_292)<br/>StorageDead(_289)<br/>StorageDead(_286)<br/>StorageDead(_285)<br/>StorageLive(_299)<br/>StorageLive(_300)<br/>StorageLive(_301)<br/>StorageLive(_302)<br/>StorageLive(_303)<br/>StorageLive(_304)<br/>_304 = &amp;(*_49)<br/></td></tr><tr><td align="left">_303 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _304)</td></tr></table>>];
    bb107__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageLive(_295)<br/>_295 = ((_286 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_297)<br/>_297 = _295<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _297)</td></tr></table>>];
    bb108__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_297)<br/>StorageDead(_295)<br/>StorageDead(_292)<br/>StorageDead(_289)<br/>StorageDead(_286)<br/>StorageDead(_285)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb109__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_304)<br/>_302 = &amp;((*_303).1: state::perp_market::AMM)<br/>StorageLive(_305)<br/>StorageLive(_306)<br/>_1076 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_306 = &amp;((*_1076).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_305 = &amp;(*_306)<br/>StorageLive(_307)<br/>StorageLive(_308)<br/>_1058 = const _<br/>_308 = &amp;(*_1058)<br/>_307 = &amp;(*_308)<br/></td></tr><tr><td align="left">_301 = AMM::get_pyth_twap(move _302, move _305, move _307)</td></tr></table>>];
    bb110__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_307)<br/>StorageDead(_305)<br/>StorageDead(_302)<br/></td></tr><tr><td align="left">_300 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _301)</td></tr></table>>];
    bb111__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_301)<br/>_310 = discriminant(_300)<br/></td></tr><tr><td align="left">switchInt(move _310)</td></tr></table>>];
    bb112__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageLive(_314)<br/>_314 = ((_300 as Continue).0: i64)<br/>_299 = _314<br/>StorageDead(_314)<br/>StorageDead(_308)<br/>StorageDead(_306)<br/>StorageDead(_303)<br/>StorageDead(_300)<br/>StorageLive(_315)<br/>_315 = _283<br/>StorageLive(_316)<br/>_316 = _284<br/>StorageLive(_317)<br/>_317 = _299<br/>_246 = (move _315, move _316, move _317)<br/>StorageDead(_317)<br/>StorageDead(_316)<br/>StorageDead(_315)<br/>StorageDead(_299)<br/>StorageDead(_284)<br/>StorageDead(_283)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb113__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageLive(_311)<br/>_311 = ((_300 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_313)<br/>_313 = _311<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _313)</td></tr></table>>];
    bb114__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_313)<br/>StorageDead(_311)<br/>StorageDead(_308)<br/>StorageDead(_306)<br/>StorageDead(_303)<br/>StorageDead(_300)<br/>StorageDead(_299)<br/>StorageDead(_284)<br/>StorageDead(_283)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb115__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageLive(_320)<br/>StorageLive(_321)<br/>StorageLive(_322)<br/>StorageLive(_323)<br/>StorageLive(_324)<br/>_1077 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_324 = &amp;((*_1077).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_323 = &amp;(*_324)<br/>StorageLive(_325)<br/>_325 = _68<br/>StorageLive(_326)<br/>StorageLive(_327)<br/>_1057 = const _<br/>_327 = &amp;(*_1057)<br/>_326 = &amp;(*_327)<br/></td></tr><tr><td align="left">_322 = get_pyth_price(move _323, move _325, move _326)</td></tr></table>>];
    bb116__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_326)<br/>StorageDead(_325)<br/>StorageDead(_323)<br/></td></tr><tr><td align="left">_321 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _322)</td></tr></table>>];
    bb117__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_322)<br/>_329 = discriminant(_321)<br/></td></tr><tr><td align="left">switchInt(move _329)</td></tr></table>>];
    bb118__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageLive(_333)<br/>_333 = ((_321 as Continue).0: state::oracle::OraclePriceData)<br/>_320 = _333<br/>StorageDead(_333)<br/>StorageLive(_318)<br/>_318 = (_320.0: i64)<br/>StorageLive(_319)<br/>_319 = (_320.2: i64)<br/>StorageDead(_327)<br/>StorageDead(_324)<br/>StorageDead(_321)<br/>StorageDead(_320)<br/>StorageLive(_334)<br/>StorageLive(_335)<br/>StorageLive(_336)<br/>StorageLive(_337)<br/>StorageLive(_338)<br/>StorageLive(_339)<br/>_339 = &amp;(*_49)<br/></td></tr><tr><td align="left">_338 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _339)</td></tr></table>>];
    bb119__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageLive(_330)<br/>_330 = ((_321 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_332)<br/>_332 = _330<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _332)</td></tr></table>>];
    bb120__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageDead(_332)<br/>StorageDead(_330)<br/>StorageDead(_327)<br/>StorageDead(_324)<br/>StorageDead(_321)<br/>StorageDead(_320)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb121__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_339)<br/>_337 = &amp;((*_338).1: state::perp_market::AMM)<br/>StorageLive(_340)<br/>StorageLive(_341)<br/>_1078 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_341 = &amp;((*_1078).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_340 = &amp;(*_341)<br/>StorageLive(_342)<br/>StorageLive(_343)<br/>_1056 = const _<br/>_343 = &amp;(*_1056)<br/>_342 = &amp;(*_343)<br/></td></tr><tr><td align="left">_336 = AMM::get_pyth_twap(move _337, move _340, move _342)</td></tr></table>>];
    bb122__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_342)<br/>StorageDead(_340)<br/>StorageDead(_337)<br/></td></tr><tr><td align="left">_335 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _336)</td></tr></table>>];
    bb123__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_336)<br/>_345 = discriminant(_335)<br/></td></tr><tr><td align="left">switchInt(move _345)</td></tr></table>>];
    bb124__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageLive(_349)<br/>_349 = ((_335 as Continue).0: i64)<br/>_334 = _349<br/>StorageDead(_349)<br/>StorageDead(_343)<br/>StorageDead(_341)<br/>StorageDead(_338)<br/>StorageDead(_335)<br/>StorageLive(_350)<br/>_350 = _318<br/>StorageLive(_351)<br/>_351 = _319<br/>StorageLive(_352)<br/>_352 = _334<br/>_246 = (move _350, move _351, move _352)<br/>StorageDead(_352)<br/>StorageDead(_351)<br/>StorageDead(_350)<br/>StorageDead(_334)<br/>StorageDead(_319)<br/>StorageDead(_318)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb125__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageLive(_346)<br/>_346 = ((_335 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_348)<br/>_348 = _346<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _348)</td></tr></table>>];
    bb126__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_348)<br/>StorageDead(_346)<br/>StorageDead(_343)<br/>StorageDead(_341)<br/>StorageDead(_338)<br/>StorageDead(_335)<br/>StorageDead(_334)<br/>StorageDead(_319)<br/>StorageDead(_318)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb127__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageLive(_355)<br/>StorageLive(_356)<br/>StorageLive(_357)<br/>StorageLive(_358)<br/>StorageLive(_359)<br/>_1079 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_359 = &amp;((*_1079).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_358 = &amp;(*_359)<br/>StorageLive(_360)<br/>_360 = _68<br/>StorageLive(_361)<br/>StorageLive(_362)<br/>_1055 = const _<br/>_362 = &amp;(*_1055)<br/>_361 = &amp;(*_362)<br/></td></tr><tr><td align="left">_357 = get_pyth_price(move _358, move _360, move _361)</td></tr></table>>];
    bb128__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_361)<br/>StorageDead(_360)<br/>StorageDead(_358)<br/></td></tr><tr><td align="left">_356 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _357)</td></tr></table>>];
    bb129__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageDead(_357)<br/>_364 = discriminant(_356)<br/></td></tr><tr><td align="left">switchInt(move _364)</td></tr></table>>];
    bb130__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageLive(_368)<br/>_368 = ((_356 as Continue).0: state::oracle::OraclePriceData)<br/>_355 = _368<br/>StorageDead(_368)<br/>StorageLive(_353)<br/>_353 = (_355.0: i64)<br/>StorageLive(_354)<br/>_354 = (_355.2: i64)<br/>StorageDead(_362)<br/>StorageDead(_359)<br/>StorageDead(_356)<br/>StorageDead(_355)<br/>StorageLive(_369)<br/>_369 = _353<br/>StorageLive(_370)<br/>_370 = _354<br/>_246 = (move _369, move _370, const _)<br/>StorageDead(_370)<br/>StorageDead(_369)<br/>StorageDead(_354)<br/>StorageDead(_353)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb131__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageLive(_365)<br/>_365 = ((_356 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_367)<br/>_367 = _365<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _367)</td></tr></table>>];
    bb132__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_367)<br/>StorageDead(_365)<br/>StorageDead(_362)<br/>StorageDead(_359)<br/>StorageDead(_356)<br/>StorageDead(_355)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb133__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageLive(_373)<br/>StorageLive(_374)<br/>StorageLive(_375)<br/>StorageLive(_376)<br/>StorageLive(_377)<br/>_1080 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_377 = &amp;((*_1080).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_376 = &amp;(*_377)<br/>StorageLive(_378)<br/>_378 = _68<br/></td></tr><tr><td align="left">_375 = get_switchboard_price(move _376, move _378)</td></tr></table>>];
    bb134__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageDead(_378)<br/>StorageDead(_376)<br/></td></tr><tr><td align="left">_374 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _375)</td></tr></table>>];
    bb135__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageDead(_375)<br/>_379 = discriminant(_374)<br/></td></tr><tr><td align="left">switchInt(move _379)</td></tr></table>>];
    bb136__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageLive(_383)<br/>_383 = ((_374 as Continue).0: state::oracle::OraclePriceData)<br/>_373 = _383<br/>StorageDead(_383)<br/>StorageLive(_371)<br/>_371 = (_373.0: i64)<br/>StorageLive(_372)<br/>_372 = (_373.2: i64)<br/>StorageDead(_377)<br/>StorageDead(_374)<br/>StorageDead(_373)<br/>StorageLive(_384)<br/>_384 = _371<br/>StorageLive(_385)<br/>_385 = _372<br/>StorageLive(_386)<br/>_386 = _371<br/>_246 = (move _384, move _385, move _386)<br/>StorageDead(_386)<br/>StorageDead(_385)<br/>StorageDead(_384)<br/>StorageDead(_372)<br/>StorageDead(_371)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb137__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageLive(_380)<br/>_380 = ((_374 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_382)<br/>_382 = _380<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _382)</td></tr></table>>];
    bb138__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_382)<br/>StorageDead(_380)<br/>StorageDead(_377)<br/>StorageDead(_374)<br/>StorageDead(_373)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb139__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageLive(_388)<br/>StorageLive(_389)<br/>StorageLive(_390)<br/>_390 = const &quot;Quote asset oracle cant be used for perp market&quot;<br/>_389 = &amp;(*_390)<br/></td></tr><tr><td align="left">_388 = solana_program::log::sol_log(move _389)</td></tr></table>>];
    bb140__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageDead(_389)<br/>StorageDead(_390)<br/>StorageDead(_388)<br/>StorageLive(_391)<br/>StorageLive(_392)<br/>_392 = error::ErrorCode::InvalidOracle<br/></td></tr><tr><td align="left">_391 = &lt;error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _392)</td></tr></table>>];
    bb141__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_392)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _391)<br/>StorageDead(_391)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb142__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageLive(_395)<br/>StorageLive(_396)<br/>StorageLive(_397)<br/>StorageLive(_398)<br/>StorageLive(_399)<br/>_1081 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_399 = &amp;((*_1081).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_398 = &amp;(*_399)<br/>StorageLive(_400)<br/>_400 = _68<br/></td></tr><tr><td align="left">_397 = get_prelaunch_price(move _398, move _400)</td></tr></table>>];
    bb143__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageDead(_400)<br/>StorageDead(_398)<br/></td></tr><tr><td align="left">_396 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _397)</td></tr></table>>];
    bb144__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_397)<br/>_401 = discriminant(_396)<br/></td></tr><tr><td align="left">switchInt(move _401)</td></tr></table>>];
    bb145__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageLive(_405)<br/>_405 = ((_396 as Continue).0: state::oracle::OraclePriceData)<br/>_395 = _405<br/>StorageDead(_405)<br/>StorageLive(_393)<br/>_393 = (_395.0: i64)<br/>StorageLive(_394)<br/>_394 = (_395.2: i64)<br/>StorageDead(_399)<br/>StorageDead(_396)<br/>StorageDead(_395)<br/>StorageLive(_406)<br/>_406 = _393<br/>StorageLive(_407)<br/>_407 = _394<br/>StorageLive(_408)<br/>_408 = _393<br/>_246 = (move _406, move _407, move _408)<br/>StorageDead(_408)<br/>StorageDead(_407)<br/>StorageDead(_406)<br/>StorageDead(_394)<br/>StorageDead(_393)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb146__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageLive(_402)<br/>_402 = ((_396 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_404)<br/>_404 = _402<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _404)</td></tr></table>>];
    bb147__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageDead(_404)<br/>StorageDead(_402)<br/>StorageDead(_399)<br/>StorageDead(_396)<br/>StorageDead(_395)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb148__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageLive(_411)<br/>StorageLive(_412)<br/>StorageLive(_413)<br/>StorageLive(_414)<br/>StorageLive(_415)<br/>_1082 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_415 = &amp;((*_1082).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_414 = &amp;(*_415)<br/>StorageLive(_416)<br/>_416 = _68<br/>StorageLive(_417)<br/>StorageLive(_418)<br/>_1054 = const _<br/>_418 = &amp;(*_1054)<br/>_417 = &amp;(*_418)<br/></td></tr><tr><td align="left">_413 = get_pyth_price(move _414, move _416, move _417)</td></tr></table>>];
    bb149__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageDead(_417)<br/>StorageDead(_416)<br/>StorageDead(_414)<br/></td></tr><tr><td align="left">_412 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _413)</td></tr></table>>];
    bb150__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageDead(_413)<br/>_420 = discriminant(_412)<br/></td></tr><tr><td align="left">switchInt(move _420)</td></tr></table>>];
    bb151__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageLive(_424)<br/>_424 = ((_412 as Continue).0: state::oracle::OraclePriceData)<br/>_411 = _424<br/>StorageDead(_424)<br/>StorageLive(_409)<br/>_409 = (_411.0: i64)<br/>StorageLive(_410)<br/>_410 = (_411.2: i64)<br/>StorageDead(_418)<br/>StorageDead(_415)<br/>StorageDead(_412)<br/>StorageDead(_411)<br/>StorageLive(_425)<br/>StorageLive(_426)<br/>StorageLive(_427)<br/>StorageLive(_428)<br/>StorageLive(_429)<br/>StorageLive(_430)<br/>_430 = &amp;(*_49)<br/></td></tr><tr><td align="left">_429 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _430)</td></tr></table>>];
    bb152__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageLive(_421)<br/>_421 = ((_412 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_423)<br/>_423 = _421<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _423)</td></tr></table>>];
    bb153__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">StorageDead(_423)<br/>StorageDead(_421)<br/>StorageDead(_418)<br/>StorageDead(_415)<br/>StorageDead(_412)<br/>StorageDead(_411)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb154__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageDead(_430)<br/>_428 = &amp;((*_429).1: state::perp_market::AMM)<br/>StorageLive(_431)<br/>StorageLive(_432)<br/>_1083 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_432 = &amp;((*_1083).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_431 = &amp;(*_432)<br/>StorageLive(_433)<br/>StorageLive(_434)<br/>_1053 = const _<br/>_434 = &amp;(*_1053)<br/>_433 = &amp;(*_434)<br/></td></tr><tr><td align="left">_427 = AMM::get_pyth_twap(move _428, move _431, move _433)</td></tr></table>>];
    bb155__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageDead(_433)<br/>StorageDead(_431)<br/>StorageDead(_428)<br/></td></tr><tr><td align="left">_426 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _427)</td></tr></table>>];
    bb156__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_427)<br/>_436 = discriminant(_426)<br/></td></tr><tr><td align="left">switchInt(move _436)</td></tr></table>>];
    bb157__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageLive(_440)<br/>_440 = ((_426 as Continue).0: i64)<br/>_425 = _440<br/>StorageDead(_440)<br/>StorageDead(_434)<br/>StorageDead(_432)<br/>StorageDead(_429)<br/>StorageDead(_426)<br/>StorageLive(_441)<br/>_441 = _409<br/>StorageLive(_442)<br/>_442 = _410<br/>StorageLive(_443)<br/>_443 = _425<br/>_246 = (move _441, move _442, move _443)<br/>StorageDead(_443)<br/>StorageDead(_442)<br/>StorageDead(_441)<br/>StorageDead(_425)<br/>StorageDead(_410)<br/>StorageDead(_409)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb158__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageLive(_437)<br/>_437 = ((_426 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_439)<br/>_439 = _437<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _439)</td></tr></table>>];
    bb159__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageDead(_439)<br/>StorageDead(_437)<br/>StorageDead(_434)<br/>StorageDead(_432)<br/>StorageDead(_429)<br/>StorageDead(_426)<br/>StorageDead(_425)<br/>StorageDead(_410)<br/>StorageDead(_409)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb160__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageLive(_446)<br/>StorageLive(_447)<br/>StorageLive(_448)<br/>StorageLive(_449)<br/>StorageLive(_450)<br/>_1084 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_450 = &amp;((*_1084).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_449 = &amp;(*_450)<br/>StorageLive(_451)<br/>_451 = _68<br/>StorageLive(_452)<br/>StorageLive(_453)<br/>_1052 = const _<br/>_453 = &amp;(*_1052)<br/>_452 = &amp;(*_453)<br/></td></tr><tr><td align="left">_448 = get_pyth_price(move _449, move _451, move _452)</td></tr></table>>];
    bb161__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_452)<br/>StorageDead(_451)<br/>StorageDead(_449)<br/></td></tr><tr><td align="left">_447 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _448)</td></tr></table>>];
    bb162__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">StorageDead(_448)<br/>_455 = discriminant(_447)<br/></td></tr><tr><td align="left">switchInt(move _455)</td></tr></table>>];
    bb163__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageLive(_459)<br/>_459 = ((_447 as Continue).0: state::oracle::OraclePriceData)<br/>_446 = _459<br/>StorageDead(_459)<br/>StorageLive(_444)<br/>_444 = (_446.0: i64)<br/>StorageLive(_445)<br/>_445 = (_446.2: i64)<br/>StorageDead(_453)<br/>StorageDead(_450)<br/>StorageDead(_447)<br/>StorageDead(_446)<br/>StorageLive(_460)<br/>StorageLive(_461)<br/>StorageLive(_462)<br/>StorageLive(_463)<br/>StorageLive(_464)<br/>StorageLive(_465)<br/>_465 = &amp;(*_49)<br/></td></tr><tr><td align="left">_464 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _465)</td></tr></table>>];
    bb164__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageLive(_456)<br/>_456 = ((_447 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_458)<br/>_458 = _456<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _458)</td></tr></table>>];
    bb165__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageDead(_458)<br/>StorageDead(_456)<br/>StorageDead(_453)<br/>StorageDead(_450)<br/>StorageDead(_447)<br/>StorageDead(_446)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb166__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageDead(_465)<br/>_463 = &amp;((*_464).1: state::perp_market::AMM)<br/>StorageLive(_466)<br/>StorageLive(_467)<br/>_1085 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_467 = &amp;((*_1085).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_466 = &amp;(*_467)<br/>StorageLive(_468)<br/>StorageLive(_469)<br/>_1051 = const _<br/>_469 = &amp;(*_1051)<br/>_468 = &amp;(*_469)<br/></td></tr><tr><td align="left">_462 = AMM::get_pyth_twap(move _463, move _466, move _468)</td></tr></table>>];
    bb167__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageDead(_468)<br/>StorageDead(_466)<br/>StorageDead(_463)<br/></td></tr><tr><td align="left">_461 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _462)</td></tr></table>>];
    bb168__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageDead(_462)<br/>_471 = discriminant(_461)<br/></td></tr><tr><td align="left">switchInt(move _471)</td></tr></table>>];
    bb169__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageLive(_475)<br/>_475 = ((_461 as Continue).0: i64)<br/>_460 = _475<br/>StorageDead(_475)<br/>StorageDead(_469)<br/>StorageDead(_467)<br/>StorageDead(_464)<br/>StorageDead(_461)<br/>StorageLive(_476)<br/>_476 = _444<br/>StorageLive(_477)<br/>_477 = _445<br/>StorageLive(_478)<br/>_478 = _460<br/>_246 = (move _476, move _477, move _478)<br/>StorageDead(_478)<br/>StorageDead(_477)<br/>StorageDead(_476)<br/>StorageDead(_460)<br/>StorageDead(_445)<br/>StorageDead(_444)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb170__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageLive(_472)<br/>_472 = ((_461 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_474)<br/>_474 = _472<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _474)</td></tr></table>>];
    bb171__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageDead(_474)<br/>StorageDead(_472)<br/>StorageDead(_469)<br/>StorageDead(_467)<br/>StorageDead(_464)<br/>StorageDead(_461)<br/>StorageDead(_460)<br/>StorageDead(_445)<br/>StorageDead(_444)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb172__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageLive(_481)<br/>StorageLive(_482)<br/>StorageLive(_483)<br/>StorageLive(_484)<br/>StorageLive(_485)<br/>_1086 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_485 = &amp;((*_1086).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_484 = &amp;(*_485)<br/>StorageLive(_486)<br/>_486 = _68<br/>StorageLive(_487)<br/>StorageLive(_488)<br/>_1050 = const _<br/>_488 = &amp;(*_1050)<br/>_487 = &amp;(*_488)<br/></td></tr><tr><td align="left">_483 = get_pyth_price(move _484, move _486, move _487)</td></tr></table>>];
    bb173__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageDead(_487)<br/>StorageDead(_486)<br/>StorageDead(_484)<br/></td></tr><tr><td align="left">_482 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _483)</td></tr></table>>];
    bb174__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">StorageDead(_483)<br/>_490 = discriminant(_482)<br/></td></tr><tr><td align="left">switchInt(move _490)</td></tr></table>>];
    bb175__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageLive(_494)<br/>_494 = ((_482 as Continue).0: state::oracle::OraclePriceData)<br/>_481 = _494<br/>StorageDead(_494)<br/>StorageLive(_479)<br/>_479 = (_481.0: i64)<br/>StorageLive(_480)<br/>_480 = (_481.2: i64)<br/>StorageDead(_488)<br/>StorageDead(_485)<br/>StorageDead(_482)<br/>StorageDead(_481)<br/>StorageLive(_495)<br/>StorageLive(_496)<br/>StorageLive(_497)<br/>StorageLive(_498)<br/>StorageLive(_499)<br/>StorageLive(_500)<br/>_500 = &amp;(*_49)<br/></td></tr><tr><td align="left">_499 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _500)</td></tr></table>>];
    bb176__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageLive(_491)<br/>_491 = ((_482 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_493)<br/>_493 = _491<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _493)</td></tr></table>>];
    bb177__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">StorageDead(_493)<br/>StorageDead(_491)<br/>StorageDead(_488)<br/>StorageDead(_485)<br/>StorageDead(_482)<br/>StorageDead(_481)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb178__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageDead(_500)<br/>_498 = &amp;((*_499).1: state::perp_market::AMM)<br/>StorageLive(_501)<br/>StorageLive(_502)<br/>_1087 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_502 = &amp;((*_1087).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_501 = &amp;(*_502)<br/>StorageLive(_503)<br/>StorageLive(_504)<br/>_1049 = const _<br/>_504 = &amp;(*_1049)<br/>_503 = &amp;(*_504)<br/></td></tr><tr><td align="left">_497 = AMM::get_pyth_twap(move _498, move _501, move _503)</td></tr></table>>];
    bb179__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">StorageDead(_503)<br/>StorageDead(_501)<br/>StorageDead(_498)<br/></td></tr><tr><td align="left">_496 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _497)</td></tr></table>>];
    bb180__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_497)<br/>_506 = discriminant(_496)<br/></td></tr><tr><td align="left">switchInt(move _506)</td></tr></table>>];
    bb181__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageLive(_510)<br/>_510 = ((_496 as Continue).0: i64)<br/>_495 = _510<br/>StorageDead(_510)<br/>StorageDead(_504)<br/>StorageDead(_502)<br/>StorageDead(_499)<br/>StorageDead(_496)<br/>StorageLive(_511)<br/>_511 = _479<br/>StorageLive(_512)<br/>_512 = _480<br/>StorageLive(_513)<br/>_513 = _495<br/>_246 = (move _511, move _512, move _513)<br/>StorageDead(_513)<br/>StorageDead(_512)<br/>StorageDead(_511)<br/>StorageDead(_495)<br/>StorageDead(_480)<br/>StorageDead(_479)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb182__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">StorageLive(_507)<br/>_507 = ((_496 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_509)<br/>_509 = _507<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _509)</td></tr></table>>];
    bb183__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageDead(_509)<br/>StorageDead(_507)<br/>StorageDead(_504)<br/>StorageDead(_502)<br/>StorageDead(_499)<br/>StorageDead(_496)<br/>StorageDead(_495)<br/>StorageDead(_480)<br/>StorageDead(_479)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb184__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageLive(_516)<br/>StorageLive(_517)<br/>StorageLive(_518)<br/>StorageLive(_519)<br/>StorageLive(_520)<br/>_1088 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_520 = &amp;((*_1088).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_519 = &amp;(*_520)<br/>StorageLive(_521)<br/>_521 = _68<br/>StorageLive(_522)<br/>StorageLive(_523)<br/>_1048 = const _<br/>_523 = &amp;(*_1048)<br/>_522 = &amp;(*_523)<br/></td></tr><tr><td align="left">_518 = get_pyth_price(move _519, move _521, move _522)</td></tr></table>>];
    bb185__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_522)<br/>StorageDead(_521)<br/>StorageDead(_519)<br/></td></tr><tr><td align="left">_517 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _518)</td></tr></table>>];
    bb186__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageDead(_518)<br/>_525 = discriminant(_517)<br/></td></tr><tr><td align="left">switchInt(move _525)</td></tr></table>>];
    bb187__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">StorageLive(_529)<br/>_529 = ((_517 as Continue).0: state::oracle::OraclePriceData)<br/>_516 = _529<br/>StorageDead(_529)<br/>StorageLive(_514)<br/>_514 = (_516.0: i64)<br/>StorageLive(_515)<br/>_515 = (_516.2: i64)<br/>StorageDead(_523)<br/>StorageDead(_520)<br/>StorageDead(_517)<br/>StorageDead(_516)<br/>StorageLive(_530)<br/>_530 = _514<br/>StorageLive(_531)<br/>_531 = _515<br/>_246 = (move _530, move _531, const _)<br/>StorageDead(_531)<br/>StorageDead(_530)<br/>StorageDead(_515)<br/>StorageDead(_514)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb188__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageLive(_526)<br/>_526 = ((_517 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_528)<br/>_528 = _526<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _528)</td></tr></table>>];
    bb189__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageDead(_528)<br/>StorageDead(_526)<br/>StorageDead(_523)<br/>StorageDead(_520)<br/>StorageDead(_517)<br/>StorageDead(_516)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb190__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageLive(_534)<br/>StorageLive(_535)<br/>StorageLive(_536)<br/>StorageLive(_537)<br/>StorageLive(_538)<br/>_1089 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_538 = &amp;((*_1089).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_537 = &amp;(*_538)<br/>StorageLive(_539)<br/>_539 = _68<br/></td></tr><tr><td align="left">_536 = get_sb_on_demand_price(move _537, move _539)</td></tr></table>>];
    bb191__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageDead(_539)<br/>StorageDead(_537)<br/></td></tr><tr><td align="left">_535 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _536)</td></tr></table>>];
    bb192__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageDead(_536)<br/>_540 = discriminant(_535)<br/></td></tr><tr><td align="left">switchInt(move _540)</td></tr></table>>];
    bb193__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">StorageLive(_544)<br/>_544 = ((_535 as Continue).0: state::oracle::OraclePriceData)<br/>_534 = _544<br/>StorageDead(_544)<br/>StorageLive(_532)<br/>_532 = (_534.0: i64)<br/>StorageLive(_533)<br/>_533 = (_534.2: i64)<br/>StorageDead(_538)<br/>StorageDead(_535)<br/>StorageDead(_534)<br/>StorageLive(_545)<br/>_545 = _532<br/>StorageLive(_546)<br/>_546 = _533<br/>StorageLive(_547)<br/>_547 = _532<br/>_246 = (move _545, move _546, move _547)<br/>StorageDead(_547)<br/>StorageDead(_546)<br/>StorageDead(_545)<br/>StorageDead(_533)<br/>StorageDead(_532)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb194__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageLive(_541)<br/>_541 = ((_535 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_543)<br/>_543 = _541<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _543)</td></tr></table>>];
    bb195__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageDead(_543)<br/>StorageDead(_541)<br/>StorageDead(_538)<br/>StorageDead(_535)<br/>StorageDead(_534)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb196__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageLive(_550)<br/>StorageLive(_551)<br/>StorageLive(_552)<br/>StorageLive(_553)<br/>StorageLive(_554)<br/>_1090 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_554 = &amp;((*_1090).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_553 = &amp;(*_554)<br/>StorageLive(_555)<br/>_555 = _68<br/>StorageLive(_556)<br/>StorageLive(_557)<br/>_1047 = const _<br/>_557 = &amp;(*_1047)<br/>_556 = &amp;(*_557)<br/></td></tr><tr><td align="left">_552 = get_pyth_price(move _553, move _555, move _556)</td></tr></table>>];
    bb197__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageDead(_556)<br/>StorageDead(_555)<br/>StorageDead(_553)<br/></td></tr><tr><td align="left">_551 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _552)</td></tr></table>>];
    bb198__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">StorageDead(_552)<br/>_559 = discriminant(_551)<br/></td></tr><tr><td align="left">switchInt(move _559)</td></tr></table>>];
    bb199__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">StorageLive(_563)<br/>_563 = ((_551 as Continue).0: state::oracle::OraclePriceData)<br/>_550 = _563<br/>StorageDead(_563)<br/>StorageLive(_548)<br/>_548 = (_550.0: i64)<br/>StorageLive(_549)<br/>_549 = (_550.2: i64)<br/>StorageDead(_557)<br/>StorageDead(_554)<br/>StorageDead(_551)<br/>StorageDead(_550)<br/>StorageLive(_564)<br/>StorageLive(_565)<br/>StorageLive(_566)<br/>StorageLive(_567)<br/>StorageLive(_568)<br/>StorageLive(_569)<br/>_569 = &amp;(*_49)<br/></td></tr><tr><td align="left">_568 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _569)</td></tr></table>>];
    bb200__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageLive(_560)<br/>_560 = ((_551 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_562)<br/>_562 = _560<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _562)</td></tr></table>>];
    bb201__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">StorageDead(_562)<br/>StorageDead(_560)<br/>StorageDead(_557)<br/>StorageDead(_554)<br/>StorageDead(_551)<br/>StorageDead(_550)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb202__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageDead(_569)<br/>_567 = &amp;((*_568).1: state::perp_market::AMM)<br/>StorageLive(_570)<br/>StorageLive(_571)<br/>_1091 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_571 = &amp;((*_1091).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_570 = &amp;(*_571)<br/>StorageLive(_572)<br/>StorageLive(_573)<br/>_1046 = const _<br/>_573 = &amp;(*_1046)<br/>_572 = &amp;(*_573)<br/></td></tr><tr><td align="left">_566 = AMM::get_pyth_twap(move _567, move _570, move _572)</td></tr></table>>];
    bb203__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageDead(_572)<br/>StorageDead(_570)<br/>StorageDead(_567)<br/></td></tr><tr><td align="left">_565 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _566)</td></tr></table>>];
    bb204__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageDead(_566)<br/>_575 = discriminant(_565)<br/></td></tr><tr><td align="left">switchInt(move _575)</td></tr></table>>];
    bb205__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageLive(_579)<br/>_579 = ((_565 as Continue).0: i64)<br/>_564 = _579<br/>StorageDead(_579)<br/>StorageDead(_573)<br/>StorageDead(_571)<br/>StorageDead(_568)<br/>StorageDead(_565)<br/>StorageLive(_580)<br/>_580 = _548<br/>StorageLive(_581)<br/>_581 = _549<br/>StorageLive(_582)<br/>_582 = _564<br/>_246 = (move _580, move _581, move _582)<br/>StorageDead(_582)<br/>StorageDead(_581)<br/>StorageDead(_580)<br/>StorageDead(_564)<br/>StorageDead(_549)<br/>StorageDead(_548)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb206__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageLive(_576)<br/>_576 = ((_565 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_578)<br/>_578 = _576<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _578)</td></tr></table>>];
    bb207__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">StorageDead(_578)<br/>StorageDead(_576)<br/>StorageDead(_573)<br/>StorageDead(_571)<br/>StorageDead(_568)<br/>StorageDead(_565)<br/>StorageDead(_564)<br/>StorageDead(_549)<br/>StorageDead(_548)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb208__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageLive(_585)<br/>StorageLive(_586)<br/>StorageLive(_587)<br/>StorageLive(_588)<br/>StorageLive(_589)<br/>_1092 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_589 = &amp;((*_1092).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_588 = &amp;(*_589)<br/>StorageLive(_590)<br/>_590 = _68<br/>StorageLive(_591)<br/>StorageLive(_592)<br/>_1045 = const _<br/>_592 = &amp;(*_1045)<br/>_591 = &amp;(*_592)<br/></td></tr><tr><td align="left">_587 = get_pyth_price(move _588, move _590, move _591)</td></tr></table>>];
    bb209__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageDead(_591)<br/>StorageDead(_590)<br/>StorageDead(_588)<br/></td></tr><tr><td align="left">_586 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _587)</td></tr></table>>];
    bb210__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageDead(_587)<br/>_594 = discriminant(_586)<br/></td></tr><tr><td align="left">switchInt(move _594)</td></tr></table>>];
    bb211__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageLive(_598)<br/>_598 = ((_586 as Continue).0: state::oracle::OraclePriceData)<br/>_585 = _598<br/>StorageDead(_598)<br/>StorageLive(_583)<br/>_583 = (_585.0: i64)<br/>StorageLive(_584)<br/>_584 = (_585.2: i64)<br/>StorageDead(_592)<br/>StorageDead(_589)<br/>StorageDead(_586)<br/>StorageDead(_585)<br/>StorageLive(_599)<br/>StorageLive(_600)<br/>StorageLive(_601)<br/>StorageLive(_602)<br/>StorageLive(_603)<br/>StorageLive(_604)<br/>_604 = &amp;(*_49)<br/></td></tr><tr><td align="left">_603 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _604)</td></tr></table>>];
    bb212__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageLive(_595)<br/>_595 = ((_586 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_597)<br/>_597 = _595<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _597)</td></tr></table>>];
    bb213__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_597)<br/>StorageDead(_595)<br/>StorageDead(_592)<br/>StorageDead(_589)<br/>StorageDead(_586)<br/>StorageDead(_585)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb214__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">StorageDead(_604)<br/>_602 = &amp;((*_603).1: state::perp_market::AMM)<br/>StorageLive(_605)<br/>StorageLive(_606)<br/>_1093 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_606 = &amp;((*_1093).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_605 = &amp;(*_606)<br/>StorageLive(_607)<br/>StorageLive(_608)<br/>_1044 = const _<br/>_608 = &amp;(*_1044)<br/>_607 = &amp;(*_608)<br/></td></tr><tr><td align="left">_601 = AMM::get_pyth_twap(move _602, move _605, move _607)</td></tr></table>>];
    bb215__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">StorageDead(_607)<br/>StorageDead(_605)<br/>StorageDead(_602)<br/></td></tr><tr><td align="left">_600 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _601)</td></tr></table>>];
    bb216__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageDead(_601)<br/>_610 = discriminant(_600)<br/></td></tr><tr><td align="left">switchInt(move _610)</td></tr></table>>];
    bb217__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageLive(_614)<br/>_614 = ((_600 as Continue).0: i64)<br/>_599 = _614<br/>StorageDead(_614)<br/>StorageDead(_608)<br/>StorageDead(_606)<br/>StorageDead(_603)<br/>StorageDead(_600)<br/>StorageLive(_615)<br/>_615 = _583<br/>StorageLive(_616)<br/>_616 = _584<br/>StorageLive(_617)<br/>_617 = _599<br/>_246 = (move _615, move _616, move _617)<br/>StorageDead(_617)<br/>StorageDead(_616)<br/>StorageDead(_615)<br/>StorageDead(_599)<br/>StorageDead(_584)<br/>StorageDead(_583)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb218__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">StorageLive(_611)<br/>_611 = ((_600 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_613)<br/>_613 = _611<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _613)</td></tr></table>>];
    bb219__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageDead(_613)<br/>StorageDead(_611)<br/>StorageDead(_608)<br/>StorageDead(_606)<br/>StorageDead(_603)<br/>StorageDead(_600)<br/>StorageDead(_599)<br/>StorageDead(_584)<br/>StorageDead(_583)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb220__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageLive(_620)<br/>StorageLive(_621)<br/>StorageLive(_622)<br/>StorageLive(_623)<br/>StorageLive(_624)<br/>_1094 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_624 = &amp;((*_1094).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_623 = &amp;(*_624)<br/>StorageLive(_625)<br/>_625 = _68<br/>StorageLive(_626)<br/>StorageLive(_627)<br/>_1043 = const _<br/>_627 = &amp;(*_1043)<br/>_626 = &amp;(*_627)<br/></td></tr><tr><td align="left">_622 = get_pyth_price(move _623, move _625, move _626)</td></tr></table>>];
    bb221__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageDead(_626)<br/>StorageDead(_625)<br/>StorageDead(_623)<br/></td></tr><tr><td align="left">_621 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _622)</td></tr></table>>];
    bb222__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">StorageDead(_622)<br/>_629 = discriminant(_621)<br/></td></tr><tr><td align="left">switchInt(move _629)</td></tr></table>>];
    bb223__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">StorageLive(_633)<br/>_633 = ((_621 as Continue).0: state::oracle::OraclePriceData)<br/>_620 = _633<br/>StorageDead(_633)<br/>StorageLive(_618)<br/>_618 = (_620.0: i64)<br/>StorageLive(_619)<br/>_619 = (_620.2: i64)<br/>StorageDead(_627)<br/>StorageDead(_624)<br/>StorageDead(_621)<br/>StorageDead(_620)<br/>StorageLive(_634)<br/>StorageLive(_635)<br/>StorageLive(_636)<br/>StorageLive(_637)<br/>StorageLive(_638)<br/>StorageLive(_639)<br/>_639 = &amp;(*_49)<br/></td></tr><tr><td align="left">_638 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _639)</td></tr></table>>];
    bb224__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageLive(_630)<br/>_630 = ((_621 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_632)<br/>_632 = _630<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _632)</td></tr></table>>];
    bb225__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">StorageDead(_632)<br/>StorageDead(_630)<br/>StorageDead(_627)<br/>StorageDead(_624)<br/>StorageDead(_621)<br/>StorageDead(_620)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb226__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageDead(_639)<br/>_637 = &amp;((*_638).1: state::perp_market::AMM)<br/>StorageLive(_640)<br/>StorageLive(_641)<br/>_1095 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_641 = &amp;((*_1095).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_640 = &amp;(*_641)<br/>StorageLive(_642)<br/>StorageLive(_643)<br/>_1042 = const _<br/>_643 = &amp;(*_1042)<br/>_642 = &amp;(*_643)<br/></td></tr><tr><td align="left">_636 = AMM::get_pyth_twap(move _637, move _640, move _642)</td></tr></table>>];
    bb227__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageDead(_642)<br/>StorageDead(_640)<br/>StorageDead(_637)<br/></td></tr><tr><td align="left">_635 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _636)</td></tr></table>>];
    bb228__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageDead(_636)<br/>_645 = discriminant(_635)<br/></td></tr><tr><td align="left">switchInt(move _645)</td></tr></table>>];
    bb229__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageLive(_649)<br/>_649 = ((_635 as Continue).0: i64)<br/>_634 = _649<br/>StorageDead(_649)<br/>StorageDead(_643)<br/>StorageDead(_641)<br/>StorageDead(_638)<br/>StorageDead(_635)<br/>StorageLive(_650)<br/>_650 = _618<br/>StorageLive(_651)<br/>_651 = _619<br/>StorageLive(_652)<br/>_652 = _634<br/>_246 = (move _650, move _651, move _652)<br/>StorageDead(_652)<br/>StorageDead(_651)<br/>StorageDead(_650)<br/>StorageDead(_634)<br/>StorageDead(_619)<br/>StorageDead(_618)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb230__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">StorageLive(_646)<br/>_646 = ((_635 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_648)<br/>_648 = _646<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _648)</td></tr></table>>];
    bb231__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">StorageDead(_648)<br/>StorageDead(_646)<br/>StorageDead(_643)<br/>StorageDead(_641)<br/>StorageDead(_638)<br/>StorageDead(_635)<br/>StorageDead(_634)<br/>StorageDead(_619)<br/>StorageDead(_618)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb232__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">StorageDead(_661)<br/>StorageDead(_660)<br/>StorageDead(_658)<br/></td></tr><tr><td align="left">_656 = &lt;std::result::Result&lt;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _657)</td></tr></table>>];
    bb233__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageDead(_657)<br/>_664 = discriminant(_656)<br/></td></tr><tr><td align="left">switchInt(move _664)</td></tr></table>>];
    bb234__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">StorageLive(_668)<br/>_668 = ((_656 as Continue).0: state::oracle::OraclePriceData)<br/>_655 = _668<br/>StorageDead(_668)<br/>StorageLive(_653)<br/>_653 = (_655.0: i64)<br/>StorageLive(_654)<br/>_654 = (_655.2: i64)<br/>StorageDead(_662)<br/>StorageDead(_659)<br/>StorageDead(_656)<br/>StorageDead(_655)<br/>StorageLive(_669)<br/>_669 = _653<br/>StorageLive(_670)<br/>_670 = _654<br/>_246 = (move _669, move _670, const _)<br/>StorageDead(_670)<br/>StorageDead(_669)<br/>StorageDead(_654)<br/>StorageDead(_653)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb235__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageLive(_665)<br/>_665 = ((_656 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_667)<br/>_667 = _665<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _667)</td></tr></table>>];
    bb236__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageDead(_667)<br/>StorageDead(_665)<br/>StorageDead(_662)<br/>StorageDead(_659)<br/>StorageDead(_656)<br/>StorageDead(_655)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb237__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">StorageLive(_243)<br/>_243 = (_246.0: i64)<br/>StorageLive(_244)<br/>_244 = (_246.1: i64)<br/>StorageLive(_245)<br/>_245 = (_246.2: i64)<br/>StorageDead(_246)<br/>StorageLive(_671)<br/>StorageLive(_672)<br/>StorageLive(_673)<br/>StorageLive(_674)<br/>_674 = _9<br/>StorageLive(_675)<br/>_675 = _10<br/>StorageLive(_676)<br/>_676 = _11<br/>StorageLive(_677)<br/>_677 = _16<br/></td></tr><tr><td align="left">_673 = validate_margin(move _674, move _675, const 0_u32, const 0_u32, move _676, move _677)</td></tr></table>>];
    bb238__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left" balign="left">StorageDead(_677)<br/>StorageDead(_676)<br/>StorageDead(_675)<br/>StorageDead(_674)<br/></td></tr><tr><td align="left">_672 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _673)</td></tr></table>>];
    bb239__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageDead(_673)<br/>_678 = discriminant(_672)<br/></td></tr><tr><td align="left">switchInt(move _678)</td></tr></table>>];
    bb240__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left" balign="left">StorageLive(_682)<br/>_682 = ((_672 as Continue).0: ())<br/>_671 = _682<br/>StorageDead(_682)<br/>StorageDead(_672)<br/>StorageDead(_671)<br/>StorageLive(_683)<br/>_1096 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_683 = &amp;mut ((*_1096).1: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>StorageLive(_684)<br/>StorageLive(_685)<br/>StorageLive(_686)<br/>StorageLive(_687)<br/>StorageLive(_688)<br/>_688 = _2<br/>StorageLive(_689)<br/>StorageLive(_690)<br/>StorageLive(_691)<br/>_1097 = deref_copy (*_683)<br/>_1115 = (((_1097.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_691 = &amp;(*_1115)<br/></td></tr><tr><td align="left">_690 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _691)</td></tr></table>>];
    bb241__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageLive(_679)<br/>_679 = ((_672 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_681)<br/>_681 = _679<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _681)</td></tr></table>>];
    bb242__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">StorageDead(_681)<br/>StorageDead(_679)<br/>StorageDead(_672)<br/>StorageDead(_671)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb243__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageDead(_691)<br/>_689 = ((*_690).13: u16)<br/>_687 = Eq(move _688, move _689)<br/></td></tr><tr><td align="left">switchInt(move _687)</td></tr></table>>];
    bb244__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left" balign="left">StorageDead(_690)<br/>StorageDead(_689)<br/>StorageDead(_688)<br/>StorageLive(_692)<br/>_692 = ()<br/>_686 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _692)<br/>StorageDead(_692)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb245__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">StorageDead(_690)<br/>StorageDead(_689)<br/>StorageDead(_688)<br/>StorageLive(_693)<br/>_693 = error::ErrorCode::MarketIndexAlreadyInitialized<br/>StorageLive(_694)<br/>StorageLive(_695)<br/>StorageLive(_696)<br/>StorageLive(_697)<br/>StorageLive(_698)<br/>StorageLive(_699)<br/>StorageLive(_700)<br/>StorageLive(_701)<br/>StorageLive(_702)<br/>StorageLive(_703)<br/>StorageLive(_704)<br/>_1040 = const _<br/>_704 = &amp;(*_1040)<br/>_703 = &amp;(*_704)<br/>_702 = move _703 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_703)<br/>StorageLive(_706)<br/>StorageLive(_707)<br/>StorageLive(_708)<br/>StorageLive(_709)<br/>StorageLive(_710)<br/>StorageLive(_711)<br/>StorageLive(_712)<br/>_712 = &amp;_693<br/>_711 = &amp;(*_712)<br/></td></tr><tr><td align="left">_710 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _711)</td></tr></table>>];
    bb246__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">StorageDead(_711)<br/>_709 = [move _710]<br/>StorageDead(_710)<br/>_708 = &amp;_709<br/>_707 = &amp;(*_708)<br/>_706 = move _707 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_707)<br/></td></tr><tr><td align="left">_701 = Arguments::&lt;'_&gt;::new_v1(move _702, move _706)</td></tr></table>>];
    bb247__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">StorageDead(_706)<br/>StorageDead(_702)<br/></td></tr><tr><td align="left">_700 = format(move _701)</td></tr></table>>];
    bb248__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">StorageDead(_701)<br/>StorageDead(_712)<br/>StorageDead(_709)<br/>StorageDead(_708)<br/>StorageDead(_704)<br/>_699 = move _700<br/>StorageDead(_700)<br/>_698 = &amp;_699<br/>_697 = &amp;(*_698)<br/></td></tr><tr><td align="left">_696 = &lt;String as Deref&gt;::deref(move _697)</td></tr></table>>];
    bb249__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">_695 = &amp;(*_696)<br/>StorageDead(_697)<br/></td></tr><tr><td align="left">_694 = solana_program::log::sol_log(move _695)</td></tr></table>>];
    bb250__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageDead(_695)<br/></td></tr><tr><td align="left">drop(_699)</td></tr></table>>];
    bb251__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">StorageDead(_699)<br/>StorageDead(_698)<br/>StorageDead(_696)<br/>StorageDead(_694)<br/>StorageLive(_713)<br/>StorageLive(_714)<br/>StorageLive(_715)<br/>StorageLive(_716)<br/>StorageLive(_717)<br/>StorageLive(_718)<br/>StorageLive(_719)<br/>StorageLive(_720)<br/>StorageLive(_721)<br/>StorageLive(_722)<br/>StorageLive(_723)<br/>_1039 = const _<br/>_723 = &amp;(*_1039)<br/>_722 = &amp;(*_723)<br/>_721 = move _722 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_722)<br/>StorageLive(_725)<br/>StorageLive(_726)<br/>StorageLive(_727)<br/>StorageLive(_728)<br/>StorageLive(_729)<br/>StorageLive(_730)<br/>StorageLive(_731)<br/>_731 = &amp;_2<br/>_730 = &amp;(*_731)<br/></td></tr><tr><td align="left">_729 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _730)</td></tr></table>>];
    bb252__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageDead(_730)<br/>StorageLive(_732)<br/>StorageLive(_733)<br/>StorageLive(_734)<br/>StorageLive(_735)<br/>StorageLive(_736)<br/>_1098 = deref_copy (*_683)<br/>_1116 = (((_1098.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_736 = &amp;(*_1116)<br/></td></tr><tr><td align="left">_735 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _736)</td></tr></table>>];
    bb253__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageDead(_736)<br/>_734 = &amp;((*_735).13: u16)<br/>_733 = &amp;(*_734)<br/></td></tr><tr><td align="left">_732 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _733)</td></tr></table>>];
    bb254__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageDead(_733)<br/>_728 = [move _729, move _732]<br/>StorageDead(_732)<br/>StorageDead(_729)<br/>_727 = &amp;_728<br/>_726 = &amp;(*_727)<br/>_725 = move _726 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_726)<br/></td></tr><tr><td align="left">_720 = Arguments::&lt;'_&gt;::new_v1(move _721, move _725)</td></tr></table>>];
    bb255__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">StorageDead(_725)<br/>StorageDead(_721)<br/></td></tr><tr><td align="left">_719 = format(move _720)</td></tr></table>>];
    bb256__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageDead(_720)<br/>StorageDead(_735)<br/>StorageDead(_734)<br/>StorageDead(_731)<br/>StorageDead(_728)<br/>StorageDead(_727)<br/>StorageDead(_723)<br/>_718 = move _719<br/>StorageDead(_719)<br/>_717 = &amp;_718<br/>_716 = &amp;(*_717)<br/></td></tr><tr><td align="left">_715 = &lt;String as Deref&gt;::deref(move _716)</td></tr></table>>];
    bb257__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">_714 = &amp;(*_715)<br/>StorageDead(_716)<br/></td></tr><tr><td align="left">_713 = solana_program::log::sol_log(move _714)</td></tr></table>>];
    bb258__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageDead(_714)<br/></td></tr><tr><td align="left">drop(_718)</td></tr></table>>];
    bb259__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">StorageDead(_718)<br/>StorageDead(_717)<br/>StorageDead(_715)<br/>StorageDead(_713)<br/>StorageLive(_737)<br/>_737 = _693<br/>_686 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _737)<br/>StorageDead(_737)<br/>StorageDead(_693)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb260__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left" balign="left">StorageDead(_687)<br/></td></tr><tr><td align="left">_685 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _686)</td></tr></table>>];
    bb261__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageDead(_686)<br/>_738 = discriminant(_685)<br/></td></tr><tr><td align="left">switchInt(move _738)</td></tr></table>>];
    bb262__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">StorageLive(_742)<br/>_742 = ((_685 as Continue).0: ())<br/>_684 = _742<br/>StorageDead(_742)<br/>StorageDead(_685)<br/>StorageDead(_684)<br/>StorageLive(_743)<br/>StorageLive(_744)<br/>_744 = _14<br/></td></tr><tr><td align="left">switchInt(move _744)</td></tr></table>>];
    bb263__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">StorageLive(_739)<br/>_739 = ((_685 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_741)<br/>_741 = _739<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _741)</td></tr></table>>];
    bb264__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">StorageDead(_741)<br/>StorageDead(_739)<br/>StorageDead(_685)<br/>StorageDead(_684)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb265__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">StorageLive(_745)<br/>StorageLive(_746)<br/>StorageLive(_747)<br/>StorageLive(_748)<br/>StorageLive(_749)<br/>StorageLive(_750)<br/>StorageLive(_751)<br/>_1099 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_751 = &amp;((*_1099).0: anchor_lang::prelude::Signer&lt;'_&gt;)<br/></td></tr><tr><td align="left">_750 = &lt;anchor_lang::prelude::Signer&lt;'_&gt; as anchor_lang::Key&gt;::key(move _751)</td></tr></table>>];
    bb266__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">_743 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb267__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left" balign="left">_749 = &amp;_750<br/>StorageDead(_751)<br/>StorageLive(_752)<br/>StorageLive(_753)<br/>StorageLive(_754)<br/>_1100 = deref_copy (*_683)<br/>_1117 = (((_1100.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_754 = &amp;(*_1117)<br/></td></tr><tr><td align="left">_753 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _754)</td></tr></table>>];
    bb268__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">268</td></tr><tr><td align="left" balign="left">StorageDead(_754)<br/>_752 = &amp;((*_753).0: anchor_lang::prelude::Pubkey)<br/></td></tr><tr><td align="left">_748 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _749, move _752)</td></tr></table>>];
    bb269__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">269</td></tr><tr><td align="left">switchInt(move _748)</td></tr></table>>];
    bb270__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">270</td></tr><tr><td align="left" balign="left">StorageDead(_753)<br/>StorageDead(_752)<br/>StorageDead(_750)<br/>StorageDead(_749)<br/>StorageLive(_755)<br/>_755 = ()<br/>_747 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _755)<br/>StorageDead(_755)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb271__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">271</td></tr><tr><td align="left" balign="left">StorageDead(_753)<br/>StorageDead(_752)<br/>StorageDead(_750)<br/>StorageDead(_749)<br/>StorageLive(_756)<br/>_756 = error::ErrorCode::DefaultError<br/>StorageLive(_757)<br/>StorageLive(_758)<br/>StorageLive(_759)<br/>StorageLive(_760)<br/>StorageLive(_761)<br/>StorageLive(_762)<br/>StorageLive(_763)<br/>StorageLive(_764)<br/>StorageLive(_765)<br/>StorageLive(_766)<br/>StorageLive(_767)<br/>_1038 = const _<br/>_767 = &amp;(*_1038)<br/>_766 = &amp;(*_767)<br/>_765 = move _766 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_766)<br/>StorageLive(_769)<br/>StorageLive(_770)<br/>StorageLive(_771)<br/>StorageLive(_772)<br/>StorageLive(_773)<br/>StorageLive(_774)<br/>StorageLive(_775)<br/>_775 = &amp;_756<br/>_774 = &amp;(*_775)<br/></td></tr><tr><td align="left">_773 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _774)</td></tr></table>>];
    bb272__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">272</td></tr><tr><td align="left" balign="left">StorageDead(_774)<br/>_772 = [move _773]<br/>StorageDead(_773)<br/>_771 = &amp;_772<br/>_770 = &amp;(*_771)<br/>_769 = move _770 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_770)<br/></td></tr><tr><td align="left">_764 = Arguments::&lt;'_&gt;::new_v1(move _765, move _769)</td></tr></table>>];
    bb273__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">273</td></tr><tr><td align="left" balign="left">StorageDead(_769)<br/>StorageDead(_765)<br/></td></tr><tr><td align="left">_763 = format(move _764)</td></tr></table>>];
    bb274__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">274</td></tr><tr><td align="left" balign="left">StorageDead(_764)<br/>StorageDead(_775)<br/>StorageDead(_772)<br/>StorageDead(_771)<br/>StorageDead(_767)<br/>_762 = move _763<br/>StorageDead(_763)<br/>_761 = &amp;_762<br/>_760 = &amp;(*_761)<br/></td></tr><tr><td align="left">_759 = &lt;String as Deref&gt;::deref(move _760)</td></tr></table>>];
    bb275__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">275</td></tr><tr><td align="left" balign="left">_758 = &amp;(*_759)<br/>StorageDead(_760)<br/></td></tr><tr><td align="left">_757 = solana_program::log::sol_log(move _758)</td></tr></table>>];
    bb276__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">276</td></tr><tr><td align="left" balign="left">StorageDead(_758)<br/></td></tr><tr><td align="left">drop(_762)</td></tr></table>>];
    bb277__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">277</td></tr><tr><td align="left" balign="left">StorageDead(_762)<br/>StorageDead(_761)<br/>StorageDead(_759)<br/>StorageDead(_757)<br/>StorageLive(_776)<br/>StorageLive(_777)<br/>StorageLive(_778)<br/>_778 = const &quot;admin must be state admin&quot;<br/>_777 = &amp;(*_778)<br/></td></tr><tr><td align="left">_776 = solana_program::log::sol_log(move _777)</td></tr></table>>];
    bb278__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">278</td></tr><tr><td align="left" balign="left">StorageDead(_777)<br/>StorageDead(_778)<br/>StorageDead(_776)<br/>StorageLive(_779)<br/>_779 = _756<br/>_747 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _779)<br/>StorageDead(_779)<br/>StorageDead(_756)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb279__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">279</td></tr><tr><td align="left" balign="left">StorageDead(_748)<br/></td></tr><tr><td align="left">_746 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _747)</td></tr></table>>];
    bb280__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">280</td></tr><tr><td align="left" balign="left">StorageDead(_747)<br/>_780 = discriminant(_746)<br/></td></tr><tr><td align="left">switchInt(move _780)</td></tr></table>>];
    bb281__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">281</td></tr><tr><td align="left" balign="left">StorageLive(_784)<br/>_784 = ((_746 as Continue).0: ())<br/>_745 = _784<br/>StorageDead(_784)<br/>StorageDead(_746)<br/>StorageDead(_745)<br/>_743 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb282__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">StorageLive(_781)<br/>_781 = ((_746 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_783)<br/>_783 = _781<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _783)</td></tr></table>>];
    bb283__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">StorageDead(_783)<br/>StorageDead(_781)<br/>StorageDead(_746)<br/>StorageDead(_745)<br/>StorageDead(_744)<br/>StorageDead(_743)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb284__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">284</td></tr><tr><td align="left" balign="left">StorageDead(_744)<br/>StorageDead(_743)<br/>StorageLive(_785)<br/>StorageLive(_786)<br/>_786 = ContractType::Perpetual<br/>StorageLive(_787)<br/>_787 = _8<br/>StorageLive(_788)<br/>StorageLive(_789)<br/>_789 = _14<br/></td></tr><tr><td align="left">switchInt(move _789)</td></tr></table>>];
    bb285__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">285</td></tr><tr><td align="left" balign="left">_788 = state::perp_market::MarketStatus::Active<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb286__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">286</td></tr><tr><td align="left" balign="left">_788 = state::perp_market::MarketStatus::Initialized<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb287__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">287</td></tr><tr><td align="left" balign="left">StorageDead(_789)<br/>StorageLive(_790)<br/>_790 = _26<br/>StorageLive(_791)<br/>_791 = (*_46)<br/>StorageLive(_792)<br/>_792 = _2<br/>StorageLive(_793)<br/>_793 = _9<br/>StorageLive(_794)<br/>_794 = _10<br/>StorageLive(_795)<br/>_795 = _13<br/>StorageLive(_796)<br/></td></tr><tr><td align="left">_796 = &lt;PoolBalance as Default&gt;::default()</td></tr></table>>];
    bb288__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">288</td></tr><tr><td align="left" balign="left">StorageLive(_797)<br/>StorageLive(_798)<br/>_798 = _18<br/>StorageLive(_799)<br/>_799 = _19<br/>StorageLive(_800)<br/></td></tr><tr><td align="left">_800 = &lt;InsuranceClaim as Default&gt;::default()</td></tr></table>>];
    bb289__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">289</td></tr><tr><td align="left" balign="left">_797 = InsuranceClaim { revenue_withdraw_since_last_settle: (_800.0: i64), max_revenue_withdraw_per_period: move _798, quote_max_insurance: move _799, quote_settled_insurance: (_800.3: u64), last_revenue_withdraw_ts: (_800.4: i64) }<br/>StorageDead(_799)<br/>StorageDead(_798)<br/>StorageLive(_801)<br/>StorageLive(_802)<br/>StorageLive(_803)<br/></td></tr><tr><td align="left">_803 = &lt;u32 as Cast&gt;::cast::&lt;u32&gt;(const _)</td></tr></table>>];
    bb290__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">290</td></tr><tr><td align="left">_802 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _803)</td></tr></table>>];
    bb291__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">291</td></tr><tr><td align="left" balign="left">StorageDead(_803)<br/>_804 = discriminant(_802)<br/></td></tr><tr><td align="left">switchInt(move _804)</td></tr></table>>];
    bb292__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">292</td></tr><tr><td align="left" balign="left">StorageLive(_808)<br/>_808 = ((_802 as Continue).0: u32)<br/>_801 = _808<br/>StorageDead(_808)<br/>StorageLive(_809)<br/>_809 = _11<br/>StorageLive(_810)<br/>_810 = _12<br/>StorageLive(_811)<br/>_811 = [const 0_u8; 24]<br/>StorageLive(_812)<br/>StorageLive(_813)<br/>_1101 = deref_copy (_1.1: &amp;mut instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_1102 = deref_copy (((*_1101).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;).0: &amp;anchor_lang::prelude::Pubkey)<br/>_813 = (*_1102)<br/>StorageLive(_814)<br/>_814 = _7<br/>StorageLive(_815)<br/>_815 = _3<br/>StorageLive(_816)<br/>_816 = _4<br/>StorageLive(_817)<br/>_817 = _4<br/>StorageLive(_818)<br/>_818 = _3<br/>StorageLive(_819)<br/>_819 = _4<br/>StorageLive(_820)<br/>_820 = _3<br/>StorageLive(_821)<br/>_821 = _4<br/>StorageLive(_822)<br/>_822 = _67<br/>StorageLive(_823)<br/>_823 = _5<br/>StorageLive(_824)<br/>_824 = _170<br/>StorageLive(_825)<br/>_825 = _170<br/>StorageLive(_826)<br/>_826 = _67<br/>StorageLive(_827)<br/>_827 = _3<br/>StorageLive(_828)<br/>_828 = _208<br/>StorageLive(_829)<br/>_829 = _221<br/>StorageLive(_830)<br/>_830 = _222<br/>StorageLive(_831)<br/>_831 = _6<br/>StorageLive(_832)<br/>StorageLive(_833)<br/>_833 = _243<br/>StorageLive(_834)<br/>_834 = _244<br/>StorageLive(_835)<br/>_835 = _245<br/>StorageLive(_836)<br/>_836 = _243<br/>StorageLive(_837)<br/>_837 = _67<br/>StorageLive(_838)<br/></td></tr><tr><td align="left">_838 = &lt;HistoricalOracleData as Default&gt;::default()</td></tr></table>>];
    bb293__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">293</td></tr><tr><td align="left" balign="left">StorageLive(_805)<br/>_805 = ((_802 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_807)<br/>_807 = _805<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _807)</td></tr></table>>];
    bb294__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">294</td></tr><tr><td align="left" balign="left">StorageDead(_807)<br/>StorageDead(_805)<br/>StorageDead(_801)<br/>StorageDead(_797)<br/>StorageDead(_796)<br/>StorageDead(_795)<br/>StorageDead(_794)<br/>StorageDead(_793)<br/>StorageDead(_792)<br/>StorageDead(_791)<br/>StorageDead(_790)<br/>StorageDead(_788)<br/>StorageDead(_787)<br/>StorageDead(_786)<br/>StorageDead(_785)<br/>StorageDead(_802)<br/>StorageDead(_800)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb295__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">295</td></tr><tr><td align="left" balign="left">_832 = HistoricalOracleData { last_oracle_price: move _833, last_oracle_conf: (_838.1: u64), last_oracle_delay: move _834, last_oracle_price_twap: move _835, last_oracle_price_twap_5min: move _836, last_oracle_price_twap_ts: move _837 }<br/>StorageDead(_837)<br/>StorageDead(_836)<br/>StorageDead(_835)<br/>StorageDead(_834)<br/>StorageDead(_833)<br/>StorageLive(_839)<br/>_839 = _243<br/>StorageLive(_840)<br/>_840 = _20<br/>StorageLive(_841)<br/>_841 = _21<br/>StorageLive(_842)<br/>_842 = _22<br/>StorageLive(_843)<br/>_843 = _15<br/>StorageLive(_844)<br/>_844 = _16<br/>StorageLive(_845)<br/>_845 = _170<br/>StorageLive(_846)<br/>_846 = _170<br/>StorageLive(_847)<br/>_847 = _17<br/>StorageLive(_848)<br/>_848 = _67<br/>StorageLive(_849)<br/>_849 = _24<br/>StorageLive(_850)<br/></td></tr><tr><td align="left">_850 = &lt;PoolBalance as Default&gt;::default()</td></tr></table>>];
    bb296__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">296</td></tr><tr><td align="left" balign="left">StorageLive(_851)<br/>_851 = _68<br/>StorageLive(_852)<br/>_852 = _25<br/>StorageLive(_853)<br/>_853 = [const 0_u8; 3]<br/>_812 = AMM { oracle: move _813, historical_oracle_data: move _832, base_asset_amount_per_lp: const 0_i128, quote_asset_amount_per_lp: const 0_i128, fee_pool: move _850, base_asset_reserve: move _815, quote_asset_reserve: move _816, concentration_coef: move _828, min_base_asset_reserve: move _829, max_base_asset_reserve: move _830, sqrt_k: move _827, peg_multiplier: move _831, terminal_quote_asset_reserve: move _817, base_asset_amount_long: const 0_i128, base_asset_amount_short: const 0_i128, base_asset_amount_with_amm: const 0_i128, base_asset_amount_with_unsettled_lp: const 0_i128, max_open_interest: move _847, quote_asset_amount: const 0_i128, quote_entry_amount_long: const 0_i128, quote_entry_amount_short: const 0_i128, quote_break_even_amount_long: const 0_i128, quote_break_even_amount_short: const 0_i128, user_lp_shares: const 0_u128, last_funding_rate: const 0_i64, last_funding_rate_long: const 0_i64, last_funding_rate_short: const 0_i64, last_24h_avg_funding_rate: const 0_i64, total_fee: const 0_i128, total_mm_fee: const 0_i128, total_exchange_fee: const 0_u128, total_fee_minus_distributions: const 0_i128, total_fee_withdrawn: const 0_u128, total_liquidation_fee: const 0_u128, cumulative_funding_rate_long: const 0_i128, cumulative_funding_rate_short: const 0_i128, total_social_loss: const 0_u128, ask_base_asset_reserve: move _818, ask_quote_asset_reserve: move _819, bid_base_asset_reserve: move _820, bid_quote_asset_reserve: move _821, last_oracle_normalised_price: move _839, last_oracle_reserve_price_spread_pct: const 0_i64, last_bid_price_twap: move _845, last_ask_price_twap: move _846, last_mark_price_twap: move _824, last_mark_price_twap_5min: move _825, last_update_slot: move _851, last_oracle_conf_pct: const 0_u64, net_revenue_since_last_funding: const 0_i64, last_funding_rate_ts: move _822, funding_period: move _823, order_step_size: move _840, order_tick_size: move _841, min_order_size: move _842, mm_oracle_slot: const 0_u64, volume_24h: const 0_u64, long_intensity_volume: const 0_u64, short_intensity_volume: const 0_u64, last_trade_ts: move _848, mark_std: const 0_u64, oracle_std: const 0_u64, last_mark_price_twap_ts: move _826, base_spread: move _843, max_spread: move _844, long_spread: const 0_u32, short_spread: const 0_u32, mm_oracle_price: const 0_i64, max_fill_reserve_fraction: const 100_u16, max_slippage_ratio: const 50_u16, curve_update_intensity: move _849, amm_jit_intensity: move _852, oracle_source: move _814, last_oracle_valid: const false, target_base_asset_amount_per_lp: const 0_i32, per_lp_base: const 0_i8, taker_speed_bump_override: const 0_i8, amm_spread_adjustment: const 0_i8, oracle_slot_delay_override: const 0_i8, mm_oracle_sequence_id: const 0_u64, net_unsettled_funding_pnl: const 0_i64, quote_asset_amount_with_unsettled_lp: const 0_i64, reference_price_offset: const 0_i32, amm_inventory_spread_adjustment: const 0_i8, padding: move _853, last_funding_oracle_twap: const 0_i64 }<br/>StorageDead(_853)<br/>StorageDead(_852)<br/>StorageDead(_851)<br/>StorageDead(_850)<br/>StorageDead(_849)<br/>StorageDead(_848)<br/>StorageDead(_847)<br/>StorageDead(_846)<br/>StorageDead(_845)<br/>StorageDead(_844)<br/>StorageDead(_843)<br/>StorageDead(_842)<br/>StorageDead(_841)<br/>StorageDead(_840)<br/>StorageDead(_839)<br/>StorageDead(_832)<br/>StorageDead(_831)<br/>StorageDead(_830)<br/>StorageDead(_829)<br/>StorageDead(_828)<br/>StorageDead(_827)<br/>StorageDead(_826)<br/>StorageDead(_825)<br/>StorageDead(_824)<br/>StorageDead(_823)<br/>StorageDead(_822)<br/>StorageDead(_821)<br/>StorageDead(_820)<br/>StorageDead(_819)<br/>StorageDead(_818)<br/>StorageDead(_817)<br/>StorageDead(_816)<br/>StorageDead(_815)<br/>StorageDead(_814)<br/>StorageDead(_813)<br/>_785 = PerpMarket { pubkey: move _791, amm: move _812, pnl_pool: move _796, name: move _790, insurance_claim: move _797, unrealized_pnl_max_imbalance: const 0_u64, expiry_ts: const 0_i64, expiry_price: const 0_i64, next_fill_record_id: const 1_u64, next_funding_rate_record_id: const 1_u64, next_curve_record_id: const 1_u64, imf_factor: move _795, unrealized_pnl_imf_factor: const 0_u32, liquidator_fee: move _809, if_liquidation_fee: move _810, margin_ratio_initial: move _793, margin_ratio_maintenance: move _794, unrealized_pnl_initial_asset_weight: const 0_u32, unrealized_pnl_maintenance_asset_weight: move _801, number_of_users_with_base: const 0_u32, number_of_users: const 0_u32, market_index: move _792, status: move _788, contract_type: move _786, contract_tier: move _787, paused_operations: const 0_u8, quote_spot_market_index: const _, fee_adjustment: const 0_i16, fuel_boost_position: const 0_u8, fuel_boost_taker: const 1_u8, fuel_boost_maker: const 1_u8, pool_id: const 0_u8, high_leverage_margin_ratio_initial: const 0_u16, high_leverage_margin_ratio_maintenance: const 0_u16, protected_maker_limit_price_divisor: const 0_u8, protected_maker_dynamic_divisor: const 0_u8, padding1: const 0_u32, last_fill_price: const 0_u64, padding: move _811 }<br/>StorageDead(_812)<br/>StorageDead(_811)<br/>StorageDead(_810)<br/>StorageDead(_809)<br/>StorageDead(_801)<br/>StorageDead(_797)<br/>StorageDead(_796)<br/>StorageDead(_795)<br/>StorageDead(_794)<br/>StorageDead(_793)<br/>StorageDead(_792)<br/>StorageDead(_791)<br/>StorageDead(_790)<br/>StorageDead(_788)<br/>StorageDead(_787)<br/>StorageDead(_786)<br/>StorageLive(_854)<br/>StorageLive(_855)<br/>_855 = &amp;mut (*_49)<br/></td></tr><tr><td align="left">_854 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _855)</td></tr></table>>];
    bb297__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">297</td></tr><tr><td align="left" balign="left">StorageDead(_855)<br/>(*_854) = move _785<br/>StorageDead(_785)<br/>StorageDead(_854)<br/>StorageDead(_838)<br/>StorageDead(_802)<br/>StorageDead(_800)<br/>StorageLive(_856)<br/>StorageLive(_857)<br/>StorageLive(_858)<br/>StorageLive(_859)<br/>StorageLive(_860)<br/>StorageLive(_861)<br/>StorageLive(_862)<br/>StorageLive(_863)<br/>_1103 = deref_copy (*_683)<br/>_1118 = (((_1103.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_863 = &amp;(*_1118)<br/></td></tr><tr><td align="left">_862 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _863)</td></tr></table>>];
    bb298__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">298</td></tr><tr><td align="left" balign="left">StorageDead(_863)<br/>_861 = ((*_862).13: u16)<br/></td></tr><tr><td align="left">_860 = core::num::&lt;impl u16&gt;::checked_add(move _861, const 1_u16)</td></tr></table>>];
    bb299__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">299</td></tr><tr><td align="left" balign="left">StorageDead(_861)<br/>StorageLive(_864)<br/>_864 = {closure@programs/drift/src/error.rs:658:9: 658:11}<br/></td></tr><tr><td align="left">_859 = Option::&lt;u16&gt;::ok_or_else::&lt;error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}&gt;(move _860, move _864)</td></tr></table>>];
    bb300__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">300</td></tr><tr><td align="left" balign="left">StorageDead(_864)<br/>StorageDead(_860)<br/></td></tr><tr><td align="left">_858 = &lt;std::result::Result&lt;u16, error::ErrorCode&gt; as Try&gt;::branch(move _859)</td></tr></table>>];
    bb301__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">301</td></tr><tr><td align="left" balign="left">StorageDead(_859)<br/>_865 = discriminant(_858)<br/></td></tr><tr><td align="left">switchInt(move _865)</td></tr></table>>];
    bb302__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">302</td></tr><tr><td align="left" balign="left">StorageLive(_869)<br/>_869 = ((_858 as Continue).0: u16)<br/>_857 = _869<br/>StorageDead(_869)<br/>StorageLive(_870)<br/>StorageLive(_871)<br/>_1104 = deref_copy (*_683)<br/>_1119 = (((_1104.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_871 = &amp;mut (*_1119)<br/></td></tr><tr><td align="left">_870 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as DerefMut&gt;::deref_mut(move _871)</td></tr></table>>];
    bb303__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">303</td></tr><tr><td align="left" balign="left">StorageLive(_866)<br/>_866 = ((_858 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_868)<br/>_868 = _866<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _868)</td></tr></table>>];
    bb304__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">304</td></tr><tr><td align="left" balign="left">StorageDead(_868)<br/>StorageDead(_866)<br/>StorageDead(_857)<br/>StorageDead(_862)<br/>StorageDead(_858)<br/>StorageDead(_856)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb305__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">305</td></tr><tr><td align="left" balign="left">StorageDead(_871)<br/>((*_870).13: u16) = move _857<br/>_856 = const ()<br/>StorageDead(_857)<br/>StorageDead(_870)<br/>StorageDead(_862)<br/>StorageDead(_858)<br/>StorageDead(_856)<br/>StorageLive(_872)<br/>StorageLive(_873)<br/>StorageLive(_874)<br/>StorageLive(_875)<br/>StorageLive(_876)<br/>StorageLive(_877)<br/>_877 = &amp;mut (*_49)<br/></td></tr><tr><td align="left">_876 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _877)</td></tr></table>>];
    bb306__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">306</td></tr><tr><td align="left" balign="left">_875 = &amp;mut (*_876)<br/>StorageDead(_877)<br/>StorageLive(_878)<br/>_878 = _23<br/></td></tr><tr><td align="left">_874 = update_concentration_coef(move _875, move _878)</td></tr></table>>];
    bb307__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">307</td></tr><tr><td align="left" balign="left">StorageDead(_878)<br/>StorageDead(_875)<br/></td></tr><tr><td align="left">_873 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _874)</td></tr></table>>];
    bb308__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">308</td></tr><tr><td align="left" balign="left">StorageDead(_874)<br/>_879 = discriminant(_873)<br/></td></tr><tr><td align="left">switchInt(move _879)</td></tr></table>>];
    bb309__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">309</td></tr><tr><td align="left" balign="left">StorageLive(_883)<br/>_883 = ((_873 as Continue).0: ())<br/>_872 = _883<br/>StorageDead(_883)<br/>StorageDead(_876)<br/>StorageDead(_873)<br/>StorageDead(_872)<br/>StorageLive(_884)<br/>StorageLive(_885)<br/>StorageLive(_886)<br/>StorageLive(_887)<br/>StorageLive(_888)<br/>StorageLive(_889)<br/>StorageLive(_890)<br/>StorageLive(_891)<br/>StorageLive(_892)<br/>StorageLive(_893)<br/>StorageLive(_894)<br/>StorageLive(_895)<br/>_1037 = const _<br/>_895 = &amp;(*_1037)<br/>_894 = &amp;(*_895)<br/>_893 = move _894 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_894)<br/>StorageLive(_897)<br/>StorageLive(_898)<br/>StorageLive(_899)<br/>StorageLive(_900)<br/>StorageLive(_901)<br/>StorageLive(_902)<br/>StorageLive(_903)<br/>_903 = &amp;_243<br/>_902 = &amp;(*_903)<br/></td></tr><tr><td align="left">_901 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i64&gt;(move _902)</td></tr></table>>];
    bb310__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">310</td></tr><tr><td align="left" balign="left">StorageLive(_880)<br/>_880 = ((_873 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_882)<br/>_882 = _880<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _882)</td></tr></table>>];
    bb311__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">311</td></tr><tr><td align="left" balign="left">StorageDead(_882)<br/>StorageDead(_880)<br/>StorageDead(_876)<br/>StorageDead(_873)<br/>StorageDead(_872)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb312__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">312</td></tr><tr><td align="left" balign="left">StorageDead(_902)<br/>_900 = [move _901]<br/>StorageDead(_901)<br/>_899 = &amp;_900<br/>_898 = &amp;(*_899)<br/>_897 = move _898 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_898)<br/></td></tr><tr><td align="left">_892 = Arguments::&lt;'_&gt;::new_v1(move _893, move _897)</td></tr></table>>];
    bb313__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">313</td></tr><tr><td align="left" balign="left">StorageDead(_897)<br/>StorageDead(_893)<br/></td></tr><tr><td align="left">_891 = format(move _892)</td></tr></table>>];
    bb314__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">314</td></tr><tr><td align="left" balign="left">StorageDead(_892)<br/>StorageDead(_903)<br/>StorageDead(_900)<br/>StorageDead(_899)<br/>StorageDead(_895)<br/>_890 = move _891<br/>StorageDead(_891)<br/>_889 = &amp;_890<br/>_888 = &amp;(*_889)<br/></td></tr><tr><td align="left">_887 = &lt;String as Deref&gt;::deref(move _888)</td></tr></table>>];
    bb315__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">315</td></tr><tr><td align="left" balign="left">_886 = &amp;(*_887)<br/>StorageDead(_888)<br/></td></tr><tr><td align="left">_885 = solana_program::log::sol_log(move _886)</td></tr></table>>];
    bb316__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">316</td></tr><tr><td align="left" balign="left">StorageDead(_886)<br/></td></tr><tr><td align="left">drop(_890)</td></tr></table>>];
    bb317__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">317</td></tr><tr><td align="left" balign="left">StorageDead(_890)<br/>StorageDead(_889)<br/>StorageDead(_887)<br/>StorageDead(_885)<br/>_884 = const ()<br/>StorageDead(_884)<br/>StorageLive(_906)<br/>StorageLive(_907)<br/>StorageLive(_908)<br/>StorageLive(_909)<br/>StorageLive(_910)<br/>StorageLive(_911)<br/>StorageLive(_912)<br/>_912 = &amp;(*_49)<br/></td></tr><tr><td align="left">_911 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _912)</td></tr></table>>];
    bb318__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">318</td></tr><tr><td align="left" balign="left">StorageDead(_912)<br/>_910 = &amp;((*_911).1: state::perp_market::AMM)<br/>_909 = &amp;(*_910)<br/></td></tr><tr><td align="left">_908 = calculate_market_open_bids_asks(move _909)</td></tr></table>>];
    bb319__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">319</td></tr><tr><td align="left" balign="left">StorageDead(_909)<br/></td></tr><tr><td align="left">_907 = &lt;std::result::Result&lt;(i128, i128), error::ErrorCode&gt; as Try&gt;::branch(move _908)</td></tr></table>>];
    bb320__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">320</td></tr><tr><td align="left" balign="left">StorageDead(_908)<br/>_913 = discriminant(_907)<br/></td></tr><tr><td align="left">switchInt(move _913)</td></tr></table>>];
    bb321__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">321</td></tr><tr><td align="left" balign="left">StorageLive(_917)<br/>_917 = ((_907 as Continue).0: (i128, i128))<br/>_906 = _917<br/>StorageDead(_917)<br/>StorageLive(_904)<br/>_904 = (_906.0: i128)<br/>StorageLive(_905)<br/>_905 = (_906.1: i128)<br/>StorageDead(_911)<br/>StorageDead(_910)<br/>StorageDead(_907)<br/>StorageDead(_906)<br/>StorageLive(_918)<br/>StorageLive(_919)<br/>StorageLive(_920)<br/>StorageLive(_921)<br/>StorageLive(_922)<br/>StorageLive(_923)<br/>StorageLive(_924)<br/>StorageLive(_925)<br/>StorageLive(_926)<br/>StorageLive(_927)<br/>StorageLive(_928)<br/>StorageLive(_929)<br/>_1036 = const _<br/>_929 = &amp;(*_1036)<br/>_928 = &amp;(*_929)<br/>_927 = move _928 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_928)<br/>StorageLive(_931)<br/>StorageLive(_932)<br/>StorageLive(_933)<br/>StorageLive(_934)<br/>StorageLive(_935)<br/>StorageLive(_936)<br/>StorageLive(_937)<br/>_937 = &amp;_904<br/>_936 = &amp;(*_937)<br/></td></tr><tr><td align="left">_935 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i128&gt;(move _936)</td></tr></table>>];
    bb322__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">322</td></tr><tr><td align="left" balign="left">StorageLive(_914)<br/>_914 = ((_907 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_916)<br/>_916 = _914<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _916)</td></tr></table>>];
    bb323__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">323</td></tr><tr><td align="left" balign="left">StorageDead(_916)<br/>StorageDead(_914)<br/>StorageDead(_911)<br/>StorageDead(_910)<br/>StorageDead(_907)<br/>StorageDead(_906)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb324__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">324</td></tr><tr><td align="left" balign="left">StorageDead(_936)<br/>_934 = [move _935]<br/>StorageDead(_935)<br/>_933 = &amp;_934<br/>_932 = &amp;(*_933)<br/>_931 = move _932 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_932)<br/></td></tr><tr><td align="left">_926 = Arguments::&lt;'_&gt;::new_v1(move _927, move _931)</td></tr></table>>];
    bb325__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">325</td></tr><tr><td align="left" balign="left">StorageDead(_931)<br/>StorageDead(_927)<br/></td></tr><tr><td align="left">_925 = format(move _926)</td></tr></table>>];
    bb326__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">326</td></tr><tr><td align="left" balign="left">StorageDead(_926)<br/>StorageDead(_937)<br/>StorageDead(_934)<br/>StorageDead(_933)<br/>StorageDead(_929)<br/>_924 = move _925<br/>StorageDead(_925)<br/>_923 = &amp;_924<br/>_922 = &amp;(*_923)<br/></td></tr><tr><td align="left">_921 = &lt;String as Deref&gt;::deref(move _922)</td></tr></table>>];
    bb327__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">327</td></tr><tr><td align="left" balign="left">_920 = &amp;(*_921)<br/>StorageDead(_922)<br/></td></tr><tr><td align="left">_919 = solana_program::log::sol_log(move _920)</td></tr></table>>];
    bb328__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">328</td></tr><tr><td align="left" balign="left">StorageDead(_920)<br/></td></tr><tr><td align="left">drop(_924)</td></tr></table>>];
    bb329__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">329</td></tr><tr><td align="left" balign="left">StorageDead(_924)<br/>StorageDead(_923)<br/>StorageDead(_921)<br/>StorageDead(_919)<br/>StorageLive(_938)<br/>StorageLive(_939)<br/>StorageLive(_940)<br/>StorageLive(_941)<br/>StorageLive(_942)<br/>StorageLive(_943)<br/>StorageLive(_944)<br/>StorageLive(_945)<br/>StorageLive(_946)<br/>StorageLive(_947)<br/>StorageLive(_948)<br/>_1035 = const _<br/>_948 = &amp;(*_1035)<br/>_947 = &amp;(*_948)<br/>_946 = move _947 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_947)<br/>StorageLive(_950)<br/>StorageLive(_951)<br/>StorageLive(_952)<br/>StorageLive(_953)<br/>StorageLive(_954)<br/>StorageLive(_955)<br/>StorageLive(_956)<br/>_956 = &amp;_905<br/>_955 = &amp;(*_956)<br/></td></tr><tr><td align="left">_954 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i128&gt;(move _955)</td></tr></table>>];
    bb330__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">330</td></tr><tr><td align="left" balign="left">StorageDead(_955)<br/>_953 = [move _954]<br/>StorageDead(_954)<br/>_952 = &amp;_953<br/>_951 = &amp;(*_952)<br/>_950 = move _951 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_951)<br/></td></tr><tr><td align="left">_945 = Arguments::&lt;'_&gt;::new_v1(move _946, move _950)</td></tr></table>>];
    bb331__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">331</td></tr><tr><td align="left" balign="left">StorageDead(_950)<br/>StorageDead(_946)<br/></td></tr><tr><td align="left">_944 = format(move _945)</td></tr></table>>];
    bb332__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">332</td></tr><tr><td align="left" balign="left">StorageDead(_945)<br/>StorageDead(_956)<br/>StorageDead(_953)<br/>StorageDead(_952)<br/>StorageDead(_948)<br/>_943 = move _944<br/>StorageDead(_944)<br/>_942 = &amp;_943<br/>_941 = &amp;(*_942)<br/></td></tr><tr><td align="left">_940 = &lt;String as Deref&gt;::deref(move _941)</td></tr></table>>];
    bb333__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">333</td></tr><tr><td align="left" balign="left">_939 = &amp;(*_940)<br/>StorageDead(_941)<br/></td></tr><tr><td align="left">_938 = solana_program::log::sol_log(move _939)</td></tr></table>>];
    bb334__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">334</td></tr><tr><td align="left" balign="left">StorageDead(_939)<br/></td></tr><tr><td align="left">drop(_943)</td></tr></table>>];
    bb335__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">335</td></tr><tr><td align="left" balign="left">StorageDead(_943)<br/>StorageDead(_942)<br/>StorageDead(_940)<br/>StorageDead(_938)<br/>_918 = const ()<br/>StorageDead(_918)<br/>StorageLive(_957)<br/>StorageLive(_958)<br/>StorageLive(_959)<br/>StorageLive(_960)<br/>StorageLive(_961)<br/>StorageLive(_962)<br/>_962 = &amp;(*_49)<br/></td></tr><tr><td align="left">_961 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _962)</td></tr></table>>];
    bb336__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">336</td></tr><tr><td align="left" balign="left">StorageDead(_962)<br/>_960 = &amp;((*_961).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_959 = AMM::reserve_price(move _960)</td></tr></table>>];
    bb337__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">337</td></tr><tr><td align="left" balign="left">StorageDead(_960)<br/></td></tr><tr><td align="left">_958 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _959)</td></tr></table>>];
    bb338__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">338</td></tr><tr><td align="left" balign="left">StorageDead(_959)<br/>_963 = discriminant(_958)<br/></td></tr><tr><td align="left">switchInt(move _963)</td></tr></table>>];
    bb339__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">339</td></tr><tr><td align="left" balign="left">StorageLive(_967)<br/>_967 = ((_958 as Continue).0: u64)<br/>_957 = _967<br/>StorageDead(_967)<br/>StorageDead(_961)<br/>StorageDead(_958)<br/>StorageLive(_970)<br/>StorageLive(_971)<br/>StorageLive(_972)<br/>StorageLive(_973)<br/>StorageLive(_974)<br/>StorageLive(_975)<br/>_975 = &amp;(*_49)<br/></td></tr><tr><td align="left">_974 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _975)</td></tr></table>>];
    bb340__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">340</td></tr><tr><td align="left" balign="left">StorageLive(_964)<br/>_964 = ((_958 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_966)<br/>_966 = _964<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _966)</td></tr></table>>];
    bb341__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">341</td></tr><tr><td align="left" balign="left">StorageDead(_966)<br/>StorageDead(_964)<br/>StorageDead(_961)<br/>StorageDead(_958)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb342__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">342</td></tr><tr><td align="left" balign="left">StorageDead(_975)<br/>_973 = &amp;((*_974).1: state::perp_market::AMM)<br/>StorageLive(_976)<br/>_976 = _957<br/></td></tr><tr><td align="left">_972 = AMM::bid_ask_price(move _973, move _976)</td></tr></table>>];
    bb343__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">343</td></tr><tr><td align="left" balign="left">StorageDead(_976)<br/>StorageDead(_973)<br/></td></tr><tr><td align="left">_971 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _972)</td></tr></table>>];
    bb344__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">344</td></tr><tr><td align="left" balign="left">StorageDead(_972)<br/>_977 = discriminant(_971)<br/></td></tr><tr><td align="left">switchInt(move _977)</td></tr></table>>];
    bb345__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">345</td></tr><tr><td align="left" balign="left">StorageLive(_981)<br/>_981 = ((_971 as Continue).0: (u64, u64))<br/>_970 = _981<br/>StorageDead(_981)<br/>StorageLive(_968)<br/>_968 = (_970.0: u64)<br/>StorageLive(_969)<br/>_969 = (_970.1: u64)<br/>StorageDead(_974)<br/>StorageDead(_971)<br/>StorageDead(_970)<br/>StorageLive(_982)<br/>StorageLive(_983)<br/>StorageLive(_984)<br/>StorageLive(_985)<br/>StorageLive(_986)<br/>StorageLive(_987)<br/>StorageLive(_988)<br/>StorageLive(_989)<br/>StorageLive(_990)<br/>StorageLive(_991)<br/>StorageLive(_992)<br/>StorageLive(_993)<br/>_1034 = const _<br/>_993 = &amp;(*_1034)<br/>_992 = &amp;(*_993)<br/>_991 = move _992 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_992)<br/>StorageLive(_995)<br/>StorageLive(_996)<br/>StorageLive(_997)<br/>StorageLive(_998)<br/>StorageLive(_999)<br/>StorageLive(_1000)<br/>StorageLive(_1001)<br/>_1001 = &amp;_968<br/>_1000 = &amp;(*_1001)<br/></td></tr><tr><td align="left">_999 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _1000)</td></tr></table>>];
    bb346__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">346</td></tr><tr><td align="left" balign="left">StorageLive(_978)<br/>_978 = ((_971 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_980)<br/>_980 = _978<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _980)</td></tr></table>>];
    bb347__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">347</td></tr><tr><td align="left" balign="left">StorageDead(_980)<br/>StorageDead(_978)<br/>StorageDead(_974)<br/>StorageDead(_971)<br/>StorageDead(_970)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb348__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">348</td></tr><tr><td align="left" balign="left">StorageDead(_1000)<br/>_998 = [move _999]<br/>StorageDead(_999)<br/>_997 = &amp;_998<br/>_996 = &amp;(*_997)<br/>_995 = move _996 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_996)<br/></td></tr><tr><td align="left">_990 = Arguments::&lt;'_&gt;::new_v1(move _991, move _995)</td></tr></table>>];
    bb349__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">349</td></tr><tr><td align="left" balign="left">StorageDead(_995)<br/>StorageDead(_991)<br/></td></tr><tr><td align="left">_989 = format(move _990)</td></tr></table>>];
    bb350__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">350</td></tr><tr><td align="left" balign="left">StorageDead(_990)<br/>StorageDead(_1001)<br/>StorageDead(_998)<br/>StorageDead(_997)<br/>StorageDead(_993)<br/>_988 = move _989<br/>StorageDead(_989)<br/>_987 = &amp;_988<br/>_986 = &amp;(*_987)<br/></td></tr><tr><td align="left">_985 = &lt;String as Deref&gt;::deref(move _986)</td></tr></table>>];
    bb351__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">351</td></tr><tr><td align="left" balign="left">_984 = &amp;(*_985)<br/>StorageDead(_986)<br/></td></tr><tr><td align="left">_983 = solana_program::log::sol_log(move _984)</td></tr></table>>];
    bb352__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">352</td></tr><tr><td align="left" balign="left">StorageDead(_984)<br/></td></tr><tr><td align="left">drop(_988)</td></tr></table>>];
    bb353__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">353</td></tr><tr><td align="left" balign="left">StorageDead(_988)<br/>StorageDead(_987)<br/>StorageDead(_985)<br/>StorageDead(_983)<br/>StorageLive(_1002)<br/>StorageLive(_1003)<br/>StorageLive(_1004)<br/>StorageLive(_1005)<br/>StorageLive(_1006)<br/>StorageLive(_1007)<br/>StorageLive(_1008)<br/>StorageLive(_1009)<br/>StorageLive(_1010)<br/>StorageLive(_1011)<br/>StorageLive(_1012)<br/>_1033 = const _<br/>_1012 = &amp;(*_1033)<br/>_1011 = &amp;(*_1012)<br/>_1010 = move _1011 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_1011)<br/>StorageLive(_1014)<br/>StorageLive(_1015)<br/>StorageLive(_1016)<br/>StorageLive(_1017)<br/>StorageLive(_1018)<br/>StorageLive(_1019)<br/>StorageLive(_1020)<br/>_1020 = &amp;_969<br/>_1019 = &amp;(*_1020)<br/></td></tr><tr><td align="left">_1018 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _1019)</td></tr></table>>];
    bb354__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">354</td></tr><tr><td align="left" balign="left">StorageDead(_1019)<br/>_1017 = [move _1018]<br/>StorageDead(_1018)<br/>_1016 = &amp;_1017<br/>_1015 = &amp;(*_1016)<br/>_1014 = move _1015 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_1015)<br/></td></tr><tr><td align="left">_1009 = Arguments::&lt;'_&gt;::new_v1(move _1010, move _1014)</td></tr></table>>];
    bb355__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">355</td></tr><tr><td align="left" balign="left">StorageDead(_1014)<br/>StorageDead(_1010)<br/></td></tr><tr><td align="left">_1008 = format(move _1009)</td></tr></table>>];
    bb356__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">356</td></tr><tr><td align="left" balign="left">StorageDead(_1009)<br/>StorageDead(_1020)<br/>StorageDead(_1017)<br/>StorageDead(_1016)<br/>StorageDead(_1012)<br/>_1007 = move _1008<br/>StorageDead(_1008)<br/>_1006 = &amp;_1007<br/>_1005 = &amp;(*_1006)<br/></td></tr><tr><td align="left">_1004 = &lt;String as Deref&gt;::deref(move _1005)</td></tr></table>>];
    bb357__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">357</td></tr><tr><td align="left" balign="left">_1003 = &amp;(*_1004)<br/>StorageDead(_1005)<br/></td></tr><tr><td align="left">_1002 = solana_program::log::sol_log(move _1003)</td></tr></table>>];
    bb358__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">358</td></tr><tr><td align="left" balign="left">StorageDead(_1003)<br/></td></tr><tr><td align="left">drop(_1007)</td></tr></table>>];
    bb359__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">359</td></tr><tr><td align="left" balign="left">StorageDead(_1007)<br/>StorageDead(_1006)<br/>StorageDead(_1004)<br/>StorageDead(_1002)<br/>_982 = const ()<br/>StorageDead(_982)<br/>StorageLive(_1021)<br/>StorageLive(_1022)<br/>StorageLive(_1023)<br/>StorageLive(_1024)<br/>StorageLive(_1025)<br/>StorageLive(_1026)<br/>_1026 = &amp;(*_49)<br/></td></tr><tr><td align="left">_1025 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1026)</td></tr></table>>];
    bb360__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">360</td></tr><tr><td align="left" balign="left">_1024 = &amp;(*_1025)<br/>StorageDead(_1026)<br/></td></tr><tr><td align="left">_1023 = validate_perp_market(move _1024)</td></tr></table>>];
    bb361__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">361</td></tr><tr><td align="left" balign="left">StorageDead(_1024)<br/></td></tr><tr><td align="left">_1022 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1023)</td></tr></table>>];
    bb362__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">362</td></tr><tr><td align="left" balign="left">StorageDead(_1023)<br/>_1027 = discriminant(_1022)<br/></td></tr><tr><td align="left">switchInt(move _1027)</td></tr></table>>];
    bb363__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">363</td></tr><tr><td align="left" balign="left">StorageLive(_1031)<br/>_1031 = ((_1022 as Continue).0: ())<br/>_1021 = _1031<br/>StorageDead(_1031)<br/>StorageDead(_1025)<br/>StorageDead(_1022)<br/>StorageDead(_1021)<br/>StorageLive(_1032)<br/>_1032 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _1032)<br/>StorageDead(_1032)<br/>StorageDead(_969)<br/>StorageDead(_968)<br/>StorageDead(_957)<br/>StorageDead(_905)<br/>StorageDead(_904)<br/>StorageDead(_683)<br/>StorageDead(_245)<br/>StorageDead(_244)<br/>StorageDead(_243)<br/>StorageDead(_222)<br/>StorageDead(_221)<br/>StorageDead(_209)<br/>StorageDead(_208)<br/>StorageDead(_170)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">drop(_50)</td></tr></table>>];
    bb364__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">364</td></tr><tr><td align="left" balign="left">StorageLive(_1028)<br/>_1028 = ((_1022 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1030)<br/>_1030 = _1028<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1030)</td></tr></table>>];
    bb365__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">365</td></tr><tr><td align="left" balign="left">StorageDead(_1030)<br/>StorageDead(_1028)<br/>StorageDead(_1025)<br/>StorageDead(_1022)<br/>StorageDead(_1021)<br/>StorageDead(_969)<br/>StorageDead(_968)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb366__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">366</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb367__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">367</td></tr><tr><td align="left" balign="left">StorageDead(_957)<br/>StorageDead(_905)<br/>StorageDead(_904)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb368__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">368</td></tr><tr><td align="left" balign="left">StorageDead(_683)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb369__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">369</td></tr><tr><td align="left" balign="left">StorageDead(_245)<br/>StorageDead(_244)<br/>StorageDead(_243)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb370__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">370</td></tr><tr><td align="left" balign="left">StorageDead(_246)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb371__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">371</td></tr><tr><td align="left" balign="left">StorageDead(_222)<br/>StorageDead(_221)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb372__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">372</td></tr><tr><td align="left" balign="left">StorageDead(_209)<br/>StorageDead(_208)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb373__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">373</td></tr><tr><td align="left" balign="left">StorageDead(_170)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb374__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">374</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb375__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">375</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/></td></tr><tr><td align="left">drop(_50)</td></tr></table>>];
    bb376__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">376</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb377__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">377</td></tr><tr><td align="left">return</td></tr></table>>];
    bb378__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">378 (cleanup)</td></tr><tr><td align="left">drop(_1007)</td></tr></table>>];
    bb379__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">379 (cleanup)</td></tr><tr><td align="left">drop(_988)</td></tr></table>>];
    bb380__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">380 (cleanup)</td></tr><tr><td align="left">drop(_943)</td></tr></table>>];
    bb381__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">381 (cleanup)</td></tr><tr><td align="left">drop(_924)</td></tr></table>>];
    bb382__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">382 (cleanup)</td></tr><tr><td align="left">drop(_890)</td></tr></table>>];
    bb383__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">383 (cleanup)</td></tr><tr><td align="left">drop(_762)</td></tr></table>>];
    bb384__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">384 (cleanup)</td></tr><tr><td align="left">drop(_718)</td></tr></table>>];
    bb385__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">385 (cleanup)</td></tr><tr><td align="left">drop(_699)</td></tr></table>>];
    bb386__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">386 (cleanup)</td></tr><tr><td align="left">drop(_157)</td></tr></table>>];
    bb387__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">387 (cleanup)</td></tr><tr><td align="left">drop(_138)</td></tr></table>>];
    bb388__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">388 (cleanup)</td></tr><tr><td align="left">drop(_110)</td></tr></table>>];
    bb389__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">389 (cleanup)</td></tr><tr><td align="left">drop(_91)</td></tr></table>>];
    bb390__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">390 (cleanup)</td></tr><tr><td align="left">drop(_50)</td></tr></table>>];
    bb391__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">391 (cleanup)</td></tr><tr><td align="left">drop(_32)</td></tr></table>>];
    bb392__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">392 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb393__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">393 (cleanup)</td></tr><tr><td align="left" balign="left">_1113 = discriminant(_60)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb394__0_1081 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">394 (cleanup)</td></tr><tr><td align="left" balign="left">_1114 = discriminant(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1081 -> bb1__0_1081 [label="return"];
    bb1__0_1081 -> bb2__0_1081 [label="return"];
    bb2__0_1081 -> bb3__0_1081 [label="return"];
    bb3__0_1081 -> bb4__0_1081 [label="return"];
    bb3__0_1081 -> bb391__0_1081 [label="unwind"];
    bb4__0_1081 -> bb5__0_1081 [label="return"];
    bb4__0_1081 -> bb391__0_1081 [label="unwind"];
    bb5__0_1081 -> bb6__0_1081 [label="return"];
    bb5__0_1081 -> bb392__0_1081 [label="unwind"];
    bb6__0_1081 -> bb7__0_1081 [label="return"];
    bb7__0_1081 -> bb8__0_1081 [label="return"];
    bb7__0_1081 -> bb392__0_1081 [label="unwind"];
    bb8__0_1081 -> bb9__0_1081 [label="return"];
    bb9__0_1081 -> bb10__0_1081 [label="return"];
    bb9__0_1081 -> bb392__0_1081 [label="unwind"];
    bb10__0_1081 -> bb11__0_1081 [label="0"];
    bb10__0_1081 -> bb13__0_1081 [label="1"];
    bb10__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb11__0_1081 -> bb15__0_1081 [label="return"];
    bb11__0_1081 -> bb390__0_1081 [label="unwind"];
    bb13__0_1081 -> bb14__0_1081 [label="return"];
    bb13__0_1081 -> bb394__0_1081 [label="unwind"];
    bb14__0_1081 -> bb376__0_1081 [label=""];
    bb15__0_1081 -> bb16__0_1081 [label="return"];
    bb15__0_1081 -> bb390__0_1081 [label="unwind"];
    bb16__0_1081 -> bb17__0_1081 [label="0"];
    bb16__0_1081 -> bb18__0_1081 [label="1"];
    bb16__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb17__0_1081 -> bb22__0_1081 [label="0"];
    bb17__0_1081 -> bb20__0_1081 [label="otherwise"];
    bb18__0_1081 -> bb19__0_1081 [label="return"];
    bb18__0_1081 -> bb393__0_1081 [label="unwind"];
    bb19__0_1081 -> bb375__0_1081 [label=""];
    bb20__0_1081 -> bb21__0_1081 [label="return"];
    bb20__0_1081 -> bb390__0_1081 [label="unwind"];
    bb21__0_1081 -> bb374__0_1081 [label=""];
    bb22__0_1081 -> bb23__0_1081 [label="return"];
    bb22__0_1081 -> bb390__0_1081 [label="unwind"];
    bb23__0_1081 -> bb25__0_1081 [label="0"];
    bb23__0_1081 -> bb24__0_1081 [label="otherwise"];
    bb24__0_1081 -> bb37__0_1081 [label=""];
    bb25__0_1081 -> bb26__0_1081 [label="return"];
    bb25__0_1081 -> bb390__0_1081 [label="unwind"];
    bb26__0_1081 -> bb27__0_1081 [label="return"];
    bb26__0_1081 -> bb390__0_1081 [label="unwind"];
    bb27__0_1081 -> bb28__0_1081 [label="return"];
    bb27__0_1081 -> bb390__0_1081 [label="unwind"];
    bb28__0_1081 -> bb29__0_1081 [label="return"];
    bb28__0_1081 -> bb389__0_1081 [label="unwind"];
    bb29__0_1081 -> bb30__0_1081 [label="return"];
    bb29__0_1081 -> bb389__0_1081 [label="unwind"];
    bb30__0_1081 -> bb31__0_1081 [label="return"];
    bb30__0_1081 -> bb390__0_1081 [label="unwind"];
    bb31__0_1081 -> bb32__0_1081 [label="return"];
    bb31__0_1081 -> bb390__0_1081 [label="unwind"];
    bb32__0_1081 -> bb33__0_1081 [label="return"];
    bb32__0_1081 -> bb390__0_1081 [label="unwind"];
    bb33__0_1081 -> bb34__0_1081 [label="return"];
    bb33__0_1081 -> bb388__0_1081 [label="unwind"];
    bb34__0_1081 -> bb35__0_1081 [label="return"];
    bb34__0_1081 -> bb388__0_1081 [label="unwind"];
    bb35__0_1081 -> bb36__0_1081 [label="return"];
    bb35__0_1081 -> bb390__0_1081 [label="unwind"];
    bb36__0_1081 -> bb37__0_1081 [label=""];
    bb37__0_1081 -> bb38__0_1081 [label="return"];
    bb37__0_1081 -> bb390__0_1081 [label="unwind"];
    bb38__0_1081 -> bb39__0_1081 [label="0"];
    bb38__0_1081 -> bb40__0_1081 [label="1"];
    bb38__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb39__0_1081 -> bb42__0_1081 [label="return"];
    bb39__0_1081 -> bb390__0_1081 [label="unwind"];
    bb40__0_1081 -> bb41__0_1081 [label="return"];
    bb40__0_1081 -> bb390__0_1081 [label="unwind"];
    bb41__0_1081 -> bb374__0_1081 [label=""];
    bb42__0_1081 -> bb44__0_1081 [label="0"];
    bb42__0_1081 -> bb43__0_1081 [label="otherwise"];
    bb43__0_1081 -> bb56__0_1081 [label=""];
    bb44__0_1081 -> bb45__0_1081 [label="return"];
    bb44__0_1081 -> bb390__0_1081 [label="unwind"];
    bb45__0_1081 -> bb46__0_1081 [label="return"];
    bb45__0_1081 -> bb390__0_1081 [label="unwind"];
    bb46__0_1081 -> bb47__0_1081 [label="return"];
    bb46__0_1081 -> bb390__0_1081 [label="unwind"];
    bb47__0_1081 -> bb48__0_1081 [label="return"];
    bb47__0_1081 -> bb387__0_1081 [label="unwind"];
    bb48__0_1081 -> bb49__0_1081 [label="return"];
    bb48__0_1081 -> bb387__0_1081 [label="unwind"];
    bb49__0_1081 -> bb50__0_1081 [label="return"];
    bb49__0_1081 -> bb390__0_1081 [label="unwind"];
    bb50__0_1081 -> bb51__0_1081 [label="return"];
    bb50__0_1081 -> bb390__0_1081 [label="unwind"];
    bb51__0_1081 -> bb52__0_1081 [label="return"];
    bb51__0_1081 -> bb390__0_1081 [label="unwind"];
    bb52__0_1081 -> bb53__0_1081 [label="return"];
    bb52__0_1081 -> bb386__0_1081 [label="unwind"];
    bb53__0_1081 -> bb54__0_1081 [label="return"];
    bb53__0_1081 -> bb386__0_1081 [label="unwind"];
    bb54__0_1081 -> bb55__0_1081 [label="return"];
    bb54__0_1081 -> bb390__0_1081 [label="unwind"];
    bb55__0_1081 -> bb56__0_1081 [label=""];
    bb56__0_1081 -> bb57__0_1081 [label="return"];
    bb56__0_1081 -> bb390__0_1081 [label="unwind"];
    bb57__0_1081 -> bb58__0_1081 [label="0"];
    bb57__0_1081 -> bb59__0_1081 [label="1"];
    bb57__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb58__0_1081 -> bb61__0_1081 [label="return"];
    bb58__0_1081 -> bb390__0_1081 [label="unwind"];
    bb59__0_1081 -> bb60__0_1081 [label="return"];
    bb59__0_1081 -> bb390__0_1081 [label="unwind"];
    bb60__0_1081 -> bb374__0_1081 [label=""];
    bb61__0_1081 -> bb62__0_1081 [label="return"];
    bb61__0_1081 -> bb390__0_1081 [label="unwind"];
    bb62__0_1081 -> bb63__0_1081 [label="0"];
    bb62__0_1081 -> bb64__0_1081 [label="1"];
    bb62__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb63__0_1081 -> bb66__0_1081 [label="return"];
    bb63__0_1081 -> bb390__0_1081 [label="unwind"];
    bb64__0_1081 -> bb65__0_1081 [label="return"];
    bb64__0_1081 -> bb390__0_1081 [label="unwind"];
    bb65__0_1081 -> bb373__0_1081 [label=""];
    bb66__0_1081 -> bb67__0_1081 [label="return"];
    bb66__0_1081 -> bb390__0_1081 [label="unwind"];
    bb67__0_1081 -> bb68__0_1081 [label="0"];
    bb67__0_1081 -> bb69__0_1081 [label="1"];
    bb67__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb68__0_1081 -> bb72__0_1081 [label="0"];
    bb68__0_1081 -> bb71__0_1081 [label="otherwise"];
    bb69__0_1081 -> bb70__0_1081 [label="return"];
    bb69__0_1081 -> bb390__0_1081 [label="unwind"];
    bb70__0_1081 -> bb373__0_1081 [label=""];
    bb71__0_1081 -> bb73__0_1081 [label="return"];
    bb71__0_1081 -> bb390__0_1081 [label="unwind"];
    bb72__0_1081 -> bb390__0_1081 [label="unwind"];
    bb73__0_1081 -> bb74__0_1081 [label="return"];
    bb73__0_1081 -> bb390__0_1081 [label="unwind"];
    bb74__0_1081 -> bb75__0_1081 [label="return"];
    bb74__0_1081 -> bb390__0_1081 [label="unwind"];
    bb75__0_1081 -> bb76__0_1081 [label="return"];
    bb75__0_1081 -> bb390__0_1081 [label="unwind"];
    bb76__0_1081 -> bb77__0_1081 [label="0"];
    bb76__0_1081 -> bb78__0_1081 [label="1"];
    bb76__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb77__0_1081 -> bb80__0_1081 [label="return"];
    bb77__0_1081 -> bb390__0_1081 [label="unwind"];
    bb78__0_1081 -> bb79__0_1081 [label="return"];
    bb78__0_1081 -> bb390__0_1081 [label="unwind"];
    bb79__0_1081 -> bb372__0_1081 [label=""];
    bb80__0_1081 -> bb81__0_1081 [label="return"];
    bb80__0_1081 -> bb390__0_1081 [label="unwind"];
    bb81__0_1081 -> bb82__0_1081 [label="0"];
    bb81__0_1081 -> bb83__0_1081 [label="1"];
    bb81__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb82__0_1081 -> bb85__0_1081 [label="return"];
    bb82__0_1081 -> bb390__0_1081 [label="unwind"];
    bb83__0_1081 -> bb84__0_1081 [label="return"];
    bb83__0_1081 -> bb390__0_1081 [label="unwind"];
    bb84__0_1081 -> bb372__0_1081 [label=""];
    bb85__0_1081 -> bb86__0_1081 [label="return"];
    bb85__0_1081 -> bb390__0_1081 [label="unwind"];
    bb86__0_1081 -> bb87__0_1081 [label="0"];
    bb86__0_1081 -> bb88__0_1081 [label="1"];
    bb86__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb87__0_1081 -> bb91__0_1081 [label="0"];
    bb87__0_1081 -> bb133__0_1081 [label="1"];
    bb87__0_1081 -> bb139__0_1081 [label="2"];
    bb87__0_1081 -> bb103__0_1081 [label="3"];
    bb87__0_1081 -> bb115__0_1081 [label="4"];
    bb87__0_1081 -> bb127__0_1081 [label="5"];
    bb87__0_1081 -> bb142__0_1081 [label="6"];
    bb87__0_1081 -> bb148__0_1081 [label="7"];
    bb87__0_1081 -> bb160__0_1081 [label="8"];
    bb87__0_1081 -> bb172__0_1081 [label="9"];
    bb87__0_1081 -> bb184__0_1081 [label="10"];
    bb87__0_1081 -> bb190__0_1081 [label="11"];
    bb87__0_1081 -> bb196__0_1081 [label="12"];
    bb87__0_1081 -> bb208__0_1081 [label="13"];
    bb87__0_1081 -> bb220__0_1081 [label="14"];
    bb87__0_1081 -> bb90__0_1081 [label="15"];
    bb87__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb88__0_1081 -> bb89__0_1081 [label="return"];
    bb88__0_1081 -> bb390__0_1081 [label="unwind"];
    bb89__0_1081 -> bb371__0_1081 [label=""];
    bb90__0_1081 -> bb232__0_1081 [label="return"];
    bb90__0_1081 -> bb390__0_1081 [label="unwind"];
    bb91__0_1081 -> bb92__0_1081 [label="return"];
    bb91__0_1081 -> bb390__0_1081 [label="unwind"];
    bb92__0_1081 -> bb93__0_1081 [label="return"];
    bb92__0_1081 -> bb390__0_1081 [label="unwind"];
    bb93__0_1081 -> bb94__0_1081 [label="0"];
    bb93__0_1081 -> bb95__0_1081 [label="1"];
    bb93__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb94__0_1081 -> bb97__0_1081 [label="return"];
    bb94__0_1081 -> bb390__0_1081 [label="unwind"];
    bb95__0_1081 -> bb96__0_1081 [label="return"];
    bb95__0_1081 -> bb390__0_1081 [label="unwind"];
    bb96__0_1081 -> bb370__0_1081 [label=""];
    bb97__0_1081 -> bb98__0_1081 [label="return"];
    bb97__0_1081 -> bb390__0_1081 [label="unwind"];
    bb98__0_1081 -> bb99__0_1081 [label="return"];
    bb98__0_1081 -> bb390__0_1081 [label="unwind"];
    bb99__0_1081 -> bb100__0_1081 [label="0"];
    bb99__0_1081 -> bb101__0_1081 [label="1"];
    bb99__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb100__0_1081 -> bb237__0_1081 [label=""];
    bb101__0_1081 -> bb102__0_1081 [label="return"];
    bb101__0_1081 -> bb390__0_1081 [label="unwind"];
    bb102__0_1081 -> bb370__0_1081 [label=""];
    bb103__0_1081 -> bb104__0_1081 [label="return"];
    bb103__0_1081 -> bb390__0_1081 [label="unwind"];
    bb104__0_1081 -> bb105__0_1081 [label="return"];
    bb104__0_1081 -> bb390__0_1081 [label="unwind"];
    bb105__0_1081 -> bb106__0_1081 [label="0"];
    bb105__0_1081 -> bb107__0_1081 [label="1"];
    bb105__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb106__0_1081 -> bb109__0_1081 [label="return"];
    bb106__0_1081 -> bb390__0_1081 [label="unwind"];
    bb107__0_1081 -> bb108__0_1081 [label="return"];
    bb107__0_1081 -> bb390__0_1081 [label="unwind"];
    bb108__0_1081 -> bb370__0_1081 [label=""];
    bb109__0_1081 -> bb110__0_1081 [label="return"];
    bb109__0_1081 -> bb390__0_1081 [label="unwind"];
    bb110__0_1081 -> bb111__0_1081 [label="return"];
    bb110__0_1081 -> bb390__0_1081 [label="unwind"];
    bb111__0_1081 -> bb112__0_1081 [label="0"];
    bb111__0_1081 -> bb113__0_1081 [label="1"];
    bb111__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb112__0_1081 -> bb237__0_1081 [label=""];
    bb113__0_1081 -> bb114__0_1081 [label="return"];
    bb113__0_1081 -> bb390__0_1081 [label="unwind"];
    bb114__0_1081 -> bb370__0_1081 [label=""];
    bb115__0_1081 -> bb116__0_1081 [label="return"];
    bb115__0_1081 -> bb390__0_1081 [label="unwind"];
    bb116__0_1081 -> bb117__0_1081 [label="return"];
    bb116__0_1081 -> bb390__0_1081 [label="unwind"];
    bb117__0_1081 -> bb118__0_1081 [label="0"];
    bb117__0_1081 -> bb119__0_1081 [label="1"];
    bb117__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb118__0_1081 -> bb121__0_1081 [label="return"];
    bb118__0_1081 -> bb390__0_1081 [label="unwind"];
    bb119__0_1081 -> bb120__0_1081 [label="return"];
    bb119__0_1081 -> bb390__0_1081 [label="unwind"];
    bb120__0_1081 -> bb370__0_1081 [label=""];
    bb121__0_1081 -> bb122__0_1081 [label="return"];
    bb121__0_1081 -> bb390__0_1081 [label="unwind"];
    bb122__0_1081 -> bb123__0_1081 [label="return"];
    bb122__0_1081 -> bb390__0_1081 [label="unwind"];
    bb123__0_1081 -> bb124__0_1081 [label="0"];
    bb123__0_1081 -> bb125__0_1081 [label="1"];
    bb123__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb124__0_1081 -> bb237__0_1081 [label=""];
    bb125__0_1081 -> bb126__0_1081 [label="return"];
    bb125__0_1081 -> bb390__0_1081 [label="unwind"];
    bb126__0_1081 -> bb370__0_1081 [label=""];
    bb127__0_1081 -> bb128__0_1081 [label="return"];
    bb127__0_1081 -> bb390__0_1081 [label="unwind"];
    bb128__0_1081 -> bb129__0_1081 [label="return"];
    bb128__0_1081 -> bb390__0_1081 [label="unwind"];
    bb129__0_1081 -> bb130__0_1081 [label="0"];
    bb129__0_1081 -> bb131__0_1081 [label="1"];
    bb129__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb130__0_1081 -> bb237__0_1081 [label=""];
    bb131__0_1081 -> bb132__0_1081 [label="return"];
    bb131__0_1081 -> bb390__0_1081 [label="unwind"];
    bb132__0_1081 -> bb370__0_1081 [label=""];
    bb133__0_1081 -> bb134__0_1081 [label="return"];
    bb133__0_1081 -> bb390__0_1081 [label="unwind"];
    bb134__0_1081 -> bb135__0_1081 [label="return"];
    bb134__0_1081 -> bb390__0_1081 [label="unwind"];
    bb135__0_1081 -> bb136__0_1081 [label="0"];
    bb135__0_1081 -> bb137__0_1081 [label="1"];
    bb135__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb136__0_1081 -> bb237__0_1081 [label=""];
    bb137__0_1081 -> bb138__0_1081 [label="return"];
    bb137__0_1081 -> bb390__0_1081 [label="unwind"];
    bb138__0_1081 -> bb370__0_1081 [label=""];
    bb139__0_1081 -> bb140__0_1081 [label="return"];
    bb139__0_1081 -> bb390__0_1081 [label="unwind"];
    bb140__0_1081 -> bb141__0_1081 [label="return"];
    bb140__0_1081 -> bb390__0_1081 [label="unwind"];
    bb141__0_1081 -> bb370__0_1081 [label=""];
    bb142__0_1081 -> bb143__0_1081 [label="return"];
    bb142__0_1081 -> bb390__0_1081 [label="unwind"];
    bb143__0_1081 -> bb144__0_1081 [label="return"];
    bb143__0_1081 -> bb390__0_1081 [label="unwind"];
    bb144__0_1081 -> bb145__0_1081 [label="0"];
    bb144__0_1081 -> bb146__0_1081 [label="1"];
    bb144__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb145__0_1081 -> bb237__0_1081 [label=""];
    bb146__0_1081 -> bb147__0_1081 [label="return"];
    bb146__0_1081 -> bb390__0_1081 [label="unwind"];
    bb147__0_1081 -> bb370__0_1081 [label=""];
    bb148__0_1081 -> bb149__0_1081 [label="return"];
    bb148__0_1081 -> bb390__0_1081 [label="unwind"];
    bb149__0_1081 -> bb150__0_1081 [label="return"];
    bb149__0_1081 -> bb390__0_1081 [label="unwind"];
    bb150__0_1081 -> bb151__0_1081 [label="0"];
    bb150__0_1081 -> bb152__0_1081 [label="1"];
    bb150__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb151__0_1081 -> bb154__0_1081 [label="return"];
    bb151__0_1081 -> bb390__0_1081 [label="unwind"];
    bb152__0_1081 -> bb153__0_1081 [label="return"];
    bb152__0_1081 -> bb390__0_1081 [label="unwind"];
    bb153__0_1081 -> bb370__0_1081 [label=""];
    bb154__0_1081 -> bb155__0_1081 [label="return"];
    bb154__0_1081 -> bb390__0_1081 [label="unwind"];
    bb155__0_1081 -> bb156__0_1081 [label="return"];
    bb155__0_1081 -> bb390__0_1081 [label="unwind"];
    bb156__0_1081 -> bb157__0_1081 [label="0"];
    bb156__0_1081 -> bb158__0_1081 [label="1"];
    bb156__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb157__0_1081 -> bb237__0_1081 [label=""];
    bb158__0_1081 -> bb159__0_1081 [label="return"];
    bb158__0_1081 -> bb390__0_1081 [label="unwind"];
    bb159__0_1081 -> bb370__0_1081 [label=""];
    bb160__0_1081 -> bb161__0_1081 [label="return"];
    bb160__0_1081 -> bb390__0_1081 [label="unwind"];
    bb161__0_1081 -> bb162__0_1081 [label="return"];
    bb161__0_1081 -> bb390__0_1081 [label="unwind"];
    bb162__0_1081 -> bb163__0_1081 [label="0"];
    bb162__0_1081 -> bb164__0_1081 [label="1"];
    bb162__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb163__0_1081 -> bb166__0_1081 [label="return"];
    bb163__0_1081 -> bb390__0_1081 [label="unwind"];
    bb164__0_1081 -> bb165__0_1081 [label="return"];
    bb164__0_1081 -> bb390__0_1081 [label="unwind"];
    bb165__0_1081 -> bb370__0_1081 [label=""];
    bb166__0_1081 -> bb167__0_1081 [label="return"];
    bb166__0_1081 -> bb390__0_1081 [label="unwind"];
    bb167__0_1081 -> bb168__0_1081 [label="return"];
    bb167__0_1081 -> bb390__0_1081 [label="unwind"];
    bb168__0_1081 -> bb169__0_1081 [label="0"];
    bb168__0_1081 -> bb170__0_1081 [label="1"];
    bb168__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb169__0_1081 -> bb237__0_1081 [label=""];
    bb170__0_1081 -> bb171__0_1081 [label="return"];
    bb170__0_1081 -> bb390__0_1081 [label="unwind"];
    bb171__0_1081 -> bb370__0_1081 [label=""];
    bb172__0_1081 -> bb173__0_1081 [label="return"];
    bb172__0_1081 -> bb390__0_1081 [label="unwind"];
    bb173__0_1081 -> bb174__0_1081 [label="return"];
    bb173__0_1081 -> bb390__0_1081 [label="unwind"];
    bb174__0_1081 -> bb175__0_1081 [label="0"];
    bb174__0_1081 -> bb176__0_1081 [label="1"];
    bb174__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb175__0_1081 -> bb178__0_1081 [label="return"];
    bb175__0_1081 -> bb390__0_1081 [label="unwind"];
    bb176__0_1081 -> bb177__0_1081 [label="return"];
    bb176__0_1081 -> bb390__0_1081 [label="unwind"];
    bb177__0_1081 -> bb370__0_1081 [label=""];
    bb178__0_1081 -> bb179__0_1081 [label="return"];
    bb178__0_1081 -> bb390__0_1081 [label="unwind"];
    bb179__0_1081 -> bb180__0_1081 [label="return"];
    bb179__0_1081 -> bb390__0_1081 [label="unwind"];
    bb180__0_1081 -> bb181__0_1081 [label="0"];
    bb180__0_1081 -> bb182__0_1081 [label="1"];
    bb180__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb181__0_1081 -> bb237__0_1081 [label=""];
    bb182__0_1081 -> bb183__0_1081 [label="return"];
    bb182__0_1081 -> bb390__0_1081 [label="unwind"];
    bb183__0_1081 -> bb370__0_1081 [label=""];
    bb184__0_1081 -> bb185__0_1081 [label="return"];
    bb184__0_1081 -> bb390__0_1081 [label="unwind"];
    bb185__0_1081 -> bb186__0_1081 [label="return"];
    bb185__0_1081 -> bb390__0_1081 [label="unwind"];
    bb186__0_1081 -> bb187__0_1081 [label="0"];
    bb186__0_1081 -> bb188__0_1081 [label="1"];
    bb186__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb187__0_1081 -> bb237__0_1081 [label=""];
    bb188__0_1081 -> bb189__0_1081 [label="return"];
    bb188__0_1081 -> bb390__0_1081 [label="unwind"];
    bb189__0_1081 -> bb370__0_1081 [label=""];
    bb190__0_1081 -> bb191__0_1081 [label="return"];
    bb190__0_1081 -> bb390__0_1081 [label="unwind"];
    bb191__0_1081 -> bb192__0_1081 [label="return"];
    bb191__0_1081 -> bb390__0_1081 [label="unwind"];
    bb192__0_1081 -> bb193__0_1081 [label="0"];
    bb192__0_1081 -> bb194__0_1081 [label="1"];
    bb192__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb193__0_1081 -> bb237__0_1081 [label=""];
    bb194__0_1081 -> bb195__0_1081 [label="return"];
    bb194__0_1081 -> bb390__0_1081 [label="unwind"];
    bb195__0_1081 -> bb370__0_1081 [label=""];
    bb196__0_1081 -> bb197__0_1081 [label="return"];
    bb196__0_1081 -> bb390__0_1081 [label="unwind"];
    bb197__0_1081 -> bb198__0_1081 [label="return"];
    bb197__0_1081 -> bb390__0_1081 [label="unwind"];
    bb198__0_1081 -> bb199__0_1081 [label="0"];
    bb198__0_1081 -> bb200__0_1081 [label="1"];
    bb198__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb199__0_1081 -> bb202__0_1081 [label="return"];
    bb199__0_1081 -> bb390__0_1081 [label="unwind"];
    bb200__0_1081 -> bb201__0_1081 [label="return"];
    bb200__0_1081 -> bb390__0_1081 [label="unwind"];
    bb201__0_1081 -> bb370__0_1081 [label=""];
    bb202__0_1081 -> bb203__0_1081 [label="return"];
    bb202__0_1081 -> bb390__0_1081 [label="unwind"];
    bb203__0_1081 -> bb204__0_1081 [label="return"];
    bb203__0_1081 -> bb390__0_1081 [label="unwind"];
    bb204__0_1081 -> bb205__0_1081 [label="0"];
    bb204__0_1081 -> bb206__0_1081 [label="1"];
    bb204__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb205__0_1081 -> bb237__0_1081 [label=""];
    bb206__0_1081 -> bb207__0_1081 [label="return"];
    bb206__0_1081 -> bb390__0_1081 [label="unwind"];
    bb207__0_1081 -> bb370__0_1081 [label=""];
    bb208__0_1081 -> bb209__0_1081 [label="return"];
    bb208__0_1081 -> bb390__0_1081 [label="unwind"];
    bb209__0_1081 -> bb210__0_1081 [label="return"];
    bb209__0_1081 -> bb390__0_1081 [label="unwind"];
    bb210__0_1081 -> bb211__0_1081 [label="0"];
    bb210__0_1081 -> bb212__0_1081 [label="1"];
    bb210__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb211__0_1081 -> bb214__0_1081 [label="return"];
    bb211__0_1081 -> bb390__0_1081 [label="unwind"];
    bb212__0_1081 -> bb213__0_1081 [label="return"];
    bb212__0_1081 -> bb390__0_1081 [label="unwind"];
    bb213__0_1081 -> bb370__0_1081 [label=""];
    bb214__0_1081 -> bb215__0_1081 [label="return"];
    bb214__0_1081 -> bb390__0_1081 [label="unwind"];
    bb215__0_1081 -> bb216__0_1081 [label="return"];
    bb215__0_1081 -> bb390__0_1081 [label="unwind"];
    bb216__0_1081 -> bb217__0_1081 [label="0"];
    bb216__0_1081 -> bb218__0_1081 [label="1"];
    bb216__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb217__0_1081 -> bb237__0_1081 [label=""];
    bb218__0_1081 -> bb219__0_1081 [label="return"];
    bb218__0_1081 -> bb390__0_1081 [label="unwind"];
    bb219__0_1081 -> bb370__0_1081 [label=""];
    bb220__0_1081 -> bb221__0_1081 [label="return"];
    bb220__0_1081 -> bb390__0_1081 [label="unwind"];
    bb221__0_1081 -> bb222__0_1081 [label="return"];
    bb221__0_1081 -> bb390__0_1081 [label="unwind"];
    bb222__0_1081 -> bb223__0_1081 [label="0"];
    bb222__0_1081 -> bb224__0_1081 [label="1"];
    bb222__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb223__0_1081 -> bb226__0_1081 [label="return"];
    bb223__0_1081 -> bb390__0_1081 [label="unwind"];
    bb224__0_1081 -> bb225__0_1081 [label="return"];
    bb224__0_1081 -> bb390__0_1081 [label="unwind"];
    bb225__0_1081 -> bb370__0_1081 [label=""];
    bb226__0_1081 -> bb227__0_1081 [label="return"];
    bb226__0_1081 -> bb390__0_1081 [label="unwind"];
    bb227__0_1081 -> bb228__0_1081 [label="return"];
    bb227__0_1081 -> bb390__0_1081 [label="unwind"];
    bb228__0_1081 -> bb229__0_1081 [label="0"];
    bb228__0_1081 -> bb230__0_1081 [label="1"];
    bb228__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb229__0_1081 -> bb237__0_1081 [label=""];
    bb230__0_1081 -> bb231__0_1081 [label="return"];
    bb230__0_1081 -> bb390__0_1081 [label="unwind"];
    bb231__0_1081 -> bb370__0_1081 [label=""];
    bb232__0_1081 -> bb233__0_1081 [label="return"];
    bb232__0_1081 -> bb390__0_1081 [label="unwind"];
    bb233__0_1081 -> bb234__0_1081 [label="0"];
    bb233__0_1081 -> bb235__0_1081 [label="1"];
    bb233__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb234__0_1081 -> bb237__0_1081 [label=""];
    bb235__0_1081 -> bb236__0_1081 [label="return"];
    bb235__0_1081 -> bb390__0_1081 [label="unwind"];
    bb236__0_1081 -> bb370__0_1081 [label=""];
    bb237__0_1081 -> bb238__0_1081 [label="return"];
    bb237__0_1081 -> bb390__0_1081 [label="unwind"];
    bb238__0_1081 -> bb239__0_1081 [label="return"];
    bb238__0_1081 -> bb390__0_1081 [label="unwind"];
    bb239__0_1081 -> bb240__0_1081 [label="0"];
    bb239__0_1081 -> bb241__0_1081 [label="1"];
    bb239__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb240__0_1081 -> bb243__0_1081 [label="return"];
    bb240__0_1081 -> bb390__0_1081 [label="unwind"];
    bb241__0_1081 -> bb242__0_1081 [label="return"];
    bb241__0_1081 -> bb390__0_1081 [label="unwind"];
    bb242__0_1081 -> bb369__0_1081 [label=""];
    bb243__0_1081 -> bb245__0_1081 [label="0"];
    bb243__0_1081 -> bb244__0_1081 [label="otherwise"];
    bb244__0_1081 -> bb260__0_1081 [label=""];
    bb245__0_1081 -> bb246__0_1081 [label="return"];
    bb245__0_1081 -> bb390__0_1081 [label="unwind"];
    bb246__0_1081 -> bb247__0_1081 [label="return"];
    bb246__0_1081 -> bb390__0_1081 [label="unwind"];
    bb247__0_1081 -> bb248__0_1081 [label="return"];
    bb247__0_1081 -> bb390__0_1081 [label="unwind"];
    bb248__0_1081 -> bb249__0_1081 [label="return"];
    bb248__0_1081 -> bb385__0_1081 [label="unwind"];
    bb249__0_1081 -> bb250__0_1081 [label="return"];
    bb249__0_1081 -> bb385__0_1081 [label="unwind"];
    bb250__0_1081 -> bb251__0_1081 [label="return"];
    bb250__0_1081 -> bb390__0_1081 [label="unwind"];
    bb251__0_1081 -> bb252__0_1081 [label="return"];
    bb251__0_1081 -> bb390__0_1081 [label="unwind"];
    bb252__0_1081 -> bb253__0_1081 [label="return"];
    bb252__0_1081 -> bb390__0_1081 [label="unwind"];
    bb253__0_1081 -> bb254__0_1081 [label="return"];
    bb253__0_1081 -> bb390__0_1081 [label="unwind"];
    bb254__0_1081 -> bb255__0_1081 [label="return"];
    bb254__0_1081 -> bb390__0_1081 [label="unwind"];
    bb255__0_1081 -> bb256__0_1081 [label="return"];
    bb255__0_1081 -> bb390__0_1081 [label="unwind"];
    bb256__0_1081 -> bb257__0_1081 [label="return"];
    bb256__0_1081 -> bb384__0_1081 [label="unwind"];
    bb257__0_1081 -> bb258__0_1081 [label="return"];
    bb257__0_1081 -> bb384__0_1081 [label="unwind"];
    bb258__0_1081 -> bb259__0_1081 [label="return"];
    bb258__0_1081 -> bb390__0_1081 [label="unwind"];
    bb259__0_1081 -> bb260__0_1081 [label=""];
    bb260__0_1081 -> bb261__0_1081 [label="return"];
    bb260__0_1081 -> bb390__0_1081 [label="unwind"];
    bb261__0_1081 -> bb262__0_1081 [label="0"];
    bb261__0_1081 -> bb263__0_1081 [label="1"];
    bb261__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb262__0_1081 -> bb266__0_1081 [label="0"];
    bb262__0_1081 -> bb265__0_1081 [label="otherwise"];
    bb263__0_1081 -> bb264__0_1081 [label="return"];
    bb263__0_1081 -> bb390__0_1081 [label="unwind"];
    bb264__0_1081 -> bb368__0_1081 [label=""];
    bb265__0_1081 -> bb267__0_1081 [label="return"];
    bb265__0_1081 -> bb390__0_1081 [label="unwind"];
    bb266__0_1081 -> bb284__0_1081 [label=""];
    bb267__0_1081 -> bb268__0_1081 [label="return"];
    bb267__0_1081 -> bb390__0_1081 [label="unwind"];
    bb268__0_1081 -> bb269__0_1081 [label="return"];
    bb268__0_1081 -> bb390__0_1081 [label="unwind"];
    bb269__0_1081 -> bb271__0_1081 [label="0"];
    bb269__0_1081 -> bb270__0_1081 [label="otherwise"];
    bb270__0_1081 -> bb279__0_1081 [label=""];
    bb271__0_1081 -> bb272__0_1081 [label="return"];
    bb271__0_1081 -> bb390__0_1081 [label="unwind"];
    bb272__0_1081 -> bb273__0_1081 [label="return"];
    bb272__0_1081 -> bb390__0_1081 [label="unwind"];
    bb273__0_1081 -> bb274__0_1081 [label="return"];
    bb273__0_1081 -> bb390__0_1081 [label="unwind"];
    bb274__0_1081 -> bb275__0_1081 [label="return"];
    bb274__0_1081 -> bb383__0_1081 [label="unwind"];
    bb275__0_1081 -> bb276__0_1081 [label="return"];
    bb275__0_1081 -> bb383__0_1081 [label="unwind"];
    bb276__0_1081 -> bb277__0_1081 [label="return"];
    bb276__0_1081 -> bb390__0_1081 [label="unwind"];
    bb277__0_1081 -> bb278__0_1081 [label="return"];
    bb277__0_1081 -> bb390__0_1081 [label="unwind"];
    bb278__0_1081 -> bb279__0_1081 [label=""];
    bb279__0_1081 -> bb280__0_1081 [label="return"];
    bb279__0_1081 -> bb390__0_1081 [label="unwind"];
    bb280__0_1081 -> bb281__0_1081 [label="0"];
    bb280__0_1081 -> bb282__0_1081 [label="1"];
    bb280__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb281__0_1081 -> bb284__0_1081 [label=""];
    bb282__0_1081 -> bb283__0_1081 [label="return"];
    bb282__0_1081 -> bb390__0_1081 [label="unwind"];
    bb283__0_1081 -> bb368__0_1081 [label=""];
    bb284__0_1081 -> bb286__0_1081 [label="0"];
    bb284__0_1081 -> bb285__0_1081 [label="otherwise"];
    bb285__0_1081 -> bb287__0_1081 [label=""];
    bb286__0_1081 -> bb287__0_1081 [label=""];
    bb287__0_1081 -> bb288__0_1081 [label="return"];
    bb287__0_1081 -> bb390__0_1081 [label="unwind"];
    bb288__0_1081 -> bb289__0_1081 [label="return"];
    bb288__0_1081 -> bb390__0_1081 [label="unwind"];
    bb289__0_1081 -> bb290__0_1081 [label="return"];
    bb289__0_1081 -> bb390__0_1081 [label="unwind"];
    bb290__0_1081 -> bb291__0_1081 [label="return"];
    bb290__0_1081 -> bb390__0_1081 [label="unwind"];
    bb291__0_1081 -> bb292__0_1081 [label="0"];
    bb291__0_1081 -> bb293__0_1081 [label="1"];
    bb291__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb292__0_1081 -> bb295__0_1081 [label="return"];
    bb292__0_1081 -> bb390__0_1081 [label="unwind"];
    bb293__0_1081 -> bb294__0_1081 [label="return"];
    bb293__0_1081 -> bb390__0_1081 [label="unwind"];
    bb294__0_1081 -> bb368__0_1081 [label=""];
    bb295__0_1081 -> bb296__0_1081 [label="return"];
    bb295__0_1081 -> bb390__0_1081 [label="unwind"];
    bb296__0_1081 -> bb297__0_1081 [label="return"];
    bb296__0_1081 -> bb390__0_1081 [label="unwind"];
    bb297__0_1081 -> bb298__0_1081 [label="return"];
    bb297__0_1081 -> bb390__0_1081 [label="unwind"];
    bb298__0_1081 -> bb299__0_1081 [label="return"];
    bb298__0_1081 -> bb390__0_1081 [label="unwind"];
    bb299__0_1081 -> bb300__0_1081 [label="return"];
    bb299__0_1081 -> bb390__0_1081 [label="unwind"];
    bb300__0_1081 -> bb301__0_1081 [label="return"];
    bb300__0_1081 -> bb390__0_1081 [label="unwind"];
    bb301__0_1081 -> bb302__0_1081 [label="0"];
    bb301__0_1081 -> bb303__0_1081 [label="1"];
    bb301__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb302__0_1081 -> bb305__0_1081 [label="return"];
    bb302__0_1081 -> bb390__0_1081 [label="unwind"];
    bb303__0_1081 -> bb304__0_1081 [label="return"];
    bb303__0_1081 -> bb390__0_1081 [label="unwind"];
    bb304__0_1081 -> bb368__0_1081 [label=""];
    bb305__0_1081 -> bb306__0_1081 [label="return"];
    bb305__0_1081 -> bb390__0_1081 [label="unwind"];
    bb306__0_1081 -> bb307__0_1081 [label="return"];
    bb306__0_1081 -> bb390__0_1081 [label="unwind"];
    bb307__0_1081 -> bb308__0_1081 [label="return"];
    bb307__0_1081 -> bb390__0_1081 [label="unwind"];
    bb308__0_1081 -> bb309__0_1081 [label="0"];
    bb308__0_1081 -> bb310__0_1081 [label="1"];
    bb308__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb309__0_1081 -> bb312__0_1081 [label="return"];
    bb309__0_1081 -> bb390__0_1081 [label="unwind"];
    bb310__0_1081 -> bb311__0_1081 [label="return"];
    bb310__0_1081 -> bb390__0_1081 [label="unwind"];
    bb311__0_1081 -> bb368__0_1081 [label=""];
    bb312__0_1081 -> bb313__0_1081 [label="return"];
    bb312__0_1081 -> bb390__0_1081 [label="unwind"];
    bb313__0_1081 -> bb314__0_1081 [label="return"];
    bb313__0_1081 -> bb390__0_1081 [label="unwind"];
    bb314__0_1081 -> bb315__0_1081 [label="return"];
    bb314__0_1081 -> bb382__0_1081 [label="unwind"];
    bb315__0_1081 -> bb316__0_1081 [label="return"];
    bb315__0_1081 -> bb382__0_1081 [label="unwind"];
    bb316__0_1081 -> bb317__0_1081 [label="return"];
    bb316__0_1081 -> bb390__0_1081 [label="unwind"];
    bb317__0_1081 -> bb318__0_1081 [label="return"];
    bb317__0_1081 -> bb390__0_1081 [label="unwind"];
    bb318__0_1081 -> bb319__0_1081 [label="return"];
    bb318__0_1081 -> bb390__0_1081 [label="unwind"];
    bb319__0_1081 -> bb320__0_1081 [label="return"];
    bb319__0_1081 -> bb390__0_1081 [label="unwind"];
    bb320__0_1081 -> bb321__0_1081 [label="0"];
    bb320__0_1081 -> bb322__0_1081 [label="1"];
    bb320__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb321__0_1081 -> bb324__0_1081 [label="return"];
    bb321__0_1081 -> bb390__0_1081 [label="unwind"];
    bb322__0_1081 -> bb323__0_1081 [label="return"];
    bb322__0_1081 -> bb390__0_1081 [label="unwind"];
    bb323__0_1081 -> bb368__0_1081 [label=""];
    bb324__0_1081 -> bb325__0_1081 [label="return"];
    bb324__0_1081 -> bb390__0_1081 [label="unwind"];
    bb325__0_1081 -> bb326__0_1081 [label="return"];
    bb325__0_1081 -> bb390__0_1081 [label="unwind"];
    bb326__0_1081 -> bb327__0_1081 [label="return"];
    bb326__0_1081 -> bb381__0_1081 [label="unwind"];
    bb327__0_1081 -> bb328__0_1081 [label="return"];
    bb327__0_1081 -> bb381__0_1081 [label="unwind"];
    bb328__0_1081 -> bb329__0_1081 [label="return"];
    bb328__0_1081 -> bb390__0_1081 [label="unwind"];
    bb329__0_1081 -> bb330__0_1081 [label="return"];
    bb329__0_1081 -> bb390__0_1081 [label="unwind"];
    bb330__0_1081 -> bb331__0_1081 [label="return"];
    bb330__0_1081 -> bb390__0_1081 [label="unwind"];
    bb331__0_1081 -> bb332__0_1081 [label="return"];
    bb331__0_1081 -> bb390__0_1081 [label="unwind"];
    bb332__0_1081 -> bb333__0_1081 [label="return"];
    bb332__0_1081 -> bb380__0_1081 [label="unwind"];
    bb333__0_1081 -> bb334__0_1081 [label="return"];
    bb333__0_1081 -> bb380__0_1081 [label="unwind"];
    bb334__0_1081 -> bb335__0_1081 [label="return"];
    bb334__0_1081 -> bb390__0_1081 [label="unwind"];
    bb335__0_1081 -> bb336__0_1081 [label="return"];
    bb335__0_1081 -> bb390__0_1081 [label="unwind"];
    bb336__0_1081 -> bb337__0_1081 [label="return"];
    bb336__0_1081 -> bb390__0_1081 [label="unwind"];
    bb337__0_1081 -> bb338__0_1081 [label="return"];
    bb337__0_1081 -> bb390__0_1081 [label="unwind"];
    bb338__0_1081 -> bb339__0_1081 [label="0"];
    bb338__0_1081 -> bb340__0_1081 [label="1"];
    bb338__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb339__0_1081 -> bb342__0_1081 [label="return"];
    bb339__0_1081 -> bb390__0_1081 [label="unwind"];
    bb340__0_1081 -> bb341__0_1081 [label="return"];
    bb340__0_1081 -> bb390__0_1081 [label="unwind"];
    bb341__0_1081 -> bb367__0_1081 [label=""];
    bb342__0_1081 -> bb343__0_1081 [label="return"];
    bb342__0_1081 -> bb390__0_1081 [label="unwind"];
    bb343__0_1081 -> bb344__0_1081 [label="return"];
    bb343__0_1081 -> bb390__0_1081 [label="unwind"];
    bb344__0_1081 -> bb345__0_1081 [label="0"];
    bb344__0_1081 -> bb346__0_1081 [label="1"];
    bb344__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb345__0_1081 -> bb348__0_1081 [label="return"];
    bb345__0_1081 -> bb390__0_1081 [label="unwind"];
    bb346__0_1081 -> bb347__0_1081 [label="return"];
    bb346__0_1081 -> bb390__0_1081 [label="unwind"];
    bb347__0_1081 -> bb367__0_1081 [label=""];
    bb348__0_1081 -> bb349__0_1081 [label="return"];
    bb348__0_1081 -> bb390__0_1081 [label="unwind"];
    bb349__0_1081 -> bb350__0_1081 [label="return"];
    bb349__0_1081 -> bb390__0_1081 [label="unwind"];
    bb350__0_1081 -> bb351__0_1081 [label="return"];
    bb350__0_1081 -> bb379__0_1081 [label="unwind"];
    bb351__0_1081 -> bb352__0_1081 [label="return"];
    bb351__0_1081 -> bb379__0_1081 [label="unwind"];
    bb352__0_1081 -> bb353__0_1081 [label="return"];
    bb352__0_1081 -> bb390__0_1081 [label="unwind"];
    bb353__0_1081 -> bb354__0_1081 [label="return"];
    bb353__0_1081 -> bb390__0_1081 [label="unwind"];
    bb354__0_1081 -> bb355__0_1081 [label="return"];
    bb354__0_1081 -> bb390__0_1081 [label="unwind"];
    bb355__0_1081 -> bb356__0_1081 [label="return"];
    bb355__0_1081 -> bb390__0_1081 [label="unwind"];
    bb356__0_1081 -> bb357__0_1081 [label="return"];
    bb356__0_1081 -> bb378__0_1081 [label="unwind"];
    bb357__0_1081 -> bb358__0_1081 [label="return"];
    bb357__0_1081 -> bb378__0_1081 [label="unwind"];
    bb358__0_1081 -> bb359__0_1081 [label="return"];
    bb358__0_1081 -> bb390__0_1081 [label="unwind"];
    bb359__0_1081 -> bb360__0_1081 [label="return"];
    bb359__0_1081 -> bb390__0_1081 [label="unwind"];
    bb360__0_1081 -> bb361__0_1081 [label="return"];
    bb360__0_1081 -> bb390__0_1081 [label="unwind"];
    bb361__0_1081 -> bb362__0_1081 [label="return"];
    bb361__0_1081 -> bb390__0_1081 [label="unwind"];
    bb362__0_1081 -> bb363__0_1081 [label="0"];
    bb362__0_1081 -> bb364__0_1081 [label="1"];
    bb362__0_1081 -> bb12__0_1081 [label="otherwise"];
    bb363__0_1081 -> bb366__0_1081 [label="return"];
    bb363__0_1081 -> bb392__0_1081 [label="unwind"];
    bb364__0_1081 -> bb365__0_1081 [label="return"];
    bb364__0_1081 -> bb390__0_1081 [label="unwind"];
    bb365__0_1081 -> bb367__0_1081 [label=""];
    bb366__0_1081 -> bb377__0_1081 [label=""];
    bb367__0_1081 -> bb368__0_1081 [label=""];
    bb368__0_1081 -> bb369__0_1081 [label=""];
    bb369__0_1081 -> bb371__0_1081 [label=""];
    bb370__0_1081 -> bb371__0_1081 [label=""];
    bb371__0_1081 -> bb372__0_1081 [label=""];
    bb372__0_1081 -> bb373__0_1081 [label=""];
    bb373__0_1081 -> bb374__0_1081 [label=""];
    bb374__0_1081 -> bb375__0_1081 [label=""];
    bb375__0_1081 -> bb376__0_1081 [label="return"];
    bb375__0_1081 -> bb392__0_1081 [label="unwind"];
    bb376__0_1081 -> bb377__0_1081 [label=""];
    bb378__0_1081 -> bb390__0_1081 [label="return"];
    bb379__0_1081 -> bb390__0_1081 [label="return"];
    bb380__0_1081 -> bb390__0_1081 [label="return"];
    bb381__0_1081 -> bb390__0_1081 [label="return"];
    bb382__0_1081 -> bb390__0_1081 [label="return"];
    bb383__0_1081 -> bb390__0_1081 [label="return"];
    bb384__0_1081 -> bb390__0_1081 [label="return"];
    bb385__0_1081 -> bb390__0_1081 [label="return"];
    bb386__0_1081 -> bb390__0_1081 [label="return"];
    bb387__0_1081 -> bb390__0_1081 [label="return"];
    bb388__0_1081 -> bb390__0_1081 [label="return"];
    bb389__0_1081 -> bb390__0_1081 [label="return"];
    bb390__0_1081 -> bb392__0_1081 [label="return"];
    bb391__0_1081 -> bb392__0_1081 [label="return"];
    bb393__0_1081 -> bb390__0_1081 [label=""];
    bb394__0_1081 -> bb392__0_1081 [label=""];
}
