// MIR for `admin::__client_accounts_update_phoenix_fulfillment_config::<impl at programs/drift/src/instructions/admin.rs:5116:10: 5116:18>::to_account_metas` before PreCodegen

fn admin::__client_accounts_update_phoenix_fulfillment_config::<impl at programs/drift/src/instructions/admin.rs:5116:10: 5116:18>::to_account_metas(_1: &admin::__client_accounts_update_phoenix_fulfillment_config::UpdatePhoenixFulfillmentConfig, _2: Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let _8: ();
    let mut _9: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _10: anchor_lang::prelude::AccountMeta;
    let mut _11: anchor_lang::prelude::Pubkey;
    let _12: ();
    let mut _13: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _14: anchor_lang::prelude::AccountMeta;
    let mut _15: anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = anchor_lang::prelude::AccountMeta::new_readonly(move _7, const false) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _3;
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).1: anchor_lang::prelude::Pubkey);
        _10 = anchor_lang::prelude::AccountMeta::new(move _11, const false) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        StorageDead(_11);
        _8 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _9, move _10) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _3;
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).2: anchor_lang::prelude::Pubkey);
        _14 = anchor_lang::prelude::AccountMeta::new(move _15, const true) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        StorageDead(_15);
        _12 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _13, move _14) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}
