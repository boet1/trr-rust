// MIR for `keeper::<impl at programs/drift/src/instructions/keeper.rs:3578:10: 3578:18>::try_accounts` after PreCodegen

fn keeper::<impl at programs/drift/src/instructions/keeper.rs:3578:10: 3578:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut UpdateUserGovTokenInsuranceStakeBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error>;
    let _6: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _8: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::keeper::UpdateUserGovTokenInsuranceStakeBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::keeper::UpdateUserGovTokenInsuranceStakeBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::keeper::UpdateUserGovTokenInsuranceStakeBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::keeper::UpdateUserGovTokenInsuranceStakeBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::keeper::UpdateUserGovTokenInsuranceStakeBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut instructions::keeper::UpdateUserGovTokenInsuranceStakeBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _98: (anchor_lang::prelude::Pubkey, u8);
    let mut _99: &[&[u8]];
    let mut _100: &[&[u8]; 2];
    let _101: &[&[u8]; 2];
    let _102: [&[u8]; 2];
    let mut _103: &[u8];
    let mut _104: &[u8; 11];
    let _105: &[u8; 11];
    let mut _106: &[u8];
    let _107: &[u8];
    let mut _108: &[u8; 2];
    let _109: [u8; 2];
    let mut _110: &anchor_lang::prelude::Pubkey;
    let _111: &&anchor_lang::prelude::Pubkey;
    let mut _112: u8;
    let _113: ();
    let mut _114: bool;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let _116: anchor_lang::prelude::Pubkey;
    let mut _117: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _118: &anchor_lang::prelude::Pubkey;
    let mut _119: !;
    let mut _120: anchor_lang::error::Error;
    let mut _121: anchor_lang::error::Error;
    let mut _122: anchor_lang::error::Error;
    let mut _123: anchor_lang::error::ErrorCode;
    let mut _124: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _125: anchor_lang::prelude::Pubkey;
    let mut _126: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _127: anchor_lang::prelude::Pubkey;
    let _128: ();
    let mut _129: bool;
    let mut _130: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _131: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _132: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _133: !;
    let mut _134: anchor_lang::error::Error;
    let mut _135: anchor_lang::error::Error;
    let mut _136: anchor_lang::error::ErrorCode;
    let _137: ();
    let mut _138: bool;
    let mut _139: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _140: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let _141: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _142: !;
    let mut _143: anchor_lang::error::Error;
    let mut _144: anchor_lang::error::Error;
    let mut _145: anchor_lang::error::ErrorCode;
    let _146: ();
    let mut _147: bool;
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _149: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _150: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let _151: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _152: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _153: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _159: !;
    let mut _160: anchor_lang::error::Error;
    let mut _161: anchor_lang::error::Error;
    let mut _162: anchor_lang::error::ErrorCode;
    let _163: ();
    let mut _164: bool;
    let mut _165: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _166: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _167: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _168: !;
    let mut _169: anchor_lang::error::Error;
    let mut _170: anchor_lang::error::Error;
    let mut _171: anchor_lang::error::ErrorCode;
    let mut _174: (anchor_lang::prelude::Pubkey, u8);
    let mut _175: &[&[u8]];
    let mut _176: &[&[u8]; 2];
    let _177: &[&[u8]; 2];
    let _178: [&[u8]; 2];
    let mut _179: &[u8];
    let _180: &[u8];
    let mut _181: &[u8; 20];
    let _182: &[u8; 20];
    let mut _183: &[u8];
    let _184: &[u8];
    let mut _185: &[u8; 2];
    let _186: [u8; 2];
    let mut _187: &anchor_lang::prelude::Pubkey;
    let _188: &&anchor_lang::prelude::Pubkey;
    let mut _189: u8;
    let _190: ();
    let mut _191: bool;
    let mut _192: &anchor_lang::prelude::Pubkey;
    let _193: anchor_lang::prelude::Pubkey;
    let mut _194: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _195: &anchor_lang::prelude::Pubkey;
    let mut _196: !;
    let mut _197: anchor_lang::error::Error;
    let mut _198: anchor_lang::error::Error;
    let mut _199: anchor_lang::error::Error;
    let mut _200: anchor_lang::error::ErrorCode;
    let mut _201: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _202: anchor_lang::prelude::Pubkey;
    let mut _203: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _204: anchor_lang::prelude::Pubkey;
    let _205: ();
    let mut _206: bool;
    let mut _207: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _208: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _209: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _210: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _211: !;
    let mut _212: anchor_lang::error::Error;
    let mut _213: anchor_lang::error::Error;
    let mut _214: anchor_lang::error::ErrorCode;
    let mut _215: instructions::keeper::UpdateUserGovTokenInsuranceStake<'_>;
    let mut _216: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _217: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _218: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _219: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _220: anchor_lang::prelude::Signer<'_>;
    let mut _221: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _222: &anchor_lang::prelude::Pubkey;
    let mut _223: &anchor_lang::prelude::Pubkey;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _264: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug state => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
        scope 6 {
            debug spot_market => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
            scope 11 {
                debug insurance_fund_stake => _36;
                let _51: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                scope 16 {
                    debug user_stats => _51;
                    let _66: anchor_lang::prelude::Signer<'_>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Signer<'_>;
                    scope 21 {
                        debug signer => _66;
                        let _81: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                        scope 26 {
                            debug insurance_fund_vault => _81;
                            let _96: anchor_lang::prelude::Pubkey;
                            let _97: u8;
                            scope 31 {
                                debug __pda_address => _96;
                                debug __bump => _97;
                                let _155: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _158: bool;
                                let _172: anchor_lang::prelude::Pubkey;
                                let _173: u8;
                                scope 32 {
                                    debug residual => _155;
                                    scope 33 {
                                    }
                                }
                                scope 34 {
                                    debug val => _158;
                                    scope 35 {
                                    }
                                }
                                scope 36 {
                                    debug __pda_address => _172;
                                    debug __bump => _173;
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _225 = const false;
        _224 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, UpdateUserGovTokenInsuranceStakeBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
        _8 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18}>(move _9, move _15) -> [return: bb2, unwind: bb101];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb101];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _6 = move _20;
        StorageDead(_20);
        _226 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, UpdateUserGovTokenInsuranceStakeBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind: bb100];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb114];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _254 = discriminant(_7);
        StorageDead(_7);
        goto -> bb97;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18}>(move _24, move _30) -> [return: bb9, unwind: bb100];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb100];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _21 = move _35;
        StorageDead(_35);
        _228 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as anchor_lang::Accounts<'_, UpdateUserGovTokenInsuranceStakeBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb100];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb113];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _252 = discriminant(_22);
        StorageDead(_22);
        goto -> bb96;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18}>(move _39, move _45) -> [return: bb15, unwind: bb100];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb100];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _36 = move _50;
        StorageDead(_50);
        _230 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, UpdateUserGovTokenInsuranceStakeBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb100];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb112];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _250 = discriminant(_37);
        StorageDead(_37);
        goto -> bb95;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18}>(move _54, move _60) -> [return: bb21, unwind: bb100];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb100];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _51 = move _65;
        StorageDead(_65);
        _232 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, UpdateUserGovTokenInsuranceStakeBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb100];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb111];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _248 = discriminant(_52);
        StorageDead(_52);
        goto -> bb94;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
        _68 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18}>(move _69, move _75) -> [return: bb27, unwind: bb100];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb100];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _66 = move _80;
        StorageDead(_80);
        _234 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, UpdateUserGovTokenInsuranceStakeBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb100];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb110];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _246 = discriminant(_67);
        StorageDead(_67);
        goto -> bb93;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18};
        _83 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3578:10: 3578:18}>(move _84, move _90) -> [return: bb33, unwind: bb100];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb100];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _81 = move _95;
        StorageDead(_95);
        _236 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = const b"spot_market";
        _104 = &(*_105);
        _103 = move _104 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = core::num::<impl u16>::to_le_bytes(const 15_u16) -> [return: bb38, unwind: bb99];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb109];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _244 = discriminant(_82);
        StorageDead(_82);
        goto -> bb92;
    }

    bb38: {
        _108 = &_109;
        _107 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _108) -> [return: bb39, unwind: bb99];
    }

    bb39: {
        _106 = &(*_107);
        StorageDead(_108);
        _102 = [move _103, move _106];
        StorageDead(_106);
        StorageDead(_103);
        _101 = &_102;
        _100 = &(*_101);
        _99 = move _100 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_100);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_1;
        _222 = deref_copy (*_111);
        _110 = &(*_222);
        _98 = anchor_lang::prelude::Pubkey::find_program_address(move _99, move _110) -> [return: bb40, unwind: bb99];
    }

    bb40: {
        StorageDead(_110);
        StorageDead(_99);
        StorageLive(_96);
        _96 = (_98.0: anchor_lang::prelude::Pubkey);
        StorageLive(_97);
        _97 = (_98.1: u8);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_98);
        StorageLive(_112);
        _112 = _97;
        ((*_4).0: u8) = move _112;
        StorageDead(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_21;
        _116 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _117) -> [return: bb41, unwind: bb99];
    }

    bb41: {
        _115 = &_116;
        StorageDead(_117);
        StorageLive(_118);
        _118 = &_96;
        _114 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _115, move _118) -> [return: bb42, unwind: bb99];
    }

    bb42: {
        switchInt(move _114) -> [0: bb48, otherwise: bb43];
    }

    bb43: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = ConstraintSeeds;
        _122 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _123) -> [return: bb44, unwind: bb99];
    }

    bb44: {
        StorageDead(_123);
        _121 = anchor_lang::error::Error::with_account_name::<&str>(move _122, const "spot_market") -> [return: bb45, unwind: bb99];
    }

    bb45: {
        _225 = const true;
        StorageDead(_122);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_21;
        _125 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _126) -> [return: bb46, unwind: bb108];
    }

    bb46: {
        StorageDead(_126);
        StorageLive(_127);
        _127 = _96;
        _124 = (move _125, move _127);
        StorageDead(_127);
        StorageDead(_125);
        _225 = const false;
        _120 = anchor_lang::error::Error::with_pubkeys(move _121, move _124) -> [return: bb47, unwind: bb108];
    }

    bb47: {
        StorageDead(_124);
        _225 = const false;
        StorageDead(_121);
        _0 = std::result::Result::<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error>::Err(move _120);
        StorageDead(_120);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb91;
    }

    bb48: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_115);
        _113 = const ();
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_21;
        _131 = &(*_132);
        _130 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _131) -> [return: bb49, unwind: bb99];
    }

    bb49: {
        StorageDead(_131);
        _129 = ((*_130).6: bool);
        switchInt(move _129) -> [0: bb50, otherwise: bb53];
    }

    bb50: {
        StorageDead(_132);
        StorageDead(_130);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = ConstraintMut;
        _135 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _136) -> [return: bb51, unwind: bb99];
    }

    bb51: {
        StorageDead(_136);
        _134 = anchor_lang::error::Error::with_account_name::<&str>(move _135, const "spot_market") -> [return: bb52, unwind: bb99];
    }

    bb52: {
        StorageDead(_135);
        _0 = std::result::Result::<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error>::Err(move _134);
        StorageDead(_134);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb91;
    }

    bb53: {
        StorageDead(_132);
        StorageDead(_130);
        _128 = const ();
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_36;
        _140 = &(*_141);
        _139 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _140) -> [return: bb54, unwind: bb99];
    }

    bb54: {
        StorageDead(_140);
        _138 = ((*_139).6: bool);
        switchInt(move _138) -> [0: bb55, otherwise: bb58];
    }

    bb55: {
        StorageDead(_141);
        StorageDead(_139);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = ConstraintMut;
        _144 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _145) -> [return: bb56, unwind: bb99];
    }

    bb56: {
        StorageDead(_145);
        _143 = anchor_lang::error::Error::with_account_name::<&str>(move _144, const "insurance_fund_stake") -> [return: bb57, unwind: bb99];
    }

    bb57: {
        StorageDead(_144);
        _0 = std::result::Result::<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error>::Err(move _143);
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb91;
    }

    bb58: {
        StorageDead(_141);
        StorageDead(_139);
        _137 = const ();
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_36;
        _150 = &(*_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_51;
        _152 = &(*_153);
        _149 = constraints::is_stats_for_if_stake(move _150, move _152) -> [return: bb59, unwind: bb99];
    }

    bb59: {
        StorageDead(_152);
        StorageDead(_150);
        _148 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _149) -> [return: bb60, unwind: bb99];
    }

    bb60: {
        StorageDead(_149);
        _154 = discriminant(_148);
        switchInt(move _154) -> [0: bb61, 1: bb62, otherwise: bb5];
    }

    bb61: {
        StorageLive(_158);
        _158 = ((_148 as Continue).0: bool);
        _147 = _158;
        StorageDead(_158);
        switchInt(move _147) -> [0: bb103, otherwise: bb102];
    }

    bb62: {
        StorageLive(_155);
        _155 = move ((_148 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_157);
        _157 = move _155;
        _0 = <std::result::Result<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _157) -> [return: bb63, unwind: bb106];
    }

    bb63: {
        StorageDead(_157);
        StorageDead(_155);
        _242 = discriminant(_148);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_148);
        goto -> bb90;
    }

    bb64: {
        StorageDead(_162);
        _160 = anchor_lang::error::Error::with_account_name::<&str>(move _161, const "insurance_fund_stake") -> [return: bb65, unwind: bb99];
    }

    bb65: {
        StorageDead(_161);
        _0 = std::result::Result::<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error>::Err(move _160);
        StorageDead(_160);
        goto -> bb90;
    }

    bb66: {
        StorageDead(_166);
        _164 = ((*_165).6: bool);
        switchInt(move _164) -> [0: bb67, otherwise: bb70];
    }

    bb67: {
        StorageDead(_167);
        StorageDead(_165);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = ConstraintMut;
        _170 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _171) -> [return: bb68, unwind: bb99];
    }

    bb68: {
        StorageDead(_171);
        _169 = anchor_lang::error::Error::with_account_name::<&str>(move _170, const "user_stats") -> [return: bb69, unwind: bb99];
    }

    bb69: {
        StorageDead(_170);
        _0 = std::result::Result::<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error>::Err(move _169);
        StorageDead(_169);
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb91;
    }

    bb70: {
        StorageDead(_167);
        StorageDead(_165);
        _163 = const ();
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = const b"insurance_fund_vault";
        _181 = &(*_182);
        _180 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _181) -> [return: bb71, unwind: bb99];
    }

    bb71: {
        _179 = &(*_180);
        StorageDead(_181);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = core::num::<impl u16>::to_le_bytes(const 15_u16) -> [return: bb72, unwind: bb99];
    }

    bb72: {
        _185 = &_186;
        _184 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _185) -> [return: bb73, unwind: bb99];
    }

    bb73: {
        _183 = &(*_184);
        StorageDead(_185);
        _178 = [move _179, move _183];
        StorageDead(_183);
        StorageDead(_179);
        _177 = &_178;
        _176 = &(*_177);
        _175 = move _176 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_176);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_1;
        _223 = deref_copy (*_188);
        _187 = &(*_223);
        _174 = anchor_lang::prelude::Pubkey::find_program_address(move _175, move _187) -> [return: bb74, unwind: bb99];
    }

    bb74: {
        StorageDead(_187);
        StorageDead(_175);
        StorageLive(_172);
        _172 = (_174.0: anchor_lang::prelude::Pubkey);
        StorageLive(_173);
        _173 = (_174.1: u8);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_174);
        StorageLive(_189);
        _189 = _173;
        ((*_4).1: u8) = move _189;
        StorageDead(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _263 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _194 = &(*_263);
        _193 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _194) -> [return: bb75, unwind: bb99];
    }

    bb75: {
        _192 = &_193;
        StorageDead(_194);
        StorageLive(_195);
        _195 = &_172;
        _191 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _192, move _195) -> [return: bb76, unwind: bb99];
    }

    bb76: {
        switchInt(move _191) -> [0: bb82, otherwise: bb77];
    }

    bb77: {
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_192);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = ConstraintSeeds;
        _199 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _200) -> [return: bb78, unwind: bb99];
    }

    bb78: {
        StorageDead(_200);
        _198 = anchor_lang::error::Error::with_account_name::<&str>(move _199, const "insurance_fund_vault") -> [return: bb79, unwind: bb99];
    }

    bb79: {
        _224 = const true;
        StorageDead(_199);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _264 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _203 = &(*_264);
        _202 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _203) -> [return: bb80, unwind: bb105];
    }

    bb80: {
        StorageDead(_203);
        StorageLive(_204);
        _204 = _172;
        _201 = (move _202, move _204);
        StorageDead(_204);
        StorageDead(_202);
        _224 = const false;
        _197 = anchor_lang::error::Error::with_pubkeys(move _198, move _201) -> [return: bb81, unwind: bb105];
    }

    bb81: {
        StorageDead(_201);
        _224 = const false;
        StorageDead(_198);
        _0 = std::result::Result::<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error>::Err(move _197);
        StorageDead(_197);
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb89;
    }

    bb82: {
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_192);
        _190 = const ();
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_81;
        _209 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _210) -> [return: bb83, unwind: bb99];
    }

    bb83: {
        _208 = &(*_209);
        StorageDead(_210);
        _207 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _208) -> [return: bb84, unwind: bb99];
    }

    bb84: {
        StorageDead(_208);
        _206 = ((*_207).6: bool);
        switchInt(move _206) -> [0: bb85, otherwise: bb88];
    }

    bb85: {
        StorageDead(_209);
        StorageDead(_207);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = ConstraintMut;
        _213 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _214) -> [return: bb86, unwind: bb99];
    }

    bb86: {
        StorageDead(_214);
        _212 = anchor_lang::error::Error::with_account_name::<&str>(move _213, const "insurance_fund_vault") -> [return: bb87, unwind: bb99];
    }

    bb87: {
        StorageDead(_213);
        _0 = std::result::Result::<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error>::Err(move _212);
        StorageDead(_212);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb89;
    }

    bb88: {
        StorageDead(_209);
        StorageDead(_207);
        _205 = const ();
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_215);
        StorageLive(_216);
        _216 = move _6;
        StorageLive(_217);
        _217 = move _21;
        StorageLive(_218);
        _218 = move _36;
        StorageLive(_219);
        _219 = move _51;
        StorageLive(_220);
        _220 = move _66;
        StorageLive(_221);
        _221 = move _81;
        _215 = keeper::UpdateUserGovTokenInsuranceStake::<'_> { state: move _216, spot_market: move _217, insurance_fund_stake: move _218, user_stats: move _219, signer: move _220, insurance_fund_vault: move _221 };
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_216);
        _0 = std::result::Result::<keeper::UpdateUserGovTokenInsuranceStake<'_>, anchor_lang::error::Error>::Ok(move _215);
        StorageDead(_215);
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb98;
    }

    bb89: {
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb91;
    }

    bb90: {
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_97);
        StorageDead(_96);
        drop(_81) -> [return: bb92, unwind: bb100];
    }

    bb92: {
        StorageDead(_81);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_66);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_51);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_36);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_21);
        drop(_6) -> [return: bb97, unwind: bb101];
    }

    bb97: {
        StorageDead(_6);
        goto -> bb98;
    }

    bb98: {
        return;
    }

    bb99 (cleanup): {
        drop(_81) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_6) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        resume;
    }

    bb102: {
        _238 = discriminant(_148);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_148);
        _146 = const ();
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_51;
        _166 = &(*_167);
        _165 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _166) -> [return: bb66, unwind: bb99];
    }

    bb103: {
        _240 = discriminant(_148);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_148);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = ConstraintRaw;
        _161 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _162) -> [return: bb64, unwind: bb99];
    }

    bb104 (cleanup): {
        drop(_198) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_224) -> [0: bb99, otherwise: bb104];
    }

    bb106 (cleanup): {
        _256 = discriminant(_148);
        goto -> bb99;
    }

    bb107 (cleanup): {
        drop(_121) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_225) -> [0: bb99, otherwise: bb107];
    }

    bb109 (cleanup): {
        _257 = discriminant(_82);
        goto -> bb100;
    }

    bb110 (cleanup): {
        _258 = discriminant(_67);
        goto -> bb100;
    }

    bb111 (cleanup): {
        _259 = discriminant(_52);
        goto -> bb100;
    }

    bb112 (cleanup): {
        _260 = discriminant(_37);
        goto -> bb100;
    }

    bb113 (cleanup): {
        _261 = discriminant(_22);
        goto -> bb100;
    }

    bb114 (cleanup): {
        _262 = discriminant(_7);
        goto -> bb101;
    }
}

alloc281 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc280 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}
