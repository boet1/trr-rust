// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_fuel_maker_bonus` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_fuel_maker_bonus(_1: &mut UserStats, _2: u8, _3: u64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug fuel_boost => _2;
    debug quote_asset_amount => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u8;
    let mut _7: u32;
    let mut _8: u32;
    let mut _9: u32;
    let mut _10: std::result::Result<u32, error::ErrorCode>;
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _14: std::result::Result<u64, error::ErrorCode>;
    let mut _15: u8;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: u64;
    let mut _21: u64;
    let mut _22: u64;
    let mut _23: bool;
    let mut _24: ();
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _20;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Gt(move _6, const 0_u8);
        switchInt(move _5) -> [0: bb13, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).22: u32);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _2;
        _14 = <u8 as Cast>::cast::<u64>(move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        _13 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: u64);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _3;
        _23 = Eq(const _, const 0_u64);
        assert(!move _23, "attempt to divide `{}` by zero", _22) -> [success: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb15;
    }

    bb8: {
        _21 = Div(move _22, const _);
        StorageDead(_22);
        _11 = core::num::<impl u64>::saturating_mul(move _12, move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_12);
        _10 = <u64 as Cast>::cast::<u32>(move _11) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_11);
        _9 = std::result::Result::<u32, error::ErrorCode>::unwrap_or(move _10, const _) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_10);
        _7 = core::num::<impl u32>::saturating_add(move _8, move _9) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_9);
        StorageDead(_8);
        ((*_1).22: u32) = move _7;
        StorageDead(_7);
        StorageDead(_13);
        _4 = const ();
        goto -> bb14;
    }

    bb13: {
        StorageDead(_6);
        _4 = const ();
        goto -> bb14;
    }

    bb14: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_24);
        _24 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _24);
        StorageDead(_24);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}
