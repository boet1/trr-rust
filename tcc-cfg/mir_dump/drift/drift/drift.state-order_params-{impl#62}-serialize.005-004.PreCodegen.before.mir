// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:913:10: 913:25>::serialize` before PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:913:10: 913:25>::serialize(_1: &order_params::ModifyOrderParams, _2: &mut W) -> std::result::Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _5: std::result::Result<(), std::io::Error>;
    let mut _6: &std::option::Option<controller::position::PositionDirection>;
    let _7: &std::option::Option<controller::position::PositionDirection>;
    let mut _8: &mut W;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: &std::option::Option<u64>;
    let _18: &std::option::Option<u64>;
    let mut _19: &mut W;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _24: ();
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _27: std::result::Result<(), std::io::Error>;
    let mut _28: &std::option::Option<u64>;
    let _29: &std::option::Option<u64>;
    let mut _30: &mut W;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _35: ();
    let _36: ();
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _38: std::result::Result<(), std::io::Error>;
    let mut _39: &std::option::Option<bool>;
    let _40: &std::option::Option<bool>;
    let mut _41: &mut W;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _46: ();
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _49: std::result::Result<(), std::io::Error>;
    let mut _50: &std::option::Option<state::order_params::PostOnlyParam>;
    let _51: &std::option::Option<state::order_params::PostOnlyParam>;
    let mut _52: &mut W;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _57: ();
    let _58: ();
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _60: std::result::Result<(), std::io::Error>;
    let mut _61: &std::option::Option<u8>;
    let _62: &std::option::Option<u8>;
    let mut _63: &mut W;
    let mut _64: isize;
    let _65: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _68: ();
    let _69: ();
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _71: std::result::Result<(), std::io::Error>;
    let mut _72: &std::option::Option<i64>;
    let _73: &std::option::Option<i64>;
    let mut _74: &mut W;
    let mut _75: isize;
    let _76: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _79: ();
    let _80: ();
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _82: std::result::Result<(), std::io::Error>;
    let mut _83: &std::option::Option<u64>;
    let _84: &std::option::Option<u64>;
    let mut _85: &mut W;
    let mut _86: isize;
    let _87: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _90: ();
    let _91: ();
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _93: std::result::Result<(), std::io::Error>;
    let mut _94: &std::option::Option<state::user::OrderTriggerCondition>;
    let _95: &std::option::Option<state::user::OrderTriggerCondition>;
    let mut _96: &mut W;
    let mut _97: isize;
    let _98: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _101: ();
    let _102: ();
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _104: std::result::Result<(), std::io::Error>;
    let mut _105: &std::option::Option<i32>;
    let _106: &std::option::Option<i32>;
    let mut _107: &mut W;
    let mut _108: isize;
    let _109: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _112: ();
    let _113: ();
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _115: std::result::Result<(), std::io::Error>;
    let mut _116: &std::option::Option<u8>;
    let _117: &std::option::Option<u8>;
    let mut _118: &mut W;
    let mut _119: isize;
    let _120: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _123: ();
    let _124: ();
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _126: std::result::Result<(), std::io::Error>;
    let mut _127: &std::option::Option<i64>;
    let _128: &std::option::Option<i64>;
    let mut _129: &mut W;
    let mut _130: isize;
    let _131: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _134: ();
    let _135: ();
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _137: std::result::Result<(), std::io::Error>;
    let mut _138: &std::option::Option<i64>;
    let _139: &std::option::Option<i64>;
    let mut _140: &mut W;
    let mut _141: isize;
    let _142: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _145: ();
    let _146: ();
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _148: std::result::Result<(), std::io::Error>;
    let mut _149: &std::option::Option<u8>;
    let _150: &std::option::Option<u8>;
    let mut _151: &mut W;
    let mut _152: isize;
    let _153: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _156: ();
    let mut _157: ();
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _32;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _35;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _43;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _46;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _54;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _57;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _65;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _68;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _76;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _79;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _87;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _90;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _98;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _101;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _109;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _112;
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _120;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _123;
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _131;
        scope 46 {
        }
    }
    scope 47 {
        debug val => _134;
        scope 48 {
        }
    }
    scope 49 {
        debug residual => _142;
        scope 50 {
        }
    }
    scope 51 {
        debug val => _145;
        scope 52 {
        }
    }
    scope 53 {
        debug residual => _153;
        scope 54 {
        }
    }
    scope 55 {
        debug val => _156;
        scope 56 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: std::option::Option<controller::position::PositionDirection>);
        _6 = &(*_7);
        StorageLive(_8);
        _8 = &mut (*_2);
        _5 = <Option<controller::position::PositionDirection> as BorshSerialize>::serialize::<W>(move _6, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<(), std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb73];
    }

    bb2: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_4 as Continue).0: ());
        _3 = _13;
        StorageDead(_13);
        _158 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_1).1: std::option::Option<u64>);
        _17 = &(*_18);
        StorageLive(_19);
        _19 = &mut (*_2);
        _16 = <Option<u64> as BorshSerialize>::serialize::<W>(move _17, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb87];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _212 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb72;
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<(), std::io::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb73];
    }

    bb8: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_15 as Continue).0: ());
        _14 = _24;
        StorageDead(_24);
        _160 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_1).2: std::option::Option<u64>);
        _28 = &(*_29);
        StorageLive(_30);
        _30 = &mut (*_2);
        _27 = <Option<u64> as BorshSerialize>::serialize::<W>(move _28, move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb11, unwind: bb86];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _210 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb72;
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <std::result::Result<(), std::io::Error> as Try>::branch(move _27) -> [return: bb13, unwind: bb73];
    }

    bb13: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_26 as Continue).0: ());
        _25 = _35;
        StorageDead(_35);
        _162 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &((*_1).3: std::option::Option<bool>);
        _39 = &(*_40);
        StorageLive(_41);
        _41 = &mut (*_2);
        _38 = <Option<bool> as BorshSerialize>::serialize::<W>(move _39, move _41) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb16, unwind: bb85];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        _208 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb72;
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <std::result::Result<(), std::io::Error> as Try>::branch(move _38) -> [return: bb18, unwind: bb73];
    }

    bb18: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_37 as Continue).0: ());
        _36 = _46;
        StorageDead(_46);
        _164 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_1).4: std::option::Option<state::order_params::PostOnlyParam>);
        _50 = &(*_51);
        StorageLive(_52);
        _52 = &mut (*_2);
        _49 = <Option<PostOnlyParam> as BorshSerialize>::serialize::<W>(move _50, move _52) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_43);
        _43 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _45) -> [return: bb21, unwind: bb84];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_43);
        _206 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb72;
    }

    bb22: {
        StorageDead(_52);
        StorageDead(_50);
        _48 = <std::result::Result<(), std::io::Error> as Try>::branch(move _49) -> [return: bb23, unwind: bb73];
    }

    bb23: {
        StorageDead(_49);
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_57);
        _57 = ((_48 as Continue).0: ());
        _47 = _57;
        StorageDead(_57);
        _166 = discriminant(_48);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &((*_1).5: std::option::Option<u8>);
        _61 = &(*_62);
        StorageLive(_63);
        _63 = &mut (*_2);
        _60 = <Option<u8> as BorshSerialize>::serialize::<W>(move _61, move _63) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_54);
        _54 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_56);
        _56 = move _54;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _56) -> [return: bb26, unwind: bb83];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_54);
        _204 = discriminant(_48);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb72;
    }

    bb27: {
        StorageDead(_63);
        StorageDead(_61);
        _59 = <std::result::Result<(), std::io::Error> as Try>::branch(move _60) -> [return: bb28, unwind: bb73];
    }

    bb28: {
        StorageDead(_60);
        _64 = discriminant(_59);
        switchInt(move _64) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_68);
        _68 = ((_59 as Continue).0: ());
        _58 = _68;
        StorageDead(_68);
        _168 = discriminant(_59);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &((*_1).6: std::option::Option<i64>);
        _72 = &(*_73);
        StorageLive(_74);
        _74 = &mut (*_2);
        _71 = <Option<i64> as BorshSerialize>::serialize::<W>(move _72, move _74) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_65);
        _65 = move ((_59 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_67);
        _67 = move _65;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _67) -> [return: bb31, unwind: bb82];
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_65);
        _202 = discriminant(_59);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb72;
    }

    bb32: {
        StorageDead(_74);
        StorageDead(_72);
        _70 = <std::result::Result<(), std::io::Error> as Try>::branch(move _71) -> [return: bb33, unwind: bb73];
    }

    bb33: {
        StorageDead(_71);
        _75 = discriminant(_70);
        switchInt(move _75) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_79);
        _79 = ((_70 as Continue).0: ());
        _69 = _79;
        StorageDead(_79);
        _170 = discriminant(_70);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &((*_1).7: std::option::Option<u64>);
        _83 = &(*_84);
        StorageLive(_85);
        _85 = &mut (*_2);
        _82 = <Option<u64> as BorshSerialize>::serialize::<W>(move _83, move _85) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_76);
        _76 = move ((_70 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _78) -> [return: bb36, unwind: bb81];
    }

    bb36: {
        StorageDead(_78);
        StorageDead(_76);
        _200 = discriminant(_70);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb72;
    }

    bb37: {
        StorageDead(_85);
        StorageDead(_83);
        _81 = <std::result::Result<(), std::io::Error> as Try>::branch(move _82) -> [return: bb38, unwind: bb73];
    }

    bb38: {
        StorageDead(_82);
        _86 = discriminant(_81);
        switchInt(move _86) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_90);
        _90 = ((_81 as Continue).0: ());
        _80 = _90;
        StorageDead(_90);
        _172 = discriminant(_81);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &((*_1).8: std::option::Option<state::user::OrderTriggerCondition>);
        _94 = &(*_95);
        StorageLive(_96);
        _96 = &mut (*_2);
        _93 = <Option<OrderTriggerCondition> as BorshSerialize>::serialize::<W>(move _94, move _96) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_87);
        _87 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_89);
        _89 = move _87;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _89) -> [return: bb41, unwind: bb80];
    }

    bb41: {
        StorageDead(_89);
        StorageDead(_87);
        _198 = discriminant(_81);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb72;
    }

    bb42: {
        StorageDead(_96);
        StorageDead(_94);
        _92 = <std::result::Result<(), std::io::Error> as Try>::branch(move _93) -> [return: bb43, unwind: bb73];
    }

    bb43: {
        StorageDead(_93);
        _97 = discriminant(_92);
        switchInt(move _97) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_101);
        _101 = ((_92 as Continue).0: ());
        _91 = _101;
        StorageDead(_101);
        _174 = discriminant(_92);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &((*_1).9: std::option::Option<i32>);
        _105 = &(*_106);
        StorageLive(_107);
        _107 = &mut (*_2);
        _104 = <Option<i32> as BorshSerialize>::serialize::<W>(move _105, move _107) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_98);
        _98 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_100);
        _100 = move _98;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _100) -> [return: bb46, unwind: bb79];
    }

    bb46: {
        StorageDead(_100);
        StorageDead(_98);
        _196 = discriminant(_92);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb72;
    }

    bb47: {
        StorageDead(_107);
        StorageDead(_105);
        _103 = <std::result::Result<(), std::io::Error> as Try>::branch(move _104) -> [return: bb48, unwind: bb73];
    }

    bb48: {
        StorageDead(_104);
        _108 = discriminant(_103);
        switchInt(move _108) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_112);
        _112 = ((_103 as Continue).0: ());
        _102 = _112;
        StorageDead(_112);
        _176 = discriminant(_103);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &((*_1).10: std::option::Option<u8>);
        _116 = &(*_117);
        StorageLive(_118);
        _118 = &mut (*_2);
        _115 = <Option<u8> as BorshSerialize>::serialize::<W>(move _116, move _118) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_109);
        _109 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_111);
        _111 = move _109;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _111) -> [return: bb51, unwind: bb78];
    }

    bb51: {
        StorageDead(_111);
        StorageDead(_109);
        _194 = discriminant(_103);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb72;
    }

    bb52: {
        StorageDead(_118);
        StorageDead(_116);
        _114 = <std::result::Result<(), std::io::Error> as Try>::branch(move _115) -> [return: bb53, unwind: bb73];
    }

    bb53: {
        StorageDead(_115);
        _119 = discriminant(_114);
        switchInt(move _119) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_123);
        _123 = ((_114 as Continue).0: ());
        _113 = _123;
        StorageDead(_123);
        _178 = discriminant(_114);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &((*_1).11: std::option::Option<i64>);
        _127 = &(*_128);
        StorageLive(_129);
        _129 = &mut (*_2);
        _126 = <Option<i64> as BorshSerialize>::serialize::<W>(move _127, move _129) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_120);
        _120 = move ((_114 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_122);
        _122 = move _120;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _122) -> [return: bb56, unwind: bb77];
    }

    bb56: {
        StorageDead(_122);
        StorageDead(_120);
        _192 = discriminant(_114);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb72;
    }

    bb57: {
        StorageDead(_129);
        StorageDead(_127);
        _125 = <std::result::Result<(), std::io::Error> as Try>::branch(move _126) -> [return: bb58, unwind: bb73];
    }

    bb58: {
        StorageDead(_126);
        _130 = discriminant(_125);
        switchInt(move _130) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_134);
        _134 = ((_125 as Continue).0: ());
        _124 = _134;
        StorageDead(_134);
        _180 = discriminant(_125);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &((*_1).12: std::option::Option<i64>);
        _138 = &(*_139);
        StorageLive(_140);
        _140 = &mut (*_2);
        _137 = <Option<i64> as BorshSerialize>::serialize::<W>(move _138, move _140) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_131);
        _131 = move ((_125 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_133);
        _133 = move _131;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _133) -> [return: bb61, unwind: bb76];
    }

    bb61: {
        StorageDead(_133);
        StorageDead(_131);
        _190 = discriminant(_125);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb72;
    }

    bb62: {
        StorageDead(_140);
        StorageDead(_138);
        _136 = <std::result::Result<(), std::io::Error> as Try>::branch(move _137) -> [return: bb63, unwind: bb73];
    }

    bb63: {
        StorageDead(_137);
        _141 = discriminant(_136);
        switchInt(move _141) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_145);
        _145 = ((_136 as Continue).0: ());
        _135 = _145;
        StorageDead(_145);
        _182 = discriminant(_136);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &((*_1).13: std::option::Option<u8>);
        _149 = &(*_150);
        StorageLive(_151);
        _151 = &mut (*_2);
        _148 = <Option<u8> as BorshSerialize>::serialize::<W>(move _149, move _151) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_142);
        _142 = move ((_136 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_144);
        _144 = move _142;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _144) -> [return: bb66, unwind: bb75];
    }

    bb66: {
        StorageDead(_144);
        StorageDead(_142);
        _188 = discriminant(_136);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb72;
    }

    bb67: {
        StorageDead(_151);
        StorageDead(_149);
        _147 = <std::result::Result<(), std::io::Error> as Try>::branch(move _148) -> [return: bb68, unwind: bb73];
    }

    bb68: {
        StorageDead(_148);
        _152 = discriminant(_147);
        switchInt(move _152) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_156);
        _156 = ((_147 as Continue).0: ());
        _146 = _156;
        StorageDead(_156);
        _184 = discriminant(_147);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_157);
        _157 = ();
        _0 = std::result::Result::<(), std::io::Error>::Ok(move _157);
        StorageDead(_157);
        goto -> bb72;
    }

    bb70: {
        StorageLive(_153);
        _153 = move ((_147 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_155);
        _155 = move _153;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _155) -> [return: bb71, unwind: bb74];
    }

    bb71: {
        StorageDead(_155);
        StorageDead(_153);
        _186 = discriminant(_147);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb72;
    }

    bb72: {
        return;
    }

    bb73 (cleanup): {
        resume;
    }

    bb74 (cleanup): {
        _214 = discriminant(_147);
        goto -> bb73;
    }

    bb75 (cleanup): {
        _215 = discriminant(_136);
        goto -> bb73;
    }

    bb76 (cleanup): {
        _216 = discriminant(_125);
        goto -> bb73;
    }

    bb77 (cleanup): {
        _217 = discriminant(_114);
        goto -> bb73;
    }

    bb78 (cleanup): {
        _218 = discriminant(_103);
        goto -> bb73;
    }

    bb79 (cleanup): {
        _219 = discriminant(_92);
        goto -> bb73;
    }

    bb80 (cleanup): {
        _220 = discriminant(_81);
        goto -> bb73;
    }

    bb81 (cleanup): {
        _221 = discriminant(_70);
        goto -> bb73;
    }

    bb82 (cleanup): {
        _222 = discriminant(_59);
        goto -> bb73;
    }

    bb83 (cleanup): {
        _223 = discriminant(_48);
        goto -> bb73;
    }

    bb84 (cleanup): {
        _224 = discriminant(_37);
        goto -> bb73;
    }

    bb85 (cleanup): {
        _225 = discriminant(_26);
        goto -> bb73;
    }

    bb86 (cleanup): {
        _226 = discriminant(_15);
        goto -> bb73;
    }

    bb87 (cleanup): {
        _227 = discriminant(_4);
        goto -> bb73;
    }
}
