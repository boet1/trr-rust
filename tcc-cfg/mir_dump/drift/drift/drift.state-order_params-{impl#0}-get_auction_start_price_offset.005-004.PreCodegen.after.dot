digraph Mir_0_3637 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn order_params::OrderParams::get_auction_start_price_offset(_1: state::order_params::OrderParams, _2: i64) -&gt; std::result::Result&lt;i64, error::ErrorCode&gt;<br align="left"/>let _3: i64;<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: &amp;ReErased state::user::OrderType;<br align="left"/>let mut _6: &amp;ReErased state::user::OrderType;<br align="left"/>let _7: state::user::OrderType;<br align="left"/>let mut _8: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: i64;<br align="left"/>let mut _11: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _12: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _13: i64;<br align="left"/>let mut _14: i64;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _19: i64;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: i64;<br align="left"/>let mut _22: &amp;ReErased state::user::OrderType;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug oracle_price =&gt; _2;<br align="left"/>debug start_offset =&gt; _3;<br align="left"/>debug auction_start_price =&gt; _10;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>>;
    bb0__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(_1.0: state::user::OrderType)<br/>StorageLive(_6)<br/>_22 = const _<br/>_6 = &amp;(*_22)<br/></td></tr><tr><td align="left">_4 = &lt;state::user::OrderType as PartialEq&gt;::eq(move _5, move _6)</td></tr></table>>];
    bb1__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_8)<br/>_8 = (_1.15: std::option::Option&lt;i64&gt;)<br/></td></tr><tr><td align="left">_3 = Option::&lt;i64&gt;::unwrap_or(move _8, const 0_i64)</td></tr></table>>];
    bb3__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>_9 = discriminant((_1.15: std::option::Option&lt;i64&gt;))<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb5__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = (((_1.15: std::option::Option&lt;i64&gt;) as Some).0: i64)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _10<br/>StorageLive(_14)<br/>_14 = _2<br/></td></tr><tr><td align="left">_12 = &lt;i64 as SafeMath&gt;::safe_sub(move _13, move _14)</td></tr></table>>];
    bb6__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _12)</td></tr></table>>];
    bb7__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_15 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb8__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_11 as Continue).0: i64)<br/>_3 = _19<br/>StorageDead(_19)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb10__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_11 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb11__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_0 = std::result::Result::&lt;i64, error::ErrorCode&gt;::Ok(const 0_i64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_21)<br/>_21 = _3<br/>_0 = std::result::Result::&lt;i64, error::ErrorCode&gt;::Ok(move _21)<br/>StorageDead(_21)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_3637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3637 -> bb1__0_3637 [label="return"];
    bb1__0_3637 -> bb4__0_3637 [label="0"];
    bb1__0_3637 -> bb2__0_3637 [label="otherwise"];
    bb2__0_3637 -> bb3__0_3637 [label="return"];
    bb3__0_3637 -> bb13__0_3637 [label=""];
    bb4__0_3637 -> bb5__0_3637 [label="1"];
    bb4__0_3637 -> bb12__0_3637 [label="otherwise"];
    bb5__0_3637 -> bb6__0_3637 [label="return"];
    bb6__0_3637 -> bb7__0_3637 [label="return"];
    bb7__0_3637 -> bb8__0_3637 [label="0"];
    bb7__0_3637 -> bb10__0_3637 [label="1"];
    bb7__0_3637 -> bb9__0_3637 [label="otherwise"];
    bb8__0_3637 -> bb13__0_3637 [label=""];
    bb10__0_3637 -> bb11__0_3637 [label="return"];
    bb11__0_3637 -> bb14__0_3637 [label=""];
    bb12__0_3637 -> bb14__0_3637 [label=""];
    bb13__0_3637 -> bb15__0_3637 [label=""];
    bb14__0_3637 -> bb15__0_3637 [label=""];
}
