// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5605:10: 5605:18>::try_accounts` before PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5605:10: 5605:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitPythLazerOracleBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::admin::InitPythLazerOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitPythLazerOracleBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::admin::InitPythLazerOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitPythLazerOracleBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::admin::InitPythLazerOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitPythLazerOracleBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::admin::InitPythLazerOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitPythLazerOracleBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _22: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::admin::InitPythLazerOracleBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _35: ();
    let mut _36: bool;
    let mut _37: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _38: !;
    let mut _39: anchor_lang::error::Error;
    let mut _40: anchor_lang::error::ErrorCode;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: &[anchor_lang::prelude::AccountInfo<'_>];
    let _46: &[anchor_lang::prelude::AccountInfo<'_>];
    let _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: std::ops::RangeFrom<usize>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _52: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::admin::InitPythLazerOracleBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _67: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::admin::InitPythLazerOracleBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _82: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::admin::InitPythLazerOracleBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _97: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _105: (anchor_lang::prelude::Pubkey, u8);
    let mut _106: &[&[u8]];
    let mut _107: &[&[u8]; 2];
    let _108: &[&[u8]; 2];
    let _109: [&[u8]; 2];
    let mut _110: &[u8];
    let _111: &[u8];
    let mut _112: &[u8];
    let mut _113: &[u8; 4];
    let _114: &[u8; 4];
    let _115: [u8; 4];
    let mut _116: u32;
    let mut _117: &anchor_lang::prelude::Pubkey;
    let mut _118: u8;
    let _119: ();
    let mut _120: bool;
    let mut _121: &anchor_lang::prelude::Pubkey;
    let _122: anchor_lang::prelude::Pubkey;
    let mut _123: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _124: &anchor_lang::prelude::Pubkey;
    let mut _125: !;
    let mut _126: anchor_lang::error::Error;
    let mut _127: anchor_lang::error::Error;
    let mut _128: anchor_lang::error::Error;
    let mut _129: anchor_lang::error::ErrorCode;
    let mut _130: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _131: anchor_lang::prelude::Pubkey;
    let mut _132: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _133: anchor_lang::prelude::Pubkey;
    let mut _136: &&anchor_lang::prelude::AccountInfo<'_>;
    let _137: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: &&anchor_lang::prelude::Pubkey;
    let mut _144: &&anchor_lang::prelude::Pubkey;
    let _145: &anchor_lang::prelude::Pubkey;
    let _146: anchor_lang::prelude::Pubkey;
    let mut _148: &anchor_lang::prelude::AccountInfo<'_>;
    let _149: ();
    let mut _150: bool;
    let mut _151: u64;
    let mut _154: &anchor_lang::prelude::Rent;
    let mut _155: usize;
    let mut _157: anchor_lang::prelude::AccountInfo<'_>;
    let mut _158: &anchor_lang::prelude::Signer<'_>;
    let mut _159: anchor_lang::prelude::AccountInfo<'_>;
    let mut _160: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _162: anchor_lang::prelude::AccountInfo<'_>;
    let mut _163: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _164: anchor_lang::system_program::CreateAccount<'_>;
    let _165: ();
    let mut _166: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _167: std::result::Result<(), anchor_lang::error::Error>;
    let mut _168: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _169: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _170: &[&[&[u8]]];
    let mut _171: &[&[&[u8]]; 1];
    let _172: &[&[&[u8]]; 1];
    let _173: [&[&[u8]]; 1];
    let mut _174: &[&[u8]];
    let _175: &[&[u8]];
    let _176: &[&[u8]];
    let mut _177: &[&[u8]; 3];
    let _178: [&[u8]; 3];
    let mut _179: &[u8];
    let mut _180: &[u8; 4];
    let _181: &[u8; 4];
    let _182: [u8; 4];
    let mut _183: u32;
    let mut _184: &[u8];
    let _185: &[u8];
    let _186: &[u8];
    let mut _187: &[u8; 1];
    let _188: [u8; 1];
    let mut _189: u8;
    let mut _190: std::ops::RangeFull;
    let mut _191: std::ops::RangeFull;
    let mut _192: u64;
    let mut _193: u64;
    let mut _194: usize;
    let mut _195: &anchor_lang::prelude::Pubkey;
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _201: ();
    let mut _202: bool;
    let mut _203: &anchor_lang::prelude::Pubkey;
    let _204: anchor_lang::prelude::Pubkey;
    let mut _205: &anchor_lang::prelude::Signer<'_>;
    let mut _206: &anchor_lang::prelude::Pubkey;
    let _207: anchor_lang::prelude::Pubkey;
    let mut _208: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _209: !;
    let mut _210: anchor_lang::error::Error;
    let mut _211: anchor_lang::error::Error;
    let mut _212: anchor_lang::error::AnchorError;
    let mut _213: std::string::String;
    let mut _214: &anchor_lang::error::ErrorCode;
    let _215: anchor_lang::error::ErrorCode;
    let mut _216: u32;
    let mut _217: anchor_lang::error::ErrorCode;
    let mut _218: std::string::String;
    let mut _219: &anchor_lang::error::ErrorCode;
    let _220: anchor_lang::error::ErrorCode;
    let mut _221: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _222: anchor_lang::error::ErrorOrigin;
    let mut _223: anchor_lang::error::Source;
    let mut _224: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _225: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _226: anchor_lang::prelude::Pubkey;
    let mut _227: &anchor_lang::prelude::Signer<'_>;
    let mut _228: anchor_lang::prelude::Pubkey;
    let mut _229: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _231: u64;
    let mut _232: u64;
    let mut _233: &anchor_lang::prelude::Rent;
    let mut _234: usize;
    let mut _235: u64;
    let _236: ();
    let mut _237: bool;
    let mut _238: u64;
    let mut _240: anchor_lang::prelude::AccountInfo<'_>;
    let mut _241: &anchor_lang::prelude::Signer<'_>;
    let mut _242: anchor_lang::prelude::AccountInfo<'_>;
    let mut _243: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _245: anchor_lang::prelude::AccountInfo<'_>;
    let mut _246: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _247: anchor_lang::system_program::Transfer<'_>;
    let _248: ();
    let mut _249: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _250: std::result::Result<(), anchor_lang::error::Error>;
    let mut _251: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _252: u64;
    let mut _253: isize;
    let mut _255: !;
    let mut _256: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _259: anchor_lang::prelude::AccountInfo<'_>;
    let mut _260: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _262: anchor_lang::prelude::AccountInfo<'_>;
    let mut _263: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _264: anchor_lang::system_program::Allocate<'_>;
    let _265: ();
    let mut _266: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _267: std::result::Result<(), anchor_lang::error::Error>;
    let mut _268: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _269: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _270: &[&[&[u8]]];
    let mut _271: &[&[&[u8]]; 1];
    let _272: &[&[&[u8]]; 1];
    let _273: [&[&[u8]]; 1];
    let mut _274: &[&[u8]];
    let _275: &[&[u8]];
    let _276: &[&[u8]];
    let mut _277: &[&[u8]; 3];
    let _278: [&[u8]; 3];
    let mut _279: &[u8];
    let mut _280: &[u8; 4];
    let _281: &[u8; 4];
    let _282: [u8; 4];
    let mut _283: u32;
    let mut _284: &[u8];
    let _285: &[u8];
    let _286: &[u8];
    let mut _287: &[u8; 1];
    let _288: [u8; 1];
    let mut _289: u8;
    let mut _290: std::ops::RangeFull;
    let mut _291: std::ops::RangeFull;
    let mut _292: u64;
    let mut _293: usize;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _300: anchor_lang::prelude::AccountInfo<'_>;
    let mut _301: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _303: anchor_lang::prelude::AccountInfo<'_>;
    let mut _304: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _305: anchor_lang::system_program::Assign<'_>;
    let _306: ();
    let mut _307: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _308: std::result::Result<(), anchor_lang::error::Error>;
    let mut _309: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _310: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _311: &[&[&[u8]]];
    let mut _312: &[&[&[u8]]; 1];
    let _313: &[&[&[u8]]; 1];
    let _314: [&[&[u8]]; 1];
    let mut _315: &[&[u8]];
    let _316: &[&[u8]];
    let _317: &[&[u8]];
    let mut _318: &[&[u8]; 3];
    let _319: [&[u8]; 3];
    let mut _320: &[u8];
    let mut _321: &[u8; 4];
    let _322: &[u8; 4];
    let _323: [u8; 4];
    let mut _324: u32;
    let mut _325: &[u8];
    let _326: &[u8];
    let _327: &[u8];
    let mut _328: &[u8; 1];
    let _329: [u8; 1];
    let mut _330: u8;
    let mut _331: std::ops::RangeFull;
    let mut _332: std::ops::RangeFull;
    let mut _333: &anchor_lang::prelude::Pubkey;
    let mut _334: isize;
    let mut _336: !;
    let mut _337: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _339: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>, anchor_lang::error::Error>;
    let mut _340: &anchor_lang::prelude::Pubkey;
    let mut _341: &anchor_lang::prelude::AccountInfo<'_>;
    let _342: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _343: isize;
    let mut _346: !;
    let mut _347: anchor_lang::error::Error;
    let mut _348: anchor_lang::error::Error;
    let mut _349: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>, anchor_lang::error::Error>;
    let mut _350: &anchor_lang::prelude::AccountInfo<'_>;
    let _351: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _352: isize;
    let mut _355: !;
    let mut _356: anchor_lang::error::Error;
    let mut _357: anchor_lang::error::Error;
    let _358: ();
    let mut _359: bool;
    let _360: ();
    let mut _361: bool;
    let mut _362: usize;
    let mut _363: usize;
    let mut _364: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _365: !;
    let mut _366: anchor_lang::error::Error;
    let mut _367: anchor_lang::error::Error;
    let mut _368: anchor_lang::error::Error;
    let mut _369: anchor_lang::error::ErrorCode;
    let mut _370: (usize, usize);
    let mut _371: usize;
    let mut _372: usize;
    let mut _373: &anchor_lang::prelude::AccountInfo<'_>;
    let _374: ();
    let mut _375: bool;
    let mut _376: &&anchor_lang::prelude::Pubkey;
    let mut _377: &&anchor_lang::prelude::Pubkey;
    let mut _378: !;
    let mut _379: anchor_lang::error::Error;
    let mut _380: anchor_lang::error::Error;
    let mut _381: anchor_lang::error::Error;
    let mut _382: anchor_lang::error::ErrorCode;
    let mut _383: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _384: anchor_lang::prelude::Pubkey;
    let mut _385: anchor_lang::prelude::Pubkey;
    let mut _387: &anchor_lang::prelude::Rent;
    let mut _388: usize;
    let mut _389: bool;
    let mut _390: u64;
    let mut _391: &anchor_lang::prelude::AccountInfo<'_>;
    let _392: anchor_lang::prelude::AccountInfo<'_>;
    let mut _393: &anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _394: u64;
    let mut _395: !;
    let mut _396: anchor_lang::error::Error;
    let mut _397: anchor_lang::error::Error;
    let mut _398: anchor_lang::error::ErrorCode;
    let _399: ();
    let mut _400: bool;
    let mut _401: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _402: &anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let _403: &anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _404: !;
    let mut _405: anchor_lang::error::Error;
    let mut _406: anchor_lang::error::Error;
    let mut _407: anchor_lang::error::ErrorCode;
    let _408: ();
    let mut _409: bool;
    let mut _410: &anchor_lang::prelude::Rent;
    let mut _411: u64;
    let mut _412: &anchor_lang::prelude::AccountInfo<'_>;
    let _413: anchor_lang::prelude::AccountInfo<'_>;
    let mut _414: &anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _415: usize;
    let mut _416: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _417: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _418: &anchor_lang::prelude::AccountInfo<'_>;
    let _419: anchor_lang::prelude::AccountInfo<'_>;
    let mut _420: &anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _421: isize;
    let mut _423: !;
    let mut _424: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _426: !;
    let mut _427: anchor_lang::error::Error;
    let mut _428: anchor_lang::error::Error;
    let mut _429: anchor_lang::error::ErrorCode;
    let _430: ();
    let mut _431: bool;
    let mut _432: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _433: &anchor_lang::prelude::Signer<'_>;
    let _434: &anchor_lang::prelude::Signer<'_>;
    let mut _435: !;
    let mut _436: anchor_lang::error::Error;
    let mut _437: anchor_lang::error::Error;
    let mut _438: anchor_lang::error::ErrorCode;
    let _439: ();
    let mut _440: bool;
    let mut _441: &anchor_lang::prelude::Pubkey;
    let _442: anchor_lang::prelude::Pubkey;
    let mut _443: &anchor_lang::prelude::Signer<'_>;
    let mut _444: &anchor_lang::prelude::Pubkey;
    let _445: anchor_lang::prelude::Pubkey;
    let mut _446: bool;
    let mut _447: &anchor_lang::prelude::Pubkey;
    let _448: anchor_lang::prelude::Pubkey;
    let mut _449: &anchor_lang::prelude::Signer<'_>;
    let mut _450: &anchor_lang::prelude::Pubkey;
    let _451: &state::state::State;
    let mut _452: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _453: !;
    let mut _454: anchor_lang::error::Error;
    let mut _455: anchor_lang::error::Error;
    let mut _456: anchor_lang::error::ErrorCode;
    let mut _457: instructions::admin::InitPythLazerOracle<'_>;
    let mut _458: anchor_lang::prelude::Signer<'_>;
    let mut _459: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _460: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _461: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _462: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _466: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _467: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _468: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _469: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _470: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _471: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _472: bool;
    let mut _473: bool;
    let mut _474: bool;
    let mut _475: bool;
    let mut _476: bool;
    let mut _477: bool;
    let mut _478: bool;
    let mut _479: bool;
    let mut _480: bool;
    let mut _481: bool;
    let mut _482: bool;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u32;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::admin::InitPythLazerOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitPythLazerOracleBumps>>::try_accounts::__Args;
        scope 2 {
            debug feed_id => _7;
            let _20: anchor_lang::prelude::Signer<'_>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug admin => _20;
                let _41: &anchor_lang::prelude::AccountInfo<'_>;
                scope 12 {
                    debug lazer_oracle => _41;
                    let _50: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    scope 13 {
                        debug state => _50;
                        let _65: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                        scope 18 {
                            debug rent => _65;
                            let _80: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            scope 23 {
                                debug system_program => _80;
                                let _95: anchor_lang::prelude::Rent;
                                let _99: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _102: anchor_lang::prelude::Rent;
                                scope 28 {
                                    debug __anchor_rent => _95;
                                    let _103: anchor_lang::prelude::Pubkey;
                                    let _104: u8;
                                    scope 33 {
                                        debug __pda_address => _103;
                                        debug __bump => _104;
                                        let _134: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
                                        let _135: &anchor_lang::prelude::AccountInfo<'_>;
                                        scope 34 {
                                            debug lazer_oracle => _134;
                                            let _422: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _425: usize;
                                            scope 72 {
                                                debug residual => _422;
                                                scope 73 {
                                                }
                                            }
                                            scope 74 {
                                                debug val => _425;
                                                scope 75 {
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug actual_field => _135;
                                            let _138: &anchor_lang::prelude::Pubkey;
                                            scope 36 {
                                                debug actual_owner => _138;
                                                let _139: usize;
                                                scope 37 {
                                                    debug space => _139;
                                                    let _140: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
                                                    let _147: u64;
                                                    let _353: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
                                                    let _354: anchor_lang::error::Error;
                                                    let mut _465: &&anchor_lang::prelude::Pubkey;
                                                    scope 38 {
                                                        debug pa => _140;
                                                        let _386: u64;
                                                        scope 71 {
                                                            debug required_lamports => _386;
                                                        }
                                                    }
                                                    scope 39 {
                                                        debug __current_lamports => _147;
                                                        let _152: usize;
                                                        let _230: u64;
                                                        let _344: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
                                                        let _345: anchor_lang::error::Error;
                                                        let mut _463: &anchor_lang::error::ErrorCode;
                                                        let mut _464: &anchor_lang::error::ErrorCode;
                                                        scope 40 {
                                                            debug space => _152;
                                                            let _153: u64;
                                                            scope 41 {
                                                                debug lamports => _153;
                                                                let _156: anchor_lang::system_program::CreateAccount<'_>;
                                                                scope 42 {
                                                                    debug cpi_accounts => _156;
                                                                    let _161: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                    scope 43 {
                                                                        debug cpi_context => _161;
                                                                        let _197: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _200: ();
                                                                        scope 44 {
                                                                            debug residual => _197;
                                                                            scope 45 {
                                                                            }
                                                                        }
                                                                        scope 46 {
                                                                            debug val => _200;
                                                                            scope 47 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 48 {
                                                            debug required_lamports => _230;
                                                            let _239: anchor_lang::system_program::Transfer<'_>;
                                                            let _258: anchor_lang::system_program::Allocate<'_>;
                                                            scope 49 {
                                                                debug cpi_accounts => _239;
                                                                let _244: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                scope 50 {
                                                                    debug cpi_context => _244;
                                                                    let _254: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _257: ();
                                                                    scope 51 {
                                                                        debug residual => _254;
                                                                        scope 52 {
                                                                        }
                                                                    }
                                                                    scope 53 {
                                                                        debug val => _257;
                                                                        scope 54 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug cpi_accounts => _258;
                                                                let _261: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                scope 56 {
                                                                    debug cpi_context => _261;
                                                                    let _295: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _298: ();
                                                                    let _299: anchor_lang::system_program::Assign<'_>;
                                                                    scope 57 {
                                                                        debug residual => _295;
                                                                        scope 58 {
                                                                        }
                                                                    }
                                                                    scope 59 {
                                                                        debug val => _298;
                                                                        scope 60 {
                                                                        }
                                                                    }
                                                                    scope 61 {
                                                                        debug cpi_accounts => _299;
                                                                        let _302: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                        scope 62 {
                                                                            debug cpi_context => _302;
                                                                            let _335: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _338: ();
                                                                            scope 63 {
                                                                                debug residual => _335;
                                                                                scope 64 {
                                                                                }
                                                                            }
                                                                            scope 65 {
                                                                                debug val => _338;
                                                                                scope 66 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 67 {
                                                            debug val => _344;
                                                        }
                                                        scope 68 {
                                                            debug e => _345;
                                                        }
                                                    }
                                                    scope 69 {
                                                        debug val => _353;
                                                    }
                                                    scope 70 {
                                                        debug e => _354;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _99;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _102;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _91;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _94;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _76;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _79;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _61;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _64;
                        scope 17 {
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _482 = const false;
        _481 = const false;
        _480 = const false;
        _479 = const false;
        _478 = const false;
        _477 = const false;
        _476 = const false;
        _475 = const false;
        _474 = const false;
        _473 = const false;
        _472 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<admin::InitPythLazerOracle<'info> as anchor_lang::Accounts<'info, InitPythLazerOracleBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
        _10 = std::result::Result::<<admin::InitPythLazerOracle<'info> as anchor_lang::Accounts<'info, InitPythLazerOracleBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18}>(move _11, move _14) -> [return: bb2, unwind: bb225];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<admin::InitPythLazerOracle<'info> as anchor_lang::Accounts<'info, InitPythLazerOracleBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::admin::InitPythLazerOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitPythLazerOracleBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u32);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitPythLazerOracleBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb216;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
        _22 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18}>(move _23, move _29) -> [return: bb9, unwind: bb225];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb225];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _20 = move _34;
        StorageDead(_34);
        _483 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _466 = deref_copy (*_2);
        _37 = &(*_466);
        _36 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _37) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb257];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _531 = discriminant(_21);
        StorageDead(_21);
        goto -> bb215;
    }

    bb14: {
        switchInt(move _36) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = AccountNotEnoughKeys;
        _39 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _39);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb215;
    }

    bb17: {
        StorageDead(_37);
        _35 = const ();
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 0_usize;
        _467 = deref_copy (*_2);
        _43 = Len((*_467));
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> [success: bb18, unwind continue];
    }

    bb18: {
        _468 = deref_copy (*_2);
        _41 = &(*_468)[_42];
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _469 = deref_copy (*_2);
        _48 = &(*_469);
        StorageLive(_49);
        _49 = RangeFrom::<usize> { start: const 1_usize };
        _47 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _48, move _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = &(*_47);
        _45 = &(*_46);
        (*_2) = move _45;
        StorageDead(_45);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitPythLazerOracleBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
        _52 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18}>(move _53, move _59) -> [return: bb21, unwind: bb225];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb225];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _50 = move _64;
        StorageDead(_64);
        _485 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitPythLazerOracleBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb224];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb256];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _529 = discriminant(_51);
        StorageDead(_51);
        goto -> bb214;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
        _67 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18}>(move _68, move _74) -> [return: bb27, unwind: bb224];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb224];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _65 = move _79;
        StorageDead(_79);
        _487 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitPythLazerOracleBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb224];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb255];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _527 = discriminant(_66);
        StorageDead(_66);
        goto -> bb213;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18};
        _82 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5605:10: 5605:18}>(move _83, move _89) -> [return: bb33, unwind: bb224];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb224];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _80 = move _94;
        StorageDead(_94);
        _489 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb38, unwind: bb224];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb254];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _525 = discriminant(_81);
        StorageDead(_81);
        goto -> bb212;
    }

    bb38: {
        _96 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _97) -> [return: bb39, unwind: bb224];
    }

    bb39: {
        StorageDead(_97);
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb40, 1: bb41, otherwise: bb5];
    }

    bb40: {
        StorageLive(_102);
        _102 = ((_96 as Continue).0: anchor_lang::prelude::Rent);
        _95 = _102;
        StorageDead(_102);
        _491 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = const _;
        _110 = &(*_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = _7;
        _115 = core::num::<impl u32>::to_le_bytes(move _116) -> [return: bb43, unwind: bb224];
    }

    bb41: {
        StorageLive(_99);
        _99 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_101);
        _101 = move _99;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _101) -> [return: bb42, unwind: bb253];
    }

    bb42: {
        StorageDead(_101);
        StorageDead(_99);
        _523 = discriminant(_96);
        StorageDead(_96);
        goto -> bb211;
    }

    bb43: {
        StorageDead(_116);
        _114 = &_115;
        _113 = &(*_114);
        _112 = move _113 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_113);
        _109 = [move _110, move _112];
        StorageDead(_112);
        StorageDead(_110);
        _108 = &_109;
        _107 = &(*_108);
        _106 = move _107 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_107);
        StorageLive(_117);
        _117 = &(*_1);
        _105 = anchor_lang::prelude::Pubkey::find_program_address(move _106, move _117) -> [return: bb44, unwind: bb224];
    }

    bb44: {
        StorageDead(_117);
        StorageDead(_106);
        StorageLive(_103);
        _103 = (_105.0: anchor_lang::prelude::Pubkey);
        StorageLive(_104);
        _104 = (_105.1: u8);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageLive(_118);
        _118 = _104;
        ((*_4).0: u8) = move _118;
        StorageDead(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &(*_41);
        _122 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _123) -> [return: bb45, unwind: bb224];
    }

    bb45: {
        _121 = &_122;
        StorageDead(_123);
        StorageLive(_124);
        _124 = &_103;
        _120 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _121, move _124) -> [return: bb46, unwind: bb224];
    }

    bb46: {
        switchInt(move _120) -> [0: bb52, otherwise: bb47];
    }

    bb47: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = ConstraintSeeds;
        _128 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _129) -> [return: bb48, unwind: bb224];
    }

    bb48: {
        StorageDead(_129);
        _127 = anchor_lang::error::Error::with_account_name::<&str>(move _128, const "lazer_oracle") -> [return: bb49, unwind: bb224];
    }

    bb49: {
        _482 = const true;
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &(*_41);
        _131 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _132) -> [return: bb50, unwind: bb252];
    }

    bb50: {
        StorageDead(_132);
        StorageLive(_133);
        _133 = _103;
        _130 = (move _131, move _133);
        StorageDead(_133);
        StorageDead(_131);
        _482 = const false;
        _126 = anchor_lang::error::Error::with_pubkeys(move _127, move _130) -> [return: bb51, unwind: bb252];
    }

    bb51: {
        StorageDead(_130);
        _482 = const false;
        StorageDead(_127);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _126);
        StorageDead(_126);
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb210;
    }

    bb52: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_121);
        _119 = const ();
        StorageDead(_120);
        StorageDead(_119);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &_41;
        _136 = &(*_137);
        _135 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _136) -> [return: bb53, unwind: bb224];
    }

    bb53: {
        StorageDead(_136);
        StorageDead(_137);
        StorageLive(_138);
        _138 = ((*_135).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_139);
        _139 = const _;
        StorageLive(_140);
        StorageLive(_141);
        _141 = const false;
        switchInt(move _141) -> [0: bb56, otherwise: bb54];
    }

    bb54: {
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_138;
        StorageLive(_144);
        _465 = const _;
        _144 = &(*_465);
        _142 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _143, move _144) -> [return: bb55, unwind: bb224];
    }

    bb55: {
        switchInt(move _142) -> [0: bb130, otherwise: bb56];
    }

    bb56: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &(*_41);
        _147 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _148) -> [return: bb57, unwind: bb224];
    }

    bb57: {
        StorageDead(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = _147;
        _150 = Eq(move _151, const 0_u64);
        switchInt(move _150) -> [0: bb73, otherwise: bb58];
    }

    bb58: {
        StorageDead(_151);
        StorageLive(_152);
        _152 = _139;
        StorageLive(_153);
        StorageLive(_154);
        _154 = &_95;
        StorageLive(_155);
        _155 = _152;
        _153 = anchor_lang::prelude::Rent::minimum_balance(move _154, move _155) -> [return: bb59, unwind: bb224];
    }

    bb59: {
        StorageDead(_155);
        StorageDead(_154);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_20;
        _157 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _158) -> [return: bb60, unwind: bb224];
    }

    bb60: {
        StorageDead(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_41);
        _159 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _160) -> [return: bb61, unwind: bb223];
    }

    bb61: {
        StorageDead(_160);
        _481 = const true;
        _156 = anchor_lang::system_program::CreateAccount::<'_> { from: move _157, to: move _159 };
        StorageDead(_159);
        StorageDead(_157);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &_80;
        _162 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _163) -> [return: bb62, unwind: bb250];
    }

    bb62: {
        StorageDead(_163);
        StorageLive(_164);
        _481 = const false;
        _164 = move _156;
        _161 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _162, move _164) -> [return: bb63, unwind: bb250];
    }

    bb63: {
        StorageDead(_164);
        StorageDead(_162);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _480 = const true;
        _169 = move _161;
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = _7;
        _182 = core::num::<impl u32>::to_le_bytes(move _183) -> [return: bb64, unwind: bb248];
    }

    bb64: {
        StorageDead(_183);
        _181 = &_182;
        _180 = &(*_181);
        _179 = move _180 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_180);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = _104;
        _188 = [move _189];
        _187 = &_188;
        StorageDead(_189);
        StorageLive(_190);
        _190 = RangeFull;
        _186 = <[u8; 1] as Index<RangeFull>>::index(move _187, move _190) -> [return: bb65, unwind: bb248];
    }

    bb65: {
        StorageDead(_190);
        StorageDead(_187);
        _185 = &(*_186);
        _184 = &(*_185);
        _178 = [const _, move _179, move _184];
        _177 = &_178;
        StorageDead(_184);
        StorageDead(_179);
        StorageLive(_191);
        _191 = RangeFull;
        _176 = <[&[u8]; 3] as Index<RangeFull>>::index(move _177, move _191) -> [return: bb66, unwind: bb248];
    }

    bb66: {
        StorageDead(_191);
        StorageDead(_177);
        _175 = &(*_176);
        _174 = &(*_175);
        _173 = [move _174];
        StorageDead(_174);
        _172 = &_173;
        _171 = &(*_172);
        _170 = move _171 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_171);
        _480 = const false;
        _168 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _169, move _170) -> [return: bb67, unwind: bb248];
    }

    bb67: {
        StorageDead(_170);
        _480 = const false;
        StorageDead(_169);
        StorageLive(_192);
        _192 = _153;
        StorageLive(_193);
        StorageLive(_194);
        _194 = _152;
        _193 = move _194 as u64 (IntToInt);
        StorageDead(_194);
        StorageLive(_195);
        _195 = &(*_1);
        _167 = anchor_lang::system_program::create_account(move _168, move _192, move _193, move _195) -> [return: bb68, unwind: bb250];
    }

    bb68: {
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_168);
        _166 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _167) -> [return: bb69, unwind: bb250];
    }

    bb69: {
        StorageDead(_167);
        _196 = discriminant(_166);
        switchInt(move _196) -> [0: bb70, 1: bb71, otherwise: bb5];
    }

    bb70: {
        StorageLive(_200);
        _200 = ((_166 as Continue).0: ());
        _165 = _200;
        StorageDead(_200);
        _493 = discriminant(_166);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_166);
        StorageDead(_165);
        _149 = const ();
        StorageDead(_161);
        _481 = const false;
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb125;
    }

    bb71: {
        StorageLive(_197);
        _197 = move ((_166 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _199) -> [return: bb72, unwind: bb246];
    }

    bb72: {
        StorageDead(_199);
        StorageDead(_197);
        _521 = discriminant(_166);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_161);
        _481 = const false;
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb206;
    }

    bb73: {
        StorageDead(_151);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_20;
        _204 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _205) -> [return: bb74, unwind: bb224];
    }

    bb74: {
        _203 = &_204;
        StorageDead(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &(*_41);
        _207 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _208) -> [return: bb75, unwind: bb224];
    }

    bb75: {
        _206 = &_207;
        StorageDead(_208);
        _202 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _203, move _206) -> [return: bb76, unwind: bb224];
    }

    bb76: {
        switchInt(move _202) -> [0: bb85, otherwise: bb77];
    }

    bb77: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _464 = const _;
        _214 = &(*_464);
        _213 = anchor_lang::error::ErrorCode::name(move _214) -> [return: bb78, unwind: bb224];
    }

    bb78: {
        StorageDead(_214);
        StorageLive(_216);
        StorageLive(_217);
        _217 = TryingToInitPayerAsProgramAccount;
        _216 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _217) -> [return: bb79, unwind: bb222];
    }

    bb79: {
        StorageDead(_217);
        StorageLive(_218);
        StorageLive(_219);
        _463 = const _;
        _219 = &(*_463);
        _218 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _219) -> [return: bb80, unwind: bb222];
    }

    bb80: {
        StorageDead(_219);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 5605_u32 };
        _222 = anchor_lang::error::ErrorOrigin::Source(move _223);
        StorageDead(_223);
        _221 = Option::<ErrorOrigin>::Some(move _222);
        StorageDead(_222);
        StorageLive(_224);
        _224 = Option::<ComparedValues>::None;
        _212 = anchor_lang::error::AnchorError { error_name: move _213, error_code_number: move _216, error_msg: move _218, error_origin: move _221, compared_values: move _224 };
        StorageDead(_224);
        StorageDead(_221);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_213);
        _211 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _212) -> [return: bb81, unwind: bb224];
    }

    bb81: {
        _479 = const true;
        StorageDead(_212);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &_20;
        _226 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _227) -> [return: bb82, unwind: bb245];
    }

    bb82: {
        StorageDead(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &(*_41);
        _228 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _229) -> [return: bb83, unwind: bb245];
    }

    bb83: {
        StorageDead(_229);
        _225 = (move _226, move _228);
        StorageDead(_228);
        StorageDead(_226);
        _479 = const false;
        _210 = anchor_lang::error::Error::with_pubkeys(move _211, move _225) -> [return: bb84, unwind: bb245];
    }

    bb84: {
        StorageDead(_225);
        _479 = const false;
        StorageDead(_211);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _210);
        StorageDead(_210);
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb206;
    }

    bb85: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_203);
        _201 = const ();
        StorageDead(_202);
        StorageDead(_201);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_95;
        StorageLive(_234);
        _234 = _139;
        _232 = anchor_lang::prelude::Rent::minimum_balance(move _233, move _234) -> [return: bb86, unwind: bb224];
    }

    bb86: {
        StorageDead(_234);
        StorageDead(_233);
        _231 = <u64 as Ord>::max(move _232, const 1_u64) -> [return: bb87, unwind: bb224];
    }

    bb87: {
        StorageDead(_232);
        StorageLive(_235);
        _235 = _147;
        _230 = core::num::<impl u64>::saturating_sub(move _231, move _235) -> [return: bb88, unwind: bb224];
    }

    bb88: {
        StorageDead(_235);
        StorageDead(_231);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = _230;
        _237 = Gt(move _238, const 0_u64);
        switchInt(move _237) -> [0: bb99, otherwise: bb89];
    }

    bb89: {
        StorageDead(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &_20;
        _240 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _241) -> [return: bb90, unwind: bb224];
    }

    bb90: {
        StorageDead(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &(*_41);
        _242 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _243) -> [return: bb91, unwind: bb221];
    }

    bb91: {
        StorageDead(_243);
        _478 = const true;
        _239 = anchor_lang::system_program::Transfer::<'_> { from: move _240, to: move _242 };
        StorageDead(_242);
        StorageDead(_240);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &_80;
        _245 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _246) -> [return: bb92, unwind: bb243];
    }

    bb92: {
        StorageDead(_246);
        StorageLive(_247);
        _478 = const false;
        _247 = move _239;
        _244 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _245, move _247) -> [return: bb93, unwind: bb243];
    }

    bb93: {
        StorageDead(_247);
        StorageDead(_245);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = move _244;
        StorageLive(_252);
        _252 = _230;
        _250 = anchor_lang::system_program::transfer(move _251, move _252) -> [return: bb94, unwind: bb243];
    }

    bb94: {
        StorageDead(_252);
        StorageDead(_251);
        _249 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _250) -> [return: bb95, unwind: bb243];
    }

    bb95: {
        StorageDead(_250);
        _253 = discriminant(_249);
        switchInt(move _253) -> [0: bb96, 1: bb97, otherwise: bb5];
    }

    bb96: {
        StorageLive(_257);
        _257 = ((_249 as Continue).0: ());
        _248 = _257;
        StorageDead(_257);
        _495 = discriminant(_249);
        StorageDead(_249);
        StorageDead(_248);
        _236 = const ();
        StorageDead(_244);
        _478 = const false;
        StorageDead(_239);
        goto -> bb100;
    }

    bb97: {
        StorageLive(_254);
        _254 = move ((_249 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_256);
        _256 = move _254;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _256) -> [return: bb98, unwind: bb241];
    }

    bb98: {
        StorageDead(_256);
        StorageDead(_254);
        _519 = discriminant(_249);
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_244);
        _478 = const false;
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb205;
    }

    bb99: {
        StorageDead(_238);
        _236 = const ();
        goto -> bb100;
    }

    bb100: {
        StorageDead(_237);
        StorageDead(_236);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &(*_41);
        _259 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _260) -> [return: bb101, unwind: bb224];
    }

    bb101: {
        StorageDead(_260);
        _477 = const true;
        _258 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _259 };
        StorageDead(_259);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &_80;
        _262 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _263) -> [return: bb102, unwind: bb240];
    }

    bb102: {
        StorageDead(_263);
        StorageLive(_264);
        _477 = const false;
        _264 = move _258;
        _261 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _262, move _264) -> [return: bb103, unwind: bb240];
    }

    bb103: {
        StorageDead(_264);
        StorageDead(_262);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _476 = const true;
        _269 = move _261;
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = _7;
        _282 = core::num::<impl u32>::to_le_bytes(move _283) -> [return: bb104, unwind: bb238];
    }

    bb104: {
        StorageDead(_283);
        _281 = &_282;
        _280 = &(*_281);
        _279 = move _280 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_280);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = _104;
        _288 = [move _289];
        _287 = &_288;
        StorageDead(_289);
        StorageLive(_290);
        _290 = RangeFull;
        _286 = <[u8; 1] as Index<RangeFull>>::index(move _287, move _290) -> [return: bb105, unwind: bb238];
    }

    bb105: {
        StorageDead(_290);
        StorageDead(_287);
        _285 = &(*_286);
        _284 = &(*_285);
        _278 = [const _, move _279, move _284];
        _277 = &_278;
        StorageDead(_284);
        StorageDead(_279);
        StorageLive(_291);
        _291 = RangeFull;
        _276 = <[&[u8]; 3] as Index<RangeFull>>::index(move _277, move _291) -> [return: bb106, unwind: bb238];
    }

    bb106: {
        StorageDead(_291);
        StorageDead(_277);
        _275 = &(*_276);
        _274 = &(*_275);
        _273 = [move _274];
        StorageDead(_274);
        _272 = &_273;
        _271 = &(*_272);
        _270 = move _271 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_271);
        _476 = const false;
        _268 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _269, move _270) -> [return: bb107, unwind: bb238];
    }

    bb107: {
        StorageDead(_270);
        _476 = const false;
        StorageDead(_269);
        StorageLive(_292);
        StorageLive(_293);
        _293 = _139;
        _292 = move _293 as u64 (IntToInt);
        StorageDead(_293);
        _267 = anchor_lang::system_program::allocate(move _268, move _292) -> [return: bb108, unwind: bb240];
    }

    bb108: {
        StorageDead(_292);
        StorageDead(_268);
        _266 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _267) -> [return: bb109, unwind: bb240];
    }

    bb109: {
        StorageDead(_267);
        _294 = discriminant(_266);
        switchInt(move _294) -> [0: bb110, 1: bb111, otherwise: bb5];
    }

    bb110: {
        StorageLive(_298);
        _298 = ((_266 as Continue).0: ());
        _265 = _298;
        StorageDead(_298);
        _497 = discriminant(_266);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_266);
        StorageDead(_265);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &(*_41);
        _300 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _301) -> [return: bb113, unwind: bb240];
    }

    bb111: {
        StorageLive(_295);
        _295 = move ((_266 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_297);
        _297 = move _295;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _297) -> [return: bb112, unwind: bb236];
    }

    bb112: {
        StorageDead(_297);
        StorageDead(_295);
        _517 = discriminant(_266);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_266);
        StorageDead(_265);
        goto -> bb204;
    }

    bb113: {
        StorageDead(_301);
        _475 = const true;
        _299 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _300 };
        StorageDead(_300);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &_80;
        _303 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _304) -> [return: bb114, unwind: bb235];
    }

    bb114: {
        StorageDead(_304);
        StorageLive(_305);
        _475 = const false;
        _305 = move _299;
        _302 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _303, move _305) -> [return: bb115, unwind: bb235];
    }

    bb115: {
        StorageDead(_305);
        StorageDead(_303);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _474 = const true;
        _310 = move _302;
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = _7;
        _323 = core::num::<impl u32>::to_le_bytes(move _324) -> [return: bb116, unwind: bb233];
    }

    bb116: {
        StorageDead(_324);
        _322 = &_323;
        _321 = &(*_322);
        _320 = move _321 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_321);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        _330 = _104;
        _329 = [move _330];
        _328 = &_329;
        StorageDead(_330);
        StorageLive(_331);
        _331 = RangeFull;
        _327 = <[u8; 1] as Index<RangeFull>>::index(move _328, move _331) -> [return: bb117, unwind: bb233];
    }

    bb117: {
        StorageDead(_331);
        StorageDead(_328);
        _326 = &(*_327);
        _325 = &(*_326);
        _319 = [const _, move _320, move _325];
        _318 = &_319;
        StorageDead(_325);
        StorageDead(_320);
        StorageLive(_332);
        _332 = RangeFull;
        _317 = <[&[u8]; 3] as Index<RangeFull>>::index(move _318, move _332) -> [return: bb118, unwind: bb233];
    }

    bb118: {
        StorageDead(_332);
        StorageDead(_318);
        _316 = &(*_317);
        _315 = &(*_316);
        _314 = [move _315];
        StorageDead(_315);
        _313 = &_314;
        _312 = &(*_313);
        _311 = move _312 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_312);
        _474 = const false;
        _309 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _310, move _311) -> [return: bb119, unwind: bb233];
    }

    bb119: {
        StorageDead(_311);
        _474 = const false;
        StorageDead(_310);
        StorageLive(_333);
        _333 = &(*_1);
        _308 = anchor_lang::system_program::assign(move _309, move _333) -> [return: bb120, unwind: bb235];
    }

    bb120: {
        StorageDead(_333);
        StorageDead(_309);
        _307 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _308) -> [return: bb121, unwind: bb235];
    }

    bb121: {
        StorageDead(_308);
        _334 = discriminant(_307);
        switchInt(move _334) -> [0: bb122, 1: bb123, otherwise: bb5];
    }

    bb122: {
        StorageLive(_338);
        _338 = ((_307 as Continue).0: ());
        _306 = _338;
        StorageDead(_338);
        _499 = discriminant(_307);
        StorageDead(_329);
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_313);
        StorageDead(_307);
        StorageDead(_306);
        _149 = const ();
        StorageDead(_302);
        _475 = const false;
        StorageDead(_299);
        StorageDead(_261);
        _477 = const false;
        StorageDead(_258);
        StorageDead(_230);
        goto -> bb125;
    }

    bb123: {
        StorageLive(_335);
        _335 = move ((_307 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_337);
        _337 = move _335;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _337) -> [return: bb124, unwind: bb231];
    }

    bb124: {
        StorageDead(_337);
        StorageDead(_335);
        _515 = discriminant(_307);
        StorageDead(_329);
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_313);
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_302);
        _475 = const false;
        StorageDead(_299);
        goto -> bb204;
    }

    bb125: {
        StorageDead(_150);
        StorageDead(_149);
        StorageLive(_339);
        StorageLive(_340);
        _340 = &(*_1);
        StorageLive(_341);
        StorageLive(_342);
        _342 = &_41;
        _470 = deref_copy (*_342);
        _341 = &(*_470);
        _339 = anchor_lang::prelude::AccountLoader::<'_, PythLazerOracle>::try_from_unchecked(move _340, move _341) -> [return: bb126, unwind: bb224];
    }

    bb126: {
        StorageDead(_341);
        StorageDead(_340);
        _343 = discriminant(_339);
        switchInt(move _343) -> [0: bb128, 1: bb127, otherwise: bb5];
    }

    bb127: {
        StorageLive(_345);
        _345 = move ((_339 as Err).0: anchor_lang::error::Error);
        StorageLive(_347);
        StorageLive(_348);
        _348 = move _345;
        _347 = anchor_lang::error::Error::with_account_name::<&str>(move _348, const "lazer_oracle") -> [return: bb129, unwind: bb230];
    }

    bb128: {
        StorageLive(_344);
        _344 = move ((_339 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>);
        _140 = move _344;
        StorageDead(_344);
        StorageDead(_147);
        _501 = discriminant(_339);
        StorageDead(_342);
        StorageDead(_339);
        goto -> bb135;
    }

    bb129: {
        StorageDead(_348);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _347);
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_147);
        _513 = discriminant(_339);
        StorageDead(_342);
        StorageDead(_339);
        goto -> bb207;
    }

    bb130: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &_41;
        _471 = deref_copy (*_351);
        _350 = &(*_471);
        _349 = anchor_lang::prelude::AccountLoader::<'_, PythLazerOracle>::try_from(move _350) -> [return: bb131, unwind: bb224];
    }

    bb131: {
        StorageDead(_350);
        _352 = discriminant(_349);
        switchInt(move _352) -> [0: bb133, 1: bb132, otherwise: bb5];
    }

    bb132: {
        StorageLive(_354);
        _354 = move ((_349 as Err).0: anchor_lang::error::Error);
        StorageLive(_356);
        StorageLive(_357);
        _357 = move _354;
        _356 = anchor_lang::error::Error::with_account_name::<&str>(move _357, const "lazer_oracle") -> [return: bb134, unwind: bb229];
    }

    bb133: {
        StorageLive(_353);
        _353 = move ((_349 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>);
        _140 = move _353;
        StorageDead(_353);
        _503 = discriminant(_349);
        StorageDead(_351);
        StorageDead(_349);
        goto -> bb135;
    }

    bb134: {
        StorageDead(_357);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _356);
        StorageDead(_356);
        StorageDead(_354);
        _511 = discriminant(_349);
        StorageDead(_351);
        StorageDead(_349);
        goto -> bb207;
    }

    bb135: {
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_358);
        StorageLive(_359);
        _359 = const false;
        switchInt(move _359) -> [0: bb159, otherwise: bb136];
    }

    bb136: {
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = _139;
        StorageLive(_363);
        StorageLive(_364);
        _364 = &(*_135);
        _363 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _364) -> [return: bb137, unwind: bb224];
    }

    bb137: {
        StorageDead(_364);
        _361 = Ne(move _362, move _363);
        switchInt(move _361) -> [0: bb143, otherwise: bb138];
    }

    bb138: {
        StorageDead(_363);
        StorageDead(_362);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        _369 = ConstraintSpace;
        _368 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _369) -> [return: bb139, unwind: bb224];
    }

    bb139: {
        StorageDead(_369);
        _367 = anchor_lang::error::Error::with_account_name::<&str>(move _368, const "lazer_oracle") -> [return: bb140, unwind: bb224];
    }

    bb140: {
        _473 = const true;
        StorageDead(_368);
        StorageLive(_370);
        StorageLive(_371);
        _371 = _139;
        StorageLive(_372);
        StorageLive(_373);
        _373 = &(*_135);
        _372 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _373) -> [return: bb141, unwind: bb228];
    }

    bb141: {
        StorageDead(_373);
        _370 = (move _371, move _372);
        StorageDead(_372);
        StorageDead(_371);
        _473 = const false;
        _366 = anchor_lang::error::Error::with_values::<usize, usize>(move _367, move _370) -> [return: bb142, unwind: bb228];
    }

    bb142: {
        StorageDead(_370);
        _473 = const false;
        StorageDead(_367);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _366);
        StorageDead(_366);
        StorageDead(_361);
        StorageDead(_360);
        goto -> bb203;
    }

    bb143: {
        StorageDead(_363);
        StorageDead(_362);
        _360 = const ();
        StorageDead(_361);
        StorageDead(_360);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = &_138;
        StorageLive(_377);
        _377 = &_1;
        _375 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _376, move _377) -> [return: bb144, unwind: bb224];
    }

    bb144: {
        switchInt(move _375) -> [0: bb149, otherwise: bb145];
    }

    bb145: {
        StorageDead(_377);
        StorageDead(_376);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        _382 = ConstraintOwner;
        _381 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _382) -> [return: bb146, unwind: bb224];
    }

    bb146: {
        StorageDead(_382);
        _380 = anchor_lang::error::Error::with_account_name::<&str>(move _381, const "lazer_oracle") -> [return: bb147, unwind: bb224];
    }

    bb147: {
        StorageDead(_381);
        StorageLive(_383);
        StorageLive(_384);
        _384 = (*_138);
        StorageLive(_385);
        _385 = (*_1);
        _383 = (move _384, move _385);
        StorageDead(_385);
        StorageDead(_384);
        _379 = anchor_lang::error::Error::with_pubkeys(move _380, move _383) -> [return: bb148, unwind: bb224];
    }

    bb148: {
        StorageDead(_383);
        StorageDead(_380);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _379);
        StorageDead(_379);
        StorageDead(_375);
        StorageDead(_374);
        goto -> bb203;
    }

    bb149: {
        StorageDead(_377);
        StorageDead(_376);
        _374 = const ();
        StorageDead(_375);
        StorageDead(_374);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &_95;
        StorageLive(_388);
        _388 = _139;
        _386 = anchor_lang::prelude::Rent::minimum_balance(move _387, move _388) -> [return: bb150, unwind: bb224];
    }

    bb150: {
        StorageDead(_388);
        StorageDead(_387);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = &_140;
        _392 = <anchor_lang::prelude::AccountLoader<'_, PythLazerOracle> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _393) -> [return: bb151, unwind: bb224];
    }

    bb151: {
        _391 = &_392;
        StorageDead(_393);
        _390 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _391) -> [return: bb152, unwind: bb220];
    }

    bb152: {
        StorageDead(_391);
        StorageLive(_394);
        _394 = _386;
        _389 = Lt(move _390, move _394);
        switchInt(move _389) -> [0: bb157, otherwise: bb153];
    }

    bb153: {
        StorageDead(_394);
        drop(_392) -> [return: bb154, unwind: bb224];
    }

    bb154: {
        StorageDead(_392);
        StorageDead(_390);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = ConstraintRentExempt;
        _397 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _398) -> [return: bb155, unwind: bb224];
    }

    bb155: {
        StorageDead(_398);
        _396 = anchor_lang::error::Error::with_account_name::<&str>(move _397, const "lazer_oracle") -> [return: bb156, unwind: bb224];
    }

    bb156: {
        StorageDead(_397);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _396);
        StorageDead(_396);
        StorageDead(_389);
        StorageDead(_386);
        goto -> bb203;
    }

    bb157: {
        StorageDead(_394);
        drop(_392) -> [return: bb158, unwind: bb224];
    }

    bb158: {
        StorageDead(_392);
        StorageDead(_390);
        _358 = const ();
        StorageDead(_389);
        StorageDead(_386);
        goto -> bb160;
    }

    bb159: {
        _358 = const ();
        goto -> bb160;
    }

    bb160: {
        StorageDead(_359);
        StorageDead(_358);
        _134 = move _140;
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_135);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        _403 = &_134;
        _402 = &(*_403);
        _401 = <anchor_lang::prelude::AccountLoader<'_, PythLazerOracle> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _402) -> [return: bb161, unwind: bb224];
    }

    bb161: {
        StorageDead(_402);
        _400 = ((*_401).6: bool);
        switchInt(move _400) -> [0: bb162, otherwise: bb165];
    }

    bb162: {
        StorageDead(_403);
        StorageDead(_401);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = ConstraintMut;
        _406 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _407) -> [return: bb163, unwind: bb224];
    }

    bb163: {
        StorageDead(_407);
        _405 = anchor_lang::error::Error::with_account_name::<&str>(move _406, const "lazer_oracle") -> [return: bb164, unwind: bb224];
    }

    bb164: {
        StorageDead(_406);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _405);
        StorageDead(_405);
        StorageDead(_400);
        StorageDead(_399);
        goto -> bb209;
    }

    bb165: {
        StorageDead(_403);
        StorageDead(_401);
        _399 = const ();
        StorageDead(_400);
        StorageDead(_399);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &_95;
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_134;
        _413 = <anchor_lang::prelude::AccountLoader<'_, PythLazerOracle> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _414) -> [return: bb166, unwind: bb224];
    }

    bb166: {
        _412 = &_413;
        StorageDead(_414);
        _411 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _412) -> [return: bb167, unwind: bb219];
    }

    bb167: {
        StorageDead(_412);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = &_134;
        _419 = <anchor_lang::prelude::AccountLoader<'_, PythLazerOracle> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _420) -> [return: bb168, unwind: bb219];
    }

    bb168: {
        _418 = &_419;
        StorageDead(_420);
        _417 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _418) -> [return: bb169, unwind: bb218];
    }

    bb169: {
        StorageDead(_418);
        _416 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _417) -> [return: bb170, unwind: bb218];
    }

    bb170: {
        _472 = const true;
        StorageDead(_417);
        _421 = discriminant(_416);
        switchInt(move _421) -> [0: bb171, 1: bb172, otherwise: bb5];
    }

    bb171: {
        StorageLive(_425);
        _425 = ((_416 as Continue).0: usize);
        _415 = _425;
        StorageDead(_425);
        _409 = anchor_lang::prelude::Rent::is_exempt(move _410, move _411, move _415) -> [return: bb174, unwind: bb226];
    }

    bb172: {
        StorageLive(_422);
        _422 = move ((_416 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_424);
        _424 = move _422;
        _0 = <std::result::Result<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _424) -> [return: bb173, unwind: bb226];
    }

    bb173: {
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_415);
        StorageDead(_411);
        StorageDead(_410);
        _509 = discriminant(_416);
        drop(_419) -> [return: bb200, unwind: bb219];
    }

    bb174: {
        switchInt(move _409) -> [0: bb176, otherwise: bb175];
    }

    bb175: {
        StorageDead(_415);
        StorageDead(_411);
        StorageDead(_410);
        _505 = discriminant(_416);
        drop(_419) -> [return: bb181, unwind: bb219];
    }

    bb176: {
        StorageDead(_415);
        StorageDead(_411);
        StorageDead(_410);
        _507 = discriminant(_416);
        drop(_419) -> [return: bb177, unwind: bb219];
    }

    bb177: {
        StorageDead(_419);
        _472 = const false;
        StorageDead(_416);
        drop(_413) -> [return: bb178, unwind: bb224];
    }

    bb178: {
        StorageDead(_413);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = ConstraintRentExempt;
        _428 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _429) -> [return: bb179, unwind: bb224];
    }

    bb179: {
        StorageDead(_429);
        _427 = anchor_lang::error::Error::with_account_name::<&str>(move _428, const "lazer_oracle") -> [return: bb180, unwind: bb224];
    }

    bb180: {
        StorageDead(_428);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _427);
        StorageDead(_427);
        goto -> bb202;
    }

    bb181: {
        StorageDead(_419);
        _472 = const false;
        StorageDead(_416);
        drop(_413) -> [return: bb182, unwind: bb224];
    }

    bb182: {
        StorageDead(_413);
        _408 = const ();
        StorageDead(_409);
        StorageDead(_408);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = &_20;
        _433 = &(*_434);
        _432 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _433) -> [return: bb183, unwind: bb224];
    }

    bb183: {
        StorageDead(_433);
        _431 = ((*_432).6: bool);
        switchInt(move _431) -> [0: bb184, otherwise: bb187];
    }

    bb184: {
        StorageDead(_434);
        StorageDead(_432);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        _438 = ConstraintMut;
        _437 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _438) -> [return: bb185, unwind: bb224];
    }

    bb185: {
        StorageDead(_438);
        _436 = anchor_lang::error::Error::with_account_name::<&str>(move _437, const "admin") -> [return: bb186, unwind: bb224];
    }

    bb186: {
        StorageDead(_437);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _436);
        StorageDead(_436);
        StorageDead(_431);
        StorageDead(_430);
        goto -> bb209;
    }

    bb187: {
        StorageDead(_434);
        StorageDead(_432);
        _430 = const ();
        StorageDead(_431);
        StorageDead(_430);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &_20;
        _442 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _443) -> [return: bb188, unwind: bb224];
    }

    bb188: {
        _441 = &_442;
        StorageDead(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = admin_hot_wallet::id() -> [return: bb189, unwind: bb224];
    }

    bb189: {
        _444 = &_445;
        _440 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _441, move _444) -> [return: bb190, unwind: bb224];
    }

    bb190: {
        switchInt(move _440) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_441);
        goto -> bb196;
    }

    bb192: {
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_441);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = &_20;
        _448 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _449) -> [return: bb193, unwind: bb224];
    }

    bb193: {
        _447 = &_448;
        StorageDead(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _545 = (((_50.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _452 = &(*_545);
        _451 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _452) -> [return: bb194, unwind: bb224];
    }

    bb194: {
        StorageDead(_452);
        _450 = &((*_451).0: anchor_lang::prelude::Pubkey);
        _446 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _447, move _450) -> [return: bb195, unwind: bb224];
    }

    bb195: {
        switchInt(move _446) -> [0: bb197, otherwise: bb196];
    }

    bb196: {
        StorageDead(_451);
        StorageDead(_450);
        StorageDead(_448);
        StorageDead(_447);
        _439 = const ();
        StorageDead(_446);
        StorageDead(_440);
        StorageDead(_439);
        StorageLive(_457);
        StorageLive(_458);
        _458 = move _20;
        StorageLive(_459);
        _459 = move _134;
        StorageLive(_460);
        _460 = move _50;
        StorageLive(_461);
        _461 = move _65;
        StorageLive(_462);
        _462 = move _80;
        _457 = admin::InitPythLazerOracle::<'_> { admin: move _458, lazer_oracle: move _459, state: move _460, rent: move _461, system_program: move _462 };
        StorageDead(_462);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_458);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Ok(move _457);
        StorageDead(_457);
        StorageDead(_134);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb217;
    }

    bb197: {
        StorageDead(_451);
        StorageDead(_450);
        StorageDead(_448);
        StorageDead(_447);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        _456 = ConstraintRaw;
        _455 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _456) -> [return: bb198, unwind: bb224];
    }

    bb198: {
        StorageDead(_456);
        _454 = anchor_lang::error::Error::with_account_name::<&str>(move _455, const "admin") -> [return: bb199, unwind: bb224];
    }

    bb199: {
        StorageDead(_455);
        _0 = std::result::Result::<admin::InitPythLazerOracle<'_>, anchor_lang::error::Error>::Err(move _454);
        StorageDead(_454);
        StorageDead(_446);
        StorageDead(_440);
        StorageDead(_439);
        goto -> bb209;
    }

    bb200: {
        StorageDead(_419);
        _472 = const false;
        StorageDead(_416);
        drop(_413) -> [return: bb201, unwind: bb224];
    }

    bb201: {
        StorageDead(_413);
        goto -> bb202;
    }

    bb202: {
        StorageDead(_409);
        StorageDead(_408);
        goto -> bb209;
    }

    bb203: {
        StorageDead(_359);
        StorageDead(_358);
        goto -> bb208;
    }

    bb204: {
        StorageDead(_261);
        _477 = const false;
        StorageDead(_258);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_230);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_147);
        goto -> bb207;
    }

    bb207: {
        StorageDead(_142);
        StorageDead(_141);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_135);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_134);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_95);
        goto -> bb212;
    }

    bb212: {
        StorageDead(_80);
        goto -> bb213;
    }

    bb213: {
        StorageDead(_65);
        drop(_50) -> [return: bb214, unwind: bb225];
    }

    bb214: {
        StorageDead(_50);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb215;
    }

    bb215: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb216;
    }

    bb216: {
        StorageDead(_6);
        goto -> bb217;
    }

    bb217: {
        return;
    }

    bb218 (cleanup): {
        drop(_419) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        drop(_413) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        drop(_392) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        drop(_240) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_213) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_157) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        drop(_50) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        resume;
    }

    bb226 (cleanup): {
        _533 = discriminant(_416);
        goto -> bb218;
    }

    bb227 (cleanup): {
        drop(_367) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        switchInt(_473) -> [0: bb224, otherwise: bb227];
    }

    bb229 (cleanup): {
        _534 = discriminant(_349);
        goto -> bb224;
    }

    bb230 (cleanup): {
        _535 = discriminant(_339);
        goto -> bb224;
    }

    bb231 (cleanup): {
        _536 = discriminant(_307);
        goto -> bb235;
    }

    bb232 (cleanup): {
        drop(_310) -> [return: bb235, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        switchInt(_474) -> [0: bb235, otherwise: bb232];
    }

    bb234 (cleanup): {
        drop(_299) -> [return: bb240, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        switchInt(_475) -> [0: bb240, otherwise: bb234];
    }

    bb236 (cleanup): {
        _537 = discriminant(_266);
        goto -> bb240;
    }

    bb237 (cleanup): {
        drop(_269) -> [return: bb240, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        switchInt(_476) -> [0: bb240, otherwise: bb237];
    }

    bb239 (cleanup): {
        drop(_258) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb240 (cleanup): {
        switchInt(_477) -> [0: bb224, otherwise: bb239];
    }

    bb241 (cleanup): {
        _538 = discriminant(_249);
        goto -> bb243;
    }

    bb242 (cleanup): {
        drop(_239) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb243 (cleanup): {
        switchInt(_478) -> [0: bb224, otherwise: bb242];
    }

    bb244 (cleanup): {
        drop(_211) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb245 (cleanup): {
        switchInt(_479) -> [0: bb224, otherwise: bb244];
    }

    bb246 (cleanup): {
        _539 = discriminant(_166);
        goto -> bb250;
    }

    bb247 (cleanup): {
        drop(_169) -> [return: bb250, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        switchInt(_480) -> [0: bb250, otherwise: bb247];
    }

    bb249 (cleanup): {
        drop(_156) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb250 (cleanup): {
        switchInt(_481) -> [0: bb224, otherwise: bb249];
    }

    bb251 (cleanup): {
        drop(_127) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb252 (cleanup): {
        switchInt(_482) -> [0: bb224, otherwise: bb251];
    }

    bb253 (cleanup): {
        _540 = discriminant(_96);
        goto -> bb224;
    }

    bb254 (cleanup): {
        _541 = discriminant(_81);
        goto -> bb224;
    }

    bb255 (cleanup): {
        _542 = discriminant(_66);
        goto -> bb224;
    }

    bb256 (cleanup): {
        _543 = discriminant(_51);
        goto -> bb225;
    }

    bb257 (cleanup): {
        _544 = discriminant(_21);
        goto -> bb225;
    }
}
