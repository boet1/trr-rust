// MIR for `calculate_price_from_serum_limit_price` after PreCodegen

fn calculate_price_from_serum_limit_price(_1: u64, _2: u64, _3: u32, _4: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug limit_price => _1;
    debug pc_lot_size => _2;
    debug coin_decimals => _3;
    debug coin_lot_size => _4;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _5: u128;
    let mut _6: u32;
    let mut _7: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _9: std::result::Result<u128, error::ErrorCode>;
    let mut _10: u128;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _12: std::result::Result<u128, error::ErrorCode>;
    let mut _13: u128;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _15: std::result::Result<u128, error::ErrorCode>;
    let mut _16: u128;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _18: std::result::Result<u128, error::ErrorCode>;
    let mut _19: u64;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: u128;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _27: std::result::Result<u128, error::ErrorCode>;
    let mut _28: u128;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _30: std::result::Result<u128, error::ErrorCode>;
    let mut _31: u64;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: u128;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: u128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _55: std::result::Result<u128, error::ErrorCode>;
    let mut _56: u64;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug coin_precision => _5;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: u128;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: u128;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: u128;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: u128;
        let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _52: u128;
        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _61: u128;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: u128;
        scope 2 {
            debug residual => _21;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _24;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _33;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _36;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _39;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _42;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _44;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _47;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _49;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _52;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _58;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _61;
            scope 25 {
            }
        }
        scope 26 {
            debug residual => _63;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _66;
            scope 29 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = core::num::<impl u128>::pow(const 10_u128, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _1;
        _18 = <u64 as Cast>::cast::<u128>(move _19) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_19);
        _17 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: u128);
        _16 = _24;
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _2;
        _30 = <u64 as Cast>::cast::<u128>(move _31) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb44;
    }

    bb8: {
        StorageDead(_31);
        _29 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_30);
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_36);
        _36 = ((_29 as Continue).0: u128);
        _28 = _36;
        StorageDead(_36);
        StorageLive(_37);
        _37 = _5;
        _27 = <u128 as SafeMath>::safe_mul(move _28, move _37) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_33);
        _33 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb40;
    }

    bb13: {
        StorageDead(_37);
        StorageDead(_28);
        _26 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _27) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_27);
        _38 = discriminant(_26);
        switchInt(move _38) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_42);
        _42 = ((_26 as Continue).0: u128);
        _25 = _42;
        StorageDead(_42);
        _15 = <u128 as SafeMath>::safe_mul(move _16, move _25) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_39);
        _39 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb40;
    }

    bb18: {
        StorageDead(_25);
        StorageDead(_16);
        _14 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_15);
        _43 = discriminant(_14);
        switchInt(move _43) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_47);
        _47 = ((_14 as Continue).0: u128);
        _13 = _47;
        StorageDead(_47);
        _12 = <u128 as SafeMath>::safe_mul(move _13, const _) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_44);
        _44 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb41;
    }

    bb23: {
        StorageDead(_13);
        _11 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _12) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_12);
        _48 = discriminant(_11);
        switchInt(move _48) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_52);
        _52 = ((_11 as Continue).0: u128);
        _10 = _52;
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _4;
        _55 = <u64 as Cast>::cast::<u128>(move _56) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_49);
        _49 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_49);
        goto -> bb42;
    }

    bb28: {
        StorageDead(_56);
        _54 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: u128);
        _53 = _61;
        StorageDead(_61);
        _9 = <u128 as SafeMath>::safe_div(move _10, move _53) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb39;
    }

    bb33: {
        StorageDead(_53);
        StorageDead(_10);
        _8 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_9);
        _62 = discriminant(_8);
        switchInt(move _62) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_66);
        _66 = ((_8 as Continue).0: u128);
        _7 = _66;
        StorageDead(_66);
        _0 = <u128 as Cast>::cast::<u64>(move _7) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_63);
        _63 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb39;
    }

    bb38: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_54);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb45;
    }

    bb39: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_54);
        goto -> bb43;
    }

    bb40: {
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_29);
        StorageDead(_26);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb45;
    }

    bb45: {
        return;
    }
}
