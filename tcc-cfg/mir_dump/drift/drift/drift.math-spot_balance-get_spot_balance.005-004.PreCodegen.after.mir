// MIR for `get_spot_balance` after PreCodegen

fn get_spot_balance(_1: u128, _2: &SpotMarket, _3: &SpotBalanceType, _4: bool) -> std::result::Result<u128, error::ErrorCode> {
    debug token_amount => _1;
    debug spot_market => _2;
    debug balance_type => _3;
    debug round_up => _4;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _5: u128;
    let mut _6: u32;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _8: std::result::Result<u32, error::ErrorCode>;
    let mut _9: u32;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: u32;
    let mut _16: isize;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: u128;
    let mut _24: u128;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: ();
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: u128;
    let mut _40: u128;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _42: std::result::Result<u128, error::ErrorCode>;
    let mut _43: u128;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: u128;
    scope 1 {
        debug precision_increase => _5;
        let _15: u128;
        scope 6 {
            debug cumulative_interest => _15;
            let mut _17: u128;
            let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _29: u128;
            let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _35: u128;
            scope 7 {
                debug balance => _17;
                let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _48: u128;
                scope 16 {
                    debug residual => _45;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _48;
                    scope 19 {
                    }
                }
            }
            scope 8 {
                debug residual => _26;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _29;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _32;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _35;
                scope 15 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_2).41: u32);
        _8 = <u32 as SafeMath>::safe_sub(const 19_u32, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: u32);
        _6 = _14;
        StorageDead(_14);
        _5 = core::num::<impl u128>::pow(const 10_u128, move _6) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_7);
        goto -> bb33;
    }

    bb7: {
        StorageDead(_6);
        StorageDead(_7);
        StorageLive(_15);
        _16 = discriminant((*_3));
        switchInt(move _16) -> [0: bb9, 1: bb8, otherwise: bb4];
    }

    bb8: {
        _15 = ((*_2).14: u128);
        goto -> bb10;
    }

    bb9: {
        _15 = ((*_2).13: u128);
        goto -> bb10;
    }

    bb10: {
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _1;
        StorageLive(_24);
        _24 = _5;
        _22 = <u128 as SafeMath>::safe_mul(move _23, move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_22);
        _25 = discriminant(_21);
        switchInt(move _25) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_29);
        _29 = ((_21 as Continue).0: u128);
        _20 = _29;
        StorageDead(_29);
        StorageLive(_30);
        _30 = _15;
        _19 = <u128 as SafeMath>::safe_div(move _20, move _30) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_26);
        _26 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb31;
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_19);
        _31 = discriminant(_18);
        switchInt(move _31) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_35);
        _35 = ((_18 as Continue).0: u128);
        _17 = _35;
        StorageDead(_35);
        StorageDead(_21);
        StorageDead(_18);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _4;
        switchInt(move _37) -> [0: bb29, otherwise: bb21];
    }

    bb19: {
        StorageLive(_32);
        _32 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb31;
    }

    bb21: {
        StorageLive(_38);
        StorageLive(_39);
        _39 = _17;
        _38 = Ne(move _39, const 0_u128);
        switchInt(move _38) -> [0: bb28, otherwise: bb22];
    }

    bb22: {
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _17;
        _42 = <u128 as SafeMath>::safe_add(move _43, const 1_u128) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_43);
        _41 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_42);
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_48);
        _48 = ((_41 as Continue).0: u128);
        _40 = _48;
        StorageDead(_48);
        _17 = move _40;
        StorageDead(_40);
        StorageDead(_41);
        _36 = const ();
        goto -> bb30;
    }

    bb26: {
        StorageLive(_45);
        _45 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_40);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb32;
    }

    bb28: {
        StorageDead(_39);
        goto -> bb29;
    }

    bb29: {
        _36 = const ();
        goto -> bb30;
    }

    bb30: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_49);
        _49 = _17;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _49);
        StorageDead(_49);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_5);
        goto -> bb34;
    }

    bb31: {
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_17);
        StorageDead(_15);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_5);
        goto -> bb34;
    }

    bb34: {
        return;
    }
}
