// MIR for `instructions::user::handle_cancel_orders_by_ids` before PreCodegen

fn instructions::user::handle_cancel_orders_by_ids(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::CancelOrder<'_>>, _2: Vec<u32>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug order_ids => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &anchor_lang::prelude::Clock;
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: anchor_lang::prelude::Clock;
    let mut _26: instructions::optional_accounts::AccountMaps<'_>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _28: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _29: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _30: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _31: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _32: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &std::collections::BTreeSet<u16>;
    let _35: &std::collections::BTreeSet<u16>;
    let _36: std::collections::BTreeSet<u16>;
    let mut _37: &std::collections::BTreeSet<u16>;
    let _38: &std::collections::BTreeSet<u16>;
    let _39: std::collections::BTreeSet<u16>;
    let mut _40: u64;
    let mut _41: std::option::Option<state::state::OracleGuardRails>;
    let mut _42: state::state::OracleGuardRails;
    let mut _43: &state::state::State;
    let mut _44: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _50: ();
    let mut _51: std::vec::IntoIter<u32>;
    let mut _52: std::vec::Vec<u32>;
    let mut _54: ();
    let _55: ();
    let mut _56: std::option::Option<u32>;
    let mut _57: &mut std::vec::IntoIter<u32>;
    let mut _58: &mut std::vec::IntoIter<u32>;
    let mut _59: isize;
    let mut _60: !;
    let _62: ();
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _64: std::result::Result<(), error::ErrorCode>;
    let mut _65: u32;
    let mut _66: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _67: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _68: &state::perp_market_map::PerpMarketMap<'_>;
    let _69: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _70: &state::spot_market_map::SpotMarketMap<'_>;
    let _71: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _72: &mut state::oracle_map::OracleMap<'_>;
    let mut _73: &mut state::oracle_map::OracleMap<'_>;
    let mut _74: &anchor_lang::prelude::Clock;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: ();
    let mut _81: &mut instructions::user::CancelOrder<'_>;
    let mut _82: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _83: &mut instructions::user::CancelOrder<'_>;
    let mut _84: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _85: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _86: &mut instructions::user::CancelOrder<'_>;
    let mut _87: bool;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _105: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _13;
        let _22: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _22;
            let _23: state::perp_market_map::PerpMarketMap<'_>;
            let _24: state::spot_market_map::SpotMarketMap<'_>;
            let mut _25: state::oracle_map::OracleMap<'_>;
            let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _49: instructions::optional_accounts::AccountMaps<'_>;
            scope 11 {
                debug perp_market_map => _23;
                debug spot_market_map => _24;
                debug oracle_map => _25;
                let mut _53: std::vec::IntoIter<u32>;
                scope 16 {
                    debug iter => _53;
                    let _61: u32;
                    scope 17 {
                        debug order_id => _61;
                        let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _79: ();
                        scope 18 {
                            debug residual => _76;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => _79;
                            scope 21 {
                            }
                        }
                    }
                }
            }
            scope 12 {
                debug residual => _46;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _49;
                scope 15 {
                }
            }
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        _87 = const false;
        _87 = const true;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _81 = deref_copy (_1.1: &mut instructions::user::CancelOrder<'_>);
        _7 = &((*_81).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _82 = deref_copy (*_7);
        _104 = (((_82.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_104);
        _5 = constraints::exchange_not_paused(move _6) -> [return: bb1, unwind: bb61];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb61];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _88 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind: bb61];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb59];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _98 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb56;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb61];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _13 = &_14;
        _90 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _83 = deref_copy (_1.1: &mut instructions::user::CancelOrder<'_>);
        _22 = &((*_83).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _84 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _33 = &(*_84);
        _32 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _33) -> [return: bb12, unwind: bb61];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _96 = discriminant(_15);
        StorageDead(_15);
        goto -> bb45;
    }

    bb12: {
        StorageDead(_33);
        _31 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _32) -> [return: bb13, unwind: bb61];
    }

    bb13: {
        StorageDead(_32);
        _30 = &mut _31;
        _29 = &mut (*_30);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = BTreeSet::<u16>::new() -> [return: bb14, unwind: bb61];
    }

    bb14: {
        _35 = &_36;
        _34 = &(*_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = BTreeSet::<u16>::new() -> [return: bb15, unwind: bb53];
    }

    bb15: {
        _38 = &_39;
        _37 = &(*_38);
        StorageLive(_40);
        _40 = ((*_13).0: u64);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _85 = deref_copy (*_22);
        _105 = (((_85.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _44 = &(*_105);
        _43 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _44) -> [return: bb16, unwind: bb52];
    }

    bb16: {
        StorageDead(_44);
        _42 = ((*_43).7: state::state::OracleGuardRails);
        _41 = Option::<state::state::OracleGuardRails>::Some(move _42);
        StorageDead(_42);
        _28 = load_maps(move _29, move _34, move _37, move _40, move _41) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_29);
        _27 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _28) -> [return: bb18, unwind: bb52];
    }

    bb18: {
        StorageDead(_28);
        _45 = discriminant(_27);
        switchInt(move _45) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_49);
        _49 = move ((_27 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _26 = move _49;
        StorageDead(_49);
        StorageLive(_23);
        _23 = move (_26.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_24);
        _24 = move (_26.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_25);
        _25 = move (_26.2: state::oracle_map::OracleMap<'_>);
        _94 = discriminant(_27);
        StorageDead(_43);
        drop(_39) -> [return: bb22, unwind: bb48];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb21, unwind: bb57];
    }

    bb21: {
        StorageDead(_48);
        StorageDead(_46);
        _92 = discriminant(_27);
        StorageDead(_43);
        drop(_39) -> [return: bb42, unwind: bb53];
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_38);
        drop(_36) -> [return: bb23, unwind: bb49];
    }

    bb23: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _87 = const false;
        _52 = move _2;
        _51 = <Vec<u32> as IntoIterator>::into_iter(move _52) -> [return: bb24, unwind: bb49];
    }

    bb24: {
        StorageDead(_52);
        StorageLive(_53);
        _53 = move _51;
        goto -> bb25;
    }

    bb25: {
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &mut _53;
        _57 = &mut (*_58);
        _56 = <std::vec::IntoIter<u32> as Iterator>::next(move _57) -> [return: bb26, unwind: bb47];
    }

    bb26: {
        StorageDead(_57);
        _59 = discriminant(_56);
        switchInt(move _59) -> [0: bb28, 1: bb27, otherwise: bb4];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_56 as Some).0: u32);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _61;
        StorageLive(_66);
        StorageLive(_67);
        _86 = deref_copy (_1.1: &mut instructions::user::CancelOrder<'_>);
        _67 = &((*_86).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _66 = &(*_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_23;
        _68 = &(*_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_24;
        _70 = &(*_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &mut _25;
        _72 = &mut (*_73);
        StorageLive(_74);
        _74 = &(*_13);
        _64 = cancel_order_by_order_id(move _65, move _66, move _68, move _70, move _72, move _74) -> [return: bb29, unwind: bb47];
    }

    bb28: {
        _50 = const ();
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        drop(_53) -> [return: bb34, unwind: bb49];
    }

    bb29: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        _63 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _64) -> [return: bb30, unwind: bb47];
    }

    bb30: {
        StorageDead(_64);
        _75 = discriminant(_63);
        switchInt(move _75) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_79);
        _79 = ((_63 as Continue).0: ());
        _62 = _79;
        StorageDead(_79);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_62);
        _55 = const ();
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        _54 = const ();
        goto -> bb25;
    }

    bb32: {
        StorageLive(_76);
        _76 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb33, unwind: bb47];
    }

    bb33: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        drop(_53) -> [return: bb38, unwind: bb49];
    }

    bb34: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_80);
        _80 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _80);
        StorageDead(_80);
        drop(_25) -> [return: bb35, unwind: bb50];
    }

    bb35: {
        StorageDead(_25);
        drop(_24) -> [return: bb36, unwind: bb51];
    }

    bb36: {
        StorageDead(_24);
        drop(_23) -> [return: bb37, unwind: bb61];
    }

    bb37: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb46;
    }

    bb38: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        drop(_25) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        StorageDead(_25);
        drop(_24) -> [return: bb40, unwind: bb51];
    }

    bb40: {
        StorageDead(_24);
        drop(_23) -> [return: bb41, unwind: bb61];
    }

    bb41: {
        StorageDead(_23);
        goto -> bb44;
    }

    bb42: {
        StorageDead(_39);
        StorageDead(_38);
        drop(_36) -> [return: bb43, unwind: bb61];
    }

    bb43: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_22);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb56;
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_53) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_36) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_25) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_24) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_23) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_39) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_36) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        resume;
    }

    bb55: {
        drop(_2) -> [return: bb46, unwind: bb54];
    }

    bb56: {
        switchInt(_87) -> [0: bb46, otherwise: bb55];
    }

    bb57 (cleanup): {
        _101 = discriminant(_27);
        goto -> bb52;
    }

    bb58 (cleanup): {
        _102 = discriminant(_15);
        goto -> bb61;
    }

    bb59 (cleanup): {
        _103 = discriminant(_4);
        goto -> bb61;
    }

    bb60 (cleanup): {
        drop(_2) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_87) -> [0: bb54, otherwise: bb60];
    }
}
