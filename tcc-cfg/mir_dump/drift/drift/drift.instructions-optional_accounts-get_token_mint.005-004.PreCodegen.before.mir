// MIR for `get_token_mint` before PreCodegen

fn get_token_mint(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>) -> std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> {
    debug account_info_iter => _1;
    let mut _0: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let _2: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _3: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _7: !;
    let mut _8: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _11: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _12: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _13: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _14: isize;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>, anchor_lang::error::Error>;
    let mut _20: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _21: isize;
    let mut _23: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _24: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _25: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _26: bool;
    let mut _27: isize;
    let mut _28: isize;
    scope 1 {
        debug mint_account_info => _2;
        let _9: &anchor_lang::prelude::AccountInfo<'_>;
        let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _18: &anchor_lang::prelude::AccountInfo<'_>;
        scope 2 {
            debug mint_account_info => _9;
            let _22: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
            scope 7 {
                debug mint => _22;
            }
        }
        scope 3 {
            debug residual => _15;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _18;
            scope 6 {
            }
        }
    }

    bb0: {
        _26 = const false;
        StorageLive(_2);
        StorageLive(_3);
        _3 = &mut (*_1);
        _2 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_2;
        _5 = Option::<&&anchor_lang::prelude::AccountInfo<'_>>::is_none(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = Option::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>::None;
        _0 = std::result::Result::<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb16;
    }

    bb4: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut (*_1);
        _12 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_13);
        _11 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        _10 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_11);
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_18);
        _18 = ((_10 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _9 = _18;
        StorageDead(_18);
        StorageDead(_10);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_9);
        _26 = const true;
        _19 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::Mint>::try_from(move _20) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_15);
        _15 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb16;
    }

    bb12: {
        StorageDead(_20);
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb14, 1: bb13, otherwise: bb9];
    }

    bb13: {
        StorageLive(_25);
        _25 = Option::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>::None;
        _0 = std::result::Result::<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>::Ok(move _25);
        StorageDead(_25);
        goto -> bb15;
    }

    bb14: {
        StorageLive(_22);
        _22 = move ((_19 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        StorageLive(_23);
        StorageLive(_24);
        _24 = move _22;
        _23 = Option::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>::Some(move _24);
        StorageDead(_24);
        _0 = std::result::Result::<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>::Ok(move _23);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_9);
        StorageDead(_2);
        _27 = discriminant(_19);
        switchInt(move _27) -> [0: bb19, otherwise: bb20];
    }

    bb16: {
        StorageDead(_2);
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        _26 = const false;
        StorageDead(_19);
        goto -> bb17;
    }

    bb20: {
        drop(_19) -> [return: bb19, unwind: bb18];
    }
}
