// MIR for `controller::amm::calculate_quote_asset_amount_surplus` before PreCodegen

fn controller::amm::calculate_quote_asset_amount_surplus(_1: u128, _2: u128, _3: SwapDirection, _4: u128, _5: u128, _6: bool) -> std::result::Result<u128, error::ErrorCode> {
    debug quote_asset_reserve_before => _1;
    debug quote_asset_reserve_after => _2;
    debug swap_direction => _3;
    debug peg_multiplier => _4;
    debug initial_quote_asset_amount => _5;
    debug round_down => _6;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _7: u128;
    let mut _8: isize;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: u128;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: u128;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: u128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _29: std::result::Result<u128, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: u128;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: ();
    let mut _38: bool;
    let mut _39: u128;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _41: std::result::Result<u128, error::ErrorCode>;
    let mut _42: u128;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: bool;
    let mut _50: u128;
    let mut _51: u128;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _53: std::result::Result<u128, error::ErrorCode>;
    let mut _54: u128;
    let mut _55: u128;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _62: std::result::Result<u128, error::ErrorCode>;
    let mut _63: u128;
    let mut _64: u128;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: u128;
    scope 1 {
        debug quote_asset_reserve_change => _7;
        let mut _27: u128;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: u128;
        scope 10 {
            debug actual_quote_asset_amount => _27;
            let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _47: u128;
            let _48: u128;
            let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _60: u128;
            let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _69: u128;
            scope 15 {
                debug residual => _44;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _47;
                scope 18 {
                }
            }
            scope 19 {
                debug quote_asset_amount_surplus => _48;
            }
            scope 20 {
                debug residual => _57;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _60;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _66;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _69;
                scope 27 {
                }
            }
        }
        scope 11 {
            debug residual => _33;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _36;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_7);
        _8 = discriminant(_3);
        switchInt(move _8) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _2;
        StorageLive(_21);
        _21 = _1;
        _19 = <u128 as SafeMath>::safe_sub(move _20, move _21) -> [return: bb9, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _1;
        StorageLive(_12);
        _12 = _2;
        _10 = <u128 as SafeMath>::safe_sub(move _11, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: u128);
        _7 = _17;
        StorageDead(_17);
        StorageDead(_9);
        goto -> bb14;
    }

    bb7: {
        StorageLive(_14);
        _14 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        goto -> bb43;
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_19);
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb11, 1: bb12, otherwise: bb2];
    }

    bb11: {
        StorageLive(_26);
        _26 = ((_18 as Continue).0: u128);
        _7 = _26;
        StorageDead(_26);
        StorageDead(_18);
        goto -> bb14;
    }

    bb12: {
        StorageLive(_23);
        _23 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_18);
        goto -> bb43;
    }

    bb14: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _7;
        StorageLive(_31);
        _31 = _4;
        _29 = quote_asset::reserve_to_asset_amount(move _30, move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb17, 1: bb18, otherwise: bb2];
    }

    bb17: {
        StorageLive(_36);
        _36 = ((_28 as Continue).0: u128);
        _27 = _36;
        StorageDead(_36);
        StorageDead(_28);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _6;
        switchInt(move _38) -> [0: bb21, otherwise: bb20];
    }

    bb18: {
        StorageLive(_33);
        _33 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        goto -> bb42;
    }

    bb20: {
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _27;
        _41 = <u128 as SafeMath>::safe_add(move _42, const 1_u128) -> [return: bb22, unwind continue];
    }

    bb21: {
        _37 = const ();
        goto -> bb27;
    }

    bb22: {
        StorageDead(_42);
        _40 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _41) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb2];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: u128);
        _39 = _47;
        StorageDead(_47);
        _27 = move _39;
        StorageDead(_39);
        StorageDead(_40);
        _37 = const ();
        goto -> bb27;
    }

    bb25: {
        StorageLive(_44);
        _44 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb42;
    }

    bb27: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _27;
        StorageLive(_51);
        _51 = _5;
        _49 = Gt(move _50, move _51);
        switchInt(move _49) -> [0: bb34, otherwise: bb28];
    }

    bb28: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _27;
        StorageLive(_55);
        _55 = _5;
        _53 = <u128 as SafeMath>::safe_sub(move _54, move _55) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_55);
        StorageDead(_54);
        _52 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _53) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_53);
        _56 = discriminant(_52);
        switchInt(move _56) -> [0: bb31, 1: bb32, otherwise: bb2];
    }

    bb31: {
        StorageLive(_60);
        _60 = ((_52 as Continue).0: u128);
        _48 = _60;
        StorageDead(_60);
        StorageDead(_52);
        goto -> bb40;
    }

    bb32: {
        StorageLive(_57);
        _57 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_52);
        goto -> bb41;
    }

    bb34: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _5;
        StorageLive(_64);
        _64 = _27;
        _62 = <u128 as SafeMath>::safe_sub(move _63, move _64) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_64);
        StorageDead(_63);
        _61 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _62) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_62);
        _65 = discriminant(_61);
        switchInt(move _65) -> [0: bb37, 1: bb38, otherwise: bb2];
    }

    bb37: {
        StorageLive(_69);
        _69 = ((_61 as Continue).0: u128);
        _48 = _69;
        StorageDead(_69);
        StorageDead(_61);
        goto -> bb40;
    }

    bb38: {
        StorageLive(_66);
        _66 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_61);
        goto -> bb41;
    }

    bb40: {
        StorageDead(_49);
        StorageLive(_70);
        _70 = _48;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _70);
        StorageDead(_70);
        StorageDead(_48);
        StorageDead(_27);
        StorageDead(_7);
        goto -> bb44;
    }

    bb41: {
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_27);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_7);
        goto -> bb44;
    }

    bb44: {
        return;
    }
}
