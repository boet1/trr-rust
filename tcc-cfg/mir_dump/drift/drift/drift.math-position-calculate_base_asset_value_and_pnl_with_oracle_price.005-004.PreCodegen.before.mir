// MIR for `calculate_base_asset_value_and_pnl_with_oracle_price` before PreCodegen

fn calculate_base_asset_value_and_pnl_with_oracle_price(_1: &PerpPosition, _2: i64) -> std::result::Result<(u128, i128), error::ErrorCode> {
    debug market_position => _1;
    debug oracle_price => _2;
    let mut _0: std::result::Result<(u128, i128), error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: i64;
    let mut _6: !;
    let mut _7: (u128, i128);
    let mut _8: i128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _10: std::result::Result<i128, error::ErrorCode>;
    let mut _11: i64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: i128;
    let _17: i64;
    let mut _18: bool;
    let mut _19: i64;
    let mut _20: i64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _23: std::result::Result<i128, error::ErrorCode>;
    let mut _24: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: i128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _29: std::result::Result<i128, error::ErrorCode>;
    let mut _30: i64;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: i128;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _38: std::result::Result<i128, error::ErrorCode>;
    let mut _39: i64;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _57: std::result::Result<i128, error::ErrorCode>;
    let mut _58: i128;
    let mut _59: i128;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _61: std::result::Result<i128, error::ErrorCode>;
    let mut _62: i64;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: (u128, i128);
    let mut _74: u128;
    let mut _75: i128;
    let mut _76: i128;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug oracle_price => _17;
        let _21: i128;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: i128;
        let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _44: i128;
        let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _49: i128;
        let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _54: i128;
        scope 6 {
            debug base_asset_value => _21;
            let _55: i128;
            let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _67: i128;
            let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _72: i128;
            scope 23 {
                debug pnl => _55;
            }
            scope 24 {
                debug residual => _64;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _67;
                scope 27 {
                }
            }
            scope 28 {
                debug residual => _69;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _72;
                scope 31 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _41;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _44;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _46;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _49;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _51;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _54;
            scope 22 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).1: i64);
        _4 = Eq(move _5, const 0_i64);
        switchInt(move _4) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).2: i64);
        _10 = <i64 as Cast>::cast::<i128>(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _9 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: i128);
        _8 = _16;
        StorageDead(_16);
        _7 = (const 0_u128, move _8);
        StorageDead(_8);
        _0 = std::result::Result::<(u128, i128), error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        goto -> bb49;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<(u128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb49;
    }

    bb8: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _2;
        _18 = Gt(move _19, const 0_i64);
        switchInt(move _18) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = _2;
        _17 = core::num::<impl i64>::abs(move _20) -> [return: bb11, unwind continue];
    }

    bb10: {
        StorageDead(_19);
        _17 = const 0_i64;
        goto -> bb12;
    }

    bb11: {
        StorageDead(_20);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = ((*_1).1: i64);
        _29 = <i64 as Cast>::cast::<i128>(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_30);
        _28 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_35);
        _35 = ((_28 as Continue).0: i128);
        _27 = _35;
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _17;
        _38 = <i64 as Cast>::cast::<i128>(move _39) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_32);
        _32 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(u128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb47;
    }

    bb18: {
        StorageDead(_39);
        _37 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _38) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_38);
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_44);
        _44 = ((_37 as Continue).0: i128);
        _36 = _44;
        StorageDead(_44);
        _26 = <i128 as SafeMath>::safe_mul(move _27, move _36) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_41);
        _41 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(u128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_36);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb45;
    }

    bb23: {
        StorageDead(_36);
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_26);
        _45 = discriminant(_25);
        switchInt(move _45) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_49);
        _49 = ((_25 as Continue).0: i128);
        _24 = _49;
        StorageDead(_49);
        _23 = <i128 as SafeMath>::safe_div(move _24, const _) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_46);
        _46 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(u128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_48);
        StorageDead(_46);
        goto -> bb45;
    }

    bb28: {
        StorageDead(_24);
        _22 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_23);
        _50 = discriminant(_22);
        switchInt(move _50) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_54);
        _54 = ((_22 as Continue).0: i128);
        _21 = _54;
        StorageDead(_54);
        StorageDead(_37);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _21;
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = ((*_1).2: i64);
        _61 = <i64 as Cast>::cast::<i128>(move _62) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_51);
        _51 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(u128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb46;
    }

    bb33: {
        StorageDead(_62);
        _60 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _61) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_61);
        _63 = discriminant(_60);
        switchInt(move _63) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_67);
        _67 = ((_60 as Continue).0: i128);
        _59 = _67;
        StorageDead(_67);
        _57 = <i128 as SafeMath>::safe_add(move _58, move _59) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_64);
        _64 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<(u128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb44;
    }

    bb38: {
        StorageDead(_59);
        StorageDead(_58);
        _56 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _57) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_57);
        _68 = discriminant(_56);
        switchInt(move _68) -> [0: bb40, 1: bb41, otherwise: bb5];
    }

    bb40: {
        StorageLive(_72);
        _72 = ((_56 as Continue).0: i128);
        _55 = _72;
        StorageDead(_72);
        StorageDead(_60);
        StorageDead(_56);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _21;
        _74 = core::num::<impl i128>::unsigned_abs(move _75) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_69);
        _69 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<(u128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_71);
        StorageDead(_69);
        goto -> bb44;
    }

    bb43: {
        StorageDead(_75);
        StorageLive(_76);
        _76 = _55;
        _73 = (move _74, move _76);
        StorageDead(_76);
        StorageDead(_74);
        _0 = std::result::Result::<(u128, i128), error::ErrorCode>::Ok(move _73);
        StorageDead(_73);
        StorageDead(_55);
        StorageDead(_21);
        StorageDead(_17);
        goto -> bb50;
    }

    bb44: {
        StorageDead(_60);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb48;
    }

    bb45: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_37);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_21);
        StorageDead(_17);
        goto -> bb50;
    }

    bb49: {
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb50;
    }

    bb50: {
        return;
    }
}
