// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:466:1: 466:70>::get_best_bid_and_ask` after PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:466:1: 466:70>::get_best_bid_and_ask(_1: &SerumFulfillmentParams<'_, '_>) -> std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _2: serum_dex::state::Market<'_>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, serum_dex::state::Market<'_>>;
    let mut _4: std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode>;
    let mut _5: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let _6: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _7: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: serum_dex::state::Market<'_>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, serum_dex::critbit::Slab>>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, serum_dex::critbit::Slab>, error::ErrorCode>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, serum_dex::critbit::Slab>, serum_dex::error::DexError>;
    let mut _17: &serum_dex::state::MarketState;
    let _18: &serum_dex::state::MarketState;
    let mut _19: &serum_dex::state::Market<'_>;
    let mut _20: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _21: {closure@programs/drift/src/state/fulfillment_params/serum.rs:474:70: 474:73};
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, serum_dex::critbit::Slab>>;
    let mut _29: std::result::Result<std::cell::RefMut<'_, serum_dex::critbit::Slab>, error::ErrorCode>;
    let mut _30: std::result::Result<std::cell::RefMut<'_, serum_dex::critbit::Slab>, serum_dex::error::DexError>;
    let mut _31: &serum_dex::state::MarketState;
    let _32: &serum_dex::state::MarketState;
    let mut _33: &serum_dex::state::Market<'_>;
    let mut _34: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _35: {closure@programs/drift/src/state/fulfillment_params/serum.rs:479:70: 479:73};
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: &mut serum_dex::critbit::Slab;
    let mut _43: &mut serum_dex::critbit::Slab;
    let mut _44: &mut std::cell::RefMut<'_, serum_dex::critbit::Slab>;
    let mut _45: &mut serum_dex::critbit::Slab;
    let mut _46: &mut serum_dex::critbit::Slab;
    let mut _47: &mut std::cell::RefMut<'_, serum_dex::critbit::Slab>;
    let mut _48: &mut serum_dex::state::MarketState;
    let mut _49: &mut serum_dex::state::MarketState;
    let mut _50: &mut serum_dex::state::Market<'_>;
    let mut _52: std::option::Option<u32>;
    let mut _53: &serum_dex::critbit::Slab;
    let mut _54: isize;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &serum_dex::critbit::LeafNode>;
    let mut _58: std::result::Result<&serum_dex::critbit::LeafNode, error::ErrorCode>;
    let mut _59: std::option::Option<&serum_dex::critbit::LeafNode>;
    let mut _60: &serum_dex::critbit::AnyNode;
    let _61: &serum_dex::critbit::AnyNode;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &serum_dex::critbit::AnyNode>;
    let mut _63: std::result::Result<&serum_dex::critbit::AnyNode, error::ErrorCode>;
    let mut _64: std::option::Option<&serum_dex::critbit::AnyNode>;
    let mut _65: &serum_dex::critbit::Slab;
    let mut _66: u32;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _79: std::result::Result<u64, error::ErrorCode>;
    let mut _80: u64;
    let mut _81: std::num::NonZeroU64;
    let mut _82: &serum_dex::critbit::LeafNode;
    let mut _83: u64;
    let mut _84: u32;
    let mut _85: u64;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: u64;
    let mut _93: std::option::Option<u32>;
    let mut _94: &serum_dex::critbit::Slab;
    let mut _95: isize;
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &serum_dex::critbit::LeafNode>;
    let mut _99: std::result::Result<&serum_dex::critbit::LeafNode, error::ErrorCode>;
    let mut _100: std::option::Option<&serum_dex::critbit::LeafNode>;
    let mut _101: &serum_dex::critbit::AnyNode;
    let _102: &serum_dex::critbit::AnyNode;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &serum_dex::critbit::AnyNode>;
    let mut _104: std::result::Result<&serum_dex::critbit::AnyNode, error::ErrorCode>;
    let mut _105: std::option::Option<&serum_dex::critbit::AnyNode>;
    let mut _106: &serum_dex::critbit::Slab;
    let mut _107: u32;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _120: std::result::Result<u64, error::ErrorCode>;
    let mut _121: u64;
    let mut _122: std::num::NonZeroU64;
    let mut _123: &serum_dex::critbit::LeafNode;
    let mut _124: u64;
    let mut _125: u32;
    let mut _126: u64;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _132: u64;
    let mut _133: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _134: std::option::Option<u64>;
    let mut _135: std::option::Option<u64>;
    let mut _136: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _137: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _138: &mut serum_dex::critbit::Slab;
    let mut _139: &mut serum_dex::critbit::Slab;
    let mut _140: &mut serum_dex::state::MarketState;
    let mut _141: &mut serum_dex::state::MarketState;
    let mut _142: &mut serum_dex::critbit::Slab;
    let mut _143: &mut serum_dex::critbit::Slab;
    let mut _144: &mut serum_dex::state::MarketState;
    let mut _145: &mut serum_dex::state::MarketState;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    scope 1 {
        debug market => _2;
        let mut _13: std::cell::RefMut<'_, serum_dex::critbit::Slab>;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: std::cell::RefMut<'_, serum_dex::critbit::Slab>;
        scope 6 {
            debug bids => _13;
            let mut _27: std::cell::RefMut<'_, serum_dex::critbit::Slab>;
            let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _40: std::cell::RefMut<'_, serum_dex::critbit::Slab>;
            scope 11 {
                debug asks => _27;
                let _41: serum_dex::matching::OrderBookState<'_>;
                scope 16 {
                    debug order_book_state => _41;
                    let _51: std::option::Option<u64>;
                    let _55: u32;
                    scope 17 {
                        debug best_bid => _51;
                        let _92: std::option::Option<u64>;
                        let _96: u32;
                        scope 33 {
                            debug best_ask => _92;
                        }
                        scope 34 {
                            debug best_ask_h => _96;
                            let _97: &serum_dex::critbit::LeafNode;
                            let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _112: &serum_dex::critbit::AnyNode;
                            let _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _117: &serum_dex::critbit::LeafNode;
                            scope 35 {
                                debug best_ask_ref => _97;
                                let _118: u64;
                                let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _131: u64;
                                scope 44 {
                                    debug price => _118;
                                }
                                scope 45 {
                                    debug residual => _128;
                                    scope 46 {
                                    }
                                }
                                scope 47 {
                                    debug val => _131;
                                    scope 48 {
                                    }
                                }
                            }
                            scope 36 {
                                debug residual => _109;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug val => _112;
                                scope 39 {
                                }
                            }
                            scope 40 {
                                debug residual => _114;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug val => _117;
                                scope 43 {
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug best_bid_h => _55;
                        let _56: &serum_dex::critbit::LeafNode;
                        let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _71: &serum_dex::critbit::AnyNode;
                        let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _76: &serum_dex::critbit::LeafNode;
                        scope 19 {
                            debug best_bid_ref => _56;
                            let _77: u64;
                            let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _90: u64;
                            scope 28 {
                                debug price => _77;
                            }
                            scope 29 {
                                debug residual => _87;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _90;
                                scope 32 {
                                }
                            }
                        }
                        scope 20 {
                            debug residual => _68;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _71;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug residual => _73;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug val => _76;
                            scope 27 {
                            }
                        }
                    }
                }
            }
            scope 12 {
                debug residual => _37;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _40;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _23;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _26;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &(*_6);
        StorageDead(_7);
        _4 = SerumContext::<'_, '_>::load_serum_market(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _3 = <std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode> as Try>::branch(move _4) -> [return: bb3, unwind: bb86];
    }

    bb3: {
        StorageDead(_4);
        _8 = discriminant(_3);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_12);
        _12 = move ((_3 as Continue).0: serum_dex::state::Market<'_>);
        _2 = move _12;
        StorageDead(_12);
        _148 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_2;
        _18 = <serum_dex::state::Market<'_> as Deref>::deref(move _19) -> [return: bb8, unwind: bb85];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_9);
        _9 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb7, unwind: bb89];
    }

    bb7: {
        StorageDead(_11);
        StorageDead(_9);
        _146 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb81;
    }

    bb8: {
        _17 = &(*_18);
        StorageDead(_19);
        StorageLive(_20);
        _136 = deref_copy ((*_1).4: &anchor_lang::prelude::AccountInfo<'_>);
        _20 = &(*_136);
        _16 = MarketState::load_bids_mut(move _17, move _20) -> [return: bb9, unwind: bb85];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_17);
        StorageLive(_21);
        _21 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:474:70: 474:73};
        _15 = std::result::Result::<RefMut<'_, Slab>, DexError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:474:70: 474:73}>(move _16, move _21) -> [return: bb10, unwind: bb85];
    }

    bb10: {
        StorageDead(_21);
        StorageDead(_16);
        _14 = <std::result::Result<RefMut<'_, Slab>, error::ErrorCode> as Try>::branch(move _15) -> [return: bb11, unwind: bb85];
    }

    bb11: {
        StorageDead(_15);
        _22 = discriminant(_14);
        switchInt(move _22) -> [0: bb12, 1: bb13, otherwise: bb5];
    }

    bb12: {
        StorageLive(_26);
        _26 = move ((_14 as Continue).0: std::cell::RefMut<'_, serum_dex::critbit::Slab>);
        _13 = move _26;
        StorageDead(_26);
        _152 = discriminant(_14);
        StorageDead(_18);
        StorageDead(_14);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_2;
        _32 = <serum_dex::state::Market<'_> as Deref>::deref(move _33) -> [return: bb15, unwind: bb84];
    }

    bb13: {
        StorageLive(_23);
        _23 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb14, unwind: bb88];
    }

    bb14: {
        StorageDead(_25);
        StorageDead(_23);
        _150 = discriminant(_14);
        StorageDead(_18);
        StorageDead(_14);
        goto -> bb80;
    }

    bb15: {
        _31 = &(*_32);
        StorageDead(_33);
        StorageLive(_34);
        _137 = deref_copy ((*_1).5: &anchor_lang::prelude::AccountInfo<'_>);
        _34 = &(*_137);
        _30 = MarketState::load_asks_mut(move _31, move _34) -> [return: bb16, unwind: bb84];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_31);
        StorageLive(_35);
        _35 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:479:70: 479:73};
        _29 = std::result::Result::<RefMut<'_, Slab>, DexError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:479:70: 479:73}>(move _30, move _35) -> [return: bb17, unwind: bb84];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_30);
        _28 = <std::result::Result<RefMut<'_, Slab>, error::ErrorCode> as Try>::branch(move _29) -> [return: bb18, unwind: bb84];
    }

    bb18: {
        StorageDead(_29);
        _36 = discriminant(_28);
        switchInt(move _36) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        StorageLive(_40);
        _40 = move ((_28 as Continue).0: std::cell::RefMut<'_, serum_dex::critbit::Slab>);
        _27 = move _40;
        StorageDead(_40);
        _156 = discriminant(_28);
        StorageDead(_32);
        StorageDead(_28);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &mut _13;
        _43 = <RefMut<'_, Slab> as DerefMut>::deref_mut(move _44) -> [return: bb22, unwind: bb83];
    }

    bb20: {
        StorageLive(_37);
        _37 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb21, unwind: bb87];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_37);
        _154 = discriminant(_28);
        StorageDead(_32);
        StorageDead(_28);
        goto -> bb79;
    }

    bb22: {
        _42 = &mut (*_43);
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut _27;
        _46 = <RefMut<'_, Slab> as DerefMut>::deref_mut(move _47) -> [return: bb23, unwind: bb83];
    }

    bb23: {
        _45 = &mut (*_46);
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &mut _2;
        _49 = <serum_dex::state::Market<'_> as DerefMut>::deref_mut(move _50) -> [return: bb24, unwind: bb83];
    }

    bb24: {
        _48 = &mut (*_49);
        StorageDead(_50);
        _41 = OrderBookState::<'_> { bids: move _42, asks: move _45, market_state: move _48 };
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_43);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _138 = deref_copy (_41.0: &mut serum_dex::critbit::Slab);
        _53 = &(*_138);
        _52 = Slab::find_max(move _53) -> [return: bb25, unwind: bb83];
    }

    bb25: {
        StorageDead(_53);
        _54 = discriminant(_52);
        switchInt(move _54) -> [0: bb26, 1: bb27, otherwise: bb5];
    }

    bb26: {
        _51 = Option::<u64>::None;
        goto -> bb47;
    }

    bb27: {
        StorageLive(_55);
        _55 = ((_52 as Some).0: u32);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _139 = deref_copy (_41.0: &mut serum_dex::critbit::Slab);
        _65 = &(*_139);
        StorageLive(_66);
        _66 = _55;
        _64 = <Slab as SlabView<serum_dex::critbit::AnyNode>>::get(move _65, move _66) -> [return: bb28, unwind: bb83];
    }

    bb28: {
        StorageDead(_66);
        StorageDead(_65);
        _63 = <Option<&serum_dex::critbit::AnyNode> as SafeUnwrap>::safe_unwrap(move _64) -> [return: bb29, unwind: bb83];
    }

    bb29: {
        StorageDead(_64);
        _62 = <std::result::Result<&serum_dex::critbit::AnyNode, error::ErrorCode> as Try>::branch(move _63) -> [return: bb30, unwind: bb83];
    }

    bb30: {
        StorageDead(_63);
        _67 = discriminant(_62);
        switchInt(move _67) -> [0: bb31, 1: bb32, otherwise: bb5];
    }

    bb31: {
        StorageLive(_71);
        _71 = ((_62 as Continue).0: &serum_dex::critbit::AnyNode);
        _61 = _71;
        StorageDead(_71);
        _60 = &(*_61);
        _59 = serum_dex::critbit::AnyNode::as_leaf(move _60) -> [return: bb34, unwind: bb83];
    }

    bb32: {
        StorageLive(_68);
        _68 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb33, unwind: bb83];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb76;
    }

    bb34: {
        StorageDead(_60);
        _58 = <Option<&serum_dex::critbit::LeafNode> as SafeUnwrap>::safe_unwrap(move _59) -> [return: bb35, unwind: bb83];
    }

    bb35: {
        StorageDead(_59);
        _57 = <std::result::Result<&serum_dex::critbit::LeafNode, error::ErrorCode> as Try>::branch(move _58) -> [return: bb36, unwind: bb83];
    }

    bb36: {
        StorageDead(_58);
        _72 = discriminant(_57);
        switchInt(move _72) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_76);
        _76 = ((_57 as Continue).0: &serum_dex::critbit::LeafNode);
        _56 = _76;
        StorageDead(_76);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &(*_56);
        _81 = serum_dex::critbit::LeafNode::price(move _82) -> [return: bb40, unwind: bb83];
    }

    bb38: {
        StorageLive(_73);
        _73 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb39, unwind: bb83];
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_73);
        goto -> bb76;
    }

    bb40: {
        StorageDead(_82);
        _80 = NonZeroU64::get(move _81) -> [return: bb41, unwind: bb83];
    }

    bb41: {
        StorageDead(_81);
        StorageLive(_83);
        _140 = deref_copy (_41.2: &mut serum_dex::state::MarketState);
        _83 = ((*_140).17: u64);
        StorageLive(_84);
        _84 = ((*_1).14: u32);
        StorageLive(_85);
        _141 = deref_copy (_41.2: &mut serum_dex::state::MarketState);
        _85 = ((*_141).16: u64);
        _79 = calculate_price_from_serum_limit_price(move _80, move _83, move _84, move _85) -> [return: bb42, unwind: bb83];
    }

    bb42: {
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_80);
        _78 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _79) -> [return: bb43, unwind: bb83];
    }

    bb43: {
        StorageDead(_79);
        _86 = discriminant(_78);
        switchInt(move _86) -> [0: bb44, 1: bb45, otherwise: bb5];
    }

    bb44: {
        StorageLive(_90);
        _90 = ((_78 as Continue).0: u64);
        _77 = _90;
        StorageDead(_90);
        StorageDead(_78);
        StorageLive(_91);
        _91 = _77;
        _51 = Option::<u64>::Some(move _91);
        StorageDead(_91);
        StorageDead(_77);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb47;
    }

    bb45: {
        StorageLive(_87);
        _87 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb46, unwind: bb83];
    }

    bb46: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb77;
    }

    bb47: {
        StorageDead(_52);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _142 = deref_copy (_41.1: &mut serum_dex::critbit::Slab);
        _94 = &(*_142);
        _93 = Slab::find_min(move _94) -> [return: bb48, unwind: bb83];
    }

    bb48: {
        StorageDead(_94);
        _95 = discriminant(_93);
        switchInt(move _95) -> [0: bb49, 1: bb50, otherwise: bb5];
    }

    bb49: {
        _92 = Option::<u64>::None;
        goto -> bb70;
    }

    bb50: {
        StorageLive(_96);
        _96 = ((_93 as Some).0: u32);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _143 = deref_copy (_41.1: &mut serum_dex::critbit::Slab);
        _106 = &(*_143);
        StorageLive(_107);
        _107 = _96;
        _105 = <Slab as SlabView<serum_dex::critbit::AnyNode>>::get(move _106, move _107) -> [return: bb51, unwind: bb83];
    }

    bb51: {
        StorageDead(_107);
        StorageDead(_106);
        _104 = <Option<&serum_dex::critbit::AnyNode> as SafeUnwrap>::safe_unwrap(move _105) -> [return: bb52, unwind: bb83];
    }

    bb52: {
        StorageDead(_105);
        _103 = <std::result::Result<&serum_dex::critbit::AnyNode, error::ErrorCode> as Try>::branch(move _104) -> [return: bb53, unwind: bb83];
    }

    bb53: {
        StorageDead(_104);
        _108 = discriminant(_103);
        switchInt(move _108) -> [0: bb54, 1: bb55, otherwise: bb5];
    }

    bb54: {
        StorageLive(_112);
        _112 = ((_103 as Continue).0: &serum_dex::critbit::AnyNode);
        _102 = _112;
        StorageDead(_112);
        _101 = &(*_102);
        _100 = serum_dex::critbit::AnyNode::as_leaf(move _101) -> [return: bb57, unwind: bb83];
    }

    bb55: {
        StorageLive(_109);
        _109 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb56, unwind: bb83];
    }

    bb56: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb74;
    }

    bb57: {
        StorageDead(_101);
        _99 = <Option<&serum_dex::critbit::LeafNode> as SafeUnwrap>::safe_unwrap(move _100) -> [return: bb58, unwind: bb83];
    }

    bb58: {
        StorageDead(_100);
        _98 = <std::result::Result<&serum_dex::critbit::LeafNode, error::ErrorCode> as Try>::branch(move _99) -> [return: bb59, unwind: bb83];
    }

    bb59: {
        StorageDead(_99);
        _113 = discriminant(_98);
        switchInt(move _113) -> [0: bb60, 1: bb61, otherwise: bb5];
    }

    bb60: {
        StorageLive(_117);
        _117 = ((_98 as Continue).0: &serum_dex::critbit::LeafNode);
        _97 = _117;
        StorageDead(_117);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_98);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &(*_97);
        _122 = serum_dex::critbit::LeafNode::price(move _123) -> [return: bb63, unwind: bb83];
    }

    bb61: {
        StorageLive(_114);
        _114 = ((_98 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_116);
        _116 = _114;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _116) -> [return: bb62, unwind: bb83];
    }

    bb62: {
        StorageDead(_116);
        StorageDead(_114);
        goto -> bb74;
    }

    bb63: {
        StorageDead(_123);
        _121 = NonZeroU64::get(move _122) -> [return: bb64, unwind: bb83];
    }

    bb64: {
        StorageDead(_122);
        StorageLive(_124);
        _144 = deref_copy (_41.2: &mut serum_dex::state::MarketState);
        _124 = ((*_144).17: u64);
        StorageLive(_125);
        _125 = ((*_1).14: u32);
        StorageLive(_126);
        _145 = deref_copy (_41.2: &mut serum_dex::state::MarketState);
        _126 = ((*_145).16: u64);
        _120 = calculate_price_from_serum_limit_price(move _121, move _124, move _125, move _126) -> [return: bb65, unwind: bb83];
    }

    bb65: {
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_121);
        _119 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _120) -> [return: bb66, unwind: bb83];
    }

    bb66: {
        StorageDead(_120);
        _127 = discriminant(_119);
        switchInt(move _127) -> [0: bb67, 1: bb68, otherwise: bb5];
    }

    bb67: {
        StorageLive(_131);
        _131 = ((_119 as Continue).0: u64);
        _118 = _131;
        StorageDead(_131);
        StorageDead(_119);
        StorageLive(_132);
        _132 = _118;
        _92 = Option::<u64>::Some(move _132);
        StorageDead(_132);
        StorageDead(_118);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb70;
    }

    bb68: {
        StorageLive(_128);
        _128 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb69, unwind: bb83];
    }

    bb69: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb75;
    }

    bb70: {
        StorageDead(_93);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _51;
        StorageLive(_135);
        _135 = _92;
        _133 = (move _134, move _135);
        StorageDead(_135);
        StorageDead(_134);
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Ok(move _133);
        StorageDead(_133);
        StorageDead(_92);
        StorageDead(_51);
        StorageDead(_41);
        drop(_27) -> [return: bb71, unwind: bb84];
    }

    bb71: {
        StorageDead(_27);
        drop(_13) -> [return: bb72, unwind: bb85];
    }

    bb72: {
        StorageDead(_13);
        drop(_2) -> [return: bb73, unwind: bb86];
    }

    bb73: {
        StorageDead(_2);
        goto -> bb82;
    }

    bb74: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_98);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb78;
    }

    bb76: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_51);
        StorageDead(_41);
        drop(_27) -> [return: bb79, unwind: bb84];
    }

    bb79: {
        StorageDead(_27);
        drop(_13) -> [return: bb80, unwind: bb85];
    }

    bb80: {
        StorageDead(_13);
        drop(_2) -> [return: bb81, unwind: bb86];
    }

    bb81: {
        StorageDead(_2);
        goto -> bb82;
    }

    bb82: {
        return;
    }

    bb83 (cleanup): {
        drop(_27) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_13) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_2) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        resume;
    }

    bb87 (cleanup): {
        _158 = discriminant(_28);
        goto -> bb84;
    }

    bb88 (cleanup): {
        _159 = discriminant(_14);
        goto -> bb85;
    }

    bb89 (cleanup): {
        _160 = discriminant(_3);
        goto -> bb86;
    }
}
