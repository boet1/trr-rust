digraph Mir_0_18328 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;User as anchor_lang::AccountDeserialize&gt;::try_deserialize_unchecked(_1: &amp;ReErased mut &amp;ReErased [u8]) -&gt; std::result::Result&lt;state::user::User, anchor_lang::error::Error&gt;<br align="left"/>let _2: &amp;ReErased [u8];<br align="left"/>let _3: &amp;ReErased [u8];<br align="left"/>let _4: &amp;ReErased [u8];<br align="left"/>let mut _5: &amp;ReErased [u8];<br align="left"/>let mut _6: std::ops::RangeFrom&lt;usize&gt;;<br align="left"/>let _7: &amp;ReErased state::user::User;<br align="left"/>let mut _8: &amp;ReErased [u8];<br align="left"/>let mut _9: state::user::User;<br align="left"/>let mut _10: &amp;ReErased [u8];<br align="left"/>debug buf =&gt; _1;<br align="left"/>debug data =&gt; _2;<br align="left"/>debug account =&gt; _7;<br align="left"/>>;
    bb0__0_18328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_10 = deref_copy (*_1)<br/>_5 = &amp;(*_10)<br/>StorageLive(_6)<br/>_6 = RangeFrom::&lt;usize&gt; { start: const 8_usize }<br/></td></tr><tr><td align="left">_4 = &lt;[u8] as Index&lt;RangeFrom&lt;usize&gt;&gt;&gt;::index(move _5, move _6)</td></tr></table>>];
    bb1__0_18328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>_3 = &amp;(*_4)<br/>_2 = &amp;(*_3)<br/>StorageDead(_3)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;(*_2)<br/></td></tr><tr><td align="left">_7 = bytemuck::from_bytes::&lt;User&gt;(move _8)</td></tr></table>>];
    bb2__0_18328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_9)<br/>_9 = (*_7)<br/>_0 = std::result::Result::&lt;User, anchor_lang::error::Error&gt;::Ok(move _9)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_18328 -> bb1__0_18328 [label="return"];
    bb1__0_18328 -> bb2__0_18328 [label="return"];
}
