// MIR for `determine_perp_fee_tier` before PreCodegen

fn determine_perp_fee_tier(_1: &UserStats, _2: &state::state::FeeStructure) -> std::result::Result<state::state::FeeTier, error::ErrorCode> {
    debug user_stats => _1;
    debug fee_structure => _2;
    let mut _0: std::result::Result<state::state::FeeTier, error::ErrorCode>;
    let _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _5: std::result::Result<u64, error::ErrorCode>;
    let mut _6: &state::user::UserStats;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _11: u64;
    let _14: ();
    let mut _15: std::ops::Range<usize>;
    let mut _16: std::ops::Range<usize>;
    let mut _18: ();
    let _19: ();
    let mut _20: std::option::Option<usize>;
    let mut _21: &mut std::ops::Range<usize>;
    let mut _22: &mut std::ops::Range<usize>;
    let mut _23: isize;
    let mut _24: !;
    let mut _26: bool;
    let mut _27: u64;
    let mut _28: u64;
    let mut _29: [u64; 5];
    let _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    let mut _33: !;
    let mut _34: usize;
    let _36: ();
    let mut _37: std::ops::Range<usize>;
    let mut _38: std::ops::Range<usize>;
    let _40: ();
    let mut _41: std::option::Option<usize>;
    let mut _42: &mut std::ops::Range<usize>;
    let mut _43: &mut std::ops::Range<usize>;
    let mut _44: isize;
    let mut _45: !;
    let mut _47: bool;
    let mut _48: u64;
    let mut _49: u64;
    let mut _50: [u64; 5];
    let _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    let mut _54: !;
    let mut _55: usize;
    let mut _57: [u32; 6];
    let _58: usize;
    let mut _59: usize;
    let mut _60: bool;
    let _62: usize;
    let mut _63: usize;
    let mut _64: bool;
    let _65: ();
    let mut _66: bool;
    let mut _67: u32;
    let mut _68: std::option::Option<u32>;
    let mut _69: isize;
    let mut _71: u32;
    let mut _72: u32;
    let mut _73: u32;
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _75: std::result::Result<u32, error::ErrorCode>;
    let mut _76: u32;
    let mut _77: u32;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _83: u32;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _85: std::result::Result<u32, error::ErrorCode>;
    let mut _86: u32;
    let mut _87: u32;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _89: std::result::Result<u32, error::ErrorCode>;
    let mut _90: u32;
    let mut _91: u32;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: u32;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _104: std::result::Result<u32, error::ErrorCode>;
    let mut _105: u32;
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _107: std::result::Result<u32, error::ErrorCode>;
    let mut _108: u32;
    let mut _109: u32;
    let mut _110: u32;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: u32;
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _123: std::result::Result<u32, error::ErrorCode>;
    let mut _124: u32;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _126: std::result::Result<u32, error::ErrorCode>;
    let mut _127: u32;
    let mut _128: u32;
    let mut _129: u32;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: state::state::FeeTier;
    scope 1 {
        debug total_30d_volume => _3;
        let _12: u64;
        scope 6 {
            debug staked_gov_token_amount => _12;
            let mut _13: usize;
            scope 7 {
                debug fee_tier_index => _13;
                let mut _17: std::ops::Range<usize>;
                let mut _35: usize;
                scope 8 {
                    debug iter => _17;
                    let _25: usize;
                    scope 9 {
                        debug i => _25;
                    }
                }
                scope 10 {
                    debug stake_benefit_index => _35;
                    let mut _39: std::ops::Range<usize>;
                    let _56: u32;
                    scope 11 {
                        debug iter => _39;
                        let _46: usize;
                        scope 12 {
                            debug i => _46;
                        }
                    }
                    scope 13 {
                        debug stake_benefit => _56;
                        let mut _61: state::state::FeeTier;
                        scope 14 {
                            debug tier => _61;
                            let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _115: u32;
                            let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _120: u32;
                            let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _134: u32;
                            let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _139: u32;
                            scope 15 {
                                debug div_scalar => _70;
                                let _70: u32;
                                let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _82: u32;
                                let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _96: u32;
                                let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _101: u32;
                                scope 16 {
                                    debug residual => _79;
                                    scope 17 {
                                    }
                                }
                                scope 18 {
                                    debug val => _82;
                                    scope 19 {
                                    }
                                }
                                scope 20 {
                                    debug residual => _93;
                                    scope 21 {
                                    }
                                }
                                scope 22 {
                                    debug val => _96;
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug residual => _98;
                                    scope 25 {
                                    }
                                }
                                scope 26 {
                                    debug val => _101;
                                    scope 27 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _112;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _115;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug residual => _117;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _120;
                                scope 35 {
                                }
                            }
                            scope 36 {
                                debug residual => _131;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug val => _134;
                                scope 39 {
                                }
                            }
                            scope 40 {
                                debug residual => _136;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug val => _139;
                                scope 43 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = UserStats::get_total_30d_volume(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: u64);
        _3 = _11;
        StorageDead(_11);
        StorageDead(_4);
        StorageLive(_12);
        _12 = ((*_1).23: u64);
        StorageLive(_13);
        _13 = const _;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _15 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_10);
        _10 = _8;
        _0 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        goto -> bb81;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = move _15;
        goto -> bb8;
    }

    bb8: {
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &mut _17;
        _21 = &mut (*_22);
        _20 = <std::ops::Range<usize> as Iterator>::next(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb11, 1: bb10, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = ((_20 as Some).0: usize);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _3;
        StorageLive(_28);
        StorageLive(_29);
        _29 = const _;
        StorageLive(_30);
        _30 = _25;
        _31 = Len(_29);
        _32 = Lt(_30, _31);
        assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb12, unwind continue];
    }

    bb11: {
        _14 = const ();
        goto -> bb15;
    }

    bb12: {
        _28 = _29[_30];
        _26 = Lt(move _27, move _28);
        switchInt(move _26) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_34);
        _34 = _25;
        _13 = move _34;
        StorageDead(_34);
        _14 = const ();
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        _19 = const ();
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        _18 = const ();
        goto -> bb8;
    }

    bb15: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_35);
        _35 = const _;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _37 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_38);
        StorageLive(_39);
        _39 = move _37;
        goto -> bb17;
    }

    bb17: {
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &mut _39;
        _42 = &mut (*_43);
        _41 = <std::ops::Range<usize> as Iterator>::next(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb20, 1: bb19, otherwise: bb4];
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_41 as Some).0: usize);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _12;
        StorageLive(_49);
        StorageLive(_50);
        _50 = const _;
        StorageLive(_51);
        _51 = _46;
        _52 = Len(_50);
        _53 = Lt(_51, _52);
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> [success: bb21, unwind continue];
    }

    bb20: {
        _36 = const ();
        goto -> bb24;
    }

    bb21: {
        _49 = _50[_51];
        _47 = Lt(move _48, move _49);
        switchInt(move _47) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_55);
        _55 = _46;
        _35 = move _55;
        StorageDead(_55);
        _36 = const ();
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _40 = const ();
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        _18 = const ();
        goto -> bb17;
    }

    bb24: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_56);
        StorageLive(_57);
        _57 = const _;
        StorageLive(_58);
        _58 = _35;
        _59 = Len(_57);
        _60 = Lt(_58, _59);
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb25, unwind continue];
    }

    bb25: {
        _56 = _57[_58];
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _13;
        _63 = Len(((*_2).0: [state::state::FeeTier; 10]));
        _64 = Lt(_62, _63);
        assert(move _64, "index out of bounds: the length is {} but the index is {}", move _63, _62) -> [success: bb26, unwind continue];
    }

    bb26: {
        _61 = ((*_2).0: [state::state::FeeTier; 10])[_62];
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _56;
        _66 = Gt(move _67, const 0_u32);
        switchInt(move _66) -> [0: bb74, otherwise: bb27];
    }

    bb27: {
        StorageDead(_67);
        StorageLive(_68);
        switchInt(_56) -> [5: bb29, 10: bb30, 20: bb31, otherwise: bb28];
    }

    bb28: {
        _68 = Option::<u32>::None;
        goto -> bb32;
    }

    bb29: {
        _68 = Option::<u32>::Some(const 20_u32);
        goto -> bb32;
    }

    bb30: {
        _68 = Option::<u32>::Some(const 10_u32);
        goto -> bb32;
    }

    bb31: {
        _68 = Option::<u32>::Some(const 5_u32);
        goto -> bb32;
    }

    bb32: {
        _69 = discriminant(_68);
        switchInt(move _69) -> [1: bb33, otherwise: bb50];
    }

    bb33: {
        StorageLive(_70);
        _70 = ((_68 as Some).0: u32);
        StorageLive(_71);
        StorageLive(_72);
        _72 = (_61.0: u32);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = (_61.0: u32);
        StorageLive(_77);
        _77 = _70;
        _75 = <u32 as SafeMath>::safe_div_ceil(move _76, move _77) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_76);
        _74 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _75) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_75);
        _78 = discriminant(_74);
        switchInt(move _78) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_82);
        _82 = ((_74 as Continue).0: u32);
        _73 = _82;
        StorageDead(_82);
        _71 = core::num::<impl u32>::saturating_sub(move _72, move _73) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_79);
        _79 = ((_74 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_74);
        goto -> bb79;
    }

    bb39: {
        StorageDead(_73);
        StorageDead(_72);
        (_61.0: u32) = move _71;
        StorageDead(_71);
        StorageDead(_74);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = (_61.2: u32);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = (_61.2: u32);
        StorageLive(_91);
        _91 = _70;
        _89 = <u32 as SafeMath>::safe_div(move _90, move _91) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_91);
        StorageDead(_90);
        _88 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _89) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_89);
        _92 = discriminant(_88);
        switchInt(move _92) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_96);
        _96 = ((_88 as Continue).0: u32);
        _87 = _96;
        StorageDead(_96);
        _85 = <u32 as SafeMath>::safe_add(move _86, move _87) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_93);
        _93 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb78;
    }

    bb45: {
        StorageDead(_87);
        StorageDead(_86);
        _84 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _85) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_85);
        _97 = discriminant(_84);
        switchInt(move _97) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_101);
        _101 = ((_84 as Continue).0: u32);
        _83 = _101;
        StorageDead(_101);
        (_61.2: u32) = move _83;
        StorageDead(_83);
        StorageDead(_88);
        StorageDead(_84);
        _65 = const ();
        StorageDead(_70);
        goto -> bb73;
    }

    bb48: {
        StorageLive(_98);
        _98 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_100);
        StorageDead(_98);
        goto -> bb78;
    }

    bb50: {
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = (_61.0: u32);
        StorageLive(_109);
        StorageLive(_110);
        _110 = _56;
        _109 = core::num::<impl u32>::saturating_sub(const 100_u32, move _110) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_110);
        _107 = <u32 as SafeMath>::safe_mul(move _108, move _109) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_109);
        StorageDead(_108);
        _106 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _107) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_107);
        _111 = discriminant(_106);
        switchInt(move _111) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_115);
        _115 = ((_106 as Continue).0: u32);
        _105 = _115;
        StorageDead(_115);
        _104 = <u32 as SafeMath>::safe_div_ceil(move _105, const 100_u32) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_112);
        _112 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb77;
    }

    bb57: {
        StorageDead(_105);
        _103 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _104) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_104);
        _116 = discriminant(_103);
        switchInt(move _116) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_120);
        _120 = ((_103 as Continue).0: u32);
        _102 = _120;
        StorageDead(_120);
        (_61.0: u32) = move _102;
        StorageDead(_102);
        StorageDead(_106);
        StorageDead(_103);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = (_61.2: u32);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _56;
        _128 = core::num::<impl u32>::saturating_add(const 100_u32, move _129) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_117);
        _117 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_119);
        StorageDead(_117);
        goto -> bb77;
    }

    bb62: {
        StorageDead(_129);
        _126 = <u32 as SafeMath>::safe_mul(move _127, move _128) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_128);
        StorageDead(_127);
        _125 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _126) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_126);
        _130 = discriminant(_125);
        switchInt(move _130) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_134);
        _134 = ((_125 as Continue).0: u32);
        _124 = _134;
        StorageDead(_134);
        _123 = <u32 as SafeMath>::safe_div(move _124, const 100_u32) -> [return: bb68, unwind continue];
    }

    bb66: {
        StorageLive(_131);
        _131 = ((_125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb76;
    }

    bb68: {
        StorageDead(_124);
        _122 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _123) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_123);
        _135 = discriminant(_122);
        switchInt(move _135) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_139);
        _139 = ((_122 as Continue).0: u32);
        _121 = _139;
        StorageDead(_139);
        (_61.2: u32) = move _121;
        StorageDead(_121);
        StorageDead(_125);
        StorageDead(_122);
        _65 = const ();
        goto -> bb73;
    }

    bb71: {
        StorageLive(_136);
        _136 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_138);
        StorageDead(_136);
        goto -> bb76;
    }

    bb73: {
        StorageDead(_68);
        goto -> bb75;
    }

    bb74: {
        StorageDead(_67);
        _65 = const ();
        goto -> bb75;
    }

    bb75: {
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_140);
        _140 = _61;
        _0 = std::result::Result::<state::state::FeeTier, error::ErrorCode>::Ok(move _140);
        StorageDead(_140);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_35);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_3);
        goto -> bb82;
    }

    bb76: {
        StorageDead(_121);
        StorageDead(_125);
        StorageDead(_122);
        goto -> bb80;
    }

    bb77: {
        StorageDead(_102);
        StorageDead(_106);
        StorageDead(_103);
        goto -> bb80;
    }

    bb78: {
        StorageDead(_83);
        StorageDead(_88);
        StorageDead(_84);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_70);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_35);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_3);
        goto -> bb82;
    }

    bb82: {
        return;
    }
}
