// MIR for `derive_signed_msg_user_pda` before PreCodegen

fn derive_signed_msg_user_pda(_1: &anchor_lang::prelude::Pubkey) -> std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode> {
    debug user_account_pubkey => _1;
    let mut _0: std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode>;
    let _2: anchor_lang::prelude::Pubkey;
    let mut _3: (anchor_lang::prelude::Pubkey, u8);
    let mut _4: &[&[u8]];
    let mut _5: &[&[u8]; 2];
    let _6: &[&[u8]; 2];
    let _7: [&[u8]; 2];
    let mut _8: &[u8];
    let _9: &[u8];
    let mut _10: &str;
    let _11: &str;
    let mut _12: &[u8];
    let _13: &[u8];
    let mut _14: &anchor_lang::prelude::Pubkey;
    let mut _15: &anchor_lang::prelude::Pubkey;
    let _16: &anchor_lang::prelude::Pubkey;
    let _17: &anchor_lang::prelude::Pubkey;
    let mut _18: anchor_lang::prelude::Pubkey;
    scope 1 {
        debug signed_msg_pubkey => _2;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const _;
        _10 = &(*_11);
        _9 = core::str::<impl str>::as_bytes(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &(*_9);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_1);
        _13 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = &(*_13);
        StorageDead(_14);
        _7 = [move _8, move _12];
        StorageDead(_12);
        StorageDead(_8);
        _6 = &_7;
        _5 = &(*_6);
        _4 = move _5 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = const {alloc266: &anchor_lang::prelude::Pubkey};
        _16 = &(*_17);
        _15 = &(*_16);
        _3 = anchor_lang::prelude::Pubkey::find_program_address(move _4, move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        StorageDead(_4);
        StorageLive(_2);
        _2 = (_3.0: anchor_lang::prelude::Pubkey);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageLive(_18);
        _18 = _2;
        _0 = std::result::Result::<anchor_lang::prelude::Pubkey, error::ErrorCode>::Ok(move _18);
        StorageDead(_18);
        StorageDead(_2);
        return;
    }
}

alloc266 (static: ID, size: 32, align: 1) {
    0x00 │ 09 54 db be 9e c9 60 c9 8a 7a 29 3f e2 13 36 96 │ .T....`..z)?..6.
    0x10 │ 6f e1 80 d1 51 ae 4b 81 79 56 1f 89 85 4a 53 f6 │ o...Q.K.yV...JS.
}
