// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:4986:10: 4986:18>::exit` before PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:4986:10: 4986:18>::exit(_1: &admin::DeleteInitializedSpotMarket<'_>, _2: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug program_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Signer<'_>;
    let _8: &anchor_lang::prelude::Signer<'_>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: ();
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _18: std::result::Result<(), anchor_lang::error::Error>;
    let mut _19: std::result::Result<(), anchor_lang::error::Error>;
    let mut _20: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let _21: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let mut _23: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _28: ();
    let _29: ();
    let _30: &anchor_lang::prelude::Signer<'_>;
    let _31: ();
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _33: std::result::Result<(), anchor_lang::error::Error>;
    let mut _34: std::result::Result<(), anchor_lang::error::Error>;
    let mut _35: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _36: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _37: anchor_lang::prelude::AccountInfo<'_>;
    let mut _38: &anchor_lang::prelude::Signer<'_>;
    let mut _39: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _45: ();
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _47: std::result::Result<(), anchor_lang::error::Error>;
    let mut _48: std::result::Result<(), anchor_lang::error::Error>;
    let mut _49: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let _50: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _51: &anchor_lang::prelude::Pubkey;
    let mut _52: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _57: ();
    let _58: ();
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _60: std::result::Result<(), anchor_lang::error::Error>;
    let mut _61: std::result::Result<(), anchor_lang::error::Error>;
    let mut _62: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let _63: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _64: &anchor_lang::prelude::Pubkey;
    let mut _65: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _66: isize;
    let _67: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _70: ();
    let mut _71: ();
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _25;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _28;
        scope 8 {
        }
    }
    scope 9 {
        debug admin => _30;
        let _41: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _44: ();
        scope 10 {
            debug residual => _41;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _44;
            scope 13 {
            }
        }
    }
    scope 14 {
        debug residual => _54;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _57;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _67;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _70;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _7 = &(*_8);
        StorageLive(_9);
        _9 = &(*_2);
        _6 = <anchor_lang::prelude::Signer<'_> as anchor_lang::AccountsExit<'_>>::exit(move _7, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        _10 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _5 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _6, move _10) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        StorageDead(_5);
        _11 = discriminant(_4);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_4 as Continue).0: ());
        _3 = _15;
        StorageDead(_15);
        _72 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _20 = &(*_21);
        StorageLive(_22);
        _22 = &(*_2);
        _19 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::AccountsExit<'_>>::exit(move _20, move _22) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb7, unwind: bb39];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _90 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb33;
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_23);
        _23 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _18 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _19, move _23) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_19);
        _17 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _18) -> [return: bb10, unwind: bb34];
    }

    bb10: {
        StorageDead(_18);
        _24 = discriminant(_17);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_17 as Continue).0: ());
        _16 = _28;
        StorageDead(_28);
        _74 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _35 = &(*_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_30);
        _37 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _38) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_25);
        _25 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _27) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        _88 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb33;
    }

    bb14: {
        StorageDead(_38);
        _34 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as AccountsClose<'_>>::close(move _35, move _37) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_39);
        _39 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _33 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _34, move _39) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        StorageDead(_39);
        StorageDead(_34);
        _32 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _33) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        StorageDead(_33);
        _40 = discriminant(_32);
        switchInt(move _40) -> [0: bb18, 1: bb19, otherwise: bb5];
    }

    bb18: {
        StorageLive(_44);
        _44 = ((_32 as Continue).0: ());
        _31 = _44;
        StorageDead(_44);
        _76 = discriminant(_32);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_31);
        _29 = const ();
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &((*_1).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _49 = &(*_50);
        StorageLive(_51);
        _51 = &(*_2);
        _48 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::AccountsExit<'_>>::exit(move _49, move _51) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_41);
        _41 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _43) -> [return: bb20, unwind: bb37];
    }

    bb20: {
        StorageDead(_43);
        StorageDead(_41);
        _86 = discriminant(_32);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb33;
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_52);
        _52 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _47 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _48, move _52) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        StorageDead(_52);
        StorageDead(_48);
        _46 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _47) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        StorageDead(_47);
        _53 = discriminant(_46);
        switchInt(move _53) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_57);
        _57 = ((_46 as Continue).0: ());
        _45 = _57;
        StorageDead(_57);
        _78 = discriminant(_46);
        StorageDead(_50);
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &((*_1).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _62 = &(*_63);
        StorageLive(_64);
        _64 = &(*_2);
        _61 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::AccountsExit<'_>>::exit(move _62, move _64) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_54);
        _54 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_56);
        _56 = move _54;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _56) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_54);
        _84 = discriminant(_46);
        StorageDead(_50);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb33;
    }

    bb27: {
        StorageDead(_64);
        StorageDead(_62);
        StorageLive(_65);
        _65 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _60 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _61, move _65) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_61);
        _59 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _60) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        StorageDead(_60);
        _66 = discriminant(_59);
        switchInt(move _66) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_70);
        _70 = ((_59 as Continue).0: ());
        _58 = _70;
        StorageDead(_70);
        _80 = discriminant(_59);
        StorageDead(_63);
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_71);
        _71 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _71);
        StorageDead(_71);
        goto -> bb33;
    }

    bb31: {
        StorageLive(_67);
        _67 = move ((_59 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_69);
        _69 = move _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _69) -> [return: bb32, unwind: bb35];
    }

    bb32: {
        StorageDead(_69);
        StorageDead(_67);
        _82 = discriminant(_59);
        StorageDead(_63);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        _92 = discriminant(_59);
        goto -> bb34;
    }

    bb36 (cleanup): {
        _93 = discriminant(_46);
        goto -> bb34;
    }

    bb37 (cleanup): {
        _94 = discriminant(_32);
        goto -> bb34;
    }

    bb38 (cleanup): {
        _95 = discriminant(_17);
        goto -> bb34;
    }

    bb39 (cleanup): {
        _96 = discriminant(_4);
        goto -> bb34;
    }
}
