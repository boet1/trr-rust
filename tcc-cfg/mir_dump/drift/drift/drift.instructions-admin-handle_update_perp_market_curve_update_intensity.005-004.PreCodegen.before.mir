// MIR for `admin::handle_update_perp_market_curve_update_intensity` before PreCodegen

fn admin::handle_update_perp_market_curve_update_intensity(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::HotAdminUpdatePerpMarket<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug curve_update_intensity => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _15: std::result::Result<(), error::ErrorCode>;
    let mut _16: bool;
    let mut _17: u8;
    let mut _18: ();
    let _19: error::ErrorCode;
    let _20: ();
    let mut _21: &str;
    let _22: &str;
    let mut _23: &std::string::String;
    let _24: &std::string::String;
    let _25: std::string::String;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[&str; 2];
    let _30: &[&str; 2];
    let _31: [&str; 2];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let mut _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let mut _37: &error::ErrorCode;
    let _38: &error::ErrorCode;
    let _39: ();
    let mut _40: &str;
    let _41: &str;
    let mut _42: &std::string::String;
    let _43: &std::string::String;
    let _44: std::string::String;
    let mut _46: std::fmt::Arguments<'_>;
    let mut _47: &[&str];
    let mut _48: &[&str; 1];
    let _49: &[&str; 1];
    let _50: [&str; 1];
    let mut _51: error::ErrorCode;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _56: ();
    let _57: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _58: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _60: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _61: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _62: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _63: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _64: isize;
    let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _68: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _69: ();
    let mut _70: &str;
    let _71: &str;
    let mut _72: &std::string::String;
    let _73: &std::string::String;
    let _74: std::string::String;
    let mut _76: std::fmt::Arguments<'_>;
    let mut _77: &[&str];
    let mut _78: &[&str; 1];
    let _79: &[&str; 1];
    let _80: [&str; 1];
    let mut _81: &[core::fmt::rt::Argument<'_>];
    let mut _82: &[core::fmt::rt::Argument<'_>; 1];
    let _83: &[core::fmt::rt::Argument<'_>; 1];
    let _84: [core::fmt::rt::Argument<'_>; 1];
    let mut _85: core::fmt::rt::Argument<'_>;
    let mut _86: &u16;
    let _87: &u16;
    let _88: &state::perp_market::PerpMarket;
    let mut _89: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _90: ();
    let mut _91: &str;
    let _92: &str;
    let mut _93: &std::string::String;
    let _94: &std::string::String;
    let _95: std::string::String;
    let mut _97: std::fmt::Arguments<'_>;
    let mut _98: &[&str];
    let mut _99: &[&str; 2];
    let _100: &[&str; 2];
    let _101: [&str; 2];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let mut _103: &[core::fmt::rt::Argument<'_>; 2];
    let _104: &[core::fmt::rt::Argument<'_>; 2];
    let _105: [core::fmt::rt::Argument<'_>; 2];
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &u8;
    let _108: &u8;
    let _109: &state::perp_market::PerpMarket;
    let mut _110: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &u8;
    let _113: &u8;
    let mut _114: u8;
    let mut _115: &mut state::perp_market::PerpMarket;
    let mut _116: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _117: ();
    let mut _122: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>;
    let mut _123: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _19;
        let _26: std::string::String;
        let _45: std::string::String;
        let mut _120: &[&str; 1];
        let mut _121: &[&str; 2];
        scope 6 {
            debug res => _26;
        }
        scope 7 {
            debug res => _45;
        }
    }
    scope 8 {
        debug residual => _53;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _56;
        scope 11 {
        }
    }
    scope 12 {
        debug perp_market => _57;
        let _75: std::string::String;
        let _96: std::string::String;
        let mut _118: &[&str; 2];
        let mut _119: &[&str; 1];
        scope 17 {
            debug res => _75;
        }
        scope 18 {
            debug res => _96;
        }
    }
    scope 13 {
        debug residual => _65;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _68;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _122 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>);
        _7 = &((*_122).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb54];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _124 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _2;
        _16 = Le(move _17, const 200_u8);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb56];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _130 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb48;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        _18 = ();
        _15 = std::result::Result::<(), error::ErrorCode>::Ok(move _18);
        StorageDead(_18);
        goto -> bb20;
    }

    bb8: {
        StorageDead(_17);
        StorageLive(_19);
        _19 = error::ErrorCode::DefaultError;
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _121 = const _;
        _30 = &(*_121);
        _29 = &(*_30);
        _28 = move _29 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &_19;
        _37 = &(*_38);
        _36 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _37) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_37);
        _35 = [move _36];
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = move _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_33);
        _27 = Arguments::<'_>::new_v1(move _28, move _32) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_32);
        StorageDead(_28);
        _26 = format(move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_27);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_30);
        _25 = move _26;
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = <String as Deref>::deref(move _23) -> [return: bb12, unwind: bb53];
    }

    bb12: {
        _21 = &(*_22);
        StorageDead(_23);
        _20 = solana_program::log::sol_log(move _21) -> [return: bb13, unwind: bb53];
    }

    bb13: {
        StorageDead(_21);
        drop(_25) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _120 = const _;
        _49 = &(*_120);
        _48 = &(*_49);
        _47 = move _48 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_48);
        _46 = Arguments::<'_>::new_const(move _47) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_47);
        _45 = format(move _46) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_46);
        StorageDead(_49);
        _44 = move _45;
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = <String as Deref>::deref(move _42) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        _40 = &(*_41);
        StorageDead(_42);
        _39 = solana_program::log::sol_log(move _40) -> [return: bb18, unwind: bb52];
    }

    bb18: {
        StorageDead(_40);
        drop(_44) -> [return: bb19, unwind: bb54];
    }

    bb19: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_51);
        _51 = _19;
        _15 = std::result::Result::<(), error::ErrorCode>::Err(move _51);
        StorageDead(_51);
        StorageDead(_19);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_16);
        _14 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _15) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_15);
        _52 = discriminant(_14);
        switchInt(move _52) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_56);
        _56 = ((_14 as Continue).0: ());
        _13 = _56;
        StorageDead(_56);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _123 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>);
        _62 = &((*_123).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _61 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _62) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_53);
        _53 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb48;
    }

    bb25: {
        StorageDead(_62);
        StorageLive(_63);
        _63 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _60 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _61, move _63) -> [return: bb26, unwind: bb54];
    }

    bb26: {
        StorageDead(_63);
        StorageDead(_61);
        _59 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _60) -> [return: bb27, unwind: bb54];
    }

    bb27: {
        StorageDead(_60);
        _64 = discriminant(_59);
        switchInt(move _64) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_68);
        _68 = move ((_59 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _58 = move _68;
        StorageDead(_68);
        _57 = &mut _58;
        _128 = discriminant(_59);
        StorageDead(_59);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _119 = const _;
        _79 = &(*_119);
        _78 = &(*_79);
        _77 = move _78 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_78);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(*_57);
        _88 = <RefMut<'_, PerpMarket> as Deref>::deref(move _89) -> [return: bb31, unwind: bb51];
    }

    bb29: {
        StorageLive(_65);
        _65 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        StorageDead(_67);
        StorageDead(_65);
        _126 = discriminant(_59);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb48;
    }

    bb31: {
        StorageDead(_89);
        _87 = &((*_88).21: u16);
        _86 = &(*_87);
        _85 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _86) -> [return: bb32, unwind: bb51];
    }

    bb32: {
        StorageDead(_86);
        _84 = [move _85];
        StorageDead(_85);
        _83 = &_84;
        _82 = &(*_83);
        _81 = move _82 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_82);
        _76 = Arguments::<'_>::new_v1(move _77, move _81) -> [return: bb33, unwind: bb51];
    }

    bb33: {
        StorageDead(_81);
        StorageDead(_77);
        _75 = format(move _76) -> [return: bb34, unwind: bb51];
    }

    bb34: {
        StorageDead(_76);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_79);
        _74 = move _75;
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = <String as Deref>::deref(move _72) -> [return: bb35, unwind: bb50];
    }

    bb35: {
        _70 = &(*_71);
        StorageDead(_72);
        _69 = solana_program::log::sol_log(move _70) -> [return: bb36, unwind: bb50];
    }

    bb36: {
        StorageDead(_70);
        drop(_74) -> [return: bb37, unwind: bb51];
    }

    bb37: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_69);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _118 = const _;
        _100 = &(*_118);
        _99 = &(*_100);
        _98 = move _99 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &(*_57);
        _109 = <RefMut<'_, PerpMarket> as Deref>::deref(move _110) -> [return: bb38, unwind: bb51];
    }

    bb38: {
        StorageDead(_110);
        _108 = &(((*_109).1: state::perp_market::AMM).70: u8);
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _107) -> [return: bb39, unwind: bb51];
    }

    bb39: {
        StorageDead(_107);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_2;
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _112) -> [return: bb40, unwind: bb51];
    }

    bb40: {
        StorageDead(_112);
        _105 = [move _106, move _111];
        StorageDead(_111);
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = move _103 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_103);
        _97 = Arguments::<'_>::new_v1(move _98, move _102) -> [return: bb41, unwind: bb51];
    }

    bb41: {
        StorageDead(_102);
        StorageDead(_98);
        _96 = format(move _97) -> [return: bb42, unwind: bb51];
    }

    bb42: {
        StorageDead(_97);
        StorageDead(_113);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        _95 = move _96;
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = <String as Deref>::deref(move _93) -> [return: bb43, unwind: bb49];
    }

    bb43: {
        _91 = &(*_92);
        StorageDead(_93);
        _90 = solana_program::log::sol_log(move _91) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        StorageDead(_91);
        drop(_95) -> [return: bb45, unwind: bb51];
    }

    bb45: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_114);
        _114 = _2;
        StorageLive(_115);
        StorageLive(_116);
        _116 = &mut (*_57);
        _115 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _116) -> [return: bb46, unwind: bb51];
    }

    bb46: {
        StorageDead(_116);
        (((*_115).1: state::perp_market::AMM).70: u8) = move _114;
        StorageDead(_114);
        StorageDead(_115);
        StorageLive(_117);
        _117 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _117);
        StorageDead(_117);
        drop(_58) -> [return: bb47, unwind: bb54];
    }

    bb47: {
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb48;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_95) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_74) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_58) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_44) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_25) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        resume;
    }

    bb55 (cleanup): {
        _132 = discriminant(_59);
        goto -> bb54;
    }

    bb56 (cleanup): {
        _133 = discriminant(_4);
        goto -> bb54;
    }
}
