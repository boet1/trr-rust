// MIR for `fulfill_spot_order_with_match` after PreCodegen

fn fulfill_spot_order_with_match(_1: &mut SpotMarket, _2: &mut SpotMarket, _3: &mut User, _4: &mut UserStats, _5: usize, _6: &anchor_lang::prelude::Pubkey, _7: &mut User, _8: &mut Option<&mut UserStats>, _9: usize, _10: &anchor_lang::prelude::Pubkey, _11: Option<&mut User>, _12: Option<&mut UserStats>, _13: &anchor_lang::prelude::Pubkey, _14: i64, _15: u64, _16: &mut OracleMap<'_>, _17: &state::state::FeeStructure) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug base_market => _1;
    debug quote_market => _2;
    debug taker => _3;
    debug taker_stats => _4;
    debug taker_order_index => _5;
    debug taker_key => _6;
    debug maker => _7;
    debug maker_stats => _8;
    debug maker_order_index => _9;
    debug maker_key => _10;
    debug filler => _11;
    debug filler_stats => _12;
    debug filler_key => _13;
    debug now => _14;
    debug slot => _15;
    debug oracle_map => _16;
    debug fee_structure => _17;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let _18: ();
    let mut _19: bool;
    let mut _20: &state::user::Order;
    let _21: &state::user::Order;
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: &state::user::Order;
    let _26: &state::user::Order;
    let _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: !;
    let mut _31: (u64, u64);
    let _32: u16;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _37: &state::oracle::OraclePriceData;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _39: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _40: &mut state::oracle_map::OracleMap<'_>;
    let mut _41: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _42: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _43: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _44: &state::spot_market::SpotMarket;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: std::option::Option<u64>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<u64>>;
    let mut _53: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _54: &state::user::Order;
    let _55: usize;
    let mut _56: usize;
    let mut _57: bool;
    let mut _58: std::option::Option<i64>;
    let mut _59: i64;
    let mut _60: std::option::Option<u64>;
    let mut _61: u64;
    let mut _62: u64;
    let mut _63: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: (u64, u64);
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _75: std::result::Result<usize, error::ErrorCode>;
    let mut _76: &state::user::User;
    let mut _77: u16;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _85: std::result::Result<i128, error::ErrorCode>;
    let mut _86: &state::user::SpotPosition;
    let _87: usize;
    let mut _88: usize;
    let mut _89: bool;
    let mut _90: &state::spot_market::SpotMarket;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _98: std::result::Result<u64, error::ErrorCode>;
    let mut _99: &state::user::Order;
    let _100: usize;
    let mut _101: usize;
    let mut _102: bool;
    let mut _103: std::option::Option<i64>;
    let mut _104: i64;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _106: std::result::Result<i64, error::ErrorCode>;
    let mut _107: i128;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _113: u64;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _120: usize;
    let mut _121: usize;
    let mut _122: bool;
    let _124: usize;
    let mut _125: usize;
    let mut _126: bool;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _129: std::result::Result<u64, error::ErrorCode>;
    let mut _130: &state::user::Order;
    let _131: usize;
    let mut _132: usize;
    let mut _133: bool;
    let mut _134: std::option::Option<i64>;
    let mut _135: i64;
    let mut _136: std::option::Option<u64>;
    let mut _137: u64;
    let mut _138: u64;
    let mut _139: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _146: usize;
    let mut _147: usize;
    let mut _148: bool;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _151: std::result::Result<usize, error::ErrorCode>;
    let mut _152: &state::user::User;
    let mut _153: u16;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _161: std::result::Result<i128, error::ErrorCode>;
    let mut _162: &state::user::SpotPosition;
    let _163: usize;
    let mut _164: usize;
    let mut _165: bool;
    let mut _166: &state::spot_market::SpotMarket;
    let mut _167: isize;
    let mut _169: !;
    let mut _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _174: std::result::Result<u64, error::ErrorCode>;
    let mut _175: &state::user::Order;
    let _176: usize;
    let mut _177: usize;
    let mut _178: bool;
    let mut _179: std::option::Option<i64>;
    let mut _180: i64;
    let mut _181: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _182: std::result::Result<i64, error::ErrorCode>;
    let mut _183: i128;
    let mut _184: isize;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _189: u64;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _196: controller::position::PositionDirection;
    let mut _197: u64;
    let mut _198: u64;
    let _199: ();
    let mut _200: bool;
    let mut _201: !;
    let _202: ();
    let mut _203: &str;
    let _204: &str;
    let mut _205: &std::string::String;
    let _206: &std::string::String;
    let _207: std::string::String;
    let mut _209: std::fmt::Arguments<'_>;
    let mut _210: &[&str];
    let mut _211: &[&str; 2];
    let _212: &[&str; 2];
    let _213: [&str; 2];
    let mut _214: &[core::fmt::rt::Argument<'_>];
    let mut _215: &[core::fmt::rt::Argument<'_>; 2];
    let _216: &[core::fmt::rt::Argument<'_>; 2];
    let _217: [core::fmt::rt::Argument<'_>; 2];
    let mut _218: core::fmt::rt::Argument<'_>;
    let mut _219: &u64;
    let _220: &u64;
    let mut _221: core::fmt::rt::Argument<'_>;
    let mut _222: &u64;
    let _223: &u64;
    let mut _224: (u64, u64);
    let mut _227: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _228: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _229: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _230: &state::user::User;
    let mut _231: usize;
    let mut _232: &state::spot_market::SpotMarket;
    let mut _233: &state::spot_market::SpotMarket;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _240: isize;
    let mut _243: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _244: std::result::Result<u64, error::ErrorCode>;
    let mut _245: u64;
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _247: std::result::Result<u64, error::ErrorCode>;
    let mut _248: u128;
    let mut _249: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _250: std::result::Result<u128, error::ErrorCode>;
    let mut _251: u128;
    let mut _252: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _253: std::result::Result<u128, error::ErrorCode>;
    let mut _254: u128;
    let mut _255: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _256: std::result::Result<u128, error::ErrorCode>;
    let mut _257: u64;
    let mut _258: isize;
    let mut _260: !;
    let mut _261: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _263: u128;
    let mut _264: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _265: std::result::Result<u128, error::ErrorCode>;
    let mut _266: u64;
    let mut _267: state::spot_market::SpotMarket;
    let mut _268: isize;
    let mut _270: !;
    let mut _271: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _273: isize;
    let mut _275: !;
    let mut _276: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _278: u128;
    let mut _279: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _280: std::result::Result<u128, error::ErrorCode>;
    let mut _281: u64;
    let mut _282: isize;
    let mut _284: !;
    let mut _285: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _287: isize;
    let mut _289: !;
    let mut _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _292: isize;
    let mut _294: !;
    let mut _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _297: u64;
    let mut _298: isize;
    let mut _300: !;
    let mut _301: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _303: u64;
    let mut _304: u64;
    let mut _305: isize;
    let mut _307: u64;
    let mut _308: u64;
    let mut _311: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _312: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _313: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _314: &state::user::User;
    let mut _315: usize;
    let mut _316: &state::spot_market::SpotMarket;
    let mut _317: &state::spot_market::SpotMarket;
    let mut _318: isize;
    let mut _320: !;
    let mut _321: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _324: isize;
    let mut _327: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _328: std::result::Result<u64, error::ErrorCode>;
    let mut _329: u64;
    let mut _330: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _331: std::result::Result<u64, error::ErrorCode>;
    let mut _332: u128;
    let mut _333: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _334: std::result::Result<u128, error::ErrorCode>;
    let mut _335: u128;
    let mut _336: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _337: std::result::Result<u128, error::ErrorCode>;
    let mut _338: u128;
    let mut _339: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _340: std::result::Result<u128, error::ErrorCode>;
    let mut _341: u64;
    let mut _342: isize;
    let mut _344: !;
    let mut _345: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _347: u128;
    let mut _348: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _349: std::result::Result<u128, error::ErrorCode>;
    let mut _350: u64;
    let mut _351: state::spot_market::SpotMarket;
    let mut _352: isize;
    let mut _354: !;
    let mut _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _357: isize;
    let mut _359: !;
    let mut _360: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _362: u128;
    let mut _363: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _364: std::result::Result<u128, error::ErrorCode>;
    let mut _365: u64;
    let mut _366: isize;
    let mut _368: !;
    let mut _369: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _371: isize;
    let mut _373: !;
    let mut _374: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _376: isize;
    let mut _378: !;
    let mut _379: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _381: u64;
    let mut _382: isize;
    let mut _384: !;
    let mut _385: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _387: u64;
    let mut _388: u64;
    let mut _389: isize;
    let mut _391: u64;
    let mut _392: u64;
    let mut _395: (u64, u64);
    let mut _396: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _397: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _398: u64;
    let mut _399: u64;
    let mut _400: u64;
    let mut _401: u32;
    let mut _402: controller::position::PositionDirection;
    let mut _403: isize;
    let mut _405: !;
    let mut _406: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _408: ();
    let mut _409: bool;
    let mut _410: u64;
    let mut _411: !;
    let mut _412: (u64, u64);
    let mut _414: state::spot_market::SpotMarket;
    let _415: ();
    let mut _416: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _417: std::result::Result<(), error::ErrorCode>;
    let mut _418: u64;
    let mut _419: u64;
    let mut _420: u64;
    let mut _421: controller::position::PositionDirection;
    let mut _422: u64;
    let mut _423: isize;
    let mut _425: !;
    let mut _426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _428: ();
    let mut _429: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _430: std::result::Result<(), error::ErrorCode>;
    let mut _431: u64;
    let mut _432: u64;
    let mut _433: u64;
    let mut _434: controller::position::PositionDirection;
    let mut _435: u64;
    let mut _436: isize;
    let mut _438: !;
    let mut _439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _442: bool;
    let mut _443: &std::option::Option<&mut state::user::User>;
    let mut _444: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _445: std::result::Result<u64, error::ErrorCode>;
    let mut _446: u64;
    let mut _447: controller::position::PositionDirection;
    let mut _448: i64;
    let mut _449: isize;
    let mut _451: !;
    let mut _452: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _458: math::fees::FillFees;
    let mut _459: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::fees::FillFees>;
    let mut _460: std::result::Result<math::fees::FillFees, error::ErrorCode>;
    let mut _461: &state::user::UserStats;
    let mut _462: &std::option::Option<&mut state::user::UserStats>;
    let mut _463: u64;
    let mut _464: &state::state::FeeStructure;
    let mut _465: u64;
    let mut _466: u64;
    let mut _467: u64;
    let mut _468: &std::option::Option<&mut state::user::UserStats>;
    let _469: &std::option::Option<&mut state::user::UserStats>;
    let _470: std::option::Option<&mut state::user::UserStats>;
    let mut _471: &state::user::MarketType;
    let _472: &state::user::MarketType;
    let _473: state::user::MarketType;
    let mut _474: i16;
    let mut _475: isize;
    let mut _477: !;
    let mut _478: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _480: ();
    let mut _481: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _482: std::result::Result<(), error::ErrorCode>;
    let mut _483: u128;
    let mut _484: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _485: std::result::Result<u128, error::ErrorCode>;
    let mut _486: u64;
    let mut _487: isize;
    let mut _489: !;
    let mut _490: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _492: &state::spot_market::SpotBalanceType;
    let _493: &state::spot_market::SpotBalanceType;
    let _494: state::spot_market::SpotBalanceType;
    let mut _495: &state::user::Order;
    let _496: usize;
    let mut _497: usize;
    let mut _498: bool;
    let mut _499: state::user::AssetType;
    let mut _500: &mut state::spot_market::SpotMarket;
    let mut _501: &mut state::user::SpotPosition;
    let mut _502: &mut state::user::SpotPosition;
    let _503: usize;
    let mut _504: usize;
    let mut _505: bool;
    let mut _506: std::option::Option<u128>;
    let mut _507: isize;
    let mut _509: !;
    let mut _510: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _513: &controller::position::PositionDirection;
    let _514: usize;
    let mut _515: usize;
    let mut _516: bool;
    let mut _517: isize;
    let mut _518: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _519: std::result::Result<u64, error::ErrorCode>;
    let mut _520: u64;
    let mut _521: u64;
    let mut _522: isize;
    let mut _524: !;
    let mut _525: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _527: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _528: std::result::Result<u64, error::ErrorCode>;
    let mut _529: u64;
    let mut _530: u64;
    let mut _531: isize;
    let mut _533: !;
    let mut _534: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _536: ();
    let mut _537: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _538: std::result::Result<(), error::ErrorCode>;
    let mut _539: u128;
    let mut _540: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _541: std::result::Result<u128, error::ErrorCode>;
    let mut _542: u64;
    let mut _543: isize;
    let mut _545: !;
    let mut _546: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _548: &state::spot_market::SpotBalanceType;
    let _549: &state::spot_market::SpotBalanceType;
    let _550: state::spot_market::SpotBalanceType;
    let mut _551: &state::user::Order;
    let _552: usize;
    let mut _553: usize;
    let mut _554: bool;
    let mut _555: state::user::AssetType;
    let mut _556: &mut state::spot_market::SpotMarket;
    let mut _557: &mut state::user::SpotPosition;
    let mut _558: &mut state::user::SpotPosition;
    let mut _559: &mut state::user::User;
    let mut _560: std::option::Option<u128>;
    let mut _561: u128;
    let mut _562: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _563: std::result::Result<u128, error::ErrorCode>;
    let mut _564: u64;
    let mut _565: isize;
    let mut _567: !;
    let mut _568: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _570: isize;
    let mut _572: !;
    let mut _573: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _575: ();
    let mut _576: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _577: std::result::Result<(), error::ErrorCode>;
    let mut _578: &mut state::user::User;
    let mut _579: i64;
    let mut _580: i64;
    let mut _581: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _582: std::result::Result<i64, error::ErrorCode>;
    let mut _583: u64;
    let mut _584: isize;
    let mut _586: !;
    let mut _587: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _589: bool;
    let mut _590: isize;
    let mut _592: !;
    let mut _593: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _595: ();
    let mut _596: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _597: std::result::Result<(), error::ErrorCode>;
    let mut _598: &mut state::user::Order;
    let mut _599: &mut state::user::Order;
    let _600: usize;
    let mut _601: usize;
    let mut _602: bool;
    let mut _603: u64;
    let mut _604: u64;
    let mut _605: isize;
    let mut _607: !;
    let mut _608: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _611: usize;
    let mut _612: usize;
    let mut _613: bool;
    let mut _615: &state::user::Order;
    let _616: usize;
    let mut _617: usize;
    let mut _618: bool;
    let _619: ();
    let mut _620: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _621: std::result::Result<(), error::ErrorCode>;
    let mut _622: &mut state::user::SpotPosition;
    let mut _623: &mut state::user::SpotPosition;
    let _624: usize;
    let mut _625: usize;
    let mut _626: bool;
    let mut _627: &controller::position::PositionDirection;
    let _628: &controller::position::PositionDirection;
    let mut _629: u64;
    let mut _630: bool;
    let mut _631: isize;
    let mut _633: !;
    let mut _634: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _636: ();
    let mut _637: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _638: std::result::Result<(), error::ErrorCode>;
    let mut _639: &mut state::user::UserStats;
    let mut _640: u8;
    let mut _641: u64;
    let mut _642: i64;
    let mut _643: isize;
    let mut _645: !;
    let mut _646: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _648: ();
    let mut _649: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _650: std::result::Result<(), error::ErrorCode>;
    let mut _651: &mut state::user::UserStats;
    let mut _652: u64;
    let mut _653: isize;
    let mut _655: !;
    let mut _656: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _658: ();
    let mut _659: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _660: std::result::Result<(), error::ErrorCode>;
    let mut _661: u128;
    let mut _662: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _663: std::result::Result<u128, error::ErrorCode>;
    let mut _664: u64;
    let mut _665: isize;
    let mut _667: !;
    let mut _668: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _670: &state::spot_market::SpotBalanceType;
    let _671: &state::spot_market::SpotBalanceType;
    let _672: state::spot_market::SpotBalanceType;
    let mut _673: &state::user::Order;
    let _674: usize;
    let mut _675: usize;
    let mut _676: bool;
    let mut _677: state::user::AssetType;
    let mut _678: &mut state::spot_market::SpotMarket;
    let mut _679: &mut state::user::SpotPosition;
    let mut _680: &mut state::user::SpotPosition;
    let _681: usize;
    let mut _682: usize;
    let mut _683: bool;
    let mut _684: std::option::Option<u128>;
    let mut _685: isize;
    let mut _687: !;
    let mut _688: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _691: &controller::position::PositionDirection;
    let _692: usize;
    let mut _693: usize;
    let mut _694: bool;
    let mut _695: isize;
    let mut _696: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _697: std::result::Result<u64, error::ErrorCode>;
    let mut _698: u64;
    let mut _699: u64;
    let mut _700: isize;
    let mut _702: !;
    let mut _703: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _705: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _706: std::result::Result<u64, error::ErrorCode>;
    let mut _707: u64;
    let mut _708: u64;
    let mut _709: isize;
    let mut _711: !;
    let mut _712: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _714: ();
    let mut _715: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _716: std::result::Result<(), error::ErrorCode>;
    let mut _717: u128;
    let mut _718: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _719: std::result::Result<u128, error::ErrorCode>;
    let mut _720: u64;
    let mut _721: isize;
    let mut _723: !;
    let mut _724: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _726: &state::spot_market::SpotBalanceType;
    let _727: &state::spot_market::SpotBalanceType;
    let _728: state::spot_market::SpotBalanceType;
    let mut _729: &state::user::Order;
    let _730: usize;
    let mut _731: usize;
    let mut _732: bool;
    let mut _733: state::user::AssetType;
    let mut _734: &mut state::spot_market::SpotMarket;
    let mut _735: &mut state::user::SpotPosition;
    let mut _736: &mut state::user::SpotPosition;
    let mut _737: &mut state::user::User;
    let mut _738: std::option::Option<u128>;
    let mut _739: u128;
    let mut _740: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _741: std::result::Result<u128, error::ErrorCode>;
    let mut _742: u64;
    let mut _743: isize;
    let mut _745: !;
    let mut _746: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _748: isize;
    let mut _750: !;
    let mut _751: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _753: ();
    let mut _754: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _755: std::result::Result<(), error::ErrorCode>;
    let mut _756: &mut state::user::User;
    let mut _757: i64;
    let mut _758: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _759: std::result::Result<i64, error::ErrorCode>;
    let mut _760: u64;
    let mut _761: isize;
    let mut _763: !;
    let mut _764: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _766: isize;
    let mut _768: !;
    let mut _769: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _771: ();
    let mut _772: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _773: std::result::Result<(), error::ErrorCode>;
    let mut _774: &mut state::user::Order;
    let mut _775: &mut state::user::Order;
    let _776: usize;
    let mut _777: usize;
    let mut _778: bool;
    let mut _779: u64;
    let mut _780: u64;
    let mut _781: isize;
    let mut _783: !;
    let mut _784: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _787: usize;
    let mut _788: usize;
    let mut _789: bool;
    let mut _791: &state::user::Order;
    let _792: usize;
    let mut _793: usize;
    let mut _794: bool;
    let _795: ();
    let mut _796: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _797: std::result::Result<(), error::ErrorCode>;
    let mut _798: &mut state::user::SpotPosition;
    let mut _799: &mut state::user::SpotPosition;
    let _800: usize;
    let mut _801: usize;
    let mut _802: bool;
    let mut _803: &controller::position::PositionDirection;
    let _804: &controller::position::PositionDirection;
    let mut _805: u64;
    let mut _806: bool;
    let mut _807: isize;
    let mut _809: !;
    let mut _810: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _812: ();
    let mut _813: isize;
    let _815: ();
    let mut _816: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _817: std::result::Result<(), error::ErrorCode>;
    let mut _818: &mut state::user::UserStats;
    let mut _819: u8;
    let mut _820: u64;
    let mut _821: i64;
    let mut _822: isize;
    let mut _824: !;
    let mut _825: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _827: ();
    let mut _828: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _829: std::result::Result<(), error::ErrorCode>;
    let mut _830: &mut state::user::UserStats;
    let mut _831: u64;
    let mut _832: isize;
    let mut _834: !;
    let mut _835: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _837: ();
    let mut _838: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _839: std::result::Result<(), error::ErrorCode>;
    let mut _840: &mut state::user::UserStats;
    let mut _841: u8;
    let mut _842: u64;
    let mut _843: i64;
    let mut _844: isize;
    let mut _846: !;
    let mut _847: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _849: ();
    let mut _850: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _851: std::result::Result<(), error::ErrorCode>;
    let mut _852: &mut state::user::UserStats;
    let mut _853: u64;
    let mut _854: isize;
    let mut _856: !;
    let mut _857: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _859: ();
    let mut _860: (std::option::Option<&mut state::user::User>, std::option::Option<&mut state::user::UserStats>);
    let mut _861: std::option::Option<&mut state::user::User>;
    let mut _862: std::option::Option<&mut state::user::UserStats>;
    let mut _863: isize;
    let mut _864: isize;
    let _867: ();
    let mut _868: bool;
    let mut _869: u64;
    let _870: ();
    let mut _871: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _872: std::result::Result<(), error::ErrorCode>;
    let mut _873: u128;
    let mut _874: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _875: std::result::Result<u128, error::ErrorCode>;
    let mut _876: u64;
    let mut _877: isize;
    let mut _879: !;
    let mut _880: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _882: &state::spot_market::SpotBalanceType;
    let _883: &state::spot_market::SpotBalanceType;
    let _884: state::spot_market::SpotBalanceType;
    let mut _885: &mut state::spot_market::SpotMarket;
    let mut _886: &mut dyn state::spot_market::SpotBalance;
    let mut _887: &mut state::user::SpotPosition;
    let mut _888: &mut state::user::SpotPosition;
    let mut _889: &mut state::user::User;
    let mut _890: isize;
    let mut _892: !;
    let mut _893: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _895: ();
    let mut _896: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _897: std::result::Result<(), error::ErrorCode>;
    let mut _898: &mut state::user::User;
    let mut _899: i64;
    let mut _900: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _901: std::result::Result<i64, error::ErrorCode>;
    let mut _902: u64;
    let mut _903: isize;
    let mut _905: !;
    let mut _906: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _908: isize;
    let mut _910: !;
    let mut _911: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _913: ();
    let mut _914: &mut state::user::User;
    let mut _915: u64;
    let _916: ();
    let mut _917: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _918: std::result::Result<(), error::ErrorCode>;
    let mut _919: &mut state::user::UserStats;
    let mut _920: u64;
    let mut _921: i64;
    let mut _922: isize;
    let mut _924: !;
    let mut _925: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _927: u128;
    let mut _928: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _929: std::result::Result<u128, error::ErrorCode>;
    let mut _930: u128;
    let mut _931: u128;
    let mut _932: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _933: std::result::Result<u128, error::ErrorCode>;
    let mut _934: i64;
    let mut _935: isize;
    let mut _937: !;
    let mut _938: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _940: isize;
    let mut _942: !;
    let mut _943: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _945: ();
    let mut _946: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _947: std::result::Result<(), error::ErrorCode>;
    let mut _948: u128;
    let mut _949: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _950: std::result::Result<u128, error::ErrorCode>;
    let mut _951: i64;
    let mut _952: isize;
    let mut _954: !;
    let mut _955: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _957: &state::spot_market::SpotBalanceType;
    let _958: &state::spot_market::SpotBalanceType;
    let _959: state::spot_market::SpotBalanceType;
    let mut _960: &mut state::spot_market::SpotMarket;
    let mut _961: &mut dyn state::spot_market::SpotBalance;
    let mut _962: &mut state::perp_market::PoolBalance;
    let mut _963: &mut state::perp_market::PoolBalance;
    let mut _964: isize;
    let mut _966: !;
    let mut _967: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _971: u64;
    let mut _972: std::option::Option<u64>;
    let mut _973: std::option::Option<u64>;
    let mut _974: u64;
    let mut _975: std::option::Option<u64>;
    let mut _977: bool;
    let mut _978: &state::user::Order;
    let _979: usize;
    let mut _980: usize;
    let mut _981: bool;
    let mut _983: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::events::OrderActionRecord>;
    let mut _984: std::result::Result<state::events::OrderActionRecord, error::ErrorCode>;
    let mut _985: i64;
    let mut _986: state::events::OrderAction;
    let mut _987: state::events::OrderActionExplanation;
    let mut _988: u16;
    let _989: usize;
    let mut _990: usize;
    let mut _991: bool;
    let mut _992: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _993: anchor_lang::prelude::Pubkey;
    let mut _994: std::option::Option<u64>;
    let mut _995: u64;
    let mut _996: std::option::Option<u64>;
    let mut _997: u64;
    let mut _998: std::option::Option<u64>;
    let mut _999: u64;
    let mut _1000: std::option::Option<u64>;
    let mut _1001: u64;
    let mut _1002: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1003: std::result::Result<u64, error::ErrorCode>;
    let mut _1004: u64;
    let mut _1005: isize;
    let mut _1007: !;
    let mut _1008: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1010: std::option::Option<u64>;
    let mut _1011: u64;
    let mut _1012: std::option::Option<u64>;
    let mut _1013: u64;
    let mut _1014: std::option::Option<u64>;
    let mut _1015: std::option::Option<i64>;
    let mut _1016: std::option::Option<u64>;
    let mut _1017: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _1018: anchor_lang::prelude::Pubkey;
    let mut _1019: std::option::Option<state::user::Order>;
    let mut _1020: state::user::Order;
    let _1021: usize;
    let mut _1022: usize;
    let mut _1023: bool;
    let mut _1024: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _1025: anchor_lang::prelude::Pubkey;
    let mut _1026: std::option::Option<state::user::Order>;
    let mut _1027: state::user::Order;
    let _1028: usize;
    let mut _1029: usize;
    let mut _1030: bool;
    let mut _1031: i64;
    let mut _1032: &state::oracle::OraclePriceData;
    let mut _1033: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _1034: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _1035: &mut state::oracle_map::OracleMap<'_>;
    let mut _1036: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1037: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1038: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _1039: &state::spot_market::SpotMarket;
    let mut _1040: isize;
    let mut _1042: !;
    let mut _1043: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1045: std::option::Option<u64>;
    let mut _1046: std::option::Option<u64>;
    let mut _1047: std::option::Option<u64>;
    let mut _1048: std::option::Option<u64>;
    let mut _1049: std::option::Option<u64>;
    let mut _1050: isize;
    let mut _1052: !;
    let mut _1053: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1055: ();
    let mut _1056: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1057: std::result::Result<(), error::ErrorCode>;
    let mut _1058: state::events::OrderActionRecord;
    let mut _1059: isize;
    let mut _1061: !;
    let mut _1062: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1064: ();
    let mut _1065: bool;
    let mut _1066: u64;
    let mut _1067: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1068: std::result::Result<u64, error::ErrorCode>;
    let mut _1069: &state::user::Order;
    let _1070: usize;
    let mut _1071: usize;
    let mut _1072: bool;
    let mut _1073: std::option::Option<i64>;
    let mut _1074: isize;
    let mut _1076: !;
    let mut _1077: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1079: ();
    let mut _1080: &mut state::user::User;
    let mut _1081: bool;
    let mut _1082: &state::user::Order;
    let _1083: usize;
    let mut _1084: usize;
    let mut _1085: bool;
    let mut _1086: state::user::OrderStatus;
    let _1087: usize;
    let mut _1088: usize;
    let mut _1089: bool;
    let _1090: usize;
    let mut _1091: usize;
    let mut _1092: bool;
    let mut _1093: (u8, bool);
    let _1094: ();
    let mut _1095: bool;
    let mut _1096: u64;
    let mut _1097: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1098: std::result::Result<u64, error::ErrorCode>;
    let mut _1099: &state::user::Order;
    let _1100: usize;
    let mut _1101: usize;
    let mut _1102: bool;
    let mut _1103: std::option::Option<i64>;
    let mut _1104: isize;
    let mut _1106: !;
    let mut _1107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1109: ();
    let mut _1110: &mut state::user::User;
    let mut _1111: bool;
    let mut _1112: &state::user::Order;
    let _1113: usize;
    let mut _1114: usize;
    let mut _1115: bool;
    let mut _1116: state::user::OrderStatus;
    let _1117: usize;
    let mut _1118: usize;
    let mut _1119: bool;
    let _1120: usize;
    let mut _1121: usize;
    let mut _1122: bool;
    let mut _1123: (u8, bool);
    let mut _1124: (u64, u64);
    let mut _1125: u64;
    let mut _1126: u64;
    let mut _1132: &mut state::user::UserStats;
    let mut _1133: &mut state::user::UserStats;
    scope 1 {
        debug market_index => _32;
        let _36: i64;
        let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _49: &state::oracle::OraclePriceData;
        scope 2 {
            debug oracle_price => _36;
            let _50: u64;
            let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _68: std::option::Option<u64>;
            let _70: u64;
            scope 7 {
                debug taker_price => _50;
                let _73: usize;
                let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _82: usize;
                scope 13 {
                    debug taker_spot_position_index => _73;
                    let _83: i128;
                    let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _95: i128;
                    scope 18 {
                        debug taker_token_amount => _83;
                        let _96: u64;
                        let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _112: i64;
                        let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _118: u64;
                        scope 23 {
                            debug taker_base_asset_amount => _96;
                            let _119: u64;
                            scope 32 {
                                debug taker_order_slot => _119;
                                let _123: controller::position::PositionDirection;
                                scope 33 {
                                    debug taker_direction => _123;
                                    let _127: u64;
                                    let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _144: u64;
                                    scope 34 {
                                        debug maker_price => _127;
                                        let _145: controller::position::PositionDirection;
                                        scope 39 {
                                            debug maker_direction => _145;
                                            let _149: usize;
                                            let _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _158: usize;
                                            scope 40 {
                                                debug maker_spot_position_index => _149;
                                                let _159: i128;
                                                let _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _171: i128;
                                                scope 45 {
                                                    debug maker_token_amount => _159;
                                                    let _172: u64;
                                                    let _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _188: i64;
                                                    let _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _194: u64;
                                                    scope 50 {
                                                        debug maker_base_asset_amount => _172;
                                                        let _195: bool;
                                                        scope 59 {
                                                            debug orders_cross => _195;
                                                            let _208: std::string::String;
                                                            let _225: std::option::Option<u64>;
                                                            let _226: std::option::Option<u64>;
                                                            let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _238: (std::option::Option<u64>, std::option::Option<u64>);
                                                            let mut _1131: &[&str; 2];
                                                            scope 60 {
                                                                debug res => _208;
                                                            }
                                                            scope 61 {
                                                                debug taker_max_base_asset_amount => _225;
                                                                debug taker_max_quote_asset_amount => _226;
                                                                let _239: u64;
                                                                scope 66 {
                                                                    debug taker_base_asset_amount => _239;
                                                                    let _309: std::option::Option<u64>;
                                                                    let _310: std::option::Option<u64>;
                                                                    let _319: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _322: (std::option::Option<u64>, std::option::Option<u64>);
                                                                    scope 98 {
                                                                        debug maker_max_base_asset_amount => _309;
                                                                        debug maker_max_quote_asset_amount => _310;
                                                                        let _323: u64;
                                                                        scope 103 {
                                                                            debug maker_base_asset_amount => _323;
                                                                            let _393: u64;
                                                                            let _394: u64;
                                                                            let _404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _407: (u64, u64);
                                                                            scope 135 {
                                                                                debug base_asset_amount => _393;
                                                                                debug quote_asset_amount => _394;
                                                                                let _413: u64;
                                                                                scope 140 {
                                                                                    debug base_precision => _413;
                                                                                    let _424: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _427: ();
                                                                                    let _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _440: ();
                                                                                    let _441: u64;
                                                                                    let _450: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _453: u64;
                                                                                    scope 141 {
                                                                                        debug residual => _424;
                                                                                        scope 142 {
                                                                                        }
                                                                                    }
                                                                                    scope 143 {
                                                                                        debug val => _427;
                                                                                        scope 144 {
                                                                                        }
                                                                                    }
                                                                                    scope 145 {
                                                                                        debug residual => _437;
                                                                                        scope 146 {
                                                                                        }
                                                                                    }
                                                                                    scope 147 {
                                                                                        debug val => _440;
                                                                                        scope 148 {
                                                                                        }
                                                                                    }
                                                                                    scope 149 {
                                                                                        debug filler_multiplier => _441;
                                                                                        let _454: u64;
                                                                                        let _455: u64;
                                                                                        let _456: u64;
                                                                                        let _457: i64;
                                                                                        let _476: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _479: math::fees::FillFees;
                                                                                        let mut _1129: &state::user::MarketType;
                                                                                        let mut _1130: &std::option::Option<&mut state::user::UserStats>;
                                                                                        scope 154 {
                                                                                            debug taker_fee => _454;
                                                                                            debug maker_rebate => _455;
                                                                                            debug filler_reward => _456;
                                                                                            debug fee_to_market => _457;
                                                                                            let _488: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _491: u128;
                                                                                            let _508: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _511: ();
                                                                                            let _512: u64;
                                                                                            let _523: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _526: u64;
                                                                                            let _532: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _535: u64;
                                                                                            scope 159 {
                                                                                                debug residual => _488;
                                                                                                scope 160 {
                                                                                                }
                                                                                            }
                                                                                            scope 161 {
                                                                                                debug val => _491;
                                                                                                scope 162 {
                                                                                                }
                                                                                            }
                                                                                            scope 163 {
                                                                                                debug residual => _508;
                                                                                                scope 164 {
                                                                                                }
                                                                                            }
                                                                                            scope 165 {
                                                                                                debug val => _511;
                                                                                                scope 166 {
                                                                                                }
                                                                                            }
                                                                                            scope 167 {
                                                                                                debug taker_quote_asset_amount_delta => _512;
                                                                                                let _544: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _547: u128;
                                                                                                let _566: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _569: u128;
                                                                                                let _571: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _574: ();
                                                                                                let _585: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _588: i64;
                                                                                                let _591: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _594: ();
                                                                                                let _606: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _609: ();
                                                                                                let _610: controller::position::PositionDirection;
                                                                                                scope 176 {
                                                                                                    debug residual => _544;
                                                                                                    scope 177 {
                                                                                                    }
                                                                                                }
                                                                                                scope 178 {
                                                                                                    debug val => _547;
                                                                                                    scope 179 {
                                                                                                    }
                                                                                                }
                                                                                                scope 180 {
                                                                                                    debug residual => _566;
                                                                                                    scope 181 {
                                                                                                    }
                                                                                                }
                                                                                                scope 182 {
                                                                                                    debug val => _569;
                                                                                                    scope 183 {
                                                                                                    }
                                                                                                }
                                                                                                scope 184 {
                                                                                                    debug residual => _571;
                                                                                                    scope 185 {
                                                                                                    }
                                                                                                }
                                                                                                scope 186 {
                                                                                                    debug val => _574;
                                                                                                    scope 187 {
                                                                                                    }
                                                                                                }
                                                                                                scope 188 {
                                                                                                    debug residual => _585;
                                                                                                    scope 189 {
                                                                                                    }
                                                                                                }
                                                                                                scope 190 {
                                                                                                    debug val => _588;
                                                                                                    scope 191 {
                                                                                                    }
                                                                                                }
                                                                                                scope 192 {
                                                                                                    debug residual => _591;
                                                                                                    scope 193 {
                                                                                                    }
                                                                                                }
                                                                                                scope 194 {
                                                                                                    debug val => _594;
                                                                                                    scope 195 {
                                                                                                    }
                                                                                                }
                                                                                                scope 196 {
                                                                                                    debug residual => _606;
                                                                                                    scope 197 {
                                                                                                    }
                                                                                                }
                                                                                                scope 198 {
                                                                                                    debug val => _609;
                                                                                                    scope 199 {
                                                                                                    }
                                                                                                }
                                                                                                scope 200 {
                                                                                                    debug taker_order_direction => _610;
                                                                                                    let _614: bool;
                                                                                                    scope 201 {
                                                                                                        debug taker_update_open_bids_and_asks => _614;
                                                                                                        let _632: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _635: ();
                                                                                                        let _644: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _647: ();
                                                                                                        let _654: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _657: ();
                                                                                                        let _666: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _669: u128;
                                                                                                        let _686: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _689: ();
                                                                                                        let _690: u64;
                                                                                                        let _701: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _704: u64;
                                                                                                        let _710: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _713: u64;
                                                                                                        scope 202 {
                                                                                                            debug residual => _632;
                                                                                                            scope 203 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 204 {
                                                                                                            debug val => _635;
                                                                                                            scope 205 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 206 {
                                                                                                            debug residual => _644;
                                                                                                            scope 207 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 208 {
                                                                                                            debug val => _647;
                                                                                                            scope 209 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 210 {
                                                                                                            debug residual => _654;
                                                                                                            scope 211 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 212 {
                                                                                                            debug val => _657;
                                                                                                            scope 213 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 214 {
                                                                                                            debug residual => _666;
                                                                                                            scope 215 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 216 {
                                                                                                            debug val => _669;
                                                                                                            scope 217 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 218 {
                                                                                                            debug residual => _686;
                                                                                                            scope 219 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 220 {
                                                                                                            debug val => _689;
                                                                                                            scope 221 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 222 {
                                                                                                            debug maker_quote_asset_amount_delta => _690;
                                                                                                            let _722: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _725: u128;
                                                                                                            let _744: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _747: u128;
                                                                                                            let _749: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _752: ();
                                                                                                            let _762: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _765: i64;
                                                                                                            let _767: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _770: ();
                                                                                                            let _782: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _785: ();
                                                                                                            let _786: controller::position::PositionDirection;
                                                                                                            scope 231 {
                                                                                                                debug residual => _722;
                                                                                                                scope 232 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 233 {
                                                                                                                debug val => _725;
                                                                                                                scope 234 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 235 {
                                                                                                                debug residual => _744;
                                                                                                                scope 236 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 237 {
                                                                                                                debug val => _747;
                                                                                                                scope 238 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 239 {
                                                                                                                debug residual => _749;
                                                                                                                scope 240 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 241 {
                                                                                                                debug val => _752;
                                                                                                                scope 242 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 243 {
                                                                                                                debug residual => _762;
                                                                                                                scope 244 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 245 {
                                                                                                                debug val => _765;
                                                                                                                scope 246 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 247 {
                                                                                                                debug residual => _767;
                                                                                                                scope 248 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 249 {
                                                                                                                debug val => _770;
                                                                                                                scope 250 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 251 {
                                                                                                                debug residual => _782;
                                                                                                                scope 252 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 253 {
                                                                                                                debug val => _785;
                                                                                                                scope 254 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 255 {
                                                                                                                debug maker_order_direction => _786;
                                                                                                                let _790: bool;
                                                                                                                scope 256 {
                                                                                                                    debug maker_update_open_bids_and_asks => _790;
                                                                                                                    let _808: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _811: ();
                                                                                                                    let _845: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _848: ();
                                                                                                                    let _855: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _858: ();
                                                                                                                    let _936: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _939: u128;
                                                                                                                    let _941: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _944: u128;
                                                                                                                    let _953: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _956: u128;
                                                                                                                    let _965: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _968: ();
                                                                                                                    let _969: u64;
                                                                                                                    let _970: u64;
                                                                                                                    let mut _1127: &state::spot_market::SpotBalanceType;
                                                                                                                    scope 257 {
                                                                                                                        debug residual => _808;
                                                                                                                        scope 258 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 259 {
                                                                                                                        debug val => _811;
                                                                                                                        scope 260 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 261 {
                                                                                                                        debug maker_stats => _814;
                                                                                                                        let _814: &mut &mut state::user::UserStats;
                                                                                                                        let _823: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _826: ();
                                                                                                                        let _833: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _836: ();
                                                                                                                        scope 262 {
                                                                                                                            debug residual => _823;
                                                                                                                            scope 263 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 264 {
                                                                                                                            debug val => _826;
                                                                                                                            scope 265 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 266 {
                                                                                                                            debug residual => _833;
                                                                                                                            scope 267 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 268 {
                                                                                                                            debug val => _836;
                                                                                                                            scope 269 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 270 {
                                                                                                                        debug residual => _845;
                                                                                                                        scope 271 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 272 {
                                                                                                                        debug val => _848;
                                                                                                                        scope 273 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 274 {
                                                                                                                        debug residual => _855;
                                                                                                                        scope 275 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 276 {
                                                                                                                        debug val => _858;
                                                                                                                        scope 277 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 278 {
                                                                                                                        debug filler => _865;
                                                                                                                        debug filler_stats => _866;
                                                                                                                        let _865: &mut state::user::User;
                                                                                                                        let _866: &mut state::user::UserStats;
                                                                                                                        let _878: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _881: u128;
                                                                                                                        let _891: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _894: ();
                                                                                                                        let _904: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _907: i64;
                                                                                                                        let _909: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _912: ();
                                                                                                                        let _923: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _926: ();
                                                                                                                        let mut _1128: &state::spot_market::SpotBalanceType;
                                                                                                                        scope 279 {
                                                                                                                            debug residual => _878;
                                                                                                                            scope 280 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 281 {
                                                                                                                            debug val => _881;
                                                                                                                            scope 282 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 283 {
                                                                                                                            debug residual => _891;
                                                                                                                            scope 284 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 285 {
                                                                                                                            debug val => _894;
                                                                                                                            scope 286 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 287 {
                                                                                                                            debug residual => _904;
                                                                                                                            scope 288 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 289 {
                                                                                                                            debug val => _907;
                                                                                                                            scope 290 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 291 {
                                                                                                                            debug residual => _909;
                                                                                                                            scope 292 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 293 {
                                                                                                                            debug val => _912;
                                                                                                                            scope 294 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 295 {
                                                                                                                            debug residual => _923;
                                                                                                                            scope 296 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 297 {
                                                                                                                            debug val => _926;
                                                                                                                            scope 298 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 299 {
                                                                                                                        debug residual => _936;
                                                                                                                        scope 300 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 301 {
                                                                                                                        debug val => _939;
                                                                                                                        scope 302 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 303 {
                                                                                                                        debug residual => _941;
                                                                                                                        scope 304 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 305 {
                                                                                                                        debug val => _944;
                                                                                                                        scope 306 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 307 {
                                                                                                                        debug residual => _953;
                                                                                                                        scope 308 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 309 {
                                                                                                                        debug val => _956;
                                                                                                                        scope 310 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 311 {
                                                                                                                        debug residual => _965;
                                                                                                                        scope 312 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 313 {
                                                                                                                        debug val => _968;
                                                                                                                        scope 314 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 315 {
                                                                                                                        debug fill_record_id => _969;
                                                                                                                        let _976: state::events::OrderActionExplanation;
                                                                                                                        scope 317 {
                                                                                                                            debug order_action_explanation => _976;
                                                                                                                            let _982: state::events::OrderActionRecord;
                                                                                                                            let _1006: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _1009: u64;
                                                                                                                            let _1041: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _1044: &state::oracle::OraclePriceData;
                                                                                                                            let _1051: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _1054: state::events::OrderActionRecord;
                                                                                                                            scope 318 {
                                                                                                                                debug order_action_record => _982;
                                                                                                                                let _1060: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1063: ();
                                                                                                                                let _1075: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1078: u64;
                                                                                                                                let _1105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1108: u64;
                                                                                                                                scope 331 {
                                                                                                                                    debug residual => _1060;
                                                                                                                                    scope 332 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 333 {
                                                                                                                                    debug val => _1063;
                                                                                                                                    scope 334 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 335 {
                                                                                                                                    debug residual => _1075;
                                                                                                                                    scope 336 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 337 {
                                                                                                                                    debug val => _1078;
                                                                                                                                    scope 338 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 339 {
                                                                                                                                    debug residual => _1105;
                                                                                                                                    scope 340 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 341 {
                                                                                                                                    debug val => _1108;
                                                                                                                                    scope 342 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 319 {
                                                                                                                                debug residual => _1006;
                                                                                                                                scope 320 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 321 {
                                                                                                                                debug val => _1009;
                                                                                                                                scope 322 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 323 {
                                                                                                                                debug residual => _1041;
                                                                                                                                scope 324 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 325 {
                                                                                                                                debug val => _1044;
                                                                                                                                scope 326 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 327 {
                                                                                                                                debug residual => _1051;
                                                                                                                                scope 328 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 329 {
                                                                                                                                debug val => _1054;
                                                                                                                                scope 330 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 316 {
                                                                                                                        debug current_id => _970;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 223 {
                                                                                                            debug residual => _701;
                                                                                                            scope 224 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 225 {
                                                                                                            debug val => _704;
                                                                                                            scope 226 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 227 {
                                                                                                            debug residual => _710;
                                                                                                            scope 228 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 229 {
                                                                                                            debug val => _713;
                                                                                                            scope 230 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 168 {
                                                                                                debug residual => _523;
                                                                                                scope 169 {
                                                                                                }
                                                                                            }
                                                                                            scope 170 {
                                                                                                debug val => _526;
                                                                                                scope 171 {
                                                                                                }
                                                                                            }
                                                                                            scope 172 {
                                                                                                debug residual => _532;
                                                                                                scope 173 {
                                                                                                }
                                                                                            }
                                                                                            scope 174 {
                                                                                                debug val => _535;
                                                                                                scope 175 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 155 {
                                                                                            debug residual => _476;
                                                                                            scope 156 {
                                                                                            }
                                                                                        }
                                                                                        scope 157 {
                                                                                            debug val => _479;
                                                                                            scope 158 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 150 {
                                                                                        debug residual => _450;
                                                                                        scope 151 {
                                                                                        }
                                                                                    }
                                                                                    scope 152 {
                                                                                        debug val => _453;
                                                                                        scope 153 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 136 {
                                                                                debug residual => _404;
                                                                                scope 137 {
                                                                                }
                                                                            }
                                                                            scope 138 {
                                                                                debug val => _407;
                                                                                scope 139 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 104 {
                                                                            debug maker_max_quote_asset_amount => _325;
                                                                            let _325: u64;
                                                                            let _326: u64;
                                                                            let _343: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _346: u128;
                                                                            let _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _356: u128;
                                                                            let _358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _361: u128;
                                                                            let _367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _370: u128;
                                                                            let _372: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _375: u128;
                                                                            let _377: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _380: u64;
                                                                            let _383: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _386: u64;
                                                                            scope 105 {
                                                                                debug maker_implied_max_base_asset_amount => _326;
                                                                            }
                                                                            scope 106 {
                                                                                debug residual => _343;
                                                                                scope 107 {
                                                                                }
                                                                            }
                                                                            scope 108 {
                                                                                debug val => _346;
                                                                                scope 109 {
                                                                                }
                                                                            }
                                                                            scope 110 {
                                                                                debug residual => _353;
                                                                                scope 111 {
                                                                                }
                                                                            }
                                                                            scope 112 {
                                                                                debug val => _356;
                                                                                scope 113 {
                                                                                }
                                                                            }
                                                                            scope 114 {
                                                                                debug residual => _358;
                                                                                scope 115 {
                                                                                }
                                                                            }
                                                                            scope 116 {
                                                                                debug val => _361;
                                                                                scope 117 {
                                                                                }
                                                                            }
                                                                            scope 118 {
                                                                                debug residual => _367;
                                                                                scope 119 {
                                                                                }
                                                                            }
                                                                            scope 120 {
                                                                                debug val => _370;
                                                                                scope 121 {
                                                                                }
                                                                            }
                                                                            scope 122 {
                                                                                debug residual => _372;
                                                                                scope 123 {
                                                                                }
                                                                            }
                                                                            scope 124 {
                                                                                debug val => _375;
                                                                                scope 125 {
                                                                                }
                                                                            }
                                                                            scope 126 {
                                                                                debug residual => _377;
                                                                                scope 127 {
                                                                                }
                                                                            }
                                                                            scope 128 {
                                                                                debug val => _380;
                                                                                scope 129 {
                                                                                }
                                                                            }
                                                                            scope 130 {
                                                                                debug residual => _383;
                                                                                scope 131 {
                                                                                }
                                                                            }
                                                                            scope 132 {
                                                                                debug val => _386;
                                                                                scope 133 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 134 {
                                                                            debug maker_max_base_asset_amount => _390;
                                                                            let _390: u64;
                                                                        }
                                                                    }
                                                                    scope 99 {
                                                                        debug residual => _319;
                                                                        scope 100 {
                                                                        }
                                                                    }
                                                                    scope 101 {
                                                                        debug val => _322;
                                                                        scope 102 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 67 {
                                                                    debug taker_max_quote_asset_amount => _241;
                                                                    let _241: u64;
                                                                    let _242: u64;
                                                                    let _259: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _262: u128;
                                                                    let _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _272: u128;
                                                                    let _274: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _277: u128;
                                                                    let _283: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _286: u128;
                                                                    let _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _291: u128;
                                                                    let _293: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _296: u64;
                                                                    let _299: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _302: u64;
                                                                    scope 68 {
                                                                        debug taker_implied_max_base_asset_amount => _242;
                                                                    }
                                                                    scope 69 {
                                                                        debug residual => _259;
                                                                        scope 70 {
                                                                        }
                                                                    }
                                                                    scope 71 {
                                                                        debug val => _262;
                                                                        scope 72 {
                                                                        }
                                                                    }
                                                                    scope 73 {
                                                                        debug residual => _269;
                                                                        scope 74 {
                                                                        }
                                                                    }
                                                                    scope 75 {
                                                                        debug val => _272;
                                                                        scope 76 {
                                                                        }
                                                                    }
                                                                    scope 77 {
                                                                        debug residual => _274;
                                                                        scope 78 {
                                                                        }
                                                                    }
                                                                    scope 79 {
                                                                        debug val => _277;
                                                                        scope 80 {
                                                                        }
                                                                    }
                                                                    scope 81 {
                                                                        debug residual => _283;
                                                                        scope 82 {
                                                                        }
                                                                    }
                                                                    scope 83 {
                                                                        debug val => _286;
                                                                        scope 84 {
                                                                        }
                                                                    }
                                                                    scope 85 {
                                                                        debug residual => _288;
                                                                        scope 86 {
                                                                        }
                                                                    }
                                                                    scope 87 {
                                                                        debug val => _291;
                                                                        scope 88 {
                                                                        }
                                                                    }
                                                                    scope 89 {
                                                                        debug residual => _293;
                                                                        scope 90 {
                                                                        }
                                                                    }
                                                                    scope 91 {
                                                                        debug val => _296;
                                                                        scope 92 {
                                                                        }
                                                                    }
                                                                    scope 93 {
                                                                        debug residual => _299;
                                                                        scope 94 {
                                                                        }
                                                                    }
                                                                    scope 95 {
                                                                        debug val => _302;
                                                                        scope 96 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 97 {
                                                                    debug taker_max_base_asset_amount => _306;
                                                                    let _306: u64;
                                                                }
                                                            }
                                                            scope 62 {
                                                                debug residual => _235;
                                                                scope 63 {
                                                                }
                                                            }
                                                            scope 64 {
                                                                debug val => _238;
                                                                scope 65 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 51 {
                                                        debug residual => _185;
                                                        scope 52 {
                                                        }
                                                    }
                                                    scope 53 {
                                                        debug val => _188;
                                                        scope 54 {
                                                        }
                                                    }
                                                    scope 55 {
                                                        debug residual => _191;
                                                        scope 56 {
                                                        }
                                                    }
                                                    scope 57 {
                                                        debug val => _194;
                                                        scope 58 {
                                                        }
                                                    }
                                                }
                                                scope 46 {
                                                    debug residual => _168;
                                                    scope 47 {
                                                    }
                                                }
                                                scope 48 {
                                                    debug val => _171;
                                                    scope 49 {
                                                    }
                                                }
                                            }
                                            scope 41 {
                                                debug residual => _155;
                                                scope 42 {
                                                }
                                            }
                                            scope 43 {
                                                debug val => _158;
                                                scope 44 {
                                                }
                                            }
                                        }
                                    }
                                    scope 35 {
                                        debug residual => _141;
                                        scope 36 {
                                        }
                                    }
                                    scope 37 {
                                        debug val => _144;
                                        scope 38 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 24 {
                            debug residual => _109;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug val => _112;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug residual => _115;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _118;
                            scope 31 {
                            }
                        }
                    }
                    scope 19 {
                        debug residual => _92;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _95;
                        scope 22 {
                        }
                    }
                }
                scope 14 {
                    debug residual => _79;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _82;
                    scope 17 {
                    }
                }
            }
            scope 8 {
                debug residual => _65;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _68;
                scope 11 {
                }
            }
            scope 12 {
                debug price => _70;
            }
        }
        scope 3 {
            debug residual => _46;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _49;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _9;
        _23 = Len(((*_7).5: [state::user::Order; 32]));
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb1, unwind continue];
    }

    bb1: {
        _21 = &((*_7).5: [state::user::Order; 32])[_22];
        _20 = &(*_21);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _5;
        _28 = Len(((*_3).5: [state::user::Order; 32]));
        _29 = Lt(_27, _28);
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb2, unwind continue];
    }

    bb2: {
        _26 = &((*_3).5: [state::user::Order; 32])[_27];
        _25 = &(*_26);
        _19 = are_orders_same_market_but_different_sides(move _20, move _25) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _19) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _5;
        _34 = Len(((*_3).5: [state::user::Order; 32]));
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb6, unwind continue];
    }

    bb5: {
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_31);
        _31 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _31);
        StorageDead(_31);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb559;
    }

    bb6: {
        _32 = (((*_3).5: [state::user::Order; 32])[_33].11: u16);
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &mut (*_16);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_1);
        _43 = SpotMarket::oracle_id(move _44) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _39 = OracleMap::<'_>::get_price_data(move _40, move _41) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _39) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_39);
        _45 = discriminant(_38);
        switchInt(move _45) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_49);
        _49 = ((_38 as Continue).0: &state::oracle::OraclePriceData);
        _37 = _49;
        StorageDead(_49);
        _36 = ((*_37).0: i64);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _5;
        _56 = Len(((*_3).5: [state::user::Order; 32]));
        _57 = Lt(_55, _56);
        assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> [success: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_46);
        _46 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb558;
    }

    bb14: {
        _54 = &((*_3).5: [state::user::Order; 32])[_55];
        StorageLive(_58);
        StorageLive(_59);
        _59 = _36;
        _58 = Option::<i64>::Some(move _59);
        StorageDead(_59);
        StorageLive(_60);
        _60 = Option::<u64>::None;
        StorageLive(_61);
        _61 = _15;
        StorageLive(_62);
        _62 = ((*_1).26: u64);
        StorageLive(_63);
        _63 = Option::<ProtectedMakerParams>::None;
        _53 = Order::get_limit_price(move _54, move _58, move _60, move _61, move _62, const false, move _63) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_54);
        _52 = <std::result::Result<Option<u64>, error::ErrorCode> as Try>::branch(move _53) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_53);
        _64 = discriminant(_52);
        switchInt(move _64) -> [0: bb17, 1: bb18, otherwise: bb11];
    }

    bb17: {
        StorageLive(_68);
        _68 = ((_52 as Continue).0: std::option::Option<u64>);
        _51 = _68;
        StorageDead(_68);
        _69 = discriminant(_51);
        switchInt(move _69) -> [0: bb20, 1: bb21, otherwise: bb11];
    }

    bb18: {
        StorageLive(_65);
        _65 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_67);
        StorageDead(_65);
        goto -> bb556;
    }

    bb20: {
        StorageLive(_72);
        _72 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _72);
        StorageDead(_72);
        goto -> bb556;
    }

    bb21: {
        StorageLive(_70);
        _70 = ((_51 as Some).0: u64);
        _50 = _70;
        StorageDead(_70);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_3);
        StorageLive(_77);
        _77 = _32;
        _75 = User::get_spot_position_index(move _76, move _77) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_77);
        StorageDead(_76);
        _74 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _75) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_75);
        _78 = discriminant(_74);
        switchInt(move _78) -> [0: bb24, 1: bb25, otherwise: bb11];
    }

    bb24: {
        StorageLive(_82);
        _82 = ((_74 as Continue).0: usize);
        _73 = _82;
        StorageDead(_82);
        StorageDead(_74);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = _73;
        _88 = Len(((*_3).3: [state::user::SpotPosition; 8]));
        _89 = Lt(_87, _88);
        assert(move _89, "index out of bounds: the length is {} but the index is {}", move _88, _87) -> [success: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_79);
        _79 = ((_74 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_74);
        goto -> bb555;
    }

    bb27: {
        _86 = &((*_3).3: [state::user::SpotPosition; 8])[_87];
        StorageLive(_90);
        _90 = &(*_1);
        _85 = SpotPosition::get_signed_token_amount(move _86, move _90) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_90);
        StorageDead(_86);
        _84 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _85) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_85);
        _91 = discriminant(_84);
        switchInt(move _91) -> [0: bb30, 1: bb31, otherwise: bb11];
    }

    bb30: {
        StorageLive(_95);
        _95 = ((_84 as Continue).0: i128);
        _83 = _95;
        StorageDead(_95);
        StorageDead(_87);
        StorageDead(_84);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = _5;
        _101 = Len(((*_3).5: [state::user::Order; 32]));
        _102 = Lt(_100, _101);
        assert(move _102, "index out of bounds: the length is {} but the index is {}", move _101, _100) -> [success: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_92);
        _92 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_87);
        StorageDead(_84);
        goto -> bb554;
    }

    bb33: {
        _99 = &((*_3).5: [state::user::Order; 32])[_100];
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = _83;
        _106 = <i128 as Cast>::cast::<i64>(move _107) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_107);
        _105 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _106) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_106);
        _108 = discriminant(_105);
        switchInt(move _108) -> [0: bb36, 1: bb37, otherwise: bb11];
    }

    bb36: {
        StorageLive(_112);
        _112 = ((_105 as Continue).0: i64);
        _104 = _112;
        StorageDead(_112);
        _103 = Option::<i64>::Some(move _104);
        StorageDead(_104);
        StorageLive(_113);
        _113 = ((*_1).25: u64);
        _98 = Order::get_standardized_base_asset_amount_unfilled(move _99, move _103, move _113) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_109);
        _109 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb552;
    }

    bb39: {
        StorageDead(_113);
        StorageDead(_103);
        StorageDead(_99);
        _97 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _98) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_98);
        _114 = discriminant(_97);
        switchInt(move _114) -> [0: bb41, 1: bb42, otherwise: bb11];
    }

    bb41: {
        StorageLive(_118);
        _118 = ((_97 as Continue).0: u64);
        _96 = _118;
        StorageDead(_118);
        StorageDead(_105);
        StorageDead(_100);
        StorageDead(_97);
        StorageLive(_119);
        StorageLive(_120);
        _120 = _5;
        _121 = Len(((*_3).5: [state::user::Order; 32]));
        _122 = Lt(_120, _121);
        assert(move _122, "index out of bounds: the length is {} but the index is {}", move _121, _120) -> [success: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_115);
        _115 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_117);
        StorageDead(_115);
        goto -> bb552;
    }

    bb44: {
        _119 = (((*_3).5: [state::user::Order; 32])[_120].0: u64);
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        _124 = _5;
        _125 = Len(((*_3).5: [state::user::Order; 32]));
        _126 = Lt(_124, _125);
        assert(move _126, "index out of bounds: the length is {} but the index is {}", move _125, _124) -> [success: bb45, unwind continue];
    }

    bb45: {
        _123 = (((*_3).5: [state::user::Order; 32])[_124].17: controller::position::PositionDirection);
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = _9;
        _132 = Len(((*_7).5: [state::user::Order; 32]));
        _133 = Lt(_131, _132);
        assert(move _133, "index out of bounds: the length is {} but the index is {}", move _132, _131) -> [success: bb46, unwind continue];
    }

    bb46: {
        _130 = &((*_7).5: [state::user::Order; 32])[_131];
        StorageLive(_134);
        StorageLive(_135);
        _135 = _36;
        _134 = Option::<i64>::Some(move _135);
        StorageDead(_135);
        StorageLive(_136);
        _136 = Option::<u64>::None;
        StorageLive(_137);
        _137 = _15;
        StorageLive(_138);
        _138 = ((*_1).26: u64);
        StorageLive(_139);
        _139 = Option::<ProtectedMakerParams>::None;
        _129 = Order::force_get_limit_price(move _130, move _134, move _136, move _137, move _138, const false, move _139) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_130);
        _128 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _129) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_129);
        _140 = discriminant(_128);
        switchInt(move _140) -> [0: bb49, 1: bb50, otherwise: bb11];
    }

    bb49: {
        StorageLive(_144);
        _144 = ((_128 as Continue).0: u64);
        _127 = _144;
        StorageDead(_144);
        StorageDead(_131);
        StorageDead(_128);
        StorageLive(_145);
        StorageLive(_146);
        _146 = _9;
        _147 = Len(((*_7).5: [state::user::Order; 32]));
        _148 = Lt(_146, _147);
        assert(move _148, "index out of bounds: the length is {} but the index is {}", move _147, _146) -> [success: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_141);
        _141 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_131);
        StorageDead(_128);
        goto -> bb551;
    }

    bb52: {
        _145 = (((*_7).5: [state::user::Order; 32])[_146].17: controller::position::PositionDirection);
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &(*_7);
        StorageLive(_153);
        _153 = _32;
        _151 = User::get_spot_position_index(move _152, move _153) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_153);
        StorageDead(_152);
        _150 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _151) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_151);
        _154 = discriminant(_150);
        switchInt(move _154) -> [0: bb55, 1: bb56, otherwise: bb11];
    }

    bb55: {
        StorageLive(_158);
        _158 = ((_150 as Continue).0: usize);
        _149 = _158;
        StorageDead(_158);
        StorageDead(_150);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _149;
        _164 = Len(((*_7).3: [state::user::SpotPosition; 8]));
        _165 = Lt(_163, _164);
        assert(move _165, "index out of bounds: the length is {} but the index is {}", move _164, _163) -> [success: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_155);
        _155 = ((_150 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_157);
        _157 = _155;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _157) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_150);
        goto -> bb550;
    }

    bb58: {
        _162 = &((*_7).3: [state::user::SpotPosition; 8])[_163];
        StorageLive(_166);
        _166 = &(*_1);
        _161 = SpotPosition::get_signed_token_amount(move _162, move _166) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_166);
        StorageDead(_162);
        _160 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _161) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_161);
        _167 = discriminant(_160);
        switchInt(move _167) -> [0: bb61, 1: bb62, otherwise: bb11];
    }

    bb61: {
        StorageLive(_171);
        _171 = ((_160 as Continue).0: i128);
        _159 = _171;
        StorageDead(_171);
        StorageDead(_163);
        StorageDead(_160);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = _9;
        _177 = Len(((*_7).5: [state::user::Order; 32]));
        _178 = Lt(_176, _177);
        assert(move _178, "index out of bounds: the length is {} but the index is {}", move _177, _176) -> [success: bb64, unwind continue];
    }

    bb62: {
        StorageLive(_168);
        _168 = ((_160 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_170);
        _170 = _168;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _170) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_163);
        StorageDead(_160);
        goto -> bb549;
    }

    bb64: {
        _175 = &((*_7).5: [state::user::Order; 32])[_176];
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = _159;
        _182 = <i128 as Cast>::cast::<i64>(move _183) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_183);
        _181 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _182) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_182);
        _184 = discriminant(_181);
        switchInt(move _184) -> [0: bb67, 1: bb68, otherwise: bb11];
    }

    bb67: {
        StorageLive(_188);
        _188 = ((_181 as Continue).0: i64);
        _180 = _188;
        StorageDead(_188);
        _179 = Option::<i64>::Some(move _180);
        StorageDead(_180);
        StorageLive(_189);
        _189 = ((*_1).25: u64);
        _174 = Order::get_standardized_base_asset_amount_unfilled(move _175, move _179, move _189) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_185);
        _185 = ((_181 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_187);
        _187 = _185;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _187) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb547;
    }

    bb70: {
        StorageDead(_189);
        StorageDead(_179);
        StorageDead(_175);
        _173 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _174) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_174);
        _190 = discriminant(_173);
        switchInt(move _190) -> [0: bb72, 1: bb73, otherwise: bb11];
    }

    bb72: {
        StorageLive(_194);
        _194 = ((_173 as Continue).0: u64);
        _172 = _194;
        StorageDead(_194);
        StorageDead(_181);
        StorageDead(_176);
        StorageDead(_173);
        StorageLive(_195);
        StorageLive(_196);
        _196 = _145;
        StorageLive(_197);
        _197 = _127;
        StorageLive(_198);
        _198 = _50;
        _195 = do_orders_cross(move _196, move _197, move _198) -> [return: bb75, unwind continue];
    }

    bb73: {
        StorageLive(_191);
        _191 = ((_173 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_193);
        _193 = _191;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _193) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_193);
        StorageDead(_191);
        goto -> bb547;
    }

    bb75: {
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_196);
        StorageLive(_199);
        StorageLive(_200);
        _200 = _195;
        switchInt(move _200) -> [0: bb76, otherwise: bb84];
    }

    bb76: {
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _1131 = const _;
        _212 = &(*_1131);
        _211 = &(*_212);
        _210 = move _211 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_211);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_127;
        _219 = &(*_220);
        _218 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _219) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_219);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_50;
        _222 = &(*_223);
        _221 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _222) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_222);
        _217 = [move _218, move _221];
        StorageDead(_221);
        StorageDead(_218);
        _216 = &_217;
        _215 = &(*_216);
        _214 = move _215 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_215);
        _209 = Arguments::<'_>::new_v1(move _210, move _214) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_214);
        StorageDead(_210);
        _208 = format(move _209) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_209);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_212);
        _207 = move _208;
        StorageDead(_208);
        _206 = &_207;
        _205 = &(*_206);
        _204 = <String as Deref>::deref(move _205) -> [return: bb81, unwind: bb560];
    }

    bb81: {
        _203 = &(*_204);
        StorageDead(_205);
        _202 = solana_program::log::sol_log(move _203) -> [return: bb82, unwind: bb560];
    }

    bb82: {
        StorageDead(_203);
        drop(_207) -> [return: bb83, unwind: bb561];
    }

    bb83: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_202);
        StorageLive(_224);
        _224 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _224);
        StorageDead(_224);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb546;
    }

    bb84: {
        _199 = const ();
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &(*_3);
        StorageLive(_231);
        _231 = _5;
        StorageLive(_232);
        _232 = &(*_1);
        StorageLive(_233);
        _233 = &(*_2);
        _229 = math::orders::get_max_fill_amounts(move _230, move _231, move _232, move _233, const false) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_230);
        _228 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _229) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_229);
        _234 = discriminant(_228);
        switchInt(move _234) -> [0: bb87, 1: bb88, otherwise: bb11];
    }

    bb87: {
        StorageLive(_238);
        _238 = ((_228 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _227 = _238;
        StorageDead(_238);
        StorageLive(_225);
        _225 = (_227.0: std::option::Option<u64>);
        StorageLive(_226);
        _226 = (_227.1: std::option::Option<u64>);
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_239);
        _240 = discriminant(_226);
        switchInt(move _240) -> [1: bb91, otherwise: bb90];
    }

    bb88: {
        StorageLive(_235);
        _235 = ((_228 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_228);
        StorageDead(_227);
        goto -> bb546;
    }

    bb90: {
        _305 = discriminant(_225);
        switchInt(move _305) -> [1: bb130, otherwise: bb129];
    }

    bb91: {
        StorageLive(_241);
        _241 = ((_226 as Some).0: u64);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = _241;
        _256 = <u64 as Cast>::cast::<u128>(move _257) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_257);
        _255 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _256) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_256);
        _258 = discriminant(_255);
        switchInt(move _258) -> [0: bb94, 1: bb95, otherwise: bb11];
    }

    bb94: {
        StorageLive(_262);
        _262 = ((_255 as Continue).0: u128);
        _254 = _262;
        StorageDead(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = (*_1);
        _266 = SpotMarket::get_precision(move _267) -> [return: bb97, unwind continue];
    }

    bb95: {
        StorageLive(_259);
        _259 = ((_255 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_261);
        _261 = _259;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _261) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_261);
        StorageDead(_259);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb544;
    }

    bb97: {
        StorageDead(_267);
        _265 = <u64 as Cast>::cast::<u128>(move _266) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_266);
        _264 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _265) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_265);
        _268 = discriminant(_264);
        switchInt(move _268) -> [0: bb100, 1: bb101, otherwise: bb11];
    }

    bb100: {
        StorageLive(_272);
        _272 = ((_264 as Continue).0: u128);
        _263 = _272;
        StorageDead(_272);
        _253 = <u128 as SafeMath>::safe_mul(move _254, move _263) -> [return: bb103, unwind continue];
    }

    bb101: {
        StorageLive(_269);
        _269 = ((_264 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_271);
        _271 = _269;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _271) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_263);
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb542;
    }

    bb103: {
        StorageDead(_263);
        StorageDead(_254);
        _252 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _253) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_253);
        _273 = discriminant(_252);
        switchInt(move _273) -> [0: bb105, 1: bb106, otherwise: bb11];
    }

    bb105: {
        StorageLive(_277);
        _277 = ((_252 as Continue).0: u128);
        _251 = _277;
        StorageDead(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = _127;
        _280 = <u64 as Cast>::cast::<u128>(move _281) -> [return: bb108, unwind continue];
    }

    bb106: {
        StorageLive(_274);
        _274 = ((_252 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_276);
        _276 = _274;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _276) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_276);
        StorageDead(_274);
        goto -> bb542;
    }

    bb108: {
        StorageDead(_281);
        _279 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _280) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_280);
        _282 = discriminant(_279);
        switchInt(move _282) -> [0: bb110, 1: bb111, otherwise: bb11];
    }

    bb110: {
        StorageLive(_286);
        _286 = ((_279 as Continue).0: u128);
        _278 = _286;
        StorageDead(_286);
        _250 = <u128 as SafeMath>::safe_div(move _251, move _278) -> [return: bb113, unwind continue];
    }

    bb111: {
        StorageLive(_283);
        _283 = ((_279 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_285);
        _285 = _283;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _285) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_285);
        StorageDead(_283);
        StorageDead(_278);
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb539;
    }

    bb113: {
        StorageDead(_278);
        StorageDead(_251);
        _249 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _250) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_250);
        _287 = discriminant(_249);
        switchInt(move _287) -> [0: bb115, 1: bb116, otherwise: bb11];
    }

    bb115: {
        StorageLive(_291);
        _291 = ((_249 as Continue).0: u128);
        _248 = _291;
        StorageDead(_291);
        _247 = <u128 as Cast>::cast::<u64>(move _248) -> [return: bb118, unwind continue];
    }

    bb116: {
        StorageLive(_288);
        _288 = ((_249 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_290);
        _290 = _288;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _290) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_290);
        StorageDead(_288);
        goto -> bb539;
    }

    bb118: {
        StorageDead(_248);
        _246 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _247) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_247);
        _292 = discriminant(_246);
        switchInt(move _292) -> [0: bb120, 1: bb121, otherwise: bb11];
    }

    bb120: {
        StorageLive(_296);
        _296 = ((_246 as Continue).0: u64);
        _245 = _296;
        StorageDead(_296);
        StorageLive(_297);
        _297 = ((*_1).25: u64);
        _244 = math::orders::standardize_base_asset_amount(move _245, move _297) -> [return: bb123, unwind continue];
    }

    bb121: {
        StorageLive(_293);
        _293 = ((_246 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_295);
        _295 = _293;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _295) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_295);
        StorageDead(_293);
        goto -> bb540;
    }

    bb123: {
        StorageDead(_297);
        StorageDead(_245);
        _243 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _244) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_244);
        _298 = discriminant(_243);
        switchInt(move _298) -> [0: bb125, 1: bb126, otherwise: bb11];
    }

    bb125: {
        StorageLive(_302);
        _302 = ((_243 as Continue).0: u64);
        _242 = _302;
        StorageDead(_302);
        StorageDead(_279);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_249);
        StorageDead(_246);
        StorageDead(_243);
        StorageLive(_303);
        _303 = _96;
        StorageLive(_304);
        _304 = _242;
        _239 = <u64 as Ord>::min(move _303, move _304) -> [return: bb128, unwind continue];
    }

    bb126: {
        StorageLive(_299);
        _299 = ((_243 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_301);
        _301 = _299;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _301) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_301);
        StorageDead(_299);
        goto -> bb541;
    }

    bb128: {
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_242);
        StorageDead(_241);
        goto -> bb132;
    }

    bb129: {
        _239 = _96;
        goto -> bb132;
    }

    bb130: {
        StorageLive(_306);
        _306 = ((_225 as Some).0: u64);
        StorageLive(_307);
        _307 = _96;
        StorageLive(_308);
        _308 = _306;
        _239 = <u64 as Ord>::min(move _307, move _308) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_306);
        goto -> bb132;
    }

    bb132: {
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &(*_7);
        StorageLive(_315);
        _315 = _9;
        StorageLive(_316);
        _316 = &(*_1);
        StorageLive(_317);
        _317 = &(*_2);
        _313 = math::orders::get_max_fill_amounts(move _314, move _315, move _316, move _317, const false) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_314);
        _312 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _313) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_313);
        _318 = discriminant(_312);
        switchInt(move _318) -> [0: bb135, 1: bb136, otherwise: bb11];
    }

    bb135: {
        StorageLive(_322);
        _322 = ((_312 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _311 = _322;
        StorageDead(_322);
        StorageLive(_309);
        _309 = (_311.0: std::option::Option<u64>);
        StorageLive(_310);
        _310 = (_311.1: std::option::Option<u64>);
        StorageDead(_312);
        StorageDead(_311);
        StorageLive(_323);
        _324 = discriminant(_310);
        switchInt(move _324) -> [1: bb139, otherwise: bb138];
    }

    bb136: {
        StorageLive(_319);
        _319 = ((_312 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_321);
        _321 = _319;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _321) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_312);
        StorageDead(_311);
        goto -> bb545;
    }

    bb138: {
        _389 = discriminant(_309);
        switchInt(move _389) -> [1: bb178, otherwise: bb177];
    }

    bb139: {
        StorageLive(_325);
        _325 = ((_310 as Some).0: u64);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = _325;
        _340 = <u64 as Cast>::cast::<u128>(move _341) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_341);
        _339 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _340) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_340);
        _342 = discriminant(_339);
        switchInt(move _342) -> [0: bb142, 1: bb143, otherwise: bb11];
    }

    bb142: {
        StorageLive(_346);
        _346 = ((_339 as Continue).0: u128);
        _338 = _346;
        StorageDead(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = (*_1);
        _350 = SpotMarket::get_precision(move _351) -> [return: bb145, unwind continue];
    }

    bb143: {
        StorageLive(_343);
        _343 = ((_339 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_345);
        _345 = _343;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _345) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_338);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_329);
        StorageDead(_328);
        goto -> bb537;
    }

    bb145: {
        StorageDead(_351);
        _349 = <u64 as Cast>::cast::<u128>(move _350) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_350);
        _348 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _349) -> [return: bb147, unwind continue];
    }

    bb147: {
        StorageDead(_349);
        _352 = discriminant(_348);
        switchInt(move _352) -> [0: bb148, 1: bb149, otherwise: bb11];
    }

    bb148: {
        StorageLive(_356);
        _356 = ((_348 as Continue).0: u128);
        _347 = _356;
        StorageDead(_356);
        _337 = <u128 as SafeMath>::safe_mul(move _338, move _347) -> [return: bb151, unwind continue];
    }

    bb149: {
        StorageLive(_353);
        _353 = ((_348 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_355);
        _355 = _353;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _355) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_347);
        StorageDead(_338);
        StorageDead(_337);
        goto -> bb535;
    }

    bb151: {
        StorageDead(_347);
        StorageDead(_338);
        _336 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _337) -> [return: bb152, unwind continue];
    }

    bb152: {
        StorageDead(_337);
        _357 = discriminant(_336);
        switchInt(move _357) -> [0: bb153, 1: bb154, otherwise: bb11];
    }

    bb153: {
        StorageLive(_361);
        _361 = ((_336 as Continue).0: u128);
        _335 = _361;
        StorageDead(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = _127;
        _364 = <u64 as Cast>::cast::<u128>(move _365) -> [return: bb156, unwind continue];
    }

    bb154: {
        StorageLive(_358);
        _358 = ((_336 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_360);
        _360 = _358;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _360) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_360);
        StorageDead(_358);
        goto -> bb535;
    }

    bb156: {
        StorageDead(_365);
        _363 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _364) -> [return: bb157, unwind continue];
    }

    bb157: {
        StorageDead(_364);
        _366 = discriminant(_363);
        switchInt(move _366) -> [0: bb158, 1: bb159, otherwise: bb11];
    }

    bb158: {
        StorageLive(_370);
        _370 = ((_363 as Continue).0: u128);
        _362 = _370;
        StorageDead(_370);
        _334 = <u128 as SafeMath>::safe_div(move _335, move _362) -> [return: bb161, unwind continue];
    }

    bb159: {
        StorageLive(_367);
        _367 = ((_363 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_369);
        _369 = _367;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _369) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_362);
        StorageDead(_335);
        StorageDead(_334);
        goto -> bb532;
    }

    bb161: {
        StorageDead(_362);
        StorageDead(_335);
        _333 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _334) -> [return: bb162, unwind continue];
    }

    bb162: {
        StorageDead(_334);
        _371 = discriminant(_333);
        switchInt(move _371) -> [0: bb163, 1: bb164, otherwise: bb11];
    }

    bb163: {
        StorageLive(_375);
        _375 = ((_333 as Continue).0: u128);
        _332 = _375;
        StorageDead(_375);
        _331 = <u128 as Cast>::cast::<u64>(move _332) -> [return: bb166, unwind continue];
    }

    bb164: {
        StorageLive(_372);
        _372 = ((_333 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_374);
        _374 = _372;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _374) -> [return: bb165, unwind continue];
    }

    bb165: {
        StorageDead(_374);
        StorageDead(_372);
        goto -> bb532;
    }

    bb166: {
        StorageDead(_332);
        _330 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _331) -> [return: bb167, unwind continue];
    }

    bb167: {
        StorageDead(_331);
        _376 = discriminant(_330);
        switchInt(move _376) -> [0: bb168, 1: bb169, otherwise: bb11];
    }

    bb168: {
        StorageLive(_380);
        _380 = ((_330 as Continue).0: u64);
        _329 = _380;
        StorageDead(_380);
        StorageLive(_381);
        _381 = ((*_1).25: u64);
        _328 = math::orders::standardize_base_asset_amount(move _329, move _381) -> [return: bb171, unwind continue];
    }

    bb169: {
        StorageLive(_377);
        _377 = ((_330 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_379);
        _379 = _377;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _379) -> [return: bb170, unwind continue];
    }

    bb170: {
        StorageDead(_379);
        StorageDead(_377);
        goto -> bb533;
    }

    bb171: {
        StorageDead(_381);
        StorageDead(_329);
        _327 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _328) -> [return: bb172, unwind continue];
    }

    bb172: {
        StorageDead(_328);
        _382 = discriminant(_327);
        switchInt(move _382) -> [0: bb173, 1: bb174, otherwise: bb11];
    }

    bb173: {
        StorageLive(_386);
        _386 = ((_327 as Continue).0: u64);
        _326 = _386;
        StorageDead(_386);
        StorageDead(_363);
        StorageDead(_348);
        StorageDead(_339);
        StorageDead(_336);
        StorageDead(_333);
        StorageDead(_330);
        StorageDead(_327);
        StorageLive(_387);
        _387 = _172;
        StorageLive(_388);
        _388 = _326;
        _323 = <u64 as Ord>::min(move _387, move _388) -> [return: bb176, unwind continue];
    }

    bb174: {
        StorageLive(_383);
        _383 = ((_327 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_385);
        _385 = _383;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _385) -> [return: bb175, unwind continue];
    }

    bb175: {
        StorageDead(_385);
        StorageDead(_383);
        goto -> bb534;
    }

    bb176: {
        StorageDead(_388);
        StorageDead(_387);
        StorageDead(_326);
        StorageDead(_325);
        goto -> bb180;
    }

    bb177: {
        _323 = _172;
        goto -> bb180;
    }

    bb178: {
        StorageLive(_390);
        _390 = ((_309 as Some).0: u64);
        StorageLive(_391);
        _391 = _172;
        StorageLive(_392);
        _392 = _390;
        _323 = <u64 as Ord>::min(move _391, move _392) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_390);
        goto -> bb180;
    }

    bb180: {
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = _323;
        StorageLive(_399);
        _399 = _127;
        StorageLive(_400);
        _400 = _239;
        StorageLive(_401);
        _401 = ((*_1).41: u32);
        StorageLive(_402);
        _402 = _145;
        _397 = calculate_fill_for_matched_orders(move _398, move _399, move _400, move _401, move _402) -> [return: bb181, unwind continue];
    }

    bb181: {
        StorageDead(_402);
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_399);
        StorageDead(_398);
        _396 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _397) -> [return: bb182, unwind continue];
    }

    bb182: {
        StorageDead(_397);
        _403 = discriminant(_396);
        switchInt(move _403) -> [0: bb183, 1: bb184, otherwise: bb11];
    }

    bb183: {
        StorageLive(_407);
        _407 = ((_396 as Continue).0: (u64, u64));
        _395 = _407;
        StorageDead(_407);
        StorageLive(_393);
        _393 = (_395.0: u64);
        StorageLive(_394);
        _394 = (_395.1: u64);
        StorageDead(_396);
        StorageDead(_395);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = _393;
        _409 = Eq(move _410, const 0_u64);
        switchInt(move _409) -> [0: bb187, otherwise: bb186];
    }

    bb184: {
        StorageLive(_404);
        _404 = ((_396 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_406);
        _406 = _404;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _406) -> [return: bb185, unwind continue];
    }

    bb185: {
        StorageDead(_406);
        StorageDead(_404);
        StorageDead(_396);
        StorageDead(_395);
        goto -> bb538;
    }

    bb186: {
        StorageDead(_410);
        StorageLive(_412);
        _412 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _412);
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_408);
        goto -> bb531;
    }

    bb187: {
        StorageDead(_410);
        _408 = const ();
        StorageDead(_409);
        StorageDead(_408);
        StorageLive(_413);
        StorageLive(_414);
        _414 = (*_1);
        _413 = SpotMarket::get_precision(move _414) -> [return: bb188, unwind continue];
    }

    bb188: {
        StorageDead(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = _394;
        StorageLive(_419);
        _419 = _393;
        StorageLive(_420);
        _420 = _413;
        StorageLive(_421);
        _421 = _123;
        StorageLive(_422);
        _422 = _50;
        _417 = math::orders::validate_fill_price(move _418, move _419, move _420, move _421, move _422, const true) -> [return: bb189, unwind continue];
    }

    bb189: {
        StorageDead(_422);
        StorageDead(_421);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_418);
        _416 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _417) -> [return: bb190, unwind continue];
    }

    bb190: {
        StorageDead(_417);
        _423 = discriminant(_416);
        switchInt(move _423) -> [0: bb191, 1: bb192, otherwise: bb11];
    }

    bb191: {
        StorageLive(_427);
        _427 = ((_416 as Continue).0: ());
        _415 = _427;
        StorageDead(_427);
        StorageDead(_416);
        StorageDead(_415);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = _394;
        StorageLive(_432);
        _432 = _393;
        StorageLive(_433);
        _433 = _413;
        StorageLive(_434);
        _434 = _145;
        StorageLive(_435);
        _435 = _127;
        _430 = math::orders::validate_fill_price(move _431, move _432, move _433, move _434, move _435, const false) -> [return: bb194, unwind continue];
    }

    bb192: {
        StorageLive(_424);
        _424 = ((_416 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_426);
        _426 = _424;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _426) -> [return: bb193, unwind continue];
    }

    bb193: {
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_416);
        StorageDead(_415);
        goto -> bb530;
    }

    bb194: {
        StorageDead(_435);
        StorageDead(_434);
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_431);
        _429 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _430) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_430);
        _436 = discriminant(_429);
        switchInt(move _436) -> [0: bb196, 1: bb197, otherwise: bb11];
    }

    bb196: {
        StorageLive(_440);
        _440 = ((_429 as Continue).0: ());
        _428 = _440;
        StorageDead(_440);
        StorageDead(_429);
        StorageDead(_428);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &_11;
        _442 = Option::<&mut User>::is_some(move _443) -> [return: bb199, unwind continue];
    }

    bb197: {
        StorageLive(_437);
        _437 = ((_429 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_439);
        _439 = _437;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _439) -> [return: bb198, unwind continue];
    }

    bb198: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_429);
        StorageDead(_428);
        goto -> bb530;
    }

    bb199: {
        switchInt(move _442) -> [0: bb206, otherwise: bb200];
    }

    bb200: {
        StorageDead(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = _127;
        StorageLive(_447);
        _447 = _145;
        StorageLive(_448);
        _448 = _36;
        _445 = calculate_filler_multiplier_for_matched_orders(move _446, move _447, move _448) -> [return: bb201, unwind continue];
    }

    bb201: {
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_446);
        _444 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _445) -> [return: bb202, unwind continue];
    }

    bb202: {
        StorageDead(_445);
        _449 = discriminant(_444);
        switchInt(move _449) -> [0: bb203, 1: bb204, otherwise: bb11];
    }

    bb203: {
        StorageLive(_453);
        _453 = ((_444 as Continue).0: u64);
        _441 = _453;
        StorageDead(_453);
        StorageDead(_444);
        goto -> bb207;
    }

    bb204: {
        StorageLive(_450);
        _450 = ((_444 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_452);
        _452 = _450;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _452) -> [return: bb205, unwind continue];
    }

    bb205: {
        StorageDead(_452);
        StorageDead(_450);
        StorageDead(_444);
        StorageDead(_442);
        goto -> bb529;
    }

    bb206: {
        StorageDead(_443);
        _441 = const 0_u64;
        goto -> bb207;
    }

    bb207: {
        StorageDead(_442);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = &(*_4);
        StorageLive(_462);
        _462 = &(*_8);
        StorageLive(_463);
        _463 = _394;
        StorageLive(_464);
        _464 = &(*_17);
        StorageLive(_465);
        _465 = _119;
        StorageLive(_466);
        _466 = _15;
        StorageLive(_467);
        _467 = _441;
        StorageLive(_468);
        StorageLive(_469);
        _1130 = const _;
        _469 = &(*_1130);
        _468 = &(*_469);
        StorageLive(_471);
        StorageLive(_472);
        _1129 = const _;
        _472 = &(*_1129);
        _471 = &(*_472);
        StorageLive(_474);
        _474 = ((*_1).49: i16);
        _460 = calculate_fee_for_fulfillment_with_match(move _461, move _462, move _463, move _464, move _465, move _466, move _467, const false, move _468, move _471, move _474, const false) -> [return: bb208, unwind continue];
    }

    bb208: {
        StorageDead(_474);
        StorageDead(_471);
        StorageDead(_468);
        StorageDead(_467);
        StorageDead(_466);
        StorageDead(_465);
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_462);
        StorageDead(_461);
        _459 = <std::result::Result<FillFees, error::ErrorCode> as Try>::branch(move _460) -> [return: bb209, unwind continue];
    }

    bb209: {
        StorageDead(_460);
        _475 = discriminant(_459);
        switchInt(move _475) -> [0: bb210, 1: bb211, otherwise: bb11];
    }

    bb210: {
        StorageLive(_479);
        _479 = move ((_459 as Continue).0: math::fees::FillFees);
        _458 = move _479;
        StorageDead(_479);
        StorageLive(_454);
        _454 = (_458.0: u64);
        StorageLive(_455);
        _455 = (_458.1: u64);
        StorageLive(_456);
        _456 = (_458.4: u64);
        StorageLive(_457);
        _457 = (_458.2: i64);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_459);
        StorageDead(_458);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = _393;
        _485 = <u64 as Cast>::cast::<u128>(move _486) -> [return: bb213, unwind continue];
    }

    bb211: {
        StorageLive(_476);
        _476 = ((_459 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_478);
        _478 = _476;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _478) -> [return: bb212, unwind continue];
    }

    bb212: {
        StorageDead(_478);
        StorageDead(_476);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_459);
        StorageDead(_458);
        goto -> bb529;
    }

    bb213: {
        StorageDead(_486);
        _484 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _485) -> [return: bb214, unwind continue];
    }

    bb214: {
        StorageDead(_485);
        _487 = discriminant(_484);
        switchInt(move _487) -> [0: bb215, 1: bb216, otherwise: bb11];
    }

    bb215: {
        StorageLive(_491);
        _491 = ((_484 as Continue).0: u128);
        _483 = _491;
        StorageDead(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        _496 = _5;
        _497 = Len(((*_3).5: [state::user::Order; 32]));
        _498 = Lt(_496, _497);
        assert(move _498, "index out of bounds: the length is {} but the index is {}", move _497, _496) -> [success: bb218, unwind continue];
    }

    bb216: {
        StorageLive(_488);
        _488 = ((_484 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_490);
        _490 = _488;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _490) -> [return: bb217, unwind continue];
    }

    bb217: {
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_483);
        StorageDead(_482);
        goto -> bb527;
    }

    bb218: {
        _495 = &((*_3).5: [state::user::Order; 32])[_496];
        StorageLive(_499);
        _499 = AssetType::Base;
        _494 = Order::get_spot_position_update_direction(move _495, move _499) -> [return: bb219, unwind continue];
    }

    bb219: {
        StorageDead(_499);
        StorageDead(_495);
        _493 = &_494;
        _492 = &(*_493);
        StorageLive(_500);
        _500 = &mut (*_1);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = _73;
        _504 = Len(((*_3).3: [state::user::SpotPosition; 8]));
        _505 = Lt(_503, _504);
        assert(move _505, "index out of bounds: the length is {} but the index is {}", move _504, _503) -> [success: bb220, unwind continue];
    }

    bb220: {
        _502 = &mut ((*_3).3: [state::user::SpotPosition; 8])[_503];
        _501 = &mut (*_502);
        StorageLive(_506);
        _506 = Option::<u128>::None;
        _482 = update_spot_balances_and_cumulative_deposits(move _483, move _492, move _500, move _501, const false, move _506) -> [return: bb221, unwind continue];
    }

    bb221: {
        StorageDead(_506);
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_492);
        StorageDead(_483);
        _481 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _482) -> [return: bb222, unwind continue];
    }

    bb222: {
        StorageDead(_482);
        _507 = discriminant(_481);
        switchInt(move _507) -> [0: bb223, 1: bb224, otherwise: bb11];
    }

    bb223: {
        StorageLive(_511);
        _511 = ((_481 as Continue).0: ());
        _480 = _511;
        StorageDead(_511);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_493);
        StorageDead(_484);
        StorageDead(_481);
        StorageDead(_480);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = _5;
        _515 = Len(((*_3).5: [state::user::Order; 32]));
        _516 = Lt(_514, _515);
        assert(move _516, "index out of bounds: the length is {} but the index is {}", move _515, _514) -> [success: bb226, unwind continue];
    }

    bb224: {
        StorageLive(_508);
        _508 = ((_481 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_510);
        _510 = _508;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _510) -> [return: bb225, unwind continue];
    }

    bb225: {
        StorageDead(_510);
        StorageDead(_508);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_493);
        goto -> bb527;
    }

    bb226: {
        _513 = &(((*_3).5: [state::user::Order; 32])[_514].17: controller::position::PositionDirection);
        _517 = discriminant((*_513));
        switchInt(move _517) -> [0: bb228, 1: bb227, otherwise: bb11];
    }

    bb227: {
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        _529 = _394;
        StorageLive(_530);
        _530 = _454;
        _528 = <u64 as SafeMath>::safe_sub(move _529, move _530) -> [return: bb234, unwind continue];
    }

    bb228: {
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _520 = _394;
        StorageLive(_521);
        _521 = _454;
        _519 = <u64 as SafeMath>::safe_add(move _520, move _521) -> [return: bb229, unwind continue];
    }

    bb229: {
        StorageDead(_521);
        StorageDead(_520);
        _518 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _519) -> [return: bb230, unwind continue];
    }

    bb230: {
        StorageDead(_519);
        _522 = discriminant(_518);
        switchInt(move _522) -> [0: bb231, 1: bb232, otherwise: bb11];
    }

    bb231: {
        StorageLive(_526);
        _526 = ((_518 as Continue).0: u64);
        _512 = _526;
        StorageDead(_526);
        StorageDead(_518);
        goto -> bb239;
    }

    bb232: {
        StorageLive(_523);
        _523 = ((_518 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_525);
        _525 = _523;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _525) -> [return: bb233, unwind continue];
    }

    bb233: {
        StorageDead(_525);
        StorageDead(_523);
        StorageDead(_518);
        goto -> bb525;
    }

    bb234: {
        StorageDead(_530);
        StorageDead(_529);
        _527 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _528) -> [return: bb235, unwind continue];
    }

    bb235: {
        StorageDead(_528);
        _531 = discriminant(_527);
        switchInt(move _531) -> [0: bb236, 1: bb237, otherwise: bb11];
    }

    bb236: {
        StorageLive(_535);
        _535 = ((_527 as Continue).0: u64);
        _512 = _535;
        StorageDead(_535);
        StorageDead(_527);
        goto -> bb239;
    }

    bb237: {
        StorageLive(_532);
        _532 = ((_527 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_534);
        _534 = _532;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _534) -> [return: bb238, unwind continue];
    }

    bb238: {
        StorageDead(_534);
        StorageDead(_532);
        StorageDead(_527);
        goto -> bb525;
    }

    bb239: {
        StorageDead(_514);
        StorageDead(_513);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        _542 = _512;
        _541 = <u64 as Cast>::cast::<u128>(move _542) -> [return: bb240, unwind continue];
    }

    bb240: {
        StorageDead(_542);
        _540 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _541) -> [return: bb241, unwind continue];
    }

    bb241: {
        StorageDead(_541);
        _543 = discriminant(_540);
        switchInt(move _543) -> [0: bb242, 1: bb243, otherwise: bb11];
    }

    bb242: {
        StorageLive(_547);
        _547 = ((_540 as Continue).0: u128);
        _539 = _547;
        StorageDead(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        _552 = _5;
        _553 = Len(((*_3).5: [state::user::Order; 32]));
        _554 = Lt(_552, _553);
        assert(move _554, "index out of bounds: the length is {} but the index is {}", move _553, _552) -> [success: bb245, unwind continue];
    }

    bb243: {
        StorageLive(_544);
        _544 = ((_540 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_546);
        _546 = _544;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _546) -> [return: bb244, unwind continue];
    }

    bb244: {
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_539);
        StorageDead(_538);
        goto -> bb524;
    }

    bb245: {
        _551 = &((*_3).5: [state::user::Order; 32])[_552];
        StorageLive(_555);
        _555 = AssetType::Quote;
        _550 = Order::get_spot_position_update_direction(move _551, move _555) -> [return: bb246, unwind continue];
    }

    bb246: {
        StorageDead(_555);
        StorageDead(_551);
        _549 = &_550;
        _548 = &(*_549);
        StorageLive(_556);
        _556 = &mut (*_2);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _559 = &mut (*_3);
        _558 = User::get_quote_spot_position_mut(move _559) -> [return: bb247, unwind continue];
    }

    bb247: {
        _557 = &mut (*_558);
        StorageDead(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _564 = _394;
        _563 = <u64 as Cast>::cast::<u128>(move _564) -> [return: bb248, unwind continue];
    }

    bb248: {
        StorageDead(_564);
        _562 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _563) -> [return: bb249, unwind continue];
    }

    bb249: {
        StorageDead(_563);
        _565 = discriminant(_562);
        switchInt(move _565) -> [0: bb250, 1: bb251, otherwise: bb11];
    }

    bb250: {
        StorageLive(_569);
        _569 = ((_562 as Continue).0: u128);
        _561 = _569;
        StorageDead(_569);
        _560 = Option::<u128>::Some(move _561);
        StorageDead(_561);
        _538 = update_spot_balances_and_cumulative_deposits(move _539, move _548, move _556, move _557, const false, move _560) -> [return: bb253, unwind continue];
    }

    bb251: {
        StorageLive(_566);
        _566 = ((_562 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_568);
        _568 = _566;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _568) -> [return: bb252, unwind continue];
    }

    bb252: {
        StorageDead(_568);
        StorageDead(_566);
        StorageDead(_561);
        StorageDead(_560);
        StorageDead(_557);
        StorageDead(_556);
        StorageDead(_548);
        StorageDead(_539);
        StorageDead(_538);
        goto -> bb523;
    }

    bb253: {
        StorageDead(_560);
        StorageDead(_557);
        StorageDead(_556);
        StorageDead(_548);
        StorageDead(_539);
        _537 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _538) -> [return: bb254, unwind continue];
    }

    bb254: {
        StorageDead(_538);
        _570 = discriminant(_537);
        switchInt(move _570) -> [0: bb255, 1: bb256, otherwise: bb11];
    }

    bb255: {
        StorageLive(_574);
        _574 = ((_537 as Continue).0: ());
        _536 = _574;
        StorageDead(_574);
        StorageDead(_562);
        StorageDead(_558);
        StorageDead(_552);
        StorageDead(_550);
        StorageDead(_549);
        StorageDead(_540);
        StorageDead(_537);
        StorageDead(_536);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        _578 = &mut (*_3);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        _583 = _454;
        _582 = <u64 as Cast>::cast::<i64>(move _583) -> [return: bb258, unwind continue];
    }

    bb256: {
        StorageLive(_571);
        _571 = ((_537 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_573);
        _573 = _571;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _573) -> [return: bb257, unwind continue];
    }

    bb257: {
        StorageDead(_573);
        StorageDead(_571);
        goto -> bb523;
    }

    bb258: {
        StorageDead(_583);
        _581 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _582) -> [return: bb259, unwind continue];
    }

    bb259: {
        StorageDead(_582);
        _584 = discriminant(_581);
        switchInt(move _584) -> [0: bb260, 1: bb261, otherwise: bb11];
    }

    bb260: {
        StorageLive(_588);
        _588 = ((_581 as Continue).0: i64);
        _580 = _588;
        StorageDead(_588);
        _589 = Eq(_580, const i64::MIN);
        assert(!move _589, "attempt to negate `{}`, which would overflow", _580) -> [success: bb263, unwind continue];
    }

    bb261: {
        StorageLive(_585);
        _585 = ((_581 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_587);
        _587 = _585;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _587) -> [return: bb262, unwind continue];
    }

    bb262: {
        StorageDead(_587);
        StorageDead(_585);
        StorageDead(_580);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_577);
        goto -> bb522;
    }

    bb263: {
        _579 = Neg(move _580);
        StorageDead(_580);
        _577 = User::update_cumulative_spot_fees(move _578, move _579) -> [return: bb264, unwind continue];
    }

    bb264: {
        StorageDead(_579);
        StorageDead(_578);
        _576 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _577) -> [return: bb265, unwind continue];
    }

    bb265: {
        StorageDead(_577);
        _590 = discriminant(_576);
        switchInt(move _590) -> [0: bb266, 1: bb267, otherwise: bb11];
    }

    bb266: {
        StorageLive(_594);
        _594 = ((_576 as Continue).0: ());
        _575 = _594;
        StorageDead(_594);
        StorageDead(_581);
        StorageDead(_576);
        StorageDead(_575);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        _600 = _5;
        _601 = Len(((*_3).5: [state::user::Order; 32]));
        _602 = Lt(_600, _601);
        assert(move _602, "index out of bounds: the length is {} but the index is {}", move _601, _600) -> [success: bb269, unwind continue];
    }

    bb267: {
        StorageLive(_591);
        _591 = ((_576 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_593);
        _593 = _591;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _593) -> [return: bb268, unwind continue];
    }

    bb268: {
        StorageDead(_593);
        StorageDead(_591);
        goto -> bb522;
    }

    bb269: {
        _599 = &mut ((*_3).5: [state::user::Order; 32])[_600];
        _598 = &mut (*_599);
        StorageLive(_603);
        _603 = _393;
        StorageLive(_604);
        _604 = _394;
        _597 = update_order_after_fill(move _598, move _603, move _604) -> [return: bb270, unwind continue];
    }

    bb270: {
        StorageDead(_604);
        StorageDead(_603);
        StorageDead(_598);
        _596 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _597) -> [return: bb271, unwind continue];
    }

    bb271: {
        StorageDead(_597);
        _605 = discriminant(_596);
        switchInt(move _605) -> [0: bb272, 1: bb273, otherwise: bb11];
    }

    bb272: {
        StorageLive(_609);
        _609 = ((_596 as Continue).0: ());
        _595 = _609;
        StorageDead(_609);
        StorageDead(_600);
        StorageDead(_599);
        StorageDead(_596);
        StorageDead(_595);
        StorageLive(_610);
        StorageLive(_611);
        _611 = _5;
        _612 = Len(((*_3).5: [state::user::Order; 32]));
        _613 = Lt(_611, _612);
        assert(move _613, "index out of bounds: the length is {} but the index is {}", move _612, _611) -> [success: bb275, unwind continue];
    }

    bb273: {
        StorageLive(_606);
        _606 = ((_596 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_608);
        _608 = _606;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _608) -> [return: bb274, unwind continue];
    }

    bb274: {
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_600);
        StorageDead(_599);
        StorageDead(_596);
        StorageDead(_595);
        goto -> bb526;
    }

    bb275: {
        _610 = (((*_3).5: [state::user::Order; 32])[_611].17: controller::position::PositionDirection);
        StorageDead(_611);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        _616 = _5;
        _617 = Len(((*_3).5: [state::user::Order; 32]));
        _618 = Lt(_616, _617);
        assert(move _618, "index out of bounds: the length is {} but the index is {}", move _617, _616) -> [success: bb276, unwind continue];
    }

    bb276: {
        _615 = &((*_3).5: [state::user::Order; 32])[_616];
        _614 = Order::update_open_bids_and_asks(move _615) -> [return: bb277, unwind continue];
    }

    bb277: {
        StorageDead(_615);
        StorageDead(_616);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        _624 = _73;
        _625 = Len(((*_3).3: [state::user::SpotPosition; 8]));
        _626 = Lt(_624, _625);
        assert(move _626, "index out of bounds: the length is {} but the index is {}", move _625, _624) -> [success: bb278, unwind continue];
    }

    bb278: {
        _623 = &mut ((*_3).3: [state::user::SpotPosition; 8])[_624];
        _622 = &mut (*_623);
        StorageLive(_627);
        StorageLive(_628);
        _628 = &_610;
        _627 = &(*_628);
        StorageLive(_629);
        _629 = _393;
        StorageLive(_630);
        _630 = _614;
        _621 = decrease_spot_open_bids_and_asks(move _622, move _627, move _629, move _630) -> [return: bb279, unwind continue];
    }

    bb279: {
        StorageDead(_630);
        StorageDead(_629);
        StorageDead(_627);
        StorageDead(_622);
        _620 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _621) -> [return: bb280, unwind continue];
    }

    bb280: {
        StorageDead(_621);
        _631 = discriminant(_620);
        switchInt(move _631) -> [0: bb281, 1: bb282, otherwise: bb11];
    }

    bb281: {
        StorageLive(_635);
        _635 = ((_620 as Continue).0: ());
        _619 = _635;
        StorageDead(_635);
        StorageDead(_628);
        StorageDead(_624);
        StorageDead(_623);
        StorageDead(_620);
        StorageDead(_619);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        _639 = &mut (*_4);
        StorageLive(_640);
        _640 = ((*_1).58: u8);
        StorageLive(_641);
        _641 = _394;
        StorageLive(_642);
        _642 = _14;
        _638 = UserStats::update_taker_volume_30d(move _639, move _640, move _641, move _642) -> [return: bb284, unwind continue];
    }

    bb282: {
        StorageLive(_632);
        _632 = ((_620 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_634);
        _634 = _632;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _634) -> [return: bb283, unwind continue];
    }

    bb283: {
        StorageDead(_634);
        StorageDead(_632);
        StorageDead(_628);
        StorageDead(_624);
        StorageDead(_623);
        StorageDead(_620);
        StorageDead(_619);
        goto -> bb521;
    }

    bb284: {
        StorageDead(_642);
        StorageDead(_641);
        StorageDead(_640);
        StorageDead(_639);
        _637 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _638) -> [return: bb285, unwind continue];
    }

    bb285: {
        StorageDead(_638);
        _643 = discriminant(_637);
        switchInt(move _643) -> [0: bb286, 1: bb287, otherwise: bb11];
    }

    bb286: {
        StorageLive(_647);
        _647 = ((_637 as Continue).0: ());
        _636 = _647;
        StorageDead(_647);
        StorageDead(_637);
        StorageDead(_636);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        _651 = &mut (*_4);
        StorageLive(_652);
        _652 = _454;
        _650 = UserStats::increment_total_fees(move _651, move _652) -> [return: bb289, unwind continue];
    }

    bb287: {
        StorageLive(_644);
        _644 = ((_637 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_646);
        _646 = _644;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _646) -> [return: bb288, unwind continue];
    }

    bb288: {
        StorageDead(_646);
        StorageDead(_644);
        StorageDead(_637);
        StorageDead(_636);
        goto -> bb521;
    }

    bb289: {
        StorageDead(_652);
        StorageDead(_651);
        _649 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _650) -> [return: bb290, unwind continue];
    }

    bb290: {
        StorageDead(_650);
        _653 = discriminant(_649);
        switchInt(move _653) -> [0: bb291, 1: bb292, otherwise: bb11];
    }

    bb291: {
        StorageLive(_657);
        _657 = ((_649 as Continue).0: ());
        _648 = _657;
        StorageDead(_657);
        StorageDead(_649);
        StorageDead(_648);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        _664 = _393;
        _663 = <u64 as Cast>::cast::<u128>(move _664) -> [return: bb294, unwind continue];
    }

    bb292: {
        StorageLive(_654);
        _654 = ((_649 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_656);
        _656 = _654;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _656) -> [return: bb293, unwind continue];
    }

    bb293: {
        StorageDead(_656);
        StorageDead(_654);
        StorageDead(_649);
        StorageDead(_648);
        goto -> bb521;
    }

    bb294: {
        StorageDead(_664);
        _662 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _663) -> [return: bb295, unwind continue];
    }

    bb295: {
        StorageDead(_663);
        _665 = discriminant(_662);
        switchInt(move _665) -> [0: bb296, 1: bb297, otherwise: bb11];
    }

    bb296: {
        StorageLive(_669);
        _669 = ((_662 as Continue).0: u128);
        _661 = _669;
        StorageDead(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        _674 = _9;
        _675 = Len(((*_7).5: [state::user::Order; 32]));
        _676 = Lt(_674, _675);
        assert(move _676, "index out of bounds: the length is {} but the index is {}", move _675, _674) -> [success: bb299, unwind continue];
    }

    bb297: {
        StorageLive(_666);
        _666 = ((_662 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_668);
        _668 = _666;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _668) -> [return: bb298, unwind continue];
    }

    bb298: {
        StorageDead(_668);
        StorageDead(_666);
        StorageDead(_661);
        StorageDead(_660);
        goto -> bb520;
    }

    bb299: {
        _673 = &((*_7).5: [state::user::Order; 32])[_674];
        StorageLive(_677);
        _677 = AssetType::Base;
        _672 = Order::get_spot_position_update_direction(move _673, move _677) -> [return: bb300, unwind continue];
    }

    bb300: {
        StorageDead(_677);
        StorageDead(_673);
        _671 = &_672;
        _670 = &(*_671);
        StorageLive(_678);
        _678 = &mut (*_1);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        _681 = _149;
        _682 = Len(((*_7).3: [state::user::SpotPosition; 8]));
        _683 = Lt(_681, _682);
        assert(move _683, "index out of bounds: the length is {} but the index is {}", move _682, _681) -> [success: bb301, unwind continue];
    }

    bb301: {
        _680 = &mut ((*_7).3: [state::user::SpotPosition; 8])[_681];
        _679 = &mut (*_680);
        StorageLive(_684);
        _684 = Option::<u128>::None;
        _660 = update_spot_balances_and_cumulative_deposits(move _661, move _670, move _678, move _679, const false, move _684) -> [return: bb302, unwind continue];
    }

    bb302: {
        StorageDead(_684);
        StorageDead(_679);
        StorageDead(_678);
        StorageDead(_670);
        StorageDead(_661);
        _659 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _660) -> [return: bb303, unwind continue];
    }

    bb303: {
        StorageDead(_660);
        _685 = discriminant(_659);
        switchInt(move _685) -> [0: bb304, 1: bb305, otherwise: bb11];
    }

    bb304: {
        StorageLive(_689);
        _689 = ((_659 as Continue).0: ());
        _658 = _689;
        StorageDead(_689);
        StorageDead(_681);
        StorageDead(_680);
        StorageDead(_674);
        StorageDead(_672);
        StorageDead(_671);
        StorageDead(_662);
        StorageDead(_659);
        StorageDead(_658);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        _692 = _9;
        _693 = Len(((*_7).5: [state::user::Order; 32]));
        _694 = Lt(_692, _693);
        assert(move _694, "index out of bounds: the length is {} but the index is {}", move _693, _692) -> [success: bb307, unwind continue];
    }

    bb305: {
        StorageLive(_686);
        _686 = ((_659 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_688);
        _688 = _686;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _688) -> [return: bb306, unwind continue];
    }

    bb306: {
        StorageDead(_688);
        StorageDead(_686);
        StorageDead(_681);
        StorageDead(_680);
        StorageDead(_674);
        StorageDead(_672);
        StorageDead(_671);
        goto -> bb520;
    }

    bb307: {
        _691 = &(((*_7).5: [state::user::Order; 32])[_692].17: controller::position::PositionDirection);
        _695 = discriminant((*_691));
        switchInt(move _695) -> [0: bb309, 1: bb308, otherwise: bb11];
    }

    bb308: {
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        _707 = _394;
        StorageLive(_708);
        _708 = _455;
        _706 = <u64 as SafeMath>::safe_add(move _707, move _708) -> [return: bb315, unwind continue];
    }

    bb309: {
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        _698 = _394;
        StorageLive(_699);
        _699 = _455;
        _697 = <u64 as SafeMath>::safe_sub(move _698, move _699) -> [return: bb310, unwind continue];
    }

    bb310: {
        StorageDead(_699);
        StorageDead(_698);
        _696 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _697) -> [return: bb311, unwind continue];
    }

    bb311: {
        StorageDead(_697);
        _700 = discriminant(_696);
        switchInt(move _700) -> [0: bb312, 1: bb313, otherwise: bb11];
    }

    bb312: {
        StorageLive(_704);
        _704 = ((_696 as Continue).0: u64);
        _690 = _704;
        StorageDead(_704);
        StorageDead(_696);
        goto -> bb320;
    }

    bb313: {
        StorageLive(_701);
        _701 = ((_696 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_703);
        _703 = _701;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _703) -> [return: bb314, unwind continue];
    }

    bb314: {
        StorageDead(_703);
        StorageDead(_701);
        StorageDead(_696);
        goto -> bb518;
    }

    bb315: {
        StorageDead(_708);
        StorageDead(_707);
        _705 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _706) -> [return: bb316, unwind continue];
    }

    bb316: {
        StorageDead(_706);
        _709 = discriminant(_705);
        switchInt(move _709) -> [0: bb317, 1: bb318, otherwise: bb11];
    }

    bb317: {
        StorageLive(_713);
        _713 = ((_705 as Continue).0: u64);
        _690 = _713;
        StorageDead(_713);
        StorageDead(_705);
        goto -> bb320;
    }

    bb318: {
        StorageLive(_710);
        _710 = ((_705 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_712);
        _712 = _710;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _712) -> [return: bb319, unwind continue];
    }

    bb319: {
        StorageDead(_712);
        StorageDead(_710);
        StorageDead(_705);
        goto -> bb518;
    }

    bb320: {
        StorageDead(_692);
        StorageDead(_691);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        _720 = _690;
        _719 = <u64 as Cast>::cast::<u128>(move _720) -> [return: bb321, unwind continue];
    }

    bb321: {
        StorageDead(_720);
        _718 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _719) -> [return: bb322, unwind continue];
    }

    bb322: {
        StorageDead(_719);
        _721 = discriminant(_718);
        switchInt(move _721) -> [0: bb323, 1: bb324, otherwise: bb11];
    }

    bb323: {
        StorageLive(_725);
        _725 = ((_718 as Continue).0: u128);
        _717 = _725;
        StorageDead(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        _730 = _9;
        _731 = Len(((*_7).5: [state::user::Order; 32]));
        _732 = Lt(_730, _731);
        assert(move _732, "index out of bounds: the length is {} but the index is {}", move _731, _730) -> [success: bb326, unwind continue];
    }

    bb324: {
        StorageLive(_722);
        _722 = ((_718 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_724);
        _724 = _722;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _724) -> [return: bb325, unwind continue];
    }

    bb325: {
        StorageDead(_724);
        StorageDead(_722);
        StorageDead(_717);
        StorageDead(_716);
        goto -> bb517;
    }

    bb326: {
        _729 = &((*_7).5: [state::user::Order; 32])[_730];
        StorageLive(_733);
        _733 = AssetType::Quote;
        _728 = Order::get_spot_position_update_direction(move _729, move _733) -> [return: bb327, unwind continue];
    }

    bb327: {
        StorageDead(_733);
        StorageDead(_729);
        _727 = &_728;
        _726 = &(*_727);
        StorageLive(_734);
        _734 = &mut (*_2);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        _737 = &mut (*_7);
        _736 = User::get_quote_spot_position_mut(move _737) -> [return: bb328, unwind continue];
    }

    bb328: {
        _735 = &mut (*_736);
        StorageDead(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        _742 = _394;
        _741 = <u64 as Cast>::cast::<u128>(move _742) -> [return: bb329, unwind continue];
    }

    bb329: {
        StorageDead(_742);
        _740 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _741) -> [return: bb330, unwind continue];
    }

    bb330: {
        StorageDead(_741);
        _743 = discriminant(_740);
        switchInt(move _743) -> [0: bb331, 1: bb332, otherwise: bb11];
    }

    bb331: {
        StorageLive(_747);
        _747 = ((_740 as Continue).0: u128);
        _739 = _747;
        StorageDead(_747);
        _738 = Option::<u128>::Some(move _739);
        StorageDead(_739);
        _716 = update_spot_balances_and_cumulative_deposits(move _717, move _726, move _734, move _735, const false, move _738) -> [return: bb334, unwind continue];
    }

    bb332: {
        StorageLive(_744);
        _744 = ((_740 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_746);
        _746 = _744;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _746) -> [return: bb333, unwind continue];
    }

    bb333: {
        StorageDead(_746);
        StorageDead(_744);
        StorageDead(_739);
        StorageDead(_738);
        StorageDead(_735);
        StorageDead(_734);
        StorageDead(_726);
        StorageDead(_717);
        StorageDead(_716);
        goto -> bb516;
    }

    bb334: {
        StorageDead(_738);
        StorageDead(_735);
        StorageDead(_734);
        StorageDead(_726);
        StorageDead(_717);
        _715 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _716) -> [return: bb335, unwind continue];
    }

    bb335: {
        StorageDead(_716);
        _748 = discriminant(_715);
        switchInt(move _748) -> [0: bb336, 1: bb337, otherwise: bb11];
    }

    bb336: {
        StorageLive(_752);
        _752 = ((_715 as Continue).0: ());
        _714 = _752;
        StorageDead(_752);
        StorageDead(_740);
        StorageDead(_736);
        StorageDead(_730);
        StorageDead(_728);
        StorageDead(_727);
        StorageDead(_718);
        StorageDead(_715);
        StorageDead(_714);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        _756 = &mut (*_7);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        _760 = _455;
        _759 = <u64 as Cast>::cast::<i64>(move _760) -> [return: bb339, unwind continue];
    }

    bb337: {
        StorageLive(_749);
        _749 = ((_715 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_751);
        _751 = _749;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _751) -> [return: bb338, unwind continue];
    }

    bb338: {
        StorageDead(_751);
        StorageDead(_749);
        goto -> bb516;
    }

    bb339: {
        StorageDead(_760);
        _758 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _759) -> [return: bb340, unwind continue];
    }

    bb340: {
        StorageDead(_759);
        _761 = discriminant(_758);
        switchInt(move _761) -> [0: bb341, 1: bb342, otherwise: bb11];
    }

    bb341: {
        StorageLive(_765);
        _765 = ((_758 as Continue).0: i64);
        _757 = _765;
        StorageDead(_765);
        _755 = User::update_cumulative_spot_fees(move _756, move _757) -> [return: bb344, unwind continue];
    }

    bb342: {
        StorageLive(_762);
        _762 = ((_758 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_764);
        _764 = _762;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _764) -> [return: bb343, unwind continue];
    }

    bb343: {
        StorageDead(_764);
        StorageDead(_762);
        StorageDead(_757);
        StorageDead(_756);
        StorageDead(_755);
        goto -> bb515;
    }

    bb344: {
        StorageDead(_757);
        StorageDead(_756);
        _754 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _755) -> [return: bb345, unwind continue];
    }

    bb345: {
        StorageDead(_755);
        _766 = discriminant(_754);
        switchInt(move _766) -> [0: bb346, 1: bb347, otherwise: bb11];
    }

    bb346: {
        StorageLive(_770);
        _770 = ((_754 as Continue).0: ());
        _753 = _770;
        StorageDead(_770);
        StorageDead(_758);
        StorageDead(_754);
        StorageDead(_753);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        _776 = _9;
        _777 = Len(((*_7).5: [state::user::Order; 32]));
        _778 = Lt(_776, _777);
        assert(move _778, "index out of bounds: the length is {} but the index is {}", move _777, _776) -> [success: bb349, unwind continue];
    }

    bb347: {
        StorageLive(_767);
        _767 = ((_754 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_769);
        _769 = _767;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _769) -> [return: bb348, unwind continue];
    }

    bb348: {
        StorageDead(_769);
        StorageDead(_767);
        goto -> bb515;
    }

    bb349: {
        _775 = &mut ((*_7).5: [state::user::Order; 32])[_776];
        _774 = &mut (*_775);
        StorageLive(_779);
        _779 = _393;
        StorageLive(_780);
        _780 = _394;
        _773 = update_order_after_fill(move _774, move _779, move _780) -> [return: bb350, unwind continue];
    }

    bb350: {
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_774);
        _772 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _773) -> [return: bb351, unwind continue];
    }

    bb351: {
        StorageDead(_773);
        _781 = discriminant(_772);
        switchInt(move _781) -> [0: bb352, 1: bb353, otherwise: bb11];
    }

    bb352: {
        StorageLive(_785);
        _785 = ((_772 as Continue).0: ());
        _771 = _785;
        StorageDead(_785);
        StorageDead(_776);
        StorageDead(_775);
        StorageDead(_772);
        StorageDead(_771);
        StorageLive(_786);
        StorageLive(_787);
        _787 = _9;
        _788 = Len(((*_7).5: [state::user::Order; 32]));
        _789 = Lt(_787, _788);
        assert(move _789, "index out of bounds: the length is {} but the index is {}", move _788, _787) -> [success: bb355, unwind continue];
    }

    bb353: {
        StorageLive(_782);
        _782 = ((_772 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_784);
        _784 = _782;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _784) -> [return: bb354, unwind continue];
    }

    bb354: {
        StorageDead(_784);
        StorageDead(_782);
        StorageDead(_776);
        StorageDead(_775);
        StorageDead(_772);
        StorageDead(_771);
        goto -> bb519;
    }

    bb355: {
        _786 = (((*_7).5: [state::user::Order; 32])[_787].17: controller::position::PositionDirection);
        StorageDead(_787);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        _792 = _9;
        _793 = Len(((*_7).5: [state::user::Order; 32]));
        _794 = Lt(_792, _793);
        assert(move _794, "index out of bounds: the length is {} but the index is {}", move _793, _792) -> [success: bb356, unwind continue];
    }

    bb356: {
        _791 = &((*_7).5: [state::user::Order; 32])[_792];
        _790 = Order::update_open_bids_and_asks(move _791) -> [return: bb357, unwind continue];
    }

    bb357: {
        StorageDead(_791);
        StorageDead(_792);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        StorageLive(_800);
        _800 = _149;
        _801 = Len(((*_7).3: [state::user::SpotPosition; 8]));
        _802 = Lt(_800, _801);
        assert(move _802, "index out of bounds: the length is {} but the index is {}", move _801, _800) -> [success: bb358, unwind continue];
    }

    bb358: {
        _799 = &mut ((*_7).3: [state::user::SpotPosition; 8])[_800];
        _798 = &mut (*_799);
        StorageLive(_803);
        StorageLive(_804);
        _804 = &_786;
        _803 = &(*_804);
        StorageLive(_805);
        _805 = _393;
        StorageLive(_806);
        _806 = _790;
        _797 = decrease_spot_open_bids_and_asks(move _798, move _803, move _805, move _806) -> [return: bb359, unwind continue];
    }

    bb359: {
        StorageDead(_806);
        StorageDead(_805);
        StorageDead(_803);
        StorageDead(_798);
        _796 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _797) -> [return: bb360, unwind continue];
    }

    bb360: {
        StorageDead(_797);
        _807 = discriminant(_796);
        switchInt(move _807) -> [0: bb361, 1: bb362, otherwise: bb11];
    }

    bb361: {
        StorageLive(_811);
        _811 = ((_796 as Continue).0: ());
        _795 = _811;
        StorageDead(_811);
        StorageDead(_804);
        StorageDead(_800);
        StorageDead(_799);
        StorageDead(_796);
        StorageDead(_795);
        StorageLive(_812);
        _813 = discriminant((*_8));
        switchInt(move _813) -> [1: bb365, otherwise: bb364];
    }

    bb362: {
        StorageLive(_808);
        _808 = ((_796 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_810);
        _810 = _808;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _810) -> [return: bb363, unwind continue];
    }

    bb363: {
        StorageDead(_810);
        StorageDead(_808);
        StorageDead(_804);
        StorageDead(_800);
        StorageDead(_799);
        StorageDead(_796);
        StorageDead(_795);
        goto -> bb514;
    }

    bb364: {
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        _840 = &mut (*_4);
        StorageLive(_841);
        _841 = ((*_1).59: u8);
        StorageLive(_842);
        _842 = _394;
        StorageLive(_843);
        _843 = _14;
        _839 = UserStats::update_maker_volume_30d(move _840, move _841, move _842, move _843) -> [return: bb376, unwind continue];
    }

    bb365: {
        StorageLive(_814);
        _814 = &mut (((*_8) as Some).0: &mut state::user::UserStats);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        StorageLive(_818);
        _1132 = deref_copy (*_814);
        _818 = &mut (*_1132);
        StorageLive(_819);
        _819 = ((*_1).59: u8);
        StorageLive(_820);
        _820 = _394;
        StorageLive(_821);
        _821 = _14;
        _817 = UserStats::update_maker_volume_30d(move _818, move _819, move _820, move _821) -> [return: bb366, unwind continue];
    }

    bb366: {
        StorageDead(_821);
        StorageDead(_820);
        StorageDead(_819);
        StorageDead(_818);
        _816 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _817) -> [return: bb367, unwind continue];
    }

    bb367: {
        StorageDead(_817);
        _822 = discriminant(_816);
        switchInt(move _822) -> [0: bb368, 1: bb369, otherwise: bb11];
    }

    bb368: {
        StorageLive(_826);
        _826 = ((_816 as Continue).0: ());
        _815 = _826;
        StorageDead(_826);
        StorageDead(_816);
        StorageDead(_815);
        StorageLive(_827);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        _1133 = deref_copy (*_814);
        _830 = &mut (*_1133);
        StorageLive(_831);
        _831 = _455;
        _829 = UserStats::increment_total_rebate(move _830, move _831) -> [return: bb371, unwind continue];
    }

    bb369: {
        StorageLive(_823);
        _823 = ((_816 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_825);
        _825 = _823;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _825) -> [return: bb370, unwind continue];
    }

    bb370: {
        StorageDead(_825);
        StorageDead(_823);
        StorageDead(_816);
        StorageDead(_815);
        goto -> bb512;
    }

    bb371: {
        StorageDead(_831);
        StorageDead(_830);
        _828 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _829) -> [return: bb372, unwind continue];
    }

    bb372: {
        StorageDead(_829);
        _832 = discriminant(_828);
        switchInt(move _832) -> [0: bb373, 1: bb374, otherwise: bb11];
    }

    bb373: {
        StorageLive(_836);
        _836 = ((_828 as Continue).0: ());
        _827 = _836;
        StorageDead(_836);
        StorageDead(_828);
        StorageDead(_827);
        _812 = const ();
        StorageDead(_814);
        goto -> bb386;
    }

    bb374: {
        StorageLive(_833);
        _833 = ((_828 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_835);
        _835 = _833;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _835) -> [return: bb375, unwind continue];
    }

    bb375: {
        StorageDead(_835);
        StorageDead(_833);
        StorageDead(_828);
        StorageDead(_827);
        goto -> bb512;
    }

    bb376: {
        StorageDead(_843);
        StorageDead(_842);
        StorageDead(_841);
        StorageDead(_840);
        _838 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _839) -> [return: bb377, unwind continue];
    }

    bb377: {
        StorageDead(_839);
        _844 = discriminant(_838);
        switchInt(move _844) -> [0: bb378, 1: bb379, otherwise: bb11];
    }

    bb378: {
        StorageLive(_848);
        _848 = ((_838 as Continue).0: ());
        _837 = _848;
        StorageDead(_848);
        StorageDead(_838);
        StorageDead(_837);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        _852 = &mut (*_4);
        StorageLive(_853);
        _853 = _455;
        _851 = UserStats::increment_total_rebate(move _852, move _853) -> [return: bb381, unwind continue];
    }

    bb379: {
        StorageLive(_845);
        _845 = ((_838 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_847);
        _847 = _845;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _847) -> [return: bb380, unwind continue];
    }

    bb380: {
        StorageDead(_847);
        StorageDead(_845);
        StorageDead(_838);
        StorageDead(_837);
        goto -> bb513;
    }

    bb381: {
        StorageDead(_853);
        StorageDead(_852);
        _850 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _851) -> [return: bb382, unwind continue];
    }

    bb382: {
        StorageDead(_851);
        _854 = discriminant(_850);
        switchInt(move _854) -> [0: bb383, 1: bb384, otherwise: bb11];
    }

    bb383: {
        StorageLive(_858);
        _858 = ((_850 as Continue).0: ());
        _849 = _858;
        StorageDead(_858);
        StorageDead(_850);
        StorageDead(_849);
        _812 = const ();
        goto -> bb386;
    }

    bb384: {
        StorageLive(_855);
        _855 = ((_850 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_857);
        _857 = _855;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _857) -> [return: bb385, unwind continue];
    }

    bb385: {
        StorageDead(_857);
        StorageDead(_855);
        StorageDead(_850);
        StorageDead(_849);
        goto -> bb513;
    }

    bb386: {
        StorageDead(_812);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        _861 = move _11;
        StorageLive(_862);
        _862 = move _12;
        _860 = (move _861, move _862);
        StorageDead(_862);
        StorageDead(_861);
        _864 = discriminant((_860.0: std::option::Option<&mut state::user::User>));
        switchInt(move _864) -> [1: bb387, otherwise: bb419];
    }

    bb387: {
        _863 = discriminant((_860.1: std::option::Option<&mut state::user::UserStats>));
        switchInt(move _863) -> [1: bb388, otherwise: bb419];
    }

    bb388: {
        StorageLive(_865);
        _865 = move (((_860.0: std::option::Option<&mut state::user::User>) as Some).0: &mut state::user::User);
        StorageLive(_866);
        _866 = move (((_860.1: std::option::Option<&mut state::user::UserStats>) as Some).0: &mut state::user::UserStats);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        _869 = _456;
        _868 = Gt(move _869, const 0_u64);
        switchInt(move _868) -> [0: bb411, otherwise: bb389];
    }

    bb389: {
        StorageDead(_869);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        _876 = _456;
        _875 = <u64 as Cast>::cast::<u128>(move _876) -> [return: bb390, unwind continue];
    }

    bb390: {
        StorageDead(_876);
        _874 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _875) -> [return: bb391, unwind continue];
    }

    bb391: {
        StorageDead(_875);
        _877 = discriminant(_874);
        switchInt(move _877) -> [0: bb392, 1: bb393, otherwise: bb11];
    }

    bb392: {
        StorageLive(_881);
        _881 = ((_874 as Continue).0: u128);
        _873 = _881;
        StorageDead(_881);
        StorageLive(_882);
        StorageLive(_883);
        _1128 = const _;
        _883 = &(*_1128);
        _882 = &(*_883);
        StorageLive(_885);
        _885 = &mut (*_2);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        _889 = &mut (*_865);
        _888 = User::get_quote_spot_position_mut(move _889) -> [return: bb395, unwind continue];
    }

    bb393: {
        StorageLive(_878);
        _878 = ((_874 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_880);
        _880 = _878;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _880) -> [return: bb394, unwind continue];
    }

    bb394: {
        StorageDead(_880);
        StorageDead(_878);
        StorageDead(_873);
        StorageDead(_872);
        goto -> bb509;
    }

    bb395: {
        _887 = &mut (*_888);
        _886 = move _887 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_889);
        StorageDead(_887);
        _872 = update_spot_balances(move _873, move _882, move _885, move _886, const false) -> [return: bb396, unwind continue];
    }

    bb396: {
        StorageDead(_886);
        StorageDead(_885);
        StorageDead(_882);
        StorageDead(_873);
        _871 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _872) -> [return: bb397, unwind continue];
    }

    bb397: {
        StorageDead(_872);
        _890 = discriminant(_871);
        switchInt(move _890) -> [0: bb398, 1: bb399, otherwise: bb11];
    }

    bb398: {
        StorageLive(_894);
        _894 = ((_871 as Continue).0: ());
        _870 = _894;
        StorageDead(_894);
        StorageDead(_888);
        StorageDead(_883);
        StorageDead(_874);
        StorageDead(_871);
        StorageDead(_870);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        _898 = &mut (*_865);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        _902 = _456;
        _901 = <u64 as Cast>::cast::<i64>(move _902) -> [return: bb401, unwind continue];
    }

    bb399: {
        StorageLive(_891);
        _891 = ((_871 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_893);
        _893 = _891;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _893) -> [return: bb400, unwind continue];
    }

    bb400: {
        StorageDead(_893);
        StorageDead(_891);
        StorageDead(_888);
        StorageDead(_883);
        goto -> bb509;
    }

    bb401: {
        StorageDead(_902);
        _900 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _901) -> [return: bb402, unwind continue];
    }

    bb402: {
        StorageDead(_901);
        _903 = discriminant(_900);
        switchInt(move _903) -> [0: bb403, 1: bb404, otherwise: bb11];
    }

    bb403: {
        StorageLive(_907);
        _907 = ((_900 as Continue).0: i64);
        _899 = _907;
        StorageDead(_907);
        _897 = User::update_cumulative_spot_fees(move _898, move _899) -> [return: bb406, unwind continue];
    }

    bb404: {
        StorageLive(_904);
        _904 = ((_900 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_906);
        _906 = _904;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _906) -> [return: bb405, unwind continue];
    }

    bb405: {
        StorageDead(_906);
        StorageDead(_904);
        StorageDead(_899);
        StorageDead(_898);
        StorageDead(_897);
        goto -> bb508;
    }

    bb406: {
        StorageDead(_899);
        StorageDead(_898);
        _896 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _897) -> [return: bb407, unwind continue];
    }

    bb407: {
        StorageDead(_897);
        _908 = discriminant(_896);
        switchInt(move _908) -> [0: bb408, 1: bb409, otherwise: bb11];
    }

    bb408: {
        StorageLive(_912);
        _912 = ((_896 as Continue).0: ());
        _895 = _912;
        StorageDead(_912);
        StorageDead(_900);
        StorageDead(_896);
        StorageDead(_895);
        _867 = const ();
        goto -> bb412;
    }

    bb409: {
        StorageLive(_909);
        _909 = ((_896 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_911);
        _911 = _909;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _911) -> [return: bb410, unwind continue];
    }

    bb410: {
        StorageDead(_911);
        StorageDead(_909);
        goto -> bb508;
    }

    bb411: {
        StorageDead(_869);
        _867 = const ();
        goto -> bb412;
    }

    bb412: {
        StorageDead(_868);
        StorageDead(_867);
        StorageLive(_913);
        StorageLive(_914);
        _914 = &mut (*_865);
        StorageLive(_915);
        _915 = _15;
        _913 = User::update_last_active_slot(move _914, move _915) -> [return: bb413, unwind continue];
    }

    bb413: {
        StorageDead(_915);
        StorageDead(_914);
        StorageDead(_913);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        _919 = &mut (*_866);
        StorageLive(_920);
        _920 = _394;
        StorageLive(_921);
        _921 = _14;
        _918 = UserStats::update_filler_volume(move _919, move _920, move _921) -> [return: bb414, unwind continue];
    }

    bb414: {
        StorageDead(_921);
        StorageDead(_920);
        StorageDead(_919);
        _917 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _918) -> [return: bb415, unwind continue];
    }

    bb415: {
        StorageDead(_918);
        _922 = discriminant(_917);
        switchInt(move _922) -> [0: bb416, 1: bb417, otherwise: bb11];
    }

    bb416: {
        StorageLive(_926);
        _926 = ((_917 as Continue).0: ());
        _916 = _926;
        StorageDead(_926);
        StorageDead(_917);
        StorageDead(_916);
        _859 = const ();
        StorageDead(_866);
        StorageDead(_865);
        goto -> bb420;
    }

    bb417: {
        StorageLive(_923);
        _923 = ((_917 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_925);
        _925 = _923;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _925) -> [return: bb418, unwind continue];
    }

    bb418: {
        StorageDead(_925);
        StorageDead(_923);
        StorageDead(_917);
        StorageDead(_916);
        goto -> bb511;
    }

    bb419: {
        _859 = const ();
        goto -> bb420;
    }

    bb420: {
        StorageDead(_860);
        StorageDead(_859);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        _930 = ((*_1).10: u128);
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        _934 = _457;
        _933 = <i64 as Cast>::cast::<u128>(move _934) -> [return: bb421, unwind continue];
    }

    bb421: {
        StorageDead(_934);
        _932 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _933) -> [return: bb422, unwind continue];
    }

    bb422: {
        StorageDead(_933);
        _935 = discriminant(_932);
        switchInt(move _935) -> [0: bb423, 1: bb424, otherwise: bb11];
    }

    bb423: {
        StorageLive(_939);
        _939 = ((_932 as Continue).0: u128);
        _931 = _939;
        StorageDead(_939);
        _929 = <u128 as SafeMath>::safe_add(move _930, move _931) -> [return: bb426, unwind continue];
    }

    bb424: {
        StorageLive(_936);
        _936 = ((_932 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_938);
        _938 = _936;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _938) -> [return: bb425, unwind continue];
    }

    bb425: {
        StorageDead(_938);
        StorageDead(_936);
        StorageDead(_931);
        StorageDead(_930);
        StorageDead(_929);
        goto -> bb507;
    }

    bb426: {
        StorageDead(_931);
        StorageDead(_930);
        _928 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _929) -> [return: bb427, unwind continue];
    }

    bb427: {
        StorageDead(_929);
        _940 = discriminant(_928);
        switchInt(move _940) -> [0: bb428, 1: bb429, otherwise: bb11];
    }

    bb428: {
        StorageLive(_944);
        _944 = ((_928 as Continue).0: u128);
        _927 = _944;
        StorageDead(_944);
        ((*_1).10: u128) = move _927;
        StorageDead(_927);
        StorageDead(_932);
        StorageDead(_928);
        StorageLive(_945);
        StorageLive(_946);
        StorageLive(_947);
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        _951 = _457;
        _950 = <i64 as Cast>::cast::<u128>(move _951) -> [return: bb431, unwind continue];
    }

    bb429: {
        StorageLive(_941);
        _941 = ((_928 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_943);
        _943 = _941;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _943) -> [return: bb430, unwind continue];
    }

    bb430: {
        StorageDead(_943);
        StorageDead(_941);
        goto -> bb507;
    }

    bb431: {
        StorageDead(_951);
        _949 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _950) -> [return: bb432, unwind continue];
    }

    bb432: {
        StorageDead(_950);
        _952 = discriminant(_949);
        switchInt(move _952) -> [0: bb433, 1: bb434, otherwise: bb11];
    }

    bb433: {
        StorageLive(_956);
        _956 = ((_949 as Continue).0: u128);
        _948 = _956;
        StorageDead(_956);
        StorageLive(_957);
        StorageLive(_958);
        _1127 = const _;
        _958 = &(*_1127);
        _957 = &(*_958);
        StorageLive(_960);
        _960 = &mut (*_2);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        _963 = &mut ((*_1).8: state::perp_market::PoolBalance);
        _962 = &mut (*_963);
        _961 = move _962 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_962);
        _947 = update_spot_balances(move _948, move _957, move _960, move _961, const false) -> [return: bb436, unwind continue];
    }

    bb434: {
        StorageLive(_953);
        _953 = ((_949 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_955);
        _955 = _953;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _955) -> [return: bb435, unwind continue];
    }

    bb435: {
        StorageDead(_955);
        StorageDead(_953);
        StorageDead(_948);
        StorageDead(_947);
        goto -> bb506;
    }

    bb436: {
        StorageDead(_961);
        StorageDead(_960);
        StorageDead(_957);
        StorageDead(_948);
        _946 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _947) -> [return: bb437, unwind continue];
    }

    bb437: {
        StorageDead(_947);
        _964 = discriminant(_946);
        switchInt(move _964) -> [0: bb438, 1: bb439, otherwise: bb11];
    }

    bb438: {
        StorageLive(_968);
        _968 = ((_946 as Continue).0: ());
        _945 = _968;
        StorageDead(_968);
        StorageDead(_963);
        StorageDead(_958);
        StorageDead(_949);
        StorageDead(_946);
        StorageDead(_945);
        StorageLive(_969);
        StorageLive(_970);
        _970 = ((*_1).29: u64);
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        _974 = _970;
        _973 = core::num::<impl u64>::checked_add(move _974, const 1_u64) -> [return: bb441, unwind continue];
    }

    bb439: {
        StorageLive(_965);
        _965 = ((_946 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_967);
        _967 = _965;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _967) -> [return: bb440, unwind continue];
    }

    bb440: {
        StorageDead(_967);
        StorageDead(_965);
        StorageDead(_963);
        StorageDead(_958);
        goto -> bb506;
    }

    bb441: {
        StorageDead(_974);
        StorageLive(_975);
        _975 = Option::<u64>::Some(const 1_u64);
        _972 = Option::<u64>::or(move _973, move _975) -> [return: bb442, unwind continue];
    }

    bb442: {
        StorageDead(_975);
        StorageDead(_973);
        _971 = Option::<u64>::unwrap(move _972) -> [return: bb443, unwind continue];
    }

    bb443: {
        StorageDead(_972);
        ((*_1).29: u64) = move _971;
        StorageDead(_971);
        _969 = _970;
        StorageDead(_970);
        StorageLive(_976);
        StorageLive(_977);
        StorageLive(_978);
        StorageLive(_979);
        _979 = _9;
        _980 = Len(((*_7).5: [state::user::Order; 32]));
        _981 = Lt(_979, _980);
        assert(move _981, "index out of bounds: the length is {} but the index is {}", move _980, _979) -> [success: bb444, unwind continue];
    }

    bb444: {
        _978 = &((*_7).5: [state::user::Order; 32])[_979];
        _977 = Order::is_jit_maker(move _978) -> [return: bb445, unwind continue];
    }

    bb445: {
        switchInt(move _977) -> [0: bb447, otherwise: bb446];
    }

    bb446: {
        StorageDead(_979);
        StorageDead(_978);
        _976 = OrderActionExplanation::OrderFilledWithMatchJit;
        goto -> bb448;
    }

    bb447: {
        StorageDead(_979);
        StorageDead(_978);
        _976 = OrderActionExplanation::OrderFilledWithMatch;
        goto -> bb448;
    }

    bb448: {
        StorageDead(_977);
        StorageLive(_982);
        StorageLive(_983);
        StorageLive(_984);
        StorageLive(_985);
        _985 = _14;
        StorageLive(_986);
        _986 = OrderAction::Fill;
        StorageLive(_987);
        _987 = _976;
        StorageLive(_988);
        StorageLive(_989);
        _989 = _9;
        _990 = Len(((*_7).5: [state::user::Order; 32]));
        _991 = Lt(_989, _990);
        assert(move _991, "index out of bounds: the length is {} but the index is {}", move _990, _989) -> [success: bb449, unwind continue];
    }

    bb449: {
        _988 = (((*_7).5: [state::user::Order; 32])[_989].11: u16);
        StorageLive(_992);
        StorageLive(_993);
        _993 = (*_13);
        _992 = Option::<anchor_lang::prelude::Pubkey>::Some(move _993);
        StorageDead(_993);
        StorageLive(_994);
        StorageLive(_995);
        _995 = _969;
        _994 = Option::<u64>::Some(move _995);
        StorageDead(_995);
        StorageLive(_996);
        StorageLive(_997);
        _997 = _456;
        _996 = Option::<u64>::Some(move _997);
        StorageDead(_997);
        StorageLive(_998);
        StorageLive(_999);
        _999 = _393;
        _998 = Option::<u64>::Some(move _999);
        StorageDead(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        _1004 = _394;
        _1003 = <u64 as Cast>::cast::<u64>(move _1004) -> [return: bb450, unwind continue];
    }

    bb450: {
        StorageDead(_1004);
        _1002 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1003) -> [return: bb451, unwind continue];
    }

    bb451: {
        StorageDead(_1003);
        _1005 = discriminant(_1002);
        switchInt(move _1005) -> [0: bb452, 1: bb453, otherwise: bb11];
    }

    bb452: {
        StorageLive(_1009);
        _1009 = ((_1002 as Continue).0: u64);
        _1001 = _1009;
        StorageDead(_1009);
        _1000 = Option::<u64>::Some(move _1001);
        StorageDead(_1001);
        StorageLive(_1010);
        StorageLive(_1011);
        _1011 = _454;
        _1010 = Option::<u64>::Some(move _1011);
        StorageDead(_1011);
        StorageLive(_1012);
        StorageLive(_1013);
        _1013 = _455;
        _1012 = Option::<u64>::Some(move _1013);
        StorageDead(_1013);
        StorageLive(_1014);
        _1014 = Option::<u64>::None;
        StorageLive(_1015);
        _1015 = Option::<i64>::Some(const 0_i64);
        StorageLive(_1016);
        _1016 = Option::<u64>::Some(const 0_u64);
        StorageLive(_1017);
        StorageLive(_1018);
        _1018 = (*_6);
        _1017 = Option::<anchor_lang::prelude::Pubkey>::Some(move _1018);
        StorageDead(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        _1021 = _5;
        _1022 = Len(((*_3).5: [state::user::Order; 32]));
        _1023 = Lt(_1021, _1022);
        assert(move _1023, "index out of bounds: the length is {} but the index is {}", move _1022, _1021) -> [success: bb455, unwind continue];
    }

    bb453: {
        StorageLive(_1006);
        _1006 = ((_1002 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1008);
        _1008 = _1006;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1008) -> [return: bb454, unwind continue];
    }

    bb454: {
        StorageDead(_1008);
        StorageDead(_1006);
        StorageDead(_1001);
        StorageDead(_1000);
        StorageDead(_998);
        StorageDead(_996);
        StorageDead(_994);
        StorageDead(_992);
        StorageDead(_988);
        StorageDead(_987);
        StorageDead(_986);
        StorageDead(_985);
        StorageDead(_984);
        goto -> bb504;
    }

    bb455: {
        _1020 = ((*_3).5: [state::user::Order; 32])[_1021];
        _1019 = Option::<Order>::Some(move _1020);
        StorageDead(_1020);
        StorageLive(_1024);
        StorageLive(_1025);
        _1025 = (*_10);
        _1024 = Option::<anchor_lang::prelude::Pubkey>::Some(move _1025);
        StorageDead(_1025);
        StorageLive(_1026);
        StorageLive(_1027);
        StorageLive(_1028);
        _1028 = _9;
        _1029 = Len(((*_7).5: [state::user::Order; 32]));
        _1030 = Lt(_1028, _1029);
        assert(move _1030, "index out of bounds: the length is {} but the index is {}", move _1029, _1028) -> [success: bb456, unwind continue];
    }

    bb456: {
        _1027 = ((*_7).5: [state::user::Order; 32])[_1028];
        _1026 = Option::<Order>::Some(move _1027);
        StorageDead(_1027);
        StorageLive(_1031);
        StorageLive(_1032);
        StorageLive(_1033);
        StorageLive(_1034);
        StorageLive(_1035);
        _1035 = &mut (*_16);
        StorageLive(_1036);
        StorageLive(_1037);
        StorageLive(_1038);
        StorageLive(_1039);
        _1039 = &(*_1);
        _1038 = SpotMarket::oracle_id(move _1039) -> [return: bb457, unwind continue];
    }

    bb457: {
        StorageDead(_1039);
        _1037 = &_1038;
        _1036 = &(*_1037);
        _1034 = OracleMap::<'_>::get_price_data(move _1035, move _1036) -> [return: bb458, unwind continue];
    }

    bb458: {
        StorageDead(_1036);
        StorageDead(_1035);
        _1033 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _1034) -> [return: bb459, unwind continue];
    }

    bb459: {
        StorageDead(_1034);
        _1040 = discriminant(_1033);
        switchInt(move _1040) -> [0: bb460, 1: bb461, otherwise: bb11];
    }

    bb460: {
        StorageLive(_1044);
        _1044 = ((_1033 as Continue).0: &state::oracle::OraclePriceData);
        _1032 = _1044;
        StorageDead(_1044);
        _1031 = ((*_1032).0: i64);
        StorageLive(_1045);
        _1045 = Option::<u64>::None;
        StorageLive(_1046);
        _1046 = Option::<u64>::None;
        StorageLive(_1047);
        _1047 = Option::<u64>::None;
        StorageLive(_1048);
        _1048 = Option::<u64>::None;
        StorageLive(_1049);
        _1049 = Option::<u64>::None;
        _984 = get_order_action_record(move _985, move _986, move _987, move _988, move _992, move _994, move _996, move _998, move _1000, move _1010, move _1012, move _1014, move _1015, move _1016, move _1017, move _1019, move _1024, move _1026, move _1031, const 0_u8, move _1045, move _1046, move _1047, move _1048, move _1049) -> [return: bb463, unwind continue];
    }

    bb461: {
        StorageLive(_1041);
        _1041 = ((_1033 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1043);
        _1043 = _1041;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1043) -> [return: bb462, unwind continue];
    }

    bb462: {
        StorageDead(_1043);
        StorageDead(_1041);
        StorageDead(_1031);
        StorageDead(_1026);
        StorageDead(_1024);
        StorageDead(_1019);
        StorageDead(_1017);
        StorageDead(_1016);
        StorageDead(_1015);
        StorageDead(_1014);
        StorageDead(_1012);
        StorageDead(_1010);
        StorageDead(_1000);
        StorageDead(_998);
        StorageDead(_996);
        StorageDead(_994);
        StorageDead(_992);
        StorageDead(_988);
        StorageDead(_987);
        StorageDead(_986);
        StorageDead(_985);
        StorageDead(_984);
        goto -> bb503;
    }

    bb463: {
        StorageDead(_1049);
        StorageDead(_1048);
        StorageDead(_1047);
        StorageDead(_1046);
        StorageDead(_1045);
        StorageDead(_1031);
        StorageDead(_1026);
        StorageDead(_1024);
        StorageDead(_1019);
        StorageDead(_1017);
        StorageDead(_1016);
        StorageDead(_1015);
        StorageDead(_1014);
        StorageDead(_1012);
        StorageDead(_1010);
        StorageDead(_1000);
        StorageDead(_998);
        StorageDead(_996);
        StorageDead(_994);
        StorageDead(_992);
        StorageDead(_988);
        StorageDead(_987);
        StorageDead(_986);
        StorageDead(_985);
        _983 = <std::result::Result<OrderActionRecord, error::ErrorCode> as Try>::branch(move _984) -> [return: bb464, unwind continue];
    }

    bb464: {
        StorageDead(_984);
        _1050 = discriminant(_983);
        switchInt(move _1050) -> [0: bb465, 1: bb466, otherwise: bb11];
    }

    bb465: {
        StorageLive(_1054);
        _1054 = move ((_983 as Continue).0: state::events::OrderActionRecord);
        _982 = move _1054;
        StorageDead(_1054);
        StorageDead(_1038);
        StorageDead(_1037);
        StorageDead(_1033);
        StorageDead(_1032);
        StorageDead(_1028);
        StorageDead(_1021);
        StorageDead(_1002);
        StorageDead(_989);
        StorageDead(_983);
        StorageLive(_1055);
        StorageLive(_1056);
        StorageLive(_1057);
        StorageLive(_1058);
        _1058 = move _982;
        _1057 = emit_stack::<OrderActionRecord, 464>(move _1058) -> [return: bb468, unwind continue];
    }

    bb466: {
        StorageLive(_1051);
        _1051 = ((_983 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1053);
        _1053 = _1051;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1053) -> [return: bb467, unwind continue];
    }

    bb467: {
        StorageDead(_1053);
        StorageDead(_1051);
        goto -> bb503;
    }

    bb468: {
        StorageDead(_1058);
        _1056 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1057) -> [return: bb469, unwind continue];
    }

    bb469: {
        StorageDead(_1057);
        _1059 = discriminant(_1056);
        switchInt(move _1059) -> [0: bb470, 1: bb471, otherwise: bb11];
    }

    bb470: {
        StorageLive(_1063);
        _1063 = ((_1056 as Continue).0: ());
        _1055 = _1063;
        StorageDead(_1063);
        StorageDead(_1056);
        StorageDead(_1055);
        StorageLive(_1064);
        StorageLive(_1065);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        _1070 = _5;
        _1071 = Len(((*_3).5: [state::user::Order; 32]));
        _1072 = Lt(_1070, _1071);
        assert(move _1072, "index out of bounds: the length is {} but the index is {}", move _1071, _1070) -> [success: bb473, unwind continue];
    }

    bb471: {
        StorageLive(_1060);
        _1060 = ((_1056 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1062);
        _1062 = _1060;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1062) -> [return: bb472, unwind continue];
    }

    bb472: {
        StorageDead(_1062);
        StorageDead(_1060);
        StorageDead(_1056);
        StorageDead(_1055);
        goto -> bb505;
    }

    bb473: {
        _1069 = &((*_3).5: [state::user::Order; 32])[_1070];
        StorageLive(_1073);
        _1073 = Option::<i64>::None;
        _1068 = Order::get_base_asset_amount_unfilled(move _1069, move _1073) -> [return: bb474, unwind continue];
    }

    bb474: {
        StorageDead(_1073);
        StorageDead(_1069);
        _1067 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1068) -> [return: bb475, unwind continue];
    }

    bb475: {
        StorageDead(_1068);
        _1074 = discriminant(_1067);
        switchInt(move _1074) -> [0: bb476, 1: bb477, otherwise: bb11];
    }

    bb476: {
        StorageLive(_1078);
        _1078 = ((_1067 as Continue).0: u64);
        _1066 = _1078;
        StorageDead(_1078);
        _1065 = Eq(move _1066, const 0_u64);
        switchInt(move _1065) -> [0: bb480, otherwise: bb479];
    }

    bb477: {
        StorageLive(_1075);
        _1075 = ((_1067 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1077);
        _1077 = _1075;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1077) -> [return: bb478, unwind continue];
    }

    bb478: {
        StorageDead(_1077);
        StorageDead(_1075);
        StorageDead(_1070);
        StorageDead(_1067);
        StorageDead(_1066);
        StorageDead(_1065);
        StorageDead(_1064);
        goto -> bb505;
    }

    bb479: {
        StorageDead(_1070);
        StorageDead(_1067);
        StorageDead(_1066);
        StorageLive(_1079);
        StorageLive(_1080);
        _1080 = &mut (*_3);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        _1083 = _5;
        _1084 = Len(((*_3).5: [state::user::Order; 32]));
        _1085 = Lt(_1083, _1084);
        assert(move _1085, "index out of bounds: the length is {} but the index is {}", move _1084, _1083) -> [success: bb481, unwind continue];
    }

    bb480: {
        StorageDead(_1070);
        StorageDead(_1067);
        StorageDead(_1066);
        _1064 = const ();
        goto -> bb487;
    }

    bb481: {
        _1082 = &((*_3).5: [state::user::Order; 32])[_1083];
        _1081 = Order::has_auction(move _1082) -> [return: bb482, unwind continue];
    }

    bb482: {
        StorageDead(_1082);
        _1079 = User::decrement_open_orders(move _1080, move _1081) -> [return: bb483, unwind continue];
    }

    bb483: {
        StorageDead(_1081);
        StorageDead(_1080);
        StorageDead(_1083);
        StorageDead(_1079);
        StorageLive(_1086);
        _1086 = OrderStatus::Filled;
        StorageLive(_1087);
        _1087 = _5;
        _1088 = Len(((*_3).5: [state::user::Order; 32]));
        _1089 = Lt(_1087, _1088);
        assert(move _1089, "index out of bounds: the length is {} but the index is {}", move _1088, _1087) -> [success: bb484, unwind continue];
    }

    bb484: {
        (((*_3).5: [state::user::Order; 32])[_1087].12: state::user::OrderStatus) = move _1086;
        StorageDead(_1086);
        StorageDead(_1087);
        StorageLive(_1090);
        _1090 = _73;
        _1091 = Len(((*_3).3: [state::user::SpotPosition; 8]));
        _1092 = Lt(_1090, _1091);
        assert(move _1092, "index out of bounds: the length is {} but the index is {}", move _1091, _1090) -> [success: bb485, unwind continue];
    }

    bb485: {
        _1093 = CheckedSub((((*_3).3: [state::user::SpotPosition; 8])[_1090].6: u8), const 1_u8);
        assert(!move (_1093.1: bool), "attempt to compute `{} - {}`, which would overflow", (((*_3).3: [state::user::SpotPosition; 8])[_1090].6: u8), const 1_u8) -> [success: bb486, unwind continue];
    }

    bb486: {
        (((*_3).3: [state::user::SpotPosition; 8])[_1090].6: u8) = move (_1093.0: u8);
        StorageDead(_1090);
        _1064 = const ();
        goto -> bb487;
    }

    bb487: {
        StorageDead(_1065);
        StorageDead(_1064);
        StorageLive(_1094);
        StorageLive(_1095);
        StorageLive(_1096);
        StorageLive(_1097);
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        _1100 = _9;
        _1101 = Len(((*_7).5: [state::user::Order; 32]));
        _1102 = Lt(_1100, _1101);
        assert(move _1102, "index out of bounds: the length is {} but the index is {}", move _1101, _1100) -> [success: bb488, unwind continue];
    }

    bb488: {
        _1099 = &((*_7).5: [state::user::Order; 32])[_1100];
        StorageLive(_1103);
        _1103 = Option::<i64>::None;
        _1098 = Order::get_base_asset_amount_unfilled(move _1099, move _1103) -> [return: bb489, unwind continue];
    }

    bb489: {
        StorageDead(_1103);
        StorageDead(_1099);
        _1097 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1098) -> [return: bb490, unwind continue];
    }

    bb490: {
        StorageDead(_1098);
        _1104 = discriminant(_1097);
        switchInt(move _1104) -> [0: bb491, 1: bb492, otherwise: bb11];
    }

    bb491: {
        StorageLive(_1108);
        _1108 = ((_1097 as Continue).0: u64);
        _1096 = _1108;
        StorageDead(_1108);
        _1095 = Eq(move _1096, const 0_u64);
        switchInt(move _1095) -> [0: bb495, otherwise: bb494];
    }

    bb492: {
        StorageLive(_1105);
        _1105 = ((_1097 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1107);
        _1107 = _1105;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1107) -> [return: bb493, unwind continue];
    }

    bb493: {
        StorageDead(_1107);
        StorageDead(_1105);
        StorageDead(_1100);
        StorageDead(_1097);
        StorageDead(_1096);
        StorageDead(_1095);
        StorageDead(_1094);
        goto -> bb505;
    }

    bb494: {
        StorageDead(_1100);
        StorageDead(_1097);
        StorageDead(_1096);
        StorageLive(_1109);
        StorageLive(_1110);
        _1110 = &mut (*_7);
        StorageLive(_1111);
        StorageLive(_1112);
        StorageLive(_1113);
        _1113 = _9;
        _1114 = Len(((*_7).5: [state::user::Order; 32]));
        _1115 = Lt(_1113, _1114);
        assert(move _1115, "index out of bounds: the length is {} but the index is {}", move _1114, _1113) -> [success: bb496, unwind continue];
    }

    bb495: {
        StorageDead(_1100);
        StorageDead(_1097);
        StorageDead(_1096);
        _1094 = const ();
        goto -> bb502;
    }

    bb496: {
        _1112 = &((*_7).5: [state::user::Order; 32])[_1113];
        _1111 = Order::has_auction(move _1112) -> [return: bb497, unwind continue];
    }

    bb497: {
        StorageDead(_1112);
        _1109 = User::decrement_open_orders(move _1110, move _1111) -> [return: bb498, unwind continue];
    }

    bb498: {
        StorageDead(_1111);
        StorageDead(_1110);
        StorageDead(_1113);
        StorageDead(_1109);
        StorageLive(_1116);
        _1116 = OrderStatus::Filled;
        StorageLive(_1117);
        _1117 = _9;
        _1118 = Len(((*_7).5: [state::user::Order; 32]));
        _1119 = Lt(_1117, _1118);
        assert(move _1119, "index out of bounds: the length is {} but the index is {}", move _1118, _1117) -> [success: bb499, unwind continue];
    }

    bb499: {
        (((*_7).5: [state::user::Order; 32])[_1117].12: state::user::OrderStatus) = move _1116;
        StorageDead(_1116);
        StorageDead(_1117);
        StorageLive(_1120);
        _1120 = _149;
        _1121 = Len(((*_7).3: [state::user::SpotPosition; 8]));
        _1122 = Lt(_1120, _1121);
        assert(move _1122, "index out of bounds: the length is {} but the index is {}", move _1121, _1120) -> [success: bb500, unwind continue];
    }

    bb500: {
        _1123 = CheckedSub((((*_7).3: [state::user::SpotPosition; 8])[_1120].6: u8), const 1_u8);
        assert(!move (_1123.1: bool), "attempt to compute `{} - {}`, which would overflow", (((*_7).3: [state::user::SpotPosition; 8])[_1120].6: u8), const 1_u8) -> [success: bb501, unwind continue];
    }

    bb501: {
        (((*_7).3: [state::user::SpotPosition; 8])[_1120].6: u8) = move (_1123.0: u8);
        StorageDead(_1120);
        _1094 = const ();
        goto -> bb502;
    }

    bb502: {
        StorageDead(_1095);
        StorageDead(_1094);
        StorageLive(_1124);
        StorageLive(_1125);
        _1125 = _393;
        StorageLive(_1126);
        _1126 = _394;
        _1124 = (move _1125, move _1126);
        StorageDead(_1126);
        StorageDead(_1125);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _1124);
        StorageDead(_1124);
        StorageDead(_982);
        StorageDead(_976);
        StorageDead(_969);
        StorageDead(_790);
        StorageDead(_786);
        StorageDead(_690);
        StorageDead(_614);
        StorageDead(_610);
        StorageDead(_512);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_441);
        StorageDead(_413);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_323);
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_239);
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_195);
        StorageDead(_172);
        StorageDead(_159);
        StorageDead(_149);
        StorageDead(_145);
        StorageDead(_127);
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_96);
        StorageDead(_83);
        StorageDead(_73);
        StorageDead(_50);
        StorageDead(_36);
        StorageDead(_32);
        goto -> bb559;
    }

    bb503: {
        StorageDead(_1038);
        StorageDead(_1037);
        StorageDead(_1033);
        StorageDead(_1032);
        StorageDead(_1028);
        StorageDead(_1021);
        goto -> bb504;
    }

    bb504: {
        StorageDead(_1002);
        StorageDead(_989);
        StorageDead(_983);
        goto -> bb505;
    }

    bb505: {
        StorageDead(_982);
        StorageDead(_976);
        StorageDead(_969);
        goto -> bb514;
    }

    bb506: {
        StorageDead(_949);
        StorageDead(_946);
        StorageDead(_945);
        goto -> bb514;
    }

    bb507: {
        StorageDead(_927);
        StorageDead(_932);
        StorageDead(_928);
        goto -> bb514;
    }

    bb508: {
        StorageDead(_900);
        StorageDead(_896);
        StorageDead(_895);
        goto -> bb510;
    }

    bb509: {
        StorageDead(_874);
        StorageDead(_871);
        StorageDead(_870);
        goto -> bb510;
    }

    bb510: {
        StorageDead(_868);
        StorageDead(_867);
        goto -> bb511;
    }

    bb511: {
        StorageDead(_866);
        StorageDead(_865);
        StorageDead(_860);
        StorageDead(_859);
        goto -> bb514;
    }

    bb512: {
        StorageDead(_814);
        goto -> bb513;
    }

    bb513: {
        StorageDead(_812);
        goto -> bb514;
    }

    bb514: {
        StorageDead(_790);
        StorageDead(_786);
        goto -> bb519;
    }

    bb515: {
        StorageDead(_758);
        StorageDead(_754);
        StorageDead(_753);
        goto -> bb519;
    }

    bb516: {
        StorageDead(_740);
        StorageDead(_736);
        StorageDead(_730);
        StorageDead(_728);
        StorageDead(_727);
        goto -> bb517;
    }

    bb517: {
        StorageDead(_718);
        StorageDead(_715);
        StorageDead(_714);
        goto -> bb519;
    }

    bb518: {
        StorageDead(_692);
        StorageDead(_691);
        goto -> bb519;
    }

    bb519: {
        StorageDead(_690);
        goto -> bb521;
    }

    bb520: {
        StorageDead(_662);
        StorageDead(_659);
        StorageDead(_658);
        goto -> bb521;
    }

    bb521: {
        StorageDead(_614);
        StorageDead(_610);
        goto -> bb526;
    }

    bb522: {
        StorageDead(_581);
        StorageDead(_576);
        StorageDead(_575);
        goto -> bb526;
    }

    bb523: {
        StorageDead(_562);
        StorageDead(_558);
        StorageDead(_552);
        StorageDead(_550);
        StorageDead(_549);
        goto -> bb524;
    }

    bb524: {
        StorageDead(_540);
        StorageDead(_537);
        StorageDead(_536);
        goto -> bb526;
    }

    bb525: {
        StorageDead(_514);
        StorageDead(_513);
        goto -> bb526;
    }

    bb526: {
        StorageDead(_512);
        goto -> bb528;
    }

    bb527: {
        StorageDead(_484);
        StorageDead(_481);
        StorageDead(_480);
        goto -> bb528;
    }

    bb528: {
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_455);
        StorageDead(_454);
        goto -> bb529;
    }

    bb529: {
        StorageDead(_441);
        goto -> bb530;
    }

    bb530: {
        StorageDead(_413);
        goto -> bb531;
    }

    bb531: {
        StorageDead(_394);
        StorageDead(_393);
        goto -> bb538;
    }

    bb532: {
        StorageDead(_332);
        StorageDead(_331);
        goto -> bb533;
    }

    bb533: {
        StorageDead(_329);
        StorageDead(_328);
        goto -> bb534;
    }

    bb534: {
        StorageDead(_363);
        goto -> bb536;
    }

    bb535: {
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_329);
        StorageDead(_328);
        goto -> bb536;
    }

    bb536: {
        StorageDead(_348);
        goto -> bb537;
    }

    bb537: {
        StorageDead(_339);
        StorageDead(_336);
        StorageDead(_333);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_325);
        goto -> bb538;
    }

    bb538: {
        StorageDead(_323);
        StorageDead(_310);
        StorageDead(_309);
        goto -> bb545;
    }

    bb539: {
        StorageDead(_248);
        StorageDead(_247);
        goto -> bb540;
    }

    bb540: {
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb541;
    }

    bb541: {
        StorageDead(_279);
        goto -> bb543;
    }

    bb542: {
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb543;
    }

    bb543: {
        StorageDead(_264);
        goto -> bb544;
    }

    bb544: {
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_249);
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_241);
        goto -> bb545;
    }

    bb545: {
        StorageDead(_239);
        StorageDead(_226);
        StorageDead(_225);
        goto -> bb546;
    }

    bb546: {
        StorageDead(_195);
        goto -> bb548;
    }

    bb547: {
        StorageDead(_181);
        StorageDead(_176);
        StorageDead(_173);
        goto -> bb548;
    }

    bb548: {
        StorageDead(_172);
        goto -> bb549;
    }

    bb549: {
        StorageDead(_159);
        goto -> bb550;
    }

    bb550: {
        StorageDead(_149);
        StorageDead(_145);
        goto -> bb551;
    }

    bb551: {
        StorageDead(_127);
        StorageDead(_123);
        StorageDead(_119);
        goto -> bb553;
    }

    bb552: {
        StorageDead(_105);
        StorageDead(_100);
        StorageDead(_97);
        goto -> bb553;
    }

    bb553: {
        StorageDead(_96);
        goto -> bb554;
    }

    bb554: {
        StorageDead(_83);
        goto -> bb555;
    }

    bb555: {
        StorageDead(_73);
        goto -> bb557;
    }

    bb556: {
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb557;
    }

    bb557: {
        StorageDead(_50);
        goto -> bb558;
    }

    bb558: {
        StorageDead(_36);
        StorageDead(_32);
        goto -> bb559;
    }

    bb559: {
        return;
    }

    bb560 (cleanup): {
        drop(_207) -> [return: bb561, unwind terminate(cleanup)];
    }

    bb561 (cleanup): {
        resume;
    }
}
