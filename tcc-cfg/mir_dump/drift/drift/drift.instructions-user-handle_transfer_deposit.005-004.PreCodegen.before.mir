// MIR for `instructions::user::handle_transfer_deposit` before PreCodegen

fn instructions::user::handle_transfer_deposit(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::TransferDeposit<'_>>, _2: u16, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _8: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _16: std::result::Result<(), anchor_lang::error::Error>;
    let mut _17: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _18: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _23: ();
    let _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _26: &anchor_lang::prelude::Signer<'_>;
    let mut _28: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _30: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _34: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _42: std::cell::RefMut<'_, state::user::User>;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _44: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _45: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _46: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _47: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: std::cell::RefMut<'_, state::user::User>;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _56: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _57: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _58: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _59: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _68: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _69: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _71: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _79: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _86: ();
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _88: std::result::Result<(), error::ErrorCode>;
    let mut _89: bool;
    let mut _90: &state::user::User;
    let _91: &state::user::User;
    let mut _92: &std::cell::RefMut<'_, state::user::User>;
    let mut _93: ();
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: &std::string::String;
    let _99: &std::string::String;
    let _100: std::string::String;
    let mut _102: std::fmt::Arguments<'_>;
    let mut _103: &[&str];
    let mut _104: &[&str; 2];
    let _105: &[&str; 2];
    let _106: [&str; 2];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let mut _108: &[core::fmt::rt::Argument<'_>; 1];
    let _109: &[core::fmt::rt::Argument<'_>; 1];
    let _110: [core::fmt::rt::Argument<'_>; 1];
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &error::ErrorCode;
    let _113: &error::ErrorCode;
    let _114: ();
    let mut _115: &str;
    let _116: &str;
    let mut _117: error::ErrorCode;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _123: ();
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _125: std::result::Result<(), error::ErrorCode>;
    let mut _126: bool;
    let mut _127: &state::user::User;
    let _128: &state::user::User;
    let mut _129: &std::cell::RefMut<'_, state::user::User>;
    let mut _130: ();
    let _132: ();
    let mut _133: &str;
    let _134: &str;
    let mut _135: &std::string::String;
    let _136: &std::string::String;
    let _137: std::string::String;
    let mut _139: std::fmt::Arguments<'_>;
    let mut _140: &[&str];
    let mut _141: &[&str; 2];
    let _142: &[&str; 2];
    let _143: [&str; 2];
    let mut _144: &[core::fmt::rt::Argument<'_>];
    let mut _145: &[core::fmt::rt::Argument<'_>; 1];
    let _146: &[core::fmt::rt::Argument<'_>; 1];
    let _147: [core::fmt::rt::Argument<'_>; 1];
    let mut _148: core::fmt::rt::Argument<'_>;
    let mut _149: &error::ErrorCode;
    let _150: &error::ErrorCode;
    let _151: ();
    let mut _152: &str;
    let _153: &str;
    let mut _154: error::ErrorCode;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _160: ();
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _162: std::result::Result<(), error::ErrorCode>;
    let mut _163: bool;
    let mut _164: &anchor_lang::prelude::Pubkey;
    let mut _165: &anchor_lang::prelude::Pubkey;
    let mut _166: ();
    let _168: ();
    let mut _169: &str;
    let _170: &str;
    let mut _171: &std::string::String;
    let _172: &std::string::String;
    let _173: std::string::String;
    let mut _175: std::fmt::Arguments<'_>;
    let mut _176: &[&str];
    let mut _177: &[&str; 2];
    let _178: &[&str; 2];
    let _179: [&str; 2];
    let mut _180: &[core::fmt::rt::Argument<'_>];
    let mut _181: &[core::fmt::rt::Argument<'_>; 1];
    let _182: &[core::fmt::rt::Argument<'_>; 1];
    let _183: [core::fmt::rt::Argument<'_>; 1];
    let mut _184: core::fmt::rt::Argument<'_>;
    let mut _185: &error::ErrorCode;
    let _186: &error::ErrorCode;
    let _187: ();
    let mut _188: &str;
    let _189: &str;
    let mut _190: error::ErrorCode;
    let mut _191: isize;
    let mut _193: !;
    let mut _194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _199: instructions::optional_accounts::AccountMaps<'_>;
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _201: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _202: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _203: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _204: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _205: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _206: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _207: &std::collections::BTreeSet<u16>;
    let _208: &std::collections::BTreeSet<u16>;
    let _209: std::collections::BTreeSet<u16>;
    let mut _210: &std::collections::BTreeSet<u16>;
    let _211: &std::collections::BTreeSet<u16>;
    let _212: std::collections::BTreeSet<u16>;
    let mut _213: u16;
    let mut _214: u64;
    let mut _215: std::option::Option<state::state::OracleGuardRails>;
    let mut _216: state::state::OracleGuardRails;
    let mut _217: &state::state::State;
    let mut _218: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _219: isize;
    let mut _221: !;
    let mut _222: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _224: ();
    let mut _226: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _227: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _228: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _229: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _230: &u16;
    let _231: &u16;
    let mut _232: isize;
    let mut _234: !;
    let mut _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _238: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _239: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _240: &mut state::oracle_map::OracleMap<'_>;
    let mut _241: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _242: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _243: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _244: &state::spot_market::SpotMarket;
    let _245: &state::spot_market::SpotMarket;
    let mut _246: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _247: isize;
    let mut _249: !;
    let mut _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _252: ();
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _254: std::result::Result<(), error::ErrorCode>;
    let mut _255: &mut state::spot_market::SpotMarket;
    let mut _256: &mut state::spot_market::SpotMarket;
    let mut _257: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _258: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _259: &state::oracle::OraclePriceData;
    let mut _260: i64;
    let mut _261: isize;
    let mut _263: !;
    let mut _264: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _268: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _269: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _270: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _271: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _272: &u16;
    let _273: &u16;
    let mut _274: isize;
    let mut _276: !;
    let mut _277: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _279: &state::oracle::OraclePriceData;
    let mut _280: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _281: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _282: &mut state::oracle_map::OracleMap<'_>;
    let mut _283: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _284: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _285: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _286: &state::spot_market::SpotMarket;
    let _287: &state::spot_market::SpotMarket;
    let mut _288: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _289: isize;
    let mut _291: !;
    let mut _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _294: ();
    let mut _296: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _297: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _298: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _299: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _300: &u16;
    let _301: &u16;
    let mut _302: isize;
    let mut _304: !;
    let mut _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _307: ();
    let mut _308: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _309: std::result::Result<(), error::ErrorCode>;
    let mut _310: bool;
    let mut _311: u8;
    let mut _312: &state::user::User;
    let mut _313: &std::cell::RefMut<'_, state::user::User>;
    let mut _314: u8;
    let mut _315: &state::spot_market::SpotMarket;
    let mut _316: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _317: ();
    let _319: ();
    let mut _320: &str;
    let _321: &str;
    let mut _322: &std::string::String;
    let _323: &std::string::String;
    let _324: std::string::String;
    let mut _326: std::fmt::Arguments<'_>;
    let mut _327: &[&str];
    let mut _328: &[&str; 2];
    let _329: &[&str; 2];
    let _330: [&str; 2];
    let mut _331: &[core::fmt::rt::Argument<'_>];
    let mut _332: &[core::fmt::rt::Argument<'_>; 1];
    let _333: &[core::fmt::rt::Argument<'_>; 1];
    let _334: [core::fmt::rt::Argument<'_>; 1];
    let mut _335: core::fmt::rt::Argument<'_>;
    let mut _336: &error::ErrorCode;
    let _337: &error::ErrorCode;
    let _338: ();
    let mut _339: &str;
    let _340: &str;
    let mut _341: &std::string::String;
    let _342: &std::string::String;
    let _343: std::string::String;
    let mut _345: std::fmt::Arguments<'_>;
    let mut _346: &[&str];
    let mut _347: &[&str; 3];
    let _348: &[&str; 3];
    let _349: [&str; 3];
    let mut _350: &[core::fmt::rt::Argument<'_>];
    let mut _351: &[core::fmt::rt::Argument<'_>; 2];
    let _352: &[core::fmt::rt::Argument<'_>; 2];
    let _353: [core::fmt::rt::Argument<'_>; 2];
    let mut _354: core::fmt::rt::Argument<'_>;
    let mut _355: &u8;
    let _356: &u8;
    let _357: &state::user::User;
    let mut _358: &std::cell::RefMut<'_, state::user::User>;
    let mut _359: core::fmt::rt::Argument<'_>;
    let mut _360: &u8;
    let _361: &u8;
    let _362: &state::spot_market::SpotMarket;
    let mut _363: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _364: error::ErrorCode;
    let mut _365: isize;
    let mut _367: !;
    let mut _368: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _370: ();
    let mut _371: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _372: std::result::Result<(), error::ErrorCode>;
    let mut _373: &mut state::user::User;
    let mut _374: &mut state::user::User;
    let mut _375: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _376: u64;
    let mut _377: i64;
    let mut _378: u128;
    let mut _379: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _380: std::result::Result<u128, error::ErrorCode>;
    let mut _381: u64;
    let mut _382: state::spot_market::SpotMarket;
    let mut _383: &state::spot_market::SpotMarket;
    let mut _384: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _385: isize;
    let mut _387: !;
    let mut _388: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _390: isize;
    let mut _392: !;
    let mut _393: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _395: ();
    let mut _396: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _397: std::result::Result<(), error::ErrorCode>;
    let mut _398: u128;
    let mut _399: u64;
    let mut _400: &state::spot_market::SpotBalanceType;
    let _401: &state::spot_market::SpotBalanceType;
    let _402: state::spot_market::SpotBalanceType;
    let mut _403: &mut state::spot_market::SpotMarket;
    let mut _404: &mut state::spot_market::SpotMarket;
    let mut _405: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _406: &mut state::user::User;
    let mut _407: &mut state::user::User;
    let mut _408: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _409: isize;
    let mut _411: !;
    let mut _412: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _414: bool;
    let mut _415: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _416: std::result::Result<bool, error::ErrorCode>;
    let mut _417: &mut state::user::User;
    let mut _418: &mut state::user::User;
    let mut _419: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _420: &state::perp_market_map::PerpMarketMap<'_>;
    let _421: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _422: &state::spot_market_map::SpotMarketMap<'_>;
    let _423: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _424: &mut state::oracle_map::OracleMap<'_>;
    let mut _425: &mut state::oracle_map::OracleMap<'_>;
    let mut _426: math::margin::MarginRequirementType;
    let mut _427: u16;
    let mut _428: u128;
    let mut _429: u64;
    let mut _430: &mut state::user::UserStats;
    let mut _431: &mut state::user::UserStats;
    let mut _432: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _433: i64;
    let mut _434: isize;
    let mut _436: !;
    let mut _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _439: ();
    let mut _440: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _441: std::result::Result<(), error::ErrorCode>;
    let mut _442: &state::user::User;
    let _443: &state::user::User;
    let mut _444: &std::cell::RefMut<'_, state::user::User>;
    let mut _445: &state::perp_market_map::PerpMarketMap<'_>;
    let _446: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _447: &state::spot_market_map::SpotMarketMap<'_>;
    let _448: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _449: &mut state::oracle_map::OracleMap<'_>;
    let mut _450: &mut state::oracle_map::OracleMap<'_>;
    let mut _451: isize;
    let mut _453: !;
    let mut _454: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _456: ();
    let mut _457: bool;
    let mut _458: &state::user::User;
    let _459: &state::user::User;
    let mut _460: &std::cell::RefMut<'_, state::user::User>;
    let _461: ();
    let mut _462: &mut state::user::User;
    let mut _463: &mut state::user::User;
    let mut _464: &mut std::cell::RefMut<'_, state::user::User>;
    let _465: ();
    let mut _466: &mut state::user::User;
    let mut _467: &mut state::user::User;
    let mut _468: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _469: u64;
    let _470: ();
    let mut _472: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _473: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _474: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _475: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _476: &u16;
    let _477: &u16;
    let mut _478: isize;
    let mut _480: !;
    let mut _481: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _485: &state::spot_market::SpotMarket;
    let mut _486: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _487: u64;
    let mut _488: std::option::Option<u64>;
    let mut _489: std::option::Option<u64>;
    let mut _490: u64;
    let mut _491: std::option::Option<u64>;
    let mut _492: &mut state::spot_market::SpotMarket;
    let mut _493: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _495: i64;
    let mut _496: u64;
    let mut _497: anchor_lang::prelude::Pubkey;
    let mut _498: anchor_lang::prelude::Pubkey;
    let mut _499: state::events::DepositDirection;
    let mut _500: u64;
    let mut _501: i64;
    let mut _502: u16;
    let mut _503: u128;
    let mut _504: &state::spot_market::SpotMarket;
    let mut _505: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _506: u128;
    let mut _507: &state::spot_market::SpotMarket;
    let mut _508: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _509: u128;
    let mut _510: &state::spot_market::SpotMarket;
    let mut _511: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _512: u128;
    let mut _513: &state::spot_market::SpotMarket;
    let mut _514: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _515: u64;
    let mut _516: &state::user::User;
    let mut _517: &std::cell::RefMut<'_, state::user::User>;
    let mut _518: u64;
    let mut _519: &state::user::User;
    let mut _520: &std::cell::RefMut<'_, state::user::User>;
    let mut _521: state::events::DepositExplanation;
    let mut _522: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _523: anchor_lang::prelude::Pubkey;
    let _524: ();
    let _525: ();
    let mut _526: &[&[u8]];
    let mut _527: &[&[u8]; 1];
    let _528: &[&[u8]; 1];
    let _529: [&[u8]; 1];
    let mut _530: &[u8];
    let _531: &[u8];
    let mut _532: &std::vec::Vec<u8>;
    let _533: &std::vec::Vec<u8>;
    let _534: std::vec::Vec<u8>;
    let mut _535: &state::events::DepositRecord;
    let _536: &state::events::DepositRecord;
    let _537: ();
    let mut _539: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _540: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _541: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _542: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _543: &u16;
    let _544: &u16;
    let mut _545: isize;
    let mut _547: !;
    let mut _548: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _550: ();
    let mut _551: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _552: std::result::Result<(), error::ErrorCode>;
    let mut _553: bool;
    let mut _554: u8;
    let mut _555: &state::user::User;
    let mut _556: &std::cell::RefMut<'_, state::user::User>;
    let mut _557: u8;
    let mut _558: &state::spot_market::SpotMarket;
    let mut _559: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _560: ();
    let _562: ();
    let mut _563: &str;
    let _564: &str;
    let mut _565: &std::string::String;
    let _566: &std::string::String;
    let _567: std::string::String;
    let mut _569: std::fmt::Arguments<'_>;
    let mut _570: &[&str];
    let mut _571: &[&str; 2];
    let _572: &[&str; 2];
    let _573: [&str; 2];
    let mut _574: &[core::fmt::rt::Argument<'_>];
    let mut _575: &[core::fmt::rt::Argument<'_>; 1];
    let _576: &[core::fmt::rt::Argument<'_>; 1];
    let _577: [core::fmt::rt::Argument<'_>; 1];
    let mut _578: core::fmt::rt::Argument<'_>;
    let mut _579: &error::ErrorCode;
    let _580: &error::ErrorCode;
    let _581: ();
    let mut _582: &str;
    let _583: &str;
    let mut _584: &std::string::String;
    let _585: &std::string::String;
    let _586: std::string::String;
    let mut _588: std::fmt::Arguments<'_>;
    let mut _589: &[&str];
    let mut _590: &[&str; 3];
    let _591: &[&str; 3];
    let _592: [&str; 3];
    let mut _593: &[core::fmt::rt::Argument<'_>];
    let mut _594: &[core::fmt::rt::Argument<'_>; 2];
    let _595: &[core::fmt::rt::Argument<'_>; 2];
    let _596: [core::fmt::rt::Argument<'_>; 2];
    let mut _597: core::fmt::rt::Argument<'_>;
    let mut _598: &u8;
    let _599: &u8;
    let _600: &state::user::User;
    let mut _601: &std::cell::RefMut<'_, state::user::User>;
    let mut _602: core::fmt::rt::Argument<'_>;
    let mut _603: &u8;
    let _604: &u8;
    let _605: &state::spot_market::SpotMarket;
    let mut _606: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _607: error::ErrorCode;
    let mut _608: isize;
    let mut _610: !;
    let mut _611: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _613: ();
    let mut _614: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _615: std::result::Result<(), error::ErrorCode>;
    let mut _616: &mut state::user::User;
    let mut _617: &mut state::user::User;
    let mut _618: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _619: u64;
    let mut _620: i64;
    let mut _621: u128;
    let mut _622: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _623: std::result::Result<u128, error::ErrorCode>;
    let mut _624: u64;
    let mut _625: state::spot_market::SpotMarket;
    let mut _626: &state::spot_market::SpotMarket;
    let mut _627: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _628: isize;
    let mut _630: !;
    let mut _631: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _633: isize;
    let mut _635: !;
    let mut _636: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _639: &state::user::User;
    let mut _640: &std::cell::RefMut<'_, state::user::User>;
    let mut _642: &state::user::User;
    let mut _643: &std::cell::RefMut<'_, state::user::User>;
    let mut _645: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _646: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _647: &mut state::user::User;
    let mut _648: &mut state::user::User;
    let mut _649: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _650: u16;
    let mut _651: &state::spot_market::SpotMarket;
    let mut _652: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _653: isize;
    let mut _655: !;
    let mut _656: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _658: ();
    let mut _659: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _660: std::result::Result<(), error::ErrorCode>;
    let mut _661: u128;
    let mut _662: u64;
    let mut _663: &state::spot_market::SpotBalanceType;
    let _664: &state::spot_market::SpotBalanceType;
    let _665: state::spot_market::SpotBalanceType;
    let mut _666: &mut state::spot_market::SpotMarket;
    let mut _667: &mut state::spot_market::SpotMarket;
    let mut _668: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _669: &mut state::user::SpotPosition;
    let mut _670: std::option::Option<u128>;
    let mut _671: isize;
    let mut _673: !;
    let mut _674: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _677: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _678: std::result::Result<u128, error::ErrorCode>;
    let mut _679: &state::user::SpotPosition;
    let mut _680: &state::spot_market::SpotMarket;
    let _681: &state::spot_market::SpotMarket;
    let mut _682: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _683: isize;
    let mut _685: !;
    let mut _686: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _688: ();
    let mut _689: bool;
    let mut _690: u128;
    let _691: ();
    let mut _692: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _693: std::result::Result<(), error::ErrorCode>;
    let mut _694: bool;
    let mut _695: u64;
    let mut _696: ();
    let _698: ();
    let mut _699: &str;
    let _700: &str;
    let mut _701: &std::string::String;
    let _702: &std::string::String;
    let _703: std::string::String;
    let mut _705: std::fmt::Arguments<'_>;
    let mut _706: &[&str];
    let mut _707: &[&str; 2];
    let _708: &[&str; 2];
    let _709: [&str; 2];
    let mut _710: &[core::fmt::rt::Argument<'_>];
    let mut _711: &[core::fmt::rt::Argument<'_>; 1];
    let _712: &[core::fmt::rt::Argument<'_>; 1];
    let _713: [core::fmt::rt::Argument<'_>; 1];
    let mut _714: core::fmt::rt::Argument<'_>;
    let mut _715: &error::ErrorCode;
    let _716: &error::ErrorCode;
    let _717: ();
    let mut _718: &str;
    let _719: &str;
    let mut _720: &std::string::String;
    let _721: &std::string::String;
    let _722: std::string::String;
    let mut _724: std::fmt::Arguments<'_>;
    let mut _725: &[&str];
    let mut _726: &[&str; 2];
    let _727: &[&str; 2];
    let _728: [&str; 2];
    let mut _729: &[core::fmt::rt::Argument<'_>];
    let mut _730: &[core::fmt::rt::Argument<'_>; 2];
    let _731: &[core::fmt::rt::Argument<'_>; 2];
    let _732: [core::fmt::rt::Argument<'_>; 2];
    let mut _733: core::fmt::rt::Argument<'_>;
    let mut _734: &u64;
    let _735: &u64;
    let mut _736: core::fmt::rt::Argument<'_>;
    let mut _737: &u128;
    let _738: &u128;
    let mut _739: error::ErrorCode;
    let mut _740: isize;
    let mut _742: !;
    let mut _743: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _747: &state::spot_market::SpotMarket;
    let mut _748: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _749: u64;
    let mut _750: std::option::Option<u64>;
    let mut _751: std::option::Option<u64>;
    let mut _752: u64;
    let mut _753: std::option::Option<u64>;
    let mut _754: &mut state::spot_market::SpotMarket;
    let mut _755: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _757: i64;
    let mut _758: u64;
    let mut _759: anchor_lang::prelude::Pubkey;
    let mut _760: anchor_lang::prelude::Pubkey;
    let mut _761: state::events::DepositDirection;
    let mut _762: u64;
    let mut _763: i64;
    let mut _764: u16;
    let mut _765: u128;
    let mut _766: &state::spot_market::SpotMarket;
    let mut _767: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _768: u128;
    let mut _769: &state::spot_market::SpotMarket;
    let mut _770: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _771: u128;
    let mut _772: &state::spot_market::SpotMarket;
    let mut _773: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _774: u128;
    let mut _775: &state::spot_market::SpotMarket;
    let mut _776: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _777: u64;
    let mut _778: u64;
    let mut _779: state::events::DepositExplanation;
    let mut _780: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _781: anchor_lang::prelude::Pubkey;
    let _782: ();
    let _783: ();
    let mut _784: &[&[u8]];
    let mut _785: &[&[u8]; 1];
    let _786: &[&[u8]; 1];
    let _787: [&[u8]; 1];
    let mut _788: &[u8];
    let _789: &[u8];
    let mut _790: &std::vec::Vec<u8>;
    let _791: &std::vec::Vec<u8>;
    let _792: std::vec::Vec<u8>;
    let mut _793: &state::events::DepositRecord;
    let _794: &state::events::DepositRecord;
    let _795: ();
    let mut _796: &mut state::user::User;
    let mut _797: &mut state::user::User;
    let mut _798: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _799: u64;
    let mut _801: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _802: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _803: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _804: &u16;
    let _805: &u16;
    let mut _806: isize;
    let mut _808: !;
    let mut _809: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _811: i64;
    let mut _812: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _813: std::result::Result<i64, error::ErrorCode>;
    let mut _814: &state::spot_market::SpotMarket;
    let _815: &state::spot_market::SpotMarket;
    let mut _816: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _817: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _818: u64;
    let mut _819: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _820: &anchor_spl::token_interface::TokenAccount;
    let _821: &anchor_spl::token_interface::TokenAccount;
    let mut _822: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _823: isize;
    let mut _825: !;
    let mut _826: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _828: ();
    let mut _840: &mut instructions::user::TransferDeposit<'_>;
    let mut _841: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _842: &mut instructions::user::TransferDeposit<'_>;
    let mut _843: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _844: &mut instructions::user::TransferDeposit<'_>;
    let mut _845: &mut instructions::user::TransferDeposit<'_>;
    let mut _846: &mut instructions::user::TransferDeposit<'_>;
    let mut _847: &mut instructions::user::TransferDeposit<'_>;
    let mut _848: &mut instructions::user::TransferDeposit<'_>;
    let mut _849: &mut instructions::user::TransferDeposit<'_>;
    let mut _850: &mut instructions::user::TransferDeposit<'_>;
    let mut _851: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _852: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _853: &mut instructions::user::TransferDeposit<'_>;
    let mut _854: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _855: isize;
    let mut _856: isize;
    let mut _857: isize;
    let mut _858: isize;
    let mut _859: isize;
    let mut _860: isize;
    let mut _861: isize;
    let mut _862: isize;
    let mut _863: isize;
    let mut _864: isize;
    let mut _865: isize;
    let mut _866: isize;
    let mut _867: isize;
    let mut _868: isize;
    let mut _869: isize;
    let mut _870: isize;
    let mut _871: isize;
    let mut _872: isize;
    let mut _873: isize;
    let mut _874: isize;
    let mut _875: isize;
    let mut _876: isize;
    let mut _877: isize;
    let mut _878: isize;
    let mut _879: isize;
    let mut _880: isize;
    let mut _881: isize;
    let mut _882: isize;
    let mut _883: isize;
    let mut _884: isize;
    let mut _885: isize;
    let mut _886: isize;
    let mut _887: isize;
    let mut _888: isize;
    let mut _889: isize;
    let mut _890: isize;
    let mut _891: isize;
    let mut _892: isize;
    let mut _893: isize;
    let mut _894: isize;
    let mut _895: isize;
    let mut _896: isize;
    let mut _897: isize;
    let mut _898: isize;
    let mut _899: isize;
    let mut _900: isize;
    let mut _901: isize;
    let mut _902: isize;
    let mut _903: isize;
    let mut _904: isize;
    let mut _905: isize;
    let mut _906: isize;
    let mut _907: isize;
    let mut _908: isize;
    let mut _909: isize;
    let mut _910: isize;
    let mut _911: isize;
    let mut _912: isize;
    let mut _913: isize;
    let mut _914: isize;
    let mut _915: isize;
    let mut _916: isize;
    let mut _917: isize;
    let mut _918: isize;
    let mut _919: isize;
    let mut _920: isize;
    let mut _921: isize;
    let mut _922: isize;
    let mut _923: isize;
    let mut _924: isize;
    let mut _925: isize;
    let mut _926: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _927: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _928: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _929: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _20;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _23;
        scope 8 {
        }
    }
    scope 9 {
        debug authority_key => _24;
        let _27: anchor_lang::prelude::Pubkey;
        scope 10 {
            debug to_user_key => _27;
            let _29: anchor_lang::prelude::Pubkey;
            scope 11 {
                debug from_user_key => _29;
                let _31: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                scope 12 {
                    debug state => _31;
                    let _32: anchor_lang::prelude::Clock;
                    let _36: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _39: anchor_lang::prelude::Clock;
                    scope 13 {
                        debug clock => _32;
                        let _40: u64;
                        scope 18 {
                            debug slot => _40;
                            let _41: &mut std::cell::RefMut<'_, state::user::User>;
                            let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _52: std::cell::RefMut<'_, state::user::User>;
                            scope 19 {
                                debug to_user => _41;
                                let _53: &mut std::cell::RefMut<'_, state::user::User>;
                                let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _64: std::cell::RefMut<'_, state::user::User>;
                                scope 24 {
                                    debug from_user => _53;
                                    let _65: &mut std::cell::RefMut<'_, state::user::UserStats>;
                                    let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _76: std::cell::RefMut<'_, state::user::UserStats>;
                                    scope 29 {
                                        debug user_stats => _65;
                                        let _77: anchor_lang::prelude::Clock;
                                        let _81: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _84: anchor_lang::prelude::Clock;
                                        scope 34 {
                                            debug clock => _77;
                                            let _85: i64;
                                            scope 39 {
                                                debug now => _85;
                                                let _94: error::ErrorCode;
                                                let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _122: ();
                                                let _131: error::ErrorCode;
                                                let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _159: ();
                                                let _167: error::ErrorCode;
                                                let _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _195: ();
                                                let _196: state::perp_market_map::PerpMarketMap<'_>;
                                                let _197: state::spot_market_map::SpotMarketMap<'_>;
                                                let mut _198: state::oracle_map::OracleMap<'_>;
                                                let _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _223: instructions::optional_accounts::AccountMaps<'_>;
                                                scope 40 {
                                                    debug error_code => _94;
                                                    let _101: std::string::String;
                                                    let mut _839: &[&str; 2];
                                                    scope 41 {
                                                        debug res => _101;
                                                    }
                                                }
                                                scope 42 {
                                                    debug residual => _119;
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug val => _122;
                                                    scope 45 {
                                                    }
                                                }
                                                scope 46 {
                                                    debug error_code => _131;
                                                    let _138: std::string::String;
                                                    let mut _838: &[&str; 2];
                                                    scope 47 {
                                                        debug res => _138;
                                                    }
                                                }
                                                scope 48 {
                                                    debug residual => _156;
                                                    scope 49 {
                                                    }
                                                }
                                                scope 50 {
                                                    debug val => _159;
                                                    scope 51 {
                                                    }
                                                }
                                                scope 52 {
                                                    debug error_code => _167;
                                                    let _174: std::string::String;
                                                    let mut _837: &[&str; 2];
                                                    scope 53 {
                                                        debug res => _174;
                                                    }
                                                }
                                                scope 54 {
                                                    debug residual => _192;
                                                    scope 55 {
                                                    }
                                                }
                                                scope 56 {
                                                    debug val => _195;
                                                    scope 57 {
                                                    }
                                                }
                                                scope 58 {
                                                    debug perp_market_map => _196;
                                                    debug spot_market_map => _197;
                                                    debug oracle_map => _198;
                                                    let _225: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                    let _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _236: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                    let _266: i64;
                                                    let _267: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                    let _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _278: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                    scope 63 {
                                                        debug spot_market => _225;
                                                        let _237: &state::oracle::OraclePriceData;
                                                        let _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _251: &state::oracle::OraclePriceData;
                                                        scope 68 {
                                                            debug oracle_price_data => _237;
                                                            let _262: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _265: ();
                                                            scope 73 {
                                                                debug residual => _262;
                                                                scope 74 {
                                                                }
                                                            }
                                                            scope 75 {
                                                                debug val => _265;
                                                                scope 76 {
                                                                }
                                                            }
                                                        }
                                                        scope 69 {
                                                            debug residual => _248;
                                                            scope 70 {
                                                            }
                                                        }
                                                        scope 71 {
                                                            debug val => _251;
                                                            scope 72 {
                                                            }
                                                        }
                                                    }
                                                    scope 64 {
                                                        debug residual => _233;
                                                        scope 65 {
                                                        }
                                                    }
                                                    scope 66 {
                                                        debug val => _236;
                                                        scope 67 {
                                                        }
                                                    }
                                                    scope 77 {
                                                        debug oracle_price => _266;
                                                        let _295: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _303: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _306: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _435: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _438: bool;
                                                        let _452: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _455: ();
                                                        let _471: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _479: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _482: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _538: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _546: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _549: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _800: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                        let _807: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _810: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                        scope 87 {
                                                            debug spot_market => _295;
                                                            let _318: error::ErrorCode;
                                                            let _366: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _369: ();
                                                            let _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _389: u128;
                                                            let _391: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _394: ();
                                                            let _410: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _413: ();
                                                            let mut _834: &state::spot_market::SpotBalanceType;
                                                            scope 92 {
                                                                debug error_code => _318;
                                                                let _325: std::string::String;
                                                                let _344: std::string::String;
                                                                let mut _835: &[&str; 3];
                                                                let mut _836: &[&str; 2];
                                                                scope 93 {
                                                                    debug res => _325;
                                                                }
                                                                scope 94 {
                                                                    debug res => _344;
                                                                }
                                                            }
                                                            scope 95 {
                                                                debug residual => _366;
                                                                scope 96 {
                                                                }
                                                            }
                                                            scope 97 {
                                                                debug val => _369;
                                                                scope 98 {
                                                                }
                                                            }
                                                            scope 99 {
                                                                debug residual => _386;
                                                                scope 100 {
                                                                }
                                                            }
                                                            scope 101 {
                                                                debug val => _389;
                                                                scope 102 {
                                                                }
                                                            }
                                                            scope 103 {
                                                                debug residual => _391;
                                                                scope 104 {
                                                                }
                                                            }
                                                            scope 105 {
                                                                debug val => _394;
                                                                scope 106 {
                                                                }
                                                            }
                                                            scope 107 {
                                                                debug residual => _410;
                                                                scope 108 {
                                                                }
                                                            }
                                                            scope 109 {
                                                                debug val => _413;
                                                                scope 110 {
                                                                }
                                                            }
                                                        }
                                                        scope 88 {
                                                            debug residual => _303;
                                                            scope 89 {
                                                            }
                                                        }
                                                        scope 90 {
                                                            debug val => _306;
                                                            scope 91 {
                                                            }
                                                        }
                                                        scope 111 {
                                                            debug residual => _435;
                                                            scope 112 {
                                                            }
                                                        }
                                                        scope 113 {
                                                            debug val => _438;
                                                            scope 114 {
                                                            }
                                                        }
                                                        scope 115 {
                                                            debug residual => _452;
                                                            scope 116 {
                                                            }
                                                        }
                                                        scope 117 {
                                                            debug val => _455;
                                                            scope 118 {
                                                            }
                                                        }
                                                        scope 119 {
                                                            debug spot_market => _471;
                                                            let _483: u64;
                                                            let _484: u64;
                                                            scope 124 {
                                                                debug deposit_record_id => _483;
                                                                let _494: state::events::DepositRecord;
                                                                scope 126 {
                                                                    debug deposit_record => _494;
                                                                }
                                                            }
                                                            scope 125 {
                                                                debug current_id => _484;
                                                            }
                                                        }
                                                        scope 120 {
                                                            debug residual => _479;
                                                            scope 121 {
                                                            }
                                                        }
                                                        scope 122 {
                                                            debug val => _482;
                                                            scope 123 {
                                                            }
                                                        }
                                                        scope 127 {
                                                            debug spot_market => _538;
                                                            let _561: error::ErrorCode;
                                                            let _609: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _612: ();
                                                            let _629: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _632: u128;
                                                            let _634: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _637: ();
                                                            let _638: u64;
                                                            scope 132 {
                                                                debug error_code => _561;
                                                                let _568: std::string::String;
                                                                let _587: std::string::String;
                                                                let mut _832: &[&str; 3];
                                                                let mut _833: &[&str; 2];
                                                                scope 133 {
                                                                    debug res => _568;
                                                                }
                                                                scope 134 {
                                                                    debug res => _587;
                                                                }
                                                            }
                                                            scope 135 {
                                                                debug residual => _609;
                                                                scope 136 {
                                                                }
                                                            }
                                                            scope 137 {
                                                                debug val => _612;
                                                                scope 138 {
                                                                }
                                                            }
                                                            scope 139 {
                                                                debug residual => _629;
                                                                scope 140 {
                                                                }
                                                            }
                                                            scope 141 {
                                                                debug val => _632;
                                                                scope 142 {
                                                                }
                                                            }
                                                            scope 143 {
                                                                debug residual => _634;
                                                                scope 144 {
                                                                }
                                                            }
                                                            scope 145 {
                                                                debug val => _637;
                                                                scope 146 {
                                                                }
                                                            }
                                                            scope 147 {
                                                                debug total_deposits_after => _638;
                                                                let _641: u64;
                                                                scope 148 {
                                                                    debug total_withdraws_after => _641;
                                                                    let _644: &mut state::user::SpotPosition;
                                                                    let _654: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _657: &mut state::user::SpotPosition;
                                                                    scope 149 {
                                                                        debug to_spot_position => _644;
                                                                        let _672: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _675: ();
                                                                        let _676: u128;
                                                                        let _684: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _687: u128;
                                                                        let mut _831: &state::spot_market::SpotBalanceType;
                                                                        scope 154 {
                                                                            debug residual => _672;
                                                                            scope 155 {
                                                                            }
                                                                        }
                                                                        scope 156 {
                                                                            debug val => _675;
                                                                            scope 157 {
                                                                            }
                                                                        }
                                                                        scope 158 {
                                                                            debug token_amount => _676;
                                                                            let _697: error::ErrorCode;
                                                                            let _741: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _744: ();
                                                                            let _745: u64;
                                                                            let _746: u64;
                                                                            scope 163 {
                                                                                debug error_code => _697;
                                                                                let _704: std::string::String;
                                                                                let _723: std::string::String;
                                                                                let mut _829: &[&str; 2];
                                                                                let mut _830: &[&str; 2];
                                                                                scope 164 {
                                                                                    debug res => _704;
                                                                                }
                                                                                scope 165 {
                                                                                    debug res => _723;
                                                                                }
                                                                            }
                                                                            scope 166 {
                                                                                debug residual => _741;
                                                                                scope 167 {
                                                                                }
                                                                            }
                                                                            scope 168 {
                                                                                debug val => _744;
                                                                                scope 169 {
                                                                                }
                                                                            }
                                                                            scope 170 {
                                                                                debug deposit_record_id => _745;
                                                                                let _756: state::events::DepositRecord;
                                                                                scope 172 {
                                                                                    debug deposit_record => _756;
                                                                                }
                                                                            }
                                                                            scope 171 {
                                                                                debug current_id => _746;
                                                                            }
                                                                        }
                                                                        scope 159 {
                                                                            debug residual => _684;
                                                                            scope 160 {
                                                                            }
                                                                        }
                                                                        scope 161 {
                                                                            debug val => _687;
                                                                            scope 162 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 150 {
                                                                        debug residual => _654;
                                                                        scope 151 {
                                                                        }
                                                                    }
                                                                    scope 152 {
                                                                        debug val => _657;
                                                                        scope 153 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 128 {
                                                            debug residual => _546;
                                                            scope 129 {
                                                            }
                                                        }
                                                        scope 130 {
                                                            debug val => _549;
                                                            scope 131 {
                                                            }
                                                        }
                                                        scope 173 {
                                                            debug spot_market => _800;
                                                            let _824: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _827: i64;
                                                            scope 178 {
                                                                debug residual => _824;
                                                                scope 179 {
                                                                }
                                                            }
                                                            scope 180 {
                                                                debug val => _827;
                                                                scope 181 {
                                                                }
                                                            }
                                                        }
                                                        scope 174 {
                                                            debug residual => _807;
                                                            scope 175 {
                                                            }
                                                        }
                                                        scope 176 {
                                                            debug val => _810;
                                                            scope 177 {
                                                            }
                                                        }
                                                    }
                                                    scope 78 {
                                                        debug spot_market => _267;
                                                        let _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _293: &state::oracle::OraclePriceData;
                                                        scope 83 {
                                                            debug residual => _290;
                                                            scope 84 {
                                                            }
                                                        }
                                                        scope 85 {
                                                            debug val => _293;
                                                            scope 86 {
                                                            }
                                                        }
                                                    }
                                                    scope 79 {
                                                        debug residual => _275;
                                                        scope 80 {
                                                        }
                                                    }
                                                    scope 81 {
                                                        debug val => _278;
                                                        scope 82 {
                                                        }
                                                    }
                                                }
                                                scope 59 {
                                                    debug residual => _220;
                                                    scope 60 {
                                                    }
                                                }
                                                scope 61 {
                                                    debug val => _223;
                                                    scope 62 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug residual => _81;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _84;
                                            scope 38 {
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug residual => _73;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug val => _76;
                                        scope 33 {
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _61;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _64;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _49;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _52;
                                scope 23 {
                                }
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _36;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _39;
                        scope 17 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _840 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _8 = &((*_840).4: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _841 = deref_copy (*_8);
        _926 = (((_841.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _7 = &(*_926);
        _6 = constraints::deposit_not_paused(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb401];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _855 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _842 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _18 = &((*_842).4: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _843 = deref_copy (*_18);
        _927 = (((_843.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _17 = &(*_927);
        _16 = constraints::withdraw_not_paused(move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb415];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _909 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb374;
    }

    bb7: {
        StorageDead(_17);
        _15 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb401];
    }

    bb8: {
        StorageDead(_16);
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_15 as Continue).0: ());
        _14 = _23;
        StorageDead(_23);
        _857 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _844 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _26 = &((*_844).3: anchor_lang::prelude::Signer<'_>);
        _25 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _26) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb11, unwind: bb414];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _907 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb374;
    }

    bb12: {
        StorageDead(_26);
        _24 = ((*_25).0: &anchor_lang::prelude::Pubkey);
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        _845 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _28 = &((*_845).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _27 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _846 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _30 = &((*_846).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _29 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        StorageLive(_31);
        _847 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _31 = &((*_847).4: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb15, unwind continue];
    }

    bb15: {
        _33 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _34) -> [return: bb16, unwind: bb401];
    }

    bb16: {
        StorageDead(_34);
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_39);
        _39 = move ((_33 as Continue).0: anchor_lang::prelude::Clock);
        _32 = move _39;
        StorageDead(_39);
        _859 = discriminant(_33);
        StorageDead(_33);
        StorageLive(_40);
        _40 = (_32.0: u64);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _848 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _46 = &((*_848).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _45 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _46) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_36);
        _36 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_38);
        _38 = move _36;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _38) -> [return: bb19, unwind: bb413];
    }

    bb19: {
        StorageDead(_38);
        StorageDead(_36);
        _905 = discriminant(_33);
        StorageDead(_33);
        goto -> bb373;
    }

    bb20: {
        StorageDead(_46);
        StorageLive(_47);
        _47 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _44 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _45, move _47) -> [return: bb21, unwind: bb401];
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_45);
        _43 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _44) -> [return: bb22, unwind: bb401];
    }

    bb22: {
        StorageDead(_44);
        _48 = discriminant(_43);
        switchInt(move _48) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_52);
        _52 = move ((_43 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _42 = move _52;
        StorageDead(_52);
        _41 = &mut _42;
        _863 = discriminant(_43);
        StorageDead(_43);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _849 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _58 = &((*_849).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _57 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _58) -> [return: bb26, unwind: bb400];
    }

    bb24: {
        StorageLive(_49);
        _49 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb25, unwind: bb412];
    }

    bb25: {
        StorageDead(_51);
        StorageDead(_49);
        _861 = discriminant(_43);
        StorageDead(_43);
        goto -> bb372;
    }

    bb26: {
        StorageDead(_58);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _56 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _57, move _59) -> [return: bb27, unwind: bb400];
    }

    bb27: {
        StorageDead(_59);
        StorageDead(_57);
        _55 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _56) -> [return: bb28, unwind: bb400];
    }

    bb28: {
        StorageDead(_56);
        _60 = discriminant(_55);
        switchInt(move _60) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_64);
        _64 = move ((_55 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _54 = move _64;
        StorageDead(_64);
        _53 = &mut _54;
        _867 = discriminant(_55);
        StorageDead(_55);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _850 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _70 = &((*_850).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _69 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _70) -> [return: bb32, unwind: bb399];
    }

    bb30: {
        StorageLive(_61);
        _61 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb31, unwind: bb411];
    }

    bb31: {
        StorageDead(_63);
        StorageDead(_61);
        _865 = discriminant(_55);
        StorageDead(_55);
        goto -> bb371;
    }

    bb32: {
        StorageDead(_70);
        StorageLive(_71);
        _71 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _68 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _69, move _71) -> [return: bb33, unwind: bb399];
    }

    bb33: {
        StorageDead(_71);
        StorageDead(_69);
        _67 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _68) -> [return: bb34, unwind: bb399];
    }

    bb34: {
        StorageDead(_68);
        _72 = discriminant(_67);
        switchInt(move _72) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_76);
        _76 = move ((_67 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _66 = move _76;
        StorageDead(_76);
        _65 = &mut _66;
        _871 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb38, unwind: bb398];
    }

    bb36: {
        StorageLive(_73);
        _73 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb37, unwind: bb410];
    }

    bb37: {
        StorageDead(_75);
        StorageDead(_73);
        _869 = discriminant(_67);
        StorageDead(_67);
        goto -> bb370;
    }

    bb38: {
        _78 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _79) -> [return: bb39, unwind: bb398];
    }

    bb39: {
        StorageDead(_79);
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_84);
        _84 = move ((_78 as Continue).0: anchor_lang::prelude::Clock);
        _77 = move _84;
        StorageDead(_84);
        _873 = discriminant(_78);
        StorageDead(_78);
        StorageLive(_85);
        _85 = (_77.4: i64);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_41);
        _91 = <RefMut<'_, User> as Deref>::deref(move _92) -> [return: bb43, unwind: bb398];
    }

    bb41: {
        StorageLive(_81);
        _81 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _83) -> [return: bb42, unwind: bb409];
    }

    bb42: {
        StorageDead(_83);
        StorageDead(_81);
        _903 = discriminant(_78);
        StorageDead(_78);
        goto -> bb369;
    }

    bb43: {
        _90 = &(*_91);
        StorageDead(_92);
        _89 = User::is_bankrupt(move _90) -> [return: bb44, unwind: bb398];
    }

    bb44: {
        switchInt(move _89) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        StorageDead(_90);
        StorageDead(_91);
        StorageLive(_94);
        _94 = error::ErrorCode::UserBankrupt;
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _839 = const _;
        _105 = &(*_839);
        _104 = &(*_105);
        _103 = move _104 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_104);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_94;
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _112) -> [return: bb47, unwind: bb398];
    }

    bb46: {
        StorageDead(_90);
        StorageDead(_91);
        StorageLive(_93);
        _93 = ();
        _88 = std::result::Result::<(), error::ErrorCode>::Ok(move _93);
        StorageDead(_93);
        goto -> bb54;
    }

    bb47: {
        StorageDead(_112);
        _110 = [move _111];
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = move _108 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_108);
        _102 = Arguments::<'_>::new_v1(move _103, move _107) -> [return: bb48, unwind: bb398];
    }

    bb48: {
        StorageDead(_107);
        StorageDead(_103);
        _101 = format(move _102) -> [return: bb49, unwind: bb398];
    }

    bb49: {
        StorageDead(_102);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_105);
        _100 = move _101;
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = <String as Deref>::deref(move _98) -> [return: bb50, unwind: bb397];
    }

    bb50: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb51, unwind: bb397];
    }

    bb51: {
        StorageDead(_96);
        drop(_100) -> [return: bb52, unwind: bb398];
    }

    bb52: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = const "to_user bankrupt";
        _115 = &(*_116);
        _114 = solana_program::log::sol_log(move _115) -> [return: bb53, unwind: bb398];
    }

    bb53: {
        StorageDead(_115);
        StorageDead(_116);
        StorageDead(_114);
        StorageLive(_117);
        _117 = _94;
        _88 = std::result::Result::<(), error::ErrorCode>::Err(move _117);
        StorageDead(_117);
        StorageDead(_94);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_89);
        _87 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _88) -> [return: bb55, unwind: bb398];
    }

    bb55: {
        StorageDead(_88);
        _118 = discriminant(_87);
        switchInt(move _118) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_122);
        _122 = ((_87 as Continue).0: ());
        _86 = _122;
        StorageDead(_122);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_53);
        _128 = <RefMut<'_, User> as Deref>::deref(move _129) -> [return: bb59, unwind: bb398];
    }

    bb57: {
        StorageLive(_119);
        _119 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb58, unwind: bb398];
    }

    bb58: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb368;
    }

    bb59: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = User::is_bankrupt(move _127) -> [return: bb60, unwind: bb398];
    }

    bb60: {
        switchInt(move _126) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_127);
        StorageDead(_128);
        StorageLive(_131);
        _131 = error::ErrorCode::UserBankrupt;
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _838 = const _;
        _142 = &(*_838);
        _141 = &(*_142);
        _140 = move _141 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_141);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_131;
        _149 = &(*_150);
        _148 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _149) -> [return: bb63, unwind: bb398];
    }

    bb62: {
        StorageDead(_127);
        StorageDead(_128);
        StorageLive(_130);
        _130 = ();
        _125 = std::result::Result::<(), error::ErrorCode>::Ok(move _130);
        StorageDead(_130);
        goto -> bb70;
    }

    bb63: {
        StorageDead(_149);
        _147 = [move _148];
        StorageDead(_148);
        _146 = &_147;
        _145 = &(*_146);
        _144 = move _145 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_145);
        _139 = Arguments::<'_>::new_v1(move _140, move _144) -> [return: bb64, unwind: bb398];
    }

    bb64: {
        StorageDead(_144);
        StorageDead(_140);
        _138 = format(move _139) -> [return: bb65, unwind: bb398];
    }

    bb65: {
        StorageDead(_139);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_142);
        _137 = move _138;
        StorageDead(_138);
        _136 = &_137;
        _135 = &(*_136);
        _134 = <String as Deref>::deref(move _135) -> [return: bb66, unwind: bb396];
    }

    bb66: {
        _133 = &(*_134);
        StorageDead(_135);
        _132 = solana_program::log::sol_log(move _133) -> [return: bb67, unwind: bb396];
    }

    bb67: {
        StorageDead(_133);
        drop(_137) -> [return: bb68, unwind: bb398];
    }

    bb68: {
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_132);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = const "from_user bankrupt";
        _152 = &(*_153);
        _151 = solana_program::log::sol_log(move _152) -> [return: bb69, unwind: bb398];
    }

    bb69: {
        StorageDead(_152);
        StorageDead(_153);
        StorageDead(_151);
        StorageLive(_154);
        _154 = _131;
        _125 = std::result::Result::<(), error::ErrorCode>::Err(move _154);
        StorageDead(_154);
        StorageDead(_131);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_126);
        _124 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _125) -> [return: bb71, unwind: bb398];
    }

    bb71: {
        StorageDead(_125);
        _155 = discriminant(_124);
        switchInt(move _155) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_159);
        _159 = ((_124 as Continue).0: ());
        _123 = _159;
        StorageDead(_159);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &_29;
        StorageLive(_165);
        _165 = &_27;
        _163 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _164, move _165) -> [return: bb75, unwind: bb398];
    }

    bb73: {
        StorageLive(_156);
        _156 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb74, unwind: bb398];
    }

    bb74: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb368;
    }

    bb75: {
        switchInt(move _163) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_166);
        _166 = ();
        _162 = std::result::Result::<(), error::ErrorCode>::Ok(move _166);
        StorageDead(_166);
        goto -> bb85;
    }

    bb77: {
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_167);
        _167 = error::ErrorCode::CantTransferBetweenSameUserAccount;
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _837 = const _;
        _178 = &(*_837);
        _177 = &(*_178);
        _176 = move _177 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_177);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &_167;
        _185 = &(*_186);
        _184 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _185) -> [return: bb78, unwind: bb398];
    }

    bb78: {
        StorageDead(_185);
        _183 = [move _184];
        StorageDead(_184);
        _182 = &_183;
        _181 = &(*_182);
        _180 = move _181 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_181);
        _175 = Arguments::<'_>::new_v1(move _176, move _180) -> [return: bb79, unwind: bb398];
    }

    bb79: {
        StorageDead(_180);
        StorageDead(_176);
        _174 = format(move _175) -> [return: bb80, unwind: bb398];
    }

    bb80: {
        StorageDead(_175);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_178);
        _173 = move _174;
        StorageDead(_174);
        _172 = &_173;
        _171 = &(*_172);
        _170 = <String as Deref>::deref(move _171) -> [return: bb81, unwind: bb395];
    }

    bb81: {
        _169 = &(*_170);
        StorageDead(_171);
        _168 = solana_program::log::sol_log(move _169) -> [return: bb82, unwind: bb395];
    }

    bb82: {
        StorageDead(_169);
        drop(_173) -> [return: bb83, unwind: bb398];
    }

    bb83: {
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = const "cant transfer between the same user account";
        _188 = &(*_189);
        _187 = solana_program::log::sol_log(move _188) -> [return: bb84, unwind: bb398];
    }

    bb84: {
        StorageDead(_188);
        StorageDead(_189);
        StorageDead(_187);
        StorageLive(_190);
        _190 = _167;
        _162 = std::result::Result::<(), error::ErrorCode>::Err(move _190);
        StorageDead(_190);
        StorageDead(_167);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_163);
        _161 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _162) -> [return: bb86, unwind: bb398];
    }

    bb86: {
        StorageDead(_162);
        _191 = discriminant(_161);
        switchInt(move _191) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_195);
        _195 = ((_161 as Continue).0: ());
        _160 = _195;
        StorageDead(_195);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _851 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _206 = &(*_851);
        _205 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _206) -> [return: bb90, unwind: bb398];
    }

    bb88: {
        StorageLive(_192);
        _192 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_194);
        _194 = _192;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _194) -> [return: bb89, unwind: bb398];
    }

    bb89: {
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb368;
    }

    bb90: {
        StorageDead(_206);
        _204 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _205) -> [return: bb91, unwind: bb398];
    }

    bb91: {
        StorageDead(_205);
        _203 = &mut _204;
        _202 = &mut (*_203);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = BTreeSet::<u16>::new() -> [return: bb92, unwind: bb398];
    }

    bb92: {
        _208 = &_209;
        _207 = &(*_208);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = _2;
        _212 = get_writable_spot_market_set(move _213) -> [return: bb93, unwind: bb394];
    }

    bb93: {
        StorageDead(_213);
        _211 = &_212;
        _210 = &(*_211);
        StorageLive(_214);
        _214 = (_77.0: u64);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _852 = deref_copy (*_31);
        _928 = (((_852.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _218 = &(*_928);
        _217 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _218) -> [return: bb94, unwind: bb393];
    }

    bb94: {
        StorageDead(_218);
        _216 = ((*_217).7: state::state::OracleGuardRails);
        _215 = Option::<state::state::OracleGuardRails>::Some(move _216);
        StorageDead(_216);
        _201 = load_maps(move _202, move _207, move _210, move _214, move _215) -> [return: bb95, unwind: bb393];
    }

    bb95: {
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_202);
        _200 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _201) -> [return: bb96, unwind: bb393];
    }

    bb96: {
        StorageDead(_201);
        _219 = discriminant(_200);
        switchInt(move _219) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        StorageLive(_223);
        _223 = move ((_200 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _199 = move _223;
        StorageDead(_223);
        StorageLive(_196);
        _196 = move (_199.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_197);
        _197 = move (_199.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_198);
        _198 = move (_199.2: state::oracle_map::OracleMap<'_>);
        _877 = discriminant(_200);
        StorageDead(_217);
        drop(_212) -> [return: bb100, unwind: bb389];
    }

    bb98: {
        StorageLive(_220);
        _220 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_222);
        _222 = _220;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _222) -> [return: bb99, unwind: bb408];
    }

    bb99: {
        StorageDead(_222);
        StorageDead(_220);
        _875 = discriminant(_200);
        StorageDead(_217);
        drop(_212) -> [return: bb366, unwind: bb394];
    }

    bb100: {
        StorageDead(_212);
        StorageDead(_211);
        drop(_209) -> [return: bb101, unwind: bb390];
    }

    bb101: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_197;
        StorageLive(_230);
        StorageLive(_231);
        _231 = &_2;
        _230 = &(*_231);
        _228 = SpotMarketMap::<'_>::get_ref_mut(move _229, move _230) -> [return: bb102, unwind: bb390];
    }

    bb102: {
        StorageDead(_230);
        StorageDead(_229);
        _227 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _228) -> [return: bb103, unwind: bb390];
    }

    bb103: {
        StorageDead(_228);
        _232 = discriminant(_227);
        switchInt(move _232) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_236);
        _236 = move ((_227 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _226 = move _236;
        StorageDead(_236);
        _225 = &mut _226;
        _881 = discriminant(_227);
        StorageDead(_231);
        StorageDead(_227);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &mut _198;
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &(*_225);
        _245 = <RefMut<'_, SpotMarket> as Deref>::deref(move _246) -> [return: bb107, unwind: bb388];
    }

    bb105: {
        StorageLive(_233);
        _233 = ((_227 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_235);
        _235 = _233;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _235) -> [return: bb106, unwind: bb407];
    }

    bb106: {
        StorageDead(_235);
        StorageDead(_233);
        _879 = discriminant(_227);
        StorageDead(_231);
        StorageDead(_227);
        goto -> bb361;
    }

    bb107: {
        _244 = &(*_245);
        StorageDead(_246);
        _243 = SpotMarket::oracle_id(move _244) -> [return: bb108, unwind: bb388];
    }

    bb108: {
        StorageDead(_244);
        _242 = &_243;
        _241 = &(*_242);
        _239 = OracleMap::<'_>::get_price_data(move _240, move _241) -> [return: bb109, unwind: bb388];
    }

    bb109: {
        StorageDead(_241);
        StorageDead(_240);
        _238 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _239) -> [return: bb110, unwind: bb388];
    }

    bb110: {
        StorageDead(_239);
        _247 = discriminant(_238);
        switchInt(move _247) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        StorageLive(_251);
        _251 = ((_238 as Continue).0: &state::oracle::OraclePriceData);
        _237 = _251;
        StorageDead(_251);
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_238);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &mut (*_225);
        _256 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _257) -> [return: bb114, unwind: bb388];
    }

    bb112: {
        StorageLive(_248);
        _248 = ((_238 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_250);
        _250 = _248;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _250) -> [return: bb113, unwind: bb388];
    }

    bb113: {
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_238);
        goto -> bb360;
    }

    bb114: {
        _255 = &mut (*_256);
        StorageDead(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &(*_237);
        _258 = Option::<&OraclePriceData>::Some(move _259);
        StorageDead(_259);
        StorageLive(_260);
        _260 = (_77.4: i64);
        _254 = controller::spot_balance::update_spot_market_cumulative_interest(move _255, move _258, move _260) -> [return: bb115, unwind: bb388];
    }

    bb115: {
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_255);
        _253 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _254) -> [return: bb116, unwind: bb388];
    }

    bb116: {
        StorageDead(_254);
        _261 = discriminant(_253);
        switchInt(move _261) -> [0: bb117, 1: bb118, otherwise: bb4];
    }

    bb117: {
        StorageLive(_265);
        _265 = ((_253 as Continue).0: ());
        _252 = _265;
        StorageDead(_265);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_252);
        _224 = const ();
        StorageDead(_237);
        drop(_226) -> [return: bb120, unwind: bb390];
    }

    bb118: {
        StorageLive(_262);
        _262 = ((_253 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_264);
        _264 = _262;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _264) -> [return: bb119, unwind: bb388];
    }

    bb119: {
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb360;
    }

    bb120: {
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = &_197;
        StorageLive(_272);
        StorageLive(_273);
        _273 = &_2;
        _272 = &(*_273);
        _270 = SpotMarketMap::<'_>::get_ref(move _271, move _272) -> [return: bb121, unwind: bb390];
    }

    bb121: {
        StorageDead(_272);
        StorageDead(_271);
        _269 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _270) -> [return: bb122, unwind: bb390];
    }

    bb122: {
        StorageDead(_270);
        _274 = discriminant(_269);
        switchInt(move _274) -> [0: bb123, 1: bb124, otherwise: bb4];
    }

    bb123: {
        StorageLive(_278);
        _278 = move ((_269 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _268 = move _278;
        StorageDead(_278);
        _267 = &_268;
        _885 = discriminant(_269);
        StorageDead(_273);
        StorageDead(_269);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = &mut _198;
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &(*_267);
        _287 = <Ref<'_, SpotMarket> as Deref>::deref(move _288) -> [return: bb126, unwind: bb387];
    }

    bb124: {
        StorageLive(_275);
        _275 = ((_269 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_277);
        _277 = _275;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _277) -> [return: bb125, unwind: bb406];
    }

    bb125: {
        StorageDead(_277);
        StorageDead(_275);
        _883 = discriminant(_269);
        StorageDead(_273);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_267);
        goto -> bb359;
    }

    bb126: {
        _286 = &(*_287);
        StorageDead(_288);
        _285 = SpotMarket::oracle_id(move _286) -> [return: bb127, unwind: bb387];
    }

    bb127: {
        StorageDead(_286);
        _284 = &_285;
        _283 = &(*_284);
        _281 = OracleMap::<'_>::get_price_data(move _282, move _283) -> [return: bb128, unwind: bb387];
    }

    bb128: {
        StorageDead(_283);
        StorageDead(_282);
        _280 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _281) -> [return: bb129, unwind: bb387];
    }

    bb129: {
        StorageDead(_281);
        _289 = discriminant(_280);
        switchInt(move _289) -> [0: bb130, 1: bb131, otherwise: bb4];
    }

    bb130: {
        StorageLive(_293);
        _293 = ((_280 as Continue).0: &state::oracle::OraclePriceData);
        _279 = _293;
        StorageDead(_293);
        _266 = ((*_279).0: i64);
        drop(_268) -> [return: bb133, unwind: bb390];
    }

    bb131: {
        StorageLive(_290);
        _290 = ((_280 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_292);
        _292 = _290;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _292) -> [return: bb132, unwind: bb387];
    }

    bb132: {
        StorageDead(_292);
        StorageDead(_290);
        drop(_268) -> [return: bb358, unwind: bb390];
    }

    bb133: {
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_280);
        StorageDead(_279);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _299 = &_197;
        StorageLive(_300);
        StorageLive(_301);
        _301 = &_2;
        _300 = &(*_301);
        _298 = SpotMarketMap::<'_>::get_ref_mut(move _299, move _300) -> [return: bb134, unwind: bb390];
    }

    bb134: {
        StorageDead(_300);
        StorageDead(_299);
        _297 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _298) -> [return: bb135, unwind: bb390];
    }

    bb135: {
        StorageDead(_298);
        _302 = discriminant(_297);
        switchInt(move _302) -> [0: bb136, 1: bb137, otherwise: bb4];
    }

    bb136: {
        StorageLive(_306);
        _306 = move ((_297 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _296 = move _306;
        StorageDead(_306);
        _295 = &mut _296;
        _889 = discriminant(_297);
        StorageDead(_301);
        StorageDead(_297);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &(*_53);
        _312 = <RefMut<'_, User> as Deref>::deref(move _313) -> [return: bb139, unwind: bb386];
    }

    bb137: {
        StorageLive(_303);
        _303 = ((_297 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_305);
        _305 = _303;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _305) -> [return: bb138, unwind: bb405];
    }

    bb138: {
        StorageDead(_305);
        StorageDead(_303);
        _887 = discriminant(_297);
        StorageDead(_301);
        StorageDead(_297);
        goto -> bb357;
    }

    bb139: {
        StorageDead(_313);
        _311 = ((*_312).27: u8);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _316 = &(*_295);
        _315 = <RefMut<'_, SpotMarket> as Deref>::deref(move _316) -> [return: bb140, unwind: bb386];
    }

    bb140: {
        StorageDead(_316);
        _314 = ((*_315).62: u8);
        _310 = Eq(move _311, move _314);
        switchInt(move _310) -> [0: bb142, otherwise: bb141];
    }

    bb141: {
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_311);
        StorageLive(_317);
        _317 = ();
        _309 = std::result::Result::<(), error::ErrorCode>::Ok(move _317);
        StorageDead(_317);
        goto -> bb158;
    }

    bb142: {
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_311);
        StorageLive(_318);
        _318 = error::ErrorCode::InvalidPoolId;
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _836 = const _;
        _329 = &(*_836);
        _328 = &(*_329);
        _327 = move _328 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_328);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &_318;
        _336 = &(*_337);
        _335 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _336) -> [return: bb143, unwind: bb386];
    }

    bb143: {
        StorageDead(_336);
        _334 = [move _335];
        StorageDead(_335);
        _333 = &_334;
        _332 = &(*_333);
        _331 = move _332 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_332);
        _326 = Arguments::<'_>::new_v1(move _327, move _331) -> [return: bb144, unwind: bb386];
    }

    bb144: {
        StorageDead(_331);
        StorageDead(_327);
        _325 = format(move _326) -> [return: bb145, unwind: bb386];
    }

    bb145: {
        StorageDead(_326);
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_329);
        _324 = move _325;
        StorageDead(_325);
        _323 = &_324;
        _322 = &(*_323);
        _321 = <String as Deref>::deref(move _322) -> [return: bb146, unwind: bb385];
    }

    bb146: {
        _320 = &(*_321);
        StorageDead(_322);
        _319 = solana_program::log::sol_log(move _320) -> [return: bb147, unwind: bb385];
    }

    bb147: {
        StorageDead(_320);
        drop(_324) -> [return: bb148, unwind: bb386];
    }

    bb148: {
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_321);
        StorageDead(_319);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _835 = const _;
        _348 = &(*_835);
        _347 = &(*_348);
        _346 = move _347 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_347);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &(*_53);
        _357 = <RefMut<'_, User> as Deref>::deref(move _358) -> [return: bb149, unwind: bb386];
    }

    bb149: {
        StorageDead(_358);
        _356 = &((*_357).27: u8);
        _355 = &(*_356);
        _354 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _355) -> [return: bb150, unwind: bb386];
    }

    bb150: {
        StorageDead(_355);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _363 = &(*_295);
        _362 = <RefMut<'_, SpotMarket> as Deref>::deref(move _363) -> [return: bb151, unwind: bb386];
    }

    bb151: {
        StorageDead(_363);
        _361 = &((*_362).62: u8);
        _360 = &(*_361);
        _359 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _360) -> [return: bb152, unwind: bb386];
    }

    bb152: {
        StorageDead(_360);
        _353 = [move _354, move _359];
        StorageDead(_359);
        StorageDead(_354);
        _352 = &_353;
        _351 = &(*_352);
        _350 = move _351 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_351);
        _345 = Arguments::<'_>::new_v1(move _346, move _350) -> [return: bb153, unwind: bb386];
    }

    bb153: {
        StorageDead(_350);
        StorageDead(_346);
        _344 = format(move _345) -> [return: bb154, unwind: bb386];
    }

    bb154: {
        StorageDead(_345);
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_357);
        StorageDead(_356);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_348);
        _343 = move _344;
        StorageDead(_344);
        _342 = &_343;
        _341 = &(*_342);
        _340 = <String as Deref>::deref(move _341) -> [return: bb155, unwind: bb384];
    }

    bb155: {
        _339 = &(*_340);
        StorageDead(_341);
        _338 = solana_program::log::sol_log(move _339) -> [return: bb156, unwind: bb384];
    }

    bb156: {
        StorageDead(_339);
        drop(_343) -> [return: bb157, unwind: bb386];
    }

    bb157: {
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_338);
        StorageLive(_364);
        _364 = _318;
        _309 = std::result::Result::<(), error::ErrorCode>::Err(move _364);
        StorageDead(_364);
        StorageDead(_318);
        goto -> bb158;
    }

    bb158: {
        StorageDead(_310);
        _308 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _309) -> [return: bb159, unwind: bb386];
    }

    bb159: {
        StorageDead(_309);
        _365 = discriminant(_308);
        switchInt(move _365) -> [0: bb160, 1: bb161, otherwise: bb4];
    }

    bb160: {
        StorageLive(_369);
        _369 = ((_308 as Continue).0: ());
        _307 = _369;
        StorageDead(_369);
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _375 = &mut (*_53);
        _374 = <RefMut<'_, User> as DerefMut>::deref_mut(move _375) -> [return: bb163, unwind: bb386];
    }

    bb161: {
        StorageLive(_366);
        _366 = ((_308 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_368);
        _368 = _366;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _368) -> [return: bb162, unwind: bb386];
    }

    bb162: {
        StorageDead(_368);
        StorageDead(_366);
        StorageDead(_308);
        StorageDead(_307);
        goto -> bb356;
    }

    bb163: {
        _373 = &mut (*_374);
        StorageDead(_375);
        StorageLive(_376);
        _376 = _3;
        StorageLive(_377);
        _377 = _266;
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = &(*_295);
        _383 = <RefMut<'_, SpotMarket> as Deref>::deref(move _384) -> [return: bb164, unwind: bb386];
    }

    bb164: {
        _382 = (*_383);
        StorageDead(_384);
        _381 = SpotMarket::get_precision(move _382) -> [return: bb165, unwind: bb386];
    }

    bb165: {
        StorageDead(_382);
        _380 = <u64 as Cast>::cast::<u128>(move _381) -> [return: bb166, unwind: bb386];
    }

    bb166: {
        StorageDead(_381);
        _379 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _380) -> [return: bb167, unwind: bb386];
    }

    bb167: {
        StorageDead(_380);
        _385 = discriminant(_379);
        switchInt(move _385) -> [0: bb168, 1: bb169, otherwise: bb4];
    }

    bb168: {
        StorageLive(_389);
        _389 = ((_379 as Continue).0: u128);
        _378 = _389;
        StorageDead(_389);
        _372 = User::increment_total_withdraws(move _373, move _376, move _377, move _378) -> [return: bb171, unwind: bb386];
    }

    bb169: {
        StorageLive(_386);
        _386 = ((_379 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_388);
        _388 = _386;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _388) -> [return: bb170, unwind: bb386];
    }

    bb170: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_376);
        StorageDead(_373);
        StorageDead(_372);
        goto -> bb355;
    }

    bb171: {
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_376);
        StorageDead(_373);
        _371 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _372) -> [return: bb172, unwind: bb386];
    }

    bb172: {
        StorageDead(_372);
        _390 = discriminant(_371);
        switchInt(move _390) -> [0: bb173, 1: bb174, otherwise: bb4];
    }

    bb173: {
        StorageLive(_394);
        _394 = ((_371 as Continue).0: ());
        _370 = _394;
        StorageDead(_394);
        StorageDead(_383);
        StorageDead(_379);
        StorageDead(_374);
        StorageDead(_371);
        StorageDead(_370);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = _3;
        _398 = move _399 as u128 (IntToInt);
        StorageDead(_399);
        StorageLive(_400);
        StorageLive(_401);
        _834 = const _;
        _401 = &(*_834);
        _400 = &(*_401);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &mut (*_295);
        _404 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _405) -> [return: bb176, unwind: bb386];
    }

    bb174: {
        StorageLive(_391);
        _391 = ((_371 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_393);
        _393 = _391;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _393) -> [return: bb175, unwind: bb386];
    }

    bb175: {
        StorageDead(_393);
        StorageDead(_391);
        goto -> bb355;
    }

    bb176: {
        _403 = &mut (*_404);
        StorageDead(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &mut (*_53);
        _407 = <RefMut<'_, User> as DerefMut>::deref_mut(move _408) -> [return: bb177, unwind: bb386];
    }

    bb177: {
        _406 = &mut (*_407);
        StorageDead(_408);
        _397 = update_spot_balances_and_cumulative_deposits_with_limits(move _398, move _400, move _403, move _406) -> [return: bb178, unwind: bb386];
    }

    bb178: {
        StorageDead(_406);
        StorageDead(_403);
        StorageDead(_400);
        StorageDead(_398);
        _396 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _397) -> [return: bb179, unwind: bb386];
    }

    bb179: {
        StorageDead(_397);
        _409 = discriminant(_396);
        switchInt(move _409) -> [0: bb180, 1: bb181, otherwise: bb4];
    }

    bb180: {
        StorageLive(_413);
        _413 = ((_396 as Continue).0: ());
        _395 = _413;
        StorageDead(_413);
        StorageDead(_407);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_396);
        StorageDead(_395);
        _294 = const ();
        drop(_296) -> [return: bb183, unwind: bb390];
    }

    bb181: {
        StorageLive(_410);
        _410 = ((_396 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_412);
        _412 = _410;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _412) -> [return: bb182, unwind: bb386];
    }

    bb182: {
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_407);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_396);
        StorageDead(_395);
        goto -> bb356;
    }

    bb183: {
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_294);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = &mut (*_53);
        _418 = <RefMut<'_, User> as DerefMut>::deref_mut(move _419) -> [return: bb184, unwind: bb390];
    }

    bb184: {
        _417 = &mut (*_418);
        StorageDead(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &_196;
        _420 = &(*_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = &_197;
        _422 = &(*_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &mut _198;
        _424 = &mut (*_425);
        StorageLive(_426);
        _426 = math::margin::MarginRequirementType::Initial;
        StorageLive(_427);
        _427 = _2;
        StorageLive(_428);
        StorageLive(_429);
        _429 = _3;
        _428 = move _429 as u128 (IntToInt);
        StorageDead(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = &mut (*_65);
        _431 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _432) -> [return: bb185, unwind: bb390];
    }

    bb185: {
        _430 = &mut (*_431);
        StorageDead(_432);
        StorageLive(_433);
        _433 = _85;
        _416 = User::meets_withdraw_margin_requirement_and_increment_fuel_bonus(move _417, move _420, move _422, move _424, move _426, move _427, move _428, move _430, move _433) -> [return: bb186, unwind: bb390];
    }

    bb186: {
        StorageDead(_433);
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_417);
        _415 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _416) -> [return: bb187, unwind: bb390];
    }

    bb187: {
        StorageDead(_416);
        _434 = discriminant(_415);
        switchInt(move _434) -> [0: bb188, 1: bb189, otherwise: bb4];
    }

    bb188: {
        StorageLive(_438);
        _438 = ((_415 as Continue).0: bool);
        _414 = _438;
        StorageDead(_438);
        StorageDead(_431);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_414);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = &(*_53);
        _443 = <RefMut<'_, User> as Deref>::deref(move _444) -> [return: bb191, unwind: bb390];
    }

    bb189: {
        StorageLive(_435);
        _435 = ((_415 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_437);
        _437 = _435;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _437) -> [return: bb190, unwind: bb390];
    }

    bb190: {
        StorageDead(_437);
        StorageDead(_435);
        StorageDead(_431);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_414);
        goto -> bb359;
    }

    bb191: {
        _442 = &(*_443);
        StorageDead(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = &_196;
        _445 = &(*_446);
        StorageLive(_447);
        StorageLive(_448);
        _448 = &_197;
        _447 = &(*_448);
        StorageLive(_449);
        StorageLive(_450);
        _450 = &mut _198;
        _449 = &mut (*_450);
        _441 = math::margin::validate_spot_margin_trading(move _442, move _445, move _447, move _449) -> [return: bb192, unwind: bb390];
    }

    bb192: {
        StorageDead(_449);
        StorageDead(_447);
        StorageDead(_445);
        StorageDead(_442);
        _440 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _441) -> [return: bb193, unwind: bb390];
    }

    bb193: {
        StorageDead(_441);
        _451 = discriminant(_440);
        switchInt(move _451) -> [0: bb194, 1: bb195, otherwise: bb4];
    }

    bb194: {
        StorageLive(_455);
        _455 = ((_440 as Continue).0: ());
        _439 = _455;
        StorageDead(_455);
        StorageDead(_450);
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_443);
        StorageDead(_440);
        StorageDead(_439);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = &(*_53);
        _459 = <RefMut<'_, User> as Deref>::deref(move _460) -> [return: bb197, unwind: bb390];
    }

    bb195: {
        StorageLive(_452);
        _452 = ((_440 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_454);
        _454 = _452;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _454) -> [return: bb196, unwind: bb390];
    }

    bb196: {
        StorageDead(_454);
        StorageDead(_452);
        StorageDead(_450);
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_443);
        StorageDead(_440);
        StorageDead(_439);
        goto -> bb359;
    }

    bb197: {
        _458 = &(*_459);
        StorageDead(_460);
        _457 = User::is_being_liquidated(move _458) -> [return: bb198, unwind: bb390];
    }

    bb198: {
        switchInt(move _457) -> [0: bb202, otherwise: bb199];
    }

    bb199: {
        StorageDead(_459);
        StorageDead(_458);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = &mut (*_53);
        _463 = <RefMut<'_, User> as DerefMut>::deref_mut(move _464) -> [return: bb200, unwind: bb390];
    }

    bb200: {
        _462 = &mut (*_463);
        StorageDead(_464);
        _461 = User::exit_liquidation(move _462) -> [return: bb201, unwind: bb390];
    }

    bb201: {
        StorageDead(_462);
        StorageDead(_463);
        StorageDead(_461);
        _456 = const ();
        goto -> bb203;
    }

    bb202: {
        StorageDead(_459);
        StorageDead(_458);
        _456 = const ();
        goto -> bb203;
    }

    bb203: {
        StorageDead(_457);
        StorageDead(_456);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        _468 = &mut (*_53);
        _467 = <RefMut<'_, User> as DerefMut>::deref_mut(move _468) -> [return: bb204, unwind: bb390];
    }

    bb204: {
        _466 = &mut (*_467);
        StorageDead(_468);
        StorageLive(_469);
        _469 = _40;
        _465 = User::update_last_active_slot(move _466, move _469) -> [return: bb205, unwind: bb390];
    }

    bb205: {
        StorageDead(_469);
        StorageDead(_466);
        StorageDead(_467);
        StorageDead(_465);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        _475 = &_197;
        StorageLive(_476);
        StorageLive(_477);
        _477 = &_2;
        _476 = &(*_477);
        _474 = SpotMarketMap::<'_>::get_ref_mut(move _475, move _476) -> [return: bb206, unwind: bb390];
    }

    bb206: {
        StorageDead(_476);
        StorageDead(_475);
        _473 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _474) -> [return: bb207, unwind: bb390];
    }

    bb207: {
        StorageDead(_474);
        _478 = discriminant(_473);
        switchInt(move _478) -> [0: bb208, 1: bb209, otherwise: bb4];
    }

    bb208: {
        StorageLive(_482);
        _482 = move ((_473 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _472 = move _482;
        StorageDead(_482);
        _471 = &mut _472;
        _893 = discriminant(_473);
        StorageDead(_477);
        StorageDead(_473);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &(*_471);
        _485 = <RefMut<'_, SpotMarket> as Deref>::deref(move _486) -> [return: bb211, unwind: bb383];
    }

    bb209: {
        StorageLive(_479);
        _479 = ((_473 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_481);
        _481 = _479;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _481) -> [return: bb210, unwind: bb404];
    }

    bb210: {
        StorageDead(_481);
        StorageDead(_479);
        _891 = discriminant(_473);
        StorageDead(_477);
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_470);
        goto -> bb359;
    }

    bb211: {
        StorageDead(_486);
        _484 = ((*_485).30: u64);
        StorageDead(_485);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        _490 = _484;
        _489 = core::num::<impl u64>::checked_add(move _490, const 1_u64) -> [return: bb212, unwind: bb383];
    }

    bb212: {
        StorageDead(_490);
        StorageLive(_491);
        _491 = Option::<u64>::Some(const 1_u64);
        _488 = Option::<u64>::or(move _489, move _491) -> [return: bb213, unwind: bb383];
    }

    bb213: {
        StorageDead(_491);
        StorageDead(_489);
        _487 = Option::<u64>::unwrap(move _488) -> [return: bb214, unwind: bb383];
    }

    bb214: {
        StorageDead(_488);
        StorageLive(_492);
        StorageLive(_493);
        _493 = &mut (*_471);
        _492 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _493) -> [return: bb215, unwind: bb383];
    }

    bb215: {
        StorageDead(_493);
        ((*_492).30: u64) = move _487;
        StorageDead(_487);
        StorageDead(_492);
        _483 = _484;
        StorageDead(_484);
        StorageLive(_494);
        StorageLive(_495);
        _495 = (_77.4: i64);
        StorageLive(_496);
        _496 = _483;
        StorageLive(_497);
        _497 = (*_24);
        StorageLive(_498);
        _498 = _29;
        StorageLive(_499);
        _499 = DepositDirection::Withdraw;
        StorageLive(_500);
        _500 = _3;
        StorageLive(_501);
        _501 = _266;
        StorageLive(_502);
        _502 = _2;
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &(*_471);
        _504 = <RefMut<'_, SpotMarket> as Deref>::deref(move _505) -> [return: bb216, unwind: bb383];
    }

    bb216: {
        StorageDead(_505);
        _503 = ((*_504).11: u128);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = &(*_471);
        _507 = <RefMut<'_, SpotMarket> as Deref>::deref(move _508) -> [return: bb217, unwind: bb383];
    }

    bb217: {
        StorageDead(_508);
        _506 = ((*_507).12: u128);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &(*_471);
        _510 = <RefMut<'_, SpotMarket> as Deref>::deref(move _511) -> [return: bb218, unwind: bb383];
    }

    bb218: {
        StorageDead(_511);
        _509 = ((*_510).13: u128);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = &(*_471);
        _513 = <RefMut<'_, SpotMarket> as Deref>::deref(move _514) -> [return: bb219, unwind: bb383];
    }

    bb219: {
        StorageDead(_514);
        _512 = ((*_513).14: u128);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        _517 = &(*_53);
        _516 = <RefMut<'_, User> as Deref>::deref(move _517) -> [return: bb220, unwind: bb383];
    }

    bb220: {
        StorageDead(_517);
        _515 = ((*_516).7: u64);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _520 = &(*_53);
        _519 = <RefMut<'_, User> as Deref>::deref(move _520) -> [return: bb221, unwind: bb383];
    }

    bb221: {
        StorageDead(_520);
        _518 = ((*_519).8: u64);
        StorageLive(_521);
        _521 = DepositExplanation::Transfer;
        StorageLive(_522);
        StorageLive(_523);
        _523 = _27;
        _522 = Option::<anchor_lang::prelude::Pubkey>::Some(move _523);
        StorageDead(_523);
        _494 = DepositRecord { ts: move _495, user_authority: move _497, user: move _498, direction: move _499, deposit_record_id: move _496, amount: move _500, market_index: move _502, oracle_price: move _501, market_deposit_balance: move _503, market_withdraw_balance: move _506, market_cumulative_deposit_interest: move _509, market_cumulative_borrow_interest: move _512, total_deposits_after: move _515, total_withdraws_after: move _518, explanation: move _521, transfer_user: move _522 };
        StorageDead(_522);
        StorageDead(_521);
        StorageDead(_518);
        StorageDead(_515);
        StorageDead(_512);
        StorageDead(_509);
        StorageDead(_506);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_499);
        StorageDead(_498);
        StorageDead(_497);
        StorageDead(_496);
        StorageDead(_495);
        StorageDead(_519);
        StorageDead(_516);
        StorageDead(_513);
        StorageDead(_510);
        StorageDead(_507);
        StorageDead(_504);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        _536 = &_494;
        _535 = &(*_536);
        _534 = <DepositRecord as anchor_lang::Event>::data(move _535) -> [return: bb222, unwind: bb383];
    }

    bb222: {
        StorageDead(_535);
        _533 = &_534;
        _532 = &(*_533);
        _531 = <Vec<u8> as Deref>::deref(move _532) -> [return: bb223, unwind: bb382];
    }

    bb223: {
        _530 = &(*_531);
        StorageDead(_532);
        _529 = [move _530];
        StorageDead(_530);
        _528 = &_529;
        _527 = &(*_528);
        _526 = move _527 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_527);
        _525 = solana_program::log::sol_log_data(move _526) -> [return: bb224, unwind: bb382];
    }

    bb224: {
        StorageDead(_526);
        drop(_534) -> [return: bb225, unwind: bb383];
    }

    bb225: {
        StorageDead(_536);
        StorageDead(_534);
        StorageDead(_533);
        StorageDead(_531);
        StorageDead(_529);
        StorageDead(_528);
        StorageDead(_525);
        _524 = const ();
        StorageDead(_524);
        _470 = const ();
        StorageDead(_494);
        StorageDead(_483);
        drop(_472) -> [return: bb226, unwind: bb390];
    }

    bb226: {
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_470);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        _542 = &_197;
        StorageLive(_543);
        StorageLive(_544);
        _544 = &_2;
        _543 = &(*_544);
        _541 = SpotMarketMap::<'_>::get_ref_mut(move _542, move _543) -> [return: bb227, unwind: bb390];
    }

    bb227: {
        StorageDead(_543);
        StorageDead(_542);
        _540 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _541) -> [return: bb228, unwind: bb390];
    }

    bb228: {
        StorageDead(_541);
        _545 = discriminant(_540);
        switchInt(move _545) -> [0: bb229, 1: bb230, otherwise: bb4];
    }

    bb229: {
        StorageLive(_549);
        _549 = move ((_540 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _539 = move _549;
        StorageDead(_549);
        _538 = &mut _539;
        _897 = discriminant(_540);
        StorageDead(_544);
        StorageDead(_540);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        _556 = &(*_41);
        _555 = <RefMut<'_, User> as Deref>::deref(move _556) -> [return: bb232, unwind: bb381];
    }

    bb230: {
        StorageLive(_546);
        _546 = ((_540 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_548);
        _548 = _546;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _548) -> [return: bb231, unwind: bb403];
    }

    bb231: {
        StorageDead(_548);
        StorageDead(_546);
        _895 = discriminant(_540);
        StorageDead(_544);
        StorageDead(_540);
        goto -> bb354;
    }

    bb232: {
        StorageDead(_556);
        _554 = ((*_555).27: u8);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _559 = &(*_538);
        _558 = <RefMut<'_, SpotMarket> as Deref>::deref(move _559) -> [return: bb233, unwind: bb381];
    }

    bb233: {
        StorageDead(_559);
        _557 = ((*_558).62: u8);
        _553 = Eq(move _554, move _557);
        switchInt(move _553) -> [0: bb235, otherwise: bb234];
    }

    bb234: {
        StorageDead(_558);
        StorageDead(_557);
        StorageDead(_555);
        StorageDead(_554);
        StorageLive(_560);
        _560 = ();
        _552 = std::result::Result::<(), error::ErrorCode>::Ok(move _560);
        StorageDead(_560);
        goto -> bb251;
    }

    bb235: {
        StorageDead(_558);
        StorageDead(_557);
        StorageDead(_555);
        StorageDead(_554);
        StorageLive(_561);
        _561 = error::ErrorCode::InvalidPoolId;
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _833 = const _;
        _572 = &(*_833);
        _571 = &(*_572);
        _570 = move _571 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_571);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        _580 = &_561;
        _579 = &(*_580);
        _578 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _579) -> [return: bb236, unwind: bb381];
    }

    bb236: {
        StorageDead(_579);
        _577 = [move _578];
        StorageDead(_578);
        _576 = &_577;
        _575 = &(*_576);
        _574 = move _575 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_575);
        _569 = Arguments::<'_>::new_v1(move _570, move _574) -> [return: bb237, unwind: bb381];
    }

    bb237: {
        StorageDead(_574);
        StorageDead(_570);
        _568 = format(move _569) -> [return: bb238, unwind: bb381];
    }

    bb238: {
        StorageDead(_569);
        StorageDead(_580);
        StorageDead(_577);
        StorageDead(_576);
        StorageDead(_572);
        _567 = move _568;
        StorageDead(_568);
        _566 = &_567;
        _565 = &(*_566);
        _564 = <String as Deref>::deref(move _565) -> [return: bb239, unwind: bb380];
    }

    bb239: {
        _563 = &(*_564);
        StorageDead(_565);
        _562 = solana_program::log::sol_log(move _563) -> [return: bb240, unwind: bb380];
    }

    bb240: {
        StorageDead(_563);
        drop(_567) -> [return: bb241, unwind: bb381];
    }

    bb241: {
        StorageDead(_567);
        StorageDead(_566);
        StorageDead(_564);
        StorageDead(_562);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        _832 = const _;
        _591 = &(*_832);
        _590 = &(*_591);
        _589 = move _590 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_590);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        _601 = &(*_41);
        _600 = <RefMut<'_, User> as Deref>::deref(move _601) -> [return: bb242, unwind: bb381];
    }

    bb242: {
        StorageDead(_601);
        _599 = &((*_600).27: u8);
        _598 = &(*_599);
        _597 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _598) -> [return: bb243, unwind: bb381];
    }

    bb243: {
        StorageDead(_598);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        _606 = &(*_538);
        _605 = <RefMut<'_, SpotMarket> as Deref>::deref(move _606) -> [return: bb244, unwind: bb381];
    }

    bb244: {
        StorageDead(_606);
        _604 = &((*_605).62: u8);
        _603 = &(*_604);
        _602 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _603) -> [return: bb245, unwind: bb381];
    }

    bb245: {
        StorageDead(_603);
        _596 = [move _597, move _602];
        StorageDead(_602);
        StorageDead(_597);
        _595 = &_596;
        _594 = &(*_595);
        _593 = move _594 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_594);
        _588 = Arguments::<'_>::new_v1(move _589, move _593) -> [return: bb246, unwind: bb381];
    }

    bb246: {
        StorageDead(_593);
        StorageDead(_589);
        _587 = format(move _588) -> [return: bb247, unwind: bb381];
    }

    bb247: {
        StorageDead(_588);
        StorageDead(_605);
        StorageDead(_604);
        StorageDead(_600);
        StorageDead(_599);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_591);
        _586 = move _587;
        StorageDead(_587);
        _585 = &_586;
        _584 = &(*_585);
        _583 = <String as Deref>::deref(move _584) -> [return: bb248, unwind: bb379];
    }

    bb248: {
        _582 = &(*_583);
        StorageDead(_584);
        _581 = solana_program::log::sol_log(move _582) -> [return: bb249, unwind: bb379];
    }

    bb249: {
        StorageDead(_582);
        drop(_586) -> [return: bb250, unwind: bb381];
    }

    bb250: {
        StorageDead(_586);
        StorageDead(_585);
        StorageDead(_583);
        StorageDead(_581);
        StorageLive(_607);
        _607 = _561;
        _552 = std::result::Result::<(), error::ErrorCode>::Err(move _607);
        StorageDead(_607);
        StorageDead(_561);
        goto -> bb251;
    }

    bb251: {
        StorageDead(_553);
        _551 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _552) -> [return: bb252, unwind: bb381];
    }

    bb252: {
        StorageDead(_552);
        _608 = discriminant(_551);
        switchInt(move _608) -> [0: bb253, 1: bb254, otherwise: bb4];
    }

    bb253: {
        StorageLive(_612);
        _612 = ((_551 as Continue).0: ());
        _550 = _612;
        StorageDead(_612);
        StorageDead(_551);
        StorageDead(_550);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        _618 = &mut (*_41);
        _617 = <RefMut<'_, User> as DerefMut>::deref_mut(move _618) -> [return: bb256, unwind: bb381];
    }

    bb254: {
        StorageLive(_609);
        _609 = ((_551 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_611);
        _611 = _609;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _611) -> [return: bb255, unwind: bb381];
    }

    bb255: {
        StorageDead(_611);
        StorageDead(_609);
        StorageDead(_551);
        StorageDead(_550);
        goto -> bb353;
    }

    bb256: {
        _616 = &mut (*_617);
        StorageDead(_618);
        StorageLive(_619);
        _619 = _3;
        StorageLive(_620);
        _620 = _266;
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        _627 = &(*_538);
        _626 = <RefMut<'_, SpotMarket> as Deref>::deref(move _627) -> [return: bb257, unwind: bb381];
    }

    bb257: {
        _625 = (*_626);
        StorageDead(_627);
        _624 = SpotMarket::get_precision(move _625) -> [return: bb258, unwind: bb381];
    }

    bb258: {
        StorageDead(_625);
        _623 = <u64 as Cast>::cast::<u128>(move _624) -> [return: bb259, unwind: bb381];
    }

    bb259: {
        StorageDead(_624);
        _622 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _623) -> [return: bb260, unwind: bb381];
    }

    bb260: {
        StorageDead(_623);
        _628 = discriminant(_622);
        switchInt(move _628) -> [0: bb261, 1: bb262, otherwise: bb4];
    }

    bb261: {
        StorageLive(_632);
        _632 = ((_622 as Continue).0: u128);
        _621 = _632;
        StorageDead(_632);
        _615 = User::increment_total_deposits(move _616, move _619, move _620, move _621) -> [return: bb264, unwind: bb381];
    }

    bb262: {
        StorageLive(_629);
        _629 = ((_622 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_631);
        _631 = _629;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _631) -> [return: bb263, unwind: bb381];
    }

    bb263: {
        StorageDead(_631);
        StorageDead(_629);
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_619);
        StorageDead(_616);
        StorageDead(_615);
        goto -> bb352;
    }

    bb264: {
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_619);
        StorageDead(_616);
        _614 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _615) -> [return: bb265, unwind: bb381];
    }

    bb265: {
        StorageDead(_615);
        _633 = discriminant(_614);
        switchInt(move _633) -> [0: bb266, 1: bb267, otherwise: bb4];
    }

    bb266: {
        StorageLive(_637);
        _637 = ((_614 as Continue).0: ());
        _613 = _637;
        StorageDead(_637);
        StorageDead(_626);
        StorageDead(_622);
        StorageDead(_617);
        StorageDead(_614);
        StorageDead(_613);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        _640 = &(*_41);
        _639 = <RefMut<'_, User> as Deref>::deref(move _640) -> [return: bb269, unwind: bb381];
    }

    bb267: {
        StorageLive(_634);
        _634 = ((_614 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_636);
        _636 = _634;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _636) -> [return: bb268, unwind: bb381];
    }

    bb268: {
        StorageDead(_636);
        StorageDead(_634);
        goto -> bb352;
    }

    bb269: {
        StorageDead(_640);
        _638 = ((*_639).7: u64);
        StorageDead(_639);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        _643 = &(*_41);
        _642 = <RefMut<'_, User> as Deref>::deref(move _643) -> [return: bb270, unwind: bb381];
    }

    bb270: {
        StorageDead(_643);
        _641 = ((*_642).8: u64);
        StorageDead(_642);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        _649 = &mut (*_41);
        _648 = <RefMut<'_, User> as DerefMut>::deref_mut(move _649) -> [return: bb271, unwind: bb381];
    }

    bb271: {
        _647 = &mut (*_648);
        StorageDead(_649);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        _652 = &(*_538);
        _651 = <RefMut<'_, SpotMarket> as Deref>::deref(move _652) -> [return: bb272, unwind: bb381];
    }

    bb272: {
        StorageDead(_652);
        _650 = ((*_651).42: u16);
        _646 = User::force_get_spot_position_mut(move _647, move _650) -> [return: bb273, unwind: bb381];
    }

    bb273: {
        StorageDead(_650);
        StorageDead(_647);
        _645 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _646) -> [return: bb274, unwind: bb381];
    }

    bb274: {
        StorageDead(_646);
        _653 = discriminant(_645);
        switchInt(move _653) -> [0: bb275, 1: bb276, otherwise: bb4];
    }

    bb275: {
        StorageLive(_657);
        _657 = move ((_645 as Continue).0: &mut state::user::SpotPosition);
        _644 = move _657;
        StorageDead(_657);
        StorageDead(_651);
        StorageDead(_648);
        StorageDead(_645);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        _662 = _3;
        _661 = move _662 as u128 (IntToInt);
        StorageDead(_662);
        StorageLive(_663);
        StorageLive(_664);
        _831 = const _;
        _664 = &(*_831);
        _663 = &(*_664);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        _668 = &mut (*_538);
        _667 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _668) -> [return: bb278, unwind: bb381];
    }

    bb276: {
        StorageLive(_654);
        _654 = ((_645 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_656);
        _656 = _654;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _656) -> [return: bb277, unwind: bb381];
    }

    bb277: {
        StorageDead(_656);
        StorageDead(_654);
        StorageDead(_651);
        StorageDead(_648);
        StorageDead(_645);
        goto -> bb351;
    }

    bb278: {
        _666 = &mut (*_667);
        StorageDead(_668);
        StorageLive(_669);
        _669 = &mut (*_644);
        StorageLive(_670);
        _670 = Option::<u128>::None;
        _660 = update_spot_balances_and_cumulative_deposits(move _661, move _663, move _666, move _669, const false, move _670) -> [return: bb279, unwind: bb381];
    }

    bb279: {
        StorageDead(_670);
        StorageDead(_669);
        StorageDead(_666);
        StorageDead(_663);
        StorageDead(_661);
        _659 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _660) -> [return: bb280, unwind: bb381];
    }

    bb280: {
        StorageDead(_660);
        _671 = discriminant(_659);
        switchInt(move _671) -> [0: bb281, 1: bb282, otherwise: bb4];
    }

    bb281: {
        StorageLive(_675);
        _675 = ((_659 as Continue).0: ());
        _658 = _675;
        StorageDead(_675);
        StorageDead(_667);
        StorageDead(_664);
        StorageDead(_659);
        StorageDead(_658);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        _679 = &(*_644);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        _682 = &(*_538);
        _681 = <RefMut<'_, SpotMarket> as Deref>::deref(move _682) -> [return: bb284, unwind: bb381];
    }

    bb282: {
        StorageLive(_672);
        _672 = ((_659 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_674);
        _674 = _672;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _674) -> [return: bb283, unwind: bb381];
    }

    bb283: {
        StorageDead(_674);
        StorageDead(_672);
        StorageDead(_667);
        StorageDead(_664);
        StorageDead(_659);
        StorageDead(_658);
        goto -> bb351;
    }

    bb284: {
        _680 = &(*_681);
        StorageDead(_682);
        _678 = SpotPosition::get_token_amount(move _679, move _680) -> [return: bb285, unwind: bb381];
    }

    bb285: {
        StorageDead(_680);
        StorageDead(_679);
        _677 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _678) -> [return: bb286, unwind: bb381];
    }

    bb286: {
        StorageDead(_678);
        _683 = discriminant(_677);
        switchInt(move _683) -> [0: bb287, 1: bb288, otherwise: bb4];
    }

    bb287: {
        StorageLive(_687);
        _687 = ((_677 as Continue).0: u128);
        _676 = _687;
        StorageDead(_687);
        StorageDead(_681);
        StorageDead(_677);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        _690 = _676;
        _689 = Eq(move _690, const 0_u128);
        switchInt(move _689) -> [0: bb291, otherwise: bb290];
    }

    bb288: {
        StorageLive(_684);
        _684 = ((_677 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_686);
        _686 = _684;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _686) -> [return: bb289, unwind: bb381];
    }

    bb289: {
        StorageDead(_686);
        StorageDead(_684);
        StorageDead(_681);
        StorageDead(_677);
        goto -> bb350;
    }

    bb290: {
        StorageDead(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        _695 = ((*_644).0: u64);
        _694 = Eq(move _695, const 0_u64);
        switchInt(move _694) -> [0: bb293, otherwise: bb292];
    }

    bb291: {
        StorageDead(_690);
        _688 = const ();
        goto -> bb312;
    }

    bb292: {
        StorageDead(_695);
        StorageLive(_696);
        _696 = ();
        _693 = std::result::Result::<(), error::ErrorCode>::Ok(move _696);
        StorageDead(_696);
        goto -> bb307;
    }

    bb293: {
        StorageDead(_695);
        StorageLive(_697);
        _697 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        _830 = const _;
        _708 = &(*_830);
        _707 = &(*_708);
        _706 = move _707 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_707);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        _716 = &_697;
        _715 = &(*_716);
        _714 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _715) -> [return: bb294, unwind: bb381];
    }

    bb294: {
        StorageDead(_715);
        _713 = [move _714];
        StorageDead(_714);
        _712 = &_713;
        _711 = &(*_712);
        _710 = move _711 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_711);
        _705 = Arguments::<'_>::new_v1(move _706, move _710) -> [return: bb295, unwind: bb381];
    }

    bb295: {
        StorageDead(_710);
        StorageDead(_706);
        _704 = format(move _705) -> [return: bb296, unwind: bb381];
    }

    bb296: {
        StorageDead(_705);
        StorageDead(_716);
        StorageDead(_713);
        StorageDead(_712);
        StorageDead(_708);
        _703 = move _704;
        StorageDead(_704);
        _702 = &_703;
        _701 = &(*_702);
        _700 = <String as Deref>::deref(move _701) -> [return: bb297, unwind: bb378];
    }

    bb297: {
        _699 = &(*_700);
        StorageDead(_701);
        _698 = solana_program::log::sol_log(move _699) -> [return: bb298, unwind: bb378];
    }

    bb298: {
        StorageDead(_699);
        drop(_703) -> [return: bb299, unwind: bb381];
    }

    bb299: {
        StorageDead(_703);
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_698);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        _829 = const _;
        _727 = &(*_829);
        _726 = &(*_727);
        _725 = move _726 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_726);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        _735 = &((*_644).0: u64);
        _734 = &(*_735);
        _733 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _734) -> [return: bb300, unwind: bb381];
    }

    bb300: {
        StorageDead(_734);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        _738 = &_676;
        _737 = &(*_738);
        _736 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _737) -> [return: bb301, unwind: bb381];
    }

    bb301: {
        StorageDead(_737);
        _732 = [move _733, move _736];
        StorageDead(_736);
        StorageDead(_733);
        _731 = &_732;
        _730 = &(*_731);
        _729 = move _730 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_730);
        _724 = Arguments::<'_>::new_v1(move _725, move _729) -> [return: bb302, unwind: bb381];
    }

    bb302: {
        StorageDead(_729);
        StorageDead(_725);
        _723 = format(move _724) -> [return: bb303, unwind: bb381];
    }

    bb303: {
        StorageDead(_724);
        StorageDead(_738);
        StorageDead(_735);
        StorageDead(_732);
        StorageDead(_731);
        StorageDead(_727);
        _722 = move _723;
        StorageDead(_723);
        _721 = &_722;
        _720 = &(*_721);
        _719 = <String as Deref>::deref(move _720) -> [return: bb304, unwind: bb377];
    }

    bb304: {
        _718 = &(*_719);
        StorageDead(_720);
        _717 = solana_program::log::sol_log(move _718) -> [return: bb305, unwind: bb377];
    }

    bb305: {
        StorageDead(_718);
        drop(_722) -> [return: bb306, unwind: bb381];
    }

    bb306: {
        StorageDead(_722);
        StorageDead(_721);
        StorageDead(_719);
        StorageDead(_717);
        StorageLive(_739);
        _739 = _697;
        _693 = std::result::Result::<(), error::ErrorCode>::Err(move _739);
        StorageDead(_739);
        StorageDead(_697);
        goto -> bb307;
    }

    bb307: {
        StorageDead(_694);
        _692 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _693) -> [return: bb308, unwind: bb381];
    }

    bb308: {
        StorageDead(_693);
        _740 = discriminant(_692);
        switchInt(move _740) -> [0: bb309, 1: bb310, otherwise: bb4];
    }

    bb309: {
        StorageLive(_744);
        _744 = ((_692 as Continue).0: ());
        _691 = _744;
        StorageDead(_744);
        StorageDead(_692);
        StorageDead(_691);
        _688 = const ();
        goto -> bb312;
    }

    bb310: {
        StorageLive(_741);
        _741 = ((_692 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_743);
        _743 = _741;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _743) -> [return: bb311, unwind: bb381];
    }

    bb311: {
        StorageDead(_743);
        StorageDead(_741);
        StorageDead(_692);
        StorageDead(_691);
        StorageDead(_689);
        StorageDead(_688);
        goto -> bb350;
    }

    bb312: {
        StorageDead(_689);
        StorageDead(_688);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        _748 = &(*_538);
        _747 = <RefMut<'_, SpotMarket> as Deref>::deref(move _748) -> [return: bb313, unwind: bb381];
    }

    bb313: {
        StorageDead(_748);
        _746 = ((*_747).30: u64);
        StorageDead(_747);
        StorageLive(_749);
        StorageLive(_750);
        StorageLive(_751);
        StorageLive(_752);
        _752 = _746;
        _751 = core::num::<impl u64>::checked_add(move _752, const 1_u64) -> [return: bb314, unwind: bb381];
    }

    bb314: {
        StorageDead(_752);
        StorageLive(_753);
        _753 = Option::<u64>::Some(const 1_u64);
        _750 = Option::<u64>::or(move _751, move _753) -> [return: bb315, unwind: bb381];
    }

    bb315: {
        StorageDead(_753);
        StorageDead(_751);
        _749 = Option::<u64>::unwrap(move _750) -> [return: bb316, unwind: bb381];
    }

    bb316: {
        StorageDead(_750);
        StorageLive(_754);
        StorageLive(_755);
        _755 = &mut (*_538);
        _754 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _755) -> [return: bb317, unwind: bb381];
    }

    bb317: {
        StorageDead(_755);
        ((*_754).30: u64) = move _749;
        StorageDead(_749);
        StorageDead(_754);
        _745 = _746;
        StorageDead(_746);
        StorageLive(_756);
        StorageLive(_757);
        _757 = (_77.4: i64);
        StorageLive(_758);
        _758 = _745;
        StorageLive(_759);
        _759 = (*_24);
        StorageLive(_760);
        _760 = _27;
        StorageLive(_761);
        _761 = DepositDirection::Deposit;
        StorageLive(_762);
        _762 = _3;
        StorageLive(_763);
        _763 = _266;
        StorageLive(_764);
        _764 = _2;
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        _767 = &(*_538);
        _766 = <RefMut<'_, SpotMarket> as Deref>::deref(move _767) -> [return: bb318, unwind: bb381];
    }

    bb318: {
        StorageDead(_767);
        _765 = ((*_766).11: u128);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        _770 = &(*_538);
        _769 = <RefMut<'_, SpotMarket> as Deref>::deref(move _770) -> [return: bb319, unwind: bb381];
    }

    bb319: {
        StorageDead(_770);
        _768 = ((*_769).12: u128);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        _773 = &(*_538);
        _772 = <RefMut<'_, SpotMarket> as Deref>::deref(move _773) -> [return: bb320, unwind: bb381];
    }

    bb320: {
        StorageDead(_773);
        _771 = ((*_772).13: u128);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        _776 = &(*_538);
        _775 = <RefMut<'_, SpotMarket> as Deref>::deref(move _776) -> [return: bb321, unwind: bb381];
    }

    bb321: {
        StorageDead(_776);
        _774 = ((*_775).14: u128);
        StorageLive(_777);
        _777 = _638;
        StorageLive(_778);
        _778 = _641;
        StorageLive(_779);
        _779 = DepositExplanation::Transfer;
        StorageLive(_780);
        StorageLive(_781);
        _781 = _29;
        _780 = Option::<anchor_lang::prelude::Pubkey>::Some(move _781);
        StorageDead(_781);
        _756 = DepositRecord { ts: move _757, user_authority: move _759, user: move _760, direction: move _761, deposit_record_id: move _758, amount: move _762, market_index: move _764, oracle_price: move _763, market_deposit_balance: move _765, market_withdraw_balance: move _768, market_cumulative_deposit_interest: move _771, market_cumulative_borrow_interest: move _774, total_deposits_after: move _777, total_withdraws_after: move _778, explanation: move _779, transfer_user: move _780 };
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_778);
        StorageDead(_777);
        StorageDead(_774);
        StorageDead(_771);
        StorageDead(_768);
        StorageDead(_765);
        StorageDead(_764);
        StorageDead(_763);
        StorageDead(_762);
        StorageDead(_761);
        StorageDead(_760);
        StorageDead(_759);
        StorageDead(_758);
        StorageDead(_757);
        StorageDead(_775);
        StorageDead(_772);
        StorageDead(_769);
        StorageDead(_766);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        _794 = &_756;
        _793 = &(*_794);
        _792 = <DepositRecord as anchor_lang::Event>::data(move _793) -> [return: bb322, unwind: bb381];
    }

    bb322: {
        StorageDead(_793);
        _791 = &_792;
        _790 = &(*_791);
        _789 = <Vec<u8> as Deref>::deref(move _790) -> [return: bb323, unwind: bb376];
    }

    bb323: {
        _788 = &(*_789);
        StorageDead(_790);
        _787 = [move _788];
        StorageDead(_788);
        _786 = &_787;
        _785 = &(*_786);
        _784 = move _785 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_785);
        _783 = solana_program::log::sol_log_data(move _784) -> [return: bb324, unwind: bb376];
    }

    bb324: {
        StorageDead(_784);
        drop(_792) -> [return: bb325, unwind: bb381];
    }

    bb325: {
        StorageDead(_794);
        StorageDead(_792);
        StorageDead(_791);
        StorageDead(_789);
        StorageDead(_787);
        StorageDead(_786);
        StorageDead(_783);
        _782 = const ();
        StorageDead(_782);
        _537 = const ();
        StorageDead(_756);
        StorageDead(_745);
        StorageDead(_676);
        StorageDead(_644);
        StorageDead(_641);
        StorageDead(_638);
        drop(_539) -> [return: bb326, unwind: bb390];
    }

    bb326: {
        StorageDead(_539);
        StorageDead(_538);
        StorageDead(_537);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        _798 = &mut (*_41);
        _797 = <RefMut<'_, User> as DerefMut>::deref_mut(move _798) -> [return: bb327, unwind: bb390];
    }

    bb327: {
        _796 = &mut (*_797);
        StorageDead(_798);
        StorageLive(_799);
        _799 = _40;
        _795 = User::update_last_active_slot(move _796, move _799) -> [return: bb328, unwind: bb390];
    }

    bb328: {
        StorageDead(_799);
        StorageDead(_796);
        StorageDead(_797);
        StorageDead(_795);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        _803 = &_197;
        StorageLive(_804);
        StorageLive(_805);
        _805 = &_2;
        _804 = &(*_805);
        _802 = SpotMarketMap::<'_>::get_ref(move _803, move _804) -> [return: bb329, unwind: bb390];
    }

    bb329: {
        StorageDead(_804);
        StorageDead(_803);
        _801 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _802) -> [return: bb330, unwind: bb390];
    }

    bb330: {
        StorageDead(_802);
        _806 = discriminant(_801);
        switchInt(move _806) -> [0: bb331, 1: bb332, otherwise: bb4];
    }

    bb331: {
        StorageLive(_810);
        _810 = move ((_801 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _800 = move _810;
        StorageDead(_810);
        _901 = discriminant(_801);
        StorageDead(_805);
        StorageDead(_801);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        _817 = &_800;
        _816 = &(*_817);
        _815 = <Ref<'_, SpotMarket> as Deref>::deref(move _816) -> [return: bb334, unwind: bb375];
    }

    bb332: {
        StorageLive(_807);
        _807 = ((_801 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_809);
        _809 = _807;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _809) -> [return: bb333, unwind: bb402];
    }

    bb333: {
        StorageDead(_809);
        StorageDead(_807);
        _899 = discriminant(_801);
        StorageDead(_805);
        StorageDead(_801);
        goto -> bb349;
    }

    bb334: {
        _814 = &(*_815);
        StorageDead(_816);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        _853 = deref_copy (_1.1: &mut instructions::user::TransferDeposit<'_>);
        _854 = deref_copy ((*_853).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _929 = (((_854.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _822 = &(*_929);
        _821 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _822) -> [return: bb335, unwind: bb375];
    }

    bb335: {
        _820 = &(*_821);
        _819 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _820) -> [return: bb336, unwind: bb375];
    }

    bb336: {
        StorageDead(_822);
        StorageDead(_820);
        _818 = ((*_819).2: u64);
        _813 = validate_spot_market_vault_amount(move _814, move _818) -> [return: bb337, unwind: bb375];
    }

    bb337: {
        StorageDead(_818);
        StorageDead(_814);
        _812 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _813) -> [return: bb338, unwind: bb375];
    }

    bb338: {
        StorageDead(_813);
        _823 = discriminant(_812);
        switchInt(move _823) -> [0: bb339, 1: bb340, otherwise: bb4];
    }

    bb339: {
        StorageLive(_827);
        _827 = ((_812 as Continue).0: i64);
        _811 = _827;
        StorageDead(_827);
        StorageDead(_821);
        StorageDead(_819);
        StorageDead(_817);
        StorageDead(_815);
        StorageDead(_812);
        StorageDead(_811);
        StorageLive(_828);
        _828 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _828);
        StorageDead(_828);
        drop(_800) -> [return: bb342, unwind: bb390];
    }

    bb340: {
        StorageLive(_824);
        _824 = ((_812 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_826);
        _826 = _824;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _826) -> [return: bb341, unwind: bb375];
    }

    bb341: {
        StorageDead(_826);
        StorageDead(_824);
        StorageDead(_821);
        StorageDead(_819);
        StorageDead(_817);
        StorageDead(_815);
        StorageDead(_812);
        StorageDead(_811);
        drop(_800) -> [return: bb349, unwind: bb390];
    }

    bb342: {
        StorageDead(_800);
        StorageDead(_266);
        drop(_198) -> [return: bb343, unwind: bb391];
    }

    bb343: {
        StorageDead(_198);
        drop(_197) -> [return: bb344, unwind: bb392];
    }

    bb344: {
        StorageDead(_197);
        drop(_196) -> [return: bb345, unwind: bb398];
    }

    bb345: {
        StorageDead(_196);
        StorageDead(_85);
        StorageDead(_77);
        drop(_66) -> [return: bb346, unwind: bb399];
    }

    bb346: {
        StorageDead(_66);
        StorageDead(_65);
        drop(_54) -> [return: bb347, unwind: bb400];
    }

    bb347: {
        StorageDead(_54);
        StorageDead(_53);
        drop(_42) -> [return: bb348, unwind: bb401];
    }

    bb348: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb374;
    }

    bb349: {
        StorageDead(_800);
        goto -> bb359;
    }

    bb350: {
        StorageDead(_676);
        goto -> bb351;
    }

    bb351: {
        StorageDead(_644);
        StorageDead(_641);
        StorageDead(_638);
        goto -> bb353;
    }

    bb352: {
        StorageDead(_626);
        StorageDead(_622);
        StorageDead(_617);
        StorageDead(_614);
        StorageDead(_613);
        goto -> bb353;
    }

    bb353: {
        drop(_539) -> [return: bb354, unwind: bb390];
    }

    bb354: {
        StorageDead(_539);
        StorageDead(_538);
        StorageDead(_537);
        goto -> bb359;
    }

    bb355: {
        StorageDead(_383);
        StorageDead(_379);
        StorageDead(_374);
        StorageDead(_371);
        StorageDead(_370);
        goto -> bb356;
    }

    bb356: {
        drop(_296) -> [return: bb357, unwind: bb390];
    }

    bb357: {
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_294);
        goto -> bb359;
    }

    bb358: {
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_280);
        StorageDead(_279);
        goto -> bb359;
    }

    bb359: {
        StorageDead(_266);
        goto -> bb362;
    }

    bb360: {
        StorageDead(_237);
        drop(_226) -> [return: bb361, unwind: bb390];
    }

    bb361: {
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_224);
        goto -> bb362;
    }

    bb362: {
        drop(_198) -> [return: bb363, unwind: bb391];
    }

    bb363: {
        StorageDead(_198);
        drop(_197) -> [return: bb364, unwind: bb392];
    }

    bb364: {
        StorageDead(_197);
        drop(_196) -> [return: bb365, unwind: bb398];
    }

    bb365: {
        StorageDead(_196);
        goto -> bb368;
    }

    bb366: {
        StorageDead(_212);
        StorageDead(_211);
        drop(_209) -> [return: bb367, unwind: bb398];
    }

    bb367: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb368;
    }

    bb368: {
        StorageDead(_85);
        goto -> bb369;
    }

    bb369: {
        StorageDead(_77);
        drop(_66) -> [return: bb370, unwind: bb399];
    }

    bb370: {
        StorageDead(_66);
        StorageDead(_65);
        drop(_54) -> [return: bb371, unwind: bb400];
    }

    bb371: {
        StorageDead(_54);
        StorageDead(_53);
        drop(_42) -> [return: bb372, unwind: bb401];
    }

    bb372: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb373;
    }

    bb373: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb374;
    }

    bb374: {
        return;
    }

    bb375 (cleanup): {
        drop(_800) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb376 (cleanup): {
        drop(_792) -> [return: bb381, unwind terminate(cleanup)];
    }

    bb377 (cleanup): {
        drop(_722) -> [return: bb381, unwind terminate(cleanup)];
    }

    bb378 (cleanup): {
        drop(_703) -> [return: bb381, unwind terminate(cleanup)];
    }

    bb379 (cleanup): {
        drop(_586) -> [return: bb381, unwind terminate(cleanup)];
    }

    bb380 (cleanup): {
        drop(_567) -> [return: bb381, unwind terminate(cleanup)];
    }

    bb381 (cleanup): {
        drop(_539) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb382 (cleanup): {
        drop(_534) -> [return: bb383, unwind terminate(cleanup)];
    }

    bb383 (cleanup): {
        drop(_472) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb384 (cleanup): {
        drop(_343) -> [return: bb386, unwind terminate(cleanup)];
    }

    bb385 (cleanup): {
        drop(_324) -> [return: bb386, unwind terminate(cleanup)];
    }

    bb386 (cleanup): {
        drop(_296) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb387 (cleanup): {
        drop(_268) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb388 (cleanup): {
        drop(_226) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb389 (cleanup): {
        drop(_209) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb390 (cleanup): {
        drop(_198) -> [return: bb391, unwind terminate(cleanup)];
    }

    bb391 (cleanup): {
        drop(_197) -> [return: bb392, unwind terminate(cleanup)];
    }

    bb392 (cleanup): {
        drop(_196) -> [return: bb398, unwind terminate(cleanup)];
    }

    bb393 (cleanup): {
        drop(_212) -> [return: bb394, unwind terminate(cleanup)];
    }

    bb394 (cleanup): {
        drop(_209) -> [return: bb398, unwind terminate(cleanup)];
    }

    bb395 (cleanup): {
        drop(_173) -> [return: bb398, unwind terminate(cleanup)];
    }

    bb396 (cleanup): {
        drop(_137) -> [return: bb398, unwind terminate(cleanup)];
    }

    bb397 (cleanup): {
        drop(_100) -> [return: bb398, unwind terminate(cleanup)];
    }

    bb398 (cleanup): {
        drop(_66) -> [return: bb399, unwind terminate(cleanup)];
    }

    bb399 (cleanup): {
        drop(_54) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb400 (cleanup): {
        drop(_42) -> [return: bb401, unwind terminate(cleanup)];
    }

    bb401 (cleanup): {
        resume;
    }

    bb402 (cleanup): {
        _911 = discriminant(_801);
        goto -> bb390;
    }

    bb403 (cleanup): {
        _912 = discriminant(_540);
        goto -> bb390;
    }

    bb404 (cleanup): {
        _913 = discriminant(_473);
        goto -> bb390;
    }

    bb405 (cleanup): {
        _914 = discriminant(_297);
        goto -> bb390;
    }

    bb406 (cleanup): {
        _915 = discriminant(_269);
        goto -> bb390;
    }

    bb407 (cleanup): {
        _916 = discriminant(_227);
        goto -> bb390;
    }

    bb408 (cleanup): {
        _918 = discriminant(_200);
        goto -> bb393;
    }

    bb409 (cleanup): {
        _919 = discriminant(_78);
        goto -> bb398;
    }

    bb410 (cleanup): {
        _920 = discriminant(_67);
        goto -> bb399;
    }

    bb411 (cleanup): {
        _921 = discriminant(_55);
        goto -> bb400;
    }

    bb412 (cleanup): {
        _922 = discriminant(_43);
        goto -> bb401;
    }

    bb413 (cleanup): {
        _923 = discriminant(_33);
        goto -> bb401;
    }

    bb414 (cleanup): {
        _924 = discriminant(_15);
        goto -> bb401;
    }

    bb415 (cleanup): {
        _925 = discriminant(_5);
        goto -> bb401;
    }
}
