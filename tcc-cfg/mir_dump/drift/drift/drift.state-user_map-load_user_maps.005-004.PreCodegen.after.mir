// MIR for `load_user_maps` after PreCodegen

fn load_user_maps(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, _2: bool) -> std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> {
    debug account_info_iter => _1;
    debug must_be_writable => _2;
    let mut _0: std::result::Result<(state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>), error::ErrorCode>;
    let mut _3: state::user_map::UserMap<'_>;
    let _7: ();
    let mut _8: ();
    let mut _9: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _10: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _11: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _16: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _18: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _20: error::ErrorCode;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: ();
    let mut _28: bool;
    let mut _29: usize;
    let mut _30: &[u8];
    let _31: &&mut [u8];
    let mut _32: &std::cell::Ref<'_, &mut [u8]>;
    let mut _33: usize;
    let mut _34: !;
    let _38: &[u8];
    let mut _39: &[u8];
    let _40: &&mut [u8];
    let mut _41: &std::cell::Ref<'_, &mut [u8]>;
    let mut _42: std::ops::Range<usize>;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: usize;
    let mut _46: (usize, bool);
    let mut _47: &[u8];
    let _48: ();
    let mut _49: bool;
    let mut _50: &&[u8; 8];
    let mut _51: &&[u8; 8];
    let _52: &[u8; 8];
    let mut _53: !;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _56: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _57: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _58: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _65: ();
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: !;
    let mut _69: error::ErrorCode;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _72: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, error::ErrorCode>;
    let mut _73: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _74: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _75: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, error::ErrorCode>;
    let mut _76: error::ErrorCode;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _82: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _83: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _84: anchor_lang::prelude::Pubkey;
    let mut _85: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _86: ();
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _88: std::result::Result<(), error::ErrorCode>;
    let mut _89: bool;
    let mut _90: &std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let _91: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _92: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _93: ();
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: &std::string::String;
    let _99: &std::string::String;
    let _100: std::string::String;
    let mut _102: std::fmt::Arguments<'_>;
    let mut _103: &[&str];
    let mut _104: &[&str; 2];
    let _105: &[&str; 2];
    let _106: [&str; 2];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let mut _108: &[core::fmt::rt::Argument<'_>; 1];
    let _109: &[core::fmt::rt::Argument<'_>; 1];
    let _110: [core::fmt::rt::Argument<'_>; 1];
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &error::ErrorCode;
    let _113: &error::ErrorCode;
    let mut _114: error::ErrorCode;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _122: std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _123: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _124: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _131: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _132: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _133: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _134: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _135: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _136: error::ErrorCode;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _143: ();
    let mut _144: bool;
    let mut _145: usize;
    let mut _146: &[u8];
    let _147: &&mut [u8];
    let mut _148: &std::cell::Ref<'_, &mut [u8]>;
    let mut _149: usize;
    let mut _150: !;
    let mut _151: error::ErrorCode;
    let _155: &[u8];
    let mut _156: &[u8];
    let _157: &&mut [u8];
    let mut _158: &std::cell::Ref<'_, &mut [u8]>;
    let mut _159: std::ops::Range<usize>;
    let mut _160: usize;
    let mut _161: usize;
    let mut _162: usize;
    let mut _163: (usize, bool);
    let mut _164: &[u8];
    let _165: ();
    let mut _166: bool;
    let mut _167: &&[u8; 8];
    let mut _168: &&[u8; 8];
    let _169: &[u8; 8];
    let mut _170: !;
    let mut _171: error::ErrorCode;
    let _175: &[u8];
    let mut _176: &[u8];
    let _177: &&mut [u8];
    let mut _178: &std::cell::Ref<'_, &mut [u8]>;
    let mut _179: std::ops::Range<usize>;
    let mut _180: usize;
    let mut _181: usize;
    let mut _182: usize;
    let mut _183: (usize, bool);
    let mut _184: &[u8];
    let mut _186: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Pubkey>;
    let mut _187: std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode>;
    let mut _188: std::result::Result<anchor_lang::prelude::Pubkey, std::convert::Infallible>;
    let mut _189: [u8; 32];
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _196: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _197: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _198: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _199: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _200: isize;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _205: ();
    let mut _206: bool;
    let mut _207: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _208: &anchor_lang::prelude::Pubkey;
    let _209: &anchor_lang::prelude::Pubkey;
    let mut _210: !;
    let _212: ();
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: !;
    let mut _216: error::ErrorCode;
    let mut _218: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _219: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _220: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _221: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _222: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _223: error::ErrorCode;
    let mut _224: isize;
    let mut _226: !;
    let mut _227: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _229: ();
    let mut _230: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _231: std::result::Result<(), error::ErrorCode>;
    let mut _232: &mut state::user_map::UserStatsMap<'_>;
    let mut _233: anchor_lang::prelude::Pubkey;
    let mut _234: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _235: isize;
    let mut _237: !;
    let mut _238: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _240: !;
    let _241: ();
    let mut _242: !;
    let mut _243: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>);
    let mut _244: state::user_map::UserMap<'_>;
    let mut _245: state::user_map::UserStatsMap<'_>;
    let mut _247: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _248: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _249: &mut [u8];
    let mut _250: &mut [u8];
    let mut _251: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _252: &mut [u8];
    let mut _253: &mut [u8];
    let mut _254: &mut [u8];
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    scope 1 {
        debug user_map => _3;
        let mut _4: state::user_map::UserStatsMap<'_>;
        scope 2 {
            debug user_stats_map => _4;
            let _5: [u8; 8];
            scope 3 {
                debug user_discriminator => _5;
                let _6: [u8; 8];
                scope 4 {
                    debug user_stats_discriminator => _6;
                    scope 5 {
                        debug user_account_info => _12;
                        let _12: &&anchor_lang::prelude::AccountInfo<'_>;
                        let _13: &anchor_lang::prelude::Pubkey;
                        scope 6 {
                            debug user_key => _13;
                            let _14: std::cell::Ref<'_, &mut [u8]>;
                            let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _25: std::cell::Ref<'_, &mut [u8]>;
                            scope 7 {
                                debug data => _14;
                                let _26: usize;
                                scope 12 {
                                    debug expected_data_len => _26;
                                    let _35: &[u8; 8];
                                    let _36: usize;
                                    scope 13 {
                                        debug account_discriminator => _35;
                                        let _54: &anchor_lang::prelude::AccountInfo<'_>;
                                        let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _63: &anchor_lang::prelude::AccountInfo<'_>;
                                        scope 18 {
                                            debug user_account_info => _54;
                                            let _64: bool;
                                            scope 23 {
                                                debug is_writable => _64;
                                                let _70: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                                let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _81: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                                scope 24 {
                                                    debug user_account_loader => _70;
                                                    let _94: error::ErrorCode;
                                                    let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _119: ();
                                                    let _120: &&anchor_lang::prelude::AccountInfo<'_>;
                                                    let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _129: &&anchor_lang::prelude::AccountInfo<'_>;
                                                    scope 29 {
                                                        debug error_code => _94;
                                                        let _101: std::string::String;
                                                        let mut _246: &[&str; 2];
                                                        scope 30 {
                                                            debug res => _101;
                                                        }
                                                    }
                                                    scope 31 {
                                                        debug residual => _116;
                                                        scope 32 {
                                                        }
                                                    }
                                                    scope 33 {
                                                        debug val => _119;
                                                        scope 34 {
                                                        }
                                                    }
                                                    scope 35 {
                                                        debug user_stats_account_info => _120;
                                                        let _130: std::cell::Ref<'_, &mut [u8]>;
                                                        let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _141: std::cell::Ref<'_, &mut [u8]>;
                                                        scope 40 {
                                                            debug data => _130;
                                                            let _142: usize;
                                                            scope 45 {
                                                                debug expected_data_len => _142;
                                                                let _152: &[u8; 8];
                                                                let _153: usize;
                                                                scope 46 {
                                                                    debug account_discriminator => _152;
                                                                    let _172: &[u8; 32];
                                                                    let _173: usize;
                                                                    scope 51 {
                                                                        debug authority_slice => _172;
                                                                        let _185: anchor_lang::prelude::Pubkey;
                                                                        let _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _194: anchor_lang::prelude::Pubkey;
                                                                        scope 56 {
                                                                            debug authority => _185;
                                                                            let _195: &anchor_lang::prelude::AccountInfo<'_>;
                                                                            let _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _204: &anchor_lang::prelude::AccountInfo<'_>;
                                                                            scope 61 {
                                                                                debug user_stats_account_info => _195;
                                                                                let _211: bool;
                                                                                scope 66 {
                                                                                    debug is_writable => _211;
                                                                                    let _217: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                                                                    let _225: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _228: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                                                                    scope 67 {
                                                                                        debug user_stats_account_loader => _217;
                                                                                        let _236: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _239: ();
                                                                                        scope 72 {
                                                                                            debug residual => _236;
                                                                                            scope 73 {
                                                                                            }
                                                                                        }
                                                                                        scope 74 {
                                                                                            debug val => _239;
                                                                                            scope 75 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 68 {
                                                                                        debug residual => _225;
                                                                                        scope 69 {
                                                                                        }
                                                                                    }
                                                                                    scope 70 {
                                                                                        debug val => _228;
                                                                                        scope 71 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 62 {
                                                                                debug residual => _201;
                                                                                scope 63 {
                                                                                }
                                                                            }
                                                                            scope 64 {
                                                                                debug val => _204;
                                                                                scope 65 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 57 {
                                                                            debug residual => _191;
                                                                            scope 58 {
                                                                            }
                                                                        }
                                                                        scope 59 {
                                                                            debug val => _194;
                                                                            scope 60 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 52 {
                                                                        debug offset => _173;
                                                                        let _174: &[u8];
                                                                        scope 53 {
                                                                            debug slice => _174;
                                                                            scope 54 {
                                                                                scope 55 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 47 {
                                                                    debug offset => _153;
                                                                    let _154: &[u8];
                                                                    scope 48 {
                                                                        debug slice => _154;
                                                                        scope 49 {
                                                                            scope 50 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 41 {
                                                            debug residual => _138;
                                                            scope 42 {
                                                            }
                                                        }
                                                        scope 43 {
                                                            debug val => _141;
                                                            scope 44 {
                                                            }
                                                        }
                                                    }
                                                    scope 36 {
                                                        debug residual => _126;
                                                        scope 37 {
                                                        }
                                                    }
                                                    scope 38 {
                                                        debug val => _129;
                                                        scope 39 {
                                                        }
                                                    }
                                                }
                                                scope 25 {
                                                    debug residual => _78;
                                                    scope 26 {
                                                    }
                                                }
                                                scope 27 {
                                                    debug val => _81;
                                                    scope 28 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 19 {
                                            debug residual => _60;
                                            scope 20 {
                                            }
                                        }
                                        scope 21 {
                                            debug val => _63;
                                            scope 22 {
                                            }
                                        }
                                    }
                                    scope 14 {
                                        debug offset => _36;
                                        let _37: &[u8];
                                        scope 15 {
                                            debug slice => _37;
                                            scope 16 {
                                                scope 17 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 8 {
                                debug residual => _22;
                                scope 9 {
                                }
                            }
                            scope 10 {
                                debug val => _25;
                                scope 11 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = UserMap::<'_>::empty() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        _4 = UserStatsMap::<'_>::empty() -> [return: bb2, unwind: bb140];
    }

    bb2: {
        StorageLive(_5);
        _5 = <User as anchor_lang::Discriminator>::discriminator() -> [return: bb3, unwind: bb139];
    }

    bb3: {
        StorageLive(_6);
        _6 = <UserStats as anchor_lang::Discriminator>::discriminator() -> [return: bb4, unwind: bb139];
    }

    bb4: {
        StorageLive(_7);
        goto -> bb5;
    }

    bb5: {
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut (*_1);
        _9 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _10) -> [return: bb6, unwind: bb139];
    }

    bb6: {
        StorageDead(_10);
        _11 = discriminant(_9);
        switchInt(move _11) -> [1: bb7, otherwise: bb115];
    }

    bb7: {
        StorageLive(_12);
        _12 = ((_9 as Some).0: &&anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_13);
        _247 = deref_copy (*_12);
        _13 = ((*_247).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _248 = deref_copy (*_12);
        _18 = &(*_248);
        _17 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _18) -> [return: bb8, unwind: bb139];
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = error::ErrorCode::CouldNotLoadUserData;
        _19 = std::result::Result::<Ref<'_, &mut [u8]>, error::ErrorCode>::Err(move _20);
        StorageDead(_20);
        _16 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::or::<error::ErrorCode>(move _17, move _19) -> [return: bb9, unwind: bb139];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb10, unwind: bb139];
    }

    bb10: {
        StorageDead(_16);
        _21 = discriminant(_15);
        switchInt(move _21) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_25);
        _25 = move ((_15 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _14 = move _25;
        StorageDead(_25);
        _257 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_26);
        _26 = const _;
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_14;
        _31 = <Ref<'_, &mut [u8]> as Deref>::deref(move _32) -> [return: bb15, unwind: bb138];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_22);
        _22 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb14, unwind: bb143];
    }

    bb14: {
        StorageDead(_24);
        StorageDead(_22);
        _255 = discriminant(_15);
        StorageDead(_15);
        goto -> bb132;
    }

    bb15: {
        _249 = deref_copy (*_31);
        _30 = &(*_249);
        StorageDead(_32);
        _29 = core::slice::<impl [u8]>::len(move _30) -> [return: bb16, unwind: bb138];
    }

    bb16: {
        StorageDead(_30);
        StorageLive(_33);
        _33 = _26;
        _28 = Lt(move _29, move _33);
        switchInt(move _28) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        _7 = const ();
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb116;
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_35);
        StorageLive(_36);
        _36 = const 0_usize;
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_14;
        _40 = <Ref<'_, &mut [u8]> as Deref>::deref(move _41) -> [return: bb19, unwind: bb138];
    }

    bb19: {
        _250 = deref_copy (*_40);
        _39 = &(*_250);
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _36;
        StorageLive(_44);
        StorageLive(_45);
        _45 = _36;
        _46 = CheckedAdd(_45, const 8_usize);
        assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, const 8_usize) -> [success: bb20, unwind: bb138];
    }

    bb20: {
        _44 = move (_46.0: usize);
        StorageDead(_45);
        _42 = std::ops::Range::<usize> { start: move _43, end: move _44 };
        StorageDead(_44);
        StorageDead(_43);
        _38 = <[u8] as Index<std::ops::Range<usize>>>::index(move _39, move _42) -> [return: bb21, unwind: bb138];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_39);
        _37 = &(*_38);
        StorageLive(_47);
        _47 = &(*_37);
        _35 = load_user_maps::as_array::<u8>(move _47) -> [return: bb22, unwind: bb138];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_35;
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_5;
        _51 = &_52;
        _49 = <&[u8; 8] as PartialEq>::ne(move _50, move _51) -> [return: bb23, unwind: bb138];
    }

    bb23: {
        switchInt(move _49) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        _7 = const ();
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_35);
        goto -> bb116;
    }

    bb25: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        _48 = const ();
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &mut (*_1);
        _57 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _58) -> [return: bb26, unwind: bb138];
    }

    bb26: {
        StorageDead(_58);
        _56 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _57) -> [return: bb27, unwind: bb138];
    }

    bb27: {
        StorageDead(_57);
        _55 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _56) -> [return: bb28, unwind: bb138];
    }

    bb28: {
        StorageDead(_56);
        _59 = discriminant(_55);
        switchInt(move _59) -> [0: bb29, 1: bb30, otherwise: bb12];
    }

    bb29: {
        StorageLive(_63);
        _63 = ((_55 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _54 = _63;
        StorageDead(_63);
        StorageDead(_55);
        StorageLive(_64);
        _64 = ((*_54).6: bool);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _64;
        switchInt(move _66) -> [0: bb32, otherwise: bb34];
    }

    bb30: {
        StorageLive(_60);
        _60 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb31, unwind: bb138];
    }

    bb31: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_55);
        goto -> bb131;
    }

    bb32: {
        StorageLive(_67);
        _67 = _2;
        switchInt(move _67) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageLive(_69);
        _69 = error::ErrorCode::UserWrongMutability;
        _0 = std::result::Result::<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode>::Err(move _69);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb130;
    }

    bb34: {
        _65 = const ();
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &(*_54);
        _73 = anchor_lang::prelude::AccountLoader::<'_, User>::try_from(move _74) -> [return: bb35, unwind: bb138];
    }

    bb35: {
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = error::ErrorCode::InvalidUserAccount;
        _75 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, error::ErrorCode>::Err(move _76);
        StorageDead(_76);
        _72 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _73, move _75) -> [return: bb36, unwind: bb138];
    }

    bb36: {
        StorageDead(_75);
        StorageDead(_73);
        _71 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, error::ErrorCode> as Try>::branch(move _72) -> [return: bb37, unwind: bb138];
    }

    bb37: {
        StorageDead(_72);
        _77 = discriminant(_71);
        switchInt(move _77) -> [0: bb38, 1: bb39, otherwise: bb12];
    }

    bb38: {
        StorageLive(_81);
        _81 = move ((_71 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _70 = move _81;
        StorageDead(_81);
        StorageDead(_71);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &mut (_3.0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>);
        StorageLive(_84);
        _84 = (*_13);
        StorageLive(_85);
        _85 = move _70;
        _82 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>>::insert(move _83, move _84, move _85) -> [return: bb41, unwind: bb138];
    }

    bb39: {
        StorageLive(_78);
        _78 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb40, unwind: bb138];
    }

    bb40: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_71);
        goto -> bb129;
    }

    bb41: {
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &mut (*_1);
        _91 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _92) -> [return: bb42, unwind: bb138];
    }

    bb42: {
        _90 = &_91;
        StorageDead(_92);
        _89 = Option::<&&anchor_lang::prelude::AccountInfo<'_>>::is_some(move _90) -> [return: bb43, unwind: bb138];
    }

    bb43: {
        switchInt(move _89) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_93);
        _93 = ();
        _88 = std::result::Result::<(), error::ErrorCode>::Ok(move _93);
        StorageDead(_93);
        goto -> bb52;
    }

    bb45: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_94);
        _94 = error::ErrorCode::UserStatsNotFound;
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _246 = const _;
        _105 = &(*_246);
        _104 = &(*_105);
        _103 = move _104 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_104);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_94;
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _112) -> [return: bb46, unwind: bb138];
    }

    bb46: {
        StorageDead(_112);
        _110 = [move _111];
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = move _108 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_108);
        _102 = Arguments::<'_>::new_v1(move _103, move _107) -> [return: bb47, unwind: bb138];
    }

    bb47: {
        StorageDead(_107);
        StorageDead(_103);
        _101 = format(move _102) -> [return: bb48, unwind: bb138];
    }

    bb48: {
        StorageDead(_102);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_105);
        _100 = move _101;
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = <String as Deref>::deref(move _98) -> [return: bb49, unwind: bb137];
    }

    bb49: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb50, unwind: bb137];
    }

    bb50: {
        StorageDead(_96);
        drop(_100) -> [return: bb51, unwind: bb138];
    }

    bb51: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_114);
        _114 = _94;
        _88 = std::result::Result::<(), error::ErrorCode>::Err(move _114);
        StorageDead(_114);
        StorageDead(_94);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_89);
        _87 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _88) -> [return: bb53, unwind: bb138];
    }

    bb53: {
        StorageDead(_88);
        _115 = discriminant(_87);
        switchInt(move _115) -> [0: bb54, 1: bb55, otherwise: bb12];
    }

    bb54: {
        StorageLive(_119);
        _119 = ((_87 as Continue).0: ());
        _86 = _119;
        StorageDead(_119);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &mut (*_1);
        _123 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _124) -> [return: bb57, unwind: bb138];
    }

    bb55: {
        StorageLive(_116);
        _116 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb56, unwind: bb138];
    }

    bb56: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb129;
    }

    bb57: {
        StorageDead(_124);
        _122 = <Option<&&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _123) -> [return: bb58, unwind: bb138];
    }

    bb58: {
        StorageDead(_123);
        _121 = <std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _122) -> [return: bb59, unwind: bb138];
    }

    bb59: {
        StorageDead(_122);
        _125 = discriminant(_121);
        switchInt(move _125) -> [0: bb60, 1: bb61, otherwise: bb12];
    }

    bb60: {
        StorageLive(_129);
        _129 = ((_121 as Continue).0: &&anchor_lang::prelude::AccountInfo<'_>);
        _120 = _129;
        StorageDead(_129);
        StorageDead(_121);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _251 = deref_copy (*_120);
        _134 = &(*_251);
        _133 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _134) -> [return: bb63, unwind: bb138];
    }

    bb61: {
        StorageLive(_126);
        _126 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb62, unwind: bb138];
    }

    bb62: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_121);
        goto -> bb128;
    }

    bb63: {
        StorageDead(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = error::ErrorCode::CouldNotLoadUserStatsData;
        _135 = std::result::Result::<Ref<'_, &mut [u8]>, error::ErrorCode>::Err(move _136);
        StorageDead(_136);
        _132 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::or::<error::ErrorCode>(move _133, move _135) -> [return: bb64, unwind: bb138];
    }

    bb64: {
        StorageDead(_135);
        StorageDead(_133);
        _131 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _132) -> [return: bb65, unwind: bb138];
    }

    bb65: {
        StorageDead(_132);
        _137 = discriminant(_131);
        switchInt(move _137) -> [0: bb66, 1: bb67, otherwise: bb12];
    }

    bb66: {
        StorageLive(_141);
        _141 = move ((_131 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _130 = move _141;
        StorageDead(_141);
        _261 = discriminant(_131);
        StorageDead(_131);
        StorageLive(_142);
        _142 = const _;
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &_130;
        _147 = <Ref<'_, &mut [u8]> as Deref>::deref(move _148) -> [return: bb69, unwind: bb136];
    }

    bb67: {
        StorageLive(_138);
        _138 = ((_131 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb68, unwind: bb142];
    }

    bb68: {
        StorageDead(_140);
        StorageDead(_138);
        _259 = discriminant(_131);
        StorageDead(_131);
        goto -> bb127;
    }

    bb69: {
        _252 = deref_copy (*_147);
        _146 = &(*_252);
        StorageDead(_148);
        _145 = core::slice::<impl [u8]>::len(move _146) -> [return: bb70, unwind: bb136];
    }

    bb70: {
        StorageDead(_146);
        StorageLive(_149);
        _149 = _142;
        _144 = Lt(move _145, move _149);
        switchInt(move _144) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        StorageLive(_151);
        _151 = error::ErrorCode::InvalidUserStatsAccount;
        _0 = std::result::Result::<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode>::Err(move _151);
        StorageDead(_151);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb126;
    }

    bb72: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        _143 = const ();
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_152);
        StorageLive(_153);
        _153 = const 0_usize;
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_130;
        _157 = <Ref<'_, &mut [u8]> as Deref>::deref(move _158) -> [return: bb73, unwind: bb136];
    }

    bb73: {
        _253 = deref_copy (*_157);
        _156 = &(*_253);
        StorageDead(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = _153;
        StorageLive(_161);
        StorageLive(_162);
        _162 = _153;
        _163 = CheckedAdd(_162, const 8_usize);
        assert(!move (_163.1: bool), "attempt to compute `{} + {}`, which would overflow", move _162, const 8_usize) -> [success: bb74, unwind: bb136];
    }

    bb74: {
        _161 = move (_163.0: usize);
        StorageDead(_162);
        _159 = std::ops::Range::<usize> { start: move _160, end: move _161 };
        StorageDead(_161);
        StorageDead(_160);
        _155 = <[u8] as Index<std::ops::Range<usize>>>::index(move _156, move _159) -> [return: bb75, unwind: bb136];
    }

    bb75: {
        StorageDead(_159);
        StorageDead(_156);
        _154 = &(*_155);
        StorageLive(_164);
        _164 = &(*_154);
        _152 = load_user_maps::as_array::<u8>(move _164) -> [return: bb76, unwind: bb136];
    }

    bb76: {
        StorageDead(_164);
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_152;
        StorageLive(_168);
        StorageLive(_169);
        _169 = &_6;
        _168 = &_169;
        _166 = <&[u8; 8] as PartialEq>::ne(move _167, move _168) -> [return: bb77, unwind: bb136];
    }

    bb77: {
        switchInt(move _166) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_167);
        StorageLive(_171);
        _171 = error::ErrorCode::InvalidUserStatsAccount;
        _0 = std::result::Result::<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode>::Err(move _171);
        StorageDead(_171);
        StorageDead(_166);
        StorageDead(_165);
        goto -> bb125;
    }

    bb79: {
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_167);
        _165 = const ();
        StorageDead(_166);
        StorageDead(_165);
        StorageLive(_172);
        StorageLive(_173);
        _173 = const 8_usize;
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &_130;
        _177 = <Ref<'_, &mut [u8]> as Deref>::deref(move _178) -> [return: bb80, unwind: bb136];
    }

    bb80: {
        _254 = deref_copy (*_177);
        _176 = &(*_254);
        StorageDead(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = _173;
        StorageLive(_181);
        StorageLive(_182);
        _182 = _173;
        _183 = CheckedAdd(_182, const 32_usize);
        assert(!move (_183.1: bool), "attempt to compute `{} + {}`, which would overflow", move _182, const 32_usize) -> [success: bb81, unwind: bb136];
    }

    bb81: {
        _181 = move (_183.0: usize);
        StorageDead(_182);
        _179 = std::ops::Range::<usize> { start: move _180, end: move _181 };
        StorageDead(_181);
        StorageDead(_180);
        _175 = <[u8] as Index<std::ops::Range<usize>>>::index(move _176, move _179) -> [return: bb82, unwind: bb136];
    }

    bb82: {
        StorageDead(_179);
        StorageDead(_176);
        _174 = &(*_175);
        StorageLive(_184);
        _184 = &(*_174);
        _172 = load_user_maps::as_array::<u8>(move _184) -> [return: bb83, unwind: bb136];
    }

    bb83: {
        StorageDead(_184);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = (*_172);
        _188 = <anchor_lang::prelude::Pubkey as TryFrom<[u8; 32]>>::try_from(move _189) -> [return: bb84, unwind: bb136];
    }

    bb84: {
        StorageDead(_189);
        _187 = <std::result::Result<anchor_lang::prelude::Pubkey, Infallible> as SafeUnwrap>::safe_unwrap(move _188) -> [return: bb85, unwind: bb136];
    }

    bb85: {
        StorageDead(_188);
        _186 = <std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode> as Try>::branch(move _187) -> [return: bb86, unwind: bb136];
    }

    bb86: {
        StorageDead(_187);
        _190 = discriminant(_186);
        switchInt(move _190) -> [0: bb87, 1: bb88, otherwise: bb12];
    }

    bb87: {
        StorageLive(_194);
        _194 = ((_186 as Continue).0: anchor_lang::prelude::Pubkey);
        _185 = _194;
        StorageDead(_194);
        StorageDead(_186);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &mut (*_1);
        _198 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _199) -> [return: bb90, unwind: bb136];
    }

    bb88: {
        StorageLive(_191);
        _191 = ((_186 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_193);
        _193 = _191;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _193) -> [return: bb89, unwind: bb136];
    }

    bb89: {
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_186);
        goto -> bb124;
    }

    bb90: {
        StorageDead(_199);
        _197 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _198) -> [return: bb91, unwind: bb136];
    }

    bb91: {
        StorageDead(_198);
        _196 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _197) -> [return: bb92, unwind: bb136];
    }

    bb92: {
        StorageDead(_197);
        _200 = discriminant(_196);
        switchInt(move _200) -> [0: bb93, 1: bb94, otherwise: bb12];
    }

    bb93: {
        StorageLive(_204);
        _204 = ((_196 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _195 = _204;
        StorageDead(_204);
        StorageDead(_196);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &(_4.0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_185;
        _208 = &(*_209);
        _206 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, UserStats>>::contains_key::<anchor_lang::prelude::Pubkey>(move _207, move _208) -> [return: bb96, unwind: bb136];
    }

    bb94: {
        StorageLive(_201);
        _201 = ((_196 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_203);
        _203 = _201;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _203) -> [return: bb95, unwind: bb136];
    }

    bb95: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_196);
        goto -> bb123;
    }

    bb96: {
        switchInt(move _206) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_195);
        StorageDead(_185);
        StorageDead(_172);
        StorageDead(_152);
        StorageDead(_142);
        drop(_130) -> [return: bb119, unwind: bb138];
    }

    bb98: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_207);
        _205 = const ();
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_211);
        _211 = ((*_195).6: bool);
        StorageLive(_212);
        StorageLive(_213);
        _213 = _211;
        switchInt(move _213) -> [0: bb99, otherwise: bb101];
    }

    bb99: {
        StorageLive(_214);
        _214 = _2;
        switchInt(move _214) -> [0: bb101, otherwise: bb100];
    }

    bb100: {
        StorageLive(_216);
        _216 = error::ErrorCode::UserStatsWrongMutability;
        _0 = std::result::Result::<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode>::Err(move _216);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_212);
        goto -> bb122;
    }

    bb101: {
        _212 = const ();
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_212);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &(*_195);
        _220 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::try_from(move _221) -> [return: bb102, unwind: bb136];
    }

    bb102: {
        StorageDead(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = error::ErrorCode::InvalidUserStatsAccount;
        _222 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, error::ErrorCode>::Err(move _223);
        StorageDead(_223);
        _219 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _220, move _222) -> [return: bb103, unwind: bb136];
    }

    bb103: {
        StorageDead(_222);
        StorageDead(_220);
        _218 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, error::ErrorCode> as Try>::branch(move _219) -> [return: bb104, unwind: bb136];
    }

    bb104: {
        StorageDead(_219);
        _224 = discriminant(_218);
        switchInt(move _224) -> [0: bb105, 1: bb106, otherwise: bb12];
    }

    bb105: {
        StorageLive(_228);
        _228 = move ((_218 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _217 = move _228;
        StorageDead(_228);
        StorageDead(_218);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &mut _4;
        StorageLive(_233);
        _233 = _185;
        StorageLive(_234);
        _234 = move _217;
        _231 = UserStatsMap::<'_>::insert(move _232, move _233, move _234) -> [return: bb108, unwind: bb136];
    }

    bb106: {
        StorageLive(_225);
        _225 = ((_218 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_227);
        _227 = _225;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _227) -> [return: bb107, unwind: bb136];
    }

    bb107: {
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_218);
        goto -> bb121;
    }

    bb108: {
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_232);
        _230 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _231) -> [return: bb109, unwind: bb136];
    }

    bb109: {
        StorageDead(_231);
        _235 = discriminant(_230);
        switchInt(move _235) -> [0: bb110, 1: bb111, otherwise: bb12];
    }

    bb110: {
        StorageLive(_239);
        _239 = ((_230 as Continue).0: ());
        _229 = _239;
        StorageDead(_239);
        StorageDead(_230);
        StorageDead(_229);
        _8 = const ();
        StorageDead(_217);
        StorageDead(_211);
        StorageDead(_195);
        StorageDead(_185);
        StorageDead(_172);
        StorageDead(_152);
        StorageDead(_142);
        drop(_130) -> [return: bb113, unwind: bb138];
    }

    bb111: {
        StorageLive(_236);
        _236 = ((_230 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_238);
        _238 = _236;
        _0 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _238) -> [return: bb112, unwind: bb136];
    }

    bb112: {
        StorageDead(_238);
        StorageDead(_236);
        StorageDead(_230);
        StorageDead(_229);
        goto -> bb121;
    }

    bb113: {
        StorageDead(_130);
        StorageDead(_120);
        StorageDead(_70);
        StorageDead(_64);
        StorageDead(_54);
        StorageDead(_35);
        StorageDead(_26);
        drop(_14) -> [return: bb114, unwind: bb139];
    }

    bb114: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_9);
        goto -> bb5;
    }

    bb115: {
        StorageLive(_241);
        _7 = const ();
        StorageDead(_241);
        goto -> bb118;
    }

    bb116: {
        StorageDead(_26);
        drop(_14) -> [return: bb117, unwind: bb139];
    }

    bb117: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_243);
        StorageLive(_244);
        _244 = move _3;
        StorageLive(_245);
        _245 = move _4;
        _243 = (move _244, move _245);
        StorageDead(_245);
        StorageDead(_244);
        _0 = std::result::Result::<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode>::Ok(move _243);
        StorageDead(_243);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb135;
    }

    bb119: {
        StorageDead(_130);
        StorageDead(_120);
        StorageDead(_70);
        StorageDead(_64);
        StorageDead(_54);
        StorageDead(_35);
        StorageDead(_26);
        drop(_14) -> [return: bb120, unwind: bb139];
    }

    bb120: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_9);
        goto -> bb5;
    }

    bb121: {
        StorageDead(_217);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_211);
        goto -> bb123;
    }

    bb123: {
        StorageDead(_195);
        goto -> bb124;
    }

    bb124: {
        StorageDead(_185);
        StorageDead(_172);
        goto -> bb125;
    }

    bb125: {
        StorageDead(_152);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_142);
        drop(_130) -> [return: bb127, unwind: bb138];
    }

    bb127: {
        StorageDead(_130);
        goto -> bb128;
    }

    bb128: {
        StorageDead(_120);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_70);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_64);
        goto -> bb131;
    }

    bb131: {
        StorageDead(_54);
        StorageDead(_35);
        StorageDead(_26);
        drop(_14) -> [return: bb132, unwind: bb139];
    }

    bb132: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        drop(_4) -> [return: bb133, unwind: bb140];
    }

    bb133: {
        StorageDead(_4);
        drop(_3) -> [return: bb134, unwind: bb141];
    }

    bb134: {
        StorageDead(_3);
        goto -> bb135;
    }

    bb135: {
        return;
    }

    bb136 (cleanup): {
        drop(_130) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_100) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_14) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_4) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_3) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        resume;
    }

    bb142 (cleanup): {
        _263 = discriminant(_131);
        goto -> bb138;
    }

    bb143 (cleanup): {
        _264 = discriminant(_15);
        goto -> bb139;
    }
}
