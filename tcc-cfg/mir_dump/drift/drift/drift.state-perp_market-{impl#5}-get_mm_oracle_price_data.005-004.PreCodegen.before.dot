digraph Mir_0_3814 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PerpMarket::get_mm_oracle_price_data(_1: &amp;ReErased state::perp_market::PerpMarket, _2: state::oracle::OraclePriceData, _3: u64, _4: &amp;ReErased state::state::ValidityGuardRails) -&gt; std::result::Result&lt;state::oracle::MMOraclePriceData, error::ErrorCode&gt;<br align="left"/>let _5: i64;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _7: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _8: i64;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _10: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _14: !;<br align="left"/>let mut _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _16: i64;<br align="left"/>let mut _17: i64;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _19: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _20: u64;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: i64;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: i64;<br align="left"/>let _31: state::oracle::OraclePriceData;<br align="left"/>let mut _32: i64;<br align="left"/>let mut _33: i64;<br align="left"/>let mut _34: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _35: u64;<br align="left"/>let _36: math::oracle::OracleValidity;<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: i64;<br align="left"/>let mut _39: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::oracle::OracleValidity&gt;;<br align="left"/>let mut _40: std::result::Result&lt;math::oracle::OracleValidity, error::ErrorCode&gt;;<br align="left"/>let mut _41: state::user::MarketType;<br align="left"/>let mut _42: u16;<br align="left"/>let mut _43: i64;<br align="left"/>let mut _44: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _45: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _46: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let _47: &amp;ReErased &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let mut _48: u64;<br align="left"/>let mut _49: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _50: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _51: state::perp_market::PerpMarket;<br align="left"/>let mut _52: isize;<br align="left"/>let _53: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _56: u64;<br align="left"/>let mut _57: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _58: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _59: math::oracle::LogMode;<br align="left"/>let mut _60: i8;<br align="left"/>let mut _61: isize;<br align="left"/>let _62: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _63: !;<br align="left"/>let mut _64: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _65: math::oracle::OracleValidity;<br align="left"/>let mut _66: state::oracle::MMOraclePriceData;<br align="left"/>let mut _67: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::MMOraclePriceData&gt;;<br align="left"/>let mut _68: std::result::Result&lt;state::oracle::MMOraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _69: i64;<br align="left"/>let mut _70: i64;<br align="left"/>let mut _71: u64;<br align="left"/>let mut _72: math::oracle::OracleValidity;<br align="left"/>let mut _73: state::oracle::OraclePriceData;<br align="left"/>let mut _74: isize;<br align="left"/>let _75: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _76: !;<br align="left"/>let mut _77: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _78: state::oracle::MMOraclePriceData;<br align="left"/>let mut _79: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug oracle_price_data =&gt; _2;<br align="left"/>debug clock_slot =&gt; _3;<br align="left"/>debug oracle_guard_rails =&gt; _4;<br align="left"/>debug delay =&gt; _5;<br align="left"/>debug residual =&gt; _13;<br align="left"/>debug val =&gt; _16;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug oracle_data =&gt; _31;<br align="left"/>debug oracle_validity =&gt; _36;<br align="left"/>debug residual =&gt; _53;<br align="left"/>debug val =&gt; _56;<br align="left"/>debug residual =&gt; _62;<br align="left"/>debug val =&gt; _65;<br align="left"/>debug residual =&gt; _75;<br align="left"/>debug val =&gt; _78;<br align="left"/>>;
    bb0__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _3<br/></td></tr><tr><td align="left">_10 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _11)</td></tr></table>>];
    bb1__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb2__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_12 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb3__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_9 as Continue).0: i64)<br/>_8 = _16<br/>StorageDead(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = (((*_1).1: state::perp_market::AMM).55: u64)<br/></td></tr><tr><td align="left">_19 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _20)</td></tr></table>>];
    bb4__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_15)<br/>_15 = _13<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _15)</td></tr></table>>];
    bb6__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb8__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_21 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb9__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_18 as Continue).0: i64)<br/>_17 = _25<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_7 = &lt;i64 as SafeMath&gt;::safe_sub(move _8, move _17)</td></tr></table>>];
    bb10__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb11__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_17)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb13__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_26 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb14__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_6 as Continue).0: i64)<br/>_5 = _30<br/>StorageDead(_30)<br/>StorageDead(_18)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = (((*_1).1: state::perp_market::AMM).67: i64)<br/>StorageLive(_33)<br/>_33 = _5<br/>StorageLive(_34)<br/>_34 = Option::&lt;u64&gt;::None<br/>StorageLive(_35)<br/>_35 = (_2.1: u64)<br/>_31 = OraclePriceData { price: move _32, confidence: move _35, delay: move _33, has_sufficient_number_of_data_points: const true, sequence_id: move _34 }<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = (((*_1).1: state::perp_market::AMM).67: i64)<br/>_37 = Eq(move _38, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb15__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb16__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_36 = OracleValidity::NonPositive<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = state::user::MarketType::Perp<br/>StorageLive(_42)<br/>_42 = ((*_1).21: u16)<br/>StorageLive(_43)<br/>_43 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = &amp;_31<br/>_44 = &amp;(*_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = &amp;_4<br/>_79 = deref_copy (*_47)<br/>_46 = &amp;(*_79)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = (*_1)<br/></td></tr><tr><td align="left">_50 = PerpMarket::get_max_confidence_interval_multiplier(move _51)</td></tr></table>>];
    bb19__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/></td></tr><tr><td align="left">_49 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _50)</td></tr></table>>];
    bb20__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>_52 = discriminant(_49)<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb21__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_49 as Continue).0: u64)<br/>_48 = _56<br/>StorageDead(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>_58 = &amp;(((*_1).1: state::perp_market::AMM).72: state::oracle::OracleSource)<br/>_57 = &amp;(*_58)<br/>StorageLive(_59)<br/>_59 = LogMode::MMOracle<br/>StorageLive(_60)<br/>_60 = (((*_1).1: state::perp_market::AMM).78: i8)<br/></td></tr><tr><td align="left">_40 = oracle_validity(move _41, move _42, move _43, move _44, move _46, move _48, move _57, move _59, move _60)</td></tr></table>>];
    bb22__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_49 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_55)<br/>_55 = _53<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _55)</td></tr></table>>];
    bb23__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_53)<br/>StorageDead(_48)<br/>StorageDead(_46)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_59)<br/>StorageDead(_57)<br/>StorageDead(_48)<br/>StorageDead(_46)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">_39 = &lt;std::result::Result&lt;OracleValidity, error::ErrorCode&gt; as Try&gt;::branch(move _40)</td></tr></table>>];
    bb25__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>_61 = discriminant(_39)<br/></td></tr><tr><td align="left">switchInt(move _61)</td></tr></table>>];
    bb26__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_65)<br/>_65 = ((_39 as Continue).0: math::oracle::OracleValidity)<br/>_36 = _65<br/>StorageDead(_65)<br/>StorageDead(_58)<br/>StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_45)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = ((_39 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_64)<br/>_64 = _62<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _64)</td></tr></table>>];
    bb28__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageDead(_62)<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = (((*_1).1: state::perp_market::AMM).67: i64)<br/>StorageLive(_70)<br/>_70 = _5<br/>StorageLive(_71)<br/>_71 = (((*_1).1: state::perp_market::AMM).79: u64)<br/>StorageLive(_72)<br/>_72 = _36<br/>StorageLive(_73)<br/>_73 = _2<br/></td></tr><tr><td align="left">_68 = MMOraclePriceData::new(move _69, move _70, move _71, move _72, move _73)</td></tr></table>>];
    bb30__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">_67 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _68)</td></tr></table>>];
    bb31__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>_74 = discriminant(_67)<br/></td></tr><tr><td align="left">switchInt(move _74)</td></tr></table>>];
    bb32__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_78)<br/>_78 = ((_67 as Continue).0: state::oracle::MMOraclePriceData)<br/>_66 = _78<br/>StorageDead(_78)<br/>_0 = std::result::Result::&lt;MMOraclePriceData, error::ErrorCode&gt;::Ok(move _66)<br/>StorageDead(_66)<br/>StorageDead(_36)<br/>StorageDead(_31)<br/>StorageDead(_5)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_75)<br/>_75 = ((_67 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_77)<br/>_77 = _75<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _77)</td></tr></table>>];
    bb34__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_75)<br/>StorageDead(_66)<br/>StorageDead(_36)<br/>StorageDead(_31)<br/>StorageDead(_5)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_45)<br/>StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_3814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3814 -> bb1__0_3814 [label="return"];
    bb1__0_3814 -> bb2__0_3814 [label="return"];
    bb2__0_3814 -> bb3__0_3814 [label="0"];
    bb2__0_3814 -> bb5__0_3814 [label="1"];
    bb2__0_3814 -> bb4__0_3814 [label="otherwise"];
    bb3__0_3814 -> bb7__0_3814 [label="return"];
    bb5__0_3814 -> bb6__0_3814 [label="return"];
    bb6__0_3814 -> bb37__0_3814 [label=""];
    bb7__0_3814 -> bb8__0_3814 [label="return"];
    bb8__0_3814 -> bb9__0_3814 [label="0"];
    bb8__0_3814 -> bb10__0_3814 [label="1"];
    bb8__0_3814 -> bb4__0_3814 [label="otherwise"];
    bb9__0_3814 -> bb12__0_3814 [label="return"];
    bb10__0_3814 -> bb11__0_3814 [label="return"];
    bb11__0_3814 -> bb36__0_3814 [label=""];
    bb12__0_3814 -> bb13__0_3814 [label="return"];
    bb13__0_3814 -> bb14__0_3814 [label="0"];
    bb13__0_3814 -> bb15__0_3814 [label="1"];
    bb13__0_3814 -> bb4__0_3814 [label="otherwise"];
    bb14__0_3814 -> bb18__0_3814 [label="0"];
    bb14__0_3814 -> bb17__0_3814 [label="otherwise"];
    bb15__0_3814 -> bb16__0_3814 [label="return"];
    bb16__0_3814 -> bb36__0_3814 [label=""];
    bb17__0_3814 -> bb29__0_3814 [label=""];
    bb18__0_3814 -> bb19__0_3814 [label="return"];
    bb19__0_3814 -> bb20__0_3814 [label="return"];
    bb20__0_3814 -> bb21__0_3814 [label="0"];
    bb20__0_3814 -> bb22__0_3814 [label="1"];
    bb20__0_3814 -> bb4__0_3814 [label="otherwise"];
    bb21__0_3814 -> bb24__0_3814 [label="return"];
    bb22__0_3814 -> bb23__0_3814 [label="return"];
    bb23__0_3814 -> bb35__0_3814 [label=""];
    bb24__0_3814 -> bb25__0_3814 [label="return"];
    bb25__0_3814 -> bb26__0_3814 [label="0"];
    bb25__0_3814 -> bb27__0_3814 [label="1"];
    bb25__0_3814 -> bb4__0_3814 [label="otherwise"];
    bb26__0_3814 -> bb29__0_3814 [label=""];
    bb27__0_3814 -> bb28__0_3814 [label="return"];
    bb28__0_3814 -> bb35__0_3814 [label=""];
    bb29__0_3814 -> bb30__0_3814 [label="return"];
    bb30__0_3814 -> bb31__0_3814 [label="return"];
    bb31__0_3814 -> bb32__0_3814 [label="0"];
    bb31__0_3814 -> bb33__0_3814 [label="1"];
    bb31__0_3814 -> bb4__0_3814 [label="otherwise"];
    bb32__0_3814 -> bb39__0_3814 [label=""];
    bb33__0_3814 -> bb34__0_3814 [label="return"];
    bb34__0_3814 -> bb39__0_3814 [label=""];
    bb35__0_3814 -> bb38__0_3814 [label=""];
    bb36__0_3814 -> bb37__0_3814 [label=""];
    bb37__0_3814 -> bb38__0_3814 [label=""];
    bb38__0_3814 -> bb39__0_3814 [label=""];
}
