// MIR for `constraints::amm_not_paused` before PreCodegen

fn constraints::amm_not_paused(_1: &anchor_lang::prelude::Account<'_, state::state::State>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug state => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _5: std::result::Result<bool, error::ErrorCode>;
    let mut _6: &state::state::State;
    let _7: &state::state::State;
    let mut _8: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: bool;
    let mut _14: !;
    let mut _15: anchor_lang::error::Error;
    let mut _16: error::ErrorCode;
    let mut _17: ();
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        _7 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &(*_7);
        StorageDead(_8);
        _5 = state::state::State::amm_paused(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _4 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = ((_4 as Continue).0: bool);
        _3 = _13;
        StorageDead(_13);
        switchInt(move _3) -> [0: bb9, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb11;
    }

    bb8: {
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        _16 = error::ErrorCode::ExchangePaused;
        _15 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _16) -> [return: bb10, unwind continue];
    }

    bb9: {
        StorageDead(_7);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_17);
        _17 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _17);
        StorageDead(_17);
        goto -> bb12;
    }

    bb10: {
        StorageDead(_16);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _15);
        StorageDead(_15);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}
