digraph Mir_0_794 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn update_revenue_pool_balances(_1: u128, _2: &amp;ReErased state::spot_market::SpotBalanceType, _3: &amp;ReErased mut state::spot_market::SpotMarket) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let mut _4: state::perp_market::PoolBalance;<br align="left"/>let _5: ();<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _7: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _10: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _11: &amp;ReErased mut dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased;<br align="left"/>let mut _12: &amp;ReErased mut state::perp_market::PoolBalance;<br align="left"/>let mut _13: &amp;ReErased mut state::perp_market::PoolBalance;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _18: ();<br align="left"/>let mut _19: state::perp_market::PoolBalance;<br align="left"/>let mut _20: ();<br align="left"/>debug token_amount =&gt; _1;<br align="left"/>debug update_direction =&gt; _2;<br align="left"/>debug spot_market =&gt; _3;<br align="left"/>debug spot_balance =&gt; _4;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>>;
    bb0__0_794 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>_4 = ((*_3).7: state::perp_market::PoolBalance)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _1<br/>StorageLive(_9)<br/>_9 = &amp;(*_2)<br/>StorageLive(_10)<br/>_10 = &amp;mut (*_3)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;mut _4<br/>_12 = &amp;mut (*_13)<br/>_11 = move _12 as &amp;mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize))<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_7 = update_spot_balances(move _8, move _9, move _10, move _11, const false)</td></tr></table>>];
    bb1__0_794 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb2__0_794 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_14 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb3__0_794 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_6 as Continue).0: ())<br/>_5 = _18<br/>StorageDead(_18)<br/>StorageDead(_13)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_19)<br/>_19 = _4<br/>((*_3).7: state::perp_market::PoolBalance) = move _19<br/>StorageDead(_19)<br/>StorageLive(_20)<br/>_20 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _20)<br/>StorageDead(_20)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_794 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_794 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_17)<br/>_17 = _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb6__0_794 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_794 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_794 -> bb1__0_794 [label="return"];
    bb1__0_794 -> bb2__0_794 [label="return"];
    bb2__0_794 -> bb3__0_794 [label="0"];
    bb2__0_794 -> bb5__0_794 [label="1"];
    bb2__0_794 -> bb4__0_794 [label="otherwise"];
    bb3__0_794 -> bb7__0_794 [label=""];
    bb5__0_794 -> bb6__0_794 [label="return"];
    bb6__0_794 -> bb7__0_794 [label=""];
}
