// MIR for `cancel_order_by_user_order_id` before PreCodegen

fn cancel_order_by_user_order_id(_1: u8, _2: &anchor_lang::prelude::AccountLoader<'_, User>, _3: &PerpMarketMap<'_>, _4: &SpotMarketMap<'_>, _5: &mut OracleMap<'_>, _6: &anchor_lang::prelude::Clock) -> std::result::Result<(), error::ErrorCode> {
    debug user_order_id => _1;
    debug user => _2;
    debug perp_market_map => _3;
    debug spot_market_map => _4;
    debug oracle_map => _5;
    debug clock => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _10: std::cell::RefMut<'_, state::user::User>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _12: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _13: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _14: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _15: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: std::option::Option<usize>;
    let mut _23: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _24: std::slice::Iter<'_, state::user::Order>;
    let mut _25: &[state::user::Order];
    let mut _26: &[state::user::Order; 32];
    let _27: &state::user::User;
    let mut _28: &std::cell::RefMut<'_, state::user::User>;
    let mut _29: {closure@programs/drift/src/controller/orders.rs:632:19: 632:26};
    let mut _30: &u8;
    let mut _31: isize;
    let mut _33: !;
    let _34: ();
    let mut _35: &str;
    let _36: &str;
    let mut _37: &std::string::String;
    let _38: &std::string::String;
    let _39: std::string::String;
    let mut _41: std::fmt::Arguments<'_>;
    let mut _42: &[&str];
    let mut _43: &[&str; 1];
    let _44: &[&str; 1];
    let _45: [&str; 1];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let mut _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: [core::fmt::rt::Argument<'_>; 1];
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &u8;
    let _52: &u8;
    let mut _53: ();
    let _54: ();
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _56: std::result::Result<(), error::ErrorCode>;
    let mut _57: usize;
    let mut _58: &mut state::user::User;
    let mut _59: &mut state::user::User;
    let mut _60: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _61: &anchor_lang::prelude::Pubkey;
    let _62: &anchor_lang::prelude::Pubkey;
    let mut _63: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _64: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _65: &mut state::oracle_map::OracleMap<'_>;
    let mut _66: i64;
    let mut _67: u64;
    let mut _68: state::events::OrderActionExplanation;
    let mut _69: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _75: ();
    let mut _76: &mut state::user::User;
    let mut _77: &mut state::user::User;
    let mut _78: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _79: u64;
    let mut _80: ();
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    scope 1 {
        debug user_key => _7;
        let _9: &mut std::cell::RefMut<'_, state::user::User>;
        let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _20: std::cell::RefMut<'_, state::user::User>;
        scope 2 {
            debug user => _9;
            let _21: usize;
            let _32: usize;
            let _40: std::string::String;
            let mut _81: &[&str; 1];
            scope 7 {
                debug order_index => _21;
                let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _74: ();
                scope 10 {
                    debug residual => _71;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _74;
                    scope 13 {
                    }
                }
            }
            scope 8 {
                debug order_index => _32;
            }
            scope 9 {
                debug res => _40;
            }
        }
        scope 3 {
            debug residual => _17;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _20;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_2);
        _7 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_2);
        _13 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _12 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _13, move _15) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        StorageDead(_15);
        StorageDead(_13);
        _11 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _12) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        StorageDead(_12);
        _16 = discriminant(_11);
        switchInt(move _16) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_20);
        _20 = move ((_11 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _10 = move _20;
        StorageDead(_20);
        _9 = &mut _10;
        _84 = discriminant(_11);
        StorageDead(_11);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_9);
        _27 = <RefMut<'_, User> as Deref>::deref(move _28) -> [return: bb9, unwind: bb33];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_17);
        _17 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _82 = discriminant(_11);
        StorageDead(_11);
        goto -> bb30;
    }

    bb9: {
        StorageDead(_28);
        _26 = &((*_27).5: [state::user::Order; 32]);
        _25 = move _26 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_26);
        _24 = core::slice::<impl [Order]>::iter(move _25) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _23 = &mut _24;
        StorageDead(_25);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_1;
        _29 = {closure@programs/drift/src/controller/orders.rs:632:19: 632:26} { user_order_id: move _30 };
        StorageDead(_30);
        _22 = <std::slice::Iter<'_, Order> as Iterator>::position::<{closure@programs/drift/src/controller/orders.rs:632:19: 632:26}>(move _23, move _29) -> [return: bb11, unwind: bb33];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _81 = const _;
        _44 = &(*_81);
        _43 = &(*_44);
        _42 = move _43 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_1;
        _51 = &(*_52);
        _50 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _51) -> [return: bb14, unwind: bb33];
    }

    bb13: {
        StorageLive(_32);
        _32 = ((_22 as Some).0: usize);
        _21 = _32;
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _21;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut (*_9);
        _59 = <RefMut<'_, User> as DerefMut>::deref_mut(move _60) -> [return: bb20, unwind: bb33];
    }

    bb14: {
        StorageDead(_51);
        _49 = [move _50];
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = move _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_47);
        _41 = Arguments::<'_>::new_v1(move _42, move _46) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        StorageDead(_46);
        StorageDead(_42);
        _40 = format(move _41) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        StorageDead(_41);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_44);
        _39 = move _40;
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = <String as Deref>::deref(move _37) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        _35 = &(*_36);
        StorageDead(_37);
        _34 = solana_program::log::sol_log(move _35) -> [return: bb18, unwind: bb32];
    }

    bb18: {
        StorageDead(_35);
        drop(_39) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_53);
        _53 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _53);
        StorageDead(_53);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        goto -> bb29;
    }

    bb20: {
        _58 = &mut (*_59);
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_7;
        _61 = &(*_62);
        StorageLive(_63);
        _63 = &(*_3);
        StorageLive(_64);
        _64 = &(*_4);
        StorageLive(_65);
        _65 = &mut (*_5);
        StorageLive(_66);
        _66 = ((*_6).4: i64);
        StorageLive(_67);
        _67 = ((*_6).0: u64);
        StorageLive(_68);
        _68 = OrderActionExplanation::None;
        StorageLive(_69);
        _69 = Option::<&anchor_lang::prelude::Pubkey>::None;
        _56 = controller::orders::cancel_order(move _57, move _58, move _61, move _63, move _64, move _65, move _66, move _67, move _68, move _69, const 0_u64, const false) -> [return: bb21, unwind: bb33];
    }

    bb21: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        _55 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _56) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        StorageDead(_56);
        _70 = discriminant(_55);
        switchInt(move _70) -> [0: bb23, 1: bb24, otherwise: bb6];
    }

    bb23: {
        StorageLive(_74);
        _74 = ((_55 as Continue).0: ());
        _54 = _74;
        StorageDead(_74);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &mut (*_9);
        _77 = <RefMut<'_, User> as DerefMut>::deref_mut(move _78) -> [return: bb26, unwind: bb33];
    }

    bb24: {
        StorageLive(_71);
        _71 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb29;
    }

    bb26: {
        _76 = &mut (*_77);
        StorageDead(_78);
        StorageLive(_79);
        _79 = ((*_6).0: u64);
        _75 = User::update_last_active_slot(move _76, move _79) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_80);
        _80 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _80);
        StorageDead(_80);
        StorageDead(_21);
        drop(_10) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb31;
    }

    bb29: {
        StorageDead(_21);
        drop(_10) -> [return: bb30, unwind: bb34];
    }

    bb30: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb31;
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_39) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_10) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        _86 = discriminant(_11);
        goto -> bb34;
    }
}
