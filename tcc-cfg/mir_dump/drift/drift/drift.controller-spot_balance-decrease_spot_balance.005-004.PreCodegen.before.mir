// MIR for `decrease_spot_balance` before PreCodegen

fn decrease_spot_balance(_1: u128, _2: &mut SpotMarket, _3: &SpotBalanceType) -> std::result::Result<(), error::ErrorCode> {
    debug delta => _1;
    debug spot_market => _2;
    debug balance_type => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: isize;
    let mut _6: u128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _8: std::result::Result<u128, error::ErrorCode>;
    let mut _9: u128;
    let mut _10: u128;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u128;
    let mut _16: u128;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _18: std::result::Result<u128, error::ErrorCode>;
    let mut _19: u128;
    let mut _20: u128;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: u128;
    let mut _26: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _22;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _25;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_4);
        _5 = discriminant((*_3));
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_2).12: u128);
        StorageLive(_20);
        _20 = _1;
        _18 = <u128 as SafeMath>::safe_sub(move _19, move _20) -> [return: bb9, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_2).11: u128);
        StorageLive(_10);
        _10 = _1;
        _8 = <u128 as SafeMath>::safe_sub(move _9, move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: u128);
        _6 = _15;
        StorageDead(_15);
        ((*_2).11: u128) = move _6;
        _4 = const ();
        StorageDead(_6);
        StorageDead(_7);
        goto -> bb14;
    }

    bb7: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_7);
        goto -> bb15;
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_18);
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb11, 1: bb12, otherwise: bb2];
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_17 as Continue).0: u128);
        _16 = _25;
        StorageDead(_25);
        ((*_2).12: u128) = move _16;
        _4 = const ();
        StorageDead(_16);
        StorageDead(_17);
        goto -> bb14;
    }

    bb12: {
        StorageLive(_22);
        _22 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_16);
        StorageDead(_17);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_4);
        StorageLive(_26);
        _26 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _26);
        StorageDead(_26);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_4);
        goto -> bb16;
    }

    bb16: {
        return;
    }
}
