// MIR for `admin::handle_update_protected_maker_mode_config` before PreCodegen

fn admin::handle_update_protected_maker_mode_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::UpdateProtectedMakerModeConfig<'_>>, _2: u32, _3: bool, _4: Option<u32>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_users => _2;
    debug reduce_only => _3;
    debug current_users => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>, error::ErrorCode>;
    let mut _8: std::result::Result<std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _10: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let _16: ();
    let mut _17: bool;
    let mut _18: &std::option::Option<u32>;
    let mut _19: u32;
    let mut _20: std::option::Option<u32>;
    let mut _21: &mut state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _22: &mut std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _23: u32;
    let mut _24: &mut state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _25: &mut std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _26: bool;
    let mut _27: &mut state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _28: &mut std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let _29: ();
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _31: std::result::Result<(), error::ErrorCode>;
    let mut _32: &state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let _33: &state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _34: &std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: ();
    let mut _41: &mut instructions::admin::UpdateProtectedMakerModeConfig<'_>;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    scope 1 {
        debug config => _5;
        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _39: ();
        scope 6 {
            debug residual => _36;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _39;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _41 = deref_copy (_1.1: &mut instructions::admin::UpdateProtectedMakerModeConfig<'_>);
        _9 = &((*_41).1: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>);
        _8 = anchor_lang::prelude::AccountLoader::<'_, ProtectedMakerModeConfig>::load_mut(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _7 = std::result::Result::<RefMut<'_, ProtectedMakerModeConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _8, move _10) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        _6 = <std::result::Result<RefMut<'_, ProtectedMakerModeConfig>, error::ErrorCode> as Try>::branch(move _7) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = move ((_6 as Continue).0: std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>);
        _5 = move _15;
        StorageDead(_15);
        _44 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_4;
        _17 = Option::<u32>::is_some(move _18) -> [return: bb8, unwind: bb25];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _42 = discriminant(_6);
        StorageDead(_6);
        goto -> bb23;
    }

    bb8: {
        switchInt(move _17) -> [0: bb12, otherwise: bb9];
    }

    bb9: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _4;
        _19 = Option::<u32>::unwrap(move _20) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &mut _5;
        _21 = <RefMut<'_, ProtectedMakerModeConfig> as DerefMut>::deref_mut(move _22) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        StorageDead(_22);
        ((*_21).1: u32) = move _19;
        StorageDead(_19);
        StorageDead(_21);
        _16 = const ();
        goto -> bb13;
    }

    bb12: {
        StorageDead(_18);
        _16 = const ();
        goto -> bb13;
    }

    bb13: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_23);
        _23 = _2;
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut _5;
        _24 = <RefMut<'_, ProtectedMakerModeConfig> as DerefMut>::deref_mut(move _25) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        StorageDead(_25);
        ((*_24).0: u32) = move _23;
        StorageDead(_23);
        StorageDead(_24);
        StorageLive(_26);
        _26 = _3;
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut _5;
        _27 = <RefMut<'_, ProtectedMakerModeConfig> as DerefMut>::deref_mut(move _28) -> [return: bb15, unwind: bb25];
    }

    bb15: {
        StorageDead(_28);
        ((*_27).2: u8) = move _26 as u8 (IntToInt);
        StorageDead(_26);
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_5;
        _33 = <RefMut<'_, ProtectedMakerModeConfig> as Deref>::deref(move _34) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = ProtectedMakerModeConfig::validate(move _32) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        StorageDead(_32);
        _30 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _31) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        StorageDead(_31);
        _35 = discriminant(_30);
        switchInt(move _35) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        StorageLive(_39);
        _39 = ((_30 as Continue).0: ());
        _29 = _39;
        StorageDead(_39);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_40);
        _40 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _40);
        StorageDead(_40);
        drop(_5) -> [return: bb22, unwind: bb26];
    }

    bb20: {
        StorageLive(_36);
        _36 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        drop(_5) -> [return: bb23, unwind: bb26];
    }

    bb22: {
        StorageDead(_5);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_5);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_5) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        _46 = discriminant(_6);
        goto -> bb26;
    }
}
