// MIR for `state::state::<impl at programs/drift/src/state/state.rs:48:10: 48:18>::bitxor` after PreCodegen

fn state::state::<impl at programs/drift/src/state/state.rs:48:10: 48:18>::bitxor(_1: state::state::ExchangeStatus, _2: state::state::ExchangeStatus) -> BitFlags<state::state::ExchangeStatus> {
    debug self => _1;
    debug other => _2;
    let mut _0: enumflags2::BitFlags<state::state::ExchangeStatus>;
    let mut _3: enumflags2::BitFlags<state::state::ExchangeStatus>;
    let mut _4: state::state::ExchangeStatus;
    let mut _5: enumflags2::BitFlags<state::state::ExchangeStatus>;
    let mut _6: state::state::ExchangeStatus;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        _3 = <state::state::ExchangeStatus as Into<BitFlags<state::state::ExchangeStatus>>>::into(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = <state::state::ExchangeStatus as Into<BitFlags<state::state::ExchangeStatus>>>::into(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _0 = <BitFlags<state::state::ExchangeStatus> as BitXor>::bitxor(move _3, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_3);
        return;
    }
}
