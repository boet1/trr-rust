digraph Mir_0_2713 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn adjust_amm(_1: &amp;ReErased state::perp_market::PerpMarket, _2: u128, _3: u128, _4: bool) -&gt; std::result::Result&lt;(std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;, i128), error::ErrorCode&gt;<br align="left"/>let _5: i128;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _7: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _8: u8;<br align="left"/>let mut _9: u8;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _14: i128;<br align="left"/>let _15: ();<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: u128;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: i128;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: (std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;, i128);<br align="left"/>let mut _23: std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;;<br align="left"/>let mut _24: state::perp_market::PerpMarket;<br align="left"/>let _25: i128;<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _27: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _28: i128;<br align="left"/>let mut _29: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _30: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _31: u128;<br align="left"/>let mut _32: isize;<br align="left"/>let _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _34: !;<br align="left"/>let mut _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _36: i128;<br align="left"/>let mut _37: i128;<br align="left"/>let mut _38: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _39: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _40: u128;<br align="left"/>let mut _41: isize;<br align="left"/>let _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _43: !;<br align="left"/>let mut _44: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _45: i128;<br align="left"/>let mut _46: isize;<br align="left"/>let _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _48: !;<br align="left"/>let mut _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _50: i128;<br align="left"/>let mut _51: i128;<br align="left"/>let mut _52: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _53: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _54: u128;<br align="left"/>let mut _55: u128;<br align="left"/>let mut _56: isize;<br align="left"/>let _57: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _58: !;<br align="left"/>let mut _59: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _60: i128;<br align="left"/>let _61: i128;<br align="left"/>let mut _62: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _63: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _64: u128;<br align="left"/>let mut _65: isize;<br align="left"/>let _66: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _67: !;<br align="left"/>let mut _68: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _69: i128;<br align="left"/>let mut _70: std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;;<br align="left"/>let mut _71: state::perp_market::PerpMarket;<br align="left"/>let mut _72: i128;<br align="left"/>let mut _73: u128;<br align="left"/>let _74: i128;<br align="left"/>let _75: u128;<br align="left"/>let _76: ();<br align="left"/>let mut _77: bool;<br align="left"/>let mut _78: i128;<br align="left"/>let mut _79: i128;<br align="left"/>let mut _80: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _81: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _82: i128;<br align="left"/>let mut _83: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _84: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _85: i128;<br align="left"/>let mut _86: isize;<br align="left"/>let _87: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _88: !;<br align="left"/>let mut _89: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _90: i128;<br align="left"/>let mut _91: i128;<br align="left"/>let mut _92: isize;<br align="left"/>let _93: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _94: !;<br align="left"/>let mut _95: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _96: i128;<br align="left"/>let mut _97: u128;<br align="left"/>let mut _98: i128;<br align="left"/>let _99: bool;<br align="left"/>let mut _100: bool;<br align="left"/>let mut _101: i128;<br align="left"/>let mut _102: bool;<br align="left"/>let mut _103: i128;<br align="left"/>let mut _104: bool;<br align="left"/>let mut _105: i128;<br align="left"/>let mut _106: bool;<br align="left"/>let mut _107: i128;<br align="left"/>let mut _108: bool;<br align="left"/>let mut _109: i128;<br align="left"/>let mut _110: u128;<br align="left"/>let mut _111: u128;<br align="left"/>let mut _112: i128;<br align="left"/>let _113: ();<br align="left"/>let mut _114: bool;<br align="left"/>let mut _115: u128;<br align="left"/>let mut _116: i128;<br align="left"/>let mut _117: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _118: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _119: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _120: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _121: u128;<br align="left"/>let mut _122: isize;<br align="left"/>let _123: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _124: !;<br align="left"/>let mut _125: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _126: i128;<br align="left"/>let _127: bool;<br align="left"/>let mut _128: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _129: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _130: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _131: isize;<br align="left"/>let _132: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _133: !;<br align="left"/>let mut _134: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _135: bool;<br align="left"/>let _136: i128;<br align="left"/>let mut _137: bool;<br align="left"/>let mut _138: bool;<br align="left"/>let _139: u128;<br align="left"/>let mut _140: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _141: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _142: state::perp_market::AMM;<br align="left"/>let mut _143: isize;<br align="left"/>let _144: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _145: !;<br align="left"/>let mut _146: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _147: u128;<br align="left"/>let _148: u128;<br align="left"/>let mut _149: u128;<br align="left"/>let mut _150: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _151: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _152: u128;<br align="left"/>let mut _153: u128;<br align="left"/>let mut _154: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _155: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _156: u128;<br align="left"/>let mut _157: isize;<br align="left"/>let _158: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _159: !;<br align="left"/>let mut _160: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _161: u128;<br align="left"/>let mut _162: isize;<br align="left"/>let _163: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _164: !;<br align="left"/>let mut _165: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _166: u128;<br align="left"/>let mut _167: u128;<br align="left"/>let _168: math::cp_curve::UpdateKResult;<br align="left"/>let mut _169: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::cp_curve::UpdateKResult&gt;;<br align="left"/>let mut _170: std::result::Result&lt;math::cp_curve::UpdateKResult, error::ErrorCode&gt;;<br align="left"/>let mut _171: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _172: math::bn::U192;<br align="left"/>let mut _173: u128;<br align="left"/>let mut _174: isize;<br align="left"/>let _175: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _176: !;<br align="left"/>let mut _177: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _178: math::cp_curve::UpdateKResult;<br align="left"/>let _179: i128;<br align="left"/>let mut _180: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _181: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _182: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _183: &amp;ReErased mut std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;;<br align="left"/>let mut _184: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let _185: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let mut _186: isize;<br align="left"/>let _187: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _188: !;<br align="left"/>let mut _189: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _190: i128;<br align="left"/>let mut _191: i128;<br align="left"/>let mut _192: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _193: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _194: u128;<br align="left"/>let mut _195: u128;<br align="left"/>let mut _196: isize;<br align="left"/>let _197: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _198: !;<br align="left"/>let mut _199: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _200: i128;<br align="left"/>let mut _201: i128;<br align="left"/>let mut _202: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _203: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _204: i128;<br align="left"/>let mut _205: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _206: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _207: i128;<br align="left"/>let mut _208: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _209: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _210: i128;<br align="left"/>let mut _211: i128;<br align="left"/>let mut _212: i128;<br align="left"/>let mut _213: isize;<br align="left"/>let _214: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _215: !;<br align="left"/>let mut _216: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _217: i128;<br align="left"/>let mut _218: isize;<br align="left"/>let _219: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _220: !;<br align="left"/>let mut _221: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _222: i128;<br align="left"/>let mut _223: i128;<br align="left"/>let mut _224: isize;<br align="left"/>let _225: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _226: !;<br align="left"/>let mut _227: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _228: i128;<br align="left"/>let mut _229: u128;<br align="left"/>let mut _230: i128;<br align="left"/>let mut _231: u128;<br align="left"/>let mut _232: bool;<br align="left"/>let mut _233: i128;<br align="left"/>let mut _234: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _235: u128;<br align="left"/>let mut _236: u128;<br align="left"/>let mut _237: bool;<br align="left"/>let mut _238: u128;<br align="left"/>let mut _239: u128;<br align="left"/>let mut _240: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _241: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _242: u128;<br align="left"/>let mut _243: u128;<br align="left"/>let mut _244: isize;<br align="left"/>let _245: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _246: !;<br align="left"/>let mut _247: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _248: u128;<br align="left"/>let mut _249: i128;<br align="left"/>let mut _250: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _251: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _252: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _253: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _254: u128;<br align="left"/>let mut _255: isize;<br align="left"/>let _256: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _257: !;<br align="left"/>let mut _258: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _259: i128;<br align="left"/>let mut _260: u128;<br align="left"/>let mut _261: (std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;, i128);<br align="left"/>let mut _262: std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;;<br align="left"/>let mut _263: i128;<br align="left"/>let mut _264: std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;;<br align="left"/>let mut _265: *const state::perp_market::PerpMarket;<br align="left"/>let mut _266: *const state::perp_market::PerpMarket;<br align="left"/>let mut _267: *const state::perp_market::PerpMarket;<br align="left"/>let mut _268: *const state::perp_market::PerpMarket;<br align="left"/>let mut _269: *const state::perp_market::PerpMarket;<br align="left"/>let mut _270: *const state::perp_market::PerpMarket;<br align="left"/>let mut _271: *const ();<br align="left"/>let mut _272: usize;<br align="left"/>let mut _273: usize;<br align="left"/>let mut _274: usize;<br align="left"/>let mut _275: usize;<br align="left"/>let mut _276: bool;<br align="left"/>let mut _277: *const ();<br align="left"/>let mut _278: usize;<br align="left"/>let mut _279: usize;<br align="left"/>let mut _280: usize;<br align="left"/>let mut _281: usize;<br align="left"/>let mut _282: bool;<br align="left"/>let mut _283: *const ();<br align="left"/>let mut _284: usize;<br align="left"/>let mut _285: usize;<br align="left"/>let mut _286: usize;<br align="left"/>let mut _287: usize;<br align="left"/>let mut _288: bool;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug optimal_peg =&gt; _2;<br align="left"/>debug budget =&gt; _3;<br align="left"/>debug adjust_k =&gt; _4;<br align="left"/>debug curve_update_intensity =&gt; _5;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>debug delta_peg =&gt; _25;<br align="left"/>debug residual =&gt; _33;<br align="left"/>debug val =&gt; _36;<br align="left"/>debug residual =&gt; _42;<br align="left"/>debug val =&gt; _45;<br align="left"/>debug residual =&gt; _47;<br align="left"/>debug val =&gt; _50;<br align="left"/>debug per_peg_cost =&gt; _51;<br align="left"/>debug residual =&gt; _57;<br align="left"/>debug val =&gt; _60;<br align="left"/>debug budget_i128 =&gt; _61;<br align="left"/>debug residual =&gt; _66;<br align="left"/>debug val =&gt; _69;<br align="left"/>debug market_clone =&gt; _70;<br align="left"/>debug budget_delta_peg =&gt; _72;<br align="left"/>debug budget_delta_peg_magnitude =&gt; _73;<br align="left"/>debug cost =&gt; _74;<br align="left"/>debug new_peg =&gt; _75;<br align="left"/>debug residual =&gt; _87;<br align="left"/>debug val =&gt; _90;<br align="left"/>debug residual =&gt; _93;<br align="left"/>debug val =&gt; _96;<br align="left"/>debug use_optimal_peg =&gt; _99;<br align="left"/>debug residual =&gt; _123;<br align="left"/>debug val =&gt; _126;<br align="left"/>debug can_lower_k =&gt; _127;<br align="left"/>debug residual =&gt; _132;<br align="left"/>debug val =&gt; _135;<br align="left"/>debug adjustment_cost =&gt; _136;<br align="left"/>debug new_sqrt_k_lower_bound =&gt; _139;<br align="left"/>debug residual =&gt; _144;<br align="left"/>debug val =&gt; _147;<br align="left"/>debug new_sqrt_k =&gt; _148;<br align="left"/>debug residual =&gt; _158;<br align="left"/>debug val =&gt; _161;<br align="left"/>debug residual =&gt; _163;<br align="left"/>debug val =&gt; _166;<br align="left"/>debug update_k_result =&gt; _168;<br align="left"/>debug residual =&gt; _175;<br align="left"/>debug val =&gt; _178;<br align="left"/>debug adjustment_cost =&gt; _179;<br align="left"/>debug residual =&gt; _187;<br align="left"/>debug val =&gt; _190;<br align="left"/>debug residual =&gt; _197;<br align="left"/>debug val =&gt; _200;<br align="left"/>debug residual =&gt; _214;<br align="left"/>debug val =&gt; _217;<br align="left"/>debug residual =&gt; _219;<br align="left"/>debug val =&gt; _222;<br align="left"/>debug residual =&gt; _225;<br align="left"/>debug val =&gt; _228;<br align="left"/>debug residual =&gt; _245;<br align="left"/>debug val =&gt; _248;<br align="left"/>debug residual =&gt; _256;<br align="left"/>debug val =&gt; _259;<br align="left"/>>;
    bb0__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = (((*_1).1: state::perp_market::AMM).70: u8)<br/></td></tr><tr><td align="left">_8 = std::cmp::min::&lt;u8&gt;(move _9, const 100_u8)</td></tr></table>>];
    bb1__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;u8 as Cast&gt;::cast::&lt;i128&gt;(move _8)</td></tr></table>>];
    bb2__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb3__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_10 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb4__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_6 as Continue).0: i128)<br/>_5 = _14<br/>StorageDead(_14)<br/>StorageDead(_6)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _2<br/>StorageLive(_18)<br/>_18 = (((*_1).1: state::perp_market::AMM).11: u128)<br/>_16 = Eq(move _17, move _18)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb5__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_13)<br/>_13 = _11<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb7__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _5<br/>_19 = Eq(move _20, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb10__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = (*_1)<br/></td></tr><tr><td align="left">_23 = Box::&lt;PerpMarket&gt;::new(move _24)</td></tr></table>>];
    bb11__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_15 = const ()<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = _2<br/></td></tr><tr><td align="left">_30 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _31)</td></tr></table>>];
    bb12__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_22 = (move _23, const 0_i128)<br/>StorageDead(_23)<br/>_0 = std::result::Result::&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt;::Ok(move _22)<br/>StorageDead(_22)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/></td></tr><tr><td align="left">_29 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _30)</td></tr></table>>];
    bb14__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_32 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _32)</td></tr></table>>];
    bb15__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_29 as Continue).0: i128)<br/>_28 = _36<br/>StorageDead(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = (((*_1).1: state::perp_market::AMM).11: u128)<br/></td></tr><tr><td align="left">_39 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _40)</td></tr></table>>];
    bb16__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = ((_29 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_35)<br/>_35 = _33<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _35)</td></tr></table>>];
    bb17__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_33)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/></td></tr><tr><td align="left">_38 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _39)</td></tr></table>>];
    bb19__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>_41 = discriminant(_38)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb20__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_38 as Continue).0: i128)<br/>_37 = _45<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">_27 = &lt;i128 as SafeMath&gt;::safe_sub(move _28, move _37)</td></tr></table>>];
    bb21__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_38 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_44)<br/>_44 = _42<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _44)</td></tr></table>>];
    bb22__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_42)<br/>StorageDead(_37)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb24__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_46 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _46)</td></tr></table>>];
    bb25__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_26 as Continue).0: i128)<br/>_25 = _50<br/>StorageDead(_50)<br/>StorageDead(_38)<br/>StorageDead(_29)<br/>StorageDead(_26)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = (((*_1).1: state::perp_market::AMM).6: u128)<br/>StorageLive(_55)<br/>_55 = (((*_1).1: state::perp_market::AMM).12: u128)<br/></td></tr><tr><td align="left">_53 = calculate_per_peg_cost(move _54, move _55)</td></tr></table>>];
    bb26__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_49)<br/>_49 = _47<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _49)</td></tr></table>>];
    bb27__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _53)</td></tr></table>>];
    bb29__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>_56 = discriminant(_52)<br/></td></tr><tr><td align="left">switchInt(move _56)</td></tr></table>>];
    bb30__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_60)<br/>_60 = ((_52 as Continue).0: i128)<br/>_51 = _60<br/>StorageDead(_60)<br/>StorageDead(_52)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = _3<br/></td></tr><tr><td align="left">_63 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _64)</td></tr></table>>];
    bb31__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_57)<br/>_57 = ((_52 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_59)<br/>_59 = _57<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _59)</td></tr></table>>];
    bb32__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_57)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/></td></tr><tr><td align="left">_62 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _63)</td></tr></table>>];
    bb34__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>_65 = discriminant(_62)<br/></td></tr><tr><td align="left">switchInt(move _65)</td></tr></table>>];
    bb35__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageLive(_69)<br/>_69 = ((_62 as Continue).0: i128)<br/>_61 = _69<br/>StorageDead(_69)<br/>StorageDead(_62)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = (*_1)<br/></td></tr><tr><td align="left">_70 = Box::&lt;PerpMarket&gt;::new(move _71)</td></tr></table>>];
    bb36__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_62 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_68)<br/>_68 = _66<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _68)</td></tr></table>>];
    bb37__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageDead(_66)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = const 0_u128<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>_78 = _51<br/>_77 = Ne(move _78, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _77)</td></tr></table>>];
    bb39__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>_85 = _61<br/></td></tr><tr><td align="left">_84 = &lt;i128 as SafeMath&gt;::safe_mul(move _85, const _)</td></tr></table>>];
    bb40__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/></td></tr><tr><td align="left">_83 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _84)</td></tr></table>>];
    bb41__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>_86 = discriminant(_83)<br/></td></tr><tr><td align="left">switchInt(move _86)</td></tr></table>>];
    bb42__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_90)<br/>_90 = ((_83 as Continue).0: i128)<br/>_82 = _90<br/>StorageDead(_90)<br/>StorageLive(_91)<br/>_91 = _51<br/></td></tr><tr><td align="left">_81 = &lt;i128 as SafeMath&gt;::safe_div(move _82, move _91)</td></tr></table>>];
    bb43__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_87)<br/>_87 = ((_83 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_89)<br/>_89 = _87<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _89)</td></tr></table>>];
    bb44__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageDead(_87)<br/>StorageDead(_82)<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_82)<br/></td></tr><tr><td align="left">_80 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _81)</td></tr></table>>];
    bb46__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>_92 = discriminant(_80)<br/></td></tr><tr><td align="left">switchInt(move _92)</td></tr></table>>];
    bb47__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageLive(_96)<br/>_96 = ((_80 as Continue).0: i128)<br/>_79 = _96<br/>StorageDead(_96)<br/>_72 = move _79<br/>StorageDead(_79)<br/>StorageDead(_83)<br/>StorageDead(_80)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>_98 = _72<br/></td></tr><tr><td align="left">_97 = core::num::&lt;impl i128&gt;::unsigned_abs(move _98)</td></tr></table>>];
    bb48__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageLive(_93)<br/>_93 = ((_80 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_95)<br/>_95 = _93<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _95)</td></tr></table>>];
    bb49__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>StorageDead(_93)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>_73 = move _97<br/>StorageDead(_97)<br/>_76 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>_76 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_76)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>_101 = _51<br/>_100 = Eq(move _101, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _100)</td></tr></table>>];
    bb53__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_101)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_103 = _51<br/>_102 = Gt(move _103, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _102)</td></tr></table>>];
    bb55__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>_105 = _25<br/>_104 = Lt(move _105, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _104)</td></tr></table>>];
    bb56__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageLive(_106)<br/>StorageLive(_107)<br/>_107 = _51<br/>_106 = Lt(move _107, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _106)</td></tr></table>>];
    bb60__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>_109 = _25<br/>_108 = Gt(move _109, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _108)</td></tr></table>>];
    bb61__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/>_99 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageLive(_110)<br/>_110 = _73<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>_112 = _25<br/></td></tr><tr><td align="left">_111 = core::num::&lt;impl i128&gt;::unsigned_abs(move _112)</td></tr></table>>];
    bb65__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>_99 = Gt(move _110, move _111)<br/>StorageDead(_111)<br/>StorageDead(_110)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_106)<br/>StorageDead(_104)<br/>StorageDead(_102)<br/>StorageDead(_100)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>_114 = _99<br/></td></tr><tr><td align="left">switchInt(move _114)</td></tr></table>>];
    bb67__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageLive(_115)<br/>_115 = _2<br/>_75 = move _115<br/>StorageDead(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>_265 = (((_70.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_120 = &amp;((*_265).1: state::perp_market::AMM)<br/>_119 = &amp;(*_120)<br/>StorageLive(_121)<br/>_121 = _75<br/></td></tr><tr><td align="left">_118 = calculate_repeg_cost(move _119, move _121)</td></tr></table>>];
    bb68__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">_117 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _118)</td></tr></table>>];
    bb69__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>_122 = discriminant(_117)<br/></td></tr><tr><td align="left">switchInt(move _122)</td></tr></table>>];
    bb70__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageLive(_126)<br/>_126 = ((_117 as Continue).0: i128)<br/>_116 = _126<br/>StorageDead(_126)<br/>_74 = move _116<br/>StorageDead(_116)<br/>StorageDead(_120)<br/>StorageDead(_117)<br/>_113 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb71__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageLive(_123)<br/>_123 = ((_117 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_125)<br/>_125 = _123<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _125)</td></tr></table>>];
    bb72__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/>StorageDead(_123)<br/>StorageDead(_116)<br/>StorageDead(_120)<br/>StorageDead(_117)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb73__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>_130 = &amp;((*_1).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_129 = AMM::can_lower_k(move _130)</td></tr></table>>];
    bb74__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_130)<br/></td></tr><tr><td align="left">_128 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _129)</td></tr></table>>];
    bb75__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>_131 = discriminant(_128)<br/></td></tr><tr><td align="left">switchInt(move _131)</td></tr></table>>];
    bb76__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageLive(_135)<br/>_135 = ((_128 as Continue).0: bool)<br/>_127 = _135<br/>StorageDead(_135)<br/>StorageDead(_128)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>_137 = _4<br/></td></tr><tr><td align="left">switchInt(move _137)</td></tr></table>>];
    bb77__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageLive(_132)<br/>_132 = ((_128 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_134)<br/>_134 = _132<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _134)</td></tr></table>>];
    bb78__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_132)<br/>StorageDead(_128)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb79__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageLive(_138)<br/>_138 = _127<br/></td></tr><tr><td align="left">switchInt(move _138)</td></tr></table>>];
    bb80__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_139)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>StorageLive(_142)<br/>_142 = ((*_1).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_141 = AMM::get_lower_bound_sqrt_k(move _142)</td></tr></table>>];
    bb81__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_142)<br/></td></tr><tr><td align="left">_140 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _141)</td></tr></table>>];
    bb82__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_141)<br/>_143 = discriminant(_140)<br/></td></tr><tr><td align="left">switchInt(move _143)</td></tr></table>>];
    bb83__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageLive(_147)<br/>_147 = ((_140 as Continue).0: u128)<br/>_139 = _147<br/>StorageDead(_147)<br/>StorageDead(_140)<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>_152 = (((*_1).1: state::perp_market::AMM).10: u128)<br/>StorageLive(_153)<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>StorageLive(_156)<br/>_156 = (((*_1).1: state::perp_market::AMM).10: u128)<br/></td></tr><tr><td align="left">_155 = &lt;u128 as SafeMath&gt;::safe_div(move _156, const 1000_u128)</td></tr></table>>];
    bb84__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageLive(_144)<br/>_144 = ((_140 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_146)<br/>_146 = _144<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _146)</td></tr></table>>];
    bb85__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_146)<br/>StorageDead(_144)<br/>StorageDead(_140)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb86__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_156)<br/></td></tr><tr><td align="left">_154 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _155)</td></tr></table>>];
    bb87__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_155)<br/>_157 = discriminant(_154)<br/></td></tr><tr><td align="left">switchInt(move _157)</td></tr></table>>];
    bb88__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageLive(_161)<br/>_161 = ((_154 as Continue).0: u128)<br/>_153 = _161<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">_151 = &lt;u128 as SafeMath&gt;::safe_sub(move _152, move _153)</td></tr></table>>];
    bb89__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageLive(_158)<br/>_158 = ((_154 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_160)<br/>_160 = _158<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _160)</td></tr></table>>];
    bb90__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_160)<br/>StorageDead(_158)<br/>StorageDead(_153)<br/>StorageDead(_152)<br/>StorageDead(_151)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb91__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_153)<br/>StorageDead(_152)<br/></td></tr><tr><td align="left">_150 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _151)</td></tr></table>>];
    bb92__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_151)<br/>_162 = discriminant(_150)<br/></td></tr><tr><td align="left">switchInt(move _162)</td></tr></table>>];
    bb93__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageLive(_166)<br/>_166 = ((_150 as Continue).0: u128)<br/>_149 = _166<br/>StorageDead(_166)<br/>StorageLive(_167)<br/>_167 = _139<br/></td></tr><tr><td align="left">_148 = &lt;u128 as Ord&gt;::max(move _149, move _167)</td></tr></table>>];
    bb94__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageLive(_163)<br/>_163 = ((_150 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_165)<br/>_165 = _163<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _165)</td></tr></table>>];
    bb95__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_165)<br/>StorageDead(_163)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb96__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_167)<br/>StorageDead(_149)<br/>StorageDead(_154)<br/>StorageDead(_150)<br/>StorageLive(_168)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>_171 = &amp;(*_1)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>_173 = _148<br/></td></tr><tr><td align="left">_172 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _173)</td></tr></table>>];
    bb97__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_173)<br/></td></tr><tr><td align="left">_170 = get_update_k_result(move _171, move _172, const true)</td></tr></table>>];
    bb98__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_172)<br/>StorageDead(_171)<br/></td></tr><tr><td align="left">_169 = &lt;std::result::Result&lt;UpdateKResult, error::ErrorCode&gt; as Try&gt;::branch(move _170)</td></tr></table>>];
    bb99__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_170)<br/>_174 = discriminant(_169)<br/></td></tr><tr><td align="left">switchInt(move _174)</td></tr></table>>];
    bb100__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageLive(_178)<br/>_178 = move ((_169 as Continue).0: math::cp_curve::UpdateKResult)<br/>_168 = move _178<br/>StorageDead(_178)<br/>StorageDead(_169)<br/>StorageLive(_179)<br/>StorageLive(_180)<br/>StorageLive(_181)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>_183 = &amp;mut _70<br/>_264 = deref_copy (*_183)<br/>_266 = (((_264.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_182 = &amp;mut (*_266)<br/>StorageLive(_184)<br/>StorageLive(_185)<br/>_185 = &amp;_168<br/>_184 = &amp;(*_185)<br/></td></tr><tr><td align="left">_181 = adjust_k_cost_and_update(move _182, move _184)</td></tr></table>>];
    bb101__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageLive(_175)<br/>_175 = ((_169 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_177)<br/>_177 = _175<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _177)</td></tr></table>>];
    bb102__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_177)<br/>StorageDead(_175)<br/>StorageDead(_169)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb103__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_184)<br/>StorageDead(_182)<br/></td></tr><tr><td align="left">_180 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _181)</td></tr></table>>];
    bb104__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_181)<br/>_186 = discriminant(_180)<br/></td></tr><tr><td align="left">switchInt(move _186)</td></tr></table>>];
    bb105__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageLive(_190)<br/>_190 = ((_180 as Continue).0: i128)<br/>_179 = _190<br/>StorageDead(_190)<br/>StorageDead(_185)<br/>StorageDead(_183)<br/>StorageDead(_180)<br/>StorageLive(_191)<br/>StorageLive(_192)<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>_267 = (((_70.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_283 = _267 as *const () (PtrToPtr)<br/>_284 = _283 as usize (Transmute)<br/>_285 = AlignOf(state::perp_market::PerpMarket)<br/>_286 = Sub(_285, const 1_usize)<br/>_287 = BitAnd(_284, _286)<br/>_288 = Eq(_287, const 0_usize)<br/></td></tr><tr><td align="left">assert(_288, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _285, _284)</td></tr></table>>];
    bb106__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageLive(_187)<br/>_187 = ((_180 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_189)<br/>_189 = _187<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _189)</td></tr></table>>];
    bb107__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_189)<br/>StorageDead(_187)<br/>StorageDead(_185)<br/>StorageDead(_183)<br/>StorageDead(_180)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb108__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_195)<br/>StorageDead(_194)<br/></td></tr><tr><td align="left">_192 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _193)</td></tr></table>>];
    bb109__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_193)<br/>_196 = discriminant(_192)<br/></td></tr><tr><td align="left">switchInt(move _196)</td></tr></table>>];
    bb110__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageLive(_200)<br/>_200 = ((_192 as Continue).0: i128)<br/>_191 = _200<br/>StorageDead(_200)<br/>_51 = move _191<br/>StorageDead(_191)<br/>StorageDead(_192)<br/>_136 = _179<br/>StorageDead(_179)<br/>StorageDead(_168)<br/>StorageDead(_148)<br/>StorageDead(_139)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb111__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageLive(_197)<br/>_197 = ((_192 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_199)<br/>_199 = _197<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _199)</td></tr></table>>];
    bb112__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_199)<br/>StorageDead(_197)<br/>StorageDead(_191)<br/>StorageDead(_192)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb113__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">_136 = const 0_i128<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb114__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>StorageDead(_137)<br/>StorageLive(_201)<br/>StorageLive(_202)<br/>StorageLive(_203)<br/>StorageLive(_204)<br/>StorageLive(_205)<br/>StorageLive(_206)<br/>StorageLive(_207)<br/>StorageLive(_208)<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>_210 = _61<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>_212 = _136<br/></td></tr><tr><td align="left">_211 = core::num::&lt;impl i128&gt;::abs(move _212)</td></tr></table>>];
    bb115__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_212)<br/></td></tr><tr><td align="left">_209 = &lt;i128 as SafeMath&gt;::safe_add(move _210, move _211)</td></tr></table>>];
    bb116__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_211)<br/>StorageDead(_210)<br/></td></tr><tr><td align="left">_208 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _209)</td></tr></table>>];
    bb117__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_209)<br/>_213 = discriminant(_208)<br/></td></tr><tr><td align="left">switchInt(move _213)</td></tr></table>>];
    bb118__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageLive(_217)<br/>_217 = ((_208 as Continue).0: i128)<br/>_207 = _217<br/>StorageDead(_217)<br/></td></tr><tr><td align="left">_206 = &lt;i128 as SafeMath&gt;::safe_mul(move _207, const _)</td></tr></table>>];
    bb119__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageLive(_214)<br/>_214 = ((_208 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_216)<br/>_216 = _214<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _216)</td></tr></table>>];
    bb120__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageDead(_216)<br/>StorageDead(_214)<br/>StorageDead(_207)<br/>StorageDead(_206)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb121__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_207)<br/></td></tr><tr><td align="left">_205 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _206)</td></tr></table>>];
    bb122__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_206)<br/>_218 = discriminant(_205)<br/></td></tr><tr><td align="left">switchInt(move _218)</td></tr></table>>];
    bb123__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageLive(_222)<br/>_222 = ((_205 as Continue).0: i128)<br/>_204 = _222<br/>StorageDead(_222)<br/>StorageLive(_223)<br/>_223 = _51<br/></td></tr><tr><td align="left">_203 = &lt;i128 as SafeMath&gt;::safe_div(move _204, move _223)</td></tr></table>>];
    bb124__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageLive(_219)<br/>_219 = ((_205 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_221)<br/>_221 = _219<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _221)</td></tr></table>>];
    bb125__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_221)<br/>StorageDead(_219)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb126__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_223)<br/>StorageDead(_204)<br/></td></tr><tr><td align="left">_202 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _203)</td></tr></table>>];
    bb127__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_203)<br/>_224 = discriminant(_202)<br/></td></tr><tr><td align="left">switchInt(move _224)</td></tr></table>>];
    bb128__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageLive(_228)<br/>_228 = ((_202 as Continue).0: i128)<br/>_201 = _228<br/>StorageDead(_228)<br/>_72 = move _201<br/>StorageDead(_201)<br/>StorageDead(_208)<br/>StorageDead(_205)<br/>StorageDead(_202)<br/>StorageLive(_229)<br/>StorageLive(_230)<br/>_230 = _72<br/></td></tr><tr><td align="left">_229 = core::num::&lt;impl i128&gt;::unsigned_abs(move _230)</td></tr></table>>];
    bb129__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageLive(_225)<br/>_225 = ((_202 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_227)<br/>_227 = _225<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _227)</td></tr></table>>];
    bb130__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageDead(_227)<br/>StorageDead(_225)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb131__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_230)<br/>_73 = move _229<br/>StorageDead(_229)<br/>StorageLive(_231)<br/>StorageLive(_232)<br/>StorageLive(_233)<br/>_233 = _72<br/>_232 = Gt(move _233, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _232)</td></tr></table>>];
    bb132__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_233)<br/>StorageLive(_234)<br/>StorageLive(_235)<br/>_235 = (((*_1).1: state::perp_market::AMM).11: u128)<br/>StorageLive(_236)<br/>_236 = _73<br/></td></tr><tr><td align="left">_234 = &lt;u128 as SafeMath&gt;::safe_add(move _235, move _236)</td></tr></table>>];
    bb133__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageDead(_236)<br/>StorageDead(_235)<br/></td></tr><tr><td align="left">_231 = std::result::Result::&lt;u128, error::ErrorCode&gt;::unwrap_or(move _234, const _)</td></tr></table>>];
    bb134__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageDead(_234)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb135__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageDead(_233)<br/>StorageLive(_237)<br/>StorageLive(_238)<br/>_238 = (((*_1).1: state::perp_market::AMM).11: u128)<br/>StorageLive(_239)<br/>_239 = _73<br/>_237 = Gt(move _238, move _239)<br/></td></tr><tr><td align="left">switchInt(move _237)</td></tr></table>>];
    bb136__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageDead(_239)<br/>StorageDead(_238)<br/>StorageLive(_240)<br/>StorageLive(_241)<br/>StorageLive(_242)<br/>_242 = (((*_1).1: state::perp_market::AMM).11: u128)<br/>StorageLive(_243)<br/>_243 = _73<br/></td></tr><tr><td align="left">_241 = &lt;u128 as SafeMath&gt;::safe_sub(move _242, move _243)</td></tr></table>>];
    bb137__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_243)<br/>StorageDead(_242)<br/></td></tr><tr><td align="left">_240 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _241)</td></tr></table>>];
    bb138__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_241)<br/>_244 = discriminant(_240)<br/></td></tr><tr><td align="left">switchInt(move _244)</td></tr></table>>];
    bb139__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageLive(_248)<br/>_248 = ((_240 as Continue).0: u128)<br/>_231 = _248<br/>StorageDead(_248)<br/>StorageDead(_240)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb140__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageLive(_245)<br/>_245 = ((_240 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_247)<br/>_247 = _245<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _247)</td></tr></table>>];
    bb141__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_247)<br/>StorageDead(_245)<br/>StorageDead(_240)<br/>StorageDead(_237)<br/>StorageDead(_232)<br/>StorageDead(_231)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb142__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageDead(_239)<br/>StorageDead(_238)<br/>_231 = const 1_u128<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb143__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageDead(_237)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb144__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_232)<br/>_75 = move _231<br/>StorageDead(_231)<br/>StorageLive(_249)<br/>StorageLive(_250)<br/>StorageLive(_251)<br/>StorageLive(_252)<br/>StorageLive(_253)<br/>_269 = (((_70.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_253 = &amp;((*_269).1: state::perp_market::AMM)<br/>_252 = &amp;(*_253)<br/>StorageLive(_254)<br/>_254 = _75<br/></td></tr><tr><td align="left">_251 = calculate_repeg_cost(move _252, move _254)</td></tr></table>>];
    bb145__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageDead(_254)<br/>StorageDead(_252)<br/></td></tr><tr><td align="left">_250 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _251)</td></tr></table>>];
    bb146__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageDead(_251)<br/>_255 = discriminant(_250)<br/></td></tr><tr><td align="left">switchInt(move _255)</td></tr></table>>];
    bb147__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageLive(_259)<br/>_259 = ((_250 as Continue).0: i128)<br/>_249 = _259<br/>StorageDead(_259)<br/>_74 = move _249<br/>StorageDead(_249)<br/>StorageDead(_253)<br/>StorageDead(_250)<br/>_113 = const ()<br/>StorageDead(_136)<br/>StorageDead(_127)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb148__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageLive(_256)<br/>_256 = ((_250 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_258)<br/>_258 = _256<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _258)</td></tr></table>>];
    bb149__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageDead(_258)<br/>StorageDead(_256)<br/>StorageDead(_249)<br/>StorageDead(_253)<br/>StorageDead(_250)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb150__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageDead(_114)<br/>StorageDead(_113)<br/>StorageLive(_260)<br/>_260 = _75<br/>_270 = (((_70.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_271 = _270 as *const () (PtrToPtr)<br/>_272 = _271 as usize (Transmute)<br/>_273 = AlignOf(state::perp_market::PerpMarket)<br/>_274 = Sub(_273, const 1_usize)<br/>_275 = BitAnd(_272, _274)<br/>_276 = Eq(_275, const 0_usize)<br/></td></tr><tr><td align="left">assert(_276, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _273, _272)</td></tr></table>>];
    bb151__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_204)<br/>StorageDead(_203)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb152__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageDead(_201)<br/>StorageDead(_208)<br/>StorageDead(_205)<br/>StorageDead(_202)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb153__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">StorageDead(_179)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb154__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageDead(_168)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb155__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_154)<br/>StorageDead(_150)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb156__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb157__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_139)<br/>StorageDead(_138)<br/>StorageDead(_137)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb158__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb159__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageDead(_127)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb160__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageDead(_114)<br/>StorageDead(_113)<br/>StorageDead(_99)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb161__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageDead(_83)<br/>StorageDead(_80)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb162__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_74)<br/>StorageDead(_73)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">drop(_70)</td></tr></table>>];
    bb163__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb164__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb165__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb166__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb167__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb168__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb169__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb170__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left">return</td></tr></table>>];
    bb171__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">171 (cleanup)</td></tr><tr><td align="left">drop(_70)</td></tr></table>>];
    bb172__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">172 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb173__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">(((*_270).1: state::perp_market::AMM).11: u128) = move _260<br/>StorageDead(_260)<br/>StorageLive(_261)<br/>StorageLive(_262)<br/>_262 = move _70<br/>StorageLive(_263)<br/>_263 = _74<br/>_261 = (move _262, move _263)<br/>StorageDead(_263)<br/>StorageDead(_262)<br/>_0 = std::result::Result::&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt;::Ok(move _261)<br/>StorageDead(_261)<br/>StorageDead(_99)<br/>StorageDead(_75)<br/>StorageDead(_74)<br/>StorageDead(_73)<br/>StorageDead(_72)<br/>StorageDead(_70)<br/>StorageDead(_61)<br/>StorageDead(_51)<br/>StorageDead(_25)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb174__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">_195 = (((*_268).1: state::perp_market::AMM).12: u128)<br/></td></tr><tr><td align="left">_193 = calculate_per_peg_cost(move _194, move _195)</td></tr></table>>];
    bb175__0_2713 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">_194 = (((*_267).1: state::perp_market::AMM).6: u128)<br/>StorageLive(_195)<br/>_268 = (((_70.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_277 = _268 as *const () (PtrToPtr)<br/>_278 = _277 as usize (Transmute)<br/>_279 = AlignOf(state::perp_market::PerpMarket)<br/>_280 = Sub(_279, const 1_usize)<br/>_281 = BitAnd(_278, _280)<br/>_282 = Eq(_281, const 0_usize)<br/></td></tr><tr><td align="left">assert(_282, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _279, _278)</td></tr></table>>];
    bb0__0_2713 -> bb1__0_2713 [label="return"];
    bb1__0_2713 -> bb2__0_2713 [label="return"];
    bb2__0_2713 -> bb3__0_2713 [label="return"];
    bb3__0_2713 -> bb4__0_2713 [label="0"];
    bb3__0_2713 -> bb6__0_2713 [label="1"];
    bb3__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb4__0_2713 -> bb9__0_2713 [label="0"];
    bb4__0_2713 -> bb8__0_2713 [label="otherwise"];
    bb6__0_2713 -> bb7__0_2713 [label="return"];
    bb7__0_2713 -> bb169__0_2713 [label=""];
    bb8__0_2713 -> bb10__0_2713 [label=""];
    bb9__0_2713 -> bb11__0_2713 [label="0"];
    bb9__0_2713 -> bb10__0_2713 [label="otherwise"];
    bb10__0_2713 -> bb12__0_2713 [label="return"];
    bb11__0_2713 -> bb13__0_2713 [label="return"];
    bb12__0_2713 -> bb169__0_2713 [label=""];
    bb13__0_2713 -> bb14__0_2713 [label="return"];
    bb14__0_2713 -> bb15__0_2713 [label="0"];
    bb14__0_2713 -> bb16__0_2713 [label="1"];
    bb14__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb15__0_2713 -> bb18__0_2713 [label="return"];
    bb16__0_2713 -> bb17__0_2713 [label="return"];
    bb17__0_2713 -> bb167__0_2713 [label=""];
    bb18__0_2713 -> bb19__0_2713 [label="return"];
    bb19__0_2713 -> bb20__0_2713 [label="0"];
    bb19__0_2713 -> bb21__0_2713 [label="1"];
    bb19__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb20__0_2713 -> bb23__0_2713 [label="return"];
    bb21__0_2713 -> bb22__0_2713 [label="return"];
    bb22__0_2713 -> bb166__0_2713 [label=""];
    bb23__0_2713 -> bb24__0_2713 [label="return"];
    bb24__0_2713 -> bb25__0_2713 [label="0"];
    bb24__0_2713 -> bb26__0_2713 [label="1"];
    bb24__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb25__0_2713 -> bb28__0_2713 [label="return"];
    bb26__0_2713 -> bb27__0_2713 [label="return"];
    bb27__0_2713 -> bb166__0_2713 [label=""];
    bb28__0_2713 -> bb29__0_2713 [label="return"];
    bb29__0_2713 -> bb30__0_2713 [label="0"];
    bb29__0_2713 -> bb31__0_2713 [label="1"];
    bb29__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb30__0_2713 -> bb33__0_2713 [label="return"];
    bb31__0_2713 -> bb32__0_2713 [label="return"];
    bb32__0_2713 -> bb165__0_2713 [label=""];
    bb33__0_2713 -> bb34__0_2713 [label="return"];
    bb34__0_2713 -> bb35__0_2713 [label="0"];
    bb34__0_2713 -> bb36__0_2713 [label="1"];
    bb34__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb35__0_2713 -> bb38__0_2713 [label="return"];
    bb36__0_2713 -> bb37__0_2713 [label="return"];
    bb37__0_2713 -> bb164__0_2713 [label=""];
    bb38__0_2713 -> bb51__0_2713 [label="0"];
    bb38__0_2713 -> bb39__0_2713 [label="otherwise"];
    bb39__0_2713 -> bb40__0_2713 [label="return"];
    bb39__0_2713 -> bb171__0_2713 [label="unwind"];
    bb40__0_2713 -> bb41__0_2713 [label="return"];
    bb40__0_2713 -> bb171__0_2713 [label="unwind"];
    bb41__0_2713 -> bb42__0_2713 [label="0"];
    bb41__0_2713 -> bb43__0_2713 [label="1"];
    bb41__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb42__0_2713 -> bb45__0_2713 [label="return"];
    bb42__0_2713 -> bb171__0_2713 [label="unwind"];
    bb43__0_2713 -> bb44__0_2713 [label="return"];
    bb43__0_2713 -> bb171__0_2713 [label="unwind"];
    bb44__0_2713 -> bb161__0_2713 [label=""];
    bb45__0_2713 -> bb46__0_2713 [label="return"];
    bb45__0_2713 -> bb171__0_2713 [label="unwind"];
    bb46__0_2713 -> bb47__0_2713 [label="0"];
    bb46__0_2713 -> bb48__0_2713 [label="1"];
    bb46__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb47__0_2713 -> bb50__0_2713 [label="return"];
    bb47__0_2713 -> bb171__0_2713 [label="unwind"];
    bb48__0_2713 -> bb49__0_2713 [label="return"];
    bb48__0_2713 -> bb171__0_2713 [label="unwind"];
    bb49__0_2713 -> bb161__0_2713 [label=""];
    bb50__0_2713 -> bb52__0_2713 [label=""];
    bb51__0_2713 -> bb52__0_2713 [label=""];
    bb52__0_2713 -> bb54__0_2713 [label="0"];
    bb52__0_2713 -> bb53__0_2713 [label="otherwise"];
    bb53__0_2713 -> bb56__0_2713 [label=""];
    bb54__0_2713 -> bb58__0_2713 [label="0"];
    bb54__0_2713 -> bb55__0_2713 [label="otherwise"];
    bb55__0_2713 -> bb57__0_2713 [label="0"];
    bb55__0_2713 -> bb56__0_2713 [label="otherwise"];
    bb56__0_2713 -> bb61__0_2713 [label=""];
    bb57__0_2713 -> bb59__0_2713 [label=""];
    bb58__0_2713 -> bb59__0_2713 [label=""];
    bb59__0_2713 -> bb63__0_2713 [label="0"];
    bb59__0_2713 -> bb60__0_2713 [label="otherwise"];
    bb60__0_2713 -> bb62__0_2713 [label="0"];
    bb60__0_2713 -> bb61__0_2713 [label="otherwise"];
    bb61__0_2713 -> bb66__0_2713 [label=""];
    bb62__0_2713 -> bb64__0_2713 [label=""];
    bb63__0_2713 -> bb64__0_2713 [label=""];
    bb64__0_2713 -> bb65__0_2713 [label="return"];
    bb64__0_2713 -> bb171__0_2713 [label="unwind"];
    bb65__0_2713 -> bb66__0_2713 [label=""];
    bb66__0_2713 -> bb73__0_2713 [label="0"];
    bb66__0_2713 -> bb67__0_2713 [label="otherwise"];
    bb67__0_2713 -> bb68__0_2713 [label="return"];
    bb67__0_2713 -> bb171__0_2713 [label="unwind"];
    bb68__0_2713 -> bb69__0_2713 [label="return"];
    bb68__0_2713 -> bb171__0_2713 [label="unwind"];
    bb69__0_2713 -> bb70__0_2713 [label="0"];
    bb69__0_2713 -> bb71__0_2713 [label="1"];
    bb69__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb70__0_2713 -> bb150__0_2713 [label=""];
    bb71__0_2713 -> bb72__0_2713 [label="return"];
    bb71__0_2713 -> bb171__0_2713 [label="unwind"];
    bb72__0_2713 -> bb160__0_2713 [label=""];
    bb73__0_2713 -> bb74__0_2713 [label="return"];
    bb73__0_2713 -> bb171__0_2713 [label="unwind"];
    bb74__0_2713 -> bb75__0_2713 [label="return"];
    bb74__0_2713 -> bb171__0_2713 [label="unwind"];
    bb75__0_2713 -> bb76__0_2713 [label="0"];
    bb75__0_2713 -> bb77__0_2713 [label="1"];
    bb75__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb76__0_2713 -> bb113__0_2713 [label="0"];
    bb76__0_2713 -> bb79__0_2713 [label="otherwise"];
    bb77__0_2713 -> bb78__0_2713 [label="return"];
    bb77__0_2713 -> bb171__0_2713 [label="unwind"];
    bb78__0_2713 -> bb159__0_2713 [label=""];
    bb79__0_2713 -> bb113__0_2713 [label="0"];
    bb79__0_2713 -> bb80__0_2713 [label="otherwise"];
    bb80__0_2713 -> bb81__0_2713 [label="return"];
    bb80__0_2713 -> bb171__0_2713 [label="unwind"];
    bb81__0_2713 -> bb82__0_2713 [label="return"];
    bb81__0_2713 -> bb171__0_2713 [label="unwind"];
    bb82__0_2713 -> bb83__0_2713 [label="0"];
    bb82__0_2713 -> bb84__0_2713 [label="1"];
    bb82__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb83__0_2713 -> bb86__0_2713 [label="return"];
    bb83__0_2713 -> bb171__0_2713 [label="unwind"];
    bb84__0_2713 -> bb85__0_2713 [label="return"];
    bb84__0_2713 -> bb171__0_2713 [label="unwind"];
    bb85__0_2713 -> bb157__0_2713 [label=""];
    bb86__0_2713 -> bb87__0_2713 [label="return"];
    bb86__0_2713 -> bb171__0_2713 [label="unwind"];
    bb87__0_2713 -> bb88__0_2713 [label="0"];
    bb87__0_2713 -> bb89__0_2713 [label="1"];
    bb87__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb88__0_2713 -> bb91__0_2713 [label="return"];
    bb88__0_2713 -> bb171__0_2713 [label="unwind"];
    bb89__0_2713 -> bb90__0_2713 [label="return"];
    bb89__0_2713 -> bb171__0_2713 [label="unwind"];
    bb90__0_2713 -> bb155__0_2713 [label=""];
    bb91__0_2713 -> bb92__0_2713 [label="return"];
    bb91__0_2713 -> bb171__0_2713 [label="unwind"];
    bb92__0_2713 -> bb93__0_2713 [label="0"];
    bb92__0_2713 -> bb94__0_2713 [label="1"];
    bb92__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb93__0_2713 -> bb96__0_2713 [label="return"];
    bb93__0_2713 -> bb171__0_2713 [label="unwind"];
    bb94__0_2713 -> bb95__0_2713 [label="return"];
    bb94__0_2713 -> bb171__0_2713 [label="unwind"];
    bb95__0_2713 -> bb155__0_2713 [label=""];
    bb96__0_2713 -> bb97__0_2713 [label="return"];
    bb96__0_2713 -> bb171__0_2713 [label="unwind"];
    bb97__0_2713 -> bb98__0_2713 [label="return"];
    bb97__0_2713 -> bb171__0_2713 [label="unwind"];
    bb98__0_2713 -> bb99__0_2713 [label="return"];
    bb98__0_2713 -> bb171__0_2713 [label="unwind"];
    bb99__0_2713 -> bb100__0_2713 [label="0"];
    bb99__0_2713 -> bb101__0_2713 [label="1"];
    bb99__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb100__0_2713 -> bb103__0_2713 [label="return"];
    bb100__0_2713 -> bb171__0_2713 [label="unwind"];
    bb101__0_2713 -> bb102__0_2713 [label="return"];
    bb101__0_2713 -> bb171__0_2713 [label="unwind"];
    bb102__0_2713 -> bb154__0_2713 [label=""];
    bb103__0_2713 -> bb104__0_2713 [label="return"];
    bb103__0_2713 -> bb171__0_2713 [label="unwind"];
    bb104__0_2713 -> bb105__0_2713 [label="0"];
    bb104__0_2713 -> bb106__0_2713 [label="1"];
    bb104__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb105__0_2713 -> bb175__0_2713 [label="success"];
    bb106__0_2713 -> bb107__0_2713 [label="return"];
    bb106__0_2713 -> bb171__0_2713 [label="unwind"];
    bb107__0_2713 -> bb153__0_2713 [label=""];
    bb108__0_2713 -> bb109__0_2713 [label="return"];
    bb108__0_2713 -> bb171__0_2713 [label="unwind"];
    bb109__0_2713 -> bb110__0_2713 [label="0"];
    bb109__0_2713 -> bb111__0_2713 [label="1"];
    bb109__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb110__0_2713 -> bb114__0_2713 [label=""];
    bb111__0_2713 -> bb112__0_2713 [label="return"];
    bb111__0_2713 -> bb171__0_2713 [label="unwind"];
    bb112__0_2713 -> bb153__0_2713 [label=""];
    bb113__0_2713 -> bb114__0_2713 [label=""];
    bb114__0_2713 -> bb115__0_2713 [label="return"];
    bb114__0_2713 -> bb171__0_2713 [label="unwind"];
    bb115__0_2713 -> bb116__0_2713 [label="return"];
    bb115__0_2713 -> bb171__0_2713 [label="unwind"];
    bb116__0_2713 -> bb117__0_2713 [label="return"];
    bb116__0_2713 -> bb171__0_2713 [label="unwind"];
    bb117__0_2713 -> bb118__0_2713 [label="0"];
    bb117__0_2713 -> bb119__0_2713 [label="1"];
    bb117__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb118__0_2713 -> bb121__0_2713 [label="return"];
    bb118__0_2713 -> bb171__0_2713 [label="unwind"];
    bb119__0_2713 -> bb120__0_2713 [label="return"];
    bb119__0_2713 -> bb171__0_2713 [label="unwind"];
    bb120__0_2713 -> bb151__0_2713 [label=""];
    bb121__0_2713 -> bb122__0_2713 [label="return"];
    bb121__0_2713 -> bb171__0_2713 [label="unwind"];
    bb122__0_2713 -> bb123__0_2713 [label="0"];
    bb122__0_2713 -> bb124__0_2713 [label="1"];
    bb122__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb123__0_2713 -> bb126__0_2713 [label="return"];
    bb123__0_2713 -> bb171__0_2713 [label="unwind"];
    bb124__0_2713 -> bb125__0_2713 [label="return"];
    bb124__0_2713 -> bb171__0_2713 [label="unwind"];
    bb125__0_2713 -> bb151__0_2713 [label=""];
    bb126__0_2713 -> bb127__0_2713 [label="return"];
    bb126__0_2713 -> bb171__0_2713 [label="unwind"];
    bb127__0_2713 -> bb128__0_2713 [label="0"];
    bb127__0_2713 -> bb129__0_2713 [label="1"];
    bb127__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb128__0_2713 -> bb131__0_2713 [label="return"];
    bb128__0_2713 -> bb171__0_2713 [label="unwind"];
    bb129__0_2713 -> bb130__0_2713 [label="return"];
    bb129__0_2713 -> bb171__0_2713 [label="unwind"];
    bb130__0_2713 -> bb152__0_2713 [label=""];
    bb131__0_2713 -> bb135__0_2713 [label="0"];
    bb131__0_2713 -> bb132__0_2713 [label="otherwise"];
    bb132__0_2713 -> bb133__0_2713 [label="return"];
    bb132__0_2713 -> bb171__0_2713 [label="unwind"];
    bb133__0_2713 -> bb134__0_2713 [label="return"];
    bb133__0_2713 -> bb171__0_2713 [label="unwind"];
    bb134__0_2713 -> bb144__0_2713 [label=""];
    bb135__0_2713 -> bb142__0_2713 [label="0"];
    bb135__0_2713 -> bb136__0_2713 [label="otherwise"];
    bb136__0_2713 -> bb137__0_2713 [label="return"];
    bb136__0_2713 -> bb171__0_2713 [label="unwind"];
    bb137__0_2713 -> bb138__0_2713 [label="return"];
    bb137__0_2713 -> bb171__0_2713 [label="unwind"];
    bb138__0_2713 -> bb139__0_2713 [label="0"];
    bb138__0_2713 -> bb140__0_2713 [label="1"];
    bb138__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb139__0_2713 -> bb143__0_2713 [label=""];
    bb140__0_2713 -> bb141__0_2713 [label="return"];
    bb140__0_2713 -> bb171__0_2713 [label="unwind"];
    bb141__0_2713 -> bb158__0_2713 [label=""];
    bb142__0_2713 -> bb143__0_2713 [label=""];
    bb143__0_2713 -> bb144__0_2713 [label=""];
    bb144__0_2713 -> bb145__0_2713 [label="return"];
    bb144__0_2713 -> bb171__0_2713 [label="unwind"];
    bb145__0_2713 -> bb146__0_2713 [label="return"];
    bb145__0_2713 -> bb171__0_2713 [label="unwind"];
    bb146__0_2713 -> bb147__0_2713 [label="0"];
    bb146__0_2713 -> bb148__0_2713 [label="1"];
    bb146__0_2713 -> bb5__0_2713 [label="otherwise"];
    bb147__0_2713 -> bb150__0_2713 [label=""];
    bb148__0_2713 -> bb149__0_2713 [label="return"];
    bb148__0_2713 -> bb171__0_2713 [label="unwind"];
    bb149__0_2713 -> bb158__0_2713 [label=""];
    bb150__0_2713 -> bb173__0_2713 [label="success"];
    bb151__0_2713 -> bb152__0_2713 [label=""];
    bb152__0_2713 -> bb158__0_2713 [label=""];
    bb153__0_2713 -> bb154__0_2713 [label=""];
    bb154__0_2713 -> bb156__0_2713 [label=""];
    bb155__0_2713 -> bb156__0_2713 [label=""];
    bb156__0_2713 -> bb157__0_2713 [label=""];
    bb157__0_2713 -> bb158__0_2713 [label=""];
    bb158__0_2713 -> bb159__0_2713 [label=""];
    bb159__0_2713 -> bb160__0_2713 [label=""];
    bb160__0_2713 -> bb162__0_2713 [label=""];
    bb161__0_2713 -> bb162__0_2713 [label=""];
    bb162__0_2713 -> bb163__0_2713 [label="return"];
    bb162__0_2713 -> bb172__0_2713 [label="unwind"];
    bb163__0_2713 -> bb164__0_2713 [label=""];
    bb164__0_2713 -> bb165__0_2713 [label=""];
    bb165__0_2713 -> bb168__0_2713 [label=""];
    bb166__0_2713 -> bb167__0_2713 [label=""];
    bb167__0_2713 -> bb168__0_2713 [label=""];
    bb168__0_2713 -> bb169__0_2713 [label=""];
    bb169__0_2713 -> bb170__0_2713 [label=""];
    bb171__0_2713 -> bb172__0_2713 [label="return"];
    bb173__0_2713 -> bb170__0_2713 [label=""];
    bb174__0_2713 -> bb108__0_2713 [label="return"];
    bb174__0_2713 -> bb171__0_2713 [label="unwind"];
    bb175__0_2713 -> bb174__0_2713 [label="success"];
}
