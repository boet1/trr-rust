// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::validate_max_token_deposits_and_borrows` before PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::validate_max_token_deposits_and_borrows(_1: &SpotMarket, _2: bool) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug do_max_borrow_check => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: u128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _5: std::result::Result<u128, error::ErrorCode>;
    let mut _6: &state::spot_market::SpotMarket;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _11: u128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _14: std::result::Result<u128, error::ErrorCode>;
    let mut _15: u64;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: ();
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _23: std::result::Result<(), error::ErrorCode>;
    let mut _24: bool;
    let mut _25: u128;
    let mut _26: bool;
    let mut _27: u128;
    let mut _28: u128;
    let mut _29: ();
    let _31: ();
    let mut _32: &str;
    let _33: &str;
    let mut _34: &std::string::String;
    let _35: &std::string::String;
    let _36: std::string::String;
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[&str; 2];
    let _41: &[&str; 2];
    let _42: [&str; 2];
    let mut _43: &[core::fmt::rt::Argument<'_>];
    let mut _44: &[core::fmt::rt::Argument<'_>; 1];
    let _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: [core::fmt::rt::Argument<'_>; 1];
    let mut _47: core::fmt::rt::Argument<'_>;
    let mut _48: &error::ErrorCode;
    let _49: &error::ErrorCode;
    let _50: ();
    let mut _51: &str;
    let _52: &str;
    let mut _53: &std::string::String;
    let _54: &std::string::String;
    let _55: std::string::String;
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str];
    let mut _59: &[&str; 3];
    let _60: &[&str; 3];
    let _61: [&str; 3];
    let mut _62: &[core::fmt::rt::Argument<'_>];
    let mut _63: &[core::fmt::rt::Argument<'_>; 2];
    let _64: &[core::fmt::rt::Argument<'_>; 2];
    let _65: [core::fmt::rt::Argument<'_>; 2];
    let mut _66: core::fmt::rt::Argument<'_>;
    let mut _67: &u128;
    let _68: &u128;
    let mut _69: core::fmt::rt::Argument<'_>;
    let mut _70: &u128;
    let _71: &u128;
    let mut _72: error::ErrorCode;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _78: ();
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: u16;
    let mut _82: bool;
    let mut _83: u64;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _86: std::result::Result<u128, error::ErrorCode>;
    let mut _87: &state::spot_market::SpotMarket;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _95: std::result::Result<u128, error::ErrorCode>;
    let mut _96: u64;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _98: std::result::Result<u64, error::ErrorCode>;
    let mut _99: u64;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _101: std::result::Result<u64, error::ErrorCode>;
    let mut _102: u64;
    let mut _103: u64;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _105: std::result::Result<u64, error::ErrorCode>;
    let mut _106: u16;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _127: ();
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _129: std::result::Result<(), error::ErrorCode>;
    let mut _130: bool;
    let mut _131: u128;
    let mut _132: bool;
    let mut _133: u128;
    let mut _134: u128;
    let mut _135: ();
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: &std::string::String;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[&str; 2];
    let _147: &[&str; 2];
    let _148: [&str; 2];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let mut _150: &[core::fmt::rt::Argument<'_>; 1];
    let _151: &[core::fmt::rt::Argument<'_>; 1];
    let _152: [core::fmt::rt::Argument<'_>; 1];
    let mut _153: core::fmt::rt::Argument<'_>;
    let mut _154: &error::ErrorCode;
    let _155: &error::ErrorCode;
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: &std::string::String;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[&str; 3];
    let _166: &[&str; 3];
    let _167: [&str; 3];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let mut _169: &[core::fmt::rt::Argument<'_>; 2];
    let _170: &[core::fmt::rt::Argument<'_>; 2];
    let _171: [core::fmt::rt::Argument<'_>; 2];
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &u128;
    let _174: &u128;
    let mut _175: core::fmt::rt::Argument<'_>;
    let mut _176: &u128;
    let _177: &u128;
    let mut _178: error::ErrorCode;
    let mut _179: isize;
    let mut _181: !;
    let mut _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _184: ();
    scope 1 {
        debug deposits => _3;
        let _12: u128;
        let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _20: u128;
        scope 6 {
            debug max_token_deposits => _12;
            let _30: error::ErrorCode;
            let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _77: ();
            let _84: u128;
            let _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _92: u128;
            scope 11 {
                debug error_code => _30;
                let _37: std::string::String;
                let _56: std::string::String;
                let mut _187: &[&str; 3];
                let mut _188: &[&str; 2];
                scope 12 {
                    debug res => _37;
                }
                scope 13 {
                    debug res => _56;
                }
            }
            scope 14 {
                debug residual => _74;
                scope 15 {
                }
            }
            scope 16 {
                debug val => _77;
                scope 17 {
                }
            }
            scope 18 {
                debug borrows => _84;
                let _93: u128;
                let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _111: u64;
                let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _116: u64;
                let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _121: u64;
                let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _126: u128;
                scope 23 {
                    debug max_token_borrows => _93;
                    let _136: error::ErrorCode;
                    let _180: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _183: ();
                    scope 40 {
                        debug error_code => _136;
                        let _143: std::string::String;
                        let _162: std::string::String;
                        let mut _185: &[&str; 3];
                        let mut _186: &[&str; 2];
                        scope 41 {
                            debug res => _143;
                        }
                        scope 42 {
                            debug res => _162;
                        }
                    }
                    scope 43 {
                        debug residual => _180;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug val => _183;
                        scope 46 {
                        }
                    }
                }
                scope 24 {
                    debug residual => _108;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _111;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug residual => _113;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug val => _116;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug residual => _118;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug val => _121;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug residual => _123;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug val => _126;
                    scope 39 {
                    }
                }
            }
            scope 19 {
                debug residual => _89;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _92;
                scope 22 {
                }
            }
        }
        scope 7 {
            debug residual => _17;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _20;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = SpotMarket::get_deposits(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: u128);
        _3 = _11;
        StorageDead(_11);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).18: u64);
        _14 = <u64 as Cast>::cast::<u128>(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_10);
        _10 = _8;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        goto -> bb94;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: u128);
        _12 = _20;
        StorageDead(_20);
        StorageDead(_13);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _12;
        _24 = Eq(move _25, const 0_u128);
        switchInt(move _24) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_17);
        _17 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_13);
        goto -> bb93;
    }

    bb12: {
        StorageDead(_25);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _3;
        StorageLive(_28);
        _28 = _12;
        _26 = Le(move _27, move _28);
        switchInt(move _26) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_29);
        _29 = ();
        _23 = std::result::Result::<(), error::ErrorCode>::Ok(move _29);
        StorageDead(_29);
        goto -> bb29;
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_30);
        _30 = error::ErrorCode::MaxDeposit;
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _188 = const _;
        _41 = &(*_188);
        _40 = &(*_41);
        _39 = move _40 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &_30;
        _48 = &(*_49);
        _47 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _48) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_48);
        _46 = [move _47];
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = move _44 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_44);
        _38 = Arguments::<'_>::new_v1(move _39, move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_39);
        _37 = format(move _38) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_38);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        _36 = move _37;
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        _33 = <String as Deref>::deref(move _34) -> [return: bb19, unwind: bb99];
    }

    bb19: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = solana_program::log::sol_log(move _32) -> [return: bb20, unwind: bb99];
    }

    bb20: {
        StorageDead(_32);
        drop(_36) -> [return: bb21, unwind: bb100];
    }

    bb21: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _187 = const _;
        _60 = &(*_187);
        _59 = &(*_60);
        _58 = move _59 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_59);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_12;
        _67 = &(*_68);
        _66 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _67) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_67);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_3;
        _70 = &(*_71);
        _69 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _70) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_70);
        _65 = [move _66, move _69];
        StorageDead(_69);
        StorageDead(_66);
        _64 = &_65;
        _63 = &(*_64);
        _62 = move _63 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_63);
        _57 = Arguments::<'_>::new_v1(move _58, move _62) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_62);
        StorageDead(_58);
        _56 = format(move _57) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_57);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_60);
        _55 = move _56;
        StorageDead(_56);
        _54 = &_55;
        _53 = &(*_54);
        _52 = <String as Deref>::deref(move _53) -> [return: bb26, unwind: bb98];
    }

    bb26: {
        _51 = &(*_52);
        StorageDead(_53);
        _50 = solana_program::log::sol_log(move _51) -> [return: bb27, unwind: bb98];
    }

    bb27: {
        StorageDead(_51);
        drop(_55) -> [return: bb28, unwind: bb100];
    }

    bb28: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageLive(_72);
        _72 = _30;
        _23 = std::result::Result::<(), error::ErrorCode>::Err(move _72);
        StorageDead(_72);
        StorageDead(_30);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_26);
        StorageDead(_24);
        _22 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _23) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_23);
        _73 = discriminant(_22);
        switchInt(move _73) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_77);
        _77 = ((_22 as Continue).0: ());
        _21 = _77;
        StorageDead(_77);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _2;
        switchInt(move _79) -> [0: bb86, otherwise: bb34];
    }

    bb32: {
        StorageLive(_74);
        _74 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb93;
    }

    bb34: {
        StorageLive(_80);
        StorageLive(_81);
        _81 = ((*_1).50: u16);
        _80 = Gt(move _81, const 0_u16);
        switchInt(move _80) -> [0: bb85, otherwise: bb35];
    }

    bb35: {
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = ((*_1).18: u64);
        _82 = Gt(move _83, const 0_u64);
        switchInt(move _82) -> [0: bb84, otherwise: bb36];
    }

    bb36: {
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &(*_1);
        _86 = SpotMarket::get_borrows(move _87) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_87);
        _85 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _86) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_86);
        _88 = discriminant(_85);
        switchInt(move _88) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_92);
        _92 = ((_85 as Continue).0: u128);
        _84 = _92;
        StorageDead(_92);
        StorageDead(_85);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = ((*_1).18: u64);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = ((*_1).50: u16);
        _105 = <u16 as Cast>::cast::<u64>(move _106) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_89);
        _89 = ((_85 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_91);
        _91 = _89;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _91) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_85);
        goto -> bb92;
    }

    bb42: {
        StorageDead(_106);
        _104 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _105) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_105);
        _107 = discriminant(_104);
        switchInt(move _107) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_111);
        _111 = ((_104 as Continue).0: u64);
        _103 = _111;
        StorageDead(_111);
        _101 = <u64 as SafeMath>::safe_mul(move _102, move _103) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_108);
        _108 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb88;
    }

    bb47: {
        StorageDead(_103);
        StorageDead(_102);
        _100 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _101) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_101);
        _112 = discriminant(_100);
        switchInt(move _112) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_116);
        _116 = ((_100 as Continue).0: u64);
        _99 = _116;
        StorageDead(_116);
        _98 = <u64 as SafeMath>::safe_div(move _99, const 10000_u64) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_113);
        _113 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb88;
    }

    bb52: {
        StorageDead(_99);
        _97 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _98) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_98);
        _117 = discriminant(_97);
        switchInt(move _117) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_121);
        _121 = ((_97 as Continue).0: u64);
        _96 = _121;
        StorageDead(_121);
        _95 = <u64 as Cast>::cast::<u128>(move _96) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_118);
        _118 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_120);
        StorageDead(_118);
        goto -> bb89;
    }

    bb57: {
        StorageDead(_96);
        _94 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _95) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_95);
        _122 = discriminant(_94);
        switchInt(move _122) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_126);
        _126 = ((_94 as Continue).0: u128);
        _93 = _126;
        StorageDead(_126);
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_94);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = _93;
        _130 = Eq(move _131, const 0_u128);
        switchInt(move _130) -> [0: bb63, otherwise: bb62];
    }

    bb60: {
        StorageLive(_123);
        _123 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_125);
        StorageDead(_123);
        goto -> bb90;
    }

    bb62: {
        StorageDead(_131);
        goto -> bb64;
    }

    bb63: {
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = _84;
        StorageLive(_134);
        _134 = _93;
        _132 = Le(move _133, move _134);
        switchInt(move _132) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        StorageDead(_134);
        StorageDead(_133);
        StorageLive(_135);
        _135 = ();
        _129 = std::result::Result::<(), error::ErrorCode>::Ok(move _135);
        StorageDead(_135);
        goto -> bb79;
    }

    bb65: {
        StorageDead(_134);
        StorageDead(_133);
        StorageLive(_136);
        _136 = error::ErrorCode::MaxBorrows;
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _186 = const _;
        _147 = &(*_186);
        _146 = &(*_147);
        _145 = move _146 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_136;
        _154 = &(*_155);
        _153 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _154) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_154);
        _152 = [move _153];
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        _144 = Arguments::<'_>::new_v1(move _145, move _149) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_149);
        StorageDead(_145);
        _143 = format(move _144) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_144);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        _142 = move _143;
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = <String as Deref>::deref(move _140) -> [return: bb69, unwind: bb97];
    }

    bb69: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb70, unwind: bb97];
    }

    bb70: {
        StorageDead(_138);
        drop(_142) -> [return: bb71, unwind: bb100];
    }

    bb71: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _185 = const _;
        _166 = &(*_185);
        _165 = &(*_166);
        _164 = move _165 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_93;
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _173) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_173);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_84;
        _176 = &(*_177);
        _175 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _176) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_176);
        _171 = [move _172, move _175];
        StorageDead(_175);
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = move _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_169);
        _163 = Arguments::<'_>::new_v1(move _164, move _168) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_168);
        StorageDead(_164);
        _162 = format(move _163) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_163);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_166);
        _161 = move _162;
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = <String as Deref>::deref(move _159) -> [return: bb76, unwind: bb96];
    }

    bb76: {
        _157 = &(*_158);
        StorageDead(_159);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb77, unwind: bb96];
    }

    bb77: {
        StorageDead(_157);
        drop(_161) -> [return: bb78, unwind: bb100];
    }

    bb78: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_178);
        _178 = _136;
        _129 = std::result::Result::<(), error::ErrorCode>::Err(move _178);
        StorageDead(_178);
        StorageDead(_136);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_132);
        StorageDead(_130);
        _128 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _129) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_129);
        _179 = discriminant(_128);
        switchInt(move _179) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        StorageLive(_183);
        _183 = ((_128 as Continue).0: ());
        _127 = _183;
        StorageDead(_183);
        StorageDead(_128);
        StorageDead(_127);
        _78 = const ();
        StorageDead(_93);
        StorageDead(_84);
        goto -> bb87;
    }

    bb82: {
        StorageLive(_180);
        _180 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_182);
        _182 = _180;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _182) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb91;
    }

    bb84: {
        StorageDead(_83);
        goto -> bb86;
    }

    bb85: {
        StorageDead(_81);
        goto -> bb86;
    }

    bb86: {
        _78 = const ();
        goto -> bb87;
    }

    bb87: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_184);
        _184 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _184);
        StorageDead(_184);
        StorageDead(_12);
        StorageDead(_3);
        goto -> bb95;
    }

    bb88: {
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_94);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_93);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_12);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_3);
        goto -> bb95;
    }

    bb95: {
        return;
    }

    bb96 (cleanup): {
        drop(_161) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_142) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_55) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_36) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        resume;
    }
}
