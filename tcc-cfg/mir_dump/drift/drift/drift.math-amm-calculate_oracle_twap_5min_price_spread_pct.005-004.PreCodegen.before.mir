// MIR for `calculate_oracle_twap_5min_price_spread_pct` before PreCodegen

fn calculate_oracle_twap_5min_price_spread_pct(_1: &AMM, _2: u64) -> std::result::Result<i64, error::ErrorCode> {
    debug amm => _1;
    debug other_price => _2;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _3: i64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _5: std::result::Result<i64, error::ErrorCode>;
    let mut _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: u64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: i64;
    let mut _15: i64;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: i64;
    let mut _21: i128;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _23: std::result::Result<i128, error::ErrorCode>;
    let mut _24: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: i128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _29: std::result::Result<i128, error::ErrorCode>;
    let mut _30: i64;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: i128;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _43: std::result::Result<i128, error::ErrorCode>;
    let mut _44: u64;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug price_spread => _3;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: i128;
        let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _40: i128;
        let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _49: i128;
        let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _54: i128;
        scope 10 {
            debug residual => _32;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _35;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _37;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _40;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _46;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _49;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _51;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _54;
            scope 25 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _17;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _20;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = <u64 as Cast>::cast::<i64>(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: i64);
        _6 = _14;
        StorageDead(_14);
        StorageLive(_15);
        _15 = (((*_1).1: state::oracle::HistoricalOracleData).4: i64);
        _5 = <i64 as SafeMath>::safe_sub(move _6, move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb36;
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_6);
        _4 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _5) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_5);
        _16 = discriminant(_4);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_4 as Continue).0: i64);
        _3 = _20;
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _3;
        _29 = <i64 as Cast>::cast::<i128>(move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_17);
        _17 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb36;
    }

    bb12: {
        StorageDead(_30);
        _28 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_28 as Continue).0: i128);
        _27 = _35;
        StorageDead(_35);
        _26 = <i128 as SafeMath>::safe_mul(move _27, const _) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb34;
    }

    bb17: {
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_26);
        _36 = discriminant(_25);
        switchInt(move _36) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_40);
        _40 = ((_25 as Continue).0: i128);
        _24 = _40;
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _2;
        _43 = <u64 as Cast>::cast::<i128>(move _44) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_37);
        _37 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb34;
    }

    bb22: {
        StorageDead(_44);
        _42 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _43) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_43);
        _45 = discriminant(_42);
        switchInt(move _45) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_49);
        _49 = ((_42 as Continue).0: i128);
        _41 = _49;
        StorageDead(_49);
        _23 = <i128 as SafeMath>::safe_div(move _24, move _41) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_46);
        _46 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_41);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb33;
    }

    bb27: {
        StorageDead(_41);
        StorageDead(_24);
        _22 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_23);
        _50 = discriminant(_22);
        switchInt(move _50) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_54);
        _54 = ((_22 as Continue).0: i128);
        _21 = _54;
        StorageDead(_54);
        _0 = <i128 as Cast>::cast::<i64>(move _21) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_51);
        _51 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_21);
        StorageDead(_3);
        StorageDead(_42);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        goto -> bb37;
    }

    bb33: {
        StorageDead(_21);
        StorageDead(_3);
        StorageDead(_42);
        goto -> bb35;
    }

    bb34: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_3);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        goto -> bb37;
    }

    bb36: {
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb37;
    }

    bb37: {
        return;
    }
}
