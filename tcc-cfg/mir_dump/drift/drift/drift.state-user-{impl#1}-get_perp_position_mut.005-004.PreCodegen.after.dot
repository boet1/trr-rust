digraph Mir_0_4294 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn User::get_perp_position_mut(_1: &amp;ReErased mut state::user::User, _2: u16) -&gt; std::result::Result&lt;&amp;ReErased mut state::user::PerpPosition, error::ErrorCode&gt;<br align="left"/>let mut _3: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _4: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _5: usize;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _7: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _8: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _9: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _10: u16;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: usize;<br align="left"/>let mut _17: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug market_index =&gt; _2;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>>;
    bb0__0_4294 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;((*_1).4: [state::user::PerpPosition; 8])<br/>_8 = &amp;(*_9)<br/>StorageLive(_10)<br/>_10 = _2<br/></td></tr><tr><td align="left">_7 = get_position_index(move _8, move _10)</td></tr></table>>];
    bb1__0_4294 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb2__0_4294 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_11 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_4294 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_6 as Continue).0: usize)<br/>_5 = _15<br/>StorageDead(_15)<br/>_16 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_17 = Lt(_5, _16)<br/></td></tr><tr><td align="left">assert(move _17, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _16, _5)</td></tr></table>>];
    bb4__0_4294 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_4294 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;&amp;mut PerpPosition, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb6__0_4294 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_3)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_4294 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_4 = &amp;mut ((*_1).4: [state::user::PerpPosition; 8])[_5]<br/>_3 = &amp;mut (*_4)<br/>_0 = std::result::Result::&lt;&amp;mut PerpPosition, error::ErrorCode&gt;::Ok(move _3)<br/>StorageDead(_3)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_4294 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4294 -> bb1__0_4294 [label="return"];
    bb1__0_4294 -> bb2__0_4294 [label="return"];
    bb2__0_4294 -> bb3__0_4294 [label="0"];
    bb2__0_4294 -> bb5__0_4294 [label="1"];
    bb2__0_4294 -> bb4__0_4294 [label="otherwise"];
    bb3__0_4294 -> bb7__0_4294 [label="success"];
    bb5__0_4294 -> bb6__0_4294 [label="return"];
    bb6__0_4294 -> bb8__0_4294 [label=""];
    bb7__0_4294 -> bb8__0_4294 [label=""];
}
