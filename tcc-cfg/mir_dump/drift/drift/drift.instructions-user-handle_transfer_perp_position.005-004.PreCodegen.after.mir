// MIR for `instructions::user::handle_transfer_perp_position` after PreCodegen

fn instructions::user::handle_transfer_perp_position(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::TransferPerpPosition<'_>>, _2: u16, _3: Option<i64>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _8: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: anchor_lang::prelude::Pubkey;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _21: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _29: std::cell::RefMut<'_, state::user::User>;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _31: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _32: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _33: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _34: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: std::cell::RefMut<'_, state::user::User>;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _43: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _44: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _45: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _46: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _54: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _61: ();
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _63: std::result::Result<(), error::ErrorCode>;
    let mut _64: bool;
    let mut _65: &state::user::User;
    let _66: &state::user::User;
    let mut _67: &std::cell::RefMut<'_, state::user::User>;
    let mut _68: ();
    let _70: ();
    let mut _71: &str;
    let _72: &str;
    let mut _73: &std::string::String;
    let _74: &std::string::String;
    let _75: std::string::String;
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[&str; 2];
    let _80: &[&str; 2];
    let _81: [&str; 2];
    let mut _82: &[core::fmt::rt::Argument<'_>];
    let mut _83: &[core::fmt::rt::Argument<'_>; 1];
    let _84: &[core::fmt::rt::Argument<'_>; 1];
    let _85: [core::fmt::rt::Argument<'_>; 1];
    let mut _86: core::fmt::rt::Argument<'_>;
    let mut _87: &error::ErrorCode;
    let _88: &error::ErrorCode;
    let _89: ();
    let mut _90: &str;
    let _91: &str;
    let mut _92: error::ErrorCode;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _98: ();
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _100: std::result::Result<(), error::ErrorCode>;
    let mut _101: bool;
    let mut _102: &state::user::User;
    let _103: &state::user::User;
    let mut _104: &std::cell::RefMut<'_, state::user::User>;
    let mut _105: ();
    let _107: ();
    let mut _108: &str;
    let _109: &str;
    let mut _110: &std::string::String;
    let _111: &std::string::String;
    let _112: std::string::String;
    let mut _114: std::fmt::Arguments<'_>;
    let mut _115: &[&str];
    let mut _116: &[&str; 2];
    let _117: &[&str; 2];
    let _118: [&str; 2];
    let mut _119: &[core::fmt::rt::Argument<'_>];
    let mut _120: &[core::fmt::rt::Argument<'_>; 1];
    let _121: &[core::fmt::rt::Argument<'_>; 1];
    let _122: [core::fmt::rt::Argument<'_>; 1];
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &error::ErrorCode;
    let _125: &error::ErrorCode;
    let _126: ();
    let mut _127: &str;
    let _128: &str;
    let mut _129: error::ErrorCode;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _135: ();
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _137: std::result::Result<(), error::ErrorCode>;
    let mut _138: bool;
    let mut _139: &anchor_lang::prelude::Pubkey;
    let mut _140: &anchor_lang::prelude::Pubkey;
    let mut _141: ();
    let _143: ();
    let mut _144: &str;
    let _145: &str;
    let mut _146: &std::string::String;
    let _147: &std::string::String;
    let _148: std::string::String;
    let mut _150: std::fmt::Arguments<'_>;
    let mut _151: &[&str];
    let mut _152: &[&str; 2];
    let _153: &[&str; 2];
    let _154: [&str; 2];
    let mut _155: &[core::fmt::rt::Argument<'_>];
    let mut _156: &[core::fmt::rt::Argument<'_>; 1];
    let _157: &[core::fmt::rt::Argument<'_>; 1];
    let _158: [core::fmt::rt::Argument<'_>; 1];
    let mut _159: core::fmt::rt::Argument<'_>;
    let mut _160: &error::ErrorCode;
    let _161: &error::ErrorCode;
    let _162: ();
    let mut _163: &str;
    let _164: &str;
    let mut _165: error::ErrorCode;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _174: instructions::optional_accounts::AccountMaps<'_>;
    let mut _175: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _176: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _177: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _178: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _179: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _180: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _181: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _182: &std::collections::BTreeSet<u16>;
    let _183: &std::collections::BTreeSet<u16>;
    let _184: std::collections::BTreeSet<u16>;
    let mut _185: u16;
    let mut _186: &std::collections::BTreeSet<u16>;
    let _187: &std::collections::BTreeSet<u16>;
    let _188: std::collections::BTreeSet<u16>;
    let mut _189: u64;
    let mut _190: std::option::Option<state::state::OracleGuardRails>;
    let mut _191: state::state::OracleGuardRails;
    let mut _192: &state::state::State;
    let mut _193: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _194: isize;
    let mut _196: !;
    let mut _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _199: i128;
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _201: std::result::Result<i128, error::ErrorCode>;
    let mut _202: u16;
    let mut _203: &state::perp_market_map::PerpMarketMap<'_>;
    let _204: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _205: &mut state::oracle_map::OracleMap<'_>;
    let mut _206: &mut state::oracle_map::OracleMap<'_>;
    let mut _207: &state::state::State;
    let _208: &state::state::State;
    let mut _209: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _210: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _211: &anchor_lang::prelude::Clock;
    let _212: &anchor_lang::prelude::Clock;
    let mut _213: isize;
    let mut _215: !;
    let mut _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _218: ();
    let mut _219: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _220: std::result::Result<(), error::ErrorCode>;
    let mut _221: &mut state::user::User;
    let mut _222: &mut state::user::User;
    let mut _223: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _224: &mut &mut std::cell::RefMut<'_, state::user::User>;
    let mut _225: &anchor_lang::prelude::Pubkey;
    let _226: &anchor_lang::prelude::Pubkey;
    let mut _227: &mut state::perp_market::PerpMarket;
    let mut _228: &mut state::perp_market::PerpMarket;
    let mut _229: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _230: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _231: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _232: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _233: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _234: &u16;
    let _235: &u16;
    let mut _236: isize;
    let mut _238: !;
    let mut _239: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _241: i64;
    let mut _242: isize;
    let mut _244: !;
    let mut _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _247: ();
    let mut _248: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _249: std::result::Result<(), error::ErrorCode>;
    let mut _250: &mut state::user::User;
    let mut _251: &mut state::user::User;
    let mut _252: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _253: &mut &mut std::cell::RefMut<'_, state::user::User>;
    let mut _254: &anchor_lang::prelude::Pubkey;
    let _255: &anchor_lang::prelude::Pubkey;
    let mut _256: &mut state::perp_market::PerpMarket;
    let mut _257: &mut state::perp_market::PerpMarket;
    let mut _258: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _259: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _260: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _261: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _262: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _263: &u16;
    let _264: &u16;
    let mut _265: isize;
    let mut _267: !;
    let mut _268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _270: i64;
    let mut _271: isize;
    let mut _273: !;
    let mut _274: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _280: ();
    let mut _282: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _283: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _284: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _285: &u16;
    let _286: &u16;
    let mut _287: isize;
    let mut _289: !;
    let mut _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _292: u128;
    let mut _293: &state::perp_market::PerpMarket;
    let _294: &state::perp_market::PerpMarket;
    let mut _295: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _298: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
    let mut _299: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, math::oracle::OracleValidity)>;
    let mut _300: std::result::Result<(&state::oracle::OraclePriceData, math::oracle::OracleValidity), error::ErrorCode>;
    let mut _301: &mut state::oracle_map::OracleMap<'_>;
    let mut _302: state::user::MarketType;
    let mut _303: u16;
    let mut _304: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _305: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _306: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _307: &state::perp_market::PerpMarket;
    let _308: &state::perp_market::PerpMarket;
    let mut _309: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _310: i64;
    let mut _311: &state::perp_market::PerpMarket;
    let mut _312: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _313: u64;
    let mut _314: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _315: std::result::Result<u64, error::ErrorCode>;
    let mut _316: state::perp_market::PerpMarket;
    let mut _317: &state::perp_market::PerpMarket;
    let mut _318: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _319: isize;
    let mut _321: !;
    let mut _322: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _324: i8;
    let mut _325: &state::perp_market::PerpMarket;
    let mut _326: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _327: isize;
    let mut _329: !;
    let mut _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _332: u64;
    let mut _333: &state::perp_market::PerpMarket;
    let mut _334: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _335: u64;
    let mut _336: &state::perp_market::PerpMarket;
    let mut _337: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _338: ();
    let mut _339: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _340: std::result::Result<(), error::ErrorCode>;
    let mut _341: bool;
    let mut _342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _343: std::result::Result<bool, error::ErrorCode>;
    let mut _344: math::oracle::OracleValidity;
    let mut _345: std::option::Option<math::oracle::DriftAction>;
    let mut _346: math::oracle::DriftAction;
    let mut _347: isize;
    let mut _349: !;
    let mut _350: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _352: ();
    let _354: ();
    let mut _355: &str;
    let _356: &str;
    let mut _357: &std::string::String;
    let _358: &std::string::String;
    let _359: std::string::String;
    let mut _361: std::fmt::Arguments<'_>;
    let mut _362: &[&str];
    let mut _363: &[&str; 2];
    let _364: &[&str; 2];
    let _365: [&str; 2];
    let mut _366: &[core::fmt::rt::Argument<'_>];
    let mut _367: &[core::fmt::rt::Argument<'_>; 1];
    let _368: &[core::fmt::rt::Argument<'_>; 1];
    let _369: [core::fmt::rt::Argument<'_>; 1];
    let mut _370: core::fmt::rt::Argument<'_>;
    let mut _371: &error::ErrorCode;
    let _372: &error::ErrorCode;
    let _373: ();
    let mut _374: &str;
    let _375: &str;
    let mut _376: error::ErrorCode;
    let mut _377: isize;
    let mut _379: !;
    let mut _380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _382: ();
    let mut _383: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _384: std::result::Result<(), error::ErrorCode>;
    let mut _385: bool;
    let mut _386: &state::perp_market::PerpMarket;
    let _387: &state::perp_market::PerpMarket;
    let mut _388: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _389: state::paused_operations::PerpOperation;
    let mut _390: ();
    let _392: ();
    let mut _393: &str;
    let _394: &str;
    let mut _395: &std::string::String;
    let _396: &std::string::String;
    let _397: std::string::String;
    let mut _399: std::fmt::Arguments<'_>;
    let mut _400: &[&str];
    let mut _401: &[&str; 2];
    let _402: &[&str; 2];
    let _403: [&str; 2];
    let mut _404: &[core::fmt::rt::Argument<'_>];
    let mut _405: &[core::fmt::rt::Argument<'_>; 1];
    let _406: &[core::fmt::rt::Argument<'_>; 1];
    let _407: [core::fmt::rt::Argument<'_>; 1];
    let mut _408: core::fmt::rt::Argument<'_>;
    let mut _409: &error::ErrorCode;
    let _410: &error::ErrorCode;
    let _411: ();
    let mut _412: &str;
    let _413: &str;
    let mut _414: error::ErrorCode;
    let mut _415: isize;
    let mut _417: !;
    let mut _418: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _420: i64;
    let mut _423: (i64, controller::position::PositionDirection);
    let mut _424: isize;
    let mut _427: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _428: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _429: &mut state::user::User;
    let mut _430: &mut state::user::User;
    let mut _431: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _432: u16;
    let mut _433: isize;
    let mut _435: !;
    let mut _436: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _439: ();
    let mut _440: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _441: std::result::Result<(), error::ErrorCode>;
    let mut _442: bool;
    let mut _443: i64;
    let mut _444: i64;
    let mut _445: i64;
    let mut _446: i64;
    let mut _447: ();
    let _449: ();
    let mut _450: &str;
    let _451: &str;
    let mut _452: &std::string::String;
    let _453: &std::string::String;
    let _454: std::string::String;
    let mut _456: std::fmt::Arguments<'_>;
    let mut _457: &[&str];
    let mut _458: &[&str; 2];
    let _459: &[&str; 2];
    let _460: [&str; 2];
    let mut _461: &[core::fmt::rt::Argument<'_>];
    let mut _462: &[core::fmt::rt::Argument<'_>; 1];
    let _463: &[core::fmt::rt::Argument<'_>; 1];
    let _464: [core::fmt::rt::Argument<'_>; 1];
    let mut _465: core::fmt::rt::Argument<'_>;
    let mut _466: &error::ErrorCode;
    let _467: &error::ErrorCode;
    let _468: ();
    let mut _469: &str;
    let _470: &str;
    let mut _471: error::ErrorCode;
    let mut _472: isize;
    let mut _474: !;
    let mut _475: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _477: ();
    let mut _478: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _479: std::result::Result<(), error::ErrorCode>;
    let mut _480: bool;
    let mut _481: i64;
    let mut _482: i64;
    let mut _483: i64;
    let mut _484: i64;
    let mut _485: ();
    let _487: ();
    let mut _488: &str;
    let _489: &str;
    let mut _490: &std::string::String;
    let _491: &std::string::String;
    let _492: std::string::String;
    let mut _494: std::fmt::Arguments<'_>;
    let mut _495: &[&str];
    let mut _496: &[&str; 2];
    let _497: &[&str; 2];
    let _498: [&str; 2];
    let mut _499: &[core::fmt::rt::Argument<'_>];
    let mut _500: &[core::fmt::rt::Argument<'_>; 1];
    let _501: &[core::fmt::rt::Argument<'_>; 1];
    let _502: [core::fmt::rt::Argument<'_>; 1];
    let mut _503: core::fmt::rt::Argument<'_>;
    let mut _504: &error::ErrorCode;
    let _505: &error::ErrorCode;
    let _506: ();
    let mut _507: &str;
    let _508: &str;
    let mut _509: error::ErrorCode;
    let mut _510: isize;
    let mut _512: !;
    let mut _513: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _515: ();
    let mut _516: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _517: std::result::Result<(), error::ErrorCode>;
    let mut _518: bool;
    let mut _519: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _520: std::result::Result<bool, error::ErrorCode>;
    let mut _521: u64;
    let mut _522: i64;
    let mut _523: u64;
    let mut _524: isize;
    let mut _526: !;
    let mut _527: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _529: ();
    let _531: ();
    let mut _532: &str;
    let _533: &str;
    let mut _534: &std::string::String;
    let _535: &std::string::String;
    let _536: std::string::String;
    let mut _538: std::fmt::Arguments<'_>;
    let mut _539: &[&str];
    let mut _540: &[&str; 2];
    let _541: &[&str; 2];
    let _542: [&str; 2];
    let mut _543: &[core::fmt::rt::Argument<'_>];
    let mut _544: &[core::fmt::rt::Argument<'_>; 1];
    let _545: &[core::fmt::rt::Argument<'_>; 1];
    let _546: [core::fmt::rt::Argument<'_>; 1];
    let mut _547: core::fmt::rt::Argument<'_>;
    let mut _548: &error::ErrorCode;
    let _549: &error::ErrorCode;
    let _550: ();
    let mut _551: &str;
    let _552: &str;
    let mut _553: error::ErrorCode;
    let mut _554: isize;
    let mut _556: !;
    let mut _557: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _559: i64;
    let mut _560: controller::position::PositionDirection;
    let mut _561: &state::user::PerpPosition;
    let mut _563: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _564: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _565: &mut state::user::User;
    let mut _566: &mut state::user::User;
    let mut _567: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _568: u16;
    let mut _569: isize;
    let mut _571: !;
    let mut _572: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _574: ();
    let mut _575: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _576: std::result::Result<(), error::ErrorCode>;
    let mut _577: bool;
    let mut _578: i64;
    let mut _579: ();
    let _581: ();
    let mut _582: &str;
    let _583: &str;
    let mut _584: &std::string::String;
    let _585: &std::string::String;
    let _586: std::string::String;
    let mut _588: std::fmt::Arguments<'_>;
    let mut _589: &[&str];
    let mut _590: &[&str; 2];
    let _591: &[&str; 2];
    let _592: [&str; 2];
    let mut _593: &[core::fmt::rt::Argument<'_>];
    let mut _594: &[core::fmt::rt::Argument<'_>; 1];
    let _595: &[core::fmt::rt::Argument<'_>; 1];
    let _596: [core::fmt::rt::Argument<'_>; 1];
    let mut _597: core::fmt::rt::Argument<'_>;
    let mut _598: &error::ErrorCode;
    let _599: &error::ErrorCode;
    let _600: ();
    let mut _601: &str;
    let _602: &str;
    let mut _603: error::ErrorCode;
    let mut _604: isize;
    let mut _606: !;
    let mut _607: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _609: i64;
    let mut _610: controller::position::PositionDirection;
    let mut _611: &state::user::PerpPosition;
    let mut _613: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _614: std::result::Result<i64, error::ErrorCode>;
    let mut _615: i64;
    let mut _616: i64;
    let mut _617: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _618: std::result::Result<i64, error::ErrorCode>;
    let mut _619: u64;
    let mut _620: isize;
    let mut _622: !;
    let mut _623: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _625: controller::position::PositionDirection;
    let mut _626: isize;
    let mut _628: !;
    let mut _629: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _632: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _633: std::result::Result<u64, error::ErrorCode>;
    let mut _634: u128;
    let mut _635: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _636: std::result::Result<u128, error::ErrorCode>;
    let mut _637: i128;
    let mut _638: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _639: std::result::Result<i128, error::ErrorCode>;
    let mut _640: i64;
    let mut _641: isize;
    let mut _643: !;
    let mut _644: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _646: i64;
    let mut _647: isize;
    let mut _649: !;
    let mut _650: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _652: isize;
    let mut _654: !;
    let mut _655: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _658: i64;
    let mut _660: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDelta>;
    let mut _661: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _662: u64;
    let mut _663: u64;
    let mut _664: controller::position::PositionDirection;
    let mut _665: isize;
    let mut _667: !;
    let mut _668: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _671: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDelta>;
    let mut _672: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _673: u64;
    let mut _674: u64;
    let mut _675: controller::position::PositionDirection;
    let mut _676: &controller::position::PositionDirection;
    let mut _677: isize;
    let mut _679: !;
    let mut _680: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _683: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDirection>;
    let mut _684: std::result::Result<controller::position::PositionDirection, error::ErrorCode>;
    let mut _685: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _686: &mut state::user::User;
    let mut _687: &mut state::user::User;
    let mut _688: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _689: u16;
    let mut _690: {closure@programs/drift/src/instructions/user.rs:1725:14: 1725:24};
    let mut _691: isize;
    let mut _693: !;
    let mut _694: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _700: (std::option::Option<u64>, std::option::Option<u64>, std::option::Option<u64>, std::option::Option<u64>);
    let mut _702: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _703: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _704: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _705: &u16;
    let _706: &u16;
    let mut _707: isize;
    let mut _709: !;
    let mut _710: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _713: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _714: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _715: &mut state::user::User;
    let mut _716: &mut state::user::User;
    let mut _717: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _718: u16;
    let mut _719: isize;
    let mut _721: !;
    let mut _722: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _726: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _727: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _728: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _729: u64;
    let mut _730: std::option::Option<(u64, u64)>;
    let mut _731: &state::user::PerpPosition;
    let mut _732: controller::position::PositionDirection;
    let mut _733: isize;
    let mut _735: !;
    let mut _736: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _738: i64;
    let mut _739: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _740: std::result::Result<i64, error::ErrorCode>;
    let mut _741: &mut state::user::PerpPosition;
    let mut _742: &mut state::perp_market::PerpMarket;
    let mut _743: &mut state::perp_market::PerpMarket;
    let mut _744: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _745: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _746: &controller::position::PositionDelta;
    let _747: &controller::position::PositionDelta;
    let mut _748: isize;
    let mut _750: !;
    let mut _751: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _754: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _755: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _756: &mut state::user::User;
    let mut _757: &mut state::user::User;
    let mut _758: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _759: u16;
    let mut _760: isize;
    let mut _762: !;
    let mut _763: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _767: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _768: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _769: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _770: u64;
    let mut _771: std::option::Option<(u64, u64)>;
    let mut _772: &state::user::PerpPosition;
    let mut _773: controller::position::PositionDirection;
    let mut _774: &controller::position::PositionDirection;
    let mut _775: isize;
    let mut _777: !;
    let mut _778: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _780: i64;
    let mut _781: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _782: std::result::Result<i64, error::ErrorCode>;
    let mut _783: &mut state::user::PerpPosition;
    let mut _784: &mut state::perp_market::PerpMarket;
    let mut _785: &mut state::perp_market::PerpMarket;
    let mut _786: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _787: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _788: &controller::position::PositionDelta;
    let _789: &controller::position::PositionDelta;
    let mut _790: isize;
    let mut _792: !;
    let mut _793: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _795: ();
    let mut _796: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _797: std::result::Result<(), error::ErrorCode>;
    let mut _798: &state::user::PerpPosition;
    let mut _799: &state::perp_market::PerpMarket;
    let _800: &state::perp_market::PerpMarket;
    let mut _801: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _802: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _803: isize;
    let mut _805: !;
    let mut _806: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _808: ();
    let mut _809: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _810: std::result::Result<(), error::ErrorCode>;
    let mut _811: &state::user::PerpPosition;
    let mut _812: &state::perp_market::PerpMarket;
    let _813: &state::perp_market::PerpMarket;
    let mut _814: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _815: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _816: isize;
    let mut _818: !;
    let mut _819: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _821: std::option::Option<u64>;
    let mut _822: std::option::Option<u64>;
    let mut _823: std::option::Option<u64>;
    let mut _824: std::option::Option<u64>;
    let mut _826: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _827: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _828: &state::user::User;
    let _829: &state::user::User;
    let mut _830: &std::cell::RefMut<'_, state::user::User>;
    let _831: &&mut std::cell::RefMut<'_, state::user::User>;
    let mut _832: &state::perp_market_map::PerpMarketMap<'_>;
    let _833: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _834: &state::spot_market_map::SpotMarketMap<'_>;
    let _835: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _836: &mut state::oracle_map::OracleMap<'_>;
    let mut _837: &mut state::oracle_map::OracleMap<'_>;
    let mut _838: state::margin_calculation::MarginContext;
    let mut _839: state::margin_calculation::MarginContext;
    let mut _840: math::margin::MarginRequirementType;
    let mut _841: u16;
    let mut _842: i64;
    let mut _843: isize;
    let mut _845: !;
    let mut _846: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _848: ();
    let mut _849: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _850: std::result::Result<(), error::ErrorCode>;
    let mut _851: bool;
    let mut _852: &state::margin_calculation::MarginCalculation;
    let mut _853: ();
    let _855: ();
    let mut _856: &str;
    let _857: &str;
    let mut _858: &std::string::String;
    let _859: &std::string::String;
    let _860: std::string::String;
    let mut _862: std::fmt::Arguments<'_>;
    let mut _863: &[&str];
    let mut _864: &[&str; 2];
    let _865: &[&str; 2];
    let _866: [&str; 2];
    let mut _867: &[core::fmt::rt::Argument<'_>];
    let mut _868: &[core::fmt::rt::Argument<'_>; 1];
    let _869: &[core::fmt::rt::Argument<'_>; 1];
    let _870: [core::fmt::rt::Argument<'_>; 1];
    let mut _871: core::fmt::rt::Argument<'_>;
    let mut _872: &error::ErrorCode;
    let _873: &error::ErrorCode;
    let _874: ();
    let mut _875: &str;
    let _876: &str;
    let mut _877: error::ErrorCode;
    let mut _878: isize;
    let mut _880: !;
    let mut _881: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _884: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _885: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _886: &state::user::User;
    let _887: &state::user::User;
    let mut _888: &std::cell::RefMut<'_, state::user::User>;
    let _889: &&mut std::cell::RefMut<'_, state::user::User>;
    let mut _890: &state::perp_market_map::PerpMarketMap<'_>;
    let _891: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _892: &state::spot_market_map::SpotMarketMap<'_>;
    let _893: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _894: &mut state::oracle_map::OracleMap<'_>;
    let mut _895: &mut state::oracle_map::OracleMap<'_>;
    let mut _896: state::margin_calculation::MarginContext;
    let mut _897: state::margin_calculation::MarginContext;
    let mut _898: math::margin::MarginRequirementType;
    let mut _899: u16;
    let mut _900: i64;
    let mut _901: i64;
    let mut _902: bool;
    let mut _903: isize;
    let mut _905: !;
    let mut _906: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _908: ();
    let mut _909: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _910: std::result::Result<(), error::ErrorCode>;
    let mut _911: bool;
    let mut _912: &state::margin_calculation::MarginCalculation;
    let mut _913: ();
    let _915: ();
    let mut _916: &str;
    let _917: &str;
    let mut _918: &std::string::String;
    let _919: &std::string::String;
    let _920: std::string::String;
    let mut _922: std::fmt::Arguments<'_>;
    let mut _923: &[&str];
    let mut _924: &[&str; 2];
    let _925: &[&str; 2];
    let _926: [&str; 2];
    let mut _927: &[core::fmt::rt::Argument<'_>];
    let mut _928: &[core::fmt::rt::Argument<'_>; 1];
    let _929: &[core::fmt::rt::Argument<'_>; 1];
    let _930: [core::fmt::rt::Argument<'_>; 1];
    let mut _931: core::fmt::rt::Argument<'_>;
    let mut _932: &error::ErrorCode;
    let _933: &error::ErrorCode;
    let _934: ();
    let mut _935: &str;
    let _936: &str;
    let mut _937: error::ErrorCode;
    let mut _938: isize;
    let mut _940: !;
    let mut _941: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _944: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _945: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _946: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _947: &u16;
    let _948: &u16;
    let mut _949: isize;
    let mut _951: !;
    let mut _952: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _955: &state::perp_market::PerpMarket;
    let _956: &state::perp_market::PerpMarket;
    let mut _957: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _958: ();
    let mut _959: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _960: std::result::Result<(), error::ErrorCode>;
    let mut _961: bool;
    let mut _962: u128;
    let mut _963: u128;
    let mut _964: ();
    let _966: ();
    let mut _967: &str;
    let _968: &str;
    let mut _969: &std::string::String;
    let _970: &std::string::String;
    let _971: std::string::String;
    let mut _973: std::fmt::Arguments<'_>;
    let mut _974: &[&str];
    let mut _975: &[&str; 2];
    let _976: &[&str; 2];
    let _977: [&str; 2];
    let mut _978: &[core::fmt::rt::Argument<'_>];
    let mut _979: &[core::fmt::rt::Argument<'_>; 1];
    let _980: &[core::fmt::rt::Argument<'_>; 1];
    let _981: [core::fmt::rt::Argument<'_>; 1];
    let mut _982: core::fmt::rt::Argument<'_>;
    let mut _983: &error::ErrorCode;
    let _984: &error::ErrorCode;
    let _985: ();
    let mut _986: &str;
    let _987: &str;
    let mut _988: &std::string::String;
    let _989: &std::string::String;
    let _990: std::string::String;
    let mut _992: std::fmt::Arguments<'_>;
    let mut _993: &[&str];
    let mut _994: &[&str; 2];
    let _995: &[&str; 2];
    let _996: [&str; 2];
    let mut _997: &[core::fmt::rt::Argument<'_>];
    let mut _998: &[core::fmt::rt::Argument<'_>; 2];
    let _999: &[core::fmt::rt::Argument<'_>; 2];
    let _1000: [core::fmt::rt::Argument<'_>; 2];
    let mut _1001: core::fmt::rt::Argument<'_>;
    let mut _1002: &u128;
    let _1003: &u128;
    let mut _1004: core::fmt::rt::Argument<'_>;
    let mut _1005: &u128;
    let _1006: &u128;
    let mut _1007: error::ErrorCode;
    let mut _1008: isize;
    let mut _1010: !;
    let mut _1011: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1013: ();
    let mut _1014: &mut state::user::User;
    let mut _1015: &mut state::user::User;
    let mut _1016: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1017: u64;
    let _1018: ();
    let mut _1019: &mut state::user::User;
    let mut _1020: &mut state::user::User;
    let mut _1021: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1022: u64;
    let mut _1025: &state::user::User;
    let mut _1026: &std::cell::RefMut<'_, state::user::User>;
    let mut _1027: u32;
    let mut _1028: std::option::Option<u32>;
    let mut _1029: std::option::Option<u32>;
    let mut _1030: u32;
    let mut _1031: std::option::Option<u32>;
    let mut _1032: &mut state::user::User;
    let mut _1033: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1035: u64;
    let mut _1036: u64;
    let mut _1037: u32;
    let mut _1038: u16;
    let mut _1039: state::user::OrderStatus;
    let mut _1040: state::user::OrderType;
    let mut _1041: state::user::MarketType;
    let mut _1042: u64;
    let mut _1043: i64;
    let mut _1044: controller::position::PositionDirection;
    let mut _1045: controller::position::PositionDirection;
    let mut _1046: &controller::position::PositionDirection;
    let mut _1047: state::user::Order;
    let _1048: ();
    let mut _1049: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1050: std::result::Result<(), error::ErrorCode>;
    let mut _1051: state::events::OrderRecord;
    let mut _1052: i64;
    let mut _1053: anchor_lang::prelude::Pubkey;
    let mut _1054: state::user::Order;
    let mut _1055: isize;
    let mut _1057: !;
    let mut _1058: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1062: &state::user::User;
    let mut _1063: &std::cell::RefMut<'_, state::user::User>;
    let mut _1064: u32;
    let mut _1065: std::option::Option<u32>;
    let mut _1066: std::option::Option<u32>;
    let mut _1067: u32;
    let mut _1068: std::option::Option<u32>;
    let mut _1069: &mut state::user::User;
    let mut _1070: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1072: u64;
    let mut _1073: u64;
    let mut _1074: u32;
    let mut _1075: u16;
    let mut _1076: state::user::OrderStatus;
    let mut _1077: state::user::OrderType;
    let mut _1078: state::user::MarketType;
    let mut _1079: u64;
    let mut _1080: i64;
    let mut _1081: controller::position::PositionDirection;
    let mut _1082: &controller::position::PositionDirection;
    let mut _1083: controller::position::PositionDirection;
    let mut _1084: state::user::Order;
    let _1085: ();
    let mut _1086: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1087: std::result::Result<(), error::ErrorCode>;
    let mut _1088: state::events::OrderRecord;
    let mut _1089: i64;
    let mut _1090: anchor_lang::prelude::Pubkey;
    let mut _1091: state::user::Order;
    let mut _1092: isize;
    let mut _1094: !;
    let mut _1095: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1099: &state::perp_market::PerpMarket;
    let mut _1100: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1101: u64;
    let mut _1102: std::option::Option<u64>;
    let mut _1103: std::option::Option<u64>;
    let mut _1104: u64;
    let mut _1105: std::option::Option<u64>;
    let mut _1106: &mut state::perp_market::PerpMarket;
    let mut _1107: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1109: i64;
    let mut _1110: state::events::OrderAction;
    let mut _1111: state::events::OrderActionExplanation;
    let mut _1112: u16;
    let mut _1113: state::user::MarketType;
    let mut _1114: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _1115: std::option::Option<u64>;
    let mut _1116: std::option::Option<u64>;
    let mut _1117: u64;
    let mut _1118: std::option::Option<u64>;
    let mut _1119: u64;
    let mut _1120: std::option::Option<u64>;
    let mut _1121: u64;
    let mut _1122: std::option::Option<u64>;
    let mut _1123: std::option::Option<i64>;
    let mut _1124: std::option::Option<u32>;
    let mut _1125: std::option::Option<i64>;
    let mut _1126: std::option::Option<u64>;
    let mut _1127: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _1128: anchor_lang::prelude::Pubkey;
    let mut _1129: std::option::Option<u32>;
    let mut _1130: u32;
    let mut _1131: std::option::Option<controller::position::PositionDirection>;
    let mut _1132: controller::position::PositionDirection;
    let mut _1133: &controller::position::PositionDirection;
    let mut _1134: std::option::Option<u64>;
    let mut _1135: u64;
    let mut _1136: std::option::Option<u64>;
    let mut _1137: u64;
    let mut _1138: std::option::Option<u64>;
    let mut _1139: u64;
    let mut _1140: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _1141: anchor_lang::prelude::Pubkey;
    let mut _1142: std::option::Option<u32>;
    let mut _1143: u32;
    let mut _1144: std::option::Option<controller::position::PositionDirection>;
    let mut _1145: controller::position::PositionDirection;
    let mut _1146: std::option::Option<u64>;
    let mut _1147: u64;
    let mut _1148: std::option::Option<u64>;
    let mut _1149: u64;
    let mut _1150: std::option::Option<u64>;
    let mut _1151: u64;
    let mut _1152: i64;
    let mut _1153: std::option::Option<u64>;
    let mut _1154: std::option::Option<u64>;
    let mut _1155: std::option::Option<u64>;
    let mut _1156: std::option::Option<u64>;
    let mut _1157: std::option::Option<u64>;
    let _1158: ();
    let mut _1159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1160: std::result::Result<(), error::ErrorCode>;
    let mut _1161: state::events::OrderActionRecord;
    let mut _1162: isize;
    let mut _1164: !;
    let mut _1165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1167: ();
    let mut _1181: &mut instructions::user::TransferPerpPosition<'_>;
    let mut _1182: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1183: &mut instructions::user::TransferPerpPosition<'_>;
    let mut _1184: &mut instructions::user::TransferPerpPosition<'_>;
    let mut _1185: &mut instructions::user::TransferPerpPosition<'_>;
    let mut _1186: &mut instructions::user::TransferPerpPosition<'_>;
    let mut _1187: &mut instructions::user::TransferPerpPosition<'_>;
    let mut _1188: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1189: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1190: &mut instructions::user::TransferPerpPosition<'_>;
    let mut _1191: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1192: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1193: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1194: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1195: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1196: bool;
    let mut _1197: bool;
    let mut _1198: isize;
    let mut _1199: isize;
    let mut _1200: isize;
    let mut _1201: isize;
    let mut _1202: isize;
    let mut _1203: isize;
    let mut _1204: isize;
    let mut _1205: isize;
    let mut _1206: isize;
    let mut _1207: isize;
    let mut _1208: isize;
    let mut _1209: isize;
    let mut _1210: isize;
    let mut _1211: isize;
    let mut _1212: isize;
    let mut _1213: isize;
    let mut _1214: isize;
    let mut _1215: isize;
    let mut _1216: isize;
    let mut _1217: isize;
    let mut _1218: isize;
    let mut _1219: isize;
    let mut _1220: isize;
    let mut _1221: isize;
    let mut _1222: isize;
    let mut _1223: isize;
    let mut _1224: isize;
    let mut _1225: isize;
    let mut _1226: isize;
    let mut _1227: isize;
    let mut _1228: isize;
    let mut _1229: isize;
    let mut _1230: isize;
    let mut _1231: isize;
    let mut _1232: isize;
    let mut _1233: isize;
    let mut _1234: isize;
    let mut _1235: isize;
    let mut _1236: isize;
    let mut _1237: isize;
    let mut _1238: isize;
    let mut _1239: isize;
    let mut _1240: isize;
    let mut _1241: isize;
    let mut _1242: isize;
    let mut _1243: isize;
    let mut _1244: isize;
    let mut _1245: isize;
    let mut _1246: isize;
    let mut _1247: isize;
    let mut _1248: isize;
    let mut _1249: isize;
    let mut _1250: isize;
    let mut _1251: isize;
    let mut _1252: isize;
    let mut _1253: isize;
    let mut _1254: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1255: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1256: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug to_user_key => _14;
        let _16: anchor_lang::prelude::Pubkey;
        scope 6 {
            debug from_user_key => _16;
            let _18: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 7 {
                debug state => _18;
                let _19: anchor_lang::prelude::Clock;
                let _23: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _26: anchor_lang::prelude::Clock;
                scope 8 {
                    debug clock => _19;
                    let _27: u64;
                    scope 13 {
                        debug slot => _27;
                        let mut _28: &mut std::cell::RefMut<'_, state::user::User>;
                        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _39: std::cell::RefMut<'_, state::user::User>;
                        scope 14 {
                            debug to_user => _28;
                            let mut _40: &mut std::cell::RefMut<'_, state::user::User>;
                            let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _51: std::cell::RefMut<'_, state::user::User>;
                            scope 19 {
                                debug from_user => _40;
                                let _52: anchor_lang::prelude::Clock;
                                let _56: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _59: anchor_lang::prelude::Clock;
                                scope 24 {
                                    debug clock => _52;
                                    let _60: i64;
                                    scope 29 {
                                        debug now => _60;
                                        let _69: error::ErrorCode;
                                        let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _97: ();
                                        let _106: error::ErrorCode;
                                        let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _134: ();
                                        let _142: error::ErrorCode;
                                        let _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _170: ();
                                        let _171: state::perp_market_map::PerpMarketMap<'_>;
                                        let _172: state::spot_market_map::SpotMarketMap<'_>;
                                        let mut _173: state::oracle_map::OracleMap<'_>;
                                        let _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _198: instructions::optional_accounts::AccountMaps<'_>;
                                        scope 30 {
                                            debug error_code => _69;
                                            let _76: std::string::String;
                                            let mut _1180: &[&str; 2];
                                            scope 31 {
                                                debug res => _76;
                                            }
                                        }
                                        scope 32 {
                                            debug residual => _94;
                                            scope 33 {
                                            }
                                        }
                                        scope 34 {
                                            debug val => _97;
                                            scope 35 {
                                            }
                                        }
                                        scope 36 {
                                            debug error_code => _106;
                                            let _113: std::string::String;
                                            let mut _1179: &[&str; 2];
                                            scope 37 {
                                                debug res => _113;
                                            }
                                        }
                                        scope 38 {
                                            debug residual => _131;
                                            scope 39 {
                                            }
                                        }
                                        scope 40 {
                                            debug val => _134;
                                            scope 41 {
                                            }
                                        }
                                        scope 42 {
                                            debug error_code => _142;
                                            let _149: std::string::String;
                                            let mut _1178: &[&str; 2];
                                            scope 43 {
                                                debug res => _149;
                                            }
                                        }
                                        scope 44 {
                                            debug residual => _167;
                                            scope 45 {
                                            }
                                        }
                                        scope 46 {
                                            debug val => _170;
                                            scope 47 {
                                            }
                                        }
                                        scope 48 {
                                            debug perp_market_map => _171;
                                            debug spot_market_map => _172;
                                            debug oracle_map => _173;
                                            let _214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _217: i128;
                                            let _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _240: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                            let _243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _246: ();
                                            let _266: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _269: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                            let _272: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _275: ();
                                            let _276: u128;
                                            scope 53 {
                                                debug residual => _214;
                                                scope 54 {
                                                }
                                            }
                                            scope 55 {
                                                debug val => _217;
                                                scope 56 {
                                                }
                                            }
                                            scope 57 {
                                                debug residual => _237;
                                                scope 58 {
                                                }
                                            }
                                            scope 59 {
                                                debug val => _240;
                                                scope 60 {
                                                }
                                            }
                                            scope 61 {
                                                debug residual => _243;
                                                scope 62 {
                                                }
                                            }
                                            scope 63 {
                                                debug val => _246;
                                                scope 64 {
                                                }
                                            }
                                            scope 65 {
                                                debug residual => _266;
                                                scope 66 {
                                                }
                                            }
                                            scope 67 {
                                                debug val => _269;
                                                scope 68 {
                                                }
                                            }
                                            scope 69 {
                                                debug residual => _272;
                                                scope 70 {
                                                }
                                            }
                                            scope 71 {
                                                debug val => _275;
                                                scope 72 {
                                                }
                                            }
                                            scope 73 {
                                                debug oi_before => _276;
                                                let _277: i64;
                                                scope 74 {
                                                    debug oracle_price => _277;
                                                    let _278: u64;
                                                    scope 75 {
                                                        debug step_size => _278;
                                                        let _279: u64;
                                                        scope 76 {
                                                            debug tick_size => _279;
                                                            let _281: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                            let _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _291: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                            let _421: i64;
                                                            let _422: controller::position::PositionDirection;
                                                            let _562: &mut state::user::PerpPosition;
                                                            let _570: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _573: &mut state::user::PerpPosition;
                                                            scope 77 {
                                                                debug perp_market => _281;
                                                                let _296: &state::oracle::OraclePriceData;
                                                                let _297: math::oracle::OracleValidity;
                                                                let _320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _323: u64;
                                                                let _328: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _331: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
                                                                scope 82 {
                                                                    debug oracle_price_data => _296;
                                                                    debug oracle_validity => _297;
                                                                    let _348: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _351: bool;
                                                                    let _353: error::ErrorCode;
                                                                    let _378: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _381: ();
                                                                    let _391: error::ErrorCode;
                                                                    let _416: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _419: ();
                                                                    scope 91 {
                                                                        debug residual => _348;
                                                                        scope 92 {
                                                                        }
                                                                    }
                                                                    scope 93 {
                                                                        debug val => _351;
                                                                        scope 94 {
                                                                        }
                                                                    }
                                                                    scope 95 {
                                                                        debug error_code => _353;
                                                                        let _360: std::string::String;
                                                                        let mut _1177: &[&str; 2];
                                                                        scope 96 {
                                                                            debug res => _360;
                                                                        }
                                                                    }
                                                                    scope 97 {
                                                                        debug residual => _378;
                                                                        scope 98 {
                                                                        }
                                                                    }
                                                                    scope 99 {
                                                                        debug val => _381;
                                                                        scope 100 {
                                                                        }
                                                                    }
                                                                    scope 101 {
                                                                        debug error_code => _391;
                                                                        let _398: std::string::String;
                                                                        let mut _1176: &[&str; 2];
                                                                        scope 102 {
                                                                            debug res => _398;
                                                                        }
                                                                    }
                                                                    scope 103 {
                                                                        debug residual => _416;
                                                                        scope 104 {
                                                                        }
                                                                    }
                                                                    scope 105 {
                                                                        debug val => _419;
                                                                        scope 106 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 83 {
                                                                    debug residual => _320;
                                                                    scope 84 {
                                                                    }
                                                                }
                                                                scope 85 {
                                                                    debug val => _323;
                                                                    scope 86 {
                                                                    }
                                                                }
                                                                scope 87 {
                                                                    debug residual => _328;
                                                                    scope 88 {
                                                                    }
                                                                }
                                                                scope 89 {
                                                                    debug val => _331;
                                                                    scope 90 {
                                                                    }
                                                                }
                                                            }
                                                            scope 78 {
                                                                debug residual => _288;
                                                                scope 79 {
                                                                }
                                                            }
                                                            scope 80 {
                                                                debug val => _291;
                                                                scope 81 {
                                                                }
                                                            }
                                                            scope 107 {
                                                                debug transfer_amount => _421;
                                                                debug direction_to_close => _422;
                                                                let _612: i64;
                                                                let _621: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _624: i64;
                                                                let _627: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _630: i64;
                                                                scope 148 {
                                                                    debug transfer_price => _612;
                                                                    let _631: u64;
                                                                    let _642: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _645: i128;
                                                                    let _648: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _651: u128;
                                                                    let _653: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _656: u64;
                                                                    scope 157 {
                                                                        debug base_asset_value => _631;
                                                                        let _657: u64;
                                                                        scope 170 {
                                                                            debug transfer_amount_abs => _657;
                                                                            let _659: controller::position::PositionDelta;
                                                                            let _666: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _669: controller::position::PositionDelta;
                                                                            scope 171 {
                                                                                debug from_user_position_delta => _659;
                                                                                let _670: controller::position::PositionDelta;
                                                                                let _678: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _681: controller::position::PositionDelta;
                                                                                scope 176 {
                                                                                    debug to_user_position_delta => _670;
                                                                                    let _682: controller::position::PositionDirection;
                                                                                    let _692: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _695: controller::position::PositionDirection;
                                                                                    scope 181 {
                                                                                        debug to_user_existing_position_direction => _682;
                                                                                        let _696: std::option::Option<u64>;
                                                                                        let _697: std::option::Option<u64>;
                                                                                        let _698: std::option::Option<u64>;
                                                                                        let _699: std::option::Option<u64>;
                                                                                        let mut _701: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                        let _708: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _711: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                        scope 186 {
                                                                                            debug from_existing_quote_entry_amount => _696;
                                                                                            debug from_existing_base_asset_amount => _697;
                                                                                            debug to_existing_quote_entry_amount => _698;
                                                                                            debug to_existing_base_asset_amount => _699;
                                                                                            let _825: state::margin_calculation::MarginCalculation;
                                                                                            let _844: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _847: state::margin_calculation::MarginCalculation;
                                                                                            scope 228 {
                                                                                                debug from_user_margin_calculation => _825;
                                                                                                let _854: error::ErrorCode;
                                                                                                let _879: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _882: ();
                                                                                                let _883: state::margin_calculation::MarginCalculation;
                                                                                                let _904: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _907: state::margin_calculation::MarginCalculation;
                                                                                                scope 233 {
                                                                                                    debug error_code => _854;
                                                                                                    let _861: std::string::String;
                                                                                                    let mut _1171: &[&str; 2];
                                                                                                    scope 234 {
                                                                                                        debug res => _861;
                                                                                                    }
                                                                                                }
                                                                                                scope 235 {
                                                                                                    debug residual => _879;
                                                                                                    scope 236 {
                                                                                                    }
                                                                                                }
                                                                                                scope 237 {
                                                                                                    debug val => _882;
                                                                                                    scope 238 {
                                                                                                    }
                                                                                                }
                                                                                                scope 239 {
                                                                                                    debug to_user_margin_requirement => _883;
                                                                                                    let _914: error::ErrorCode;
                                                                                                    let _939: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _942: ();
                                                                                                    let mut _943: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                    let _950: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _953: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                    scope 244 {
                                                                                                        debug error_code => _914;
                                                                                                        let _921: std::string::String;
                                                                                                        let mut _1170: &[&str; 2];
                                                                                                        scope 245 {
                                                                                                            debug res => _921;
                                                                                                        }
                                                                                                    }
                                                                                                    scope 246 {
                                                                                                        debug residual => _939;
                                                                                                        scope 247 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 248 {
                                                                                                        debug val => _942;
                                                                                                        scope 249 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 250 {
                                                                                                        debug perp_market => _943;
                                                                                                        let _954: u128;
                                                                                                        scope 255 {
                                                                                                            debug oi_after => _954;
                                                                                                            let _965: error::ErrorCode;
                                                                                                            let _1009: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _1012: ();
                                                                                                            let _1023: u32;
                                                                                                            let _1024: u32;
                                                                                                            scope 256 {
                                                                                                                debug error_code => _965;
                                                                                                                let _972: std::string::String;
                                                                                                                let _991: std::string::String;
                                                                                                                let mut _1168: &[&str; 2];
                                                                                                                let mut _1169: &[&str; 2];
                                                                                                                scope 257 {
                                                                                                                    debug res => _972;
                                                                                                                }
                                                                                                                scope 258 {
                                                                                                                    debug res => _991;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 259 {
                                                                                                                debug residual => _1009;
                                                                                                                scope 260 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 261 {
                                                                                                                debug val => _1012;
                                                                                                                scope 262 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 263 {
                                                                                                                debug from_user_order_id => _1023;
                                                                                                                let _1034: state::user::Order;
                                                                                                                scope 265 {
                                                                                                                    debug from_user_order => _1034;
                                                                                                                    let _1056: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1059: ();
                                                                                                                    let _1060: u32;
                                                                                                                    let _1061: u32;
                                                                                                                    scope 266 {
                                                                                                                        debug residual => _1056;
                                                                                                                        scope 267 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 268 {
                                                                                                                        debug val => _1059;
                                                                                                                        scope 269 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 270 {
                                                                                                                        debug to_user_order_id => _1060;
                                                                                                                        let _1071: state::user::Order;
                                                                                                                        scope 272 {
                                                                                                                            debug to_user_order => _1071;
                                                                                                                            let _1093: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _1096: ();
                                                                                                                            let _1097: u64;
                                                                                                                            let _1098: u64;
                                                                                                                            scope 273 {
                                                                                                                                debug residual => _1093;
                                                                                                                                scope 274 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 275 {
                                                                                                                                debug val => _1096;
                                                                                                                                scope 276 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 277 {
                                                                                                                                debug fill_record_id => _1097;
                                                                                                                                let _1108: state::events::OrderActionRecord;
                                                                                                                                scope 279 {
                                                                                                                                    debug fill_record => _1108;
                                                                                                                                    let _1163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1166: ();
                                                                                                                                    scope 280 {
                                                                                                                                        debug residual => _1163;
                                                                                                                                        scope 281 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 282 {
                                                                                                                                        debug val => _1166;
                                                                                                                                        scope 283 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 278 {
                                                                                                                                debug current_id => _1098;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 271 {
                                                                                                                        debug current_id => _1061;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 264 {
                                                                                                                debug current_id => _1024;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 251 {
                                                                                                        debug residual => _950;
                                                                                                        scope 252 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 253 {
                                                                                                        debug val => _953;
                                                                                                        scope 254 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 240 {
                                                                                                    debug residual => _904;
                                                                                                    scope 241 {
                                                                                                    }
                                                                                                }
                                                                                                scope 242 {
                                                                                                    debug val => _907;
                                                                                                    scope 243 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 229 {
                                                                                                debug residual => _844;
                                                                                                scope 230 {
                                                                                                }
                                                                                            }
                                                                                            scope 231 {
                                                                                                debug val => _847;
                                                                                                scope 232 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 187 {
                                                                                            debug market => _701;
                                                                                            let _712: &mut state::user::PerpPosition;
                                                                                            let _720: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _723: &mut state::user::PerpPosition;
                                                                                            scope 192 {
                                                                                                debug from_user_position => _712;
                                                                                                let _724: std::option::Option<u64>;
                                                                                                let _725: std::option::Option<u64>;
                                                                                                let _734: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _737: (std::option::Option<u64>, std::option::Option<u64>);
                                                                                                scope 197 {
                                                                                                    debug from_existing_quote_entry_amount => _724;
                                                                                                    debug from_existing_base_asset_amount => _725;
                                                                                                    let _749: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _752: i64;
                                                                                                    let _753: &mut state::user::PerpPosition;
                                                                                                    let _761: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _764: &mut state::user::PerpPosition;
                                                                                                    scope 202 {
                                                                                                        debug residual => _749;
                                                                                                        scope 203 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 204 {
                                                                                                        debug val => _752;
                                                                                                        scope 205 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 206 {
                                                                                                        debug to_user_position => _753;
                                                                                                        let _765: std::option::Option<u64>;
                                                                                                        let _766: std::option::Option<u64>;
                                                                                                        let _776: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _779: (std::option::Option<u64>, std::option::Option<u64>);
                                                                                                        scope 211 {
                                                                                                            debug to_existing_quote_entry_amount => _765;
                                                                                                            debug to_existing_base_asset_amount => _766;
                                                                                                            let _791: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _794: i64;
                                                                                                            let _804: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _807: ();
                                                                                                            let _817: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _820: ();
                                                                                                            scope 216 {
                                                                                                                debug residual => _791;
                                                                                                                scope 217 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 218 {
                                                                                                                debug val => _794;
                                                                                                                scope 219 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 220 {
                                                                                                                debug residual => _804;
                                                                                                                scope 221 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 222 {
                                                                                                                debug val => _807;
                                                                                                                scope 223 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 224 {
                                                                                                                debug residual => _817;
                                                                                                                scope 225 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 226 {
                                                                                                                debug val => _820;
                                                                                                                scope 227 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 212 {
                                                                                                            debug residual => _776;
                                                                                                            scope 213 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 214 {
                                                                                                            debug val => _779;
                                                                                                            scope 215 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 207 {
                                                                                                        debug residual => _761;
                                                                                                        scope 208 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 209 {
                                                                                                        debug val => _764;
                                                                                                        scope 210 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 198 {
                                                                                                    debug residual => _734;
                                                                                                    scope 199 {
                                                                                                    }
                                                                                                }
                                                                                                scope 200 {
                                                                                                    debug val => _737;
                                                                                                    scope 201 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 193 {
                                                                                                debug residual => _720;
                                                                                                scope 194 {
                                                                                                }
                                                                                            }
                                                                                            scope 195 {
                                                                                                debug val => _723;
                                                                                                scope 196 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 188 {
                                                                                            debug residual => _708;
                                                                                            scope 189 {
                                                                                            }
                                                                                        }
                                                                                        scope 190 {
                                                                                            debug val => _711;
                                                                                            scope 191 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 182 {
                                                                                        debug residual => _692;
                                                                                        scope 183 {
                                                                                        }
                                                                                    }
                                                                                    scope 184 {
                                                                                        debug val => _695;
                                                                                        scope 185 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 177 {
                                                                                    debug residual => _678;
                                                                                    scope 178 {
                                                                                    }
                                                                                }
                                                                                scope 179 {
                                                                                    debug val => _681;
                                                                                    scope 180 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 172 {
                                                                                debug residual => _666;
                                                                                scope 173 {
                                                                                }
                                                                            }
                                                                            scope 174 {
                                                                                debug val => _669;
                                                                                scope 175 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 158 {
                                                                        debug residual => _642;
                                                                        scope 159 {
                                                                        }
                                                                    }
                                                                    scope 160 {
                                                                        debug val => _645;
                                                                        scope 161 {
                                                                        }
                                                                    }
                                                                    scope 162 {
                                                                        debug residual => _648;
                                                                        scope 163 {
                                                                        }
                                                                    }
                                                                    scope 164 {
                                                                        debug val => _651;
                                                                        scope 165 {
                                                                        }
                                                                    }
                                                                    scope 166 {
                                                                        debug residual => _653;
                                                                        scope 167 {
                                                                        }
                                                                    }
                                                                    scope 168 {
                                                                        debug val => _656;
                                                                        scope 169 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 149 {
                                                                    debug residual => _621;
                                                                    scope 150 {
                                                                    }
                                                                }
                                                                scope 151 {
                                                                    debug val => _624;
                                                                    scope 152 {
                                                                    }
                                                                }
                                                                scope 153 {
                                                                    debug residual => _627;
                                                                    scope 154 {
                                                                    }
                                                                }
                                                                scope 155 {
                                                                    debug val => _630;
                                                                    scope 156 {
                                                                    }
                                                                }
                                                            }
                                                            scope 108 {
                                                                debug amount => _425;
                                                                let _425: i64;
                                                                let _426: &mut state::user::PerpPosition;
                                                                let _434: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _437: &mut state::user::PerpPosition;
                                                                scope 109 {
                                                                    debug existing_position => _426;
                                                                    let _438: i64;
                                                                    scope 114 {
                                                                        debug existing_base_asset_amount => _438;
                                                                        let _448: error::ErrorCode;
                                                                        let _473: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _476: ();
                                                                        let _486: error::ErrorCode;
                                                                        let _511: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _514: ();
                                                                        let _525: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _528: bool;
                                                                        let _530: error::ErrorCode;
                                                                        let _555: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _558: ();
                                                                        scope 115 {
                                                                            debug error_code => _448;
                                                                            let _455: std::string::String;
                                                                            let mut _1175: &[&str; 2];
                                                                            scope 116 {
                                                                                debug res => _455;
                                                                            }
                                                                        }
                                                                        scope 117 {
                                                                            debug residual => _473;
                                                                            scope 118 {
                                                                            }
                                                                        }
                                                                        scope 119 {
                                                                            debug val => _476;
                                                                            scope 120 {
                                                                            }
                                                                        }
                                                                        scope 121 {
                                                                            debug error_code => _486;
                                                                            let _493: std::string::String;
                                                                            let mut _1174: &[&str; 2];
                                                                            scope 122 {
                                                                                debug res => _493;
                                                                            }
                                                                        }
                                                                        scope 123 {
                                                                            debug residual => _511;
                                                                            scope 124 {
                                                                            }
                                                                        }
                                                                        scope 125 {
                                                                            debug val => _514;
                                                                            scope 126 {
                                                                            }
                                                                        }
                                                                        scope 127 {
                                                                            debug residual => _525;
                                                                            scope 128 {
                                                                            }
                                                                        }
                                                                        scope 129 {
                                                                            debug val => _528;
                                                                            scope 130 {
                                                                            }
                                                                        }
                                                                        scope 131 {
                                                                            debug error_code => _530;
                                                                            let _537: std::string::String;
                                                                            let mut _1173: &[&str; 2];
                                                                            scope 132 {
                                                                                debug res => _537;
                                                                            }
                                                                        }
                                                                        scope 133 {
                                                                            debug residual => _555;
                                                                            scope 134 {
                                                                            }
                                                                        }
                                                                        scope 135 {
                                                                            debug val => _558;
                                                                            scope 136 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 110 {
                                                                    debug residual => _434;
                                                                    scope 111 {
                                                                    }
                                                                }
                                                                scope 112 {
                                                                    debug val => _437;
                                                                    scope 113 {
                                                                    }
                                                                }
                                                            }
                                                            scope 137 {
                                                                debug position => _562;
                                                                let _580: error::ErrorCode;
                                                                let _605: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _608: ();
                                                                scope 142 {
                                                                    debug error_code => _580;
                                                                    let _587: std::string::String;
                                                                    let mut _1172: &[&str; 2];
                                                                    scope 143 {
                                                                        debug res => _587;
                                                                    }
                                                                }
                                                                scope 144 {
                                                                    debug residual => _605;
                                                                    scope 145 {
                                                                    }
                                                                }
                                                                scope 146 {
                                                                    debug val => _608;
                                                                    scope 147 {
                                                                    }
                                                                }
                                                            }
                                                            scope 138 {
                                                                debug residual => _570;
                                                                scope 139 {
                                                                }
                                                            }
                                                            scope 140 {
                                                                debug val => _573;
                                                                scope 141 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 49 {
                                            debug residual => _195;
                                            scope 50 {
                                            }
                                        }
                                        scope 51 {
                                            debug val => _198;
                                            scope 52 {
                                            }
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _56;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _59;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _48;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _51;
                                scope 23 {
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _36;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _39;
                            scope 18 {
                            }
                        }
                    }
                }
                scope 9 {
                    debug residual => _23;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _26;
                    scope 12 {
                    }
                }
            }
        }
    }

    bb0: {
        _1197 = const false;
        _1196 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _1181 = deref_copy (_1.1: &mut instructions::user::TransferPerpPosition<'_>);
        _8 = &((*_1181).4: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _1182 = deref_copy (*_8);
        _1254 = (((_1182.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _7 = &(*_1254);
        _6 = constraints::fill_not_paused(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb551];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _1198 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        _1183 = deref_copy (_1.1: &mut instructions::user::TransferPerpPosition<'_>);
        _15 = &((*_1183).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _14 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb566];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _1240 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb524;
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _1184 = deref_copy (_1.1: &mut instructions::user::TransferPerpPosition<'_>);
        _17 = &((*_1184).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _16 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        StorageLive(_18);
        _1185 = deref_copy (_1.1: &mut instructions::user::TransferPerpPosition<'_>);
        _18 = &((*_1185).4: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb9, unwind continue];
    }

    bb9: {
        _20 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _21) -> [return: bb10, unwind: bb551];
    }

    bb10: {
        StorageDead(_21);
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_26);
        _26 = move ((_20 as Continue).0: anchor_lang::prelude::Clock);
        _19 = move _26;
        StorageDead(_26);
        _1200 = discriminant(_20);
        StorageDead(_20);
        StorageLive(_27);
        _27 = (_19.0: u64);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _1186 = deref_copy (_1.1: &mut instructions::user::TransferPerpPosition<'_>);
        _33 = &((*_1186).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _32 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _33) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_23);
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_25);
        _25 = move _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _25) -> [return: bb13, unwind: bb565];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_23);
        _1238 = discriminant(_20);
        StorageDead(_20);
        goto -> bb523;
    }

    bb14: {
        StorageDead(_33);
        StorageLive(_34);
        _34 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _31 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _32, move _34) -> [return: bb15, unwind: bb551];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_32);
        _30 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _31) -> [return: bb16, unwind: bb551];
    }

    bb16: {
        StorageDead(_31);
        _35 = discriminant(_30);
        switchInt(move _35) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_39);
        _39 = move ((_30 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _29 = move _39;
        StorageDead(_39);
        _28 = &mut _29;
        _1204 = discriminant(_30);
        StorageDead(_30);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _1187 = deref_copy (_1.1: &mut instructions::user::TransferPerpPosition<'_>);
        _45 = &((*_1187).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _44 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _45) -> [return: bb20, unwind: bb550];
    }

    bb18: {
        StorageLive(_36);
        _36 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb19, unwind: bb564];
    }

    bb19: {
        StorageDead(_38);
        StorageDead(_36);
        _1202 = discriminant(_30);
        StorageDead(_30);
        goto -> bb522;
    }

    bb20: {
        StorageDead(_45);
        StorageLive(_46);
        _46 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _43 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _44, move _46) -> [return: bb21, unwind: bb550];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_44);
        _42 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _43) -> [return: bb22, unwind: bb550];
    }

    bb22: {
        StorageDead(_43);
        _47 = discriminant(_42);
        switchInt(move _47) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_51);
        _51 = move ((_42 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _41 = move _51;
        StorageDead(_51);
        _40 = &mut _41;
        _1208 = discriminant(_42);
        StorageDead(_42);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb26, unwind: bb549];
    }

    bb24: {
        StorageLive(_48);
        _48 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb25, unwind: bb563];
    }

    bb25: {
        StorageDead(_50);
        StorageDead(_48);
        _1206 = discriminant(_42);
        StorageDead(_42);
        goto -> bb521;
    }

    bb26: {
        _53 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _54) -> [return: bb27, unwind: bb549];
    }

    bb27: {
        StorageDead(_54);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_59);
        _59 = move ((_53 as Continue).0: anchor_lang::prelude::Clock);
        _52 = move _59;
        StorageDead(_59);
        _1210 = discriminant(_53);
        StorageDead(_53);
        StorageLive(_60);
        _60 = (_52.4: i64);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &(*_28);
        _66 = <RefMut<'_, User> as Deref>::deref(move _67) -> [return: bb31, unwind: bb549];
    }

    bb29: {
        StorageLive(_56);
        _56 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_58);
        _58 = move _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _58) -> [return: bb30, unwind: bb562];
    }

    bb30: {
        StorageDead(_58);
        StorageDead(_56);
        _1236 = discriminant(_53);
        StorageDead(_53);
        goto -> bb520;
    }

    bb31: {
        _65 = &(*_66);
        StorageDead(_67);
        _64 = User::is_bankrupt(move _65) -> [return: bb32, unwind: bb549];
    }

    bb32: {
        switchInt(move _64) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_65);
        StorageDead(_66);
        StorageLive(_69);
        _69 = error::ErrorCode::UserBankrupt;
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _1180 = const _;
        _80 = &(*_1180);
        _79 = &(*_80);
        _78 = move _79 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_79);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_69;
        _87 = &(*_88);
        _86 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _87) -> [return: bb35, unwind: bb549];
    }

    bb34: {
        StorageDead(_65);
        StorageDead(_66);
        StorageLive(_68);
        _68 = ();
        _63 = std::result::Result::<(), error::ErrorCode>::Ok(move _68);
        StorageDead(_68);
        goto -> bb42;
    }

    bb35: {
        StorageDead(_87);
        _85 = [move _86];
        StorageDead(_86);
        _84 = &_85;
        _83 = &(*_84);
        _82 = move _83 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_83);
        _77 = Arguments::<'_>::new_v1(move _78, move _82) -> [return: bb36, unwind: bb549];
    }

    bb36: {
        StorageDead(_82);
        StorageDead(_78);
        _76 = format(move _77) -> [return: bb37, unwind: bb549];
    }

    bb37: {
        StorageDead(_77);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_80);
        _75 = move _76;
        StorageDead(_76);
        _74 = &_75;
        _73 = &(*_74);
        _72 = <String as Deref>::deref(move _73) -> [return: bb38, unwind: bb548];
    }

    bb38: {
        _71 = &(*_72);
        StorageDead(_73);
        _70 = solana_program::log::sol_log(move _71) -> [return: bb39, unwind: bb548];
    }

    bb39: {
        StorageDead(_71);
        drop(_75) -> [return: bb40, unwind: bb549];
    }

    bb40: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = const "to_user bankrupt";
        _90 = &(*_91);
        _89 = solana_program::log::sol_log(move _90) -> [return: bb41, unwind: bb549];
    }

    bb41: {
        StorageDead(_90);
        StorageDead(_91);
        StorageDead(_89);
        StorageLive(_92);
        _92 = _69;
        _63 = std::result::Result::<(), error::ErrorCode>::Err(move _92);
        StorageDead(_92);
        StorageDead(_69);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_64);
        _62 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _63) -> [return: bb43, unwind: bb549];
    }

    bb43: {
        StorageDead(_63);
        _93 = discriminant(_62);
        switchInt(move _93) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_97);
        _97 = ((_62 as Continue).0: ());
        _61 = _97;
        StorageDead(_97);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &(*_40);
        _103 = <RefMut<'_, User> as Deref>::deref(move _104) -> [return: bb47, unwind: bb549];
    }

    bb45: {
        StorageLive(_94);
        _94 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb46, unwind: bb549];
    }

    bb46: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb519;
    }

    bb47: {
        _102 = &(*_103);
        StorageDead(_104);
        _101 = User::is_bankrupt(move _102) -> [return: bb48, unwind: bb549];
    }

    bb48: {
        switchInt(move _101) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        StorageDead(_102);
        StorageDead(_103);
        StorageLive(_106);
        _106 = error::ErrorCode::UserBankrupt;
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _1179 = const _;
        _117 = &(*_1179);
        _116 = &(*_117);
        _115 = move _116 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_106;
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _124) -> [return: bb51, unwind: bb549];
    }

    bb50: {
        StorageDead(_102);
        StorageDead(_103);
        StorageLive(_105);
        _105 = ();
        _100 = std::result::Result::<(), error::ErrorCode>::Ok(move _105);
        StorageDead(_105);
        goto -> bb58;
    }

    bb51: {
        StorageDead(_124);
        _122 = [move _123];
        StorageDead(_123);
        _121 = &_122;
        _120 = &(*_121);
        _119 = move _120 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_120);
        _114 = Arguments::<'_>::new_v1(move _115, move _119) -> [return: bb52, unwind: bb549];
    }

    bb52: {
        StorageDead(_119);
        StorageDead(_115);
        _113 = format(move _114) -> [return: bb53, unwind: bb549];
    }

    bb53: {
        StorageDead(_114);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_117);
        _112 = move _113;
        StorageDead(_113);
        _111 = &_112;
        _110 = &(*_111);
        _109 = <String as Deref>::deref(move _110) -> [return: bb54, unwind: bb547];
    }

    bb54: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = solana_program::log::sol_log(move _108) -> [return: bb55, unwind: bb547];
    }

    bb55: {
        StorageDead(_108);
        drop(_112) -> [return: bb56, unwind: bb549];
    }

    bb56: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = const "from_user bankrupt";
        _127 = &(*_128);
        _126 = solana_program::log::sol_log(move _127) -> [return: bb57, unwind: bb549];
    }

    bb57: {
        StorageDead(_127);
        StorageDead(_128);
        StorageDead(_126);
        StorageLive(_129);
        _129 = _106;
        _100 = std::result::Result::<(), error::ErrorCode>::Err(move _129);
        StorageDead(_129);
        StorageDead(_106);
        goto -> bb58;
    }

    bb58: {
        StorageDead(_101);
        _99 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _100) -> [return: bb59, unwind: bb549];
    }

    bb59: {
        StorageDead(_100);
        _130 = discriminant(_99);
        switchInt(move _130) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_134);
        _134 = ((_99 as Continue).0: ());
        _98 = _134;
        StorageDead(_134);
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_16;
        StorageLive(_140);
        _140 = &_14;
        _138 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _139, move _140) -> [return: bb63, unwind: bb549];
    }

    bb61: {
        StorageLive(_131);
        _131 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb62, unwind: bb549];
    }

    bb62: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb519;
    }

    bb63: {
        switchInt(move _138) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_141);
        _141 = ();
        _137 = std::result::Result::<(), error::ErrorCode>::Ok(move _141);
        StorageDead(_141);
        goto -> bb73;
    }

    bb65: {
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_142);
        _142 = error::ErrorCode::CantTransferBetweenSameUserAccount;
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _1178 = const _;
        _153 = &(*_1178);
        _152 = &(*_153);
        _151 = move _152 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_152);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_142;
        _160 = &(*_161);
        _159 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _160) -> [return: bb66, unwind: bb549];
    }

    bb66: {
        StorageDead(_160);
        _158 = [move _159];
        StorageDead(_159);
        _157 = &_158;
        _156 = &(*_157);
        _155 = move _156 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_156);
        _150 = Arguments::<'_>::new_v1(move _151, move _155) -> [return: bb67, unwind: bb549];
    }

    bb67: {
        StorageDead(_155);
        StorageDead(_151);
        _149 = format(move _150) -> [return: bb68, unwind: bb549];
    }

    bb68: {
        StorageDead(_150);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_153);
        _148 = move _149;
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = <String as Deref>::deref(move _146) -> [return: bb69, unwind: bb546];
    }

    bb69: {
        _144 = &(*_145);
        StorageDead(_146);
        _143 = solana_program::log::sol_log(move _144) -> [return: bb70, unwind: bb546];
    }

    bb70: {
        StorageDead(_144);
        drop(_148) -> [return: bb71, unwind: bb549];
    }

    bb71: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_143);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = const "cant transfer between the same user account";
        _163 = &(*_164);
        _162 = solana_program::log::sol_log(move _163) -> [return: bb72, unwind: bb549];
    }

    bb72: {
        StorageDead(_163);
        StorageDead(_164);
        StorageDead(_162);
        StorageLive(_165);
        _165 = _142;
        _137 = std::result::Result::<(), error::ErrorCode>::Err(move _165);
        StorageDead(_165);
        StorageDead(_142);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_138);
        _136 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _137) -> [return: bb74, unwind: bb549];
    }

    bb74: {
        StorageDead(_137);
        _166 = discriminant(_136);
        switchInt(move _166) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_170);
        _170 = ((_136 as Continue).0: ());
        _135 = _170;
        StorageDead(_170);
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _1188 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _181 = &(*_1188);
        _180 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _181) -> [return: bb78, unwind: bb549];
    }

    bb76: {
        StorageLive(_167);
        _167 = ((_136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_169);
        _169 = _167;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _169) -> [return: bb77, unwind: bb549];
    }

    bb77: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb519;
    }

    bb78: {
        StorageDead(_181);
        _179 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _180) -> [return: bb79, unwind: bb549];
    }

    bb79: {
        StorageDead(_180);
        _178 = &mut _179;
        _177 = &mut (*_178);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = _2;
        _184 = get_writable_perp_market_set(move _185) -> [return: bb80, unwind: bb549];
    }

    bb80: {
        StorageDead(_185);
        _183 = &_184;
        _182 = &(*_183);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = BTreeSet::<u16>::new() -> [return: bb81, unwind: bb545];
    }

    bb81: {
        _187 = &_188;
        _186 = &(*_187);
        StorageLive(_189);
        _189 = (_52.0: u64);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _1189 = deref_copy (*_18);
        _1255 = (((_1189.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _193 = &(*_1255);
        _192 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _193) -> [return: bb82, unwind: bb544];
    }

    bb82: {
        StorageDead(_193);
        _191 = ((*_192).7: state::state::OracleGuardRails);
        _190 = Option::<state::state::OracleGuardRails>::Some(move _191);
        StorageDead(_191);
        _176 = load_maps(move _177, move _182, move _186, move _189, move _190) -> [return: bb83, unwind: bb544];
    }

    bb83: {
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_182);
        StorageDead(_177);
        _175 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _176) -> [return: bb84, unwind: bb544];
    }

    bb84: {
        StorageDead(_176);
        _194 = discriminant(_175);
        switchInt(move _194) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_198);
        _198 = move ((_175 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _174 = move _198;
        StorageDead(_198);
        StorageLive(_171);
        _171 = move (_174.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_172);
        _172 = move (_174.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_173);
        _173 = move (_174.2: state::oracle_map::OracleMap<'_>);
        _1214 = discriminant(_175);
        StorageDead(_192);
        drop(_188) -> [return: bb88, unwind: bb540];
    }

    bb86: {
        StorageLive(_195);
        _195 = ((_175 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_197);
        _197 = _195;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _197) -> [return: bb87, unwind: bb561];
    }

    bb87: {
        StorageDead(_197);
        StorageDead(_195);
        _1212 = discriminant(_175);
        StorageDead(_192);
        drop(_188) -> [return: bb517, unwind: bb545];
    }

    bb88: {
        StorageDead(_188);
        StorageDead(_187);
        drop(_184) -> [return: bb89, unwind: bb541];
    }

    bb89: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = _2;
        StorageLive(_203);
        StorageLive(_204);
        _204 = &_171;
        _203 = &(*_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &mut _173;
        _205 = &mut (*_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _1190 = deref_copy (_1.1: &mut instructions::user::TransferPerpPosition<'_>);
        _210 = &((*_1190).4: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _1191 = deref_copy (*_210);
        _1256 = (((_1191.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _209 = &(*_1256);
        _208 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _209) -> [return: bb90, unwind: bb541];
    }

    bb90: {
        _207 = &(*_208);
        StorageDead(_209);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_52;
        _211 = &(*_212);
        _201 = update_amm(move _202, move _203, move _205, move _207, move _211) -> [return: bb91, unwind: bb541];
    }

    bb91: {
        StorageDead(_211);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_202);
        _200 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _201) -> [return: bb92, unwind: bb541];
    }

    bb92: {
        StorageDead(_201);
        _213 = discriminant(_200);
        switchInt(move _213) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        StorageLive(_217);
        _217 = ((_200 as Continue).0: i128);
        _199 = _217;
        StorageDead(_217);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &mut _40;
        _1192 = deref_copy (*_224);
        _223 = &mut (*_1192);
        _222 = <RefMut<'_, User> as DerefMut>::deref_mut(move _223) -> [return: bb96, unwind: bb541];
    }

    bb94: {
        StorageLive(_214);
        _214 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_216);
        _216 = _214;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _216) -> [return: bb95, unwind: bb541];
    }

    bb95: {
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb513;
    }

    bb96: {
        _221 = &mut (*_222);
        StorageDead(_223);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &_16;
        _225 = &(*_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_171;
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_2;
        _234 = &(*_235);
        _232 = PerpMarketMap::<'_>::get_ref_mut(move _233, move _234) -> [return: bb97, unwind: bb541];
    }

    bb97: {
        StorageDead(_234);
        StorageDead(_233);
        _231 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _232) -> [return: bb98, unwind: bb541];
    }

    bb98: {
        _1197 = const true;
        StorageDead(_232);
        _236 = discriminant(_231);
        switchInt(move _236) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        StorageLive(_240);
        _240 = move ((_231 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _230 = move _240;
        StorageDead(_240);
        _229 = &mut _230;
        _228 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _229) -> [return: bb102, unwind: bb539];
    }

    bb100: {
        StorageLive(_237);
        _237 = ((_231 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_239);
        _239 = _237;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _239) -> [return: bb101, unwind: bb560];
    }

    bb101: {
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb555;
    }

    bb102: {
        _227 = &mut (*_228);
        StorageDead(_229);
        StorageLive(_241);
        _241 = _60;
        _220 = controller::funding::settle_funding_payment(move _221, move _225, move _227, move _241) -> [return: bb103, unwind: bb539];
    }

    bb103: {
        StorageDead(_241);
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_221);
        _219 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _220) -> [return: bb104, unwind: bb539];
    }

    bb104: {
        StorageDead(_220);
        _242 = discriminant(_219);
        switchInt(move _242) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        StorageLive(_246);
        _246 = ((_219 as Continue).0: ());
        _218 = _246;
        StorageDead(_246);
        drop(_230) -> [return: bb552, unwind: bb560];
    }

    bb106: {
        StorageLive(_243);
        _243 = ((_219 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_245);
        _245 = _243;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _245) -> [return: bb107, unwind: bb539];
    }

    bb107: {
        StorageDead(_245);
        StorageDead(_243);
        drop(_230) -> [return: bb555, unwind: bb560];
    }

    bb108: {
        _250 = &mut (*_251);
        StorageDead(_252);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &_14;
        _254 = &(*_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &_171;
        StorageLive(_263);
        StorageLive(_264);
        _264 = &_2;
        _263 = &(*_264);
        _261 = PerpMarketMap::<'_>::get_ref_mut(move _262, move _263) -> [return: bb109, unwind: bb541];
    }

    bb109: {
        StorageDead(_263);
        StorageDead(_262);
        _260 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _261) -> [return: bb110, unwind: bb541];
    }

    bb110: {
        _1196 = const true;
        StorageDead(_261);
        _265 = discriminant(_260);
        switchInt(move _265) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        StorageLive(_269);
        _269 = move ((_260 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _259 = move _269;
        StorageDead(_269);
        _258 = &mut _259;
        _257 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _258) -> [return: bb114, unwind: bb538];
    }

    bb112: {
        StorageLive(_266);
        _266 = ((_260 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_268);
        _268 = _266;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _268) -> [return: bb113, unwind: bb559];
    }

    bb113: {
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_250);
        StorageDead(_249);
        goto -> bb554;
    }

    bb114: {
        _256 = &mut (*_257);
        StorageDead(_258);
        StorageLive(_270);
        _270 = _60;
        _249 = controller::funding::settle_funding_payment(move _250, move _254, move _256, move _270) -> [return: bb115, unwind: bb538];
    }

    bb115: {
        StorageDead(_270);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_250);
        _248 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _249) -> [return: bb116, unwind: bb538];
    }

    bb116: {
        StorageDead(_249);
        _271 = discriminant(_248);
        switchInt(move _271) -> [0: bb117, 1: bb118, otherwise: bb4];
    }

    bb117: {
        StorageLive(_275);
        _275 = ((_248 as Continue).0: ());
        _247 = _275;
        StorageDead(_275);
        drop(_259) -> [return: bb553, unwind: bb559];
    }

    bb118: {
        StorageLive(_272);
        _272 = ((_248 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_274);
        _274 = _272;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _274) -> [return: bb119, unwind: bb538];
    }

    bb119: {
        StorageDead(_274);
        StorageDead(_272);
        drop(_259) -> [return: bb554, unwind: bb559];
    }

    bb120: {
        StorageDead(_285);
        StorageDead(_284);
        _282 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _283) -> [return: bb121, unwind: bb541];
    }

    bb121: {
        StorageDead(_283);
        _287 = discriminant(_282);
        switchInt(move _287) -> [0: bb122, 1: bb123, otherwise: bb4];
    }

    bb122: {
        StorageLive(_291);
        _291 = move ((_282 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _281 = move _291;
        StorageDead(_291);
        _1222 = discriminant(_282);
        StorageDead(_286);
        StorageDead(_282);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &_281;
        _294 = <Ref<'_, PerpMarket> as Deref>::deref(move _295) -> [return: bb125, unwind: bb537];
    }

    bb123: {
        StorageLive(_288);
        _288 = ((_282 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_290);
        _290 = _288;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _290) -> [return: bb124, unwind: bb558];
    }

    bb124: {
        StorageDead(_290);
        StorageDead(_288);
        _1220 = discriminant(_282);
        StorageDead(_286);
        StorageDead(_282);
        goto -> bb511;
    }

    bb125: {
        _293 = &(*_294);
        StorageDead(_295);
        _292 = PerpMarket::get_open_interest(move _293) -> [return: bb126, unwind: bb537];
    }

    bb126: {
        StorageDead(_293);
        _276 = move _292;
        StorageDead(_292);
        StorageDead(_294);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &mut _173;
        StorageLive(_302);
        _302 = state::user::MarketType::Perp;
        StorageLive(_303);
        _303 = _2;
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = &_281;
        _308 = <Ref<'_, PerpMarket> as Deref>::deref(move _309) -> [return: bb127, unwind: bb537];
    }

    bb127: {
        _307 = &(*_308);
        StorageDead(_309);
        _306 = PerpMarket::oracle_id(move _307) -> [return: bb128, unwind: bb537];
    }

    bb128: {
        StorageDead(_307);
        _305 = &_306;
        _304 = &(*_305);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = &_281;
        _311 = <Ref<'_, PerpMarket> as Deref>::deref(move _312) -> [return: bb129, unwind: bb537];
    }

    bb129: {
        StorageDead(_312);
        _310 = ((((*_311).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &_281;
        _317 = <Ref<'_, PerpMarket> as Deref>::deref(move _318) -> [return: bb130, unwind: bb537];
    }

    bb130: {
        _316 = (*_317);
        StorageDead(_318);
        _315 = PerpMarket::get_max_confidence_interval_multiplier(move _316) -> [return: bb131, unwind: bb537];
    }

    bb131: {
        StorageDead(_316);
        _314 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _315) -> [return: bb132, unwind: bb537];
    }

    bb132: {
        StorageDead(_315);
        _319 = discriminant(_314);
        switchInt(move _319) -> [0: bb133, 1: bb134, otherwise: bb4];
    }

    bb133: {
        StorageLive(_323);
        _323 = ((_314 as Continue).0: u64);
        _313 = _323;
        StorageDead(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _326 = &_281;
        _325 = <Ref<'_, PerpMarket> as Deref>::deref(move _326) -> [return: bb136, unwind: bb537];
    }

    bb134: {
        StorageLive(_320);
        _320 = ((_314 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_322);
        _322 = _320;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _322) -> [return: bb135, unwind: bb537];
    }

    bb135: {
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_313);
        StorageDead(_310);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_300);
        goto -> bb509;
    }

    bb136: {
        StorageDead(_326);
        _324 = (((*_325).1: state::perp_market::AMM).78: i8);
        _300 = OracleMap::<'_>::get_price_data_and_validity(move _301, move _302, move _303, move _304, move _310, move _313, move _324) -> [return: bb137, unwind: bb537];
    }

    bb137: {
        StorageDead(_324);
        StorageDead(_313);
        StorageDead(_310);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_302);
        StorageDead(_301);
        _299 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as Try>::branch(move _300) -> [return: bb138, unwind: bb537];
    }

    bb138: {
        StorageDead(_300);
        _327 = discriminant(_299);
        switchInt(move _327) -> [0: bb139, 1: bb140, otherwise: bb4];
    }

    bb139: {
        StorageLive(_331);
        _331 = ((_299 as Continue).0: (&state::oracle::OraclePriceData, math::oracle::OracleValidity));
        _298 = _331;
        StorageDead(_331);
        StorageLive(_296);
        _296 = (_298.0: &state::oracle::OraclePriceData);
        StorageLive(_297);
        _297 = (_298.1: math::oracle::OracleValidity);
        StorageDead(_325);
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_311);
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_299);
        StorageDead(_298);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = &_281;
        _333 = <Ref<'_, PerpMarket> as Deref>::deref(move _334) -> [return: bb142, unwind: bb537];
    }

    bb140: {
        StorageLive(_328);
        _328 = ((_299 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_330);
        _330 = _328;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _330) -> [return: bb141, unwind: bb537];
    }

    bb141: {
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_325);
        goto -> bb509;
    }

    bb142: {
        StorageDead(_334);
        _332 = (((*_333).1: state::perp_market::AMM).52: u64);
        _278 = move _332;
        StorageDead(_332);
        StorageDead(_333);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &_281;
        _336 = <Ref<'_, PerpMarket> as Deref>::deref(move _337) -> [return: bb143, unwind: bb537];
    }

    bb143: {
        StorageDead(_337);
        _335 = (((*_336).1: state::perp_market::AMM).53: u64);
        _279 = move _335;
        StorageDead(_335);
        StorageDead(_336);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = _297;
        StorageLive(_345);
        StorageLive(_346);
        _346 = DriftAction::MarginCalc;
        _345 = Option::<DriftAction>::Some(move _346);
        StorageDead(_346);
        _343 = is_oracle_valid_for_action(move _344, move _345) -> [return: bb144, unwind: bb537];
    }

    bb144: {
        StorageDead(_345);
        StorageDead(_344);
        _342 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _343) -> [return: bb145, unwind: bb537];
    }

    bb145: {
        StorageDead(_343);
        _347 = discriminant(_342);
        switchInt(move _347) -> [0: bb146, 1: bb147, otherwise: bb4];
    }

    bb146: {
        StorageLive(_351);
        _351 = ((_342 as Continue).0: bool);
        _341 = _351;
        StorageDead(_351);
        switchInt(move _341) -> [0: bb150, otherwise: bb149];
    }

    bb147: {
        StorageLive(_348);
        _348 = ((_342 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_350);
        _350 = _348;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _350) -> [return: bb148, unwind: bb537];
    }

    bb148: {
        StorageDead(_350);
        StorageDead(_348);
        StorageDead(_342);
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb507;
    }

    bb149: {
        StorageDead(_342);
        StorageLive(_352);
        _352 = ();
        _340 = std::result::Result::<(), error::ErrorCode>::Ok(move _352);
        StorageDead(_352);
        goto -> bb158;
    }

    bb150: {
        StorageDead(_342);
        StorageLive(_353);
        _353 = error::ErrorCode::InvalidTransferPerpPosition;
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _1177 = const _;
        _364 = &(*_1177);
        _363 = &(*_364);
        _362 = move _363 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_363);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &_353;
        _371 = &(*_372);
        _370 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _371) -> [return: bb151, unwind: bb537];
    }

    bb151: {
        StorageDead(_371);
        _369 = [move _370];
        StorageDead(_370);
        _368 = &_369;
        _367 = &(*_368);
        _366 = move _367 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_367);
        _361 = Arguments::<'_>::new_v1(move _362, move _366) -> [return: bb152, unwind: bb537];
    }

    bb152: {
        StorageDead(_366);
        StorageDead(_362);
        _360 = format(move _361) -> [return: bb153, unwind: bb537];
    }

    bb153: {
        StorageDead(_361);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_364);
        _359 = move _360;
        StorageDead(_360);
        _358 = &_359;
        _357 = &(*_358);
        _356 = <String as Deref>::deref(move _357) -> [return: bb154, unwind: bb536];
    }

    bb154: {
        _355 = &(*_356);
        StorageDead(_357);
        _354 = solana_program::log::sol_log(move _355) -> [return: bb155, unwind: bb536];
    }

    bb155: {
        StorageDead(_355);
        drop(_359) -> [return: bb156, unwind: bb537];
    }

    bb156: {
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_354);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _375 = const "oracle is not valid for action";
        _374 = &(*_375);
        _373 = solana_program::log::sol_log(move _374) -> [return: bb157, unwind: bb537];
    }

    bb157: {
        StorageDead(_374);
        StorageDead(_375);
        StorageDead(_373);
        StorageLive(_376);
        _376 = _353;
        _340 = std::result::Result::<(), error::ErrorCode>::Err(move _376);
        StorageDead(_376);
        StorageDead(_353);
        goto -> bb158;
    }

    bb158: {
        StorageDead(_341);
        _339 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _340) -> [return: bb159, unwind: bb537];
    }

    bb159: {
        StorageDead(_340);
        _377 = discriminant(_339);
        switchInt(move _377) -> [0: bb160, 1: bb161, otherwise: bb4];
    }

    bb160: {
        StorageLive(_381);
        _381 = ((_339 as Continue).0: ());
        _338 = _381;
        StorageDead(_381);
        StorageDead(_339);
        StorageDead(_338);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        _388 = &_281;
        _387 = <Ref<'_, PerpMarket> as Deref>::deref(move _388) -> [return: bb163, unwind: bb537];
    }

    bb161: {
        StorageLive(_378);
        _378 = ((_339 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_380);
        _380 = _378;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _380) -> [return: bb162, unwind: bb537];
    }

    bb162: {
        StorageDead(_380);
        StorageDead(_378);
        goto -> bb507;
    }

    bb163: {
        _386 = &(*_387);
        StorageDead(_388);
        StorageLive(_389);
        _389 = PerpOperation::Fill;
        _385 = PerpMarket::is_operation_paused(move _386, move _389) -> [return: bb164, unwind: bb537];
    }

    bb164: {
        switchInt(move _385) -> [0: bb166, otherwise: bb165];
    }

    bb165: {
        StorageDead(_389);
        StorageDead(_386);
        StorageDead(_387);
        StorageLive(_391);
        _391 = error::ErrorCode::InvalidTransferPerpPosition;
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _1176 = const _;
        _402 = &(*_1176);
        _401 = &(*_402);
        _400 = move _401 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_401);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &_391;
        _409 = &(*_410);
        _408 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _409) -> [return: bb167, unwind: bb537];
    }

    bb166: {
        StorageDead(_389);
        StorageDead(_386);
        StorageDead(_387);
        StorageLive(_390);
        _390 = ();
        _384 = std::result::Result::<(), error::ErrorCode>::Ok(move _390);
        StorageDead(_390);
        goto -> bb174;
    }

    bb167: {
        StorageDead(_409);
        _407 = [move _408];
        StorageDead(_408);
        _406 = &_407;
        _405 = &(*_406);
        _404 = move _405 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_405);
        _399 = Arguments::<'_>::new_v1(move _400, move _404) -> [return: bb168, unwind: bb537];
    }

    bb168: {
        StorageDead(_404);
        StorageDead(_400);
        _398 = format(move _399) -> [return: bb169, unwind: bb537];
    }

    bb169: {
        StorageDead(_399);
        StorageDead(_410);
        StorageDead(_407);
        StorageDead(_406);
        StorageDead(_402);
        _397 = move _398;
        StorageDead(_398);
        _396 = &_397;
        _395 = &(*_396);
        _394 = <String as Deref>::deref(move _395) -> [return: bb170, unwind: bb535];
    }

    bb170: {
        _393 = &(*_394);
        StorageDead(_395);
        _392 = solana_program::log::sol_log(move _393) -> [return: bb171, unwind: bb535];
    }

    bb171: {
        StorageDead(_393);
        drop(_397) -> [return: bb172, unwind: bb537];
    }

    bb172: {
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_392);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = const "perp market fills paused";
        _412 = &(*_413);
        _411 = solana_program::log::sol_log(move _412) -> [return: bb173, unwind: bb537];
    }

    bb173: {
        StorageDead(_412);
        StorageDead(_413);
        StorageDead(_411);
        StorageLive(_414);
        _414 = _391;
        _384 = std::result::Result::<(), error::ErrorCode>::Err(move _414);
        StorageDead(_414);
        StorageDead(_391);
        goto -> bb174;
    }

    bb174: {
        StorageDead(_385);
        _383 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _384) -> [return: bb175, unwind: bb537];
    }

    bb175: {
        StorageDead(_384);
        _415 = discriminant(_383);
        switchInt(move _415) -> [0: bb176, 1: bb177, otherwise: bb4];
    }

    bb176: {
        StorageLive(_419);
        _419 = ((_383 as Continue).0: ());
        _382 = _419;
        StorageDead(_419);
        StorageDead(_383);
        StorageDead(_382);
        StorageLive(_420);
        _420 = ((*_296).0: i64);
        _277 = move _420;
        StorageDead(_420);
        _280 = const ();
        StorageDead(_297);
        StorageDead(_296);
        drop(_281) -> [return: bb179, unwind: bb541];
    }

    bb177: {
        StorageLive(_416);
        _416 = ((_383 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_418);
        _418 = _416;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _418) -> [return: bb178, unwind: bb537];
    }

    bb178: {
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_383);
        StorageDead(_382);
        goto -> bb508;
    }

    bb179: {
        StorageDead(_281);
        StorageDead(_280);
        StorageLive(_423);
        _424 = discriminant(_3);
        switchInt(move _424) -> [1: bb180, otherwise: bb240];
    }

    bb180: {
        StorageLive(_425);
        _425 = ((_3 as Some).0: i64);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &mut (*_40);
        _430 = <RefMut<'_, User> as DerefMut>::deref_mut(move _431) -> [return: bb181, unwind: bb541];
    }

    bb181: {
        _429 = &mut (*_430);
        StorageDead(_431);
        StorageLive(_432);
        _432 = _2;
        _428 = User::force_get_perp_position_mut(move _429, move _432) -> [return: bb182, unwind: bb541];
    }

    bb182: {
        StorageDead(_432);
        StorageDead(_429);
        _427 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _428) -> [return: bb183, unwind: bb541];
    }

    bb183: {
        StorageDead(_428);
        _433 = discriminant(_427);
        switchInt(move _433) -> [0: bb184, 1: bb185, otherwise: bb4];
    }

    bb184: {
        StorageLive(_437);
        _437 = move ((_427 as Continue).0: &mut state::user::PerpPosition);
        _426 = move _437;
        StorageDead(_437);
        StorageDead(_430);
        StorageDead(_427);
        StorageLive(_438);
        _438 = ((*_426).1: i64);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = _425;
        _443 = core::num::<impl i64>::signum(move _444) -> [return: bb187, unwind: bb541];
    }

    bb185: {
        StorageLive(_434);
        _434 = ((_427 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_436);
        _436 = _434;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _436) -> [return: bb186, unwind: bb541];
    }

    bb186: {
        StorageDead(_436);
        StorageDead(_434);
        StorageDead(_430);
        StorageDead(_427);
        goto -> bb505;
    }

    bb187: {
        StorageDead(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = _438;
        _445 = core::num::<impl i64>::signum(move _446) -> [return: bb188, unwind: bb541];
    }

    bb188: {
        StorageDead(_446);
        _442 = Eq(move _443, move _445);
        switchInt(move _442) -> [0: bb190, otherwise: bb189];
    }

    bb189: {
        StorageDead(_445);
        StorageDead(_443);
        StorageLive(_447);
        _447 = ();
        _441 = std::result::Result::<(), error::ErrorCode>::Ok(move _447);
        StorageDead(_447);
        goto -> bb198;
    }

    bb190: {
        StorageDead(_445);
        StorageDead(_443);
        StorageLive(_448);
        _448 = error::ErrorCode::InvalidTransferPerpPosition;
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        _1175 = const _;
        _459 = &(*_1175);
        _458 = &(*_459);
        _457 = move _458 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_458);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = &_448;
        _466 = &(*_467);
        _465 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _466) -> [return: bb191, unwind: bb541];
    }

    bb191: {
        StorageDead(_466);
        _464 = [move _465];
        StorageDead(_465);
        _463 = &_464;
        _462 = &(*_463);
        _461 = move _462 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_462);
        _456 = Arguments::<'_>::new_v1(move _457, move _461) -> [return: bb192, unwind: bb541];
    }

    bb192: {
        StorageDead(_461);
        StorageDead(_457);
        _455 = format(move _456) -> [return: bb193, unwind: bb541];
    }

    bb193: {
        StorageDead(_456);
        StorageDead(_467);
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_459);
        _454 = move _455;
        StorageDead(_455);
        _453 = &_454;
        _452 = &(*_453);
        _451 = <String as Deref>::deref(move _452) -> [return: bb194, unwind: bb534];
    }

    bb194: {
        _450 = &(*_451);
        StorageDead(_452);
        _449 = solana_program::log::sol_log(move _450) -> [return: bb195, unwind: bb534];
    }

    bb195: {
        StorageDead(_450);
        drop(_454) -> [return: bb196, unwind: bb541];
    }

    bb196: {
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_451);
        StorageDead(_449);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _470 = const "transfer perp position must reduce position (direction is opposite)";
        _469 = &(*_470);
        _468 = solana_program::log::sol_log(move _469) -> [return: bb197, unwind: bb541];
    }

    bb197: {
        StorageDead(_469);
        StorageDead(_470);
        StorageDead(_468);
        StorageLive(_471);
        _471 = _448;
        _441 = std::result::Result::<(), error::ErrorCode>::Err(move _471);
        StorageDead(_471);
        StorageDead(_448);
        goto -> bb198;
    }

    bb198: {
        StorageDead(_442);
        _440 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _441) -> [return: bb199, unwind: bb541];
    }

    bb199: {
        StorageDead(_441);
        _472 = discriminant(_440);
        switchInt(move _472) -> [0: bb200, 1: bb201, otherwise: bb4];
    }

    bb200: {
        StorageLive(_476);
        _476 = ((_440 as Continue).0: ());
        _439 = _476;
        StorageDead(_476);
        StorageDead(_440);
        StorageDead(_439);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = _425;
        _481 = core::num::<impl i64>::abs(move _482) -> [return: bb203, unwind: bb541];
    }

    bb201: {
        StorageLive(_473);
        _473 = ((_440 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_475);
        _475 = _473;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _475) -> [return: bb202, unwind: bb541];
    }

    bb202: {
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_440);
        StorageDead(_439);
        goto -> bb504;
    }

    bb203: {
        StorageDead(_482);
        StorageLive(_483);
        StorageLive(_484);
        _484 = _438;
        _483 = core::num::<impl i64>::abs(move _484) -> [return: bb204, unwind: bb541];
    }

    bb204: {
        StorageDead(_484);
        _480 = Le(move _481, move _483);
        switchInt(move _480) -> [0: bb206, otherwise: bb205];
    }

    bb205: {
        StorageDead(_483);
        StorageDead(_481);
        StorageLive(_485);
        _485 = ();
        _479 = std::result::Result::<(), error::ErrorCode>::Ok(move _485);
        StorageDead(_485);
        goto -> bb214;
    }

    bb206: {
        StorageDead(_483);
        StorageDead(_481);
        StorageLive(_486);
        _486 = error::ErrorCode::InvalidTransferPerpPosition;
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        _1174 = const _;
        _497 = &(*_1174);
        _496 = &(*_497);
        _495 = move _496 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_496);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &_486;
        _504 = &(*_505);
        _503 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _504) -> [return: bb207, unwind: bb541];
    }

    bb207: {
        StorageDead(_504);
        _502 = [move _503];
        StorageDead(_503);
        _501 = &_502;
        _500 = &(*_501);
        _499 = move _500 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_500);
        _494 = Arguments::<'_>::new_v1(move _495, move _499) -> [return: bb208, unwind: bb541];
    }

    bb208: {
        StorageDead(_499);
        StorageDead(_495);
        _493 = format(move _494) -> [return: bb209, unwind: bb541];
    }

    bb209: {
        StorageDead(_494);
        StorageDead(_505);
        StorageDead(_502);
        StorageDead(_501);
        StorageDead(_497);
        _492 = move _493;
        StorageDead(_493);
        _491 = &_492;
        _490 = &(*_491);
        _489 = <String as Deref>::deref(move _490) -> [return: bb210, unwind: bb533];
    }

    bb210: {
        _488 = &(*_489);
        StorageDead(_490);
        _487 = solana_program::log::sol_log(move _488) -> [return: bb211, unwind: bb533];
    }

    bb211: {
        StorageDead(_488);
        drop(_492) -> [return: bb212, unwind: bb541];
    }

    bb212: {
        StorageDead(_492);
        StorageDead(_491);
        StorageDead(_489);
        StorageDead(_487);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = const "transfer perp position amount is greater than existing position";
        _507 = &(*_508);
        _506 = solana_program::log::sol_log(move _507) -> [return: bb213, unwind: bb541];
    }

    bb213: {
        StorageDead(_507);
        StorageDead(_508);
        StorageDead(_506);
        StorageLive(_509);
        _509 = _486;
        _479 = std::result::Result::<(), error::ErrorCode>::Err(move _509);
        StorageDead(_509);
        StorageDead(_486);
        goto -> bb214;
    }

    bb214: {
        StorageDead(_480);
        _478 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _479) -> [return: bb215, unwind: bb541];
    }

    bb215: {
        StorageDead(_479);
        _510 = discriminant(_478);
        switchInt(move _510) -> [0: bb216, 1: bb217, otherwise: bb4];
    }

    bb216: {
        StorageLive(_514);
        _514 = ((_478 as Continue).0: ());
        _477 = _514;
        StorageDead(_514);
        StorageDead(_478);
        StorageDead(_477);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        _522 = _425;
        _521 = core::num::<impl i64>::unsigned_abs(move _522) -> [return: bb219, unwind: bb541];
    }

    bb217: {
        StorageLive(_511);
        _511 = ((_478 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_513);
        _513 = _511;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _513) -> [return: bb218, unwind: bb541];
    }

    bb218: {
        StorageDead(_513);
        StorageDead(_511);
        StorageDead(_478);
        StorageDead(_477);
        goto -> bb504;
    }

    bb219: {
        StorageDead(_522);
        StorageLive(_523);
        _523 = _278;
        _520 = math::orders::is_multiple_of_step_size(move _521, move _523) -> [return: bb220, unwind: bb541];
    }

    bb220: {
        StorageDead(_523);
        StorageDead(_521);
        _519 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _520) -> [return: bb221, unwind: bb541];
    }

    bb221: {
        StorageDead(_520);
        _524 = discriminant(_519);
        switchInt(move _524) -> [0: bb222, 1: bb223, otherwise: bb4];
    }

    bb222: {
        StorageLive(_528);
        _528 = ((_519 as Continue).0: bool);
        _518 = _528;
        StorageDead(_528);
        switchInt(move _518) -> [0: bb226, otherwise: bb225];
    }

    bb223: {
        StorageLive(_525);
        _525 = ((_519 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_527);
        _527 = _525;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _527) -> [return: bb224, unwind: bb541];
    }

    bb224: {
        StorageDead(_527);
        StorageDead(_525);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_517);
        goto -> bb503;
    }

    bb225: {
        StorageDead(_519);
        StorageLive(_529);
        _529 = ();
        _517 = std::result::Result::<(), error::ErrorCode>::Ok(move _529);
        StorageDead(_529);
        goto -> bb234;
    }

    bb226: {
        StorageDead(_519);
        StorageLive(_530);
        _530 = error::ErrorCode::InvalidTransferPerpPosition;
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _1173 = const _;
        _541 = &(*_1173);
        _540 = &(*_541);
        _539 = move _540 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_540);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        _549 = &_530;
        _548 = &(*_549);
        _547 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _548) -> [return: bb227, unwind: bb541];
    }

    bb227: {
        StorageDead(_548);
        _546 = [move _547];
        StorageDead(_547);
        _545 = &_546;
        _544 = &(*_545);
        _543 = move _544 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_544);
        _538 = Arguments::<'_>::new_v1(move _539, move _543) -> [return: bb228, unwind: bb541];
    }

    bb228: {
        StorageDead(_543);
        StorageDead(_539);
        _537 = format(move _538) -> [return: bb229, unwind: bb541];
    }

    bb229: {
        StorageDead(_538);
        StorageDead(_549);
        StorageDead(_546);
        StorageDead(_545);
        StorageDead(_541);
        _536 = move _537;
        StorageDead(_537);
        _535 = &_536;
        _534 = &(*_535);
        _533 = <String as Deref>::deref(move _534) -> [return: bb230, unwind: bb532];
    }

    bb230: {
        _532 = &(*_533);
        StorageDead(_534);
        _531 = solana_program::log::sol_log(move _532) -> [return: bb231, unwind: bb532];
    }

    bb231: {
        StorageDead(_532);
        drop(_536) -> [return: bb232, unwind: bb541];
    }

    bb232: {
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_531);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        _552 = const "transfer perp position amount is not a multiple of step size";
        _551 = &(*_552);
        _550 = solana_program::log::sol_log(move _551) -> [return: bb233, unwind: bb541];
    }

    bb233: {
        StorageDead(_551);
        StorageDead(_552);
        StorageDead(_550);
        StorageLive(_553);
        _553 = _530;
        _517 = std::result::Result::<(), error::ErrorCode>::Err(move _553);
        StorageDead(_553);
        StorageDead(_530);
        goto -> bb234;
    }

    bb234: {
        StorageDead(_518);
        _516 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _517) -> [return: bb235, unwind: bb541];
    }

    bb235: {
        StorageDead(_517);
        _554 = discriminant(_516);
        switchInt(move _554) -> [0: bb236, 1: bb237, otherwise: bb4];
    }

    bb236: {
        StorageLive(_558);
        _558 = ((_516 as Continue).0: ());
        _515 = _558;
        StorageDead(_558);
        StorageDead(_516);
        StorageDead(_515);
        StorageLive(_559);
        _559 = _425;
        StorageLive(_560);
        StorageLive(_561);
        _561 = &(*_426);
        _560 = PerpPosition::get_direction_to_close(move _561) -> [return: bb239, unwind: bb541];
    }

    bb237: {
        StorageLive(_555);
        _555 = ((_516 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_557);
        _557 = _555;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _557) -> [return: bb238, unwind: bb541];
    }

    bb238: {
        StorageDead(_557);
        StorageDead(_555);
        goto -> bb503;
    }

    bb239: {
        StorageDead(_561);
        _423 = (move _559, move _560);
        StorageDead(_560);
        StorageDead(_559);
        StorageDead(_438);
        StorageDead(_426);
        StorageDead(_425);
        goto -> bb262;
    }

    bb240: {
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        _567 = &mut (*_40);
        _566 = <RefMut<'_, User> as DerefMut>::deref_mut(move _567) -> [return: bb241, unwind: bb541];
    }

    bb241: {
        _565 = &mut (*_566);
        StorageDead(_567);
        StorageLive(_568);
        _568 = _2;
        _564 = User::force_get_perp_position_mut(move _565, move _568) -> [return: bb242, unwind: bb541];
    }

    bb242: {
        StorageDead(_568);
        StorageDead(_565);
        _563 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _564) -> [return: bb243, unwind: bb541];
    }

    bb243: {
        StorageDead(_564);
        _569 = discriminant(_563);
        switchInt(move _569) -> [0: bb244, 1: bb245, otherwise: bb4];
    }

    bb244: {
        StorageLive(_573);
        _573 = move ((_563 as Continue).0: &mut state::user::PerpPosition);
        _562 = move _573;
        StorageDead(_573);
        StorageDead(_566);
        StorageDead(_563);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        _578 = ((*_562).1: i64);
        _577 = Ne(move _578, const 0_i64);
        switchInt(move _577) -> [0: bb248, otherwise: bb247];
    }

    bb245: {
        StorageLive(_570);
        _570 = ((_563 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_572);
        _572 = _570;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _572) -> [return: bb246, unwind: bb541];
    }

    bb246: {
        StorageDead(_572);
        StorageDead(_570);
        StorageDead(_566);
        StorageDead(_563);
        goto -> bb502;
    }

    bb247: {
        StorageDead(_578);
        StorageLive(_579);
        _579 = ();
        _576 = std::result::Result::<(), error::ErrorCode>::Ok(move _579);
        StorageDead(_579);
        goto -> bb256;
    }

    bb248: {
        StorageDead(_578);
        StorageLive(_580);
        _580 = error::ErrorCode::InvalidTransferPerpPosition;
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        _1172 = const _;
        _591 = &(*_1172);
        _590 = &(*_591);
        _589 = move _590 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_590);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        _599 = &_580;
        _598 = &(*_599);
        _597 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _598) -> [return: bb249, unwind: bb541];
    }

    bb249: {
        StorageDead(_598);
        _596 = [move _597];
        StorageDead(_597);
        _595 = &_596;
        _594 = &(*_595);
        _593 = move _594 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_594);
        _588 = Arguments::<'_>::new_v1(move _589, move _593) -> [return: bb250, unwind: bb541];
    }

    bb250: {
        StorageDead(_593);
        StorageDead(_589);
        _587 = format(move _588) -> [return: bb251, unwind: bb541];
    }

    bb251: {
        StorageDead(_588);
        StorageDead(_599);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_591);
        _586 = move _587;
        StorageDead(_587);
        _585 = &_586;
        _584 = &(*_585);
        _583 = <String as Deref>::deref(move _584) -> [return: bb252, unwind: bb531];
    }

    bb252: {
        _582 = &(*_583);
        StorageDead(_584);
        _581 = solana_program::log::sol_log(move _582) -> [return: bb253, unwind: bb531];
    }

    bb253: {
        StorageDead(_582);
        drop(_586) -> [return: bb254, unwind: bb541];
    }

    bb254: {
        StorageDead(_586);
        StorageDead(_585);
        StorageDead(_583);
        StorageDead(_581);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        _602 = const "from user has no position";
        _601 = &(*_602);
        _600 = solana_program::log::sol_log(move _601) -> [return: bb255, unwind: bb541];
    }

    bb255: {
        StorageDead(_601);
        StorageDead(_602);
        StorageDead(_600);
        StorageLive(_603);
        _603 = _580;
        _576 = std::result::Result::<(), error::ErrorCode>::Err(move _603);
        StorageDead(_603);
        StorageDead(_580);
        goto -> bb256;
    }

    bb256: {
        StorageDead(_577);
        _575 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _576) -> [return: bb257, unwind: bb541];
    }

    bb257: {
        StorageDead(_576);
        _604 = discriminant(_575);
        switchInt(move _604) -> [0: bb258, 1: bb259, otherwise: bb4];
    }

    bb258: {
        StorageLive(_608);
        _608 = ((_575 as Continue).0: ());
        _574 = _608;
        StorageDead(_608);
        StorageDead(_575);
        StorageDead(_574);
        StorageLive(_609);
        _609 = ((*_562).1: i64);
        StorageLive(_610);
        StorageLive(_611);
        _611 = &(*_562);
        _610 = PerpPosition::get_direction_to_close(move _611) -> [return: bb261, unwind: bb541];
    }

    bb259: {
        StorageLive(_605);
        _605 = ((_575 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_607);
        _607 = _605;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _607) -> [return: bb260, unwind: bb541];
    }

    bb260: {
        StorageDead(_607);
        StorageDead(_605);
        StorageDead(_575);
        StorageDead(_574);
        goto -> bb502;
    }

    bb261: {
        StorageDead(_611);
        _423 = (move _609, move _610);
        StorageDead(_610);
        StorageDead(_609);
        StorageDead(_562);
        goto -> bb262;
    }

    bb262: {
        StorageLive(_421);
        _421 = (_423.0: i64);
        StorageLive(_422);
        _422 = (_423.1: controller::position::PositionDirection);
        StorageDead(_423);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        _615 = _277;
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        _619 = _279;
        _618 = <u64 as Cast>::cast::<i64>(move _619) -> [return: bb263, unwind: bb541];
    }

    bb263: {
        StorageDead(_619);
        _617 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _618) -> [return: bb264, unwind: bb541];
    }

    bb264: {
        StorageDead(_618);
        _620 = discriminant(_617);
        switchInt(move _620) -> [0: bb265, 1: bb266, otherwise: bb4];
    }

    bb265: {
        StorageLive(_624);
        _624 = ((_617 as Continue).0: i64);
        _616 = _624;
        StorageDead(_624);
        StorageLive(_625);
        _625 = _422;
        _614 = math::orders::standardize_price_i64(move _615, move _616, move _625) -> [return: bb268, unwind: bb541];
    }

    bb266: {
        StorageLive(_621);
        _621 = ((_617 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_623);
        _623 = _621;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _623) -> [return: bb267, unwind: bb541];
    }

    bb267: {
        StorageDead(_623);
        StorageDead(_621);
        StorageDead(_616);
        StorageDead(_615);
        StorageDead(_614);
        goto -> bb500;
    }

    bb268: {
        StorageDead(_625);
        StorageDead(_616);
        StorageDead(_615);
        _613 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _614) -> [return: bb269, unwind: bb541];
    }

    bb269: {
        StorageDead(_614);
        _626 = discriminant(_613);
        switchInt(move _626) -> [0: bb270, 1: bb271, otherwise: bb4];
    }

    bb270: {
        StorageLive(_630);
        _630 = ((_613 as Continue).0: i64);
        _612 = _630;
        StorageDead(_630);
        StorageDead(_617);
        StorageDead(_613);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        _640 = _421;
        _639 = <i64 as Cast>::cast::<i128>(move _640) -> [return: bb273, unwind: bb541];
    }

    bb271: {
        StorageLive(_627);
        _627 = ((_613 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_629);
        _629 = _627;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _629) -> [return: bb272, unwind: bb541];
    }

    bb272: {
        StorageDead(_629);
        StorageDead(_627);
        goto -> bb500;
    }

    bb273: {
        StorageDead(_640);
        _638 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _639) -> [return: bb274, unwind: bb541];
    }

    bb274: {
        StorageDead(_639);
        _641 = discriminant(_638);
        switchInt(move _641) -> [0: bb275, 1: bb276, otherwise: bb4];
    }

    bb275: {
        StorageLive(_645);
        _645 = ((_638 as Continue).0: i128);
        _637 = _645;
        StorageDead(_645);
        StorageLive(_646);
        _646 = _612;
        _636 = calculate_base_asset_value_with_oracle_price(move _637, move _646) -> [return: bb278, unwind: bb541];
    }

    bb276: {
        StorageLive(_642);
        _642 = ((_638 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_644);
        _644 = _642;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _644) -> [return: bb277, unwind: bb541];
    }

    bb277: {
        StorageDead(_644);
        StorageDead(_642);
        StorageDead(_637);
        StorageDead(_636);
        goto -> bb497;
    }

    bb278: {
        StorageDead(_646);
        StorageDead(_637);
        _635 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _636) -> [return: bb279, unwind: bb541];
    }

    bb279: {
        StorageDead(_636);
        _647 = discriminant(_635);
        switchInt(move _647) -> [0: bb280, 1: bb281, otherwise: bb4];
    }

    bb280: {
        StorageLive(_651);
        _651 = ((_635 as Continue).0: u128);
        _634 = _651;
        StorageDead(_651);
        _633 = <u128 as Cast>::cast::<u64>(move _634) -> [return: bb283, unwind: bb541];
    }

    bb281: {
        StorageLive(_648);
        _648 = ((_635 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_650);
        _650 = _648;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _650) -> [return: bb282, unwind: bb541];
    }

    bb282: {
        StorageDead(_650);
        StorageDead(_648);
        goto -> bb497;
    }

    bb283: {
        StorageDead(_634);
        _632 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _633) -> [return: bb284, unwind: bb541];
    }

    bb284: {
        StorageDead(_633);
        _652 = discriminant(_632);
        switchInt(move _652) -> [0: bb285, 1: bb286, otherwise: bb4];
    }

    bb285: {
        StorageLive(_656);
        _656 = ((_632 as Continue).0: u64);
        _631 = _656;
        StorageDead(_656);
        StorageDead(_638);
        StorageDead(_635);
        StorageDead(_632);
        StorageLive(_657);
        StorageLive(_658);
        _658 = _421;
        _657 = core::num::<impl i64>::unsigned_abs(move _658) -> [return: bb288, unwind: bb541];
    }

    bb286: {
        StorageLive(_653);
        _653 = ((_632 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_655);
        _655 = _653;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _655) -> [return: bb287, unwind: bb541];
    }

    bb287: {
        StorageDead(_655);
        StorageDead(_653);
        goto -> bb498;
    }

    bb288: {
        StorageDead(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        _662 = _657;
        StorageLive(_663);
        _663 = _631;
        StorageLive(_664);
        _664 = _422;
        _661 = math::orders::get_position_delta_for_fill(move _662, move _663, move _664) -> [return: bb289, unwind: bb541];
    }

    bb289: {
        StorageDead(_664);
        StorageDead(_663);
        StorageDead(_662);
        _660 = <std::result::Result<PositionDelta, error::ErrorCode> as Try>::branch(move _661) -> [return: bb290, unwind: bb541];
    }

    bb290: {
        StorageDead(_661);
        _665 = discriminant(_660);
        switchInt(move _665) -> [0: bb291, 1: bb292, otherwise: bb4];
    }

    bb291: {
        StorageLive(_669);
        _669 = move ((_660 as Continue).0: controller::position::PositionDelta);
        _659 = move _669;
        StorageDead(_669);
        StorageDead(_660);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        _673 = _657;
        StorageLive(_674);
        _674 = _631;
        StorageLive(_675);
        StorageLive(_676);
        _676 = &_422;
        _675 = controller::position::PositionDirection::opposite(move _676) -> [return: bb294, unwind: bb541];
    }

    bb292: {
        StorageLive(_666);
        _666 = ((_660 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_668);
        _668 = _666;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _668) -> [return: bb293, unwind: bb541];
    }

    bb293: {
        StorageDead(_668);
        StorageDead(_666);
        StorageDead(_660);
        goto -> bb496;
    }

    bb294: {
        StorageDead(_676);
        _672 = math::orders::get_position_delta_for_fill(move _673, move _674, move _675) -> [return: bb295, unwind: bb541];
    }

    bb295: {
        StorageDead(_675);
        StorageDead(_674);
        StorageDead(_673);
        _671 = <std::result::Result<PositionDelta, error::ErrorCode> as Try>::branch(move _672) -> [return: bb296, unwind: bb541];
    }

    bb296: {
        StorageDead(_672);
        _677 = discriminant(_671);
        switchInt(move _677) -> [0: bb297, 1: bb298, otherwise: bb4];
    }

    bb297: {
        StorageLive(_681);
        _681 = move ((_671 as Continue).0: controller::position::PositionDelta);
        _670 = move _681;
        StorageDead(_681);
        StorageDead(_671);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        _688 = &mut (*_28);
        _687 = <RefMut<'_, User> as DerefMut>::deref_mut(move _688) -> [return: bb300, unwind: bb541];
    }

    bb298: {
        StorageLive(_678);
        _678 = ((_671 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_680);
        _680 = _678;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _680) -> [return: bb299, unwind: bb541];
    }

    bb299: {
        StorageDead(_680);
        StorageDead(_678);
        StorageDead(_671);
        goto -> bb495;
    }

    bb300: {
        _686 = &mut (*_687);
        StorageDead(_688);
        StorageLive(_689);
        _689 = _2;
        _685 = User::force_get_perp_position_mut(move _686, move _689) -> [return: bb301, unwind: bb541];
    }

    bb301: {
        StorageDead(_689);
        StorageDead(_686);
        StorageLive(_690);
        _690 = {closure@programs/drift/src/instructions/user.rs:1725:14: 1725:24};
        _684 = std::result::Result::<&mut PerpPosition, error::ErrorCode>::map::<controller::position::PositionDirection, {closure@programs/drift/src/instructions/user.rs:1725:14: 1725:24}>(move _685, move _690) -> [return: bb302, unwind: bb541];
    }

    bb302: {
        StorageDead(_690);
        StorageDead(_685);
        _683 = <std::result::Result<controller::position::PositionDirection, error::ErrorCode> as Try>::branch(move _684) -> [return: bb303, unwind: bb541];
    }

    bb303: {
        StorageDead(_684);
        _691 = discriminant(_683);
        switchInt(move _691) -> [0: bb304, 1: bb305, otherwise: bb4];
    }

    bb304: {
        StorageLive(_695);
        _695 = ((_683 as Continue).0: controller::position::PositionDirection);
        _682 = _695;
        StorageDead(_695);
        StorageDead(_687);
        StorageDead(_683);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        _704 = &_171;
        StorageLive(_705);
        StorageLive(_706);
        _706 = &_2;
        _705 = &(*_706);
        _703 = PerpMarketMap::<'_>::get_ref_mut(move _704, move _705) -> [return: bb307, unwind: bb541];
    }

    bb305: {
        StorageLive(_692);
        _692 = ((_683 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_694);
        _694 = _692;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _694) -> [return: bb306, unwind: bb541];
    }

    bb306: {
        StorageDead(_694);
        StorageDead(_692);
        StorageDead(_687);
        StorageDead(_683);
        goto -> bb494;
    }

    bb307: {
        StorageDead(_705);
        StorageDead(_704);
        _702 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _703) -> [return: bb308, unwind: bb541];
    }

    bb308: {
        StorageDead(_703);
        _707 = discriminant(_702);
        switchInt(move _707) -> [0: bb309, 1: bb310, otherwise: bb4];
    }

    bb309: {
        StorageLive(_711);
        _711 = move ((_702 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _701 = move _711;
        StorageDead(_711);
        _1226 = discriminant(_702);
        StorageDead(_706);
        StorageDead(_702);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        _717 = &mut (*_40);
        _716 = <RefMut<'_, User> as DerefMut>::deref_mut(move _717) -> [return: bb312, unwind: bb530];
    }

    bb310: {
        StorageLive(_708);
        _708 = ((_702 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_710);
        _710 = _708;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _710) -> [return: bb311, unwind: bb557];
    }

    bb311: {
        StorageDead(_710);
        StorageDead(_708);
        _1224 = discriminant(_702);
        StorageDead(_706);
        StorageDead(_702);
        goto -> bb493;
    }

    bb312: {
        _715 = &mut (*_716);
        StorageDead(_717);
        StorageLive(_718);
        _718 = _2;
        _714 = User::force_get_perp_position_mut(move _715, move _718) -> [return: bb313, unwind: bb530];
    }

    bb313: {
        StorageDead(_718);
        StorageDead(_715);
        _713 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _714) -> [return: bb314, unwind: bb530];
    }

    bb314: {
        StorageDead(_714);
        _719 = discriminant(_713);
        switchInt(move _719) -> [0: bb315, 1: bb316, otherwise: bb4];
    }

    bb315: {
        StorageLive(_723);
        _723 = move ((_713 as Continue).0: &mut state::user::PerpPosition);
        _712 = move _723;
        StorageDead(_723);
        StorageDead(_716);
        StorageDead(_713);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        _729 = _657;
        StorageLive(_730);
        StorageLive(_731);
        _731 = &(*_712);
        StorageLive(_732);
        _732 = _422;
        _730 = PerpPosition::get_existing_position_params_for_order_action(move _731, move _732) -> [return: bb318, unwind: bb530];
    }

    bb316: {
        StorageLive(_720);
        _720 = ((_713 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_722);
        _722 = _720;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _722) -> [return: bb317, unwind: bb530];
    }

    bb317: {
        StorageDead(_722);
        StorageDead(_720);
        StorageDead(_716);
        StorageDead(_713);
        goto -> bb492;
    }

    bb318: {
        StorageDead(_732);
        StorageDead(_731);
        _728 = math::orders::calculate_existing_position_fields_for_order_action(move _729, move _730) -> [return: bb319, unwind: bb530];
    }

    bb319: {
        StorageDead(_730);
        StorageDead(_729);
        _727 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _728) -> [return: bb320, unwind: bb530];
    }

    bb320: {
        StorageDead(_728);
        _733 = discriminant(_727);
        switchInt(move _733) -> [0: bb321, 1: bb322, otherwise: bb4];
    }

    bb321: {
        StorageLive(_737);
        _737 = ((_727 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _726 = _737;
        StorageDead(_737);
        StorageLive(_724);
        _724 = (_726.0: std::option::Option<u64>);
        StorageLive(_725);
        _725 = (_726.1: std::option::Option<u64>);
        StorageDead(_727);
        StorageDead(_726);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        _741 = &mut (*_712);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        _745 = &mut _701;
        _744 = &mut (*_745);
        _743 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _744) -> [return: bb324, unwind: bb530];
    }

    bb322: {
        StorageLive(_734);
        _734 = ((_727 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_736);
        _736 = _734;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _736) -> [return: bb323, unwind: bb530];
    }

    bb323: {
        StorageDead(_736);
        StorageDead(_734);
        StorageDead(_727);
        StorageDead(_726);
        goto -> bb492;
    }

    bb324: {
        _742 = &mut (*_743);
        StorageDead(_744);
        StorageLive(_746);
        StorageLive(_747);
        _747 = &_659;
        _746 = &(*_747);
        _740 = update_position_and_market(move _741, move _742, move _746) -> [return: bb325, unwind: bb530];
    }

    bb325: {
        StorageDead(_746);
        StorageDead(_742);
        StorageDead(_741);
        _739 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _740) -> [return: bb326, unwind: bb530];
    }

    bb326: {
        StorageDead(_740);
        _748 = discriminant(_739);
        switchInt(move _748) -> [0: bb327, 1: bb328, otherwise: bb4];
    }

    bb327: {
        StorageLive(_752);
        _752 = ((_739 as Continue).0: i64);
        _738 = _752;
        StorageDead(_752);
        StorageDead(_747);
        StorageDead(_745);
        StorageDead(_743);
        StorageDead(_739);
        StorageDead(_738);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        _758 = &mut (*_28);
        _757 = <RefMut<'_, User> as DerefMut>::deref_mut(move _758) -> [return: bb330, unwind: bb530];
    }

    bb328: {
        StorageLive(_749);
        _749 = ((_739 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_751);
        _751 = _749;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _751) -> [return: bb329, unwind: bb530];
    }

    bb329: {
        StorageDead(_751);
        StorageDead(_749);
        StorageDead(_747);
        StorageDead(_745);
        StorageDead(_743);
        StorageDead(_739);
        StorageDead(_738);
        goto -> bb491;
    }

    bb330: {
        _756 = &mut (*_757);
        StorageDead(_758);
        StorageLive(_759);
        _759 = _2;
        _755 = User::force_get_perp_position_mut(move _756, move _759) -> [return: bb331, unwind: bb530];
    }

    bb331: {
        StorageDead(_759);
        StorageDead(_756);
        _754 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _755) -> [return: bb332, unwind: bb530];
    }

    bb332: {
        StorageDead(_755);
        _760 = discriminant(_754);
        switchInt(move _760) -> [0: bb333, 1: bb334, otherwise: bb4];
    }

    bb333: {
        StorageLive(_764);
        _764 = move ((_754 as Continue).0: &mut state::user::PerpPosition);
        _753 = move _764;
        StorageDead(_764);
        StorageDead(_757);
        StorageDead(_754);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        _770 = _657;
        StorageLive(_771);
        StorageLive(_772);
        _772 = &(*_753);
        StorageLive(_773);
        StorageLive(_774);
        _774 = &_422;
        _773 = controller::position::PositionDirection::opposite(move _774) -> [return: bb336, unwind: bb530];
    }

    bb334: {
        StorageLive(_761);
        _761 = ((_754 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_763);
        _763 = _761;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _763) -> [return: bb335, unwind: bb530];
    }

    bb335: {
        StorageDead(_763);
        StorageDead(_761);
        StorageDead(_757);
        StorageDead(_754);
        goto -> bb490;
    }

    bb336: {
        StorageDead(_774);
        _771 = PerpPosition::get_existing_position_params_for_order_action(move _772, move _773) -> [return: bb337, unwind: bb530];
    }

    bb337: {
        StorageDead(_773);
        StorageDead(_772);
        _769 = math::orders::calculate_existing_position_fields_for_order_action(move _770, move _771) -> [return: bb338, unwind: bb530];
    }

    bb338: {
        StorageDead(_771);
        StorageDead(_770);
        _768 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _769) -> [return: bb339, unwind: bb530];
    }

    bb339: {
        StorageDead(_769);
        _775 = discriminant(_768);
        switchInt(move _775) -> [0: bb340, 1: bb341, otherwise: bb4];
    }

    bb340: {
        StorageLive(_779);
        _779 = ((_768 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _767 = _779;
        StorageDead(_779);
        StorageLive(_765);
        _765 = (_767.0: std::option::Option<u64>);
        StorageLive(_766);
        _766 = (_767.1: std::option::Option<u64>);
        StorageDead(_768);
        StorageDead(_767);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        _783 = &mut (*_753);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        _787 = &mut _701;
        _786 = &mut (*_787);
        _785 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _786) -> [return: bb343, unwind: bb530];
    }

    bb341: {
        StorageLive(_776);
        _776 = ((_768 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_778);
        _778 = _776;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _778) -> [return: bb342, unwind: bb530];
    }

    bb342: {
        StorageDead(_778);
        StorageDead(_776);
        StorageDead(_768);
        StorageDead(_767);
        goto -> bb490;
    }

    bb343: {
        _784 = &mut (*_785);
        StorageDead(_786);
        StorageLive(_788);
        StorageLive(_789);
        _789 = &_670;
        _788 = &(*_789);
        _782 = update_position_and_market(move _783, move _784, move _788) -> [return: bb344, unwind: bb530];
    }

    bb344: {
        StorageDead(_788);
        StorageDead(_784);
        StorageDead(_783);
        _781 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _782) -> [return: bb345, unwind: bb530];
    }

    bb345: {
        StorageDead(_782);
        _790 = discriminant(_781);
        switchInt(move _790) -> [0: bb346, 1: bb347, otherwise: bb4];
    }

    bb346: {
        StorageLive(_794);
        _794 = ((_781 as Continue).0: i64);
        _780 = _794;
        StorageDead(_794);
        StorageDead(_789);
        StorageDead(_787);
        StorageDead(_785);
        StorageDead(_781);
        StorageDead(_780);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        _798 = &(*_712);
        StorageLive(_799);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        _802 = &_701;
        _801 = &(*_802);
        _800 = <RefMut<'_, PerpMarket> as Deref>::deref(move _801) -> [return: bb349, unwind: bb530];
    }

    bb347: {
        StorageLive(_791);
        _791 = ((_781 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_793);
        _793 = _791;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _793) -> [return: bb348, unwind: bb530];
    }

    bb348: {
        StorageDead(_793);
        StorageDead(_791);
        StorageDead(_789);
        StorageDead(_787);
        StorageDead(_785);
        StorageDead(_781);
        StorageDead(_780);
        goto -> bb489;
    }

    bb349: {
        _799 = &(*_800);
        StorageDead(_801);
        _797 = validate_perp_position_with_perp_market(move _798, move _799) -> [return: bb350, unwind: bb530];
    }

    bb350: {
        StorageDead(_799);
        StorageDead(_798);
        _796 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _797) -> [return: bb351, unwind: bb530];
    }

    bb351: {
        StorageDead(_797);
        _803 = discriminant(_796);
        switchInt(move _803) -> [0: bb352, 1: bb353, otherwise: bb4];
    }

    bb352: {
        StorageLive(_807);
        _807 = ((_796 as Continue).0: ());
        _795 = _807;
        StorageDead(_807);
        StorageDead(_802);
        StorageDead(_800);
        StorageDead(_796);
        StorageDead(_795);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        _811 = &(*_753);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        _815 = &_701;
        _814 = &(*_815);
        _813 = <RefMut<'_, PerpMarket> as Deref>::deref(move _814) -> [return: bb355, unwind: bb530];
    }

    bb353: {
        StorageLive(_804);
        _804 = ((_796 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_806);
        _806 = _804;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _806) -> [return: bb354, unwind: bb530];
    }

    bb354: {
        StorageDead(_806);
        StorageDead(_804);
        StorageDead(_802);
        StorageDead(_800);
        StorageDead(_796);
        StorageDead(_795);
        goto -> bb489;
    }

    bb355: {
        _812 = &(*_813);
        StorageDead(_814);
        _810 = validate_perp_position_with_perp_market(move _811, move _812) -> [return: bb356, unwind: bb530];
    }

    bb356: {
        StorageDead(_812);
        StorageDead(_811);
        _809 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _810) -> [return: bb357, unwind: bb530];
    }

    bb357: {
        StorageDead(_810);
        _816 = discriminant(_809);
        switchInt(move _816) -> [0: bb358, 1: bb359, otherwise: bb4];
    }

    bb358: {
        StorageLive(_820);
        _820 = ((_809 as Continue).0: ());
        _808 = _820;
        StorageDead(_820);
        StorageDead(_815);
        StorageDead(_813);
        StorageDead(_809);
        StorageDead(_808);
        StorageLive(_821);
        _821 = _724;
        StorageLive(_822);
        _822 = _725;
        StorageLive(_823);
        _823 = _765;
        StorageLive(_824);
        _824 = _766;
        _700 = (move _821, move _822, move _823, move _824);
        StorageDead(_824);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_821);
        StorageDead(_766);
        StorageDead(_765);
        StorageDead(_753);
        StorageDead(_725);
        StorageDead(_724);
        StorageDead(_712);
        drop(_701) -> [return: bb361, unwind: bb541];
    }

    bb359: {
        StorageLive(_817);
        _817 = ((_809 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_819);
        _819 = _817;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _819) -> [return: bb360, unwind: bb530];
    }

    bb360: {
        StorageDead(_819);
        StorageDead(_817);
        StorageDead(_815);
        StorageDead(_813);
        StorageDead(_809);
        StorageDead(_808);
        goto -> bb489;
    }

    bb361: {
        StorageDead(_701);
        StorageLive(_696);
        _696 = (_700.0: std::option::Option<u64>);
        StorageLive(_697);
        _697 = (_700.1: std::option::Option<u64>);
        StorageLive(_698);
        _698 = (_700.2: std::option::Option<u64>);
        StorageLive(_699);
        _699 = (_700.3: std::option::Option<u64>);
        StorageDead(_700);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        _831 = &_40;
        _1194 = deref_copy (*_831);
        _830 = &(*_1194);
        _829 = <RefMut<'_, User> as Deref>::deref(move _830) -> [return: bb362, unwind: bb541];
    }

    bb362: {
        _828 = &(*_829);
        StorageDead(_830);
        StorageLive(_832);
        StorageLive(_833);
        _833 = &_171;
        _832 = &(*_833);
        StorageLive(_834);
        StorageLive(_835);
        _835 = &_172;
        _834 = &(*_835);
        StorageLive(_836);
        StorageLive(_837);
        _837 = &mut _173;
        _836 = &mut (*_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        _840 = math::margin::MarginRequirementType::Maintenance;
        _839 = MarginContext::standard(move _840) -> [return: bb363, unwind: bb541];
    }

    bb363: {
        StorageDead(_840);
        StorageLive(_841);
        _841 = _2;
        StorageLive(_842);
        _842 = _421;
        _838 = MarginContext::fuel_perp_delta(move _839, move _841, move _842) -> [return: bb364, unwind: bb541];
    }

    bb364: {
        StorageDead(_842);
        StorageDead(_841);
        StorageDead(_839);
        _827 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _828, move _832, move _834, move _836, move _838) -> [return: bb365, unwind: bb541];
    }

    bb365: {
        StorageDead(_838);
        StorageDead(_836);
        StorageDead(_834);
        StorageDead(_832);
        StorageDead(_828);
        _826 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _827) -> [return: bb366, unwind: bb541];
    }

    bb366: {
        StorageDead(_827);
        _843 = discriminant(_826);
        switchInt(move _843) -> [0: bb367, 1: bb368, otherwise: bb4];
    }

    bb367: {
        StorageLive(_847);
        _847 = ((_826 as Continue).0: state::margin_calculation::MarginCalculation);
        _825 = _847;
        StorageDead(_847);
        StorageDead(_837);
        StorageDead(_835);
        StorageDead(_833);
        StorageDead(_831);
        StorageDead(_829);
        StorageDead(_826);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        _852 = &_825;
        _851 = MarginCalculation::meets_margin_requirement(move _852) -> [return: bb370, unwind: bb541];
    }

    bb368: {
        StorageLive(_844);
        _844 = ((_826 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_846);
        _846 = _844;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _846) -> [return: bb369, unwind: bb541];
    }

    bb369: {
        StorageDead(_846);
        StorageDead(_844);
        StorageDead(_837);
        StorageDead(_835);
        StorageDead(_833);
        StorageDead(_831);
        StorageDead(_829);
        StorageDead(_826);
        goto -> bb488;
    }

    bb370: {
        switchInt(move _851) -> [0: bb372, otherwise: bb371];
    }

    bb371: {
        StorageDead(_852);
        StorageLive(_853);
        _853 = ();
        _850 = std::result::Result::<(), error::ErrorCode>::Ok(move _853);
        StorageDead(_853);
        goto -> bb380;
    }

    bb372: {
        StorageDead(_852);
        StorageLive(_854);
        _854 = error::ErrorCode::InsufficientCollateral;
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        StorageLive(_864);
        StorageLive(_865);
        _1171 = const _;
        _865 = &(*_1171);
        _864 = &(*_865);
        _863 = move _864 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_864);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        _873 = &_854;
        _872 = &(*_873);
        _871 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _872) -> [return: bb373, unwind: bb541];
    }

    bb373: {
        StorageDead(_872);
        _870 = [move _871];
        StorageDead(_871);
        _869 = &_870;
        _868 = &(*_869);
        _867 = move _868 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_868);
        _862 = Arguments::<'_>::new_v1(move _863, move _867) -> [return: bb374, unwind: bb541];
    }

    bb374: {
        StorageDead(_867);
        StorageDead(_863);
        _861 = format(move _862) -> [return: bb375, unwind: bb541];
    }

    bb375: {
        StorageDead(_862);
        StorageDead(_873);
        StorageDead(_870);
        StorageDead(_869);
        StorageDead(_865);
        _860 = move _861;
        StorageDead(_861);
        _859 = &_860;
        _858 = &(*_859);
        _857 = <String as Deref>::deref(move _858) -> [return: bb376, unwind: bb529];
    }

    bb376: {
        _856 = &(*_857);
        StorageDead(_858);
        _855 = solana_program::log::sol_log(move _856) -> [return: bb377, unwind: bb529];
    }

    bb377: {
        StorageDead(_856);
        drop(_860) -> [return: bb378, unwind: bb541];
    }

    bb378: {
        StorageDead(_860);
        StorageDead(_859);
        StorageDead(_857);
        StorageDead(_855);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        _876 = const "from user margin requirement is greater than total collateral";
        _875 = &(*_876);
        _874 = solana_program::log::sol_log(move _875) -> [return: bb379, unwind: bb541];
    }

    bb379: {
        StorageDead(_875);
        StorageDead(_876);
        StorageDead(_874);
        StorageLive(_877);
        _877 = _854;
        _850 = std::result::Result::<(), error::ErrorCode>::Err(move _877);
        StorageDead(_877);
        StorageDead(_854);
        goto -> bb380;
    }

    bb380: {
        StorageDead(_851);
        _849 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _850) -> [return: bb381, unwind: bb541];
    }

    bb381: {
        StorageDead(_850);
        _878 = discriminant(_849);
        switchInt(move _878) -> [0: bb382, 1: bb383, otherwise: bb4];
    }

    bb382: {
        StorageLive(_882);
        _882 = ((_849 as Continue).0: ());
        _848 = _882;
        StorageDead(_882);
        StorageDead(_849);
        StorageDead(_848);
        StorageLive(_883);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        _889 = &_28;
        _1195 = deref_copy (*_889);
        _888 = &(*_1195);
        _887 = <RefMut<'_, User> as Deref>::deref(move _888) -> [return: bb385, unwind: bb541];
    }

    bb383: {
        StorageLive(_879);
        _879 = ((_849 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_881);
        _881 = _879;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _881) -> [return: bb384, unwind: bb541];
    }

    bb384: {
        StorageDead(_881);
        StorageDead(_879);
        StorageDead(_849);
        StorageDead(_848);
        goto -> bb488;
    }

    bb385: {
        _886 = &(*_887);
        StorageDead(_888);
        StorageLive(_890);
        StorageLive(_891);
        _891 = &_171;
        _890 = &(*_891);
        StorageLive(_892);
        StorageLive(_893);
        _893 = &_172;
        _892 = &(*_893);
        StorageLive(_894);
        StorageLive(_895);
        _895 = &mut _173;
        _894 = &mut (*_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        _898 = math::margin::MarginRequirementType::Initial;
        _897 = MarginContext::standard(move _898) -> [return: bb386, unwind: bb541];
    }

    bb386: {
        StorageDead(_898);
        StorageLive(_899);
        _899 = _2;
        StorageLive(_900);
        StorageLive(_901);
        _901 = _421;
        _902 = Eq(_901, const i64::MIN);
        assert(!move _902, "attempt to negate `{}`, which would overflow", _901) -> [success: bb387, unwind: bb541];
    }

    bb387: {
        _900 = Neg(move _901);
        StorageDead(_901);
        _896 = MarginContext::fuel_perp_delta(move _897, move _899, move _900) -> [return: bb388, unwind: bb541];
    }

    bb388: {
        StorageDead(_900);
        StorageDead(_899);
        StorageDead(_897);
        _885 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _886, move _890, move _892, move _894, move _896) -> [return: bb389, unwind: bb541];
    }

    bb389: {
        StorageDead(_896);
        StorageDead(_894);
        StorageDead(_892);
        StorageDead(_890);
        StorageDead(_886);
        _884 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _885) -> [return: bb390, unwind: bb541];
    }

    bb390: {
        StorageDead(_885);
        _903 = discriminant(_884);
        switchInt(move _903) -> [0: bb391, 1: bb392, otherwise: bb4];
    }

    bb391: {
        StorageLive(_907);
        _907 = ((_884 as Continue).0: state::margin_calculation::MarginCalculation);
        _883 = _907;
        StorageDead(_907);
        StorageDead(_895);
        StorageDead(_893);
        StorageDead(_891);
        StorageDead(_889);
        StorageDead(_887);
        StorageDead(_884);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        _912 = &_883;
        _911 = MarginCalculation::meets_margin_requirement(move _912) -> [return: bb394, unwind: bb541];
    }

    bb392: {
        StorageLive(_904);
        _904 = ((_884 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_906);
        _906 = _904;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _906) -> [return: bb393, unwind: bb541];
    }

    bb393: {
        StorageDead(_906);
        StorageDead(_904);
        StorageDead(_895);
        StorageDead(_893);
        StorageDead(_891);
        StorageDead(_889);
        StorageDead(_887);
        StorageDead(_884);
        goto -> bb487;
    }

    bb394: {
        switchInt(move _911) -> [0: bb396, otherwise: bb395];
    }

    bb395: {
        StorageDead(_912);
        StorageLive(_913);
        _913 = ();
        _910 = std::result::Result::<(), error::ErrorCode>::Ok(move _913);
        StorageDead(_913);
        goto -> bb404;
    }

    bb396: {
        StorageDead(_912);
        StorageLive(_914);
        _914 = error::ErrorCode::InsufficientCollateral;
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        _1170 = const _;
        _925 = &(*_1170);
        _924 = &(*_925);
        _923 = move _924 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_924);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        _933 = &_914;
        _932 = &(*_933);
        _931 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _932) -> [return: bb397, unwind: bb541];
    }

    bb397: {
        StorageDead(_932);
        _930 = [move _931];
        StorageDead(_931);
        _929 = &_930;
        _928 = &(*_929);
        _927 = move _928 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_928);
        _922 = Arguments::<'_>::new_v1(move _923, move _927) -> [return: bb398, unwind: bb541];
    }

    bb398: {
        StorageDead(_927);
        StorageDead(_923);
        _921 = format(move _922) -> [return: bb399, unwind: bb541];
    }

    bb399: {
        StorageDead(_922);
        StorageDead(_933);
        StorageDead(_930);
        StorageDead(_929);
        StorageDead(_925);
        _920 = move _921;
        StorageDead(_921);
        _919 = &_920;
        _918 = &(*_919);
        _917 = <String as Deref>::deref(move _918) -> [return: bb400, unwind: bb528];
    }

    bb400: {
        _916 = &(*_917);
        StorageDead(_918);
        _915 = solana_program::log::sol_log(move _916) -> [return: bb401, unwind: bb528];
    }

    bb401: {
        StorageDead(_916);
        drop(_920) -> [return: bb402, unwind: bb541];
    }

    bb402: {
        StorageDead(_920);
        StorageDead(_919);
        StorageDead(_917);
        StorageDead(_915);
        StorageLive(_934);
        StorageLive(_935);
        StorageLive(_936);
        _936 = const "to user margin requirement is greater than total collateral";
        _935 = &(*_936);
        _934 = solana_program::log::sol_log(move _935) -> [return: bb403, unwind: bb541];
    }

    bb403: {
        StorageDead(_935);
        StorageDead(_936);
        StorageDead(_934);
        StorageLive(_937);
        _937 = _914;
        _910 = std::result::Result::<(), error::ErrorCode>::Err(move _937);
        StorageDead(_937);
        StorageDead(_914);
        goto -> bb404;
    }

    bb404: {
        StorageDead(_911);
        _909 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _910) -> [return: bb405, unwind: bb541];
    }

    bb405: {
        StorageDead(_910);
        _938 = discriminant(_909);
        switchInt(move _938) -> [0: bb406, 1: bb407, otherwise: bb4];
    }

    bb406: {
        StorageLive(_942);
        _942 = ((_909 as Continue).0: ());
        _908 = _942;
        StorageDead(_942);
        StorageDead(_909);
        StorageDead(_908);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        StorageLive(_946);
        _946 = &_171;
        StorageLive(_947);
        StorageLive(_948);
        _948 = &_2;
        _947 = &(*_948);
        _945 = PerpMarketMap::<'_>::get_ref_mut(move _946, move _947) -> [return: bb409, unwind: bb541];
    }

    bb407: {
        StorageLive(_939);
        _939 = ((_909 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_941);
        _941 = _939;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _941) -> [return: bb408, unwind: bb541];
    }

    bb408: {
        StorageDead(_941);
        StorageDead(_939);
        StorageDead(_909);
        StorageDead(_908);
        goto -> bb487;
    }

    bb409: {
        StorageDead(_947);
        StorageDead(_946);
        _944 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _945) -> [return: bb410, unwind: bb541];
    }

    bb410: {
        StorageDead(_945);
        _949 = discriminant(_944);
        switchInt(move _949) -> [0: bb411, 1: bb412, otherwise: bb4];
    }

    bb411: {
        StorageLive(_953);
        _953 = move ((_944 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _943 = move _953;
        StorageDead(_953);
        _1230 = discriminant(_944);
        StorageDead(_948);
        StorageDead(_944);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        _957 = &_943;
        _956 = <RefMut<'_, PerpMarket> as Deref>::deref(move _957) -> [return: bb414, unwind: bb527];
    }

    bb412: {
        StorageLive(_950);
        _950 = ((_944 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_952);
        _952 = _950;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _952) -> [return: bb413, unwind: bb556];
    }

    bb413: {
        StorageDead(_952);
        StorageDead(_950);
        _1228 = discriminant(_944);
        StorageDead(_948);
        StorageDead(_944);
        goto -> bb486;
    }

    bb414: {
        _955 = &(*_956);
        StorageDead(_957);
        _954 = PerpMarket::get_open_interest(move _955) -> [return: bb415, unwind: bb527];
    }

    bb415: {
        StorageDead(_955);
        StorageDead(_956);
        StorageLive(_958);
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        _962 = _954;
        StorageLive(_963);
        _963 = _276;
        _961 = Le(move _962, move _963);
        switchInt(move _961) -> [0: bb417, otherwise: bb416];
    }

    bb416: {
        StorageDead(_963);
        StorageDead(_962);
        StorageLive(_964);
        _964 = ();
        _960 = std::result::Result::<(), error::ErrorCode>::Ok(move _964);
        StorageDead(_964);
        goto -> bb431;
    }

    bb417: {
        StorageDead(_963);
        StorageDead(_962);
        StorageLive(_965);
        _965 = error::ErrorCode::InvalidTransferPerpPosition;
        StorageLive(_966);
        StorageLive(_967);
        StorageLive(_968);
        StorageLive(_969);
        StorageLive(_970);
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        StorageLive(_975);
        StorageLive(_976);
        _1169 = const _;
        _976 = &(*_1169);
        _975 = &(*_976);
        _974 = move _975 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_975);
        StorageLive(_978);
        StorageLive(_979);
        StorageLive(_980);
        StorageLive(_981);
        StorageLive(_982);
        StorageLive(_983);
        StorageLive(_984);
        _984 = &_965;
        _983 = &(*_984);
        _982 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _983) -> [return: bb418, unwind: bb527];
    }

    bb418: {
        StorageDead(_983);
        _981 = [move _982];
        StorageDead(_982);
        _980 = &_981;
        _979 = &(*_980);
        _978 = move _979 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_979);
        _973 = Arguments::<'_>::new_v1(move _974, move _978) -> [return: bb419, unwind: bb527];
    }

    bb419: {
        StorageDead(_978);
        StorageDead(_974);
        _972 = format(move _973) -> [return: bb420, unwind: bb527];
    }

    bb420: {
        StorageDead(_973);
        StorageDead(_984);
        StorageDead(_981);
        StorageDead(_980);
        StorageDead(_976);
        _971 = move _972;
        StorageDead(_972);
        _970 = &_971;
        _969 = &(*_970);
        _968 = <String as Deref>::deref(move _969) -> [return: bb421, unwind: bb526];
    }

    bb421: {
        _967 = &(*_968);
        StorageDead(_969);
        _966 = solana_program::log::sol_log(move _967) -> [return: bb422, unwind: bb526];
    }

    bb422: {
        StorageDead(_967);
        drop(_971) -> [return: bb423, unwind: bb527];
    }

    bb423: {
        StorageDead(_971);
        StorageDead(_970);
        StorageDead(_968);
        StorageDead(_966);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        StorageLive(_994);
        StorageLive(_995);
        _1168 = const _;
        _995 = &(*_1168);
        _994 = &(*_995);
        _993 = move _994 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_994);
        StorageLive(_997);
        StorageLive(_998);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        _1003 = &_276;
        _1002 = &(*_1003);
        _1001 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1002) -> [return: bb424, unwind: bb527];
    }

    bb424: {
        StorageDead(_1002);
        StorageLive(_1004);
        StorageLive(_1005);
        StorageLive(_1006);
        _1006 = &_954;
        _1005 = &(*_1006);
        _1004 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1005) -> [return: bb425, unwind: bb527];
    }

    bb425: {
        StorageDead(_1005);
        _1000 = [move _1001, move _1004];
        StorageDead(_1004);
        StorageDead(_1001);
        _999 = &_1000;
        _998 = &(*_999);
        _997 = move _998 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_998);
        _992 = Arguments::<'_>::new_v1(move _993, move _997) -> [return: bb426, unwind: bb527];
    }

    bb426: {
        StorageDead(_997);
        StorageDead(_993);
        _991 = format(move _992) -> [return: bb427, unwind: bb527];
    }

    bb427: {
        StorageDead(_992);
        StorageDead(_1006);
        StorageDead(_1003);
        StorageDead(_1000);
        StorageDead(_999);
        StorageDead(_995);
        _990 = move _991;
        StorageDead(_991);
        _989 = &_990;
        _988 = &(*_989);
        _987 = <String as Deref>::deref(move _988) -> [return: bb428, unwind: bb525];
    }

    bb428: {
        _986 = &(*_987);
        StorageDead(_988);
        _985 = solana_program::log::sol_log(move _986) -> [return: bb429, unwind: bb525];
    }

    bb429: {
        StorageDead(_986);
        drop(_990) -> [return: bb430, unwind: bb527];
    }

    bb430: {
        StorageDead(_990);
        StorageDead(_989);
        StorageDead(_987);
        StorageDead(_985);
        StorageLive(_1007);
        _1007 = _965;
        _960 = std::result::Result::<(), error::ErrorCode>::Err(move _1007);
        StorageDead(_1007);
        StorageDead(_965);
        goto -> bb431;
    }

    bb431: {
        StorageDead(_961);
        _959 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _960) -> [return: bb432, unwind: bb527];
    }

    bb432: {
        StorageDead(_960);
        _1008 = discriminant(_959);
        switchInt(move _1008) -> [0: bb433, 1: bb434, otherwise: bb4];
    }

    bb433: {
        StorageLive(_1012);
        _1012 = ((_959 as Continue).0: ());
        _958 = _1012;
        StorageDead(_1012);
        StorageDead(_959);
        StorageDead(_958);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        _1016 = &mut (*_40);
        _1015 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1016) -> [return: bb436, unwind: bb527];
    }

    bb434: {
        StorageLive(_1009);
        _1009 = ((_959 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1011);
        _1011 = _1009;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1011) -> [return: bb435, unwind: bb527];
    }

    bb435: {
        StorageDead(_1011);
        StorageDead(_1009);
        StorageDead(_959);
        StorageDead(_958);
        goto -> bb485;
    }

    bb436: {
        _1014 = &mut (*_1015);
        StorageDead(_1016);
        StorageLive(_1017);
        _1017 = _27;
        _1013 = User::update_last_active_slot(move _1014, move _1017) -> [return: bb437, unwind: bb527];
    }

    bb437: {
        StorageDead(_1017);
        StorageDead(_1014);
        StorageDead(_1015);
        StorageDead(_1013);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        _1021 = &mut (*_28);
        _1020 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1021) -> [return: bb438, unwind: bb527];
    }

    bb438: {
        _1019 = &mut (*_1020);
        StorageDead(_1021);
        StorageLive(_1022);
        _1022 = _27;
        _1018 = User::update_last_active_slot(move _1019, move _1022) -> [return: bb439, unwind: bb527];
    }

    bb439: {
        StorageDead(_1022);
        StorageDead(_1019);
        StorageDead(_1020);
        StorageDead(_1018);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        _1026 = &(*_40);
        _1025 = <RefMut<'_, User> as Deref>::deref(move _1026) -> [return: bb440, unwind: bb527];
    }

    bb440: {
        StorageDead(_1026);
        _1024 = ((*_1025).15: u32);
        StorageDead(_1025);
        StorageLive(_1027);
        StorageLive(_1028);
        StorageLive(_1029);
        StorageLive(_1030);
        _1030 = _1024;
        _1029 = core::num::<impl u32>::checked_add(move _1030, const 1_u32) -> [return: bb441, unwind: bb527];
    }

    bb441: {
        StorageDead(_1030);
        StorageLive(_1031);
        _1031 = Option::<u32>::Some(const 1_u32);
        _1028 = Option::<u32>::or(move _1029, move _1031) -> [return: bb442, unwind: bb527];
    }

    bb442: {
        StorageDead(_1031);
        StorageDead(_1029);
        _1027 = Option::<u32>::unwrap(move _1028) -> [return: bb443, unwind: bb527];
    }

    bb443: {
        StorageDead(_1028);
        StorageLive(_1032);
        StorageLive(_1033);
        _1033 = &mut (*_40);
        _1032 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1033) -> [return: bb444, unwind: bb527];
    }

    bb444: {
        StorageDead(_1033);
        ((*_1032).15: u32) = move _1027;
        StorageDead(_1027);
        StorageDead(_1032);
        _1023 = _1024;
        StorageDead(_1024);
        StorageLive(_1034);
        StorageLive(_1035);
        _1035 = _27;
        StorageLive(_1036);
        _1036 = _657;
        StorageLive(_1037);
        _1037 = _1023;
        StorageLive(_1038);
        _1038 = _2;
        StorageLive(_1039);
        _1039 = OrderStatus::Open;
        StorageLive(_1040);
        _1040 = state::user::OrderType::Limit;
        StorageLive(_1041);
        _1041 = state::user::MarketType::Perp;
        StorageLive(_1042);
        StorageLive(_1043);
        _1043 = _612;
        _1042 = core::num::<impl i64>::unsigned_abs(move _1043) -> [return: bb445, unwind: bb527];
    }

    bb445: {
        StorageDead(_1043);
        StorageLive(_1044);
        _1044 = _422;
        StorageLive(_1045);
        StorageLive(_1046);
        _1046 = &_422;
        _1045 = controller::position::PositionDirection::opposite(move _1046) -> [return: bb446, unwind: bb527];
    }

    bb446: {
        StorageDead(_1046);
        StorageLive(_1047);
        _1047 = <Order as Default>::default() -> [return: bb447, unwind: bb527];
    }

    bb447: {
        _1034 = Order { slot: move _1035, price: move _1042, base_asset_amount: move _1036, base_asset_amount_filled: (_1047.3: u64), quote_asset_amount_filled: (_1047.4: u64), trigger_price: (_1047.5: u64), auction_start_price: (_1047.6: i64), auction_end_price: (_1047.7: i64), max_ts: (_1047.8: i64), oracle_price_offset: (_1047.9: i32), order_id: move _1037, market_index: move _1038, status: move _1039, order_type: move _1040, market_type: move _1041, user_order_id: (_1047.15: u8), existing_position_direction: move _1045, direction: move _1044, reduce_only: (_1047.18: bool), post_only: (_1047.19: bool), immediate_or_cancel: (_1047.20: bool), trigger_condition: (_1047.21: state::user::OrderTriggerCondition), auction_duration: (_1047.22: u8), posted_slot_tail: (_1047.23: u8), bit_flags: (_1047.24: u8), padding: (_1047.25: [u8; 1]) };
        StorageDead(_1045);
        StorageDead(_1044);
        StorageDead(_1042);
        StorageDead(_1041);
        StorageDead(_1040);
        StorageDead(_1039);
        StorageDead(_1038);
        StorageDead(_1037);
        StorageDead(_1036);
        StorageDead(_1035);
        StorageDead(_1047);
        StorageLive(_1048);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        _1052 = _60;
        StorageLive(_1053);
        _1053 = _16;
        StorageLive(_1054);
        _1054 = _1034;
        _1051 = OrderRecord { ts: move _1052, user: move _1053, order: move _1054 };
        StorageDead(_1054);
        StorageDead(_1053);
        StorageDead(_1052);
        _1050 = emit_stack::<OrderRecord, 192>(move _1051) -> [return: bb448, unwind: bb527];
    }

    bb448: {
        StorageDead(_1051);
        _1049 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1050) -> [return: bb449, unwind: bb527];
    }

    bb449: {
        StorageDead(_1050);
        _1055 = discriminant(_1049);
        switchInt(move _1055) -> [0: bb450, 1: bb451, otherwise: bb4];
    }

    bb450: {
        StorageLive(_1059);
        _1059 = ((_1049 as Continue).0: ());
        _1048 = _1059;
        StorageDead(_1059);
        StorageDead(_1049);
        StorageDead(_1048);
        StorageLive(_1060);
        StorageLive(_1061);
        StorageLive(_1062);
        StorageLive(_1063);
        _1063 = &(*_28);
        _1062 = <RefMut<'_, User> as Deref>::deref(move _1063) -> [return: bb453, unwind: bb527];
    }

    bb451: {
        StorageLive(_1056);
        _1056 = ((_1049 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1058);
        _1058 = _1056;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1058) -> [return: bb452, unwind: bb527];
    }

    bb452: {
        StorageDead(_1058);
        StorageDead(_1056);
        StorageDead(_1049);
        StorageDead(_1048);
        goto -> bb484;
    }

    bb453: {
        StorageDead(_1063);
        _1061 = ((*_1062).15: u32);
        StorageDead(_1062);
        StorageLive(_1064);
        StorageLive(_1065);
        StorageLive(_1066);
        StorageLive(_1067);
        _1067 = _1061;
        _1066 = core::num::<impl u32>::checked_add(move _1067, const 1_u32) -> [return: bb454, unwind: bb527];
    }

    bb454: {
        StorageDead(_1067);
        StorageLive(_1068);
        _1068 = Option::<u32>::Some(const 1_u32);
        _1065 = Option::<u32>::or(move _1066, move _1068) -> [return: bb455, unwind: bb527];
    }

    bb455: {
        StorageDead(_1068);
        StorageDead(_1066);
        _1064 = Option::<u32>::unwrap(move _1065) -> [return: bb456, unwind: bb527];
    }

    bb456: {
        StorageDead(_1065);
        StorageLive(_1069);
        StorageLive(_1070);
        _1070 = &mut (*_28);
        _1069 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1070) -> [return: bb457, unwind: bb527];
    }

    bb457: {
        StorageDead(_1070);
        ((*_1069).15: u32) = move _1064;
        StorageDead(_1064);
        StorageDead(_1069);
        _1060 = _1061;
        StorageDead(_1061);
        StorageLive(_1071);
        StorageLive(_1072);
        _1072 = _27;
        StorageLive(_1073);
        _1073 = _657;
        StorageLive(_1074);
        _1074 = _1060;
        StorageLive(_1075);
        _1075 = _2;
        StorageLive(_1076);
        _1076 = OrderStatus::Open;
        StorageLive(_1077);
        _1077 = state::user::OrderType::Limit;
        StorageLive(_1078);
        _1078 = state::user::MarketType::Perp;
        StorageLive(_1079);
        StorageLive(_1080);
        _1080 = _612;
        _1079 = core::num::<impl i64>::unsigned_abs(move _1080) -> [return: bb458, unwind: bb527];
    }

    bb458: {
        StorageDead(_1080);
        StorageLive(_1081);
        StorageLive(_1082);
        _1082 = &_422;
        _1081 = controller::position::PositionDirection::opposite(move _1082) -> [return: bb459, unwind: bb527];
    }

    bb459: {
        StorageDead(_1082);
        StorageLive(_1083);
        _1083 = _682;
        StorageLive(_1084);
        _1084 = <Order as Default>::default() -> [return: bb460, unwind: bb527];
    }

    bb460: {
        _1071 = Order { slot: move _1072, price: move _1079, base_asset_amount: move _1073, base_asset_amount_filled: (_1084.3: u64), quote_asset_amount_filled: (_1084.4: u64), trigger_price: (_1084.5: u64), auction_start_price: (_1084.6: i64), auction_end_price: (_1084.7: i64), max_ts: (_1084.8: i64), oracle_price_offset: (_1084.9: i32), order_id: move _1074, market_index: move _1075, status: move _1076, order_type: move _1077, market_type: move _1078, user_order_id: (_1084.15: u8), existing_position_direction: move _1083, direction: move _1081, reduce_only: (_1084.18: bool), post_only: (_1084.19: bool), immediate_or_cancel: (_1084.20: bool), trigger_condition: (_1084.21: state::user::OrderTriggerCondition), auction_duration: (_1084.22: u8), posted_slot_tail: (_1084.23: u8), bit_flags: (_1084.24: u8), padding: (_1084.25: [u8; 1]) };
        StorageDead(_1083);
        StorageDead(_1081);
        StorageDead(_1079);
        StorageDead(_1078);
        StorageDead(_1077);
        StorageDead(_1076);
        StorageDead(_1075);
        StorageDead(_1074);
        StorageDead(_1073);
        StorageDead(_1072);
        StorageDead(_1084);
        StorageLive(_1085);
        StorageLive(_1086);
        StorageLive(_1087);
        StorageLive(_1088);
        StorageLive(_1089);
        _1089 = _60;
        StorageLive(_1090);
        _1090 = _14;
        StorageLive(_1091);
        _1091 = _1071;
        _1088 = OrderRecord { ts: move _1089, user: move _1090, order: move _1091 };
        StorageDead(_1091);
        StorageDead(_1090);
        StorageDead(_1089);
        _1087 = emit_stack::<OrderRecord, 192>(move _1088) -> [return: bb461, unwind: bb527];
    }

    bb461: {
        StorageDead(_1088);
        _1086 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1087) -> [return: bb462, unwind: bb527];
    }

    bb462: {
        StorageDead(_1087);
        _1092 = discriminant(_1086);
        switchInt(move _1092) -> [0: bb463, 1: bb464, otherwise: bb4];
    }

    bb463: {
        StorageLive(_1096);
        _1096 = ((_1086 as Continue).0: ());
        _1085 = _1096;
        StorageDead(_1096);
        StorageDead(_1086);
        StorageDead(_1085);
        StorageLive(_1097);
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        _1100 = &_943;
        _1099 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1100) -> [return: bb466, unwind: bb527];
    }

    bb464: {
        StorageLive(_1093);
        _1093 = ((_1086 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1095);
        _1095 = _1093;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1095) -> [return: bb465, unwind: bb527];
    }

    bb465: {
        StorageDead(_1095);
        StorageDead(_1093);
        StorageDead(_1086);
        StorageDead(_1085);
        goto -> bb483;
    }

    bb466: {
        StorageDead(_1100);
        _1098 = ((*_1099).8: u64);
        StorageDead(_1099);
        StorageLive(_1101);
        StorageLive(_1102);
        StorageLive(_1103);
        StorageLive(_1104);
        _1104 = _1098;
        _1103 = core::num::<impl u64>::checked_add(move _1104, const 1_u64) -> [return: bb467, unwind: bb527];
    }

    bb467: {
        StorageDead(_1104);
        StorageLive(_1105);
        _1105 = Option::<u64>::Some(const 1_u64);
        _1102 = Option::<u64>::or(move _1103, move _1105) -> [return: bb468, unwind: bb527];
    }

    bb468: {
        StorageDead(_1105);
        StorageDead(_1103);
        _1101 = Option::<u64>::unwrap(move _1102) -> [return: bb469, unwind: bb527];
    }

    bb469: {
        StorageDead(_1102);
        StorageLive(_1106);
        StorageLive(_1107);
        _1107 = &mut _943;
        _1106 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1107) -> [return: bb470, unwind: bb527];
    }

    bb470: {
        StorageDead(_1107);
        ((*_1106).8: u64) = move _1101;
        StorageDead(_1101);
        StorageDead(_1106);
        _1097 = _1098;
        StorageDead(_1098);
        StorageLive(_1108);
        StorageLive(_1109);
        _1109 = _60;
        StorageLive(_1110);
        _1110 = OrderAction::Fill;
        StorageLive(_1111);
        _1111 = OrderActionExplanation::TransferPerpPosition;
        StorageLive(_1112);
        _1112 = _2;
        StorageLive(_1113);
        _1113 = state::user::MarketType::Perp;
        StorageLive(_1114);
        _1114 = Option::<anchor_lang::prelude::Pubkey>::None;
        StorageLive(_1115);
        _1115 = Option::<u64>::None;
        StorageLive(_1116);
        StorageLive(_1117);
        _1117 = _1097;
        _1116 = Option::<u64>::Some(move _1117);
        StorageDead(_1117);
        StorageLive(_1118);
        StorageLive(_1119);
        _1119 = _657;
        _1118 = Option::<u64>::Some(move _1119);
        StorageDead(_1119);
        StorageLive(_1120);
        StorageLive(_1121);
        _1121 = _631;
        _1120 = Option::<u64>::Some(move _1121);
        StorageDead(_1121);
        StorageLive(_1122);
        _1122 = Option::<u64>::None;
        StorageLive(_1123);
        _1123 = Option::<i64>::None;
        StorageLive(_1124);
        _1124 = Option::<u32>::None;
        StorageLive(_1125);
        _1125 = Option::<i64>::None;
        StorageLive(_1126);
        _1126 = Option::<u64>::None;
        StorageLive(_1127);
        StorageLive(_1128);
        _1128 = _14;
        _1127 = Option::<anchor_lang::prelude::Pubkey>::Some(move _1128);
        StorageDead(_1128);
        StorageLive(_1129);
        StorageLive(_1130);
        _1130 = _1060;
        _1129 = Option::<u32>::Some(move _1130);
        StorageDead(_1130);
        StorageLive(_1131);
        StorageLive(_1132);
        StorageLive(_1133);
        _1133 = &_422;
        _1132 = controller::position::PositionDirection::opposite(move _1133) -> [return: bb471, unwind: bb527];
    }

    bb471: {
        StorageDead(_1133);
        _1131 = Option::<controller::position::PositionDirection>::Some(move _1132);
        StorageDead(_1132);
        StorageLive(_1134);
        StorageLive(_1135);
        _1135 = _657;
        _1134 = Option::<u64>::Some(move _1135);
        StorageDead(_1135);
        StorageLive(_1136);
        StorageLive(_1137);
        _1137 = _657;
        _1136 = Option::<u64>::Some(move _1137);
        StorageDead(_1137);
        StorageLive(_1138);
        StorageLive(_1139);
        _1139 = _631;
        _1138 = Option::<u64>::Some(move _1139);
        StorageDead(_1139);
        StorageLive(_1140);
        StorageLive(_1141);
        _1141 = _16;
        _1140 = Option::<anchor_lang::prelude::Pubkey>::Some(move _1141);
        StorageDead(_1141);
        StorageLive(_1142);
        StorageLive(_1143);
        _1143 = _1023;
        _1142 = Option::<u32>::Some(move _1143);
        StorageDead(_1143);
        StorageLive(_1144);
        StorageLive(_1145);
        _1145 = _422;
        _1144 = Option::<controller::position::PositionDirection>::Some(move _1145);
        StorageDead(_1145);
        StorageLive(_1146);
        StorageLive(_1147);
        _1147 = _657;
        _1146 = Option::<u64>::Some(move _1147);
        StorageDead(_1147);
        StorageLive(_1148);
        StorageLive(_1149);
        _1149 = _657;
        _1148 = Option::<u64>::Some(move _1149);
        StorageDead(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        _1151 = _631;
        _1150 = Option::<u64>::Some(move _1151);
        StorageDead(_1151);
        StorageLive(_1152);
        _1152 = _277;
        StorageLive(_1153);
        _1153 = _698;
        StorageLive(_1154);
        _1154 = _699;
        StorageLive(_1155);
        _1155 = _696;
        StorageLive(_1156);
        _1156 = _697;
        StorageLive(_1157);
        _1157 = Option::<u64>::None;
        _1108 = OrderActionRecord { ts: move _1109, action: move _1110, action_explanation: move _1111, market_index: move _1112, market_type: move _1113, filler: move _1114, filler_reward: move _1115, fill_record_id: move _1116, base_asset_amount_filled: move _1118, quote_asset_amount_filled: move _1120, taker_fee: move _1122, maker_fee: move _1123, referrer_reward: move _1124, quote_asset_amount_surplus: move _1125, spot_fulfillment_method_fee: move _1126, taker: move _1127, taker_order_id: move _1129, taker_order_direction: move _1131, taker_order_base_asset_amount: move _1134, taker_order_cumulative_base_asset_amount_filled: move _1136, taker_order_cumulative_quote_asset_amount_filled: move _1138, maker: move _1140, maker_order_id: move _1142, maker_order_direction: move _1144, maker_order_base_asset_amount: move _1146, maker_order_cumulative_base_asset_amount_filled: move _1148, maker_order_cumulative_quote_asset_amount_filled: move _1150, oracle_price: move _1152, bit_flags: const 0_u8, taker_existing_quote_entry_amount: move _1153, taker_existing_base_asset_amount: move _1154, maker_existing_quote_entry_amount: move _1155, maker_existing_base_asset_amount: move _1156, trigger_price: move _1157 };
        StorageDead(_1157);
        StorageDead(_1156);
        StorageDead(_1155);
        StorageDead(_1154);
        StorageDead(_1153);
        StorageDead(_1152);
        StorageDead(_1150);
        StorageDead(_1148);
        StorageDead(_1146);
        StorageDead(_1144);
        StorageDead(_1142);
        StorageDead(_1140);
        StorageDead(_1138);
        StorageDead(_1136);
        StorageDead(_1134);
        StorageDead(_1131);
        StorageDead(_1129);
        StorageDead(_1127);
        StorageDead(_1126);
        StorageDead(_1125);
        StorageDead(_1124);
        StorageDead(_1123);
        StorageDead(_1122);
        StorageDead(_1120);
        StorageDead(_1118);
        StorageDead(_1116);
        StorageDead(_1115);
        StorageDead(_1114);
        StorageDead(_1113);
        StorageDead(_1112);
        StorageDead(_1111);
        StorageDead(_1110);
        StorageDead(_1109);
        StorageLive(_1158);
        StorageLive(_1159);
        StorageLive(_1160);
        StorageLive(_1161);
        _1161 = move _1108;
        _1160 = emit_stack::<OrderActionRecord, 464>(move _1161) -> [return: bb472, unwind: bb527];
    }

    bb472: {
        StorageDead(_1161);
        _1159 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1160) -> [return: bb473, unwind: bb527];
    }

    bb473: {
        StorageDead(_1160);
        _1162 = discriminant(_1159);
        switchInt(move _1162) -> [0: bb474, 1: bb475, otherwise: bb4];
    }

    bb474: {
        StorageLive(_1166);
        _1166 = ((_1159 as Continue).0: ());
        _1158 = _1166;
        StorageDead(_1166);
        StorageDead(_1159);
        StorageDead(_1158);
        StorageLive(_1167);
        _1167 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _1167);
        StorageDead(_1167);
        StorageDead(_1108);
        StorageDead(_1097);
        StorageDead(_1071);
        StorageDead(_1060);
        StorageDead(_1034);
        StorageDead(_1023);
        StorageDead(_954);
        drop(_943) -> [return: bb477, unwind: bb541];
    }

    bb475: {
        StorageLive(_1163);
        _1163 = ((_1159 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1165);
        _1165 = _1163;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1165) -> [return: bb476, unwind: bb527];
    }

    bb476: {
        StorageDead(_1165);
        StorageDead(_1163);
        StorageDead(_1159);
        StorageDead(_1158);
        StorageDead(_1108);
        StorageDead(_1097);
        goto -> bb483;
    }

    bb477: {
        StorageDead(_943);
        StorageDead(_883);
        StorageDead(_825);
        StorageDead(_699);
        StorageDead(_698);
        StorageDead(_697);
        StorageDead(_696);
        StorageDead(_682);
        StorageDead(_670);
        StorageDead(_659);
        StorageDead(_657);
        StorageDead(_631);
        StorageDead(_612);
        StorageDead(_422);
        StorageDead(_421);
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_276);
        drop(_173) -> [return: bb478, unwind: bb542];
    }

    bb478: {
        StorageDead(_173);
        drop(_172) -> [return: bb479, unwind: bb543];
    }

    bb479: {
        StorageDead(_172);
        drop(_171) -> [return: bb480, unwind: bb549];
    }

    bb480: {
        StorageDead(_171);
        StorageDead(_60);
        StorageDead(_52);
        drop(_41) -> [return: bb481, unwind: bb550];
    }

    bb481: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_29) -> [return: bb482, unwind: bb551];
    }

    bb482: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb524;
    }

    bb483: {
        StorageDead(_1071);
        StorageDead(_1060);
        goto -> bb484;
    }

    bb484: {
        StorageDead(_1034);
        StorageDead(_1023);
        goto -> bb485;
    }

    bb485: {
        StorageDead(_954);
        drop(_943) -> [return: bb486, unwind: bb541];
    }

    bb486: {
        StorageDead(_943);
        goto -> bb487;
    }

    bb487: {
        StorageDead(_883);
        goto -> bb488;
    }

    bb488: {
        StorageDead(_825);
        StorageDead(_699);
        StorageDead(_698);
        StorageDead(_697);
        StorageDead(_696);
        goto -> bb494;
    }

    bb489: {
        StorageDead(_766);
        StorageDead(_765);
        goto -> bb490;
    }

    bb490: {
        StorageDead(_753);
        goto -> bb491;
    }

    bb491: {
        StorageDead(_725);
        StorageDead(_724);
        goto -> bb492;
    }

    bb492: {
        StorageDead(_712);
        drop(_701) -> [return: bb493, unwind: bb541];
    }

    bb493: {
        StorageDead(_701);
        StorageDead(_700);
        goto -> bb494;
    }

    bb494: {
        StorageDead(_682);
        goto -> bb495;
    }

    bb495: {
        StorageDead(_670);
        goto -> bb496;
    }

    bb496: {
        StorageDead(_659);
        StorageDead(_657);
        goto -> bb499;
    }

    bb497: {
        StorageDead(_634);
        StorageDead(_633);
        goto -> bb498;
    }

    bb498: {
        StorageDead(_638);
        StorageDead(_635);
        StorageDead(_632);
        goto -> bb499;
    }

    bb499: {
        StorageDead(_631);
        goto -> bb501;
    }

    bb500: {
        StorageDead(_617);
        StorageDead(_613);
        goto -> bb501;
    }

    bb501: {
        StorageDead(_612);
        StorageDead(_422);
        StorageDead(_421);
        goto -> bb512;
    }

    bb502: {
        StorageDead(_562);
        goto -> bb506;
    }

    bb503: {
        StorageDead(_516);
        StorageDead(_515);
        goto -> bb504;
    }

    bb504: {
        StorageDead(_438);
        goto -> bb505;
    }

    bb505: {
        StorageDead(_426);
        StorageDead(_425);
        goto -> bb506;
    }

    bb506: {
        StorageDead(_423);
        goto -> bb512;
    }

    bb507: {
        StorageDead(_339);
        StorageDead(_338);
        goto -> bb508;
    }

    bb508: {
        StorageDead(_297);
        StorageDead(_296);
        goto -> bb510;
    }

    bb509: {
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_311);
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_299);
        StorageDead(_298);
        goto -> bb510;
    }

    bb510: {
        drop(_281) -> [return: bb511, unwind: bb541];
    }

    bb511: {
        StorageDead(_281);
        StorageDead(_280);
        goto -> bb512;
    }

    bb512: {
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_276);
        goto -> bb513;
    }

    bb513: {
        drop(_173) -> [return: bb514, unwind: bb542];
    }

    bb514: {
        StorageDead(_173);
        drop(_172) -> [return: bb515, unwind: bb543];
    }

    bb515: {
        StorageDead(_172);
        drop(_171) -> [return: bb516, unwind: bb549];
    }

    bb516: {
        StorageDead(_171);
        goto -> bb519;
    }

    bb517: {
        StorageDead(_188);
        StorageDead(_187);
        drop(_184) -> [return: bb518, unwind: bb549];
    }

    bb518: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb519;
    }

    bb519: {
        StorageDead(_60);
        goto -> bb520;
    }

    bb520: {
        StorageDead(_52);
        drop(_41) -> [return: bb521, unwind: bb550];
    }

    bb521: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_29) -> [return: bb522, unwind: bb551];
    }

    bb522: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb523;
    }

    bb523: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb524;
    }

    bb524: {
        return;
    }

    bb525 (cleanup): {
        drop(_990) -> [return: bb527, unwind terminate(cleanup)];
    }

    bb526 (cleanup): {
        drop(_971) -> [return: bb527, unwind terminate(cleanup)];
    }

    bb527 (cleanup): {
        drop(_943) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb528 (cleanup): {
        drop(_920) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb529 (cleanup): {
        drop(_860) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb530 (cleanup): {
        drop(_701) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb531 (cleanup): {
        drop(_586) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb532 (cleanup): {
        drop(_536) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb533 (cleanup): {
        drop(_492) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb534 (cleanup): {
        drop(_454) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb535 (cleanup): {
        drop(_397) -> [return: bb537, unwind terminate(cleanup)];
    }

    bb536 (cleanup): {
        drop(_359) -> [return: bb537, unwind terminate(cleanup)];
    }

    bb537 (cleanup): {
        drop(_281) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb538 (cleanup): {
        drop(_259) -> [return: bb559, unwind terminate(cleanup)];
    }

    bb539 (cleanup): {
        drop(_230) -> [return: bb560, unwind terminate(cleanup)];
    }

    bb540 (cleanup): {
        drop(_184) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb541 (cleanup): {
        drop(_173) -> [return: bb542, unwind terminate(cleanup)];
    }

    bb542 (cleanup): {
        drop(_172) -> [return: bb543, unwind terminate(cleanup)];
    }

    bb543 (cleanup): {
        drop(_171) -> [return: bb549, unwind terminate(cleanup)];
    }

    bb544 (cleanup): {
        drop(_188) -> [return: bb545, unwind terminate(cleanup)];
    }

    bb545 (cleanup): {
        drop(_184) -> [return: bb549, unwind terminate(cleanup)];
    }

    bb546 (cleanup): {
        drop(_148) -> [return: bb549, unwind terminate(cleanup)];
    }

    bb547 (cleanup): {
        drop(_112) -> [return: bb549, unwind terminate(cleanup)];
    }

    bb548 (cleanup): {
        drop(_75) -> [return: bb549, unwind terminate(cleanup)];
    }

    bb549 (cleanup): {
        drop(_41) -> [return: bb550, unwind terminate(cleanup)];
    }

    bb550 (cleanup): {
        drop(_29) -> [return: bb551, unwind terminate(cleanup)];
    }

    bb551 (cleanup): {
        resume;
    }

    bb552: {
        _1216 = discriminant(_231);
        StorageDead(_235);
        _1197 = const false;
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &mut _28;
        _1193 = deref_copy (*_253);
        _252 = &mut (*_1193);
        _251 = <RefMut<'_, User> as DerefMut>::deref_mut(move _252) -> [return: bb108, unwind: bb541];
    }

    bb553: {
        _1218 = discriminant(_260);
        StorageDead(_264);
        _1196 = const false;
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_248);
        StorageDead(_247);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _284 = &_171;
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_2;
        _285 = &(*_286);
        _283 = PerpMarketMap::<'_>::get_ref(move _284, move _285) -> [return: bb120, unwind: bb541];
    }

    bb554: {
        _1232 = discriminant(_260);
        StorageDead(_264);
        _1196 = const false;
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_248);
        StorageDead(_247);
        goto -> bb513;
    }

    bb555: {
        _1234 = discriminant(_231);
        StorageDead(_235);
        _1197 = const false;
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_218);
        goto -> bb513;
    }

    bb556 (cleanup): {
        _1242 = discriminant(_944);
        goto -> bb541;
    }

    bb557 (cleanup): {
        _1243 = discriminant(_702);
        goto -> bb541;
    }

    bb558 (cleanup): {
        _1244 = discriminant(_282);
        goto -> bb541;
    }

    bb559 (cleanup): {
        _1245 = discriminant(_260);
        goto -> bb541;
    }

    bb560 (cleanup): {
        _1246 = discriminant(_231);
        goto -> bb541;
    }

    bb561 (cleanup): {
        _1248 = discriminant(_175);
        goto -> bb544;
    }

    bb562 (cleanup): {
        _1249 = discriminant(_53);
        goto -> bb549;
    }

    bb563 (cleanup): {
        _1250 = discriminant(_42);
        goto -> bb550;
    }

    bb564 (cleanup): {
        _1251 = discriminant(_30);
        goto -> bb551;
    }

    bb565 (cleanup): {
        _1252 = discriminant(_20);
        goto -> bb551;
    }

    bb566 (cleanup): {
        _1253 = discriminant(_5);
        goto -> bb551;
    }
}
