// MIR for `phoenix_price_in_ticks_to_taker_price` before PreCodegen

fn phoenix_price_in_ticks_to_taker_price(_1: u64, _2: u64, _3: &MarketHeader) -> std::result::Result<u64, error::ErrorCode> {
    debug price_in_ticks => _1;
    debug tick_size => _2;
    debug header => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: u64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _9: std::result::Result<u64, error::ErrorCode>;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: u64;
    let mut _17: u64;
    let mut _18: &phoenix::quantities::QuoteAtomsPerQuoteLot;
    let _19: phoenix::quantities::QuoteAtomsPerQuoteLot;
    let mut _20: &phoenix::program::MarketHeader;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: u64;
    let mut _26: u64;
    let mut _27: u32;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _22;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _25;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _1;
        StorageLive(_11);
        _11 = _2;
        _9 = <u64 as SafeMath>::safe_mul(move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_8 as Continue).0: u64);
        _7 = _16;
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_3);
        _19 = MarketHeader::get_quote_lot_size(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb15;
    }

    bb7: {
        _18 = &_19;
        StorageDead(_20);
        _17 = <QuoteAtomsPerQuoteLot as phoenix::quantities::WrapperU64>::as_u64(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _6 = <u64 as SafeMath>::safe_mul(move _7, move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_6);
        _21 = discriminant(_5);
        switchInt(move _21) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_5 as Continue).0: u64);
        _4 = _25;
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_3).12: u32);
        _26 = move _27 as u64 (IntToInt);
        StorageDead(_27);
        _0 = <u64 as SafeMath>::safe_div(move _4, move _26) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_22);
        _22 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_4);
        StorageDead(_19);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_4);
        StorageDead(_19);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb16;
    }

    bb16: {
        return;
    }
}
