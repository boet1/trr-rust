// MIR for `validate_transfer_satisfies_limit_price` before PreCodegen

fn validate_transfer_satisfies_limit_price(_1: u128, _2: u128, _3: u32, _4: u32, _5: Option<u64>) -> std::result::Result<(), error::ErrorCode> {
    debug asset_transfer => _1;
    debug liability_transfer => _2;
    debug asset_decimals => _3;
    debug liability_decimals => _4;
    debug limit_price => _5;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _6: u64;
    let mut _7: isize;
    let _8: u64;
    let mut _9: !;
    let mut _10: ();
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: u128;
    let mut _16: u32;
    let mut _17: u32;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: bool;
    let mut _24: u128;
    let mut _25: u128;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _27: std::result::Result<u128, error::ErrorCode>;
    let mut _28: u64;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: ();
    let _36: ();
    let mut _37: &str;
    let _38: &str;
    let mut _39: &std::string::String;
    let _40: &std::string::String;
    let _41: std::string::String;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[&str; 2];
    let _46: &[&str; 2];
    let _47: [&str; 2];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let mut _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: [core::fmt::rt::Argument<'_>; 1];
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &error::ErrorCode;
    let _54: &error::ErrorCode;
    let _55: ();
    let mut _56: &str;
    let _57: &str;
    let mut _58: &std::string::String;
    let _59: &std::string::String;
    let _60: std::string::String;
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[&str; 3];
    let _65: &[&str; 3];
    let _66: [&str; 3];
    let mut _67: &[core::fmt::rt::Argument<'_>];
    let mut _68: &[core::fmt::rt::Argument<'_>; 2];
    let _69: &[core::fmt::rt::Argument<'_>; 2];
    let _70: [core::fmt::rt::Argument<'_>; 2];
    let mut _71: core::fmt::rt::Argument<'_>;
    let mut _72: &u128;
    let _73: &u128;
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &u64;
    let _76: &u64;
    let mut _77: error::ErrorCode;
    scope 1 {
        debug limit_price => _6;
        let _11: u128;
        let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _22: u128;
        scope 3 {
            debug swap_price => _11;
            let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _33: u128;
            let _35: error::ErrorCode;
            scope 8 {
                debug residual => _30;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _33;
                scope 11 {
                }
            }
            scope 12 {
                debug error_code => _35;
                let _42: std::string::String;
                let _61: std::string::String;
                let mut _78: &[&str; 3];
                let mut _79: &[&str; 2];
                scope 13 {
                    debug res => _42;
                }
                scope 14 {
                    debug res => _61;
                }
            }
        }
        scope 4 {
            debug residual => _19;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _22;
            scope 7 {
            }
        }
    }
    scope 2 {
        debug limit_price => _8;
    }

    bb0: {
        StorageLive(_6);
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_10);
        _10 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        goto -> bb31;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_8);
        _8 = ((_5 as Some).0: u64);
        _6 = _8;
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _1;
        StorageLive(_15);
        _15 = _2;
        StorageLive(_16);
        _16 = _3;
        StorageLive(_17);
        _17 = _4;
        _13 = calculate_swap_price(move _14, move _15, move _16, move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_13);
        _18 = discriminant(_12);
        switchInt(move _18) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_22);
        _22 = ((_12 as Continue).0: u128);
        _11 = _22;
        StorageDead(_22);
        StorageDead(_12);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _11;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _6;
        _27 = <u64 as Cast>::cast::<u128>(move _28) -> [return: bb9, unwind continue];
    }

    bb7: {
        StorageLive(_19);
        _19 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_12);
        goto -> bb30;
    }

    bb9: {
        StorageDead(_28);
        _26 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb11, 1: bb12, otherwise: bb2];
    }

    bb11: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: u128);
        _25 = _33;
        StorageDead(_33);
        _23 = Ge(move _24, move _25);
        switchInt(move _23) -> [0: bb15, otherwise: bb14];
    }

    bb12: {
        StorageLive(_30);
        _30 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb30;
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_34);
        _34 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _34);
        StorageDead(_34);
        goto -> bb29;
    }

    bb15: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_35);
        _35 = error::ErrorCode::LiquidationDoesntSatisfyLimitPrice;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _79 = const _;
        _46 = &(*_79);
        _45 = &(*_46);
        _44 = move _45 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_45);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_35;
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _53) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_53);
        _51 = [move _52];
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = move _49 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_49);
        _43 = Arguments::<'_>::new_v1(move _44, move _48) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_48);
        StorageDead(_44);
        _42 = format(move _43) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        _41 = move _42;
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = <String as Deref>::deref(move _39) -> [return: bb19, unwind: bb34];
    }

    bb19: {
        _37 = &(*_38);
        StorageDead(_39);
        _36 = solana_program::log::sol_log(move _37) -> [return: bb20, unwind: bb34];
    }

    bb20: {
        StorageDead(_37);
        drop(_41) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _78 = const _;
        _65 = &(*_78);
        _64 = &(*_65);
        _63 = move _64 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_11;
        _72 = &(*_73);
        _71 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _72) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_72);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_6;
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _75) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_75);
        _70 = [move _71, move _74];
        StorageDead(_74);
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = move _68 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_68);
        _62 = Arguments::<'_>::new_v1(move _63, move _67) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_67);
        StorageDead(_63);
        _61 = format(move _62) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_62);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_65);
        _60 = move _61;
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = <String as Deref>::deref(move _58) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        _56 = &(*_57);
        StorageDead(_58);
        _55 = solana_program::log::sol_log(move _56) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        StorageDead(_56);
        drop(_60) -> [return: bb28, unwind: bb35];
    }

    bb28: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageLive(_77);
        _77 = _35;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _77);
        StorageDead(_77);
        StorageDead(_35);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_23);
        StorageDead(_11);
        StorageDead(_6);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_11);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_6);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_60) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_41) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }
}
