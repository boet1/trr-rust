// MIR for `merge_modify_order_params_with_existing_order` after PreCodegen

fn merge_modify_order_params_with_existing_order(_1: &Order, _2: &order_params::ModifyOrderParams) -> std::result::Result<Option<order_params::OrderParams>, error::ErrorCode> {
    debug existing_order => _1;
    debug modify_order_params => _2;
    let mut _0: std::result::Result<std::option::Option<state::order_params::OrderParams>, error::ErrorCode>;
    let _3: state::user::OrderType;
    let mut _6: std::option::Option<controller::position::PositionDirection>;
    let mut _7: controller::position::PositionDirection;
    let mut _10: isize;
    let mut _11: &&state::order_params::ModifyOrderParams;
    let mut _12: &std::option::Option<u64>;
    let mut _15: bool;
    let mut _16: &state::order_params::ModifyOrderParams;
    let mut _18: u64;
    let mut _19: u64;
    let _20: ();
    let mut _21: bool;
    let mut _22: u64;
    let mut _23: !;
    let mut _24: std::option::Option<state::order_params::OrderParams>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _27: std::result::Result<u64, error::ErrorCode>;
    let mut _28: &state::user::Order;
    let mut _29: std::option::Option<i64>;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: std::option::Option<u64>;
    let mut _37: u64;
    let mut _40: std::option::Option<bool>;
    let mut _41: bool;
    let mut _43: std::option::Option<state::order_params::PostOnlyParam>;
    let mut _44: state::order_params::PostOnlyParam;
    let mut _45: bool;
    let mut _48: std::option::Option<i64>;
    let mut _49: std::option::Option<i64>;
    let mut _50: i64;
    let mut _52: std::option::Option<u64>;
    let mut _53: std::option::Option<u64>;
    let mut _54: u64;
    let mut _56: std::option::Option<state::user::OrderTriggerCondition>;
    let mut _57: state::user::OrderTriggerCondition;
    let mut _58: isize;
    let mut _60: std::option::Option<i32>;
    let mut _61: std::option::Option<i32>;
    let mut _62: i32;
    let mut _66: (std::option::Option<u8>, std::option::Option<i64>, std::option::Option<i64>);
    let mut _67: bool;
    let mut _68: &std::option::Option<u8>;
    let mut _69: bool;
    let mut _70: &std::option::Option<i64>;
    let mut _71: bool;
    let mut _72: &std::option::Option<i64>;
    let mut _73: std::option::Option<u8>;
    let mut _74: std::option::Option<i64>;
    let mut _75: std::option::Option<i64>;
    let mut _76: std::option::Option<u8>;
    let mut _77: std::option::Option<i64>;
    let mut _78: std::option::Option<i64>;
    let mut _79: std::option::Option<state::order_params::OrderParams>;
    let mut _80: state::order_params::OrderParams;
    let mut _81: state::user::OrderType;
    let mut _82: state::user::MarketType;
    let mut _83: controller::position::PositionDirection;
    let mut _84: u8;
    let mut _85: u64;
    let mut _86: u64;
    let mut _87: u16;
    let mut _88: bool;
    let mut _89: state::order_params::PostOnlyParam;
    let mut _90: u8;
    let mut _91: std::option::Option<i64>;
    let mut _92: std::option::Option<u64>;
    let mut _93: state::user::OrderTriggerCondition;
    let mut _94: std::option::Option<i32>;
    let mut _95: std::option::Option<u8>;
    let mut _96: std::option::Option<i64>;
    let mut _97: std::option::Option<i64>;
    scope 1 {
        debug order_type => _3;
        let _4: state::user::MarketType;
        scope 2 {
            debug market_type => _4;
            let _5: controller::position::PositionDirection;
            scope 3 {
                debug direction => _5;
                let _8: u8;
                scope 4 {
                    debug user_order_id => _8;
                    let _9: u64;
                    let _13: u64;
                    let _14: &u64;
                    let _25: u64;
                    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _34: u64;
                    scope 5 {
                        debug base_asset_amount => _9;
                        let _35: u64;
                        scope 13 {
                            debug price => _35;
                            let _38: u16;
                            scope 14 {
                                debug market_index => _38;
                                let _39: bool;
                                scope 15 {
                                    debug reduce_only => _39;
                                    let _42: state::order_params::PostOnlyParam;
                                    scope 16 {
                                        debug post_only => _42;
                                        let _46: u8;
                                        scope 17 {
                                            debug bit_flags => _46;
                                            let _47: std::option::Option<i64>;
                                            scope 18 {
                                                debug max_ts => _47;
                                                let _51: std::option::Option<u64>;
                                                scope 19 {
                                                    debug trigger_price => _51;
                                                    let _55: state::user::OrderTriggerCondition;
                                                    scope 20 {
                                                        debug trigger_condition => _55;
                                                        let _59: std::option::Option<i32>;
                                                        scope 21 {
                                                            debug oracle_price_offset => _59;
                                                            let _63: std::option::Option<u8>;
                                                            let _64: std::option::Option<i64>;
                                                            let _65: std::option::Option<i64>;
                                                            scope 22 {
                                                                debug auction_duration => _63;
                                                                debug auction_start_price => _64;
                                                                debug auction_end_price => _65;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 6 {
                        debug base_asset_amount => _13;
                        debug base_asset_amount => _14;
                        let _17: u64;
                        scope 7 {
                            debug base_asset_amount => _17;
                        }
                    }
                    scope 8 {
                        debug base_asset_amount => _25;
                    }
                    scope 9 {
                        debug residual => _31;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => _34;
                        scope 12 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = ((*_1).13: state::user::OrderType);
        StorageLive(_4);
        _4 = ((*_1).14: state::user::MarketType);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_2).0: std::option::Option<controller::position::PositionDirection>);
        StorageLive(_7);
        _7 = ((*_1).17: controller::position::PositionDirection);
        _5 = Option::<controller::position::PositionDirection>::unwrap_or(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_8);
        _8 = ((*_1).15: u8);
        StorageLive(_9);
        _10 = discriminant(((*_2).1: std::option::Option<u64>));
        switchInt(move _10) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_1);
        StorageLive(_29);
        _29 = Option::<i64>::None;
        _27 = Order::get_base_asset_amount_unfilled(move _28, move _29) -> [return: bb11, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_14);
        _14 = &((((*_2).1: std::option::Option<u64>) as Some).0: u64);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_2);
        _15 = order_params::ModifyOrderParams::exclude_previous_fill(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_13);
        _13 = ((((*_2).1: std::option::Option<u64>) as Some).0: u64);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _13;
        StorageLive(_19);
        _19 = ((*_1).3: u64);
        _17 = core::num::<impl u64>::saturating_sub(move _18, move _19) -> [return: bb8, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_25);
        _25 = ((((*_2).1: std::option::Option<u64>) as Some).0: u64);
        _9 = _25;
        StorageDead(_25);
        goto -> bb16;
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _17;
        _21 = Eq(move _22, const 0_u64);
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_22);
        StorageLive(_24);
        _24 = Option::<order_params::OrderParams>::None;
        _0 = std::result::Result::<Option<order_params::OrderParams>, error::ErrorCode>::Ok(move _24);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_14);
        goto -> bb41;
    }

    bb10: {
        StorageDead(_22);
        _20 = const ();
        StorageDead(_21);
        StorageDead(_20);
        _9 = _17;
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_14);
        goto -> bb16;
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_27);
        _30 = discriminant(_26);
        switchInt(move _30) -> [0: bb13, 1: bb14, otherwise: bb3];
    }

    bb13: {
        StorageLive(_34);
        _34 = ((_26 as Continue).0: u64);
        _9 = _34;
        StorageDead(_34);
        StorageDead(_26);
        goto -> bb16;
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<Option<order_params::OrderParams>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        goto -> bb41;
    }

    bb16: {
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_2).2: std::option::Option<u64>);
        StorageLive(_37);
        _37 = ((*_1).1: u64);
        _35 = Option::<u64>::unwrap_or(move _36, move _37) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_38);
        _38 = ((*_1).11: u16);
        StorageLive(_39);
        StorageLive(_40);
        _40 = ((*_2).3: std::option::Option<bool>);
        StorageLive(_41);
        _41 = ((*_1).18: bool);
        _39 = Option::<bool>::unwrap_or(move _40, move _41) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        _43 = ((*_2).4: std::option::Option<state::order_params::PostOnlyParam>);
        StorageLive(_44);
        StorageLive(_45);
        _45 = ((*_1).19: bool);
        switchInt(move _45) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _44 = PostOnlyParam::MustPostOnly;
        goto -> bb21;
    }

    bb20: {
        _44 = PostOnlyParam::None;
        goto -> bb21;
    }

    bb21: {
        StorageDead(_45);
        _42 = Option::<PostOnlyParam>::unwrap_or(move _43, move _44) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_46);
        _46 = const 0_u8;
        StorageLive(_47);
        StorageLive(_48);
        _48 = ((*_2).6: std::option::Option<i64>);
        StorageLive(_49);
        StorageLive(_50);
        _50 = ((*_1).8: i64);
        _49 = Option::<i64>::Some(move _50);
        StorageDead(_50);
        _47 = Option::<i64>::or(move _48, move _49) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_51);
        StorageLive(_52);
        _52 = ((*_2).7: std::option::Option<u64>);
        StorageLive(_53);
        StorageLive(_54);
        _54 = ((*_1).5: u64);
        _53 = Option::<u64>::Some(move _54);
        StorageDead(_54);
        _51 = Option::<u64>::or(move _52, move _53) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_55);
        StorageLive(_56);
        _56 = ((*_2).8: std::option::Option<state::user::OrderTriggerCondition>);
        StorageLive(_57);
        _58 = discriminant(((*_1).21: state::user::OrderTriggerCondition));
        switchInt(move _58) -> [0: bb25, 1: bb26, 2: bb25, 3: bb26, otherwise: bb3];
    }

    bb25: {
        _57 = OrderTriggerCondition::Above;
        goto -> bb27;
    }

    bb26: {
        _57 = OrderTriggerCondition::Below;
        goto -> bb27;
    }

    bb27: {
        _55 = Option::<OrderTriggerCondition>::unwrap_or(move _56, move _57) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        _60 = ((*_2).9: std::option::Option<i32>);
        StorageLive(_61);
        StorageLive(_62);
        _62 = ((*_1).9: i32);
        _61 = Option::<i32>::Some(move _62);
        StorageDead(_62);
        _59 = Option::<i32>::or(move _60, move _61) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &((*_2).10: std::option::Option<u8>);
        _67 = Option::<u8>::is_some(move _68) -> [return: bb30, unwind continue];
    }

    bb30: {
        switchInt(move _67) -> [0: bb38, otherwise: bb31];
    }

    bb31: {
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &((*_2).11: std::option::Option<i64>);
        _69 = Option::<i64>::is_some(move _70) -> [return: bb32, unwind continue];
    }

    bb32: {
        switchInt(move _69) -> [0: bb37, otherwise: bb33];
    }

    bb33: {
        StorageDead(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &((*_2).12: std::option::Option<i64>);
        _71 = Option::<i64>::is_some(move _72) -> [return: bb34, unwind continue];
    }

    bb34: {
        switchInt(move _71) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        StorageDead(_72);
        StorageLive(_73);
        _73 = ((*_2).10: std::option::Option<u8>);
        StorageLive(_74);
        _74 = ((*_2).11: std::option::Option<i64>);
        StorageLive(_75);
        _75 = ((*_2).12: std::option::Option<i64>);
        _66 = (move _73, move _74, move _75);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb40;
    }

    bb36: {
        StorageDead(_72);
        goto -> bb39;
    }

    bb37: {
        StorageDead(_70);
        goto -> bb39;
    }

    bb38: {
        StorageDead(_68);
        goto -> bb39;
    }

    bb39: {
        StorageLive(_76);
        _76 = Option::<u8>::None;
        StorageLive(_77);
        _77 = Option::<i64>::None;
        StorageLive(_78);
        _78 = Option::<i64>::None;
        _66 = (move _76, move _77, move _78);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_63);
        _63 = (_66.0: std::option::Option<u8>);
        StorageLive(_64);
        _64 = (_66.1: std::option::Option<i64>);
        StorageLive(_65);
        _65 = (_66.2: std::option::Option<i64>);
        StorageDead(_66);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _3;
        StorageLive(_82);
        _82 = _4;
        StorageLive(_83);
        _83 = _5;
        StorageLive(_84);
        _84 = _8;
        StorageLive(_85);
        _85 = _9;
        StorageLive(_86);
        _86 = _35;
        StorageLive(_87);
        _87 = _38;
        StorageLive(_88);
        _88 = _39;
        StorageLive(_89);
        _89 = _42;
        StorageLive(_90);
        _90 = _46;
        StorageLive(_91);
        _91 = _47;
        StorageLive(_92);
        _92 = _51;
        StorageLive(_93);
        _93 = _55;
        StorageLive(_94);
        _94 = _59;
        StorageLive(_95);
        _95 = _63;
        StorageLive(_96);
        _96 = _64;
        StorageLive(_97);
        _97 = _65;
        _80 = order_params::OrderParams { order_type: move _81, market_type: move _82, direction: move _83, user_order_id: move _84, base_asset_amount: move _85, price: move _86, market_index: move _87, reduce_only: move _88, post_only: move _89, bit_flags: move _90, max_ts: move _91, trigger_price: move _92, trigger_condition: move _93, oracle_price_offset: move _94, auction_duration: move _95, auction_start_price: move _96, auction_end_price: move _97 };
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        _79 = Option::<order_params::OrderParams>::Some(move _80);
        StorageDead(_80);
        _0 = std::result::Result::<Option<order_params::OrderParams>, error::ErrorCode>::Ok(move _79);
        StorageDead(_79);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb42;
    }

    bb42: {
        return;
    }
}
