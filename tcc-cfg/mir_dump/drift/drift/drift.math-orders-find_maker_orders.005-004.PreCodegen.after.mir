// MIR for `math::orders::find_maker_orders` after PreCodegen

fn math::orders::find_maker_orders(_1: &User, _2: &controller::position::PositionDirection, _3: &state::user::MarketType, _4: u16, _5: Option<i64>, _6: u64, _7: u64, _8: bool, _9: Option<ProtectedMakerParams>) -> std::result::Result<Vec<(usize, u64)>, error::ErrorCode> {
    debug user => _1;
    debug direction => _2;
    debug market_type => _3;
    debug market_index => _4;
    debug valid_oracle_price => _5;
    debug slot => _6;
    debug tick_size => _7;
    debug is_prediction_market => _8;
    debug protected_maker_params => _9;
    let mut _0: std::result::Result<std::vec::Vec<(usize, u64)>, error::ErrorCode>;
    let mut _10: std::vec::Vec<(usize, u64)>;
    let _11: ();
    let mut _12: std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
    let mut _13: std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
    let mut _14: std::slice::Iter<'_, state::user::Order>;
    let mut _15: &[state::user::Order];
    let mut _16: &[state::user::Order; 32];
    let mut _18: ();
    let _19: ();
    let mut _20: std::option::Option<(usize, &state::user::Order)>;
    let mut _21: &mut std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
    let mut _22: &mut std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
    let mut _23: isize;
    let mut _24: !;
    let _27: ();
    let mut _28: bool;
    let mut _29: &state::user::OrderStatus;
    let mut _30: &state::user::OrderStatus;
    let _31: state::user::OrderStatus;
    let mut _32: !;
    let _33: ();
    let mut _34: bool;
    let mut _35: &controller::position::PositionDirection;
    let mut _36: &controller::position::PositionDirection;
    let mut _37: bool;
    let mut _38: &state::user::MarketType;
    let mut _39: &state::user::MarketType;
    let mut _40: bool;
    let mut _41: u16;
    let mut _42: u16;
    let mut _43: !;
    let _44: ();
    let mut _45: bool;
    let mut _46: &state::user::Order;
    let mut _47: bool;
    let mut _48: &state::user::Order;
    let mut _49: bool;
    let mut _50: &state::user::Order;
    let mut _51: !;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _54: std::result::Result<u64, error::ErrorCode>;
    let mut _55: &state::user::Order;
    let mut _56: std::option::Option<i64>;
    let mut _57: std::option::Option<u64>;
    let mut _58: u64;
    let mut _59: u64;
    let mut _60: bool;
    let mut _61: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _67: ();
    let mut _68: &mut std::vec::Vec<(usize, u64)>;
    let mut _69: (usize, u64);
    let mut _70: usize;
    let mut _71: u64;
    let mut _72: std::vec::Vec<(usize, u64)>;
    scope 1 {
        debug orders => _10;
        let mut _17: std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
        scope 2 {
            debug iter => _17;
            let _25: usize;
            let _26: &state::user::Order;
            scope 3 {
                debug order_index => _25;
                debug order => _26;
                let _52: u64;
                let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _66: u64;
                let mut _73: &state::user::OrderStatus;
                scope 4 {
                    debug limit_price => _52;
                }
                scope 5 {
                    debug residual => _63;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _66;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_10);
        _10 = Vec::<(usize, u64)>::with_capacity(const 32_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).5: [state::user::Order; 32]);
        _15 = move _16 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_16);
        _14 = core::slice::<impl [Order]>::iter(move _15) -> [return: bb2, unwind: bb40];
    }

    bb2: {
        StorageDead(_15);
        _13 = <std::slice::Iter<'_, Order> as Iterator>::enumerate(move _14) -> [return: bb3, unwind: bb40];
    }

    bb3: {
        StorageDead(_14);
        _12 = <Enumerate<std::slice::Iter<'_, Order>> as IntoIterator>::into_iter(move _13) -> [return: bb4, unwind: bb40];
    }

    bb4: {
        StorageDead(_13);
        StorageLive(_17);
        _17 = move _12;
        goto -> bb5;
    }

    bb5: {
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &mut _17;
        _21 = &mut (*_22);
        _20 = <Enumerate<std::slice::Iter<'_, Order>> as Iterator>::next(move _21) -> [return: bb6, unwind: bb40];
    }

    bb6: {
        StorageDead(_21);
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_25);
        _25 = (((_20 as Some).0: (usize, &state::user::Order)).0: usize);
        StorageLive(_26);
        _26 = (((_20 as Some).0: (usize, &state::user::Order)).1: &state::user::Order);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_26).12: state::user::OrderStatus);
        StorageLive(_30);
        _73 = const _;
        _30 = &(*_73);
        _28 = <OrderStatus as PartialEq>::ne(move _29, move _30) -> [return: bb10, unwind: bb40];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _11 = const ();
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_72);
        _72 = move _10;
        _0 = std::result::Result::<Vec<(usize, u64)>, error::ErrorCode>::Ok(move _72);
        StorageDead(_72);
        StorageDead(_10);
        goto -> bb39;
    }

    bb10: {
        switchInt(move _28) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb37;
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &((*_26).17: controller::position::PositionDirection);
        StorageLive(_36);
        _36 = &(*_2);
        _34 = <controller::position::PositionDirection as PartialEq>::ne(move _35, move _36) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        switchInt(move _34) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb17;
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &((*_26).14: state::user::MarketType);
        StorageLive(_39);
        _39 = &(*_3);
        _37 = <state::user::MarketType as PartialEq>::ne(move _38, move _39) -> [return: bb16, unwind: bb40];
    }

    bb16: {
        switchInt(move _37) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        _41 = ((*_26).11: u16);
        StorageLive(_42);
        _42 = _4;
        _40 = Ne(move _41, move _42);
        switchInt(move _40) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb37;
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_41);
        _33 = const ();
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_26);
        _45 = Order::is_limit_order(move _46) -> [return: bb21, unwind: bb40];
    }

    bb21: {
        switchInt(move _45) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_26);
        _47 = Order::must_be_triggered(move _48) -> [return: bb24, unwind: bb40];
    }

    bb23: {
        StorageDead(_46);
        goto -> bb28;
    }

    bb24: {
        switchInt(move _47) -> [0: bb29, otherwise: bb25];
    }

    bb25: {
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_26);
        _49 = Order::triggered(move _50) -> [return: bb26, unwind: bb40];
    }

    bb26: {
        switchInt(move _49) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        StorageDead(_50);
        goto -> bb30;
    }

    bb28: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb37;
    }

    bb29: {
        StorageDead(_48);
        goto -> bb30;
    }

    bb30: {
        _44 = const ();
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_26);
        StorageLive(_56);
        _56 = _5;
        StorageLive(_57);
        _57 = Option::<u64>::None;
        StorageLive(_58);
        _58 = _6;
        StorageLive(_59);
        _59 = _7;
        StorageLive(_60);
        _60 = _8;
        StorageLive(_61);
        _61 = _9;
        _54 = Order::force_get_limit_price(move _55, move _56, move _57, move _58, move _59, move _60, move _61) -> [return: bb31, unwind: bb40];
    }

    bb31: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        _53 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _54) -> [return: bb32, unwind: bb40];
    }

    bb32: {
        StorageDead(_54);
        _62 = discriminant(_53);
        switchInt(move _62) -> [0: bb33, 1: bb34, otherwise: bb8];
    }

    bb33: {
        StorageLive(_66);
        _66 = ((_53 as Continue).0: u64);
        _52 = _66;
        StorageDead(_66);
        StorageDead(_53);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &mut _10;
        StorageLive(_69);
        StorageLive(_70);
        _70 = _25;
        StorageLive(_71);
        _71 = _52;
        _69 = (move _70, move _71);
        StorageDead(_71);
        StorageDead(_70);
        _67 = Vec::<(usize, u64)>::push(move _68, move _69) -> [return: bb36, unwind: bb40];
    }

    bb34: {
        StorageLive(_63);
        _63 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<Vec<(usize, u64)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb35, unwind: bb40];
    }

    bb35: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        drop(_10) -> [return: bb38, unwind: bb41];
    }

    bb36: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        _19 = const ();
        StorageDead(_52);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        _18 = const ();
        goto -> bb5;
    }

    bb37: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb5;
    }

    bb38: {
        StorageDead(_10);
        goto -> bb39;
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_10) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        resume;
    }
}
