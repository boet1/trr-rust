// MIR for `admin::handle_update_perp_market_fee_adjustment` before PreCodegen

fn admin::handle_update_perp_market_fee_adjustment(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: i16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug fee_adjustment => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _14: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 1];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &u16;
    let _43: &u16;
    let _44: &state::perp_market::PerpMarket;
    let mut _45: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _46: ();
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _48: std::result::Result<(), error::ErrorCode>;
    let mut _49: bool;
    let mut _50: u64;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _52: std::result::Result<u64, error::ErrorCode>;
    let mut _53: u16;
    let mut _54: i16;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: ();
    let _62: ();
    let mut _63: &str;
    let _64: &str;
    let mut _65: &std::string::String;
    let _66: &std::string::String;
    let _67: std::string::String;
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let mut _71: &[&str; 2];
    let _72: &[&str; 2];
    let _73: [&str; 2];
    let mut _74: &[core::fmt::rt::Argument<'_>];
    let mut _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: [core::fmt::rt::Argument<'_>; 1];
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &error::ErrorCode;
    let _80: &error::ErrorCode;
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: &std::string::String;
    let _85: &std::string::String;
    let _86: std::string::String;
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let mut _90: &[&str; 2];
    let _91: &[&str; 2];
    let _92: [&str; 2];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let mut _94: &[core::fmt::rt::Argument<'_>; 2];
    let _95: &[core::fmt::rt::Argument<'_>; 2];
    let _96: [core::fmt::rt::Argument<'_>; 2];
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &i16;
    let _99: &i16;
    let mut _100: core::fmt::rt::Argument<'_>;
    let mut _101: &u64;
    let _102: &u64;
    let _103: u64;
    let mut _104: error::ErrorCode;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _110: ();
    let mut _111: &str;
    let _112: &str;
    let mut _113: &std::string::String;
    let _114: &std::string::String;
    let _115: std::string::String;
    let mut _117: std::fmt::Arguments<'_>;
    let mut _118: &[&str];
    let mut _119: &[&str; 2];
    let _120: &[&str; 2];
    let _121: [&str; 2];
    let mut _122: &[core::fmt::rt::Argument<'_>];
    let mut _123: &[core::fmt::rt::Argument<'_>; 2];
    let _124: &[core::fmt::rt::Argument<'_>; 2];
    let _125: [core::fmt::rt::Argument<'_>; 2];
    let mut _126: core::fmt::rt::Argument<'_>;
    let mut _127: &i16;
    let _128: &i16;
    let _129: &state::perp_market::PerpMarket;
    let mut _130: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _131: core::fmt::rt::Argument<'_>;
    let mut _132: &i16;
    let _133: &i16;
    let mut _134: i16;
    let mut _135: &mut state::perp_market::PerpMarket;
    let mut _136: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _137: ();
    let mut _143: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _144: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _13;
        let _31: std::string::String;
        let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _59: u64;
        let _61: error::ErrorCode;
        let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _109: ();
        let _116: std::string::String;
        let mut _138: &[&str; 2];
        let mut _142: &[&str; 1];
        scope 10 {
            debug res => _31;
        }
        scope 11 {
            debug residual => _56;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _59;
            scope 14 {
            }
        }
        scope 15 {
            debug error_code => _61;
            let _68: std::string::String;
            let _87: std::string::String;
            let mut _139: &u64;
            let mut _140: &[&str; 2];
            let mut _141: &[&str; 2];
            scope 16 {
                debug res => _68;
            }
            scope 17 {
                debug res => _87;
            }
        }
        scope 18 {
            debug residual => _106;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _109;
            scope 21 {
            }
        }
        scope 22 {
            debug res => _116;
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _143 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _7 = &((*_143).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb64];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _145 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _144 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _18 = &((*_144).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb66];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _151 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb58;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb64];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb64];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _149 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _142 = const _;
        _35 = &(*_142);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_13);
        _44 = <RefMut<'_, PerpMarket> as Deref>::deref(move _45) -> [return: bb13, unwind: bb63];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb65];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _147 = discriminant(_15);
        StorageDead(_15);
        goto -> bb57;
    }

    bb13: {
        StorageDead(_45);
        _43 = &((*_44).21: u16);
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _42) -> [return: bb14, unwind: bb63];
    }

    bb14: {
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb15, unwind: bb63];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb16, unwind: bb63];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <String as Deref>::deref(move _28) -> [return: bb17, unwind: bb62];
    }

    bb17: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb18, unwind: bb62];
    }

    bb18: {
        StorageDead(_26);
        drop(_30) -> [return: bb19, unwind: bb63];
    }

    bb19: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _2;
        _53 = core::num::<impl i16>::unsigned_abs(move _54) -> [return: bb20, unwind: bb63];
    }

    bb20: {
        StorageDead(_54);
        _52 = <u16 as Cast>::cast::<u64>(move _53) -> [return: bb21, unwind: bb63];
    }

    bb21: {
        StorageDead(_53);
        _51 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _52) -> [return: bb22, unwind: bb63];
    }

    bb22: {
        StorageDead(_52);
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_59);
        _59 = ((_51 as Continue).0: u64);
        _50 = _59;
        StorageDead(_59);
        _49 = Le(move _50, const _);
        switchInt(move _49) -> [0: bb27, otherwise: bb26];
    }

    bb24: {
        StorageLive(_56);
        _56 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb25, unwind: bb63];
    }

    bb25: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb56;
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_60);
        _60 = ();
        _48 = std::result::Result::<(), error::ErrorCode>::Ok(move _60);
        StorageDead(_60);
        goto -> bb41;
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_61);
        _61 = error::ErrorCode::DefaultError;
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _141 = const _;
        _72 = &(*_141);
        _71 = &(*_72);
        _70 = move _71 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_71);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_61;
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _79) -> [return: bb28, unwind: bb63];
    }

    bb28: {
        StorageDead(_79);
        _77 = [move _78];
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = move _75 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_75);
        _69 = Arguments::<'_>::new_v1(move _70, move _74) -> [return: bb29, unwind: bb63];
    }

    bb29: {
        StorageDead(_74);
        StorageDead(_70);
        _68 = format(move _69) -> [return: bb30, unwind: bb63];
    }

    bb30: {
        StorageDead(_69);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_72);
        _67 = move _68;
        StorageDead(_68);
        _66 = &_67;
        _65 = &(*_66);
        _64 = <String as Deref>::deref(move _65) -> [return: bb31, unwind: bb61];
    }

    bb31: {
        _63 = &(*_64);
        StorageDead(_65);
        _62 = solana_program::log::sol_log(move _63) -> [return: bb32, unwind: bb61];
    }

    bb32: {
        StorageDead(_63);
        drop(_67) -> [return: bb33, unwind: bb63];
    }

    bb33: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _140 = const _;
        _91 = &(*_140);
        _90 = &(*_91);
        _89 = move _90 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_2;
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<i16>(move _98) -> [return: bb34, unwind: bb63];
    }

    bb34: {
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _139 = const _;
        _102 = &(*_139);
        _101 = &(*_102);
        _100 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _101) -> [return: bb35, unwind: bb63];
    }

    bb35: {
        StorageDead(_101);
        _96 = [move _97, move _100];
        StorageDead(_100);
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_94);
        _88 = Arguments::<'_>::new_v1(move _89, move _93) -> [return: bb36, unwind: bb63];
    }

    bb36: {
        StorageDead(_93);
        StorageDead(_89);
        _87 = format(move _88) -> [return: bb37, unwind: bb63];
    }

    bb37: {
        StorageDead(_88);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        _86 = move _87;
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = <String as Deref>::deref(move _84) -> [return: bb38, unwind: bb60];
    }

    bb38: {
        _82 = &(*_83);
        StorageDead(_84);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb39, unwind: bb60];
    }

    bb39: {
        StorageDead(_82);
        drop(_86) -> [return: bb40, unwind: bb63];
    }

    bb40: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_104);
        _104 = _61;
        _48 = std::result::Result::<(), error::ErrorCode>::Err(move _104);
        StorageDead(_104);
        StorageDead(_61);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_49);
        _47 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _48) -> [return: bb42, unwind: bb63];
    }

    bb42: {
        StorageDead(_48);
        _105 = discriminant(_47);
        switchInt(move _105) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_109);
        _109 = ((_47 as Continue).0: ());
        _46 = _109;
        StorageDead(_109);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _138 = const _;
        _120 = &(*_138);
        _119 = &(*_120);
        _118 = move _119 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_119);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_13);
        _129 = <RefMut<'_, PerpMarket> as Deref>::deref(move _130) -> [return: bb46, unwind: bb63];
    }

    bb44: {
        StorageLive(_106);
        _106 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb45, unwind: bb63];
    }

    bb45: {
        StorageDead(_108);
        StorageDead(_106);
        goto -> bb56;
    }

    bb46: {
        StorageDead(_130);
        _128 = &((*_129).27: i16);
        _127 = &(*_128);
        _126 = core::fmt::rt::Argument::<'_>::new_debug::<i16>(move _127) -> [return: bb47, unwind: bb63];
    }

    bb47: {
        StorageDead(_127);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &_2;
        _132 = &(*_133);
        _131 = core::fmt::rt::Argument::<'_>::new_debug::<i16>(move _132) -> [return: bb48, unwind: bb63];
    }

    bb48: {
        StorageDead(_132);
        _125 = [move _126, move _131];
        StorageDead(_131);
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = move _123 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_123);
        _117 = Arguments::<'_>::new_v1(move _118, move _122) -> [return: bb49, unwind: bb63];
    }

    bb49: {
        StorageDead(_122);
        StorageDead(_118);
        _116 = format(move _117) -> [return: bb50, unwind: bb63];
    }

    bb50: {
        StorageDead(_117);
        StorageDead(_133);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_120);
        _115 = move _116;
        StorageDead(_116);
        _114 = &_115;
        _113 = &(*_114);
        _112 = <String as Deref>::deref(move _113) -> [return: bb51, unwind: bb59];
    }

    bb51: {
        _111 = &(*_112);
        StorageDead(_113);
        _110 = solana_program::log::sol_log(move _111) -> [return: bb52, unwind: bb59];
    }

    bb52: {
        StorageDead(_111);
        drop(_115) -> [return: bb53, unwind: bb63];
    }

    bb53: {
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_110);
        StorageLive(_134);
        _134 = _2;
        StorageLive(_135);
        StorageLive(_136);
        _136 = &mut (*_13);
        _135 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _136) -> [return: bb54, unwind: bb63];
    }

    bb54: {
        StorageDead(_136);
        ((*_135).27: i16) = move _134;
        StorageDead(_134);
        StorageDead(_135);
        StorageLive(_137);
        _137 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _137);
        StorageDead(_137);
        drop(_14) -> [return: bb55, unwind: bb64];
    }

    bb55: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb58;
    }

    bb56: {
        StorageDead(_47);
        StorageDead(_46);
        drop(_14) -> [return: bb57, unwind: bb64];
    }

    bb57: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb58;
    }

    bb58: {
        return;
    }

    bb59 (cleanup): {
        drop(_115) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_86) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_67) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_30) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_14) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        resume;
    }

    bb65 (cleanup): {
        _153 = discriminant(_15);
        goto -> bb64;
    }

    bb66 (cleanup): {
        _154 = discriminant(_4);
        goto -> bb64;
    }
}
