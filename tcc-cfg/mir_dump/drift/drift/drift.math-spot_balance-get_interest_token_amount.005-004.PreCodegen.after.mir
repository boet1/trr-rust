// MIR for `get_interest_token_amount` after PreCodegen

fn get_interest_token_amount(_1: u128, _2: &SpotMarket, _3: u128) -> std::result::Result<u128, error::ErrorCode> {
    debug balance => _1;
    debug spot_market => _2;
    debug interest => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: u128;
    let mut _5: u32;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _7: std::result::Result<u32, error::ErrorCode>;
    let mut _8: u32;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u32;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: u128;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: u128;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: u128;
    scope 1 {
        debug precision_decrease => _4;
        let _14: u128;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: u128;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: u128;
        scope 6 {
            debug token_amount => _14;
        }
        scope 7 {
            debug residual => _23;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _26;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _29;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _32;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_2).41: u32);
        _7 = <u32 as SafeMath>::safe_sub(const 19_u32, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: u32);
        _5 = _13;
        StorageDead(_13);
        _4 = core::num::<impl u128>::pow(const 10_u128, move _5) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_6);
        goto -> bb19;
    }

    bb7: {
        StorageDead(_5);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _1;
        StorageLive(_21);
        _21 = _3;
        _19 = <u128 as SafeMath>::safe_mul(move _20, move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_18 as Continue).0: u128);
        _17 = _26;
        StorageDead(_26);
        StorageLive(_27);
        _27 = _4;
        _16 = <u128 as SafeMath>::safe_div(move _17, move _27) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb18;
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_17);
        _15 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_16);
        _28 = discriminant(_15);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_15 as Continue).0: u128);
        _14 = _32;
        StorageDead(_32);
        StorageDead(_18);
        StorageDead(_15);
        StorageLive(_33);
        _33 = _14;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _33);
        StorageDead(_33);
        StorageDead(_14);
        StorageDead(_4);
        goto -> bb20;
    }

    bb16: {
        StorageLive(_29);
        _29 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_4);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}
