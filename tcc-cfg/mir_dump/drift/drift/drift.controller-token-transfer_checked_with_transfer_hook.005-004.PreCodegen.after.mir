// MIR for `transfer_checked_with_transfer_hook` after PreCodegen

fn transfer_checked_with_transfer_hook(_1: &anchor_lang::prelude::Interface<'_, TokenInterface>, _2: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, _3: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, _4: &anchor_lang::prelude::AccountInfo<'_>, _5: u64, _6: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>, _7: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, _8: &[&[&[u8]]]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug token_program => _1;
    debug from => _2;
    debug to => _3;
    debug authority => _4;
    debug amount => _5;
    debug mint => _6;
    debug remaining_accounts => _7;
    debug signer_seeds => _8;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _9: anchor_lang::prelude::AccountInfo<'_>;
    let mut _10: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _11: ();
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _13: std::result::Result<(), anchor_lang::error::Error>;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let _15: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _22: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _24: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _26: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _29: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _30: &anchor_lang::prelude::Pubkey;
    let _31: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _32: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _33: &anchor_lang::prelude::Pubkey;
    let _34: &&anchor_lang::prelude::Pubkey;
    let mut _35: &anchor_lang::prelude::Pubkey;
    let _36: &&anchor_lang::prelude::Pubkey;
    let mut _37: &anchor_lang::prelude::Pubkey;
    let _38: &&anchor_lang::prelude::Pubkey;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let _40: &&anchor_lang::prelude::Pubkey;
    let mut _41: &[&anchor_lang::prelude::Pubkey];
    let mut _42: &[&anchor_lang::prelude::Pubkey; 0];
    let _43: &[&anchor_lang::prelude::Pubkey; 0];
    let _44: [&anchor_lang::prelude::Pubkey; 0];
    let mut _45: u64;
    let mut _46: u8;
    let mut _47: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _48: &anchor_spl::token_interface::Mint;
    let _49: &anchor_spl::token_interface::Mint;
    let mut _50: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _57: std::boxed::Box<[anchor_lang::prelude::AccountInfo<'_>]>;
    let mut _58: std::boxed::Box<[anchor_lang::prelude::AccountInfo<'_>; 4]>;
    let mut _59: usize;
    let mut _60: usize;
    let mut _61: *mut u8;
    let mut _62: std::boxed::Box<[anchor_lang::prelude::AccountInfo<'_>; 4]>;
    let mut _63: anchor_lang::prelude::AccountInfo<'_>;
    let mut _64: anchor_lang::prelude::AccountInfo<'_>;
    let mut _65: anchor_lang::prelude::AccountInfo<'_>;
    let mut _66: anchor_lang::prelude::AccountInfo<'_>;
    let _67: ();
    let mut _68: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _69: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _71: ();
    let _72: ();
    let mut _73: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _74: &mut &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _75: &mut &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _76: isize;
    let mut _77: !;
    let _79: ();
    let mut _80: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _81: anchor_lang::prelude::AccountMeta;
    let mut _82: bool;
    let mut _83: anchor_lang::prelude::Pubkey;
    let mut _84: bool;
    let mut _85: anchor_lang::prelude::Pubkey;
    let mut _86: bool;
    let _87: ();
    let mut _88: &mut std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _89: anchor_lang::prelude::AccountInfo<'_>;
    let mut _90: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _91: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _92: &solana_program::instruction::Instruction;
    let _93: &solana_program::instruction::Instruction;
    let mut _94: &[anchor_lang::prelude::AccountInfo<'_>];
    let _95: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _96: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _97: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _98: &[&[&[u8]]];
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &anchor_lang::prelude::Pubkey;
    let mut _102: &anchor_lang::prelude::Pubkey;
    let mut _103: &anchor_lang::prelude::Pubkey;
    let mut _104: &anchor_lang::prelude::Pubkey;
    let mut _105: &anchor_lang::prelude::Pubkey;
    let mut _106: &anchor_lang::prelude::Pubkey;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: *const [anchor_lang::prelude::AccountInfo<'_>; 4];
    scope 1 {
        debug mint_account_info => _9;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _20: ();
        let _21: anchor_lang::prelude::AccountInfo<'_>;
        scope 2 {
            debug residual => _17;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _20;
            scope 5 {
            }
        }
        scope 6 {
            debug from_account_info => _21;
            let _23: anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug to_account_info => _23;
                let _25: anchor_lang::prelude::AccountInfo<'_>;
                scope 8 {
                    debug authority_account_info => _25;
                    let mut _27: solana_program::instruction::Instruction;
                    let _52: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _55: solana_program::instruction::Instruction;
                    let mut _99: &[&anchor_lang::prelude::Pubkey; 0];
                    scope 9 {
                        debug ix => _27;
                        let mut _56: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
                        let mut _122: *const ();
                        let mut _123: usize;
                        let mut _124: usize;
                        let mut _125: usize;
                        let mut _126: usize;
                        let mut _127: bool;
                        scope 14 {
                            debug account_infos => _56;
                            let mut _70: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                            scope 16 {
                                debug iter => _70;
                                let _78: &anchor_lang::prelude::AccountInfo<'_>;
                                scope 17 {
                                    debug account_info => _78;
                                }
                            }
                        }
                        scope 15 {
                        }
                    }
                    scope 10 {
                        debug residual => _52;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _55;
                        scope 13 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _110 = const false;
        _109 = const false;
        _108 = const false;
        _107 = const false;
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_6);
        _110 = const true;
        _9 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_9;
        _14 = &(*_15);
        _13 = validate_mint_fee(move _14) -> [return: bb2, unwind: bb57];
    }

    bb2: {
        StorageDead(_14);
        _12 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _13) -> [return: bb3, unwind: bb57];
    }

    bb3: {
        StorageDead(_13);
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = ((_12 as Continue).0: ());
        _11 = _20;
        StorageDead(_20);
        _111 = discriminant(_12);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_2);
        _21 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _22) -> [return: bb8, unwind: bb57];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb55];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _117 = discriminant(_12);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb42;
    }

    bb8: {
        _109 = const true;
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_3);
        _23 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _24) -> [return: bb9, unwind: bb54];
    }

    bb9: {
        _108 = const true;
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_4);
        _25 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _26) -> [return: bb10, unwind: bb52];
    }

    bb10: {
        _107 = const true;
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_1);
        _31 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _32) -> [return: bb11, unwind: bb50];
    }

    bb11: {
        StorageDead(_32);
        _100 = deref_copy ((*_31).0: &anchor_lang::prelude::Pubkey);
        _30 = &(*_100);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(_21.0: &anchor_lang::prelude::Pubkey);
        _101 = deref_copy (*_34);
        _33 = &(*_101);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &(_9.0: &anchor_lang::prelude::Pubkey);
        _102 = deref_copy (*_36);
        _35 = &(*_102);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(_23.0: &anchor_lang::prelude::Pubkey);
        _103 = deref_copy (*_38);
        _37 = &(*_103);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(_25.0: &anchor_lang::prelude::Pubkey);
        _104 = deref_copy (*_40);
        _39 = &(*_104);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _99 = const _;
        _43 = &(*_99);
        _42 = &(*_43);
        _41 = move _42 as &[&anchor_lang::prelude::Pubkey] (PointerCoercion(Unsize));
        StorageDead(_42);
        StorageLive(_45);
        _45 = _5;
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_6);
        _49 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _50) -> [return: bb12, unwind: bb50];
    }

    bb12: {
        _48 = &(*_49);
        _47 = <anchor_spl::token_interface::Mint as Deref>::deref(move _48) -> [return: bb13, unwind: bb50];
    }

    bb13: {
        StorageDead(_50);
        StorageDead(_48);
        _46 = ((*_47).2: u8);
        _29 = anchor_spl::token_2022::spl_token_2022::instruction::transfer_checked(move _30, move _33, move _35, move _37, move _39, move _41, move _45, move _46) -> [return: bb14, unwind: bb50];
    }

    bb14: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        _28 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _29) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        StorageDead(_29);
        _51 = discriminant(_28);
        switchInt(move _51) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        StorageLive(_55);
        _55 = move ((_28 as Continue).0: solana_program::instruction::Instruction);
        _27 = move _55;
        StorageDead(_55);
        _113 = discriminant(_28);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _59 = SizeOf([anchor_lang::prelude::AccountInfo<'_>; 4]);
        _60 = AlignOf([anchor_lang::prelude::AccountInfo<'_>; 4]);
        _61 = alloc::alloc::exchange_malloc(move _59, move _60) -> [return: bb19, unwind: bb46];
    }

    bb17: {
        StorageLive(_52);
        _52 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_54);
        _54 = move _52;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _54) -> [return: bb18, unwind: bb48];
    }

    bb18: {
        StorageDead(_54);
        StorageDead(_52);
        _115 = discriminant(_28);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        drop(_25) -> [return: bb39, unwind: bb52];
    }

    bb19: {
        StorageLive(_62);
        _62 = ShallowInitBox(move _61, [anchor_lang::prelude::AccountInfo<'_>; 4]);
        StorageLive(_63);
        _109 = const false;
        _63 = move _21;
        StorageLive(_64);
        _110 = const false;
        _64 = move _9;
        StorageLive(_65);
        _108 = const false;
        _65 = move _23;
        StorageLive(_66);
        _107 = const false;
        _66 = move _25;
        _121 = (((_62.0: std::ptr::Unique<[anchor_lang::prelude::AccountInfo<'_>; 4]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountInfo<'_>; 4]>).0: *const [anchor_lang::prelude::AccountInfo<'_>; 4]);
        _122 = _121 as *const () (PtrToPtr);
        _123 = _122 as usize (Transmute);
        _124 = AlignOf([anchor_lang::prelude::AccountInfo<'_>; 4]);
        _125 = Sub(_124, const 1_usize);
        _126 = BitAnd(_123, _125);
        _127 = Eq(_126, const 0_usize);
        assert(_127, "misaligned pointer dereference: address must be a multiple of {} but is {}", _124, _123) -> [success: bb58, unwind unreachable];
    }

    bb20: {
        StorageDead(_57);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = move _7;
        _68 = <&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as IntoIterator>::into_iter(move _69) -> [return: bb21, unwind: bb45];
    }

    bb21: {
        StorageDead(_69);
        StorageLive(_70);
        _70 = move _68;
        goto -> bb22;
    }

    bb22: {
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &mut _70;
        _74 = &mut (*_75);
        _73 = <&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _74) -> [return: bb23, unwind: bb45];
    }

    bb23: {
        StorageDead(_74);
        _76 = discriminant(_73);
        switchInt(move _76) -> [0: bb25, 1: bb24, otherwise: bb5];
    }

    bb24: {
        StorageLive(_78);
        _78 = ((_73 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut (_27.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        StorageLive(_81);
        StorageLive(_82);
        _82 = ((*_78).6: bool);
        switchInt(move _82) -> [0: bb28, otherwise: bb26];
    }

    bb25: {
        _67 = const ();
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_27;
        _92 = &(*_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_56;
        _96 = &(*_97);
        _95 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _96) -> [return: bb34, unwind: bb45];
    }

    bb26: {
        StorageLive(_83);
        _105 = deref_copy ((*_78).0: &anchor_lang::prelude::Pubkey);
        _83 = (*_105);
        StorageLive(_84);
        _84 = ((*_78).5: bool);
        _81 = anchor_lang::prelude::AccountMeta::new(move _83, move _84) -> [return: bb27, unwind: bb45];
    }

    bb27: {
        StorageDead(_84);
        StorageDead(_83);
        goto -> bb30;
    }

    bb28: {
        StorageLive(_85);
        _106 = deref_copy ((*_78).0: &anchor_lang::prelude::Pubkey);
        _85 = (*_106);
        StorageLive(_86);
        _86 = ((*_78).6: bool);
        _81 = anchor_lang::prelude::AccountMeta::new_readonly(move _85, move _86) -> [return: bb29, unwind: bb45];
    }

    bb29: {
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_82);
        _79 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _80, move _81) -> [return: bb31, unwind: bb45];
    }

    bb31: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &mut _56;
        StorageLive(_89);
        StorageLive(_90);
        _90 = &(*_78);
        _89 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _90) -> [return: bb32, unwind: bb45];
    }

    bb32: {
        StorageDead(_90);
        _87 = Vec::<anchor_lang::prelude::AccountInfo<'_>>::push(move _88, move _89) -> [return: bb33, unwind: bb45];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        _72 = const ();
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_72);
        _71 = const ();
        goto -> bb22;
    }

    bb34: {
        _94 = &(*_95);
        StorageDead(_96);
        StorageLive(_98);
        _98 = &(*_8);
        _91 = invoke_signed(move _92, move _94, move _98) -> [return: bb35, unwind: bb45];
    }

    bb35: {
        StorageDead(_98);
        StorageDead(_94);
        StorageDead(_92);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into}>(move _91, <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into) -> [return: bb36, unwind: bb45];
    }

    bb36: {
        StorageDead(_91);
        drop(_56) -> [return: bb37, unwind: bb46];
    }

    bb37: {
        StorageDead(_56);
        drop(_27) -> [return: bb38, unwind: bb50];
    }

    bb38: {
        StorageDead(_27);
        _107 = const false;
        StorageDead(_25);
        _108 = const false;
        StorageDead(_23);
        _109 = const false;
        StorageDead(_21);
        _110 = const false;
        StorageDead(_9);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        goto -> bb44;
    }

    bb39: {
        _107 = const false;
        StorageDead(_25);
        drop(_23) -> [return: bb40, unwind: bb54];
    }

    bb40: {
        _108 = const false;
        StorageDead(_23);
        drop(_21) -> [return: bb41, unwind: bb57];
    }

    bb41: {
        _109 = const false;
        StorageDead(_21);
        goto -> bb42;
    }

    bb42: {
        drop(_9) -> [return: bb43, unwind: bb47];
    }

    bb43: {
        _110 = const false;
        StorageDead(_9);
        goto -> bb44;
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        drop(_56) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_27) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        _119 = discriminant(_28);
        goto -> bb50;
    }

    bb49 (cleanup): {
        drop(_25) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_107) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_23) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_108) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_21) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_109) -> [0: bb57, otherwise: bb53];
    }

    bb55 (cleanup): {
        _120 = discriminant(_12);
        goto -> bb57;
    }

    bb56 (cleanup): {
        drop(_9) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_110) -> [0: bb47, otherwise: bb56];
    }

    bb58: {
        (*_121) = [move _63, move _64, move _65, move _66];
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        _58 = move _62;
        _57 = move _58 as std::boxed::Box<[anchor_lang::prelude::AccountInfo<'_>]> (PointerCoercion(Unsize));
        StorageDead(_62);
        StorageDead(_58);
        _56 = std::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::into_vec::<std::alloc::Global>(move _57) -> [return: bb20, unwind: bb46];
    }
}
