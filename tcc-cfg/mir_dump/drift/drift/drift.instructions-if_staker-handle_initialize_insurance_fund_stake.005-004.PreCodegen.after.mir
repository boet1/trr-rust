// MIR for `if_staker::handle_initialize_insurance_fund_stake` after PreCodegen

fn if_staker::handle_initialize_insurance_fund_stake(_1: anchor_lang::context::Context<'_, '_, '_, '_, if_staker::InitializeInsuranceFundStake<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _3: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, error::ErrorCode>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _8: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, error::ErrorCode>;
    let mut _9: error::ErrorCode;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _17: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _24: state::insurance_fund_stake::InsuranceFundStake;
    let mut _25: anchor_lang::prelude::Pubkey;
    let mut _26: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _27: &anchor_lang::prelude::Signer<'_>;
    let mut _28: u16;
    let mut _29: i64;
    let mut _30: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _31: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _34: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _35: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _41: ();
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _43: std::result::Result<(), error::ErrorCode>;
    let mut _44: bool;
    let mut _45: &state::spot_market::SpotMarket;
    let _46: &state::spot_market::SpotMarket;
    let mut _47: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _48: state::paused_operations::InsuranceFundOperation;
    let mut _49: ();
    let _51: ();
    let mut _52: &str;
    let _53: &str;
    let mut _54: &std::string::String;
    let _55: &std::string::String;
    let _56: std::string::String;
    let mut _58: std::fmt::Arguments<'_>;
    let mut _59: &[&str];
    let mut _60: &[&str; 2];
    let _61: &[&str; 2];
    let _62: [&str; 2];
    let mut _63: &[core::fmt::rt::Argument<'_>];
    let mut _64: &[core::fmt::rt::Argument<'_>; 1];
    let _65: &[core::fmt::rt::Argument<'_>; 1];
    let _66: [core::fmt::rt::Argument<'_>; 1];
    let mut _67: core::fmt::rt::Argument<'_>;
    let mut _68: &error::ErrorCode;
    let _69: &error::ErrorCode;
    let _70: ();
    let mut _71: &str;
    let _72: &str;
    let mut _73: &std::string::String;
    let _74: &std::string::String;
    let _75: std::string::String;
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[&str; 1];
    let _80: &[&str; 1];
    let _81: [&str; 1];
    let mut _82: error::ErrorCode;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: ();
    let mut _91: &mut instructions::if_staker::InitializeInsuranceFundStake<'_>;
    let mut _92: &mut instructions::if_staker::InitializeInsuranceFundStake<'_>;
    let mut _93: &anchor_lang::prelude::Pubkey;
    let mut _94: &mut instructions::if_staker::InitializeInsuranceFundStake<'_>;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    scope 1 {
        debug if_stake => _3;
        let _15: anchor_lang::prelude::Clock;
        let _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _22: anchor_lang::prelude::Clock;
        scope 6 {
            debug clock => _15;
            let _23: i64;
            scope 11 {
                debug now => _23;
                let _32: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                let _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _40: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                scope 12 {
                    debug spot_market => _32;
                    let _50: error::ErrorCode;
                    let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _87: ();
                    scope 17 {
                        debug error_code => _50;
                        let _57: std::string::String;
                        let _76: std::string::String;
                        let mut _89: &[&str; 1];
                        let mut _90: &[&str; 2];
                        scope 18 {
                            debug res => _57;
                        }
                        scope 19 {
                            debug res => _76;
                        }
                    }
                    scope 20 {
                        debug residual => _84;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug val => _87;
                        scope 23 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _37;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _40;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _19;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _22;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _91 = deref_copy (_1.1: &mut instructions::if_staker::InitializeInsuranceFundStake<'_>);
        _7 = &((*_91).1: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load_init(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = error::ErrorCode::UnableToLoadAccountLoader;
        _8 = std::result::Result::<RefMut<'_, InsuranceFundStake>, error::ErrorCode>::Err(move _9);
        StorageDead(_9);
        _5 = std::result::Result::<RefMut<'_, InsuranceFundStake>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _6, move _8) -> [return: bb2, unwind: bb51];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, InsuranceFundStake>, error::ErrorCode> as Try>::branch(move _5) -> [return: bb3, unwind: bb51];
    }

    bb3: {
        StorageDead(_5);
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _3 = move _14;
        StorageDead(_14);
        _97 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb8, unwind: bb50];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind: bb54];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _95 = discriminant(_4);
        StorageDead(_4);
        goto -> bb45;
    }

    bb8: {
        _16 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _17) -> [return: bb9, unwind: bb50];
    }

    bb9: {
        StorageDead(_17);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_22);
        _22 = move ((_16 as Continue).0: anchor_lang::prelude::Clock);
        _15 = move _22;
        StorageDead(_22);
        _99 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_23);
        _23 = (_15.4: i64);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _92 = deref_copy (_1.1: &mut instructions::if_staker::InitializeInsuranceFundStake<'_>);
        _27 = &((*_92).4: anchor_lang::prelude::Signer<'_>);
        _26 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _27) -> [return: bb13, unwind: bb50];
    }

    bb11: {
        StorageLive(_19);
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _21) -> [return: bb12, unwind: bb53];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        _105 = discriminant(_16);
        StorageDead(_16);
        goto -> bb44;
    }

    bb13: {
        StorageDead(_27);
        _93 = deref_copy ((*_26).0: &anchor_lang::prelude::Pubkey);
        _25 = (*_93);
        StorageLive(_28);
        _28 = _2;
        StorageLive(_29);
        _29 = _23;
        _24 = InsuranceFundStake::new(move _25, move _28, move _29) -> [return: bb14, unwind: bb50];
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_25);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &mut _3;
        _30 = <RefMut<'_, InsuranceFundStake> as DerefMut>::deref_mut(move _31) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        StorageDead(_31);
        (*_30) = move _24;
        StorageDead(_24);
        StorageDead(_30);
        StorageDead(_26);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _94 = deref_copy (_1.1: &mut instructions::if_staker::InitializeInsuranceFundStake<'_>);
        _35 = &((*_94).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _34 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _35) -> [return: bb16, unwind: bb50];
    }

    bb16: {
        StorageDead(_35);
        _33 = <std::result::Result<Ref<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _34) -> [return: bb17, unwind: bb50];
    }

    bb17: {
        StorageDead(_34);
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb18, 1: bb19, otherwise: bb5];
    }

    bb18: {
        StorageLive(_40);
        _40 = move ((_33 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _32 = move _40;
        StorageDead(_40);
        _101 = discriminant(_33);
        StorageDead(_33);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_32;
        _46 = <Ref<'_, SpotMarket> as Deref>::deref(move _47) -> [return: bb21, unwind: bb49];
    }

    bb19: {
        StorageLive(_37);
        _37 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _39) -> [return: bb20, unwind: bb52];
    }

    bb20: {
        StorageDead(_39);
        StorageDead(_37);
        _103 = discriminant(_33);
        StorageDead(_33);
        goto -> bb43;
    }

    bb21: {
        _45 = &(*_46);
        StorageDead(_47);
        StorageLive(_48);
        _48 = InsuranceFundOperation::Init;
        _44 = SpotMarket::is_insurance_fund_operation_paused(move _45, move _48) -> [return: bb22, unwind: bb49];
    }

    bb22: {
        switchInt(move _44) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_46);
        StorageLive(_50);
        _50 = error::ErrorCode::InsuranceFundOperationPaused;
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _90 = const _;
        _61 = &(*_90);
        _60 = &(*_61);
        _59 = move _60 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_50;
        _68 = &(*_69);
        _67 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _68) -> [return: bb25, unwind: bb49];
    }

    bb24: {
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_46);
        StorageLive(_49);
        _49 = ();
        _43 = std::result::Result::<(), error::ErrorCode>::Ok(move _49);
        StorageDead(_49);
        goto -> bb36;
    }

    bb25: {
        StorageDead(_68);
        _66 = [move _67];
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = move _64 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_64);
        _58 = Arguments::<'_>::new_v1(move _59, move _63) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        StorageDead(_63);
        StorageDead(_59);
        _57 = format(move _58) -> [return: bb27, unwind: bb49];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_61);
        _56 = move _57;
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = <String as Deref>::deref(move _54) -> [return: bb28, unwind: bb48];
    }

    bb28: {
        _52 = &(*_53);
        StorageDead(_54);
        _51 = solana_program::log::sol_log(move _52) -> [return: bb29, unwind: bb48];
    }

    bb29: {
        StorageDead(_52);
        drop(_56) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _89 = const _;
        _80 = &(*_89);
        _79 = &(*_80);
        _78 = move _79 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_79);
        _77 = Arguments::<'_>::new_const(move _78) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        StorageDead(_78);
        _76 = format(move _77) -> [return: bb32, unwind: bb49];
    }

    bb32: {
        StorageDead(_77);
        StorageDead(_80);
        _75 = move _76;
        StorageDead(_76);
        _74 = &_75;
        _73 = &(*_74);
        _72 = <String as Deref>::deref(move _73) -> [return: bb33, unwind: bb47];
    }

    bb33: {
        _71 = &(*_72);
        StorageDead(_73);
        _70 = solana_program::log::sol_log(move _71) -> [return: bb34, unwind: bb47];
    }

    bb34: {
        StorageDead(_71);
        drop(_75) -> [return: bb35, unwind: bb49];
    }

    bb35: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_82);
        _82 = _50;
        _43 = std::result::Result::<(), error::ErrorCode>::Err(move _82);
        StorageDead(_82);
        StorageDead(_50);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_44);
        _42 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _43) -> [return: bb37, unwind: bb49];
    }

    bb37: {
        StorageDead(_43);
        _83 = discriminant(_42);
        switchInt(move _83) -> [0: bb38, 1: bb39, otherwise: bb5];
    }

    bb38: {
        StorageLive(_87);
        _87 = ((_42 as Continue).0: ());
        _41 = _87;
        StorageDead(_87);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_88);
        _88 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _88);
        StorageDead(_88);
        drop(_32) -> [return: bb41, unwind: bb50];
    }

    bb39: {
        StorageLive(_84);
        _84 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_42);
        StorageDead(_41);
        drop(_32) -> [return: bb43, unwind: bb50];
    }

    bb41: {
        StorageDead(_32);
        StorageDead(_23);
        StorageDead(_15);
        drop(_3) -> [return: bb42, unwind: bb51];
    }

    bb42: {
        StorageDead(_3);
        goto -> bb46;
    }

    bb43: {
        StorageDead(_32);
        StorageDead(_23);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_15);
        drop(_3) -> [return: bb45, unwind: bb51];
    }

    bb45: {
        StorageDead(_3);
        goto -> bb46;
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_75) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_56) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_32) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_3) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        resume;
    }

    bb52 (cleanup): {
        _107 = discriminant(_33);
        goto -> bb50;
    }

    bb53 (cleanup): {
        _108 = discriminant(_16);
        goto -> bb50;
    }

    bb54 (cleanup): {
        _109 = discriminant(_4);
        goto -> bb51;
    }
}
