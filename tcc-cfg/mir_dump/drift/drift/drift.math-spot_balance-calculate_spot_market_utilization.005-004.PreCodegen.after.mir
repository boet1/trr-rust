// MIR for `calculate_spot_market_utilization` after PreCodegen

fn calculate_spot_market_utilization(_1: &SpotMarket) -> std::result::Result<u128, error::ErrorCode> {
    debug spot_market => _1;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _2: u128;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _4: std::result::Result<u128, error::ErrorCode>;
    let mut _5: u128;
    let mut _6: &state::spot_market::SpotMarket;
    let mut _7: &state::spot_market::SpotBalanceType;
    let _8: &state::spot_market::SpotBalanceType;
    let _9: state::spot_market::SpotBalanceType;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: u128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _17: std::result::Result<u128, error::ErrorCode>;
    let mut _18: u128;
    let mut _19: &state::spot_market::SpotMarket;
    let mut _20: &state::spot_market::SpotBalanceType;
    let _21: &state::spot_market::SpotBalanceType;
    let _22: state::spot_market::SpotBalanceType;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _30: std::result::Result<u128, error::ErrorCode>;
    let mut _31: u128;
    let mut _32: u128;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: u128;
    let mut _40: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug deposit_token_amount => _2;
        let _15: u128;
        let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _27: u128;
        let mut _39: &state::spot_market::SpotBalanceType;
        scope 6 {
            debug borrow_token_amount => _15;
            let _28: u128;
            let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _37: u128;
            scope 11 {
                debug utilization => _28;
            }
            scope 12 {
                debug residual => _34;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _37;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _24;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _27;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).11: u128);
        StorageLive(_6);
        _6 = &(*_1);
        StorageLive(_7);
        StorageLive(_8);
        _40 = const _;
        _8 = &(*_40);
        _7 = &(*_8);
        _4 = get_token_amount(move _5, move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _3 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        _10 = discriminant(_3);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_3 as Continue).0: u128);
        _2 = _14;
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_3);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_1).12: u128);
        StorageLive(_19);
        _19 = &(*_1);
        StorageLive(_20);
        StorageLive(_21);
        _39 = const _;
        _21 = &(*_39);
        _20 = &(*_21);
        _17 = get_token_amount(move _18, move _19, move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_3);
        goto -> bb18;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        _23 = discriminant(_16);
        switchInt(move _23) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_27);
        _27 = ((_16 as Continue).0: u128);
        _15 = _27;
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_16);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _2;
        StorageLive(_32);
        _32 = _15;
        _30 = calculate_utilization(move _31, move _32) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_16);
        goto -> bb17;
    }

    bb12: {
        StorageDead(_32);
        StorageDead(_31);
        _29 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_30);
        _33 = discriminant(_29);
        switchInt(move _33) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_37);
        _37 = ((_29 as Continue).0: u128);
        _28 = _37;
        StorageDead(_37);
        StorageDead(_29);
        StorageLive(_38);
        _38 = _28;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _38);
        StorageDead(_38);
        StorageDead(_28);
        StorageDead(_15);
        StorageDead(_2);
        goto -> bb19;
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_15);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_2);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}
