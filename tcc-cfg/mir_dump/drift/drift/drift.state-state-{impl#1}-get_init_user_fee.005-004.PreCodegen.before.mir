// MIR for `state::state::<impl at programs/drift/src/state/state.rs:68:1: 68:11>::get_init_user_fee` before PreCodegen

fn state::state::<impl at programs/drift/src/state/state.rs:68:1: 68:11>::get_init_user_fee(_1: &state::state::State) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _2: u64;
    let mut _3: u64;
    let mut _4: u64;
    let mut _5: u16;
    let mut _6: (u64, bool);
    let mut _7: bool;
    let mut _9: u64;
    let mut _10: (u64, bool);
    let mut _11: bool;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _14: std::result::Result<u64, error::ErrorCode>;
    let mut _15: u64;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _17: std::result::Result<u64, error::ErrorCode>;
    let mut _18: u64;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: u64;
    let mut _25: u64;
    let mut _26: &state::state::State;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: bool;
    let mut _34: u64;
    let mut _35: u64;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _37: std::result::Result<u64, error::ErrorCode>;
    let mut _38: u64;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _40: std::result::Result<u64, error::ErrorCode>;
    let mut _41: u64;
    let mut _42: u64;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _44: std::result::Result<u64, error::ErrorCode>;
    let mut _45: u64;
    let mut _46: u64;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: u64;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _59: std::result::Result<u64, error::ErrorCode>;
    let mut _60: u64;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: u64;
    scope 1 {
        debug max_init_fee => _2;
        let _8: u64;
        scope 2 {
            debug target_utilization => _8;
            let _12: u64;
            let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _23: u64;
            let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _31: u64;
            scope 3 {
                debug account_space_utilization => _12;
                let _32: u64;
                let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _51: u64;
                let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _56: u64;
                let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _65: u64;
                let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _70: u64;
                scope 12 {
                    debug init_fee => _32;
                }
                scope 13 {
                    debug residual => _48;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _51;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug residual => _53;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _56;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug residual => _62;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _65;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug residual => _67;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _70;
                    scope 28 {
                    }
                }
            }
            scope 4 {
                debug residual => _20;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _23;
                scope 7 {
                }
            }
            scope 8 {
                debug residual => _28;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _31;
                scope 11 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).23: u16);
        _4 = move _5 as u64 (IntToInt);
        StorageDead(_5);
        _6 = CheckedMul(_4, const _);
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = move (_6.0: u64);
        StorageDead(_4);
        _7 = Eq(const 100_u64, const 0_u64);
        assert(!move _7, "attempt to divide `{}` by zero", _3) -> [success: bb2, unwind continue];
    }

    bb2: {
        _2 = Div(move _3, const 100_u64);
        StorageDead(_3);
        StorageLive(_8);
        StorageLive(_9);
        _10 = CheckedMul(const 8_u64, const _);
        assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_u64, const _) -> [success: bb3, unwind continue];
    }

    bb3: {
        _9 = move (_10.0: u64);
        _11 = Eq(const 10_u64, const 0_u64);
        assert(!move _11, "attempt to divide `{}` by zero", _9) -> [success: bb4, unwind continue];
    }

    bb4: {
        _8 = Div(move _9, const 10_u64);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_1).9: u64);
        _17 = <u64 as SafeMath>::safe_mul(move _18, const _) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        _16 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_23);
        _23 = ((_16 as Continue).0: u64);
        _15 = _23;
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_1);
        _25 = state::state::State::max_number_of_sub_accounts(move _26) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb44;
    }

    bb11: {
        StorageDead(_26);
        _24 = <u64 as Ord>::max(move _25, const 1_u64) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        _14 = <u64 as SafeMath>::safe_div(move _15, move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_15);
        _13 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _14) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_14);
        _27 = discriminant(_13);
        switchInt(move _27) -> [0: bb15, 1: bb16, otherwise: bb8];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_13 as Continue).0: u64);
        _12 = _31;
        StorageDead(_31);
        StorageDead(_16);
        StorageDead(_13);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _12;
        StorageLive(_35);
        _35 = _8;
        _33 = Gt(move _34, move _35);
        switchInt(move _33) -> [0: bb19, otherwise: bb18];
    }

    bb16: {
        StorageLive(_28);
        _28 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_30);
        StorageDead(_28);
        goto -> bb44;
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _2;
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _12;
        StorageLive(_46);
        _46 = _8;
        _44 = <u64 as SafeMath>::safe_sub(move _45, move _46) -> [return: bb20, unwind continue];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = const 0_u64;
        goto -> bb40;
    }

    bb20: {
        StorageDead(_46);
        StorageDead(_45);
        _43 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _44) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_44);
        _47 = discriminant(_43);
        switchInt(move _47) -> [0: bb22, 1: bb23, otherwise: bb8];
    }

    bb22: {
        StorageLive(_51);
        _51 = ((_43 as Continue).0: u64);
        _42 = _51;
        StorageDead(_51);
        _40 = <u64 as SafeMath>::safe_mul(move _41, move _42) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_48);
        _48 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb42;
    }

    bb25: {
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _40) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_40);
        _52 = discriminant(_39);
        switchInt(move _52) -> [0: bb27, 1: bb28, otherwise: bb8];
    }

    bb27: {
        StorageLive(_56);
        _56 = ((_39 as Continue).0: u64);
        _38 = _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _8;
        _59 = <u64 as SafeMath>::safe_sub(const _, move _60) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_53);
        _53 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb42;
    }

    bb30: {
        StorageDead(_60);
        _58 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _59) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb32, 1: bb33, otherwise: bb8];
    }

    bb32: {
        StorageLive(_65);
        _65 = ((_58 as Continue).0: u64);
        _57 = _65;
        StorageDead(_65);
        _37 = <u64 as SafeMath>::safe_div(move _38, move _57) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_62);
        _62 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb41;
    }

    bb35: {
        StorageDead(_57);
        StorageDead(_38);
        _36 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _37) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_37);
        _66 = discriminant(_36);
        switchInt(move _66) -> [0: bb37, 1: bb38, otherwise: bb8];
    }

    bb37: {
        StorageLive(_70);
        _70 = ((_36 as Continue).0: u64);
        _32 = _70;
        StorageDead(_70);
        StorageDead(_58);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb40;
    }

    bb38: {
        StorageLive(_67);
        _67 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_69);
        StorageDead(_67);
        goto -> bb41;
    }

    bb40: {
        StorageDead(_33);
        StorageLive(_71);
        _71 = _32;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _71);
        StorageDead(_71);
        StorageDead(_32);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_2);
        goto -> bb46;
    }

    bb41: {
        StorageDead(_58);
        goto -> bb43;
    }

    bb42: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb45;
    }

    bb44: {
        StorageDead(_16);
        StorageDead(_13);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_2);
        goto -> bb46;
    }

    bb46: {
        return;
    }
}
