// MIR for `calculate_if_shares_lost` before PreCodegen

fn calculate_if_shares_lost(_1: &InsuranceFundStake, _2: &SpotMarket, _3: u64) -> std::result::Result<u128, error::ErrorCode> {
    debug insurance_fund_stake => _1;
    debug spot_market => _2;
    debug insurance_fund_vault_balance => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _7: std::result::Result<u64, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: u128;
    let mut _10: u64;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: bool;
    let mut _18: u64;
    let mut _19: u64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: u64;
    let mut _24: u128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _26: std::result::Result<u128, error::ErrorCode>;
    let mut _27: u128;
    let mut _28: u128;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: u64;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _36: std::result::Result<u64, error::ErrorCode>;
    let mut _37: u64;
    let mut _38: u64;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _51: std::result::Result<(), error::ErrorCode>;
    let mut _52: bool;
    let mut _53: u128;
    let mut _54: u128;
    let mut _55: ();
    let _57: ();
    let mut _58: &str;
    let _59: &str;
    let mut _60: &std::string::String;
    let _61: &std::string::String;
    let _62: std::string::String;
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[&str; 2];
    let _67: &[&str; 2];
    let _68: [&str; 2];
    let mut _69: &[core::fmt::rt::Argument<'_>];
    let mut _70: &[core::fmt::rt::Argument<'_>; 1];
    let _71: &[core::fmt::rt::Argument<'_>; 1];
    let _72: [core::fmt::rt::Argument<'_>; 1];
    let mut _73: core::fmt::rt::Argument<'_>;
    let mut _74: &error::ErrorCode;
    let _75: &error::ErrorCode;
    let _76: ();
    let mut _77: &str;
    let _78: &str;
    let mut _79: &std::string::String;
    let _80: &std::string::String;
    let _81: std::string::String;
    let mut _83: std::fmt::Arguments<'_>;
    let mut _84: &[&str];
    let mut _85: &[&str; 2];
    let _86: &[&str; 2];
    let _87: [&str; 2];
    let mut _88: &[core::fmt::rt::Argument<'_>];
    let mut _89: &[core::fmt::rt::Argument<'_>; 2];
    let _90: &[core::fmt::rt::Argument<'_>; 2];
    let _91: [core::fmt::rt::Argument<'_>; 2];
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: &u128;
    let _94: &u128;
    let mut _95: core::fmt::rt::Argument<'_>;
    let mut _96: &u128;
    let _97: &u128;
    let mut _98: error::ErrorCode;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _105: std::result::Result<u128, error::ErrorCode>;
    let mut _106: u128;
    let mut _107: u128;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _113: u128;
    scope 1 {
        debug n_shares => _4;
        let _5: u64;
        let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _15: u64;
        scope 2 {
            debug amount => _5;
            let _16: u128;
            let _20: u128;
            let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _33: u128;
            let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _43: u64;
            let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _48: u128;
            scope 7 {
                debug if_shares_lost => _16;
            }
            scope 8 {
                debug new_n_shares => _20;
                let _56: error::ErrorCode;
                let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _103: ();
                let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _112: u128;
                scope 21 {
                    debug error_code => _56;
                    let _63: std::string::String;
                    let _82: std::string::String;
                    let mut _114: &[&str; 2];
                    let mut _115: &[&str; 2];
                    scope 22 {
                        debug res => _63;
                    }
                    scope 23 {
                        debug res => _82;
                    }
                }
                scope 24 {
                    debug residual => _100;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _103;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug residual => _109;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug val => _112;
                    scope 31 {
                    }
                }
            }
            scope 9 {
                debug residual => _30;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _33;
                scope 12 {
                }
            }
            scope 13 {
                debug residual => _40;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _43;
                scope 16 {
                }
            }
            scope 17 {
                debug residual => _45;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _48;
                scope 20 {
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = ((*_1).2: u128);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _4;
        StorageLive(_9);
        _9 = (((*_2).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_10);
        _10 = _3;
        _7 = if_shares_to_vault_amount(move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_6 as Continue).0: u64);
        _5 = _15;
        StorageDead(_15);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _5;
        StorageLive(_19);
        _19 = ((*_1).5: u64);
        _17 = Gt(move _18, move _19);
        switchInt(move _17) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        goto -> bb54;
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = ((*_1).5: u64);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = (((*_2).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_28);
        _28 = _4;
        _26 = <u128 as SafeMath>::safe_sub(move _27, move _28) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = const 0_u128;
        goto -> bb49;
    }

    bb9: {
        StorageDead(_28);
        StorageDead(_27);
        _25 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _29 = discriminant(_25);
        switchInt(move _29) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_33);
        _33 = ((_25 as Continue).0: u128);
        _24 = _33;
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _3;
        StorageLive(_38);
        _38 = ((*_1).5: u64);
        _36 = <u64 as SafeMath>::safe_sub(move _37, move _38) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_30);
        _30 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb51;
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_43);
        _43 = ((_35 as Continue).0: u64);
        _34 = _43;
        StorageDead(_43);
        _22 = vault_amount_to_if_shares(move _23, move _24, move _34) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_34);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb50;
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_22);
        _44 = discriminant(_21);
        switchInt(move _44) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_48);
        _48 = ((_21 as Continue).0: u128);
        _20 = _48;
        StorageDead(_48);
        StorageDead(_35);
        StorageDead(_25);
        StorageDead(_21);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _20;
        StorageLive(_54);
        _54 = _4;
        _52 = Le(move _53, move _54);
        switchInt(move _52) -> [0: bb25, otherwise: bb24];
    }

    bb22: {
        StorageLive(_45);
        _45 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb50;
    }

    bb24: {
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_55);
        _55 = ();
        _51 = std::result::Result::<(), error::ErrorCode>::Ok(move _55);
        StorageDead(_55);
        goto -> bb39;
    }

    bb25: {
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_56);
        _56 = error::ErrorCode::InvalidIFSharesDetected;
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _115 = const _;
        _67 = &(*_115);
        _66 = &(*_67);
        _65 = move _66 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_56;
        _74 = &(*_75);
        _73 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _74) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_74);
        _72 = [move _73];
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = move _70 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_70);
        _64 = Arguments::<'_>::new_v1(move _65, move _69) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_69);
        StorageDead(_65);
        _63 = format(move _64) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_64);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        _62 = move _63;
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = <String as Deref>::deref(move _60) -> [return: bb29, unwind: bb57];
    }

    bb29: {
        _58 = &(*_59);
        StorageDead(_60);
        _57 = solana_program::log::sol_log(move _58) -> [return: bb30, unwind: bb57];
    }

    bb30: {
        StorageDead(_58);
        drop(_62) -> [return: bb31, unwind: bb58];
    }

    bb31: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _114 = const _;
        _86 = &(*_114);
        _85 = &(*_86);
        _84 = move _85 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_85);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_20;
        _93 = &(*_94);
        _92 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _93) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_4;
        _96 = &(*_97);
        _95 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _96) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_96);
        _91 = [move _92, move _95];
        StorageDead(_95);
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = move _89 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_89);
        _83 = Arguments::<'_>::new_v1(move _84, move _88) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_88);
        StorageDead(_84);
        _82 = format(move _83) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_83);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        _81 = move _82;
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = <String as Deref>::deref(move _79) -> [return: bb36, unwind: bb56];
    }

    bb36: {
        _77 = &(*_78);
        StorageDead(_79);
        _76 = solana_program::log::sol_log(move _77) -> [return: bb37, unwind: bb56];
    }

    bb37: {
        StorageDead(_77);
        drop(_81) -> [return: bb38, unwind: bb58];
    }

    bb38: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageLive(_98);
        _98 = _56;
        _51 = std::result::Result::<(), error::ErrorCode>::Err(move _98);
        StorageDead(_98);
        StorageDead(_56);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_52);
        _50 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _51) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_51);
        _99 = discriminant(_50);
        switchInt(move _99) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_103);
        _103 = ((_50 as Continue).0: ());
        _49 = _103;
        StorageDead(_103);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _4;
        StorageLive(_107);
        _107 = _20;
        _105 = <u128 as SafeMath>::safe_sub(move _106, move _107) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_100);
        _100 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb52;
    }

    bb44: {
        StorageDead(_107);
        StorageDead(_106);
        _104 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _105) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_105);
        _108 = discriminant(_104);
        switchInt(move _108) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_112);
        _112 = ((_104 as Continue).0: u128);
        _16 = _112;
        StorageDead(_112);
        StorageDead(_20);
        StorageDead(_104);
        goto -> bb49;
    }

    bb47: {
        StorageLive(_109);
        _109 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_20);
        StorageDead(_104);
        goto -> bb53;
    }

    bb49: {
        StorageDead(_17);
        StorageLive(_113);
        _113 = _16;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _113);
        StorageDead(_113);
        StorageDead(_16);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb55;
    }

    bb50: {
        StorageDead(_35);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_25);
        StorageDead(_21);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_20);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb55;
    }

    bb55: {
        return;
    }

    bb56 (cleanup): {
        drop(_81) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_62) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        resume;
    }
}
