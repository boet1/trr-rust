// MIR for `phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:342:1: 342:72>::get_best_bid_and_ask` after PreCodegen

fn phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:342:1: 342:72>::get_best_bid_and_ask(_1: &PhoenixFulfillmentParams<'_, '_>) -> std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let _2: std::cell::Ref<'_, &mut [u8]>;
    let mut _3: &std::cell::RefCell<&mut [u8]>;
    let _4: &std::cell::RefCell<&mut [u8]>;
    let mut _5: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: &state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _9: (&[u8], &[u8]);
    let mut _10: &[u8];
    let _11: &&mut [u8];
    let mut _12: &std::cell::Ref<'_, &mut [u8]>;
    let mut _13: usize;
    let _15: ();
    let mut _16: bool;
    let mut _17: u32;
    let mut _18: !;
    let _19: ();
    let mut _20: &str;
    let _21: &str;
    let mut _22: error::ErrorCode;
    let mut _24: phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>>;
    let mut _26: std::result::Result<phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>, error::ErrorCode>;
    let mut _27: std::result::Result<phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>, anchor_lang::prelude::ProgramError>;
    let mut _28: &phoenix::program::MarketSizeParams;
    let _29: &phoenix::program::MarketSizeParams;
    let mut _30: &[u8];
    let mut _31: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:357:22: 357:25};
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: std::option::Option<(&phoenix::state::markets::FIFOOrderId, &phoenix::state::markets::FIFORestingOrder)>;
    let mut _39: &mut std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = (&phoenix::state::markets::FIFOOrderId, &phoenix::state::markets::FIFORestingOrder)>>;
    let mut _40: std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = (&phoenix::state::markets::FIFOOrderId, &phoenix::state::markets::FIFORestingOrder)>>;
    let mut _41: &dyn sokoban::node_allocator::OrderedNodeAllocatorMap<phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder>;
    let _42: &dyn sokoban::node_allocator::OrderedNodeAllocatorMap<phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder>;
    let mut _43: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _44: phoenix::state::Side;
    let mut _45: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:365:74: 365:82};
    let mut _46: &&dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _47: &&phoenix::program::MarketHeader;
    let mut _49: std::option::Option<(&phoenix::state::markets::FIFOOrderId, &phoenix::state::markets::FIFORestingOrder)>;
    let mut _50: &mut std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = (&phoenix::state::markets::FIFOOrderId, &phoenix::state::markets::FIFORestingOrder)>>;
    let mut _51: std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = (&phoenix::state::markets::FIFOOrderId, &phoenix::state::markets::FIFORestingOrder)>>;
    let mut _52: &dyn sokoban::node_allocator::OrderedNodeAllocatorMap<phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder>;
    let _53: &dyn sokoban::node_allocator::OrderedNodeAllocatorMap<phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder>;
    let mut _54: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _55: phoenix::state::Side;
    let mut _56: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:373:74: 373:82};
    let mut _57: &&dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _58: &&phoenix::program::MarketHeader;
    let mut _59: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _60: std::option::Option<u64>;
    let mut _61: std::option::Option<u64>;
    let mut _62: &mut [u8];
    scope 1 {
        debug market_data => _2;
        let _8: &[u8];
        scope 2 {
            debug market_bytes => _8;
            let _14: &phoenix::program::MarketHeader;
            scope 3 {
                debug header => _14;
                let _23: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
                let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _36: phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
                scope 4 {
                    debug market => _23;
                    let _37: std::option::Option<u64>;
                    scope 9 {
                        debug best_bid => _37;
                        let _48: std::option::Option<u64>;
                        scope 10 {
                            debug best_ask => _48;
                        }
                    }
                }
                scope 5 {
                    debug residual => _33;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _36;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>);
        _6 = <PhoenixMarketContext<'_, '_> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = &((*_6).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _4 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &(*_4);
        StorageDead(_5);
        _2 = RefCell::<&mut [u8]>::borrow(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_3);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_2;
        _11 = <Ref<'_, &mut [u8]> as Deref>::deref(move _12) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _62 = deref_copy (*_11);
        _10 = &(*_62);
        StorageDead(_12);
        StorageLive(_13);
        _13 = std::mem::size_of::<MarketHeader>() -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _9 = core::slice::<impl [u8]>::split_at(move _10, move _13) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_10);
        StorageLive(_8);
        _8 = (_9.1: &[u8]);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_14);
        _14 = &(((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>).1: phoenix::program::MarketHeader);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = (((*_14).5: phoenix::program::TokenParams).0: u32);
        _16 = Ne(move _17, const 6_u32);
        switchInt(move _16) -> [0: bb9, otherwise: bb7];
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = const "Quote decimals must be 6";
        _20 = &(*_21);
        _19 = solana_program::log::sol_log(move _20) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_22);
        _22 = error::ErrorCode::InvalidPricePrecision;
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Err(move _22);
        StorageDead(_22);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb28;
    }

    bb9: {
        StorageDead(_17);
        _15 = const ();
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_14).2: phoenix::program::MarketSizeParams);
        _28 = &(*_29);
        StorageLive(_30);
        _30 = &(*_8);
        _27 = load_with_dispatch(move _28, move _30) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_31);
        _31 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:357:22: 357:25};
        _26 = std::result::Result::<MarketWrapper<'_, anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>, anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:357:22: 357:25}>(move _27, move _31) -> [return: bb11, unwind: bb33];
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_27);
        _25 = <std::result::Result<MarketWrapper<'_, anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>, error::ErrorCode> as Try>::branch(move _26) -> [return: bb12, unwind: bb33];
    }

    bb12: {
        StorageDead(_26);
        _32 = discriminant(_25);
        switchInt(move _32) -> [0: bb13, 1: bb15, otherwise: bb14];
    }

    bb13: {
        StorageLive(_36);
        _36 = move ((_25 as Continue).0: phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>);
        _24 = move _36;
        StorageDead(_36);
        _23 = (_24.0: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &(*_23);
        StorageLive(_44);
        _44 = phoenix::state::Side::Bid;
        _42 = <dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket> as phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>>::get_book(move _43, move _44) -> [return: bb17, unwind: bb33];
    }

    bb14: {
        unreachable;
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb28;
    }

    bb17: {
        _41 = &(*_42);
        StorageDead(_44);
        StorageDead(_43);
        _40 = <dyn sokoban::node_allocator::OrderedNodeAllocatorMap<FIFOOrderId, FIFORestingOrder> as sokoban::node_allocator::NodeAllocatorMap<FIFOOrderId, FIFORestingOrder>>::iter(move _41) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        _39 = &mut _40;
        StorageDead(_41);
        _38 = <Box<dyn DoubleEndedIterator<Item = (&FIFOOrderId, &FIFORestingOrder)>> as Iterator>::next(move _39) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        StorageDead(_39);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_23;
        StorageLive(_47);
        _47 = &_14;
        _45 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:365:74: 365:82} { market: move _46, header: move _47 };
        StorageDead(_47);
        StorageDead(_46);
        _37 = Option::<(&FIFOOrderId, &FIFORestingOrder)>::and_then::<u64, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:365:74: 365:82}>(move _38, move _45) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        StorageDead(_45);
        StorageDead(_38);
        drop(_40) -> [return: bb21, unwind: bb33];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_23);
        StorageLive(_55);
        _55 = phoenix::state::Side::Ask;
        _53 = <dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket> as phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>>::get_book(move _54, move _55) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        _52 = &(*_53);
        StorageDead(_55);
        StorageDead(_54);
        _51 = <dyn sokoban::node_allocator::OrderedNodeAllocatorMap<FIFOOrderId, FIFORestingOrder> as sokoban::node_allocator::NodeAllocatorMap<FIFOOrderId, FIFORestingOrder>>::iter(move _52) -> [return: bb23, unwind: bb33];
    }

    bb23: {
        _50 = &mut _51;
        StorageDead(_52);
        _49 = <Box<dyn DoubleEndedIterator<Item = (&FIFOOrderId, &FIFORestingOrder)>> as Iterator>::next(move _50) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        StorageDead(_50);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_23;
        StorageLive(_58);
        _58 = &_14;
        _56 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:373:74: 373:82} { market: move _57, header: move _58 };
        StorageDead(_58);
        StorageDead(_57);
        _48 = Option::<(&FIFOOrderId, &FIFORestingOrder)>::and_then::<u64, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:373:74: 373:82}>(move _49, move _56) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_49);
        drop(_51) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _37;
        StorageLive(_61);
        _61 = _48;
        _59 = (move _60, move _61);
        StorageDead(_61);
        StorageDead(_60);
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Ok(move _59);
        StorageDead(_59);
        StorageDead(_48);
        StorageDead(_37);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_8);
        drop(_2) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        StorageDead(_2);
        goto -> bb30;
    }

    bb28: {
        StorageDead(_14);
        StorageDead(_8);
        drop(_2) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        StorageDead(_2);
        goto -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_51) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_40) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_2) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }
}
