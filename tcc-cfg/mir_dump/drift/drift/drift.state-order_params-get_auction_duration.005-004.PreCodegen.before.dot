digraph Mir_0_3650 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_auction_duration(_1: u64, _2: u64, _3: state::perp_market::ContractTier) -&gt; std::result::Result&lt;u8, error::ErrorCode&gt;<br align="left"/>let _4: u64;<br align="left"/>let mut _5: u64;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _7: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _13: u64;<br align="left"/>let mut _14: u64;<br align="left"/>let _15: u64;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>let mut _18: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>let _19: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>let _20: state::perp_market::ContractTier;<br align="left"/>let mut _21: u8;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _25: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _26: u64;<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _28: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: u64;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: u64;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: isize;<br align="left"/>let _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _42: u64;<br align="left"/>let mut _43: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>debug price_diff =&gt; _1;<br align="left"/>debug price =&gt; _2;<br align="left"/>debug contract_tier =&gt; _3;<br align="left"/>debug percent_diff =&gt; _4;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug slots_per_bp =&gt; _15;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug residual =&gt; _39;<br align="left"/>debug val =&gt; _42;<br align="left"/>>;
    bb0__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _1<br/></td></tr><tr><td align="left">_7 = &lt;u64 as SafeMath&gt;::safe_mul(move _8, const _)</td></tr></table>>];
    bb1__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb2__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_9 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_6 as Continue).0: u64)<br/>_5 = _13<br/>StorageDead(_13)<br/>StorageLive(_14)<br/>_14 = _2<br/></td></tr><tr><td align="left">_4 = &lt;u64 as Div&gt;::div(move _5, move _14)</td></tr></table>>];
    bb4__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u8, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_5)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_5)<br/>StorageDead(_6)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;_3<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_43 = const _<br/>_19 = &amp;(*_43)<br/>_18 = &amp;(*_19)<br/></td></tr><tr><td align="left">_16 = state::perp_market::ContractTier::is_as_safe_as_contract(move _17, move _18)</td></tr></table>>];
    bb8__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb9__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>_15 = const 100_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>_15 = const 60_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _4<br/>StorageLive(_30)<br/>_30 = _15<br/></td></tr><tr><td align="left">_28 = &lt;u64 as SafeMath&gt;::safe_mul(move _29, move _30)</td></tr></table>>];
    bb12__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb13__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_31 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb14__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_27 as Continue).0: u64)<br/>_26 = _35<br/>StorageDead(_35)<br/>StorageLive(_36)<br/>_37 = Eq(const 100_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _37, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb15__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u8, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb16__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_36 = Div(const _, const 100_u64)<br/></td></tr><tr><td align="left">_25 = &lt;u64 as SafeMath&gt;::safe_div_ceil(move _26, move _36)</td></tr></table>>];
    bb18__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_24 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _25)</td></tr></table>>];
    bb19__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_38 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb20__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_24 as Continue).0: u64)<br/>_23 = _42<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">_22 = &lt;u64 as Ord&gt;::clamp(move _23, const 1_u64, const 180_u64)</td></tr></table>>];
    bb21__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_24 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_41)<br/>_41 = _39<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u8, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _41)</td></tr></table>>];
    bb22__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_21 = move _22 as u8 (IntToInt)<br/>StorageDead(_22)<br/>_0 = std::result::Result::&lt;u8, error::ErrorCode&gt;::Ok(move _21)<br/>StorageDead(_21)<br/>StorageDead(_15)<br/>StorageDead(_4)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_15)<br/>StorageDead(_4)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_3650 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3650 -> bb1__0_3650 [label="return"];
    bb1__0_3650 -> bb2__0_3650 [label="return"];
    bb2__0_3650 -> bb3__0_3650 [label="0"];
    bb2__0_3650 -> bb5__0_3650 [label="1"];
    bb2__0_3650 -> bb4__0_3650 [label="otherwise"];
    bb3__0_3650 -> bb7__0_3650 [label="return"];
    bb5__0_3650 -> bb6__0_3650 [label="return"];
    bb6__0_3650 -> bb25__0_3650 [label=""];
    bb7__0_3650 -> bb8__0_3650 [label="return"];
    bb8__0_3650 -> bb10__0_3650 [label="0"];
    bb8__0_3650 -> bb9__0_3650 [label="otherwise"];
    bb9__0_3650 -> bb11__0_3650 [label=""];
    bb10__0_3650 -> bb11__0_3650 [label=""];
    bb11__0_3650 -> bb12__0_3650 [label="return"];
    bb12__0_3650 -> bb13__0_3650 [label="return"];
    bb13__0_3650 -> bb14__0_3650 [label="0"];
    bb13__0_3650 -> bb15__0_3650 [label="1"];
    bb13__0_3650 -> bb4__0_3650 [label="otherwise"];
    bb14__0_3650 -> bb17__0_3650 [label="success"];
    bb15__0_3650 -> bb16__0_3650 [label="return"];
    bb16__0_3650 -> bb24__0_3650 [label=""];
    bb17__0_3650 -> bb18__0_3650 [label="return"];
    bb18__0_3650 -> bb19__0_3650 [label="return"];
    bb19__0_3650 -> bb20__0_3650 [label="0"];
    bb19__0_3650 -> bb21__0_3650 [label="1"];
    bb19__0_3650 -> bb4__0_3650 [label="otherwise"];
    bb20__0_3650 -> bb23__0_3650 [label="return"];
    bb21__0_3650 -> bb22__0_3650 [label="return"];
    bb22__0_3650 -> bb24__0_3650 [label=""];
    bb23__0_3650 -> bb25__0_3650 [label=""];
    bb24__0_3650 -> bb25__0_3650 [label=""];
}
