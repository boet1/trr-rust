// MIR for `math::orders::is_oracle_too_divergent_with_twap_5min` before PreCodegen

fn math::orders::is_oracle_too_divergent_with_twap_5min(_1: i64, _2: i64, _3: i64) -> std::result::Result<bool, error::ErrorCode> {
    debug oracle_price => _1;
    debug oracle_twap_5min => _2;
    debug max_divergence => _3;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _4: i64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _6: std::result::Result<i64, error::ErrorCode>;
    let mut _7: i64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _9: std::result::Result<i64, error::ErrorCode>;
    let mut _10: i64;
    let mut _11: i64;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _13: std::result::Result<i64, error::ErrorCode>;
    let mut _14: i64;
    let mut _15: i64;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: i64;
    let mut _21: i64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _23: std::result::Result<i64, error::ErrorCode>;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: i64;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: i64;
    let mut _34: i64;
    let mut _35: i64;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: i64;
    let mut _42: i64;
    let mut _43: i64;
    let _44: ();
    let mut _45: bool;
    let _46: ();
    let mut _47: &str;
    let _48: &str;
    let mut _49: &std::string::String;
    let _50: &std::string::String;
    let _51: std::string::String;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[&str; 1];
    let _56: &[&str; 1];
    let _57: [&str; 1];
    let mut _58: &[core::fmt::rt::Argument<'_>];
    let mut _59: &[core::fmt::rt::Argument<'_>; 1];
    let _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: [core::fmt::rt::Argument<'_>; 1];
    let mut _62: core::fmt::rt::Argument<'_>;
    let mut _63: &i64;
    let _64: &i64;
    let _65: ();
    let mut _66: &str;
    let _67: &str;
    let mut _68: &std::string::String;
    let _69: &std::string::String;
    let _70: std::string::String;
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[&str; 2];
    let _75: &[&str; 2];
    let _76: [&str; 2];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let mut _78: &[core::fmt::rt::Argument<'_>; 2];
    let _79: &[core::fmt::rt::Argument<'_>; 2];
    let _80: [core::fmt::rt::Argument<'_>; 2];
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &i64;
    let _83: &i64;
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &i64;
    let _86: &i64;
    let mut _87: bool;
    scope 1 {
        debug percent_diff => _4;
        let _41: bool;
        scope 18 {
            debug too_divergent => _41;
            let _52: std::string::String;
            let _71: std::string::String;
            let mut _88: &[&str; 2];
            let mut _89: &[&str; 1];
            scope 19 {
                debug res => _52;
            }
            scope 20 {
                debug res => _71;
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _25;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _28;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _30;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _33;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _37;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _40;
        scope 17 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _1;
        StorageLive(_15);
        _15 = _2;
        _13 = <i64 as SafeMath>::safe_sub(move _14, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_20);
        _20 = ((_12 as Continue).0: i64);
        _11 = _20;
        StorageDead(_20);
        _10 = core::num::<impl i64>::abs(move _11) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb42;
    }

    bb7: {
        StorageDead(_11);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = <u64 as Cast>::cast::<i64>(const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        _22 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_28);
        _28 = ((_22 as Continue).0: i64);
        _21 = _28;
        StorageDead(_28);
        _9 = <i64 as SafeMath>::safe_mul(move _10, move _21) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb40;
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_10);
        _8 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_9);
        _29 = discriminant(_8);
        switchInt(move _29) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_8 as Continue).0: i64);
        _7 = _33;
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _2;
        _34 = core::num::<impl i64>::abs(move _35) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_30);
        _30 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_30);
        goto -> bb40;
    }

    bb18: {
        StorageDead(_35);
        _6 = <i64 as SafeMath>::safe_div(move _7, move _34) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_7);
        _5 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_6);
        _36 = discriminant(_5);
        switchInt(move _36) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_40);
        _40 = ((_5 as Continue).0: i64);
        _4 = _40;
        StorageDead(_40);
        StorageDead(_22);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _4;
        StorageLive(_43);
        _43 = _3;
        _41 = Ge(move _42, move _43);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _41;
        switchInt(move _45) -> [0: bb25, otherwise: bb24];
    }

    bb22: {
        StorageLive(_37);
        _37 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb41;
    }

    bb24: {
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _89 = const _;
        _56 = &(*_89);
        _55 = &(*_56);
        _54 = move _55 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_55);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_3;
        _63 = &(*_64);
        _62 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _63) -> [return: bb26, unwind continue];
    }

    bb25: {
        _44 = const ();
        goto -> bb39;
    }

    bb26: {
        StorageDead(_63);
        _61 = [move _62];
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = move _59 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_59);
        _53 = Arguments::<'_>::new_v1(move _54, move _58) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_54);
        _52 = format(move _53) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_53);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_56);
        _51 = move _52;
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = <String as Deref>::deref(move _49) -> [return: bb29, unwind: bb45];
    }

    bb29: {
        _47 = &(*_48);
        StorageDead(_49);
        _46 = solana_program::log::sol_log(move _47) -> [return: bb30, unwind: bb45];
    }

    bb30: {
        StorageDead(_47);
        drop(_51) -> [return: bb31, unwind: bb46];
    }

    bb31: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _88 = const _;
        _75 = &(*_88);
        _74 = &(*_75);
        _73 = move _74 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_1;
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _82) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_2;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _85) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_85);
        _80 = [move _81, move _84];
        StorageDead(_84);
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = move _78 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_78);
        _72 = Arguments::<'_>::new_v1(move _73, move _77) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_73);
        _71 = format(move _72) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_72);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_75);
        _70 = move _71;
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = <String as Deref>::deref(move _68) -> [return: bb36, unwind: bb44];
    }

    bb36: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = solana_program::log::sol_log(move _66) -> [return: bb37, unwind: bb44];
    }

    bb37: {
        StorageDead(_66);
        drop(_70) -> [return: bb38, unwind: bb46];
    }

    bb38: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        _44 = const ();
        goto -> bb39;
    }

    bb39: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_87);
        _87 = _41;
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _87);
        StorageDead(_87);
        StorageDead(_41);
        StorageDead(_4);
        goto -> bb43;
    }

    bb40: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_22);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_70) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_51) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }
}
