// MIR for `keeper::handle_resolve_perp_pnl_deficit` after PreCodegen

fn keeper::handle_resolve_perp_pnl_deficit(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::ResolvePerpPnlDeficit<'_>>, _2: u16, _3: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug spot_market_index => _2;
    debug perp_market_index => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _8: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: anchor_lang::prelude::Clock;
    let _23: ();
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _25: std::result::Result<(), error::ErrorCode>;
    let mut _26: bool;
    let mut _27: u16;
    let mut _28: ();
    let _30: ();
    let mut _31: &str;
    let _32: &str;
    let mut _33: &std::string::String;
    let _34: &std::string::String;
    let _35: std::string::String;
    let mut _37: std::fmt::Arguments<'_>;
    let mut _38: &[&str];
    let mut _39: &[&str; 2];
    let _40: &[&str; 2];
    let _41: [&str; 2];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let mut _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: &[core::fmt::rt::Argument<'_>; 1];
    let _45: [core::fmt::rt::Argument<'_>; 1];
    let mut _46: core::fmt::rt::Argument<'_>;
    let mut _47: &error::ErrorCode;
    let _48: &error::ErrorCode;
    let mut _49: error::ErrorCode;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _58: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _59: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _63: instructions::optional_accounts::AccountMaps<'_>;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _65: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _66: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _67: &std::collections::BTreeSet<u16>;
    let _68: &std::collections::BTreeSet<u16>;
    let _69: std::collections::BTreeSet<u16>;
    let mut _70: u16;
    let mut _71: &std::collections::BTreeSet<u16>;
    let _72: &std::collections::BTreeSet<u16>;
    let _73: std::collections::BTreeSet<u16>;
    let mut _74: u16;
    let mut _75: u64;
    let mut _76: std::option::Option<state::state::OracleGuardRails>;
    let mut _77: state::state::OracleGuardRails;
    let mut _78: &state::state::State;
    let mut _79: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _87: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _88: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _94: i128;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _96: std::result::Result<i128, error::ErrorCode>;
    let mut _97: u16;
    let mut _98: &state::perp_market_map::PerpMarketMap<'_>;
    let _99: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _100: &mut state::oracle_map::OracleMap<'_>;
    let mut _101: &mut state::oracle_map::OracleMap<'_>;
    let mut _102: &state::state::State;
    let _103: &state::state::State;
    let mut _104: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _105: &anchor_lang::prelude::Clock;
    let _106: &anchor_lang::prelude::Clock;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _112: ();
    let mut _114: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _116: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _117: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _118: &u16;
    let _119: &u16;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _125: ();
    let mut _126: bool;
    let mut _127: &state::spot_market::SpotMarket;
    let _128: &state::spot_market::SpotMarket;
    let mut _129: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _130: ();
    let mut _131: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _132: std::result::Result<(), anchor_lang::error::Error>;
    let mut _133: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _134: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _135: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _136: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _137: &mut state::spot_market::SpotMarket;
    let mut _138: &mut state::spot_market::SpotMarket;
    let mut _139: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _140: i64;
    let mut _141: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _142: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _143: &anchor_lang::prelude::AccountInfo<'_>;
    let _144: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _145: &state::state::State;
    let _146: &state::state::State;
    let mut _147: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _148: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _149: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _150: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _151: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _152: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _153: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _154: &std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _160: ();
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _162: std::result::Result<(), anchor_lang::error::Error>;
    let mut _163: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _164: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _165: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _166: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _167: &mut state::spot_market::SpotMarket;
    let mut _168: &mut state::spot_market::SpotMarket;
    let mut _169: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _170: i64;
    let mut _171: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _172: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _173: &anchor_lang::prelude::AccountInfo<'_>;
    let _174: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _175: &state::state::State;
    let _176: &state::state::State;
    let mut _177: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _178: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _179: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _180: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _186: ();
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _188: std::result::Result<(), anchor_lang::error::Error>;
    let mut _189: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _195: ();
    let mut _196: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _197: std::result::Result<(), anchor_lang::error::Error>;
    let mut _198: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _204: i64;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _206: std::result::Result<i64, error::ErrorCode>;
    let mut _207: &state::spot_market::SpotMarket;
    let _208: &state::spot_market::SpotMarket;
    let mut _209: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _210: u64;
    let mut _211: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _212: &anchor_spl::token_interface::TokenAccount;
    let _213: &anchor_spl::token_interface::TokenAccount;
    let mut _214: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _221: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _222: &anchor_spl::token_interface::TokenAccount;
    let _223: &anchor_spl::token_interface::TokenAccount;
    let mut _224: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _226: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _227: &anchor_spl::token_interface::TokenAccount;
    let _228: &anchor_spl::token_interface::TokenAccount;
    let mut _229: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _232: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _233: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _234: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _235: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _236: &u16;
    let _237: &u16;
    let mut _238: isize;
    let mut _240: !;
    let mut _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _244: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _245: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _246: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _247: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _248: &u16;
    let _249: &u16;
    let mut _250: isize;
    let mut _252: !;
    let mut _253: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _255: ();
    let mut _256: bool;
    let mut _257: u8;
    let mut _258: &state::perp_market::PerpMarket;
    let mut _259: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _260: ();
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _262: std::result::Result<(), error::ErrorCode>;
    let mut _263: bool;
    let mut _264: &state::perp_market::PerpMarket;
    let mut _265: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _266: ();
    let _268: ();
    let mut _269: &str;
    let _270: &str;
    let mut _271: &std::string::String;
    let _272: &std::string::String;
    let _273: std::string::String;
    let mut _275: std::fmt::Arguments<'_>;
    let mut _276: &[&str];
    let mut _277: &[&str; 2];
    let _278: &[&str; 2];
    let _279: [&str; 2];
    let mut _280: &[core::fmt::rt::Argument<'_>];
    let mut _281: &[core::fmt::rt::Argument<'_>; 1];
    let _282: &[core::fmt::rt::Argument<'_>; 1];
    let _283: [core::fmt::rt::Argument<'_>; 1];
    let mut _284: core::fmt::rt::Argument<'_>;
    let mut _285: &error::ErrorCode;
    let _286: &error::ErrorCode;
    let _287: ();
    let mut _288: &str;
    let _289: &str;
    let mut _290: error::ErrorCode;
    let mut _291: isize;
    let mut _293: !;
    let mut _294: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _296: ();
    let mut _297: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _298: std::result::Result<(), error::ErrorCode>;
    let mut _299: bool;
    let mut _300: u64;
    let mut _301: u64;
    let mut _302: &state::perp_market::PerpMarket;
    let mut _303: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _304: ();
    let _306: ();
    let mut _307: &str;
    let _308: &str;
    let mut _309: &std::string::String;
    let _310: &std::string::String;
    let _311: std::string::String;
    let mut _313: std::fmt::Arguments<'_>;
    let mut _314: &[&str];
    let mut _315: &[&str; 2];
    let _316: &[&str; 2];
    let _317: [&str; 2];
    let mut _318: &[core::fmt::rt::Argument<'_>];
    let mut _319: &[core::fmt::rt::Argument<'_>; 1];
    let _320: &[core::fmt::rt::Argument<'_>; 1];
    let _321: [core::fmt::rt::Argument<'_>; 1];
    let mut _322: core::fmt::rt::Argument<'_>;
    let mut _323: &error::ErrorCode;
    let _324: &error::ErrorCode;
    let _325: ();
    let mut _326: &str;
    let _327: &str;
    let mut _328: error::ErrorCode;
    let mut _329: isize;
    let mut _331: !;
    let mut _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _334: ();
    let mut _335: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _336: std::result::Result<(), error::ErrorCode>;
    let mut _337: bool;
    let mut _338: &state::perp_market::PerpMarket;
    let _339: &state::perp_market::PerpMarket;
    let mut _340: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _341: i64;
    let mut _342: ();
    let _344: ();
    let mut _345: &str;
    let _346: &str;
    let mut _347: &std::string::String;
    let _348: &std::string::String;
    let _349: std::string::String;
    let mut _351: std::fmt::Arguments<'_>;
    let mut _352: &[&str];
    let mut _353: &[&str; 2];
    let _354: &[&str; 2];
    let _355: [&str; 2];
    let mut _356: &[core::fmt::rt::Argument<'_>];
    let mut _357: &[core::fmt::rt::Argument<'_>; 1];
    let _358: &[core::fmt::rt::Argument<'_>; 1];
    let _359: [core::fmt::rt::Argument<'_>; 1];
    let mut _360: core::fmt::rt::Argument<'_>;
    let mut _361: &error::ErrorCode;
    let _362: &error::ErrorCode;
    let _363: ();
    let mut _364: &str;
    let _365: &str;
    let mut _366: &std::string::String;
    let _367: &std::string::String;
    let _368: std::string::String;
    let mut _370: std::fmt::Arguments<'_>;
    let mut _371: &[&str];
    let mut _372: &[&str; 1];
    let _373: &[&str; 1];
    let _374: [&str; 1];
    let mut _375: error::ErrorCode;
    let mut _376: isize;
    let mut _378: !;
    let mut _379: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _382: &state::oracle::OraclePriceData;
    let mut _383: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _384: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _385: &mut state::oracle_map::OracleMap<'_>;
    let mut _386: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _387: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _388: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _389: &state::perp_market::PerpMarket;
    let _390: &state::perp_market::PerpMarket;
    let mut _391: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _392: isize;
    let mut _394: !;
    let mut _395: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _397: bool;
    let mut _398: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _399: std::result::Result<bool, error::ErrorCode>;
    let mut _400: &state::perp_market::PerpMarket;
    let _401: &state::perp_market::PerpMarket;
    let mut _402: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _403: &state::state::State;
    let _404: &state::state::State;
    let mut _405: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _406: i64;
    let mut _407: isize;
    let mut _409: !;
    let mut _410: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _412: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _413: std::result::Result<u64, error::ErrorCode>;
    let mut _414: u64;
    let mut _415: u64;
    let mut _416: &mut state::spot_market::SpotMarket;
    let mut _417: &mut state::spot_market::SpotMarket;
    let mut _418: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _419: &mut state::perp_market::PerpMarket;
    let mut _420: &mut state::perp_market::PerpMarket;
    let mut _421: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _422: i64;
    let mut _423: isize;
    let mut _425: !;
    let mut _426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _428: ();
    let mut _429: bool;
    let mut _430: u64;
    let _431: ();
    let mut _432: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _433: std::result::Result<(), error::ErrorCode>;
    let mut _434: bool;
    let mut _435: u64;
    let mut _436: u64;
    let mut _437: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _438: &anchor_spl::token_interface::TokenAccount;
    let _439: &anchor_spl::token_interface::TokenAccount;
    let mut _440: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _441: ();
    let _443: ();
    let mut _444: &str;
    let _445: &str;
    let mut _446: &std::string::String;
    let _447: &std::string::String;
    let _448: std::string::String;
    let mut _450: std::fmt::Arguments<'_>;
    let mut _451: &[&str];
    let mut _452: &[&str; 2];
    let _453: &[&str; 2];
    let _454: [&str; 2];
    let mut _455: &[core::fmt::rt::Argument<'_>];
    let mut _456: &[core::fmt::rt::Argument<'_>; 1];
    let _457: &[core::fmt::rt::Argument<'_>; 1];
    let _458: [core::fmt::rt::Argument<'_>; 1];
    let mut _459: core::fmt::rt::Argument<'_>;
    let mut _460: &error::ErrorCode;
    let _461: &error::ErrorCode;
    let _462: ();
    let mut _463: &str;
    let _464: &str;
    let mut _465: &std::string::String;
    let _466: &std::string::String;
    let _467: std::string::String;
    let mut _469: std::fmt::Arguments<'_>;
    let mut _470: &[&str];
    let mut _471: &[&str; 2];
    let _472: &[&str; 2];
    let _473: [&str; 2];
    let mut _474: &[core::fmt::rt::Argument<'_>];
    let mut _475: &[core::fmt::rt::Argument<'_>; 2];
    let _476: &[core::fmt::rt::Argument<'_>; 2];
    let _477: [core::fmt::rt::Argument<'_>; 2];
    let mut _478: core::fmt::rt::Argument<'_>;
    let mut _479: &u64;
    let _480: &u64;
    let mut _481: core::fmt::rt::Argument<'_>;
    let mut _482: &u64;
    let _483: &u64;
    let _484: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _485: &anchor_spl::token_interface::TokenAccount;
    let _486: &anchor_spl::token_interface::TokenAccount;
    let mut _487: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _488: error::ErrorCode;
    let mut _489: isize;
    let mut _491: !;
    let mut _492: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _495: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _496: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _497: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _498: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _499: &u16;
    let _500: &u16;
    let mut _501: isize;
    let mut _503: !;
    let mut _504: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _506: ();
    let mut _507: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _508: std::result::Result<(), anchor_lang::error::Error>;
    let mut _509: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _510: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _511: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _512: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _513: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _514: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _515: &anchor_lang::prelude::AccountInfo<'_>;
    let _516: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _517: u8;
    let mut _518: &state::state::State;
    let mut _519: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _520: u64;
    let mut _521: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _522: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _523: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _524: bool;
    let mut _525: &state::spot_market::SpotMarket;
    let _526: &state::spot_market::SpotMarket;
    let mut _527: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _528: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _529: isize;
    let mut _531: !;
    let mut _532: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _534: ();
    let mut _535: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _536: std::result::Result<(), error::ErrorCode>;
    let mut _537: bool;
    let mut _538: u64;
    let mut _539: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _540: &anchor_spl::token_interface::TokenAccount;
    let _541: &anchor_spl::token_interface::TokenAccount;
    let mut _542: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _543: ();
    let _545: ();
    let mut _546: &str;
    let _547: &str;
    let mut _548: &std::string::String;
    let _549: &std::string::String;
    let _550: std::string::String;
    let mut _552: std::fmt::Arguments<'_>;
    let mut _553: &[&str];
    let mut _554: &[&str; 2];
    let _555: &[&str; 2];
    let _556: [&str; 2];
    let mut _557: &[core::fmt::rt::Argument<'_>];
    let mut _558: &[core::fmt::rt::Argument<'_>; 1];
    let _559: &[core::fmt::rt::Argument<'_>; 1];
    let _560: [core::fmt::rt::Argument<'_>; 1];
    let mut _561: core::fmt::rt::Argument<'_>;
    let mut _562: &error::ErrorCode;
    let _563: &error::ErrorCode;
    let _564: ();
    let mut _565: &str;
    let _566: &str;
    let mut _567: error::ErrorCode;
    let mut _568: isize;
    let mut _570: !;
    let mut _571: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _573: ();
    let mut _582: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _583: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _584: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _585: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _586: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _587: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _588: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _589: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _590: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _591: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _592: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _593: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _594: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _595: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _596: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _597: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _598: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _599: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _600: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _601: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _602: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _603: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _604: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _605: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _606: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _607: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _608: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _609: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _610: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _611: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _612: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _613: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _614: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _615: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _616: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _617: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _618: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _619: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _620: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _621: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _622: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _623: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _624: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _625: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: isize;
    let mut _650: isize;
    let mut _651: isize;
    let mut _652: isize;
    let mut _653: isize;
    let mut _654: isize;
    let mut _655: isize;
    let mut _656: isize;
    let mut _657: isize;
    let mut _658: isize;
    let mut _659: isize;
    let mut _660: isize;
    let mut _661: isize;
    let mut _662: isize;
    let mut _663: isize;
    let mut _664: isize;
    let mut _665: isize;
    let mut _666: isize;
    let mut _667: isize;
    let mut _668: isize;
    let mut _669: isize;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: isize;
    let mut _673: isize;
    let mut _674: isize;
    let mut _675: isize;
    let mut _676: isize;
    let mut _677: isize;
    let mut _678: isize;
    let mut _679: isize;
    let mut _680: isize;
    let mut _681: isize;
    let mut _682: isize;
    let mut _683: isize;
    let mut _684: isize;
    let mut _685: isize;
    let mut _686: isize;
    let mut _687: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _688: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _689: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _690: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _691: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _692: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _693: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _694: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _695: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _696: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _697: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _698: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _699: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _700: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _701: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _702: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _703: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _704: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _705: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _706: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _707: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _14;
        let _22: i64;
        scope 10 {
            debug now => _22;
            let _29: error::ErrorCode;
            let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _54: ();
            let _55: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 11 {
                debug error_code => _29;
                let _36: std::string::String;
                let mut _581: &[&str; 2];
                scope 12 {
                    debug res => _36;
                }
            }
            scope 13 {
                debug residual => _51;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _54;
                scope 16 {
                }
            }
            scope 17 {
                debug state => _55;
                let _56: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                scope 18 {
                    debug remaining_accounts_iter => _56;
                    let _60: state::perp_market_map::PerpMarketMap<'_>;
                    let _61: state::spot_market_map::SpotMarketMap<'_>;
                    let mut _62: state::oracle_map::OracleMap<'_>;
                    let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _84: instructions::optional_accounts::AccountMaps<'_>;
                    scope 19 {
                        debug perp_market_map => _60;
                        debug spot_market_map => _61;
                        debug oracle_map => _62;
                        let _85: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _93: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        scope 24 {
                            debug mint => _85;
                            let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _111: i128;
                            let _113: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                            let _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _124: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                            let _220: u64;
                            scope 29 {
                                debug residual => _108;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _111;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug spot_market => _113;
                                let _156: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _159: ();
                                let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _185: ();
                                let _191: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _194: ();
                                let _200: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _203: ();
                                let _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _219: i64;
                                scope 38 {
                                    debug residual => _156;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug val => _159;
                                    scope 41 {
                                    }
                                }
                                scope 42 {
                                    debug residual => _182;
                                    scope 43 {
                                    }
                                }
                                scope 44 {
                                    debug val => _185;
                                    scope 45 {
                                    }
                                }
                                scope 46 {
                                    debug residual => _191;
                                    scope 47 {
                                    }
                                }
                                scope 48 {
                                    debug val => _194;
                                    scope 49 {
                                    }
                                }
                                scope 50 {
                                    debug residual => _200;
                                    scope 51 {
                                    }
                                }
                                scope 52 {
                                    debug val => _203;
                                    scope 53 {
                                    }
                                }
                                scope 54 {
                                    debug residual => _216;
                                    scope 55 {
                                    }
                                }
                                scope 56 {
                                    debug val => _219;
                                    scope 57 {
                                    }
                                }
                            }
                            scope 34 {
                                debug residual => _121;
                                scope 35 {
                                }
                            }
                            scope 36 {
                                debug val => _124;
                                scope 37 {
                                }
                            }
                            scope 58 {
                                debug insurance_vault_amount => _220;
                                let _225: u64;
                                scope 59 {
                                    debug spot_market_vault_amount => _225;
                                    let _230: u64;
                                    let _231: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                    let _239: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _242: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                    scope 60 {
                                        debug pay_from_insurance => _230;
                                        let _442: error::ErrorCode;
                                        let _490: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _493: ();
                                        let _494: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        let _502: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _505: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        scope 103 {
                                            debug error_code => _442;
                                            let _449: std::string::String;
                                            let _468: std::string::String;
                                            let mut _575: &[&str; 2];
                                            let mut _576: &[&str; 2];
                                            scope 104 {
                                                debug res => _449;
                                            }
                                            scope 105 {
                                                debug res => _468;
                                            }
                                        }
                                        scope 106 {
                                            debug residual => _490;
                                            scope 107 {
                                            }
                                        }
                                        scope 108 {
                                            debug val => _493;
                                            scope 109 {
                                            }
                                        }
                                        scope 110 {
                                            debug spot_market => _494;
                                            let _530: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _533: ();
                                            let _544: error::ErrorCode;
                                            let _569: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _572: ();
                                            scope 115 {
                                                debug residual => _530;
                                                scope 116 {
                                                }
                                            }
                                            scope 117 {
                                                debug val => _533;
                                                scope 118 {
                                                }
                                            }
                                            scope 119 {
                                                debug error_code => _544;
                                                let _551: std::string::String;
                                                let mut _574: &[&str; 2];
                                                scope 120 {
                                                    debug res => _551;
                                                }
                                            }
                                            scope 121 {
                                                debug residual => _569;
                                                scope 122 {
                                                }
                                            }
                                            scope 123 {
                                                debug val => _572;
                                                scope 124 {
                                                }
                                            }
                                        }
                                        scope 111 {
                                            debug residual => _502;
                                            scope 112 {
                                            }
                                        }
                                        scope 113 {
                                            debug val => _505;
                                            scope 114 {
                                            }
                                        }
                                    }
                                    scope 61 {
                                        debug spot_market => _231;
                                        let _243: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                        let _251: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _254: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                        scope 66 {
                                            debug perp_market => _243;
                                            let _267: error::ErrorCode;
                                            let _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _295: ();
                                            let _305: error::ErrorCode;
                                            let _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _333: ();
                                            let _343: error::ErrorCode;
                                            let _377: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _380: ();
                                            let _381: i64;
                                            let _393: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _396: &state::oracle::OraclePriceData;
                                            scope 71 {
                                                debug error_code => _267;
                                                let _274: std::string::String;
                                                let mut _580: &[&str; 2];
                                                scope 72 {
                                                    debug res => _274;
                                                }
                                            }
                                            scope 73 {
                                                debug residual => _292;
                                                scope 74 {
                                                }
                                            }
                                            scope 75 {
                                                debug val => _295;
                                                scope 76 {
                                                }
                                            }
                                            scope 77 {
                                                debug error_code => _305;
                                                let _312: std::string::String;
                                                let mut _579: &[&str; 2];
                                                scope 78 {
                                                    debug res => _312;
                                                }
                                            }
                                            scope 79 {
                                                debug residual => _330;
                                                scope 80 {
                                                }
                                            }
                                            scope 81 {
                                                debug val => _333;
                                                scope 82 {
                                                }
                                            }
                                            scope 83 {
                                                debug error_code => _343;
                                                let _350: std::string::String;
                                                let _369: std::string::String;
                                                let mut _577: &[&str; 1];
                                                let mut _578: &[&str; 2];
                                                scope 84 {
                                                    debug res => _350;
                                                }
                                                scope 85 {
                                                    debug res => _369;
                                                }
                                            }
                                            scope 86 {
                                                debug residual => _377;
                                                scope 87 {
                                                }
                                            }
                                            scope 88 {
                                                debug val => _380;
                                                scope 89 {
                                                }
                                            }
                                            scope 90 {
                                                debug oracle_price => _381;
                                                let _408: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _411: bool;
                                                let _424: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _427: u64;
                                                scope 95 {
                                                    debug residual => _408;
                                                    scope 96 {
                                                    }
                                                }
                                                scope 97 {
                                                    debug val => _411;
                                                    scope 98 {
                                                    }
                                                }
                                                scope 99 {
                                                    debug residual => _424;
                                                    scope 100 {
                                                    }
                                                }
                                                scope 101 {
                                                    debug val => _427;
                                                    scope 102 {
                                                    }
                                                }
                                            }
                                            scope 91 {
                                                debug residual => _393;
                                                scope 92 {
                                                }
                                            }
                                            scope 93 {
                                                debug val => _396;
                                                scope 94 {
                                                }
                                            }
                                        }
                                        scope 67 {
                                            debug residual => _251;
                                            scope 68 {
                                            }
                                        }
                                        scope 69 {
                                            debug val => _254;
                                            scope 70 {
                                            }
                                        }
                                    }
                                    scope 62 {
                                        debug residual => _239;
                                        scope 63 {
                                        }
                                    }
                                    scope 64 {
                                        debug val => _242;
                                        scope 65 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 25 {
                            debug residual => _90;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug val => _93;
                            scope 28 {
                            }
                        }
                    }
                    scope 20 {
                        debug residual => _81;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug val => _84;
                        scope 23 {
                        }
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _582 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _8 = &((*_582).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _583 = deref_copy (*_8);
        _687 = (((_583.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _7 = &(*_687);
        _6 = constraints::withdraw_not_paused(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb288];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _626 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb300];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _672 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb269;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb288];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _628 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _22 = (_14.4: i64);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _2;
        _26 = Eq(move _27, const 0_u16);
        switchInt(move _26) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb299];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _670 = discriminant(_15);
        StorageDead(_15);
        goto -> bb268;
    }

    bb12: {
        StorageDead(_27);
        StorageLive(_28);
        _28 = ();
        _25 = std::result::Result::<(), error::ErrorCode>::Ok(move _28);
        StorageDead(_28);
        goto -> bb20;
    }

    bb13: {
        StorageDead(_27);
        StorageLive(_29);
        _29 = error::ErrorCode::InvalidSpotMarketAccount;
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _581 = const _;
        _40 = &(*_581);
        _39 = &(*_40);
        _38 = move _39 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_39);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &_29;
        _47 = &(*_48);
        _46 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _47) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_47);
        _45 = [move _46];
        StorageDead(_46);
        _44 = &_45;
        _43 = &(*_44);
        _42 = move _43 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_43);
        _37 = Arguments::<'_>::new_v1(move _38, move _42) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_42);
        StorageDead(_38);
        _36 = format(move _37) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_37);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_40);
        _35 = move _36;
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = <String as Deref>::deref(move _33) -> [return: bb17, unwind: bb287];
    }

    bb17: {
        _31 = &(*_32);
        StorageDead(_33);
        _30 = solana_program::log::sol_log(move _31) -> [return: bb18, unwind: bb287];
    }

    bb18: {
        StorageDead(_31);
        drop(_35) -> [return: bb19, unwind: bb288];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_30);
        StorageLive(_49);
        _49 = _29;
        _25 = std::result::Result::<(), error::ErrorCode>::Err(move _49);
        StorageDead(_49);
        StorageDead(_29);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_26);
        _24 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _25) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_25);
        _50 = discriminant(_24);
        switchInt(move _50) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_54);
        _54 = ((_24 as Continue).0: ());
        _23 = _54;
        StorageDead(_54);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_55);
        _584 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _55 = &((*_584).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _585 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _59 = &(*_585);
        _58 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _59) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_51);
        _51 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb267;
    }

    bb25: {
        StorageDead(_59);
        _57 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _58) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_58);
        _56 = &mut _57;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut (*_56);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _3;
        _69 = get_writable_perp_market_set(move _70) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_70);
        _68 = &_69;
        _67 = &(*_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _2;
        _73 = get_writable_spot_market_set(move _74) -> [return: bb28, unwind: bb286];
    }

    bb28: {
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        StorageLive(_75);
        _75 = (_14.0: u64);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _586 = deref_copy (*_55);
        _688 = (((_586.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _79 = &(*_688);
        _78 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _79) -> [return: bb29, unwind: bb285];
    }

    bb29: {
        StorageDead(_79);
        _77 = ((*_78).7: state::state::OracleGuardRails);
        _76 = Option::<state::state::OracleGuardRails>::Some(move _77);
        StorageDead(_77);
        _65 = load_maps(move _66, move _67, move _71, move _75, move _76) -> [return: bb30, unwind: bb285];
    }

    bb30: {
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_71);
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _65) -> [return: bb31, unwind: bb285];
    }

    bb31: {
        StorageDead(_65);
        _80 = discriminant(_64);
        switchInt(move _80) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_84);
        _84 = move ((_64 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _63 = move _84;
        StorageDead(_84);
        StorageLive(_60);
        _60 = move (_63.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_61);
        _61 = move (_63.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_62);
        _62 = move (_63.2: state::oracle_map::OracleMap<'_>);
        _632 = discriminant(_64);
        StorageDead(_78);
        drop(_73) -> [return: bb35, unwind: bb281];
    }

    bb33: {
        StorageLive(_81);
        _81 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb34, unwind: bb298];
    }

    bb34: {
        StorageDead(_83);
        StorageDead(_81);
        _630 = discriminant(_64);
        StorageDead(_78);
        drop(_73) -> [return: bb264, unwind: bb286];
    }

    bb35: {
        StorageDead(_73);
        StorageDead(_72);
        drop(_69) -> [return: bb36, unwind: bb282];
    }

    bb36: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &mut (*_56);
        _87 = get_token_mint(move _88) -> [return: bb37, unwind: bb282];
    }

    bb37: {
        StorageDead(_88);
        _86 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _87) -> [return: bb38, unwind: bb282];
    }

    bb38: {
        StorageDead(_87);
        _89 = discriminant(_86);
        switchInt(move _89) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_93);
        _93 = move ((_86 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _85 = move _93;
        StorageDead(_93);
        StorageDead(_86);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = _3;
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_60;
        _98 = &(*_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &mut _62;
        _100 = &mut (*_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _587 = deref_copy (*_55);
        _689 = (((_587.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _104 = &(*_689);
        _103 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _104) -> [return: bb42, unwind: bb282];
    }

    bb40: {
        StorageLive(_90);
        _90 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb41, unwind: bb282];
    }

    bb41: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_86);
        goto -> bb260;
    }

    bb42: {
        _102 = &(*_103);
        StorageDead(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &_14;
        _105 = &(*_106);
        _96 = update_amm(move _97, move _98, move _100, move _102, move _105) -> [return: bb43, unwind: bb282];
    }

    bb43: {
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        _95 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _96) -> [return: bb44, unwind: bb282];
    }

    bb44: {
        StorageDead(_96);
        _107 = discriminant(_95);
        switchInt(move _107) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_111);
        _111 = ((_95 as Continue).0: i128);
        _94 = _111;
        StorageDead(_111);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_61;
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_2;
        _118 = &(*_119);
        _116 = SpotMarketMap::<'_>::get_ref_mut(move _117, move _118) -> [return: bb48, unwind: bb282];
    }

    bb46: {
        StorageLive(_108);
        _108 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb47, unwind: bb282];
    }

    bb47: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb260;
    }

    bb48: {
        StorageDead(_118);
        StorageDead(_117);
        _115 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _116) -> [return: bb49, unwind: bb282];
    }

    bb49: {
        StorageDead(_116);
        _120 = discriminant(_115);
        switchInt(move _120) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_124);
        _124 = move ((_115 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _114 = move _124;
        StorageDead(_124);
        _113 = &mut _114;
        _636 = discriminant(_115);
        StorageDead(_119);
        StorageDead(_115);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_113);
        _128 = <RefMut<'_, SpotMarket> as Deref>::deref(move _129) -> [return: bb53, unwind: bb280];
    }

    bb51: {
        StorageLive(_121);
        _121 = ((_115 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_123);
        _123 = _121;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _123) -> [return: bb52, unwind: bb297];
    }

    bb52: {
        StorageDead(_123);
        StorageDead(_121);
        _634 = discriminant(_115);
        StorageDead(_119);
        StorageDead(_115);
        goto -> bb259;
    }

    bb53: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = SpotMarket::has_transfer_hook(move _127) -> [return: bb54, unwind: bb280];
    }

    bb54: {
        switchInt(move _126) -> [0: bb64, otherwise: bb55];
    }

    bb55: {
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _588 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _134 = &((*_588).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _589 = deref_copy (*_134);
        _690 = (((_589.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _133 = &(*_690);
        StorageLive(_135);
        StorageLive(_136);
        _590 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _136 = &((*_590).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _591 = deref_copy (*_136);
        _691 = (((_591.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _135 = &(*_691);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &mut (*_113);
        _138 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _139) -> [return: bb56, unwind: bb280];
    }

    bb56: {
        _137 = &mut (*_138);
        StorageDead(_139);
        StorageLive(_140);
        _140 = _22;
        StorageLive(_141);
        StorageLive(_142);
        _592 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _142 = &((*_592).5: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _141 = &(*_142);
        StorageLive(_143);
        StorageLive(_144);
        _593 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _144 = &((*_593).4: anchor_lang::prelude::AccountInfo<'_>);
        _143 = &(*_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _594 = deref_copy (*_55);
        _692 = (((_594.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _147 = &(*_692);
        _146 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _147) -> [return: bb57, unwind: bb280];
    }

    bb57: {
        _145 = &(*_146);
        StorageDead(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_85;
        _148 = &(*_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &(*_56);
        _153 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Clone>::clone(move _154) -> [return: bb58, unwind: bb280];
    }

    bb58: {
        StorageDead(_154);
        _152 = &mut _153;
        _151 = &mut (*_152);
        _150 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _151);
        StorageDead(_151);
        _132 = attempt_settle_revenue_to_insurance_fund(move _133, move _135, move _137, move _140, move _141, move _143, move _145, move _148, move _150) -> [return: bb59, unwind: bb280];
    }

    bb59: {
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        _131 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _132) -> [return: bb60, unwind: bb280];
    }

    bb60: {
        StorageDead(_132);
        _155 = discriminant(_131);
        switchInt(move _155) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        StorageLive(_159);
        _159 = ((_131 as Continue).0: ());
        _130 = _159;
        StorageDead(_159);
        _638 = discriminant(_131);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_130);
        _125 = const ();
        goto -> bb72;
    }

    bb62: {
        StorageLive(_156);
        _156 = move ((_131 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_158);
        _158 = move _156;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _158) -> [return: bb63, unwind: bb296];
    }

    bb63: {
        StorageDead(_158);
        StorageDead(_156);
        _668 = discriminant(_131);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb257;
    }

    bb64: {
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _595 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _164 = &((*_595).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _596 = deref_copy (*_164);
        _693 = (((_596.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _163 = &(*_693);
        StorageLive(_165);
        StorageLive(_166);
        _597 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _166 = &((*_597).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _598 = deref_copy (*_166);
        _694 = (((_598.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _165 = &(*_694);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &mut (*_113);
        _168 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _169) -> [return: bb65, unwind: bb280];
    }

    bb65: {
        _167 = &mut (*_168);
        StorageDead(_169);
        StorageLive(_170);
        _170 = _22;
        StorageLive(_171);
        StorageLive(_172);
        _599 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _172 = &((*_599).5: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _171 = &(*_172);
        StorageLive(_173);
        StorageLive(_174);
        _600 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _174 = &((*_600).4: anchor_lang::prelude::AccountInfo<'_>);
        _173 = &(*_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _601 = deref_copy (*_55);
        _695 = (((_601.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _177 = &(*_695);
        _176 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _177) -> [return: bb66, unwind: bb280];
    }

    bb66: {
        _175 = &(*_176);
        StorageDead(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &_85;
        _178 = &(*_179);
        StorageLive(_180);
        _180 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        _162 = attempt_settle_revenue_to_insurance_fund(move _163, move _165, move _167, move _170, move _171, move _173, move _175, move _178, move _180) -> [return: bb67, unwind: bb280];
    }

    bb67: {
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_163);
        _161 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _162) -> [return: bb68, unwind: bb280];
    }

    bb68: {
        StorageDead(_162);
        _181 = discriminant(_161);
        switchInt(move _181) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_185);
        _185 = ((_161 as Continue).0: ());
        _160 = _185;
        StorageDead(_185);
        _640 = discriminant(_161);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        _125 = const ();
        goto -> bb72;
    }

    bb70: {
        StorageLive(_182);
        _182 = move ((_161 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb71, unwind: bb295];
    }

    bb71: {
        StorageDead(_184);
        StorageDead(_182);
        _666 = discriminant(_161);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb257;
    }

    bb72: {
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _602 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _603 = deref_copy ((*_602).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _696 = (((_603.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _189 = &mut (*_696);
        _188 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _189) -> [return: bb73, unwind: bb280];
    }

    bb73: {
        StorageDead(_189);
        _187 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _188) -> [return: bb74, unwind: bb280];
    }

    bb74: {
        StorageDead(_188);
        _190 = discriminant(_187);
        switchInt(move _190) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_194);
        _194 = ((_187 as Continue).0: ());
        _186 = _194;
        StorageDead(_194);
        _642 = discriminant(_187);
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _604 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _605 = deref_copy ((*_604).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _697 = (((_605.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _198 = &mut (*_697);
        _197 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _198) -> [return: bb78, unwind: bb280];
    }

    bb76: {
        StorageLive(_191);
        _191 = move ((_187 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_193);
        _193 = move _191;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _193) -> [return: bb77, unwind: bb294];
    }

    bb77: {
        StorageDead(_193);
        StorageDead(_191);
        _664 = discriminant(_187);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb258;
    }

    bb78: {
        StorageDead(_198);
        _196 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _197) -> [return: bb79, unwind: bb280];
    }

    bb79: {
        StorageDead(_197);
        _199 = discriminant(_196);
        switchInt(move _199) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_203);
        _203 = ((_196 as Continue).0: ());
        _195 = _203;
        StorageDead(_203);
        _644 = discriminant(_196);
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &(*_113);
        _208 = <RefMut<'_, SpotMarket> as Deref>::deref(move _209) -> [return: bb83, unwind: bb280];
    }

    bb81: {
        StorageLive(_200);
        _200 = move ((_196 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_202);
        _202 = move _200;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _202) -> [return: bb82, unwind: bb293];
    }

    bb82: {
        StorageDead(_202);
        StorageDead(_200);
        _662 = discriminant(_196);
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb258;
    }

    bb83: {
        _207 = &(*_208);
        StorageDead(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _606 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _607 = deref_copy ((*_606).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _698 = (((_607.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _214 = &(*_698);
        _213 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _214) -> [return: bb84, unwind: bb280];
    }

    bb84: {
        _212 = &(*_213);
        _211 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _212) -> [return: bb85, unwind: bb280];
    }

    bb85: {
        StorageDead(_214);
        StorageDead(_212);
        _210 = ((*_211).2: u64);
        _206 = validate_spot_market_vault_amount(move _207, move _210) -> [return: bb86, unwind: bb280];
    }

    bb86: {
        StorageDead(_210);
        StorageDead(_207);
        _205 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _206) -> [return: bb87, unwind: bb280];
    }

    bb87: {
        StorageDead(_206);
        _215 = discriminant(_205);
        switchInt(move _215) -> [0: bb88, 1: bb89, otherwise: bb4];
    }

    bb88: {
        StorageLive(_219);
        _219 = ((_205 as Continue).0: i64);
        _204 = _219;
        StorageDead(_219);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_204);
        _112 = const ();
        drop(_114) -> [return: bb91, unwind: bb282];
    }

    bb89: {
        StorageLive(_216);
        _216 = ((_205 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_218);
        _218 = _216;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _218) -> [return: bb90, unwind: bb280];
    }

    bb90: {
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_204);
        goto -> bb258;
    }

    bb91: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _608 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _609 = deref_copy ((*_608).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _699 = (((_609.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _224 = &(*_699);
        _223 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _224) -> [return: bb92, unwind: bb282];
    }

    bb92: {
        _222 = &(*_223);
        _221 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _222) -> [return: bb93, unwind: bb282];
    }

    bb93: {
        StorageDead(_224);
        StorageDead(_222);
        _220 = ((*_221).2: u64);
        StorageDead(_223);
        StorageDead(_221);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _610 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _611 = deref_copy ((*_610).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _700 = (((_611.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _229 = &(*_700);
        _228 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _229) -> [return: bb94, unwind: bb282];
    }

    bb94: {
        _227 = &(*_228);
        _226 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _227) -> [return: bb95, unwind: bb282];
    }

    bb95: {
        StorageDead(_229);
        StorageDead(_227);
        _225 = ((*_226).2: u64);
        StorageDead(_228);
        StorageDead(_226);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_61;
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_2;
        _236 = &(*_237);
        _234 = SpotMarketMap::<'_>::get_ref_mut(move _235, move _236) -> [return: bb96, unwind: bb282];
    }

    bb96: {
        StorageDead(_236);
        StorageDead(_235);
        _233 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _234) -> [return: bb97, unwind: bb282];
    }

    bb97: {
        StorageDead(_234);
        _238 = discriminant(_233);
        switchInt(move _238) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_242);
        _242 = move ((_233 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _232 = move _242;
        StorageDead(_242);
        _231 = &mut _232;
        _648 = discriminant(_233);
        StorageDead(_237);
        StorageDead(_233);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_60;
        StorageLive(_248);
        StorageLive(_249);
        _249 = &_3;
        _248 = &(*_249);
        _246 = PerpMarketMap::<'_>::get_ref_mut(move _247, move _248) -> [return: bb101, unwind: bb279];
    }

    bb99: {
        StorageLive(_239);
        _239 = ((_233 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_241);
        _241 = _239;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _241) -> [return: bb100, unwind: bb292];
    }

    bb100: {
        StorageDead(_241);
        StorageDead(_239);
        _646 = discriminant(_233);
        StorageDead(_237);
        StorageDead(_233);
        goto -> bb255;
    }

    bb101: {
        StorageDead(_248);
        StorageDead(_247);
        _245 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _246) -> [return: bb102, unwind: bb279];
    }

    bb102: {
        StorageDead(_246);
        _250 = discriminant(_245);
        switchInt(move _250) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_254);
        _254 = move ((_245 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _244 = move _254;
        StorageDead(_254);
        _243 = &mut _244;
        _652 = discriminant(_245);
        StorageDead(_249);
        StorageDead(_245);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &(*_243);
        _258 = <RefMut<'_, PerpMarket> as Deref>::deref(move _259) -> [return: bb106, unwind: bb278];
    }

    bb104: {
        StorageLive(_251);
        _251 = ((_245 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_253);
        _253 = _251;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _253) -> [return: bb105, unwind: bb291];
    }

    bb105: {
        StorageDead(_253);
        StorageDead(_251);
        _650 = discriminant(_245);
        StorageDead(_249);
        StorageDead(_245);
        goto -> bb254;
    }

    bb106: {
        StorageDead(_259);
        _257 = (((*_258).1: state::perp_market::AMM).70: u8);
        _256 = Gt(move _257, const 0_u8);
        switchInt(move _256) -> [0: bb138, otherwise: bb107];
    }

    bb107: {
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &(*_243);
        _264 = <RefMut<'_, PerpMarket> as Deref>::deref(move _265) -> [return: bb108, unwind: bb278];
    }

    bb108: {
        StorageDead(_265);
        _263 = (((*_264).1: state::perp_market::AMM).73: bool);
        switchInt(move _263) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        StorageDead(_264);
        StorageLive(_266);
        _266 = ();
        _262 = std::result::Result::<(), error::ErrorCode>::Ok(move _266);
        StorageDead(_266);
        goto -> bb118;
    }

    bb110: {
        StorageDead(_264);
        StorageLive(_267);
        _267 = error::ErrorCode::InvalidOracle;
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _580 = const _;
        _278 = &(*_580);
        _277 = &(*_278);
        _276 = move _277 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_277);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_267;
        _285 = &(*_286);
        _284 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _285) -> [return: bb111, unwind: bb278];
    }

    bb111: {
        StorageDead(_285);
        _283 = [move _284];
        StorageDead(_284);
        _282 = &_283;
        _281 = &(*_282);
        _280 = move _281 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_281);
        _275 = Arguments::<'_>::new_v1(move _276, move _280) -> [return: bb112, unwind: bb278];
    }

    bb112: {
        StorageDead(_280);
        StorageDead(_276);
        _274 = format(move _275) -> [return: bb113, unwind: bb278];
    }

    bb113: {
        StorageDead(_275);
        StorageDead(_286);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_278);
        _273 = move _274;
        StorageDead(_274);
        _272 = &_273;
        _271 = &(*_272);
        _270 = <String as Deref>::deref(move _271) -> [return: bb114, unwind: bb277];
    }

    bb114: {
        _269 = &(*_270);
        StorageDead(_271);
        _268 = solana_program::log::sol_log(move _269) -> [return: bb115, unwind: bb277];
    }

    bb115: {
        StorageDead(_269);
        drop(_273) -> [return: bb116, unwind: bb278];
    }

    bb116: {
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_268);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = const "Oracle Price detected as invalid";
        _288 = &(*_289);
        _287 = solana_program::log::sol_log(move _288) -> [return: bb117, unwind: bb278];
    }

    bb117: {
        StorageDead(_288);
        StorageDead(_289);
        StorageDead(_287);
        StorageLive(_290);
        _290 = _267;
        _262 = std::result::Result::<(), error::ErrorCode>::Err(move _290);
        StorageDead(_290);
        StorageDead(_267);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_263);
        _261 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _262) -> [return: bb119, unwind: bb278];
    }

    bb119: {
        StorageDead(_262);
        _291 = discriminant(_261);
        switchInt(move _291) -> [0: bb120, 1: bb121, otherwise: bb4];
    }

    bb120: {
        StorageLive(_295);
        _295 = ((_261 as Continue).0: ());
        _260 = _295;
        StorageDead(_295);
        StorageDead(_261);
        StorageDead(_260);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = (_62.3: u64);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &(*_243);
        _302 = <RefMut<'_, PerpMarket> as Deref>::deref(move _303) -> [return: bb123, unwind: bb278];
    }

    bb121: {
        StorageLive(_292);
        _292 = ((_261 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_294);
        _294 = _292;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _294) -> [return: bb122, unwind: bb278];
    }

    bb122: {
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_261);
        StorageDead(_260);
        goto -> bb252;
    }

    bb123: {
        StorageDead(_303);
        _301 = (((*_302).1: state::perp_market::AMM).47: u64);
        _299 = Eq(move _300, move _301);
        switchInt(move _299) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_300);
        StorageLive(_304);
        _304 = ();
        _298 = std::result::Result::<(), error::ErrorCode>::Ok(move _304);
        StorageDead(_304);
        goto -> bb133;
    }

    bb125: {
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_300);
        StorageLive(_305);
        _305 = error::ErrorCode::AMMNotUpdatedInSameSlot;
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _579 = const _;
        _316 = &(*_579);
        _315 = &(*_316);
        _314 = move _315 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_315);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &_305;
        _323 = &(*_324);
        _322 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _323) -> [return: bb126, unwind: bb278];
    }

    bb126: {
        StorageDead(_323);
        _321 = [move _322];
        StorageDead(_322);
        _320 = &_321;
        _319 = &(*_320);
        _318 = move _319 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_319);
        _313 = Arguments::<'_>::new_v1(move _314, move _318) -> [return: bb127, unwind: bb278];
    }

    bb127: {
        StorageDead(_318);
        StorageDead(_314);
        _312 = format(move _313) -> [return: bb128, unwind: bb278];
    }

    bb128: {
        StorageDead(_313);
        StorageDead(_324);
        StorageDead(_321);
        StorageDead(_320);
        StorageDead(_316);
        _311 = move _312;
        StorageDead(_312);
        _310 = &_311;
        _309 = &(*_310);
        _308 = <String as Deref>::deref(move _309) -> [return: bb129, unwind: bb276];
    }

    bb129: {
        _307 = &(*_308);
        StorageDead(_309);
        _306 = solana_program::log::sol_log(move _307) -> [return: bb130, unwind: bb276];
    }

    bb130: {
        StorageDead(_307);
        drop(_311) -> [return: bb131, unwind: bb278];
    }

    bb131: {
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_306);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = const "AMM must be updated in a prior instruction within same slot";
        _326 = &(*_327);
        _325 = solana_program::log::sol_log(move _326) -> [return: bb132, unwind: bb278];
    }

    bb132: {
        StorageDead(_326);
        StorageDead(_327);
        StorageDead(_325);
        StorageLive(_328);
        _328 = _305;
        _298 = std::result::Result::<(), error::ErrorCode>::Err(move _328);
        StorageDead(_328);
        StorageDead(_305);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_299);
        _297 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _298) -> [return: bb134, unwind: bb278];
    }

    bb134: {
        StorageDead(_298);
        _329 = discriminant(_297);
        switchInt(move _329) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        StorageLive(_333);
        _333 = ((_297 as Continue).0: ());
        _296 = _333;
        StorageDead(_333);
        StorageDead(_297);
        StorageDead(_296);
        _255 = const ();
        goto -> bb139;
    }

    bb136: {
        StorageLive(_330);
        _330 = ((_297 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_332);
        _332 = _330;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _332) -> [return: bb137, unwind: bb278];
    }

    bb137: {
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_297);
        StorageDead(_296);
        goto -> bb252;
    }

    bb138: {
        StorageDead(_258);
        StorageDead(_257);
        _255 = const ();
        goto -> bb139;
    }

    bb139: {
        StorageDead(_256);
        StorageDead(_255);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _340 = &(*_243);
        _339 = <RefMut<'_, PerpMarket> as Deref>::deref(move _340) -> [return: bb140, unwind: bb278];
    }

    bb140: {
        _338 = &(*_339);
        StorageDead(_340);
        StorageLive(_341);
        _341 = _22;
        _337 = PerpMarket::is_in_settlement(move _338, move _341) -> [return: bb141, unwind: bb278];
    }

    bb141: {
        switchInt(move _337) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        StorageDead(_341);
        StorageDead(_338);
        StorageDead(_339);
        StorageLive(_343);
        _343 = error::ErrorCode::MarketActionPaused;
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _578 = const _;
        _354 = &(*_578);
        _353 = &(*_354);
        _352 = move _353 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_353);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &_343;
        _361 = &(*_362);
        _360 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _361) -> [return: bb144, unwind: bb278];
    }

    bb143: {
        StorageDead(_341);
        StorageDead(_338);
        StorageDead(_339);
        StorageLive(_342);
        _342 = ();
        _336 = std::result::Result::<(), error::ErrorCode>::Ok(move _342);
        StorageDead(_342);
        goto -> bb155;
    }

    bb144: {
        StorageDead(_361);
        _359 = [move _360];
        StorageDead(_360);
        _358 = &_359;
        _357 = &(*_358);
        _356 = move _357 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_357);
        _351 = Arguments::<'_>::new_v1(move _352, move _356) -> [return: bb145, unwind: bb278];
    }

    bb145: {
        StorageDead(_356);
        StorageDead(_352);
        _350 = format(move _351) -> [return: bb146, unwind: bb278];
    }

    bb146: {
        StorageDead(_351);
        StorageDead(_362);
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_354);
        _349 = move _350;
        StorageDead(_350);
        _348 = &_349;
        _347 = &(*_348);
        _346 = <String as Deref>::deref(move _347) -> [return: bb147, unwind: bb275];
    }

    bb147: {
        _345 = &(*_346);
        StorageDead(_347);
        _344 = solana_program::log::sol_log(move _345) -> [return: bb148, unwind: bb275];
    }

    bb148: {
        StorageDead(_345);
        drop(_349) -> [return: bb149, unwind: bb278];
    }

    bb149: {
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_344);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        _577 = const _;
        _373 = &(*_577);
        _372 = &(*_373);
        _371 = move _372 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_372);
        _370 = Arguments::<'_>::new_const(move _371) -> [return: bb150, unwind: bb278];
    }

    bb150: {
        StorageDead(_371);
        _369 = format(move _370) -> [return: bb151, unwind: bb278];
    }

    bb151: {
        StorageDead(_370);
        StorageDead(_373);
        _368 = move _369;
        StorageDead(_369);
        _367 = &_368;
        _366 = &(*_367);
        _365 = <String as Deref>::deref(move _366) -> [return: bb152, unwind: bb274];
    }

    bb152: {
        _364 = &(*_365);
        StorageDead(_366);
        _363 = solana_program::log::sol_log(move _364) -> [return: bb153, unwind: bb274];
    }

    bb153: {
        StorageDead(_364);
        drop(_368) -> [return: bb154, unwind: bb278];
    }

    bb154: {
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_363);
        StorageLive(_375);
        _375 = _343;
        _336 = std::result::Result::<(), error::ErrorCode>::Err(move _375);
        StorageDead(_375);
        StorageDead(_343);
        goto -> bb155;
    }

    bb155: {
        StorageDead(_337);
        _335 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _336) -> [return: bb156, unwind: bb278];
    }

    bb156: {
        StorageDead(_336);
        _376 = discriminant(_335);
        switchInt(move _376) -> [0: bb157, 1: bb158, otherwise: bb4];
    }

    bb157: {
        StorageLive(_380);
        _380 = ((_335 as Continue).0: ());
        _334 = _380;
        StorageDead(_380);
        StorageDead(_335);
        StorageDead(_334);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        _385 = &mut _62;
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &(*_243);
        _390 = <RefMut<'_, PerpMarket> as Deref>::deref(move _391) -> [return: bb160, unwind: bb278];
    }

    bb158: {
        StorageLive(_377);
        _377 = ((_335 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_379);
        _379 = _377;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _379) -> [return: bb159, unwind: bb278];
    }

    bb159: {
        StorageDead(_379);
        StorageDead(_377);
        StorageDead(_335);
        StorageDead(_334);
        goto -> bb253;
    }

    bb160: {
        _389 = &(*_390);
        StorageDead(_391);
        _388 = PerpMarket::oracle_id(move _389) -> [return: bb161, unwind: bb278];
    }

    bb161: {
        StorageDead(_389);
        _387 = &_388;
        _386 = &(*_387);
        _384 = OracleMap::<'_>::get_price_data(move _385, move _386) -> [return: bb162, unwind: bb278];
    }

    bb162: {
        StorageDead(_386);
        StorageDead(_385);
        _383 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _384) -> [return: bb163, unwind: bb278];
    }

    bb163: {
        StorageDead(_384);
        _392 = discriminant(_383);
        switchInt(move _392) -> [0: bb164, 1: bb165, otherwise: bb4];
    }

    bb164: {
        StorageLive(_396);
        _396 = ((_383 as Continue).0: &state::oracle::OraclePriceData);
        _382 = _396;
        StorageDead(_396);
        _381 = ((*_382).0: i64);
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_387);
        StorageDead(_383);
        StorageDead(_382);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _402 = &(*_243);
        _401 = <RefMut<'_, PerpMarket> as Deref>::deref(move _402) -> [return: bb167, unwind: bb278];
    }

    bb165: {
        StorageLive(_393);
        _393 = ((_383 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_395);
        _395 = _393;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _395) -> [return: bb166, unwind: bb278];
    }

    bb166: {
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_387);
        StorageDead(_383);
        StorageDead(_382);
        goto -> bb251;
    }

    bb167: {
        _400 = &(*_401);
        StorageDead(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _612 = deref_copy (*_55);
        _701 = (((_612.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _405 = &(*_701);
        _404 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _405) -> [return: bb168, unwind: bb278];
    }

    bb168: {
        _403 = &(*_404);
        StorageDead(_405);
        StorageLive(_406);
        _406 = _381;
        _399 = validate_market_within_price_band(move _400, move _403, move _406) -> [return: bb169, unwind: bb278];
    }

    bb169: {
        StorageDead(_406);
        StorageDead(_403);
        StorageDead(_400);
        _398 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _399) -> [return: bb170, unwind: bb278];
    }

    bb170: {
        StorageDead(_399);
        _407 = discriminant(_398);
        switchInt(move _407) -> [0: bb171, 1: bb172, otherwise: bb4];
    }

    bb171: {
        StorageLive(_411);
        _411 = ((_398 as Continue).0: bool);
        _397 = _411;
        StorageDead(_411);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_398);
        StorageDead(_397);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = _225;
        StorageLive(_415);
        _415 = _220;
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &mut (*_231);
        _417 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _418) -> [return: bb174, unwind: bb278];
    }

    bb172: {
        StorageLive(_408);
        _408 = ((_398 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_410);
        _410 = _408;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _410) -> [return: bb173, unwind: bb278];
    }

    bb173: {
        StorageDead(_410);
        StorageDead(_408);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_398);
        StorageDead(_397);
        goto -> bb251;
    }

    bb174: {
        _416 = &mut (*_417);
        StorageDead(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &mut (*_243);
        _420 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _421) -> [return: bb175, unwind: bb278];
    }

    bb175: {
        _419 = &mut (*_420);
        StorageDead(_421);
        StorageLive(_422);
        _422 = (_14.4: i64);
        _413 = controller::insurance::resolve_perp_pnl_deficit(move _414, move _415, move _416, move _419, move _422) -> [return: bb176, unwind: bb278];
    }

    bb176: {
        StorageDead(_422);
        StorageDead(_419);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_414);
        _412 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _413) -> [return: bb177, unwind: bb278];
    }

    bb177: {
        StorageDead(_413);
        _423 = discriminant(_412);
        switchInt(move _423) -> [0: bb178, 1: bb179, otherwise: bb4];
    }

    bb178: {
        StorageLive(_427);
        _427 = ((_412 as Continue).0: u64);
        _230 = _427;
        StorageDead(_427);
        StorageDead(_381);
        drop(_244) -> [return: bb181, unwind: bb279];
    }

    bb179: {
        StorageLive(_424);
        _424 = ((_412 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_426);
        _426 = _424;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _426) -> [return: bb180, unwind: bb278];
    }

    bb180: {
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_381);
        drop(_244) -> [return: bb249, unwind: bb279];
    }

    bb181: {
        StorageDead(_244);
        StorageDead(_243);
        drop(_232) -> [return: bb182, unwind: bb282];
    }

    bb182: {
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_420);
        StorageDead(_417);
        StorageDead(_412);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _430 = _230;
        _429 = Gt(move _430, const 0_u64);
        switchInt(move _429) -> [0: bb241, otherwise: bb183];
    }

    bb183: {
        StorageDead(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _435 = _230;
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _613 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _614 = deref_copy ((*_613).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _702 = (((_614.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _440 = &(*_702);
        _439 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _440) -> [return: bb184, unwind: bb282];
    }

    bb184: {
        _438 = &(*_439);
        _437 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _438) -> [return: bb185, unwind: bb282];
    }

    bb185: {
        StorageDead(_440);
        StorageDead(_438);
        _436 = ((*_437).2: u64);
        _434 = Lt(move _435, move _436);
        switchInt(move _434) -> [0: bb187, otherwise: bb186];
    }

    bb186: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_436);
        StorageDead(_435);
        StorageLive(_441);
        _441 = ();
        _433 = std::result::Result::<(), error::ErrorCode>::Ok(move _441);
        StorageDead(_441);
        goto -> bb203;
    }

    bb187: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_436);
        StorageDead(_435);
        StorageLive(_442);
        _442 = error::ErrorCode::InsufficientCollateral;
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _576 = const _;
        _453 = &(*_576);
        _452 = &(*_453);
        _451 = move _452 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_452);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = &_442;
        _460 = &(*_461);
        _459 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _460) -> [return: bb188, unwind: bb282];
    }

    bb188: {
        StorageDead(_460);
        _458 = [move _459];
        StorageDead(_459);
        _457 = &_458;
        _456 = &(*_457);
        _455 = move _456 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_456);
        _450 = Arguments::<'_>::new_v1(move _451, move _455) -> [return: bb189, unwind: bb282];
    }

    bb189: {
        StorageDead(_455);
        StorageDead(_451);
        _449 = format(move _450) -> [return: bb190, unwind: bb282];
    }

    bb190: {
        StorageDead(_450);
        StorageDead(_461);
        StorageDead(_458);
        StorageDead(_457);
        StorageDead(_453);
        _448 = move _449;
        StorageDead(_449);
        _447 = &_448;
        _446 = &(*_447);
        _445 = <String as Deref>::deref(move _446) -> [return: bb191, unwind: bb273];
    }

    bb191: {
        _444 = &(*_445);
        StorageDead(_446);
        _443 = solana_program::log::sol_log(move _444) -> [return: bb192, unwind: bb273];
    }

    bb192: {
        StorageDead(_444);
        drop(_448) -> [return: bb193, unwind: bb282];
    }

    bb193: {
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_445);
        StorageDead(_443);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        _575 = const _;
        _472 = &(*_575);
        _471 = &(*_472);
        _470 = move _471 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_471);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _480 = &_230;
        _479 = &(*_480);
        _478 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _479) -> [return: bb194, unwind: bb282];
    }

    bb194: {
        StorageDead(_479);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        _615 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _616 = deref_copy ((*_615).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _703 = (((_616.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _487 = &(*_703);
        _486 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _487) -> [return: bb195, unwind: bb282];
    }

    bb195: {
        _485 = &(*_486);
        _484 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _485) -> [return: bb196, unwind: bb282];
    }

    bb196: {
        StorageDead(_487);
        StorageDead(_485);
        _483 = &((*_484).2: u64);
        _482 = &(*_483);
        _481 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _482) -> [return: bb197, unwind: bb282];
    }

    bb197: {
        StorageDead(_482);
        _477 = [move _478, move _481];
        StorageDead(_481);
        StorageDead(_478);
        _476 = &_477;
        _475 = &(*_476);
        _474 = move _475 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_475);
        _469 = Arguments::<'_>::new_v1(move _470, move _474) -> [return: bb198, unwind: bb282];
    }

    bb198: {
        StorageDead(_474);
        StorageDead(_470);
        _468 = format(move _469) -> [return: bb199, unwind: bb282];
    }

    bb199: {
        StorageDead(_469);
        StorageDead(_486);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_472);
        _467 = move _468;
        StorageDead(_468);
        _466 = &_467;
        _465 = &(*_466);
        _464 = <String as Deref>::deref(move _465) -> [return: bb200, unwind: bb272];
    }

    bb200: {
        _463 = &(*_464);
        StorageDead(_465);
        _462 = solana_program::log::sol_log(move _463) -> [return: bb201, unwind: bb272];
    }

    bb201: {
        StorageDead(_463);
        drop(_467) -> [return: bb202, unwind: bb282];
    }

    bb202: {
        StorageDead(_467);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_462);
        StorageLive(_488);
        _488 = _442;
        _433 = std::result::Result::<(), error::ErrorCode>::Err(move _488);
        StorageDead(_488);
        StorageDead(_442);
        goto -> bb203;
    }

    bb203: {
        StorageDead(_434);
        _432 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _433) -> [return: bb204, unwind: bb282];
    }

    bb204: {
        StorageDead(_433);
        _489 = discriminant(_432);
        switchInt(move _489) -> [0: bb205, 1: bb206, otherwise: bb4];
    }

    bb205: {
        StorageLive(_493);
        _493 = ((_432 as Continue).0: ());
        _431 = _493;
        StorageDead(_493);
        StorageDead(_432);
        StorageDead(_431);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        _498 = &_61;
        StorageLive(_499);
        StorageLive(_500);
        _500 = &_2;
        _499 = &(*_500);
        _497 = SpotMarketMap::<'_>::get_ref_mut(move _498, move _499) -> [return: bb208, unwind: bb282];
    }

    bb206: {
        StorageLive(_490);
        _490 = ((_432 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_492);
        _492 = _490;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _492) -> [return: bb207, unwind: bb282];
    }

    bb207: {
        StorageDead(_492);
        StorageDead(_490);
        StorageDead(_432);
        StorageDead(_431);
        goto -> bb248;
    }

    bb208: {
        StorageDead(_499);
        StorageDead(_498);
        _496 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _497) -> [return: bb209, unwind: bb282];
    }

    bb209: {
        StorageDead(_497);
        _501 = discriminant(_496);
        switchInt(move _501) -> [0: bb210, 1: bb211, otherwise: bb4];
    }

    bb210: {
        StorageLive(_505);
        _505 = move ((_496 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _495 = move _505;
        StorageDead(_505);
        _494 = &mut _495;
        _656 = discriminant(_496);
        StorageDead(_500);
        StorageDead(_496);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        _617 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _510 = &((*_617).5: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _509 = &(*_510);
        StorageLive(_511);
        StorageLive(_512);
        _618 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _512 = &((*_618).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _619 = deref_copy (*_512);
        _704 = (((_619.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _511 = &(*_704);
        StorageLive(_513);
        StorageLive(_514);
        _620 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _514 = &((*_620).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _621 = deref_copy (*_514);
        _705 = (((_621.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _513 = &(*_705);
        StorageLive(_515);
        StorageLive(_516);
        _622 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _516 = &((*_622).4: anchor_lang::prelude::AccountInfo<'_>);
        _515 = &(*_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        _623 = deref_copy (*_55);
        _706 = (((_623.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _519 = &(*_706);
        _518 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _519) -> [return: bb213, unwind: bb271];
    }

    bb211: {
        StorageLive(_502);
        _502 = ((_496 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_504);
        _504 = _502;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _504) -> [return: bb212, unwind: bb290];
    }

    bb212: {
        StorageDead(_504);
        StorageDead(_502);
        _654 = discriminant(_496);
        StorageDead(_500);
        StorageDead(_496);
        goto -> bb247;
    }

    bb213: {
        StorageDead(_519);
        _517 = ((*_518).15: u8);
        StorageLive(_520);
        _520 = _230;
        StorageLive(_521);
        StorageLive(_522);
        _522 = &_85;
        _521 = &(*_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = &(*_494);
        _526 = <RefMut<'_, SpotMarket> as Deref>::deref(move _527) -> [return: bb214, unwind: bb271];
    }

    bb214: {
        _525 = &(*_526);
        StorageDead(_527);
        _524 = SpotMarket::has_transfer_hook(move _525) -> [return: bb215, unwind: bb271];
    }

    bb215: {
        switchInt(move _524) -> [0: bb217, otherwise: bb216];
    }

    bb216: {
        StorageDead(_526);
        StorageDead(_525);
        StorageLive(_528);
        _528 = &mut (*_56);
        _523 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _528);
        StorageDead(_528);
        goto -> bb218;
    }

    bb217: {
        StorageDead(_526);
        StorageDead(_525);
        _523 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb218;
    }

    bb218: {
        StorageDead(_524);
        _508 = send_from_program_vault(move _509, move _511, move _513, move _515, move _517, move _520, move _521, move _523) -> [return: bb219, unwind: bb271];
    }

    bb219: {
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_520);
        StorageDead(_517);
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_511);
        StorageDead(_509);
        _507 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _508) -> [return: bb220, unwind: bb271];
    }

    bb220: {
        StorageDead(_508);
        _529 = discriminant(_507);
        switchInt(move _529) -> [0: bb221, 1: bb222, otherwise: bb4];
    }

    bb221: {
        StorageLive(_533);
        _533 = ((_507 as Continue).0: ());
        _506 = _533;
        StorageDead(_533);
        _658 = discriminant(_507);
        StorageDead(_522);
        StorageDead(_518);
        StorageDead(_516);
        StorageDead(_514);
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_507);
        StorageDead(_506);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        _624 = deref_copy (_1.1: &mut instructions::keeper::ResolvePerpPnlDeficit<'_>);
        _625 = deref_copy ((*_624).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _707 = (((_625.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _542 = &(*_707);
        _541 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _542) -> [return: bb224, unwind: bb271];
    }

    bb222: {
        StorageLive(_530);
        _530 = move ((_507 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_532);
        _532 = move _530;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _532) -> [return: bb223, unwind: bb289];
    }

    bb223: {
        StorageDead(_532);
        StorageDead(_530);
        _660 = discriminant(_507);
        StorageDead(_522);
        StorageDead(_518);
        StorageDead(_516);
        StorageDead(_514);
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_507);
        StorageDead(_506);
        goto -> bb246;
    }

    bb224: {
        _540 = &(*_541);
        _539 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _540) -> [return: bb225, unwind: bb271];
    }

    bb225: {
        StorageDead(_542);
        StorageDead(_540);
        _538 = ((*_539).2: u64);
        _537 = Gt(move _538, const 0_u64);
        switchInt(move _537) -> [0: bb227, otherwise: bb226];
    }

    bb226: {
        StorageDead(_541);
        StorageDead(_539);
        StorageDead(_538);
        StorageLive(_543);
        _543 = ();
        _536 = std::result::Result::<(), error::ErrorCode>::Ok(move _543);
        StorageDead(_543);
        goto -> bb235;
    }

    bb227: {
        StorageDead(_541);
        StorageDead(_539);
        StorageDead(_538);
        StorageLive(_544);
        _544 = error::ErrorCode::InvalidIFDetected;
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        _574 = const _;
        _555 = &(*_574);
        _554 = &(*_555);
        _553 = move _554 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_554);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        _563 = &_544;
        _562 = &(*_563);
        _561 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _562) -> [return: bb228, unwind: bb271];
    }

    bb228: {
        StorageDead(_562);
        _560 = [move _561];
        StorageDead(_561);
        _559 = &_560;
        _558 = &(*_559);
        _557 = move _558 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_558);
        _552 = Arguments::<'_>::new_v1(move _553, move _557) -> [return: bb229, unwind: bb271];
    }

    bb229: {
        StorageDead(_557);
        StorageDead(_553);
        _551 = format(move _552) -> [return: bb230, unwind: bb271];
    }

    bb230: {
        StorageDead(_552);
        StorageDead(_563);
        StorageDead(_560);
        StorageDead(_559);
        StorageDead(_555);
        _550 = move _551;
        StorageDead(_551);
        _549 = &_550;
        _548 = &(*_549);
        _547 = <String as Deref>::deref(move _548) -> [return: bb231, unwind: bb270];
    }

    bb231: {
        _546 = &(*_547);
        StorageDead(_548);
        _545 = solana_program::log::sol_log(move _546) -> [return: bb232, unwind: bb270];
    }

    bb232: {
        StorageDead(_546);
        drop(_550) -> [return: bb233, unwind: bb271];
    }

    bb233: {
        StorageDead(_550);
        StorageDead(_549);
        StorageDead(_547);
        StorageDead(_545);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = const "insurance_fund_vault.amount must remain > 0";
        _565 = &(*_566);
        _564 = solana_program::log::sol_log(move _565) -> [return: bb234, unwind: bb271];
    }

    bb234: {
        StorageDead(_565);
        StorageDead(_566);
        StorageDead(_564);
        StorageLive(_567);
        _567 = _544;
        _536 = std::result::Result::<(), error::ErrorCode>::Err(move _567);
        StorageDead(_567);
        StorageDead(_544);
        goto -> bb235;
    }

    bb235: {
        StorageDead(_537);
        _535 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _536) -> [return: bb236, unwind: bb271];
    }

    bb236: {
        StorageDead(_536);
        _568 = discriminant(_535);
        switchInt(move _568) -> [0: bb237, 1: bb238, otherwise: bb4];
    }

    bb237: {
        StorageLive(_572);
        _572 = ((_535 as Continue).0: ());
        _534 = _572;
        StorageDead(_572);
        StorageDead(_535);
        StorageDead(_534);
        _428 = const ();
        drop(_495) -> [return: bb240, unwind: bb282];
    }

    bb238: {
        StorageLive(_569);
        _569 = ((_535 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_571);
        _571 = _569;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _571) -> [return: bb239, unwind: bb271];
    }

    bb239: {
        StorageDead(_571);
        StorageDead(_569);
        StorageDead(_535);
        StorageDead(_534);
        goto -> bb246;
    }

    bb240: {
        StorageDead(_495);
        StorageDead(_494);
        goto -> bb242;
    }

    bb241: {
        StorageDead(_430);
        _428 = const ();
        goto -> bb242;
    }

    bb242: {
        StorageDead(_429);
        StorageDead(_428);
        StorageLive(_573);
        _573 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _573);
        StorageDead(_573);
        StorageDead(_230);
        StorageDead(_225);
        StorageDead(_220);
        StorageDead(_85);
        drop(_62) -> [return: bb243, unwind: bb283];
    }

    bb243: {
        StorageDead(_62);
        drop(_61) -> [return: bb244, unwind: bb284];
    }

    bb244: {
        StorageDead(_61);
        drop(_60) -> [return: bb245, unwind: bb288];
    }

    bb245: {
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_22);
        StorageDead(_14);
        goto -> bb269;
    }

    bb246: {
        drop(_495) -> [return: bb247, unwind: bb282];
    }

    bb247: {
        StorageDead(_495);
        StorageDead(_494);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_429);
        StorageDead(_428);
        goto -> bb256;
    }

    bb249: {
        StorageDead(_244);
        StorageDead(_243);
        drop(_232) -> [return: bb250, unwind: bb282];
    }

    bb250: {
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_420);
        StorageDead(_417);
        StorageDead(_412);
        goto -> bb256;
    }

    bb251: {
        StorageDead(_381);
        goto -> bb253;
    }

    bb252: {
        StorageDead(_256);
        StorageDead(_255);
        goto -> bb253;
    }

    bb253: {
        drop(_244) -> [return: bb254, unwind: bb279];
    }

    bb254: {
        StorageDead(_244);
        StorageDead(_243);
        drop(_232) -> [return: bb255, unwind: bb282];
    }

    bb255: {
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb256;
    }

    bb256: {
        StorageDead(_230);
        StorageDead(_225);
        StorageDead(_220);
        goto -> bb260;
    }

    bb257: {
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb258;
    }

    bb258: {
        drop(_114) -> [return: bb259, unwind: bb282];
    }

    bb259: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb260;
    }

    bb260: {
        StorageDead(_85);
        drop(_62) -> [return: bb261, unwind: bb283];
    }

    bb261: {
        StorageDead(_62);
        drop(_61) -> [return: bb262, unwind: bb284];
    }

    bb262: {
        StorageDead(_61);
        drop(_60) -> [return: bb263, unwind: bb288];
    }

    bb263: {
        StorageDead(_60);
        goto -> bb266;
    }

    bb264: {
        StorageDead(_73);
        StorageDead(_72);
        drop(_69) -> [return: bb265, unwind: bb288];
    }

    bb265: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb266;
    }

    bb266: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb267;
    }

    bb267: {
        StorageDead(_22);
        goto -> bb268;
    }

    bb268: {
        StorageDead(_14);
        goto -> bb269;
    }

    bb269: {
        return;
    }

    bb270 (cleanup): {
        drop(_550) -> [return: bb271, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        drop(_495) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        drop(_467) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb273 (cleanup): {
        drop(_448) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        drop(_368) -> [return: bb278, unwind terminate(cleanup)];
    }

    bb275 (cleanup): {
        drop(_349) -> [return: bb278, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        drop(_311) -> [return: bb278, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        drop(_273) -> [return: bb278, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        drop(_244) -> [return: bb279, unwind terminate(cleanup)];
    }

    bb279 (cleanup): {
        drop(_232) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb280 (cleanup): {
        drop(_114) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb281 (cleanup): {
        drop(_69) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb282 (cleanup): {
        drop(_62) -> [return: bb283, unwind terminate(cleanup)];
    }

    bb283 (cleanup): {
        drop(_61) -> [return: bb284, unwind terminate(cleanup)];
    }

    bb284 (cleanup): {
        drop(_60) -> [return: bb288, unwind terminate(cleanup)];
    }

    bb285 (cleanup): {
        drop(_73) -> [return: bb286, unwind terminate(cleanup)];
    }

    bb286 (cleanup): {
        drop(_69) -> [return: bb288, unwind terminate(cleanup)];
    }

    bb287 (cleanup): {
        drop(_35) -> [return: bb288, unwind terminate(cleanup)];
    }

    bb288 (cleanup): {
        resume;
    }

    bb289 (cleanup): {
        _674 = discriminant(_507);
        goto -> bb271;
    }

    bb290 (cleanup): {
        _675 = discriminant(_496);
        goto -> bb282;
    }

    bb291 (cleanup): {
        _676 = discriminant(_245);
        goto -> bb279;
    }

    bb292 (cleanup): {
        _677 = discriminant(_233);
        goto -> bb282;
    }

    bb293 (cleanup): {
        _678 = discriminant(_196);
        goto -> bb280;
    }

    bb294 (cleanup): {
        _679 = discriminant(_187);
        goto -> bb280;
    }

    bb295 (cleanup): {
        _680 = discriminant(_161);
        goto -> bb280;
    }

    bb296 (cleanup): {
        _681 = discriminant(_131);
        goto -> bb280;
    }

    bb297 (cleanup): {
        _682 = discriminant(_115);
        goto -> bb282;
    }

    bb298 (cleanup): {
        _684 = discriminant(_64);
        goto -> bb285;
    }

    bb299 (cleanup): {
        _685 = discriminant(_15);
        goto -> bb288;
    }

    bb300 (cleanup): {
        _686 = discriminant(_5);
        goto -> bb288;
    }
}
