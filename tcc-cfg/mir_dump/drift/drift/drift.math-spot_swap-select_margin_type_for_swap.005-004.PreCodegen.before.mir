// MIR for `select_margin_type_for_swap` before PreCodegen

fn select_margin_type_for_swap(_1: &SpotMarket, _2: &SpotMarket, _3: &StrictOraclePrice, _4: &StrictOraclePrice, _5: i128, _6: i128, _7: i128, _8: i128, _9: math::margin::MarginRequirementType) -> std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> {
    debug in_market => _1;
    debug out_market => _2;
    debug in_strict_price => _3;
    debug out_strict_price => _4;
    debug in_token_amount_before => _5;
    debug out_token_amount_before => _6;
    debug in_token_amount_after => _7;
    debug out_token_amount_after => _8;
    debug strict_margin_type => _9;
    let mut _0: std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode>;
    let _10: {closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91};
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _13: std::result::Result<i128, error::ErrorCode>;
    let mut _14: &{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91};
    let mut _15: (&state::spot_market::SpotMarket, &state::oracle::StrictOraclePrice, i128);
    let mut _16: &state::spot_market::SpotMarket;
    let mut _17: &state::oracle::StrictOraclePrice;
    let mut _18: i128;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: &{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91};
    let mut _28: (&state::spot_market::SpotMarket, &state::oracle::StrictOraclePrice, i128);
    let mut _29: &state::spot_market::SpotMarket;
    let mut _30: &state::oracle::StrictOraclePrice;
    let mut _31: i128;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _39: std::result::Result<i128, error::ErrorCode>;
    let mut _40: i128;
    let mut _41: i128;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _49: std::result::Result<i128, error::ErrorCode>;
    let mut _50: &{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91};
    let mut _51: (&state::spot_market::SpotMarket, &state::oracle::StrictOraclePrice, i128);
    let mut _52: &state::spot_market::SpotMarket;
    let mut _53: &state::oracle::StrictOraclePrice;
    let mut _54: i128;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _62: std::result::Result<i128, error::ErrorCode>;
    let mut _63: &{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91};
    let mut _64: (&state::spot_market::SpotMarket, &state::oracle::StrictOraclePrice, i128);
    let mut _65: &state::spot_market::SpotMarket;
    let mut _66: &state::oracle::StrictOraclePrice;
    let mut _67: i128;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _75: std::result::Result<i128, error::ErrorCode>;
    let mut _76: i128;
    let mut _77: i128;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: bool;
    let mut _85: i128;
    let mut _86: i128;
    let mut _87: math::margin::MarginRequirementType;
    let mut _88: math::margin::MarginRequirementType;
    let mut _89: (math::margin::MarginRequirementType, bool);
    scope 1 {
        debug calculate_free_collateral_contribution => _10;
        let _11: i128;
        let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _23: i128;
        scope 2 {
            debug in_free_collateral_contribution_before => _11;
            let _24: i128;
            let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _36: i128;
            scope 7 {
                debug out_free_collateral_contribution_before => _24;
                let _37: i128;
                let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _46: i128;
                scope 12 {
                    debug free_collateral_contribution_before => _37;
                    let _47: i128;
                    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _59: i128;
                    scope 17 {
                        debug in_free_collateral_contribution_after => _47;
                        let _60: i128;
                        let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _72: i128;
                        scope 22 {
                            debug out_free_collateral_contribution_after => _60;
                            let _73: i128;
                            let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _82: i128;
                            scope 27 {
                                debug free_collateral_contribution_after => _73;
                                let _83: (math::margin::MarginRequirementType, bool);
                                scope 32 {
                                    debug margin_type => _83;
                                }
                            }
                            scope 28 {
                                debug residual => _79;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _82;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _69;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _72;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _56;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _59;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _43;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _46;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _33;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _36;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _20;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _23;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_10);
        _10 = {closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91};
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &_10;
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_1);
        StorageLive(_17);
        _17 = &(*_3);
        StorageLive(_18);
        _18 = _5;
        _15 = (move _16, move _17, move _18);
        _13 = <{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91} as Fn<(&SpotMarket, &StrictOraclePrice, i128)>>::call(move _14, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _19 = discriminant(_12);
        switchInt(move _19) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_23);
        _23 = ((_12 as Continue).0: i128);
        _11 = _23;
        StorageDead(_23);
        StorageDead(_12);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_10;
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_2);
        StorageLive(_30);
        _30 = &(*_4);
        StorageLive(_31);
        _31 = _6;
        _28 = (move _29, move _30, move _31);
        _26 = <{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91} as Fn<(&SpotMarket, &StrictOraclePrice, i128)>>::call(move _27, move _28) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_20);
        _20 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_12);
        goto -> bb39;
    }

    bb7: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        _32 = discriminant(_25);
        switchInt(move _32) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_36);
        _36 = ((_25 as Continue).0: i128);
        _24 = _36;
        StorageDead(_36);
        StorageDead(_25);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _11;
        StorageLive(_41);
        _41 = _24;
        _39 = <i128 as SafeMath>::safe_add(move _40, move _41) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_33);
        _33 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_25);
        goto -> bb38;
    }

    bb12: {
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _39) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_39);
        _42 = discriminant(_38);
        switchInt(move _42) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_46);
        _46 = ((_38 as Continue).0: i128);
        _37 = _46;
        StorageDead(_46);
        StorageDead(_38);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_10;
        StorageLive(_51);
        StorageLive(_52);
        _52 = &(*_1);
        StorageLive(_53);
        _53 = &(*_3);
        StorageLive(_54);
        _54 = _7;
        _51 = (move _52, move _53, move _54);
        _49 = <{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91} as Fn<(&SpotMarket, &StrictOraclePrice, i128)>>::call(move _50, move _51) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_43);
        _43 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_38);
        goto -> bb37;
    }

    bb17: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        _48 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_49);
        _55 = discriminant(_48);
        switchInt(move _55) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_59);
        _59 = ((_48 as Continue).0: i128);
        _47 = _59;
        StorageDead(_59);
        StorageDead(_48);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_10;
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_2);
        StorageLive(_66);
        _66 = &(*_4);
        StorageLive(_67);
        _67 = _8;
        _64 = (move _65, move _66, move _67);
        _62 = <{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91} as Fn<(&SpotMarket, &StrictOraclePrice, i128)>>::call(move _63, move _64) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_56);
        _56 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_48);
        goto -> bb36;
    }

    bb22: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        _61 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _62) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_62);
        _68 = discriminant(_61);
        switchInt(move _68) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_72);
        _72 = ((_61 as Continue).0: i128);
        _60 = _72;
        StorageDead(_72);
        StorageDead(_61);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _47;
        StorageLive(_77);
        _77 = _60;
        _75 = <i128 as SafeMath>::safe_add(move _76, move _77) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_69);
        _69 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_61);
        goto -> bb35;
    }

    bb27: {
        StorageDead(_77);
        StorageDead(_76);
        _74 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _75) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_75);
        _78 = discriminant(_74);
        switchInt(move _78) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_82);
        _82 = ((_74 as Continue).0: i128);
        _73 = _82;
        StorageDead(_82);
        StorageDead(_74);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _73;
        StorageLive(_86);
        _86 = _37;
        _84 = Gt(move _85, move _86);
        switchInt(move _84) -> [0: bb33, otherwise: bb32];
    }

    bb30: {
        StorageLive(_79);
        _79 = ((_74 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb35;
    }

    bb32: {
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_87);
        _87 = math::margin::MarginRequirementType::Maintenance;
        _83 = (move _87, const false);
        StorageDead(_87);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_88);
        _88 = _9;
        _83 = (move _88, const true);
        StorageDead(_88);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_84);
        StorageLive(_89);
        _89 = _83;
        _0 = std::result::Result::<(math::margin::MarginRequirementType, bool), error::ErrorCode>::Ok(move _89);
        StorageDead(_89);
        StorageDead(_83);
        StorageDead(_73);
        StorageDead(_60);
        StorageDead(_47);
        StorageDead(_37);
        StorageDead(_24);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb40;
    }

    bb35: {
        StorageDead(_60);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_47);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_37);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_24);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb40;
    }

    bb40: {
        return;
    }
}
