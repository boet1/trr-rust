// MIR for `if_staker::handle_begin_insurance_fund_swap` before PreCodegen

fn if_staker::handle_begin_insurance_fund_swap(_1: anchor_lang::context::Context<'_, '_, '_, '_, if_staker::InsuranceFundSwap<'_>>, _2: u16, _3: u16, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug in_market_index => _2;
    debug out_market_index => _3;
    debug amount_in => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _9: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _18: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _26: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _27: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _28: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _32: instructions::optional_accounts::AccountMaps<'_>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _34: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _35: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _36: &std::collections::BTreeSet<u16>;
    let _37: &std::collections::BTreeSet<u16>;
    let _38: std::collections::BTreeSet<u16>;
    let mut _39: &std::collections::BTreeSet<u16>;
    let _40: &std::collections::BTreeSet<u16>;
    let _41: std::collections::BTreeSet<u16>;
    let mut _42: std::vec::Vec<u16>;
    let mut _43: std::boxed::Box<[u16]>;
    let mut _44: std::boxed::Box<[u16; 2]>;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: *mut u8;
    let mut _48: std::boxed::Box<[u16; 2]>;
    let mut _49: u16;
    let mut _50: u16;
    let mut _51: u64;
    let mut _52: std::option::Option<state::state::OracleGuardRails>;
    let mut _53: state::state::OracleGuardRails;
    let mut _54: &state::state::State;
    let mut _55: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>>;
    let mut _63: std::result::Result<std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>, error::ErrorCode>;
    let mut _64: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _72: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _73: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _81: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _82: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _90: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _91: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _92: &u16;
    let _93: &u16;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _99: ();
    let mut _100: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _101: isize;
    let _103: ();
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _105: std::result::Result<(), error::ErrorCode>;
    let mut _106: bool;
    let mut _107: &anchor_lang::prelude::Pubkey;
    let _108: anchor_lang::prelude::Pubkey;
    let mut _109: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _110: &anchor_lang::prelude::Pubkey;
    let _111: &state::spot_market::SpotMarket;
    let mut _112: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _113: ();
    let _115: ();
    let mut _116: &str;
    let _117: &str;
    let mut _118: &std::string::String;
    let _119: &std::string::String;
    let _120: std::string::String;
    let mut _122: std::fmt::Arguments<'_>;
    let mut _123: &[&str];
    let mut _124: &[&str; 2];
    let _125: &[&str; 2];
    let _126: [&str; 2];
    let mut _127: &[core::fmt::rt::Argument<'_>];
    let mut _128: &[core::fmt::rt::Argument<'_>; 1];
    let _129: &[core::fmt::rt::Argument<'_>; 1];
    let _130: [core::fmt::rt::Argument<'_>; 1];
    let mut _131: core::fmt::rt::Argument<'_>;
    let mut _132: &error::ErrorCode;
    let _133: &error::ErrorCode;
    let _134: ();
    let mut _135: &str;
    let _136: &str;
    let mut _137: error::ErrorCode;
    let mut _138: isize;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _143: ();
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _145: std::result::Result<(), error::ErrorCode>;
    let mut _146: bool;
    let mut _147: u64;
    let mut _148: &state::spot_market::SpotMarket;
    let mut _149: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _150: bool;
    let mut _151: u64;
    let mut _152: &state::spot_market::SpotMarket;
    let mut _153: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _154: ();
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: &std::string::String;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[&str; 2];
    let _166: &[&str; 2];
    let _167: [&str; 2];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let mut _169: &[core::fmt::rt::Argument<'_>; 1];
    let _170: &[core::fmt::rt::Argument<'_>; 1];
    let _171: [core::fmt::rt::Argument<'_>; 1];
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &error::ErrorCode;
    let _174: &error::ErrorCode;
    let _175: ();
    let mut _176: &str;
    let _177: &str;
    let mut _178: error::ErrorCode;
    let mut _179: isize;
    let mut _181: !;
    let mut _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _185: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _186: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _187: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _188: &u16;
    let _189: &u16;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _196: &state::spot_market::SpotMarket;
    let _197: &state::spot_market::SpotMarket;
    let mut _198: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _200: &state::spot_market::SpotMarket;
    let _201: &state::spot_market::SpotMarket;
    let mut _202: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _203: ();
    let mut _204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _205: std::result::Result<(), error::ErrorCode>;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: ();
    let _210: ();
    let mut _211: &str;
    let _212: &str;
    let mut _213: &std::string::String;
    let _214: &std::string::String;
    let _215: std::string::String;
    let mut _217: std::fmt::Arguments<'_>;
    let mut _218: &[&str];
    let mut _219: &[&str; 2];
    let _220: &[&str; 2];
    let _221: [&str; 2];
    let mut _222: &[core::fmt::rt::Argument<'_>];
    let mut _223: &[core::fmt::rt::Argument<'_>; 1];
    let _224: &[core::fmt::rt::Argument<'_>; 1];
    let _225: [core::fmt::rt::Argument<'_>; 1];
    let mut _226: core::fmt::rt::Argument<'_>;
    let mut _227: &error::ErrorCode;
    let _228: &error::ErrorCode;
    let _229: ();
    let mut _230: &str;
    let _231: &str;
    let mut _232: error::ErrorCode;
    let mut _233: isize;
    let mut _235: !;
    let mut _236: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _238: ();
    let mut _239: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _240: std::result::Result<(), error::ErrorCode>;
    let mut _241: bool;
    let mut _242: u64;
    let mut _243: &state::spot_market::SpotMarket;
    let mut _244: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _245: bool;
    let mut _246: u64;
    let mut _247: &state::spot_market::SpotMarket;
    let mut _248: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _249: ();
    let _251: ();
    let mut _252: &str;
    let _253: &str;
    let mut _254: &std::string::String;
    let _255: &std::string::String;
    let _256: std::string::String;
    let mut _258: std::fmt::Arguments<'_>;
    let mut _259: &[&str];
    let mut _260: &[&str; 2];
    let _261: &[&str; 2];
    let _262: [&str; 2];
    let mut _263: &[core::fmt::rt::Argument<'_>];
    let mut _264: &[core::fmt::rt::Argument<'_>; 1];
    let _265: &[core::fmt::rt::Argument<'_>; 1];
    let _266: [core::fmt::rt::Argument<'_>; 1];
    let mut _267: core::fmt::rt::Argument<'_>;
    let mut _268: &error::ErrorCode;
    let _269: &error::ErrorCode;
    let _270: ();
    let mut _271: &str;
    let _272: &str;
    let mut _273: error::ErrorCode;
    let mut _274: isize;
    let mut _276: !;
    let mut _277: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _279: ();
    let mut _280: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _281: std::result::Result<(), error::ErrorCode>;
    let mut _282: bool;
    let mut _283: u16;
    let mut _284: u16;
    let mut _285: ();
    let _287: ();
    let mut _288: &str;
    let _289: &str;
    let mut _290: &std::string::String;
    let _291: &std::string::String;
    let _292: std::string::String;
    let mut _294: std::fmt::Arguments<'_>;
    let mut _295: &[&str];
    let mut _296: &[&str; 2];
    let _297: &[&str; 2];
    let _298: [&str; 2];
    let mut _299: &[core::fmt::rt::Argument<'_>];
    let mut _300: &[core::fmt::rt::Argument<'_>; 1];
    let _301: &[core::fmt::rt::Argument<'_>; 1];
    let _302: [core::fmt::rt::Argument<'_>; 1];
    let mut _303: core::fmt::rt::Argument<'_>;
    let mut _304: &error::ErrorCode;
    let _305: &error::ErrorCode;
    let _306: ();
    let mut _307: &str;
    let _308: &str;
    let mut _309: error::ErrorCode;
    let mut _310: isize;
    let mut _312: !;
    let mut _313: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _315: ();
    let mut _316: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _317: std::result::Result<(), error::ErrorCode>;
    let mut _318: bool;
    let mut _319: u64;
    let mut _320: ();
    let _322: ();
    let mut _323: &str;
    let _324: &str;
    let mut _325: &std::string::String;
    let _326: &std::string::String;
    let _327: std::string::String;
    let mut _329: std::fmt::Arguments<'_>;
    let mut _330: &[&str];
    let mut _331: &[&str; 2];
    let _332: &[&str; 2];
    let _333: [&str; 2];
    let mut _334: &[core::fmt::rt::Argument<'_>];
    let mut _335: &[core::fmt::rt::Argument<'_>; 1];
    let _336: &[core::fmt::rt::Argument<'_>; 1];
    let _337: [core::fmt::rt::Argument<'_>; 1];
    let mut _338: core::fmt::rt::Argument<'_>;
    let mut _339: &error::ErrorCode;
    let _340: &error::ErrorCode;
    let _341: ();
    let mut _342: &str;
    let _343: &str;
    let mut _344: error::ErrorCode;
    let mut _345: isize;
    let mut _347: !;
    let mut _348: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _351: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>>;
    let mut _352: std::result::Result<std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>, anchor_lang::error::Error>;
    let mut _353: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _354: isize;
    let mut _356: !;
    let mut _357: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _359: ();
    let mut _360: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _361: std::result::Result<(), error::ErrorCode>;
    let mut _362: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _363: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _364: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _365: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _366: u64;
    let mut _367: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _368: &anchor_spl::token_interface::TokenAccount;
    let _369: &anchor_spl::token_interface::TokenAccount;
    let mut _370: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _371: u64;
    let mut _372: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _373: &anchor_spl::token_interface::TokenAccount;
    let _374: &anchor_spl::token_interface::TokenAccount;
    let mut _375: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _376: &mut state::spot_market::SpotMarket;
    let mut _377: &mut state::spot_market::SpotMarket;
    let mut _378: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _379: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _380: &mut state::spot_market::SpotMarket;
    let mut _381: &mut state::spot_market::SpotMarket;
    let mut _382: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _383: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _384: u64;
    let mut _385: i64;
    let mut _386: isize;
    let mut _388: !;
    let mut _389: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _393: u64;
    let mut _394: &mut state::spot_market::SpotMarket;
    let mut _395: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _396: u64;
    let mut _397: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _398: &anchor_spl::token_interface::TokenAccount;
    let _399: &anchor_spl::token_interface::TokenAccount;
    let mut _400: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _401: &mut state::spot_market::SpotMarket;
    let mut _402: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _404: u64;
    let mut _405: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _406: &anchor_spl::token_interface::TokenAccount;
    let _407: &anchor_spl::token_interface::TokenAccount;
    let mut _408: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _409: &mut state::spot_market::SpotMarket;
    let mut _410: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _411: ();
    let mut _412: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _413: std::result::Result<(), anchor_lang::error::Error>;
    let mut _414: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _415: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _416: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _417: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _418: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _419: &anchor_lang::prelude::AccountInfo<'_>;
    let _420: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _421: u8;
    let mut _422: &state::state::State;
    let mut _423: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _424: u64;
    let mut _425: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _426: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _427: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _428: bool;
    let mut _429: &state::spot_market::SpotMarket;
    let _430: &state::spot_market::SpotMarket;
    let mut _431: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _432: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _433: isize;
    let mut _435: !;
    let mut _436: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _439: &anchor_lang::prelude::UncheckedAccount<'_>;
    let mut _441: u16;
    let mut _442: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u16>;
    let mut _443: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _444: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _445: isize;
    let mut _447: !;
    let mut _448: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _451: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _452: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _453: usize;
    let mut _454: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _455: isize;
    let mut _457: !;
    let mut _458: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _460: ();
    let mut _461: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _462: std::result::Result<(), error::ErrorCode>;
    let mut _463: bool;
    let mut _464: &anchor_lang::prelude::Pubkey;
    let mut _465: &anchor_lang::prelude::Pubkey;
    let mut _466: ();
    let _468: ();
    let mut _469: &str;
    let _470: &str;
    let mut _471: &std::string::String;
    let _472: &std::string::String;
    let _473: std::string::String;
    let mut _475: std::fmt::Arguments<'_>;
    let mut _476: &[&str];
    let mut _477: &[&str; 2];
    let _478: &[&str; 2];
    let _479: [&str; 2];
    let mut _480: &[core::fmt::rt::Argument<'_>];
    let mut _481: &[core::fmt::rt::Argument<'_>; 1];
    let _482: &[core::fmt::rt::Argument<'_>; 1];
    let _483: [core::fmt::rt::Argument<'_>; 1];
    let mut _484: core::fmt::rt::Argument<'_>;
    let mut _485: &error::ErrorCode;
    let _486: &error::ErrorCode;
    let _487: ();
    let mut _488: &str;
    let _489: &str;
    let mut _490: error::ErrorCode;
    let mut _491: isize;
    let mut _493: !;
    let mut _494: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _497: usize;
    let mut _498: (usize, bool);
    let _500: ();
    let mut _501: ();
    let mut _503: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _504: usize;
    let mut _505: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _506: isize;
    let mut _507: isize;
    let mut _509: !;
    let mut _511: !;
    let mut _512: anchor_lang::error::Error;
    let mut _513: anchor_lang::prelude::ProgramError;
    let _514: ();
    let mut _515: bool;
    let mut _516: &anchor_lang::prelude::Pubkey;
    let mut _517: &anchor_lang::prelude::Pubkey;
    let _518: anchor_lang::prelude::Pubkey;
    let _519: ();
    let mut _520: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _521: std::result::Result<(), error::ErrorCode>;
    let mut _522: bool;
    let mut _523: ();
    let _525: ();
    let mut _526: &str;
    let _527: &str;
    let mut _528: &std::string::String;
    let _529: &std::string::String;
    let _530: std::string::String;
    let mut _532: std::fmt::Arguments<'_>;
    let mut _533: &[&str];
    let mut _534: &[&str; 2];
    let _535: &[&str; 2];
    let _536: [&str; 2];
    let mut _537: &[core::fmt::rt::Argument<'_>];
    let mut _538: &[core::fmt::rt::Argument<'_>; 1];
    let _539: &[core::fmt::rt::Argument<'_>; 1];
    let _540: [core::fmt::rt::Argument<'_>; 1];
    let mut _541: core::fmt::rt::Argument<'_>;
    let mut _542: &error::ErrorCode;
    let _543: &error::ErrorCode;
    let _544: ();
    let mut _545: &str;
    let _546: &str;
    let mut _547: error::ErrorCode;
    let mut _548: isize;
    let mut _550: !;
    let mut _551: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _554: ();
    let mut _555: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _556: std::result::Result<(), error::ErrorCode>;
    let mut _557: bool;
    let mut _558: &[u8];
    let _559: &[u8];
    let mut _560: &std::vec::Vec<u8>;
    let mut _561: std::ops::Range<usize>;
    let mut _562: &[u8; 8];
    let mut _563: ();
    let _565: ();
    let mut _566: &str;
    let _567: &str;
    let mut _568: &std::string::String;
    let _569: &std::string::String;
    let _570: std::string::String;
    let mut _572: std::fmt::Arguments<'_>;
    let mut _573: &[&str];
    let mut _574: &[&str; 2];
    let _575: &[&str; 2];
    let _576: [&str; 2];
    let mut _577: &[core::fmt::rt::Argument<'_>];
    let mut _578: &[core::fmt::rt::Argument<'_>; 1];
    let _579: &[core::fmt::rt::Argument<'_>; 1];
    let _580: [core::fmt::rt::Argument<'_>; 1];
    let mut _581: core::fmt::rt::Argument<'_>;
    let mut _582: &error::ErrorCode;
    let _583: &error::ErrorCode;
    let _584: ();
    let mut _585: &str;
    let _586: &str;
    let mut _587: error::ErrorCode;
    let mut _588: isize;
    let mut _590: !;
    let mut _591: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _593: ();
    let mut _594: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _595: std::result::Result<(), error::ErrorCode>;
    let mut _596: bool;
    let mut _597: &anchor_lang::prelude::Pubkey;
    let _598: anchor_lang::prelude::Pubkey;
    let mut _599: &anchor_lang::prelude::Signer<'_>;
    let mut _600: &anchor_lang::prelude::Pubkey;
    let _601: &anchor_lang::prelude::AccountMeta;
    let mut _602: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _603: ();
    let _605: ();
    let mut _606: &str;
    let _607: &str;
    let mut _608: &std::string::String;
    let _609: &std::string::String;
    let _610: std::string::String;
    let mut _612: std::fmt::Arguments<'_>;
    let mut _613: &[&str];
    let mut _614: &[&str; 2];
    let _615: &[&str; 2];
    let _616: [&str; 2];
    let mut _617: &[core::fmt::rt::Argument<'_>];
    let mut _618: &[core::fmt::rt::Argument<'_>; 1];
    let _619: &[core::fmt::rt::Argument<'_>; 1];
    let _620: [core::fmt::rt::Argument<'_>; 1];
    let mut _621: core::fmt::rt::Argument<'_>;
    let mut _622: &error::ErrorCode;
    let _623: &error::ErrorCode;
    let _624: ();
    let mut _625: &str;
    let _626: &str;
    let mut _627: error::ErrorCode;
    let mut _628: isize;
    let mut _630: !;
    let mut _631: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _633: ();
    let mut _634: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _635: std::result::Result<(), error::ErrorCode>;
    let mut _636: bool;
    let mut _637: &anchor_lang::prelude::Pubkey;
    let _638: anchor_lang::prelude::Pubkey;
    let mut _639: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _640: &anchor_lang::prelude::Pubkey;
    let _641: &anchor_lang::prelude::AccountMeta;
    let mut _642: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _643: ();
    let _645: ();
    let mut _646: &str;
    let _647: &str;
    let mut _648: &std::string::String;
    let _649: &std::string::String;
    let _650: std::string::String;
    let mut _652: std::fmt::Arguments<'_>;
    let mut _653: &[&str];
    let mut _654: &[&str; 2];
    let _655: &[&str; 2];
    let _656: [&str; 2];
    let mut _657: &[core::fmt::rt::Argument<'_>];
    let mut _658: &[core::fmt::rt::Argument<'_>; 1];
    let _659: &[core::fmt::rt::Argument<'_>; 1];
    let _660: [core::fmt::rt::Argument<'_>; 1];
    let mut _661: core::fmt::rt::Argument<'_>;
    let mut _662: &error::ErrorCode;
    let _663: &error::ErrorCode;
    let _664: ();
    let mut _665: &str;
    let _666: &str;
    let mut _667: error::ErrorCode;
    let mut _668: isize;
    let mut _670: !;
    let mut _671: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _673: ();
    let mut _674: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _675: std::result::Result<(), error::ErrorCode>;
    let mut _676: bool;
    let mut _677: &anchor_lang::prelude::Pubkey;
    let _678: anchor_lang::prelude::Pubkey;
    let mut _679: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _680: &anchor_lang::prelude::Pubkey;
    let _681: &anchor_lang::prelude::AccountMeta;
    let mut _682: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _683: ();
    let _685: ();
    let mut _686: &str;
    let _687: &str;
    let mut _688: &std::string::String;
    let _689: &std::string::String;
    let _690: std::string::String;
    let mut _692: std::fmt::Arguments<'_>;
    let mut _693: &[&str];
    let mut _694: &[&str; 2];
    let _695: &[&str; 2];
    let _696: [&str; 2];
    let mut _697: &[core::fmt::rt::Argument<'_>];
    let mut _698: &[core::fmt::rt::Argument<'_>; 1];
    let _699: &[core::fmt::rt::Argument<'_>; 1];
    let _700: [core::fmt::rt::Argument<'_>; 1];
    let mut _701: core::fmt::rt::Argument<'_>;
    let mut _702: &error::ErrorCode;
    let _703: &error::ErrorCode;
    let _704: ();
    let mut _705: &str;
    let _706: &str;
    let mut _707: error::ErrorCode;
    let mut _708: isize;
    let mut _710: !;
    let mut _711: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _713: ();
    let mut _714: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _715: std::result::Result<(), error::ErrorCode>;
    let mut _716: bool;
    let mut _717: &anchor_lang::prelude::Pubkey;
    let _718: anchor_lang::prelude::Pubkey;
    let mut _719: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _720: &anchor_lang::prelude::Pubkey;
    let _721: &anchor_lang::prelude::AccountMeta;
    let mut _722: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _723: ();
    let _725: ();
    let mut _726: &str;
    let _727: &str;
    let mut _728: &std::string::String;
    let _729: &std::string::String;
    let _730: std::string::String;
    let mut _732: std::fmt::Arguments<'_>;
    let mut _733: &[&str];
    let mut _734: &[&str; 2];
    let _735: &[&str; 2];
    let _736: [&str; 2];
    let mut _737: &[core::fmt::rt::Argument<'_>];
    let mut _738: &[core::fmt::rt::Argument<'_>; 1];
    let _739: &[core::fmt::rt::Argument<'_>; 1];
    let _740: [core::fmt::rt::Argument<'_>; 1];
    let mut _741: core::fmt::rt::Argument<'_>;
    let mut _742: &error::ErrorCode;
    let _743: &error::ErrorCode;
    let _744: ();
    let mut _745: &str;
    let _746: &str;
    let mut _747: error::ErrorCode;
    let mut _748: isize;
    let mut _750: !;
    let mut _751: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _753: ();
    let mut _754: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _755: std::result::Result<(), error::ErrorCode>;
    let mut _756: bool;
    let mut _757: &anchor_lang::prelude::Pubkey;
    let _758: anchor_lang::prelude::Pubkey;
    let mut _759: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _760: &anchor_lang::prelude::Pubkey;
    let _761: &anchor_lang::prelude::AccountMeta;
    let mut _762: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _763: ();
    let _765: ();
    let mut _766: &str;
    let _767: &str;
    let mut _768: &std::string::String;
    let _769: &std::string::String;
    let _770: std::string::String;
    let mut _772: std::fmt::Arguments<'_>;
    let mut _773: &[&str];
    let mut _774: &[&str; 2];
    let _775: &[&str; 2];
    let _776: [&str; 2];
    let mut _777: &[core::fmt::rt::Argument<'_>];
    let mut _778: &[core::fmt::rt::Argument<'_>; 1];
    let _779: &[core::fmt::rt::Argument<'_>; 1];
    let _780: [core::fmt::rt::Argument<'_>; 1];
    let mut _781: core::fmt::rt::Argument<'_>;
    let mut _782: &error::ErrorCode;
    let _783: &error::ErrorCode;
    let _784: ();
    let mut _785: &str;
    let _786: &str;
    let mut _787: error::ErrorCode;
    let mut _788: isize;
    let mut _790: !;
    let mut _791: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _793: ();
    let mut _794: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _795: std::result::Result<(), error::ErrorCode>;
    let mut _796: bool;
    let mut _797: &anchor_lang::prelude::Pubkey;
    let _798: anchor_lang::prelude::Pubkey;
    let mut _799: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _800: &anchor_lang::prelude::Pubkey;
    let _801: &anchor_lang::prelude::AccountMeta;
    let mut _802: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _803: ();
    let _805: ();
    let mut _806: &str;
    let _807: &str;
    let mut _808: &std::string::String;
    let _809: &std::string::String;
    let _810: std::string::String;
    let mut _812: std::fmt::Arguments<'_>;
    let mut _813: &[&str];
    let mut _814: &[&str; 2];
    let _815: &[&str; 2];
    let _816: [&str; 2];
    let mut _817: &[core::fmt::rt::Argument<'_>];
    let mut _818: &[core::fmt::rt::Argument<'_>; 1];
    let _819: &[core::fmt::rt::Argument<'_>; 1];
    let _820: [core::fmt::rt::Argument<'_>; 1];
    let mut _821: core::fmt::rt::Argument<'_>;
    let mut _822: &error::ErrorCode;
    let _823: &error::ErrorCode;
    let _824: ();
    let mut _825: &str;
    let _826: &str;
    let mut _827: error::ErrorCode;
    let mut _828: isize;
    let mut _830: !;
    let mut _831: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _833: ();
    let mut _834: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _835: std::result::Result<(), error::ErrorCode>;
    let mut _836: bool;
    let mut _837: usize;
    let mut _838: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _839: usize;
    let mut _840: usize;
    let mut _841: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _842: (usize, bool);
    let mut _843: ();
    let _845: ();
    let mut _846: &str;
    let _847: &str;
    let mut _848: &std::string::String;
    let _849: &std::string::String;
    let _850: std::string::String;
    let mut _852: std::fmt::Arguments<'_>;
    let mut _853: &[&str];
    let mut _854: &[&str; 2];
    let _855: &[&str; 2];
    let _856: [&str; 2];
    let mut _857: &[core::fmt::rt::Argument<'_>];
    let mut _858: &[core::fmt::rt::Argument<'_>; 1];
    let _859: &[core::fmt::rt::Argument<'_>; 1];
    let _860: [core::fmt::rt::Argument<'_>; 1];
    let mut _861: core::fmt::rt::Argument<'_>;
    let mut _862: &error::ErrorCode;
    let _863: &error::ErrorCode;
    let _864: ();
    let mut _865: &str;
    let _866: &str;
    let mut _867: error::ErrorCode;
    let mut _868: isize;
    let mut _870: !;
    let mut _871: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _873: std::ops::Range<usize>;
    let mut _874: std::ops::Range<usize>;
    let mut _875: usize;
    let mut _876: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _878: ();
    let mut _879: std::option::Option<usize>;
    let mut _880: &mut std::ops::Range<usize>;
    let mut _881: &mut std::ops::Range<usize>;
    let mut _882: isize;
    let mut _883: !;
    let _885: ();
    let mut _886: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _887: std::result::Result<(), error::ErrorCode>;
    let mut _888: bool;
    let mut _889: &anchor_lang::prelude::Pubkey;
    let _890: usize;
    let mut _891: usize;
    let mut _892: (usize, bool);
    let mut _893: usize;
    let mut _894: bool;
    let mut _895: &anchor_lang::prelude::Pubkey;
    let _896: &anchor_lang::prelude::AccountMeta;
    let mut _897: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _898: usize;
    let mut _899: ();
    let _901: ();
    let mut _902: &str;
    let _903: &str;
    let mut _904: &std::string::String;
    let _905: &std::string::String;
    let _906: std::string::String;
    let mut _908: std::fmt::Arguments<'_>;
    let mut _909: &[&str];
    let mut _910: &[&str; 2];
    let _911: &[&str; 2];
    let _912: [&str; 2];
    let mut _913: &[core::fmt::rt::Argument<'_>];
    let mut _914: &[core::fmt::rt::Argument<'_>; 1];
    let _915: &[core::fmt::rt::Argument<'_>; 1];
    let _916: [core::fmt::rt::Argument<'_>; 1];
    let mut _917: core::fmt::rt::Argument<'_>;
    let mut _918: &error::ErrorCode;
    let _919: &error::ErrorCode;
    let _920: ();
    let mut _921: &str;
    let _922: &str;
    let mut _923: &std::string::String;
    let _924: &std::string::String;
    let _925: std::string::String;
    let mut _927: std::fmt::Arguments<'_>;
    let mut _928: &[&str];
    let mut _929: &[&str; 3];
    let _930: &[&str; 3];
    let _931: [&str; 3];
    let mut _932: &[core::fmt::rt::Argument<'_>];
    let mut _933: &[core::fmt::rt::Argument<'_>; 3];
    let _934: &[core::fmt::rt::Argument<'_>; 3];
    let _935: [core::fmt::rt::Argument<'_>; 3];
    let mut _936: core::fmt::rt::Argument<'_>;
    let mut _937: &usize;
    let _938: &usize;
    let mut _939: core::fmt::rt::Argument<'_>;
    let mut _940: &&anchor_lang::prelude::Pubkey;
    let _941: &&anchor_lang::prelude::Pubkey;
    let _942: usize;
    let mut _943: usize;
    let mut _944: (usize, bool);
    let mut _945: usize;
    let mut _946: bool;
    let mut _947: core::fmt::rt::Argument<'_>;
    let mut _948: &anchor_lang::prelude::Pubkey;
    let _949: &anchor_lang::prelude::Pubkey;
    let _950: &anchor_lang::prelude::AccountMeta;
    let mut _951: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _952: usize;
    let mut _953: error::ErrorCode;
    let mut _954: isize;
    let mut _956: !;
    let mut _957: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _959: bool;
    let mut _960: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _961: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _962: &[anchor_lang::prelude::AccountMeta];
    let _963: &[anchor_lang::prelude::AccountMeta];
    let mut _964: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _966: ();
    let mut _967: std::option::Option<&anchor_lang::prelude::AccountMeta>;
    let mut _968: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _969: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _970: isize;
    let mut _971: !;
    let _973: ();
    let mut _974: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _975: std::result::Result<(), error::ErrorCode>;
    let mut _976: bool;
    let mut _977: bool;
    let mut _978: ();
    let _980: ();
    let mut _981: &str;
    let _982: &str;
    let mut _983: &std::string::String;
    let _984: &std::string::String;
    let _985: std::string::String;
    let mut _987: std::fmt::Arguments<'_>;
    let mut _988: &[&str];
    let mut _989: &[&str; 2];
    let _990: &[&str; 2];
    let _991: [&str; 2];
    let mut _992: &[core::fmt::rt::Argument<'_>];
    let mut _993: &[core::fmt::rt::Argument<'_>; 1];
    let _994: &[core::fmt::rt::Argument<'_>; 1];
    let _995: [core::fmt::rt::Argument<'_>; 1];
    let mut _996: core::fmt::rt::Argument<'_>;
    let mut _997: &error::ErrorCode;
    let _998: &error::ErrorCode;
    let _999: ();
    let mut _1000: &str;
    let _1001: &str;
    let mut _1002: error::ErrorCode;
    let mut _1003: isize;
    let mut _1005: !;
    let mut _1006: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1008: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1009: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1010: &[anchor_lang::prelude::AccountMeta];
    let _1011: &[anchor_lang::prelude::AccountMeta];
    let mut _1012: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _1014: ();
    let mut _1015: std::option::Option<&anchor_lang::prelude::AccountMeta>;
    let mut _1016: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1017: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1018: isize;
    let mut _1019: !;
    let _1021: ();
    let mut _1022: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1023: std::result::Result<(), error::ErrorCode>;
    let mut _1024: bool;
    let mut _1025: &anchor_lang::prelude::Pubkey;
    let mut _1026: &anchor_lang::prelude::Pubkey;
    let _1027: anchor_lang::prelude::Pubkey;
    let mut _1028: ();
    let _1030: ();
    let mut _1031: &str;
    let _1032: &str;
    let mut _1033: &std::string::String;
    let _1034: &std::string::String;
    let _1035: std::string::String;
    let mut _1037: std::fmt::Arguments<'_>;
    let mut _1038: &[&str];
    let mut _1039: &[&str; 2];
    let _1040: &[&str; 2];
    let _1041: [&str; 2];
    let mut _1042: &[core::fmt::rt::Argument<'_>];
    let mut _1043: &[core::fmt::rt::Argument<'_>; 1];
    let _1044: &[core::fmt::rt::Argument<'_>; 1];
    let _1045: [core::fmt::rt::Argument<'_>; 1];
    let mut _1046: core::fmt::rt::Argument<'_>;
    let mut _1047: &error::ErrorCode;
    let _1048: &error::ErrorCode;
    let _1049: ();
    let mut _1050: &str;
    let _1051: &str;
    let mut _1052: error::ErrorCode;
    let mut _1053: isize;
    let mut _1055: !;
    let mut _1056: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1058: (usize, bool);
    let _1059: ();
    let mut _1060: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1061: std::result::Result<(), error::ErrorCode>;
    let mut _1062: bool;
    let mut _1063: ();
    let _1065: ();
    let mut _1066: &str;
    let _1067: &str;
    let mut _1068: &std::string::String;
    let _1069: &std::string::String;
    let _1070: std::string::String;
    let mut _1072: std::fmt::Arguments<'_>;
    let mut _1073: &[&str];
    let mut _1074: &[&str; 2];
    let _1075: &[&str; 2];
    let _1076: [&str; 2];
    let mut _1077: &[core::fmt::rt::Argument<'_>];
    let mut _1078: &[core::fmt::rt::Argument<'_>; 1];
    let _1079: &[core::fmt::rt::Argument<'_>; 1];
    let _1080: [core::fmt::rt::Argument<'_>; 1];
    let mut _1081: core::fmt::rt::Argument<'_>;
    let mut _1082: &error::ErrorCode;
    let _1083: &error::ErrorCode;
    let _1084: ();
    let mut _1085: &str;
    let _1086: &str;
    let mut _1087: error::ErrorCode;
    let mut _1088: isize;
    let mut _1090: !;
    let mut _1091: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1093: ();
    let mut _1115: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1116: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1117: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1118: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1119: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1120: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1121: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1122: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1123: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1124: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1125: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1126: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1127: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1128: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1129: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1130: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1131: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1132: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1133: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1134: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1135: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1136: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1137: &anchor_lang::prelude::Pubkey;
    let mut _1138: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1139: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1140: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1141: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1142: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1143: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1144: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1145: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1146: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1147: &mut instructions::if_staker::InsuranceFundSwap<'_>;
    let mut _1148: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1149: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1150: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1151: &anchor_lang::prelude::Pubkey;
    let mut _1152: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1153: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1154: isize;
    let mut _1155: isize;
    let mut _1156: isize;
    let mut _1157: isize;
    let mut _1158: isize;
    let mut _1159: isize;
    let mut _1160: isize;
    let mut _1161: isize;
    let mut _1162: isize;
    let mut _1163: isize;
    let mut _1164: isize;
    let mut _1165: isize;
    let mut _1166: isize;
    let mut _1167: isize;
    let mut _1168: isize;
    let mut _1169: isize;
    let mut _1170: isize;
    let mut _1171: isize;
    let mut _1172: isize;
    let mut _1173: isize;
    let mut _1174: isize;
    let mut _1175: isize;
    let mut _1176: isize;
    let mut _1177: isize;
    let mut _1178: isize;
    let mut _1179: isize;
    let mut _1180: isize;
    let mut _1181: isize;
    let mut _1182: isize;
    let mut _1183: isize;
    let mut _1184: isize;
    let mut _1185: isize;
    let mut _1186: isize;
    let mut _1187: isize;
    let mut _1188: isize;
    let mut _1189: isize;
    let mut _1190: isize;
    let mut _1191: isize;
    let mut _1192: isize;
    let mut _1193: isize;
    let mut _1194: isize;
    let mut _1195: isize;
    let mut _1196: isize;
    let mut _1197: isize;
    let mut _1198: isize;
    let mut _1199: isize;
    let mut _1200: isize;
    let mut _1201: isize;
    let mut _1202: isize;
    let mut _1203: isize;
    let mut _1204: isize;
    let mut _1205: isize;
    let mut _1206: isize;
    let mut _1207: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1208: *const [u16; 2];
    let mut _1209: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1210: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1211: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1212: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1213: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1214: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1215: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1216: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1217: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1218: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1219: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1220: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug state => _15;
        let _16: anchor_lang::prelude::Clock;
        let _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _23: anchor_lang::prelude::Clock;
        scope 6 {
            debug clock => _16;
            let _24: i64;
            scope 11 {
                debug now => _24;
                let _25: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                scope 12 {
                    debug remaining_accounts_iter => _25;
                    let _29: state::perp_market_map::PerpMarketMap<'_>;
                    let _30: state::spot_market_map::SpotMarketMap<'_>;
                    let mut _31: state::oracle_map::OracleMap<'_>;
                    let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _60: instructions::optional_accounts::AccountMaps<'_>;
                    let mut _1221: *const ();
                    let mut _1222: usize;
                    let mut _1223: usize;
                    let mut _1224: usize;
                    let mut _1225: usize;
                    let mut _1226: bool;
                    scope 13 {
                        debug perp_market_map => _29;
                        debug spot_market_map => _30;
                        debug oracle_map => _31;
                        let _61: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
                        let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _69: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
                        scope 19 {
                            debug _token_interface => _61;
                            let _70: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                            let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _78: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                            scope 24 {
                                debug mint => _70;
                                let _79: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _87: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                scope 29 {
                                    debug _out_mint => _79;
                                    let mut _88: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                    let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _98: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                    scope 34 {
                                        debug in_spot_market => _88;
                                        let _155: error::ErrorCode;
                                        let _180: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _183: ();
                                        let mut _184: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        let _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _194: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        scope 39 {
                                            debug mint => _102;
                                            let _102: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
                                            let _114: error::ErrorCode;
                                            let _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _142: ();
                                            scope 40 {
                                                debug error_code => _114;
                                                let _121: std::string::String;
                                                let mut _1114: &[&str; 2];
                                                scope 41 {
                                                    debug res => _121;
                                                }
                                            }
                                            scope 42 {
                                                debug residual => _139;
                                                scope 43 {
                                                }
                                            }
                                            scope 44 {
                                                debug val => _142;
                                                scope 45 {
                                                }
                                            }
                                        }
                                        scope 46 {
                                            debug error_code => _155;
                                            let _162: std::string::String;
                                            let mut _1113: &[&str; 2];
                                            scope 47 {
                                                debug res => _162;
                                            }
                                        }
                                        scope 48 {
                                            debug residual => _180;
                                            scope 49 {
                                            }
                                        }
                                        scope 50 {
                                            debug val => _183;
                                            scope 51 {
                                            }
                                        }
                                        scope 52 {
                                            debug out_spot_market => _184;
                                            let _195: bool;
                                            scope 57 {
                                                debug in_spot_has_transfer_hook => _195;
                                                let _199: bool;
                                                scope 58 {
                                                    debug out_spot_has_transfer_hook => _199;
                                                    let _209: error::ErrorCode;
                                                    let _234: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _237: ();
                                                    let _250: error::ErrorCode;
                                                    let _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _278: ();
                                                    let _286: error::ErrorCode;
                                                    let _311: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _314: ();
                                                    let _321: error::ErrorCode;
                                                    let _346: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _349: ();
                                                    let mut _350: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
                                                    let _355: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _358: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
                                                    scope 59 {
                                                        debug error_code => _209;
                                                        let _216: std::string::String;
                                                        let mut _1112: &[&str; 2];
                                                        scope 60 {
                                                            debug res => _216;
                                                        }
                                                    }
                                                    scope 61 {
                                                        debug residual => _234;
                                                        scope 62 {
                                                        }
                                                    }
                                                    scope 63 {
                                                        debug val => _237;
                                                        scope 64 {
                                                        }
                                                    }
                                                    scope 65 {
                                                        debug error_code => _250;
                                                        let _257: std::string::String;
                                                        let mut _1111: &[&str; 2];
                                                        scope 66 {
                                                            debug res => _257;
                                                        }
                                                    }
                                                    scope 67 {
                                                        debug residual => _275;
                                                        scope 68 {
                                                        }
                                                    }
                                                    scope 69 {
                                                        debug val => _278;
                                                        scope 70 {
                                                        }
                                                    }
                                                    scope 71 {
                                                        debug error_code => _286;
                                                        let _293: std::string::String;
                                                        let mut _1110: &[&str; 2];
                                                        scope 72 {
                                                            debug res => _293;
                                                        }
                                                    }
                                                    scope 73 {
                                                        debug residual => _311;
                                                        scope 74 {
                                                        }
                                                    }
                                                    scope 75 {
                                                        debug val => _314;
                                                        scope 76 {
                                                        }
                                                    }
                                                    scope 77 {
                                                        debug error_code => _321;
                                                        let _328: std::string::String;
                                                        let mut _1109: &[&str; 2];
                                                        scope 78 {
                                                            debug res => _328;
                                                        }
                                                    }
                                                    scope 79 {
                                                        debug residual => _346;
                                                        scope 80 {
                                                        }
                                                    }
                                                    scope 81 {
                                                        debug val => _349;
                                                        scope 82 {
                                                        }
                                                    }
                                                    scope 83 {
                                                        debug if_rebalance_config => _350;
                                                        let _387: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _390: ();
                                                        let _391: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                        scope 88 {
                                                            debug residual => _387;
                                                            scope 89 {
                                                            }
                                                        }
                                                        scope 90 {
                                                            debug val => _390;
                                                            scope 91 {
                                                            }
                                                        }
                                                        scope 92 {
                                                            debug in_vault => _391;
                                                            let _392: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                            scope 93 {
                                                                debug in_token_account => _392;
                                                                let _403: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                scope 94 {
                                                                    debug out_token_account => _403;
                                                                    let _434: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _437: ();
                                                                    let _438: &anchor_lang::prelude::AccountInfo<'_>;
                                                                    scope 95 {
                                                                        debug residual => _434;
                                                                        scope 96 {
                                                                        }
                                                                    }
                                                                    scope 97 {
                                                                        debug val => _437;
                                                                        scope 98 {
                                                                        }
                                                                    }
                                                                    scope 99 {
                                                                        debug ixs => _438;
                                                                        let _440: usize;
                                                                        let _446: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _449: u16;
                                                                        scope 100 {
                                                                            debug current_index => _440;
                                                                            let _450: solana_program::instruction::Instruction;
                                                                            let _456: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                            let _459: solana_program::instruction::Instruction;
                                                                            scope 105 {
                                                                                debug current_ix => _450;
                                                                                let _467: error::ErrorCode;
                                                                                let _492: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _495: ();
                                                                                let mut _496: usize;
                                                                                scope 110 {
                                                                                    debug error_code => _467;
                                                                                    let _474: std::string::String;
                                                                                    let mut _1108: &[&str; 2];
                                                                                    scope 111 {
                                                                                        debug res => _474;
                                                                                    }
                                                                                }
                                                                                scope 112 {
                                                                                    debug residual => _492;
                                                                                    scope 113 {
                                                                                    }
                                                                                }
                                                                                scope 114 {
                                                                                    debug val => _495;
                                                                                    scope 115 {
                                                                                    }
                                                                                }
                                                                                scope 116 {
                                                                                    debug index => _496;
                                                                                    let mut _499: bool;
                                                                                    scope 117 {
                                                                                        debug found_end => _499;
                                                                                        let _502: solana_program::instruction::Instruction;
                                                                                        let _508: solana_program::instruction::Instruction;
                                                                                        let _510: anchor_lang::prelude::ProgramError;
                                                                                        let _1064: error::ErrorCode;
                                                                                        let _1089: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1092: ();
                                                                                        scope 118 {
                                                                                            debug ix => _502;
                                                                                            let _524: error::ErrorCode;
                                                                                            let _549: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _552: ();
                                                                                            let _553: [u8; 8];
                                                                                            let mut _965: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
                                                                                            let mut _1013: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
                                                                                            scope 121 {
                                                                                                debug error_code => _524;
                                                                                                let _531: std::string::String;
                                                                                                let mut _1105: &[&str; 2];
                                                                                                scope 122 {
                                                                                                    debug res => _531;
                                                                                                }
                                                                                            }
                                                                                            scope 123 {
                                                                                                debug residual => _549;
                                                                                                scope 124 {
                                                                                                }
                                                                                            }
                                                                                            scope 125 {
                                                                                                debug val => _552;
                                                                                                scope 126 {
                                                                                                }
                                                                                            }
                                                                                            scope 127 {
                                                                                                debug discriminator => _553;
                                                                                                let _564: error::ErrorCode;
                                                                                                let _589: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _592: ();
                                                                                                let _604: error::ErrorCode;
                                                                                                let _629: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _632: ();
                                                                                                let _644: error::ErrorCode;
                                                                                                let _669: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _672: ();
                                                                                                let _684: error::ErrorCode;
                                                                                                let _709: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _712: ();
                                                                                                let _724: error::ErrorCode;
                                                                                                let _749: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _752: ();
                                                                                                let _764: error::ErrorCode;
                                                                                                let _789: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _792: ();
                                                                                                let _804: error::ErrorCode;
                                                                                                let _829: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _832: ();
                                                                                                let _844: error::ErrorCode;
                                                                                                let _869: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _872: ();
                                                                                                let mut _877: std::ops::Range<usize>;
                                                                                                scope 128 {
                                                                                                    debug error_code => _564;
                                                                                                    let _571: std::string::String;
                                                                                                    let mut _1104: &[&str; 2];
                                                                                                    scope 129 {
                                                                                                        debug res => _571;
                                                                                                    }
                                                                                                }
                                                                                                scope 130 {
                                                                                                    debug residual => _589;
                                                                                                    scope 131 {
                                                                                                    }
                                                                                                }
                                                                                                scope 132 {
                                                                                                    debug val => _592;
                                                                                                    scope 133 {
                                                                                                    }
                                                                                                }
                                                                                                scope 134 {
                                                                                                    debug error_code => _604;
                                                                                                    let _611: std::string::String;
                                                                                                    let mut _1103: &[&str; 2];
                                                                                                    scope 135 {
                                                                                                        debug res => _611;
                                                                                                    }
                                                                                                }
                                                                                                scope 136 {
                                                                                                    debug residual => _629;
                                                                                                    scope 137 {
                                                                                                    }
                                                                                                }
                                                                                                scope 138 {
                                                                                                    debug val => _632;
                                                                                                    scope 139 {
                                                                                                    }
                                                                                                }
                                                                                                scope 140 {
                                                                                                    debug error_code => _644;
                                                                                                    let _651: std::string::String;
                                                                                                    let mut _1102: &[&str; 2];
                                                                                                    scope 141 {
                                                                                                        debug res => _651;
                                                                                                    }
                                                                                                }
                                                                                                scope 142 {
                                                                                                    debug residual => _669;
                                                                                                    scope 143 {
                                                                                                    }
                                                                                                }
                                                                                                scope 144 {
                                                                                                    debug val => _672;
                                                                                                    scope 145 {
                                                                                                    }
                                                                                                }
                                                                                                scope 146 {
                                                                                                    debug error_code => _684;
                                                                                                    let _691: std::string::String;
                                                                                                    let mut _1101: &[&str; 2];
                                                                                                    scope 147 {
                                                                                                        debug res => _691;
                                                                                                    }
                                                                                                }
                                                                                                scope 148 {
                                                                                                    debug residual => _709;
                                                                                                    scope 149 {
                                                                                                    }
                                                                                                }
                                                                                                scope 150 {
                                                                                                    debug val => _712;
                                                                                                    scope 151 {
                                                                                                    }
                                                                                                }
                                                                                                scope 152 {
                                                                                                    debug error_code => _724;
                                                                                                    let _731: std::string::String;
                                                                                                    let mut _1100: &[&str; 2];
                                                                                                    scope 153 {
                                                                                                        debug res => _731;
                                                                                                    }
                                                                                                }
                                                                                                scope 154 {
                                                                                                    debug residual => _749;
                                                                                                    scope 155 {
                                                                                                    }
                                                                                                }
                                                                                                scope 156 {
                                                                                                    debug val => _752;
                                                                                                    scope 157 {
                                                                                                    }
                                                                                                }
                                                                                                scope 158 {
                                                                                                    debug error_code => _764;
                                                                                                    let _771: std::string::String;
                                                                                                    let mut _1099: &[&str; 2];
                                                                                                    scope 159 {
                                                                                                        debug res => _771;
                                                                                                    }
                                                                                                }
                                                                                                scope 160 {
                                                                                                    debug residual => _789;
                                                                                                    scope 161 {
                                                                                                    }
                                                                                                }
                                                                                                scope 162 {
                                                                                                    debug val => _792;
                                                                                                    scope 163 {
                                                                                                    }
                                                                                                }
                                                                                                scope 164 {
                                                                                                    debug error_code => _804;
                                                                                                    let _811: std::string::String;
                                                                                                    let mut _1098: &[&str; 2];
                                                                                                    scope 165 {
                                                                                                        debug res => _811;
                                                                                                    }
                                                                                                }
                                                                                                scope 166 {
                                                                                                    debug residual => _829;
                                                                                                    scope 167 {
                                                                                                    }
                                                                                                }
                                                                                                scope 168 {
                                                                                                    debug val => _832;
                                                                                                    scope 169 {
                                                                                                    }
                                                                                                }
                                                                                                scope 170 {
                                                                                                    debug error_code => _844;
                                                                                                    let _851: std::string::String;
                                                                                                    let mut _1097: &[&str; 2];
                                                                                                    scope 171 {
                                                                                                        debug res => _851;
                                                                                                    }
                                                                                                }
                                                                                                scope 172 {
                                                                                                    debug residual => _869;
                                                                                                    scope 173 {
                                                                                                    }
                                                                                                }
                                                                                                scope 174 {
                                                                                                    debug val => _872;
                                                                                                    scope 175 {
                                                                                                    }
                                                                                                }
                                                                                                scope 176 {
                                                                                                    debug iter => _877;
                                                                                                    let _884: usize;
                                                                                                    scope 177 {
                                                                                                        debug i => _884;
                                                                                                        let _900: error::ErrorCode;
                                                                                                        let _955: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _958: ();
                                                                                                        scope 178 {
                                                                                                            debug error_code => _900;
                                                                                                            let _907: std::string::String;
                                                                                                            let _926: std::string::String;
                                                                                                            let mut _1095: &[&str; 3];
                                                                                                            let mut _1096: &[&str; 2];
                                                                                                            scope 179 {
                                                                                                                debug res => _907;
                                                                                                            }
                                                                                                            scope 180 {
                                                                                                                debug res => _926;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 181 {
                                                                                                            debug residual => _955;
                                                                                                            scope 182 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 183 {
                                                                                                            debug val => _958;
                                                                                                            scope 184 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 185 {
                                                                                                debug iter => _965;
                                                                                                let _972: &anchor_lang::prelude::AccountMeta;
                                                                                                scope 186 {
                                                                                                    debug meta => _972;
                                                                                                    let _979: error::ErrorCode;
                                                                                                    let _1004: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _1007: ();
                                                                                                    scope 187 {
                                                                                                        debug error_code => _979;
                                                                                                        let _986: std::string::String;
                                                                                                        let mut _1106: &[&str; 2];
                                                                                                        scope 188 {
                                                                                                            debug res => _986;
                                                                                                        }
                                                                                                    }
                                                                                                    scope 189 {
                                                                                                        debug residual => _1004;
                                                                                                        scope 190 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 191 {
                                                                                                        debug val => _1007;
                                                                                                        scope 192 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 193 {
                                                                                                debug iter => _1013;
                                                                                                let _1020: &anchor_lang::prelude::AccountMeta;
                                                                                                scope 194 {
                                                                                                    debug meta => _1020;
                                                                                                    let _1029: error::ErrorCode;
                                                                                                    let _1054: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _1057: ();
                                                                                                    scope 195 {
                                                                                                        debug error_code => _1029;
                                                                                                        let _1036: std::string::String;
                                                                                                        let mut _1107: &[&str; 2];
                                                                                                        scope 196 {
                                                                                                            debug res => _1036;
                                                                                                        }
                                                                                                    }
                                                                                                    scope 197 {
                                                                                                        debug residual => _1054;
                                                                                                        scope 198 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 199 {
                                                                                                        debug val => _1057;
                                                                                                        scope 200 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 119 {
                                                                                            debug ix => _508;
                                                                                        }
                                                                                        scope 120 {
                                                                                            debug e => _510;
                                                                                        }
                                                                                        scope 201 {
                                                                                            debug error_code => _1064;
                                                                                            let _1071: std::string::String;
                                                                                            let mut _1094: &[&str; 2];
                                                                                            scope 202 {
                                                                                                debug res => _1071;
                                                                                            }
                                                                                        }
                                                                                        scope 203 {
                                                                                            debug residual => _1089;
                                                                                            scope 204 {
                                                                                            }
                                                                                        }
                                                                                        scope 205 {
                                                                                            debug val => _1092;
                                                                                            scope 206 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 106 {
                                                                                debug residual => _456;
                                                                                scope 107 {
                                                                                }
                                                                            }
                                                                            scope 108 {
                                                                                debug val => _459;
                                                                                scope 109 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 101 {
                                                                            debug residual => _446;
                                                                            scope 102 {
                                                                            }
                                                                        }
                                                                        scope 103 {
                                                                            debug val => _449;
                                                                            scope 104 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 84 {
                                                        debug residual => _355;
                                                        scope 85 {
                                                        }
                                                    }
                                                    scope 86 {
                                                        debug val => _358;
                                                        scope 87 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 53 {
                                            debug residual => _191;
                                            scope 54 {
                                            }
                                        }
                                        scope 55 {
                                            debug val => _194;
                                            scope 56 {
                                            }
                                        }
                                    }
                                    scope 35 {
                                        debug residual => _95;
                                        scope 36 {
                                        }
                                    }
                                    scope 37 {
                                        debug val => _98;
                                        scope 38 {
                                        }
                                    }
                                }
                                scope 30 {
                                    debug residual => _84;
                                    scope 31 {
                                    }
                                }
                                scope 32 {
                                    debug val => _87;
                                    scope 33 {
                                    }
                                }
                            }
                            scope 25 {
                                debug residual => _75;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => _78;
                                scope 28 {
                                }
                            }
                        }
                        scope 20 {
                            debug residual => _66;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _69;
                            scope 23 {
                            }
                        }
                    }
                    scope 14 {
                    }
                    scope 15 {
                        debug residual => _57;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _60;
                        scope 18 {
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _1115 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _9 = &((*_1115).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _1116 = deref_copy (*_9);
        _1207 = (((_1116.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _8 = &(*_1207);
        _7 = constraints::fill_not_paused(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb542];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _1154 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        _1117 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _15 = &((*_1117).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb554];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _1194 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb509;
    }

    bb7: {
        _17 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _18) -> [return: bb8, unwind: bb542];
    }

    bb8: {
        StorageDead(_18);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_17 as Continue).0: anchor_lang::prelude::Clock);
        _16 = move _23;
        StorageDead(_23);
        _1156 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_24);
        _24 = (_16.4: i64);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _1118 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _28 = &(*_1118);
        _27 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _28) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _22) -> [return: bb11, unwind: bb553];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _1192 = discriminant(_17);
        StorageDead(_17);
        goto -> bb508;
    }

    bb12: {
        StorageDead(_28);
        _26 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        _25 = &mut _26;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &mut (*_25);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = BTreeSet::<u16>::new() -> [return: bb14, unwind continue];
    }

    bb14: {
        _37 = &_38;
        _36 = &(*_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _45 = SizeOf([u16; 2]);
        _46 = AlignOf([u16; 2]);
        _47 = alloc::alloc::exchange_malloc(move _45, move _46) -> [return: bb15, unwind: bb541];
    }

    bb15: {
        StorageLive(_48);
        _48 = ShallowInitBox(move _47, [u16; 2]);
        StorageLive(_49);
        _49 = _2;
        StorageLive(_50);
        _50 = _3;
        _1208 = (((_48.0: std::ptr::Unique<[u16; 2]>).0: std::ptr::NonNull<[u16; 2]>).0: *const [u16; 2]);
        _1221 = _1208 as *const () (PtrToPtr);
        _1222 = _1221 as usize (Transmute);
        _1223 = AlignOf([u16; 2]);
        _1224 = Sub(_1223, const 1_usize);
        _1225 = BitAnd(_1222, _1224);
        _1226 = Eq(_1225, const 0_usize);
        assert(_1226, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1223, _1222) -> [success: bb555, unwind unreachable];
    }

    bb16: {
        StorageDead(_43);
        _41 = get_writable_spot_market_set_from_many(move _42) -> [return: bb17, unwind: bb541];
    }

    bb17: {
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        StorageLive(_51);
        _51 = (_16.0: u64);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _1119 = deref_copy (*_15);
        _1209 = (((_1119.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _55 = &(*_1209);
        _54 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _55) -> [return: bb18, unwind: bb540];
    }

    bb18: {
        StorageDead(_55);
        _53 = ((*_54).7: state::state::OracleGuardRails);
        _52 = Option::<state::state::OracleGuardRails>::Some(move _53);
        StorageDead(_53);
        _34 = load_maps(move _35, move _36, move _39, move _51, move _52) -> [return: bb19, unwind: bb540];
    }

    bb19: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _34) -> [return: bb20, unwind: bb540];
    }

    bb20: {
        StorageDead(_34);
        _56 = discriminant(_33);
        switchInt(move _56) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_60);
        _60 = move ((_33 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _32 = move _60;
        StorageDead(_60);
        StorageLive(_29);
        _29 = move (_32.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_30);
        _30 = move (_32.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_31);
        _31 = move (_32.2: state::oracle_map::OracleMap<'_>);
        _1160 = discriminant(_33);
        StorageDead(_54);
        drop(_41) -> [return: bb24, unwind: bb536];
    }

    bb22: {
        StorageLive(_57);
        _57 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb23, unwind: bb552];
    }

    bb23: {
        StorageDead(_59);
        StorageDead(_57);
        _1158 = discriminant(_33);
        StorageDead(_54);
        drop(_41) -> [return: bb505, unwind: bb541];
    }

    bb24: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_38) -> [return: bb25, unwind: bb537];
    }

    bb25: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut (*_25);
        _63 = get_token_interface(move _64) -> [return: bb26, unwind: bb537];
    }

    bb26: {
        StorageDead(_64);
        _62 = <std::result::Result<Option<anchor_lang::prelude::Interface<'_, TokenInterface>>, error::ErrorCode> as Try>::branch(move _63) -> [return: bb27, unwind: bb537];
    }

    bb27: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_69);
        _69 = move ((_62 as Continue).0: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>);
        _61 = move _69;
        StorageDead(_69);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &mut (*_25);
        _72 = get_token_mint(move _73) -> [return: bb31, unwind: bb537];
    }

    bb29: {
        StorageLive(_66);
        _66 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb30, unwind: bb537];
    }

    bb30: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_62);
        goto -> bb501;
    }

    bb31: {
        StorageDead(_73);
        _71 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _72) -> [return: bb32, unwind: bb537];
    }

    bb32: {
        StorageDead(_72);
        _74 = discriminant(_71);
        switchInt(move _74) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_78);
        _78 = move ((_71 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _70 = move _78;
        StorageDead(_78);
        StorageDead(_71);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &mut (*_25);
        _81 = get_token_mint(move _82) -> [return: bb36, unwind: bb537];
    }

    bb34: {
        StorageLive(_75);
        _75 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb35, unwind: bb537];
    }

    bb35: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_71);
        goto -> bb500;
    }

    bb36: {
        StorageDead(_82);
        _80 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _81) -> [return: bb37, unwind: bb537];
    }

    bb37: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_87);
        _87 = move ((_80 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _79 = move _87;
        StorageDead(_87);
        StorageDead(_80);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_30;
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_2;
        _92 = &(*_93);
        _90 = SpotMarketMap::<'_>::get_ref_mut(move _91, move _92) -> [return: bb41, unwind: bb537];
    }

    bb39: {
        StorageLive(_84);
        _84 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb40, unwind: bb537];
    }

    bb40: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_80);
        goto -> bb499;
    }

    bb41: {
        StorageDead(_92);
        StorageDead(_91);
        _89 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _90) -> [return: bb42, unwind: bb537];
    }

    bb42: {
        StorageDead(_90);
        _94 = discriminant(_89);
        switchInt(move _94) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_98);
        _98 = move ((_89 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _88 = move _98;
        StorageDead(_98);
        _1164 = discriminant(_89);
        StorageDead(_93);
        StorageDead(_89);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &_70;
        _101 = discriminant((*_100));
        switchInt(move _101) -> [1: bb46, otherwise: bb64];
    }

    bb44: {
        StorageLive(_95);
        _95 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb45, unwind: bb551];
    }

    bb45: {
        StorageDead(_97);
        StorageDead(_95);
        _1162 = discriminant(_89);
        StorageDead(_93);
        StorageDead(_89);
        goto -> bb498;
    }

    bb46: {
        StorageLive(_102);
        _102 = &(((*_100) as Some).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &(*_102);
        _108 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _109) -> [return: bb47, unwind: bb535];
    }

    bb47: {
        _107 = &_108;
        StorageDead(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &_88;
        _111 = <RefMut<'_, SpotMarket> as Deref>::deref(move _112) -> [return: bb48, unwind: bb535];
    }

    bb48: {
        StorageDead(_112);
        _110 = &((*_111).2: anchor_lang::prelude::Pubkey);
        _106 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _107, move _110) -> [return: bb49, unwind: bb535];
    }

    bb49: {
        switchInt(move _106) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_113);
        _113 = ();
        _105 = std::result::Result::<(), error::ErrorCode>::Ok(move _113);
        StorageDead(_113);
        goto -> bb59;
    }

    bb51: {
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_114);
        _114 = error::ErrorCode::InvalidSwap;
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _1114 = const _;
        _125 = &(*_1114);
        _124 = &(*_125);
        _123 = move _124 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &_114;
        _132 = &(*_133);
        _131 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _132) -> [return: bb52, unwind: bb535];
    }

    bb52: {
        StorageDead(_132);
        _130 = [move _131];
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = move _128 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_128);
        _122 = Arguments::<'_>::new_v1(move _123, move _127) -> [return: bb53, unwind: bb535];
    }

    bb53: {
        StorageDead(_127);
        StorageDead(_123);
        _121 = format(move _122) -> [return: bb54, unwind: bb535];
    }

    bb54: {
        StorageDead(_122);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        _120 = move _121;
        StorageDead(_121);
        _119 = &_120;
        _118 = &(*_119);
        _117 = <String as Deref>::deref(move _118) -> [return: bb55, unwind: bb534];
    }

    bb55: {
        _116 = &(*_117);
        StorageDead(_118);
        _115 = solana_program::log::sol_log(move _116) -> [return: bb56, unwind: bb534];
    }

    bb56: {
        StorageDead(_116);
        drop(_120) -> [return: bb57, unwind: bb535];
    }

    bb57: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = const "in_spot_market.mint mismatch";
        _135 = &(*_136);
        _134 = solana_program::log::sol_log(move _135) -> [return: bb58, unwind: bb535];
    }

    bb58: {
        StorageDead(_135);
        StorageDead(_136);
        StorageDead(_134);
        StorageLive(_137);
        _137 = _114;
        _105 = std::result::Result::<(), error::ErrorCode>::Err(move _137);
        StorageDead(_137);
        StorageDead(_114);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_106);
        _104 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _105) -> [return: bb60, unwind: bb535];
    }

    bb60: {
        StorageDead(_105);
        _138 = discriminant(_104);
        switchInt(move _138) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        StorageLive(_142);
        _142 = ((_104 as Continue).0: ());
        _103 = _142;
        StorageDead(_142);
        StorageDead(_104);
        StorageDead(_103);
        _99 = const ();
        StorageDead(_102);
        goto -> bb65;
    }

    bb62: {
        StorageLive(_139);
        _139 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_141);
        _141 = _139;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _141) -> [return: bb63, unwind: bb535];
    }

    bb63: {
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb497;
    }

    bb64: {
        _99 = const ();
        goto -> bb65;
    }

    bb65: {
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_88;
        _148 = <RefMut<'_, SpotMarket> as Deref>::deref(move _149) -> [return: bb66, unwind: bb535];
    }

    bb66: {
        StorageDead(_149);
        _147 = ((*_148).52: u64);
        _146 = Eq(move _147, const 0_u64);
        switchInt(move _146) -> [0: bb71, otherwise: bb67];
    }

    bb67: {
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_88;
        _152 = <RefMut<'_, SpotMarket> as Deref>::deref(move _153) -> [return: bb68, unwind: bb535];
    }

    bb68: {
        StorageDead(_153);
        _151 = ((*_152).51: u64);
        _150 = Eq(move _151, const 0_u64);
        switchInt(move _150) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_154);
        _154 = ();
        _145 = std::result::Result::<(), error::ErrorCode>::Ok(move _154);
        StorageDead(_154);
        goto -> bb80;
    }

    bb70: {
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb72;
    }

    bb71: {
        StorageDead(_148);
        StorageDead(_147);
        goto -> bb72;
    }

    bb72: {
        StorageLive(_155);
        _155 = error::ErrorCode::InvalidSwap;
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _1113 = const _;
        _166 = &(*_1113);
        _165 = &(*_166);
        _164 = move _165 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_155;
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _173) -> [return: bb73, unwind: bb535];
    }

    bb73: {
        StorageDead(_173);
        _171 = [move _172];
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = move _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_169);
        _163 = Arguments::<'_>::new_v1(move _164, move _168) -> [return: bb74, unwind: bb535];
    }

    bb74: {
        StorageDead(_168);
        StorageDead(_164);
        _162 = format(move _163) -> [return: bb75, unwind: bb535];
    }

    bb75: {
        StorageDead(_163);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_166);
        _161 = move _162;
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = <String as Deref>::deref(move _159) -> [return: bb76, unwind: bb533];
    }

    bb76: {
        _157 = &(*_158);
        StorageDead(_159);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb77, unwind: bb533];
    }

    bb77: {
        StorageDead(_157);
        drop(_161) -> [return: bb78, unwind: bb535];
    }

    bb78: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = const "begin_swap ended in invalid state";
        _176 = &(*_177);
        _175 = solana_program::log::sol_log(move _176) -> [return: bb79, unwind: bb535];
    }

    bb79: {
        StorageDead(_176);
        StorageDead(_177);
        StorageDead(_175);
        StorageLive(_178);
        _178 = _155;
        _145 = std::result::Result::<(), error::ErrorCode>::Err(move _178);
        StorageDead(_178);
        StorageDead(_155);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_150);
        StorageDead(_146);
        _144 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _145) -> [return: bb81, unwind: bb535];
    }

    bb81: {
        StorageDead(_145);
        _179 = discriminant(_144);
        switchInt(move _179) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_183);
        _183 = ((_144 as Continue).0: ());
        _143 = _183;
        StorageDead(_183);
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_30;
        StorageLive(_188);
        StorageLive(_189);
        _189 = &_3;
        _188 = &(*_189);
        _186 = SpotMarketMap::<'_>::get_ref_mut(move _187, move _188) -> [return: bb85, unwind: bb535];
    }

    bb83: {
        StorageLive(_180);
        _180 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_182);
        _182 = _180;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _182) -> [return: bb84, unwind: bb535];
    }

    bb84: {
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb497;
    }

    bb85: {
        StorageDead(_188);
        StorageDead(_187);
        _185 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _186) -> [return: bb86, unwind: bb535];
    }

    bb86: {
        StorageDead(_186);
        _190 = discriminant(_185);
        switchInt(move _190) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_194);
        _194 = move ((_185 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _184 = move _194;
        StorageDead(_194);
        _1168 = discriminant(_185);
        StorageDead(_189);
        StorageDead(_185);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &_88;
        _197 = <RefMut<'_, SpotMarket> as Deref>::deref(move _198) -> [return: bb90, unwind: bb532];
    }

    bb88: {
        StorageLive(_191);
        _191 = ((_185 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_193);
        _193 = _191;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _193) -> [return: bb89, unwind: bb550];
    }

    bb89: {
        StorageDead(_193);
        StorageDead(_191);
        _1166 = discriminant(_185);
        StorageDead(_189);
        StorageDead(_185);
        goto -> bb496;
    }

    bb90: {
        _196 = &(*_197);
        StorageDead(_198);
        _195 = SpotMarket::has_transfer_hook(move _196) -> [return: bb91, unwind: bb532];
    }

    bb91: {
        StorageDead(_196);
        StorageDead(_197);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &_184;
        _201 = <RefMut<'_, SpotMarket> as Deref>::deref(move _202) -> [return: bb92, unwind: bb532];
    }

    bb92: {
        _200 = &(*_201);
        StorageDead(_202);
        _199 = SpotMarket::has_transfer_hook(move _200) -> [return: bb93, unwind: bb532];
    }

    bb93: {
        StorageDead(_200);
        StorageDead(_201);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = _195;
        switchInt(move _206) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        StorageLive(_207);
        _207 = _199;
        switchInt(move _207) -> [0: bb95, otherwise: bb96];
    }

    bb95: {
        StorageLive(_208);
        _208 = ();
        _205 = std::result::Result::<(), error::ErrorCode>::Ok(move _208);
        StorageDead(_208);
        goto -> bb104;
    }

    bb96: {
        StorageLive(_209);
        _209 = error::ErrorCode::InvalidSwap;
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _1112 = const _;
        _220 = &(*_1112);
        _219 = &(*_220);
        _218 = move _219 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_219);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &_209;
        _227 = &(*_228);
        _226 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _227) -> [return: bb97, unwind: bb532];
    }

    bb97: {
        StorageDead(_227);
        _225 = [move _226];
        StorageDead(_226);
        _224 = &_225;
        _223 = &(*_224);
        _222 = move _223 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_223);
        _217 = Arguments::<'_>::new_v1(move _218, move _222) -> [return: bb98, unwind: bb532];
    }

    bb98: {
        StorageDead(_222);
        StorageDead(_218);
        _216 = format(move _217) -> [return: bb99, unwind: bb532];
    }

    bb99: {
        StorageDead(_217);
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_220);
        _215 = move _216;
        StorageDead(_216);
        _214 = &_215;
        _213 = &(*_214);
        _212 = <String as Deref>::deref(move _213) -> [return: bb100, unwind: bb531];
    }

    bb100: {
        _211 = &(*_212);
        StorageDead(_213);
        _210 = solana_program::log::sol_log(move _211) -> [return: bb101, unwind: bb531];
    }

    bb101: {
        StorageDead(_211);
        drop(_215) -> [return: bb102, unwind: bb532];
    }

    bb102: {
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_210);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = const "both in and out spot markets cannot both have transfer hooks";
        _230 = &(*_231);
        _229 = solana_program::log::sol_log(move _230) -> [return: bb103, unwind: bb532];
    }

    bb103: {
        StorageDead(_230);
        StorageDead(_231);
        StorageDead(_229);
        StorageLive(_232);
        _232 = _209;
        _205 = std::result::Result::<(), error::ErrorCode>::Err(move _232);
        StorageDead(_232);
        StorageDead(_209);
        goto -> bb104;
    }

    bb104: {
        StorageDead(_207);
        StorageDead(_206);
        _204 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _205) -> [return: bb105, unwind: bb532];
    }

    bb105: {
        StorageDead(_205);
        _233 = discriminant(_204);
        switchInt(move _233) -> [0: bb106, 1: bb107, otherwise: bb4];
    }

    bb106: {
        StorageLive(_237);
        _237 = ((_204 as Continue).0: ());
        _203 = _237;
        StorageDead(_237);
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &_184;
        _243 = <RefMut<'_, SpotMarket> as Deref>::deref(move _244) -> [return: bb109, unwind: bb532];
    }

    bb107: {
        StorageLive(_234);
        _234 = ((_204 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_236);
        _236 = _234;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _236) -> [return: bb108, unwind: bb532];
    }

    bb108: {
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb495;
    }

    bb109: {
        StorageDead(_244);
        _242 = ((*_243).52: u64);
        _241 = Eq(move _242, const 0_u64);
        switchInt(move _241) -> [0: bb114, otherwise: bb110];
    }

    bb110: {
        StorageDead(_243);
        StorageDead(_242);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_184;
        _247 = <RefMut<'_, SpotMarket> as Deref>::deref(move _248) -> [return: bb111, unwind: bb532];
    }

    bb111: {
        StorageDead(_248);
        _246 = ((*_247).51: u64);
        _245 = Eq(move _246, const 0_u64);
        switchInt(move _245) -> [0: bb113, otherwise: bb112];
    }

    bb112: {
        StorageDead(_247);
        StorageDead(_246);
        StorageLive(_249);
        _249 = ();
        _240 = std::result::Result::<(), error::ErrorCode>::Ok(move _249);
        StorageDead(_249);
        goto -> bb123;
    }

    bb113: {
        StorageDead(_247);
        StorageDead(_246);
        goto -> bb115;
    }

    bb114: {
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb115;
    }

    bb115: {
        StorageLive(_250);
        _250 = error::ErrorCode::InvalidSwap;
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _1111 = const _;
        _261 = &(*_1111);
        _260 = &(*_261);
        _259 = move _260 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_260);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = &_250;
        _268 = &(*_269);
        _267 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _268) -> [return: bb116, unwind: bb532];
    }

    bb116: {
        StorageDead(_268);
        _266 = [move _267];
        StorageDead(_267);
        _265 = &_266;
        _264 = &(*_265);
        _263 = move _264 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_264);
        _258 = Arguments::<'_>::new_v1(move _259, move _263) -> [return: bb117, unwind: bb532];
    }

    bb117: {
        StorageDead(_263);
        StorageDead(_259);
        _257 = format(move _258) -> [return: bb118, unwind: bb532];
    }

    bb118: {
        StorageDead(_258);
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_261);
        _256 = move _257;
        StorageDead(_257);
        _255 = &_256;
        _254 = &(*_255);
        _253 = <String as Deref>::deref(move _254) -> [return: bb119, unwind: bb530];
    }

    bb119: {
        _252 = &(*_253);
        StorageDead(_254);
        _251 = solana_program::log::sol_log(move _252) -> [return: bb120, unwind: bb530];
    }

    bb120: {
        StorageDead(_252);
        drop(_256) -> [return: bb121, unwind: bb532];
    }

    bb121: {
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_251);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = const "begin_swap ended in invalid state";
        _271 = &(*_272);
        _270 = solana_program::log::sol_log(move _271) -> [return: bb122, unwind: bb532];
    }

    bb122: {
        StorageDead(_271);
        StorageDead(_272);
        StorageDead(_270);
        StorageLive(_273);
        _273 = _250;
        _240 = std::result::Result::<(), error::ErrorCode>::Err(move _273);
        StorageDead(_273);
        StorageDead(_250);
        goto -> bb123;
    }

    bb123: {
        StorageDead(_245);
        StorageDead(_241);
        _239 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _240) -> [return: bb124, unwind: bb532];
    }

    bb124: {
        StorageDead(_240);
        _274 = discriminant(_239);
        switchInt(move _274) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        StorageLive(_278);
        _278 = ((_239 as Continue).0: ());
        _238 = _278;
        StorageDead(_278);
        StorageDead(_239);
        StorageDead(_238);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = _2;
        StorageLive(_284);
        _284 = _3;
        _282 = Ne(move _283, move _284);
        switchInt(move _282) -> [0: bb129, otherwise: bb128];
    }

    bb126: {
        StorageLive(_275);
        _275 = ((_239 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_277);
        _277 = _275;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _277) -> [return: bb127, unwind: bb532];
    }

    bb127: {
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_239);
        StorageDead(_238);
        goto -> bb495;
    }

    bb128: {
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_285);
        _285 = ();
        _281 = std::result::Result::<(), error::ErrorCode>::Ok(move _285);
        StorageDead(_285);
        goto -> bb137;
    }

    bb129: {
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_286);
        _286 = error::ErrorCode::InvalidSwap;
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _1110 = const _;
        _297 = &(*_1110);
        _296 = &(*_297);
        _295 = move _296 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_296);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &_286;
        _304 = &(*_305);
        _303 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _304) -> [return: bb130, unwind: bb532];
    }

    bb130: {
        StorageDead(_304);
        _302 = [move _303];
        StorageDead(_303);
        _301 = &_302;
        _300 = &(*_301);
        _299 = move _300 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_300);
        _294 = Arguments::<'_>::new_v1(move _295, move _299) -> [return: bb131, unwind: bb532];
    }

    bb131: {
        StorageDead(_299);
        StorageDead(_295);
        _293 = format(move _294) -> [return: bb132, unwind: bb532];
    }

    bb132: {
        StorageDead(_294);
        StorageDead(_305);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_297);
        _292 = move _293;
        StorageDead(_293);
        _291 = &_292;
        _290 = &(*_291);
        _289 = <String as Deref>::deref(move _290) -> [return: bb133, unwind: bb529];
    }

    bb133: {
        _288 = &(*_289);
        StorageDead(_290);
        _287 = solana_program::log::sol_log(move _288) -> [return: bb134, unwind: bb529];
    }

    bb134: {
        StorageDead(_288);
        drop(_292) -> [return: bb135, unwind: bb532];
    }

    bb135: {
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_287);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        _308 = const "in and out market the same";
        _307 = &(*_308);
        _306 = solana_program::log::sol_log(move _307) -> [return: bb136, unwind: bb532];
    }

    bb136: {
        StorageDead(_307);
        StorageDead(_308);
        StorageDead(_306);
        StorageLive(_309);
        _309 = _286;
        _281 = std::result::Result::<(), error::ErrorCode>::Err(move _309);
        StorageDead(_309);
        StorageDead(_286);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_282);
        _280 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _281) -> [return: bb138, unwind: bb532];
    }

    bb138: {
        StorageDead(_281);
        _310 = discriminant(_280);
        switchInt(move _310) -> [0: bb139, 1: bb140, otherwise: bb4];
    }

    bb139: {
        StorageLive(_314);
        _314 = ((_280 as Continue).0: ());
        _279 = _314;
        StorageDead(_314);
        StorageDead(_280);
        StorageDead(_279);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = _4;
        _318 = Ne(move _319, const 0_u64);
        switchInt(move _318) -> [0: bb143, otherwise: bb142];
    }

    bb140: {
        StorageLive(_311);
        _311 = ((_280 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_313);
        _313 = _311;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _313) -> [return: bb141, unwind: bb532];
    }

    bb141: {
        StorageDead(_313);
        StorageDead(_311);
        StorageDead(_280);
        StorageDead(_279);
        goto -> bb495;
    }

    bb142: {
        StorageDead(_319);
        StorageLive(_320);
        _320 = ();
        _317 = std::result::Result::<(), error::ErrorCode>::Ok(move _320);
        StorageDead(_320);
        goto -> bb151;
    }

    bb143: {
        StorageDead(_319);
        StorageLive(_321);
        _321 = error::ErrorCode::InvalidSwap;
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _1109 = const _;
        _332 = &(*_1109);
        _331 = &(*_332);
        _330 = move _331 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_331);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _340 = &_321;
        _339 = &(*_340);
        _338 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _339) -> [return: bb144, unwind: bb532];
    }

    bb144: {
        StorageDead(_339);
        _337 = [move _338];
        StorageDead(_338);
        _336 = &_337;
        _335 = &(*_336);
        _334 = move _335 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_335);
        _329 = Arguments::<'_>::new_v1(move _330, move _334) -> [return: bb145, unwind: bb532];
    }

    bb145: {
        StorageDead(_334);
        StorageDead(_330);
        _328 = format(move _329) -> [return: bb146, unwind: bb532];
    }

    bb146: {
        StorageDead(_329);
        StorageDead(_340);
        StorageDead(_337);
        StorageDead(_336);
        StorageDead(_332);
        _327 = move _328;
        StorageDead(_328);
        _326 = &_327;
        _325 = &(*_326);
        _324 = <String as Deref>::deref(move _325) -> [return: bb147, unwind: bb528];
    }

    bb147: {
        _323 = &(*_324);
        StorageDead(_325);
        _322 = solana_program::log::sol_log(move _323) -> [return: bb148, unwind: bb528];
    }

    bb148: {
        StorageDead(_323);
        drop(_327) -> [return: bb149, unwind: bb532];
    }

    bb149: {
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_322);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = const "amount_out cannot be zero";
        _342 = &(*_343);
        _341 = solana_program::log::sol_log(move _342) -> [return: bb150, unwind: bb532];
    }

    bb150: {
        StorageDead(_342);
        StorageDead(_343);
        StorageDead(_341);
        StorageLive(_344);
        _344 = _321;
        _317 = std::result::Result::<(), error::ErrorCode>::Err(move _344);
        StorageDead(_344);
        StorageDead(_321);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_318);
        _316 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _317) -> [return: bb152, unwind: bb532];
    }

    bb152: {
        StorageDead(_317);
        _345 = discriminant(_316);
        switchInt(move _345) -> [0: bb153, 1: bb154, otherwise: bb4];
    }

    bb153: {
        StorageLive(_349);
        _349 = ((_316 as Continue).0: ());
        _315 = _349;
        StorageDead(_349);
        StorageDead(_316);
        StorageDead(_315);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _1120 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _353 = &((*_1120).6: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _352 = anchor_lang::prelude::AccountLoader::<'_, IfRebalanceConfig>::load_mut(move _353) -> [return: bb156, unwind: bb532];
    }

    bb154: {
        StorageLive(_346);
        _346 = ((_316 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_348);
        _348 = _346;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _348) -> [return: bb155, unwind: bb532];
    }

    bb155: {
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_316);
        StorageDead(_315);
        goto -> bb495;
    }

    bb156: {
        StorageDead(_353);
        _351 = <std::result::Result<RefMut<'_, IfRebalanceConfig>, anchor_lang::error::Error> as Try>::branch(move _352) -> [return: bb157, unwind: bb532];
    }

    bb157: {
        StorageDead(_352);
        _354 = discriminant(_351);
        switchInt(move _354) -> [0: bb158, 1: bb159, otherwise: bb4];
    }

    bb158: {
        StorageLive(_358);
        _358 = move ((_351 as Continue).0: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _350 = move _358;
        StorageDead(_358);
        _1170 = discriminant(_351);
        StorageDead(_351);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = &mut _350;
        _364 = &mut (*_365);
        _363 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _364) -> [return: bb161, unwind: bb527];
    }

    bb159: {
        StorageLive(_355);
        _355 = move ((_351 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_357);
        _357 = move _355;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _357) -> [return: bb160, unwind: bb549];
    }

    bb160: {
        StorageDead(_357);
        StorageDead(_355);
        _1190 = discriminant(_351);
        StorageDead(_351);
        goto -> bb494;
    }

    bb161: {
        _362 = &mut (*_363);
        StorageDead(_364);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _1121 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _1122 = deref_copy ((*_1121).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1210 = (((_1122.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _370 = &(*_1210);
        _369 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _370) -> [return: bb162, unwind: bb527];
    }

    bb162: {
        _368 = &(*_369);
        _367 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _368) -> [return: bb163, unwind: bb527];
    }

    bb163: {
        StorageDead(_370);
        StorageDead(_368);
        _366 = ((*_367).2: u64);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _1123 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _1124 = deref_copy ((*_1123).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1211 = (((_1124.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _375 = &(*_1211);
        _374 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _375) -> [return: bb164, unwind: bb527];
    }

    bb164: {
        _373 = &(*_374);
        _372 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _373) -> [return: bb165, unwind: bb527];
    }

    bb165: {
        StorageDead(_375);
        StorageDead(_373);
        _371 = ((*_372).2: u64);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _379 = &mut _88;
        _378 = &mut (*_379);
        _377 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _378) -> [return: bb166, unwind: bb527];
    }

    bb166: {
        _376 = &mut (*_377);
        StorageDead(_378);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = &mut _184;
        _382 = &mut (*_383);
        _381 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _382) -> [return: bb167, unwind: bb527];
    }

    bb167: {
        _380 = &mut (*_381);
        StorageDead(_382);
        StorageLive(_384);
        _384 = _4;
        StorageLive(_385);
        _385 = _24;
        _361 = handle_if_begin_swap(move _362, move _366, move _371, move _376, move _380, move _384, move _385) -> [return: bb168, unwind: bb527];
    }

    bb168: {
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_380);
        StorageDead(_376);
        StorageDead(_371);
        StorageDead(_366);
        StorageDead(_362);
        _360 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _361) -> [return: bb169, unwind: bb527];
    }

    bb169: {
        StorageDead(_361);
        _386 = discriminant(_360);
        switchInt(move _386) -> [0: bb170, 1: bb171, otherwise: bb4];
    }

    bb170: {
        StorageLive(_390);
        _390 = ((_360 as Continue).0: ());
        _359 = _390;
        StorageDead(_390);
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_377);
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_359);
        StorageLive(_391);
        _1125 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _391 = &((*_1125).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_392);
        _1126 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _392 = &((*_1126).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_393);
        _393 = _4;
        StorageLive(_394);
        StorageLive(_395);
        _395 = &mut _88;
        _394 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _395) -> [return: bb173, unwind: bb527];
    }

    bb171: {
        StorageLive(_387);
        _387 = ((_360 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_389);
        _389 = _387;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _389) -> [return: bb172, unwind: bb527];
    }

    bb172: {
        StorageDead(_389);
        StorageDead(_387);
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_377);
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_359);
        goto -> bb493;
    }

    bb173: {
        StorageDead(_395);
        ((*_394).51: u64) = move _393;
        StorageDead(_393);
        StorageDead(_394);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _1127 = deref_copy (*_392);
        _1212 = (((_1127.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _400 = &(*_1212);
        _399 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _400) -> [return: bb174, unwind: bb527];
    }

    bb174: {
        _398 = &(*_399);
        _397 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _398) -> [return: bb175, unwind: bb527];
    }

    bb175: {
        StorageDead(_400);
        StorageDead(_398);
        _396 = ((*_397).2: u64);
        StorageLive(_401);
        StorageLive(_402);
        _402 = &mut _88;
        _401 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _402) -> [return: bb176, unwind: bb527];
    }

    bb176: {
        StorageDead(_402);
        ((*_401).52: u64) = move _396;
        StorageDead(_396);
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_397);
        StorageLive(_403);
        _1128 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _403 = &((*_1128).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _1129 = deref_copy (*_403);
        _1213 = (((_1129.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _408 = &(*_1213);
        _407 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _408) -> [return: bb177, unwind: bb527];
    }

    bb177: {
        _406 = &(*_407);
        _405 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _406) -> [return: bb178, unwind: bb527];
    }

    bb178: {
        StorageDead(_408);
        StorageDead(_406);
        _404 = ((*_405).2: u64);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &mut _184;
        _409 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _410) -> [return: bb179, unwind: bb527];
    }

    bb179: {
        StorageDead(_410);
        ((*_409).52: u64) = move _404;
        StorageDead(_404);
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_405);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _1130 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _415 = &((*_1130).7: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _414 = &(*_415);
        StorageLive(_416);
        _1131 = deref_copy (*_391);
        _1214 = (((_1131.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _416 = &(*_1214);
        StorageLive(_417);
        StorageLive(_418);
        _1132 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _418 = &((*_1132).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1133 = deref_copy (*_418);
        _1215 = (((_1133.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _417 = &(*_1215);
        StorageLive(_419);
        StorageLive(_420);
        _1134 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _420 = &((*_1134).8: anchor_lang::prelude::AccountInfo<'_>);
        _419 = &(*_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _1135 = deref_copy (*_15);
        _1216 = (((_1135.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _423 = &(*_1216);
        _422 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _423) -> [return: bb180, unwind: bb527];
    }

    bb180: {
        StorageDead(_423);
        _421 = ((*_422).15: u8);
        StorageLive(_424);
        _424 = _4;
        StorageLive(_425);
        StorageLive(_426);
        _426 = &_70;
        _425 = &(*_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &_88;
        _430 = <RefMut<'_, SpotMarket> as Deref>::deref(move _431) -> [return: bb181, unwind: bb527];
    }

    bb181: {
        _429 = &(*_430);
        StorageDead(_431);
        _428 = SpotMarket::has_transfer_hook(move _429) -> [return: bb182, unwind: bb527];
    }

    bb182: {
        switchInt(move _428) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        StorageDead(_430);
        StorageDead(_429);
        StorageLive(_432);
        _432 = &mut (*_25);
        _427 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _432);
        StorageDead(_432);
        goto -> bb185;
    }

    bb184: {
        StorageDead(_430);
        StorageDead(_429);
        _427 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb185;
    }

    bb185: {
        StorageDead(_428);
        _413 = send_from_program_vault(move _414, move _416, move _417, move _419, move _421, move _424, move _425, move _427) -> [return: bb186, unwind: bb527];
    }

    bb186: {
        StorageDead(_427);
        StorageDead(_425);
        StorageDead(_424);
        StorageDead(_421);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_414);
        _412 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _413) -> [return: bb187, unwind: bb527];
    }

    bb187: {
        StorageDead(_413);
        _433 = discriminant(_412);
        switchInt(move _433) -> [0: bb188, 1: bb189, otherwise: bb4];
    }

    bb188: {
        StorageLive(_437);
        _437 = ((_412 as Continue).0: ());
        _411 = _437;
        StorageDead(_437);
        _1172 = discriminant(_412);
        StorageDead(_426);
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_412);
        StorageDead(_411);
        StorageLive(_438);
        StorageLive(_439);
        _1136 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _439 = &((*_1136).9: anchor_lang::prelude::UncheckedAccount<'_>);
        _438 = <anchor_lang::prelude::UncheckedAccount<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _439) -> [return: bb191, unwind: bb527];
    }

    bb189: {
        StorageLive(_434);
        _434 = move ((_412 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_436);
        _436 = move _434;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _436) -> [return: bb190, unwind: bb548];
    }

    bb190: {
        StorageDead(_436);
        StorageDead(_434);
        _1188 = discriminant(_412);
        StorageDead(_426);
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_412);
        StorageDead(_411);
        goto -> bb492;
    }

    bb191: {
        StorageDead(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = &(*_438);
        _443 = load_current_index_checked(move _444) -> [return: bb192, unwind: bb527];
    }

    bb192: {
        StorageDead(_444);
        _442 = <std::result::Result<u16, anchor_lang::prelude::ProgramError> as Try>::branch(move _443) -> [return: bb193, unwind: bb527];
    }

    bb193: {
        StorageDead(_443);
        _445 = discriminant(_442);
        switchInt(move _445) -> [0: bb194, 1: bb195, otherwise: bb4];
    }

    bb194: {
        StorageLive(_449);
        _449 = ((_442 as Continue).0: u16);
        _441 = _449;
        StorageDead(_449);
        _440 = move _441 as usize (IntToInt);
        StorageDead(_441);
        _1174 = discriminant(_442);
        StorageDead(_442);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _453 = _440;
        StorageLive(_454);
        _454 = &(*_438);
        _452 = load_instruction_at_checked(move _453, move _454) -> [return: bb197, unwind: bb527];
    }

    bb195: {
        StorageLive(_446);
        _446 = move ((_442 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_448);
        _448 = move _446;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _448) -> [return: bb196, unwind: bb547];
    }

    bb196: {
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_441);
        _1186 = discriminant(_442);
        StorageDead(_442);
        goto -> bb491;
    }

    bb197: {
        StorageDead(_454);
        StorageDead(_453);
        _451 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _452) -> [return: bb198, unwind: bb527];
    }

    bb198: {
        StorageDead(_452);
        _455 = discriminant(_451);
        switchInt(move _455) -> [0: bb199, 1: bb200, otherwise: bb4];
    }

    bb199: {
        StorageLive(_459);
        _459 = move ((_451 as Continue).0: solana_program::instruction::Instruction);
        _450 = move _459;
        StorageDead(_459);
        _1176 = discriminant(_451);
        StorageDead(_451);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = &(_450.0: anchor_lang::prelude::Pubkey);
        StorageLive(_465);
        _1137 = deref_copy (_1.0: &anchor_lang::prelude::Pubkey);
        _465 = &(*_1137);
        _463 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _464, move _465) -> [return: bb202, unwind: bb526];
    }

    bb200: {
        StorageLive(_456);
        _456 = move ((_451 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_458);
        _458 = move _456;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _458) -> [return: bb201, unwind: bb546];
    }

    bb201: {
        StorageDead(_458);
        StorageDead(_456);
        _1184 = discriminant(_451);
        StorageDead(_451);
        goto -> bb490;
    }

    bb202: {
        switchInt(move _463) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        StorageDead(_465);
        StorageDead(_464);
        StorageLive(_466);
        _466 = ();
        _462 = std::result::Result::<(), error::ErrorCode>::Ok(move _466);
        StorageDead(_466);
        goto -> bb212;
    }

    bb204: {
        StorageDead(_465);
        StorageDead(_464);
        StorageLive(_467);
        _467 = error::ErrorCode::InvalidSwap;
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        _1108 = const _;
        _478 = &(*_1108);
        _477 = &(*_478);
        _476 = move _477 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_477);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &_467;
        _485 = &(*_486);
        _484 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _485) -> [return: bb205, unwind: bb526];
    }

    bb205: {
        StorageDead(_485);
        _483 = [move _484];
        StorageDead(_484);
        _482 = &_483;
        _481 = &(*_482);
        _480 = move _481 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_481);
        _475 = Arguments::<'_>::new_v1(move _476, move _480) -> [return: bb206, unwind: bb526];
    }

    bb206: {
        StorageDead(_480);
        StorageDead(_476);
        _474 = format(move _475) -> [return: bb207, unwind: bb526];
    }

    bb207: {
        StorageDead(_475);
        StorageDead(_486);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_478);
        _473 = move _474;
        StorageDead(_474);
        _472 = &_473;
        _471 = &(*_472);
        _470 = <String as Deref>::deref(move _471) -> [return: bb208, unwind: bb525];
    }

    bb208: {
        _469 = &(*_470);
        StorageDead(_471);
        _468 = solana_program::log::sol_log(move _469) -> [return: bb209, unwind: bb525];
    }

    bb209: {
        StorageDead(_469);
        drop(_473) -> [return: bb210, unwind: bb526];
    }

    bb210: {
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_470);
        StorageDead(_468);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        _489 = const "SwapBegin must be a top-level instruction (cant be cpi)";
        _488 = &(*_489);
        _487 = solana_program::log::sol_log(move _488) -> [return: bb211, unwind: bb526];
    }

    bb211: {
        StorageDead(_488);
        StorageDead(_489);
        StorageDead(_487);
        StorageLive(_490);
        _490 = _467;
        _462 = std::result::Result::<(), error::ErrorCode>::Err(move _490);
        StorageDead(_490);
        StorageDead(_467);
        goto -> bb212;
    }

    bb212: {
        StorageDead(_463);
        _461 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _462) -> [return: bb213, unwind: bb526];
    }

    bb213: {
        StorageDead(_462);
        _491 = discriminant(_461);
        switchInt(move _491) -> [0: bb214, 1: bb215, otherwise: bb4];
    }

    bb214: {
        StorageLive(_495);
        _495 = ((_461 as Continue).0: ());
        _460 = _495;
        StorageDead(_495);
        StorageDead(_461);
        StorageDead(_460);
        StorageLive(_496);
        StorageLive(_497);
        _497 = _440;
        _498 = CheckedAdd(_497, const 1_usize);
        assert(!move (_498.1: bool), "attempt to compute `{} + {}`, which would overflow", move _497, const 1_usize) -> [success: bb217, unwind: bb526];
    }

    bb215: {
        StorageLive(_492);
        _492 = ((_461 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_494);
        _494 = _492;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _494) -> [return: bb216, unwind: bb526];
    }

    bb216: {
        StorageDead(_494);
        StorageDead(_492);
        StorageDead(_461);
        StorageDead(_460);
        goto -> bb489;
    }

    bb217: {
        _496 = move (_498.0: usize);
        StorageDead(_497);
        StorageLive(_499);
        _499 = const false;
        StorageLive(_500);
        goto -> bb218;
    }

    bb218: {
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        _504 = _496;
        StorageLive(_505);
        _505 = &(*_438);
        _503 = load_instruction_at_checked(move _504, move _505) -> [return: bb219, unwind: bb526];
    }

    bb219: {
        StorageDead(_505);
        StorageDead(_504);
        _507 = discriminant(_503);
        switchInt(move _507) -> [0: bb222, 1: bb220, otherwise: bb4];
    }

    bb220: {
        _506 = discriminant(((_503 as Err).0: anchor_lang::prelude::ProgramError));
        switchInt(move _506) -> [1: bb223, otherwise: bb221];
    }

    bb221: {
        StorageLive(_510);
        _510 = move ((_503 as Err).0: anchor_lang::prelude::ProgramError);
        StorageLive(_512);
        StorageLive(_513);
        _513 = move _510;
        _512 = <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into(move _513) -> [return: bb224, unwind: bb545];
    }

    bb222: {
        StorageLive(_508);
        _508 = move ((_503 as Ok).0: solana_program::instruction::Instruction);
        _502 = move _508;
        StorageDead(_508);
        _1178 = discriminant(_503);
        StorageDead(_503);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        _516 = &(_502.0: anchor_lang::prelude::Pubkey);
        StorageLive(_517);
        StorageLive(_518);
        _518 = id() -> [return: bb225, unwind: bb524];
    }

    bb223: {
        _500 = const ();
        _1180 = discriminant(_503);
        switchInt(move _1180) -> [0: bb543, otherwise: bb544];
    }

    bb224: {
        StorageDead(_513);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _512);
        StorageDead(_512);
        StorageDead(_510);
        _1182 = discriminant(_503);
        StorageDead(_503);
        goto -> bb487;
    }

    bb225: {
        _517 = &_518;
        _515 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _516, move _517) -> [return: bb226, unwind: bb524];
    }

    bb226: {
        switchInt(move _515) -> [0: bb412, otherwise: bb227];
    }

    bb227: {
        StorageDead(_518);
        StorageDead(_517);
        StorageDead(_516);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        _522 = _499;
        switchInt(move _522) -> [0: bb228, otherwise: bb229];
    }

    bb228: {
        StorageLive(_523);
        _523 = ();
        _521 = std::result::Result::<(), error::ErrorCode>::Ok(move _523);
        StorageDead(_523);
        goto -> bb237;
    }

    bb229: {
        StorageLive(_524);
        _524 = error::ErrorCode::InvalidSwap;
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        _1105 = const _;
        _535 = &(*_1105);
        _534 = &(*_535);
        _533 = move _534 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_534);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        _543 = &_524;
        _542 = &(*_543);
        _541 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _542) -> [return: bb230, unwind: bb524];
    }

    bb230: {
        StorageDead(_542);
        _540 = [move _541];
        StorageDead(_541);
        _539 = &_540;
        _538 = &(*_539);
        _537 = move _538 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_538);
        _532 = Arguments::<'_>::new_v1(move _533, move _537) -> [return: bb231, unwind: bb524];
    }

    bb231: {
        StorageDead(_537);
        StorageDead(_533);
        _531 = format(move _532) -> [return: bb232, unwind: bb524];
    }

    bb232: {
        StorageDead(_532);
        StorageDead(_543);
        StorageDead(_540);
        StorageDead(_539);
        StorageDead(_535);
        _530 = move _531;
        StorageDead(_531);
        _529 = &_530;
        _528 = &(*_529);
        _527 = <String as Deref>::deref(move _528) -> [return: bb233, unwind: bb523];
    }

    bb233: {
        _526 = &(*_527);
        StorageDead(_528);
        _525 = solana_program::log::sol_log(move _526) -> [return: bb234, unwind: bb523];
    }

    bb234: {
        StorageDead(_526);
        drop(_530) -> [return: bb235, unwind: bb524];
    }

    bb235: {
        StorageDead(_530);
        StorageDead(_529);
        StorageDead(_527);
        StorageDead(_525);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        _546 = const "the transaction must not contain a Drift instruction after FlashLoanEnd";
        _545 = &(*_546);
        _544 = solana_program::log::sol_log(move _545) -> [return: bb236, unwind: bb524];
    }

    bb236: {
        StorageDead(_545);
        StorageDead(_546);
        StorageDead(_544);
        StorageLive(_547);
        _547 = _524;
        _521 = std::result::Result::<(), error::ErrorCode>::Err(move _547);
        StorageDead(_547);
        StorageDead(_524);
        goto -> bb237;
    }

    bb237: {
        StorageDead(_522);
        _520 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _521) -> [return: bb238, unwind: bb524];
    }

    bb238: {
        StorageDead(_521);
        _548 = discriminant(_520);
        switchInt(move _548) -> [0: bb239, 1: bb240, otherwise: bb4];
    }

    bb239: {
        StorageLive(_552);
        _552 = ((_520 as Continue).0: ());
        _519 = _552;
        StorageDead(_552);
        StorageDead(_520);
        StorageDead(_519);
        _499 = const true;
        StorageLive(_553);
        _553 = <EndInsuranceFundSwap as anchor_lang::Discriminator>::discriminator() -> [return: bb242, unwind: bb524];
    }

    bb240: {
        StorageLive(_549);
        _549 = ((_520 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_551);
        _551 = _549;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _551) -> [return: bb241, unwind: bb524];
    }

    bb241: {
        StorageDead(_551);
        StorageDead(_549);
        StorageDead(_520);
        StorageDead(_519);
        goto -> bb486;
    }

    bb242: {
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        _560 = &(_502.2: std::vec::Vec<u8>);
        StorageLive(_561);
        _561 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _559 = <Vec<u8> as Index<std::ops::Range<usize>>>::index(move _560, move _561) -> [return: bb243, unwind: bb524];
    }

    bb243: {
        _558 = &(*_559);
        StorageDead(_561);
        StorageDead(_560);
        StorageLive(_562);
        _562 = &_553;
        _557 = <[u8] as PartialEq<[u8; 8]>>::eq(move _558, move _562) -> [return: bb244, unwind: bb524];
    }

    bb244: {
        switchInt(move _557) -> [0: bb246, otherwise: bb245];
    }

    bb245: {
        StorageDead(_562);
        StorageDead(_559);
        StorageDead(_558);
        StorageLive(_563);
        _563 = ();
        _556 = std::result::Result::<(), error::ErrorCode>::Ok(move _563);
        StorageDead(_563);
        goto -> bb254;
    }

    bb246: {
        StorageDead(_562);
        StorageDead(_559);
        StorageDead(_558);
        StorageLive(_564);
        _564 = error::ErrorCode::InvalidSwap;
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        _1104 = const _;
        _575 = &(*_1104);
        _574 = &(*_575);
        _573 = move _574 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_574);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        _583 = &_564;
        _582 = &(*_583);
        _581 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _582) -> [return: bb247, unwind: bb524];
    }

    bb247: {
        StorageDead(_582);
        _580 = [move _581];
        StorageDead(_581);
        _579 = &_580;
        _578 = &(*_579);
        _577 = move _578 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_578);
        _572 = Arguments::<'_>::new_v1(move _573, move _577) -> [return: bb248, unwind: bb524];
    }

    bb248: {
        StorageDead(_577);
        StorageDead(_573);
        _571 = format(move _572) -> [return: bb249, unwind: bb524];
    }

    bb249: {
        StorageDead(_572);
        StorageDead(_583);
        StorageDead(_580);
        StorageDead(_579);
        StorageDead(_575);
        _570 = move _571;
        StorageDead(_571);
        _569 = &_570;
        _568 = &(*_569);
        _567 = <String as Deref>::deref(move _568) -> [return: bb250, unwind: bb522];
    }

    bb250: {
        _566 = &(*_567);
        StorageDead(_568);
        _565 = solana_program::log::sol_log(move _566) -> [return: bb251, unwind: bb522];
    }

    bb251: {
        StorageDead(_566);
        drop(_570) -> [return: bb252, unwind: bb524];
    }

    bb252: {
        StorageDead(_570);
        StorageDead(_569);
        StorageDead(_567);
        StorageDead(_565);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        _586 = const "last drift ix must be end of swap";
        _585 = &(*_586);
        _584 = solana_program::log::sol_log(move _585) -> [return: bb253, unwind: bb524];
    }

    bb253: {
        StorageDead(_585);
        StorageDead(_586);
        StorageDead(_584);
        StorageLive(_587);
        _587 = _564;
        _556 = std::result::Result::<(), error::ErrorCode>::Err(move _587);
        StorageDead(_587);
        StorageDead(_564);
        goto -> bb254;
    }

    bb254: {
        StorageDead(_557);
        _555 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _556) -> [return: bb255, unwind: bb524];
    }

    bb255: {
        StorageDead(_556);
        _588 = discriminant(_555);
        switchInt(move _588) -> [0: bb256, 1: bb257, otherwise: bb4];
    }

    bb256: {
        StorageLive(_592);
        _592 = ((_555 as Continue).0: ());
        _554 = _592;
        StorageDead(_592);
        StorageDead(_555);
        StorageDead(_554);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        _1138 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _599 = &((*_1138).1: anchor_lang::prelude::Signer<'_>);
        _598 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _599) -> [return: bb259, unwind: bb524];
    }

    bb257: {
        StorageLive(_589);
        _589 = ((_555 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_591);
        _591 = _589;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _591) -> [return: bb258, unwind: bb524];
    }

    bb258: {
        StorageDead(_591);
        StorageDead(_589);
        StorageDead(_555);
        StorageDead(_554);
        goto -> bb485;
    }

    bb259: {
        _597 = &_598;
        StorageDead(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        _602 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _601 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _602, const 1_usize) -> [return: bb260, unwind: bb524];
    }

    bb260: {
        StorageDead(_602);
        _600 = &((*_601).0: anchor_lang::prelude::Pubkey);
        _596 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _597, move _600) -> [return: bb261, unwind: bb524];
    }

    bb261: {
        switchInt(move _596) -> [0: bb263, otherwise: bb262];
    }

    bb262: {
        StorageDead(_601);
        StorageDead(_600);
        StorageDead(_598);
        StorageDead(_597);
        StorageLive(_603);
        _603 = ();
        _595 = std::result::Result::<(), error::ErrorCode>::Ok(move _603);
        StorageDead(_603);
        goto -> bb271;
    }

    bb263: {
        StorageDead(_601);
        StorageDead(_600);
        StorageDead(_598);
        StorageDead(_597);
        StorageLive(_604);
        _604 = error::ErrorCode::InvalidSwap;
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        _1103 = const _;
        _615 = &(*_1103);
        _614 = &(*_615);
        _613 = move _614 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_614);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = &_604;
        _622 = &(*_623);
        _621 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _622) -> [return: bb264, unwind: bb524];
    }

    bb264: {
        StorageDead(_622);
        _620 = [move _621];
        StorageDead(_621);
        _619 = &_620;
        _618 = &(*_619);
        _617 = move _618 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_618);
        _612 = Arguments::<'_>::new_v1(move _613, move _617) -> [return: bb265, unwind: bb524];
    }

    bb265: {
        StorageDead(_617);
        StorageDead(_613);
        _611 = format(move _612) -> [return: bb266, unwind: bb524];
    }

    bb266: {
        StorageDead(_612);
        StorageDead(_623);
        StorageDead(_620);
        StorageDead(_619);
        StorageDead(_615);
        _610 = move _611;
        StorageDead(_611);
        _609 = &_610;
        _608 = &(*_609);
        _607 = <String as Deref>::deref(move _608) -> [return: bb267, unwind: bb521];
    }

    bb267: {
        _606 = &(*_607);
        StorageDead(_608);
        _605 = solana_program::log::sol_log(move _606) -> [return: bb268, unwind: bb521];
    }

    bb268: {
        StorageDead(_606);
        drop(_610) -> [return: bb269, unwind: bb524];
    }

    bb269: {
        StorageDead(_610);
        StorageDead(_609);
        StorageDead(_607);
        StorageDead(_605);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        _626 = const "the authority passed to SwapBegin and End must match";
        _625 = &(*_626);
        _624 = solana_program::log::sol_log(move _625) -> [return: bb270, unwind: bb524];
    }

    bb270: {
        StorageDead(_625);
        StorageDead(_626);
        StorageDead(_624);
        StorageLive(_627);
        _627 = _604;
        _595 = std::result::Result::<(), error::ErrorCode>::Err(move _627);
        StorageDead(_627);
        StorageDead(_604);
        goto -> bb271;
    }

    bb271: {
        StorageDead(_596);
        _594 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _595) -> [return: bb272, unwind: bb524];
    }

    bb272: {
        StorageDead(_595);
        _628 = discriminant(_594);
        switchInt(move _628) -> [0: bb273, 1: bb274, otherwise: bb4];
    }

    bb273: {
        StorageLive(_632);
        _632 = ((_594 as Continue).0: ());
        _593 = _632;
        StorageDead(_632);
        StorageDead(_594);
        StorageDead(_593);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        _1139 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _1140 = deref_copy ((*_1139).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1217 = (((_1140.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _639 = &(*_1217);
        _638 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _639) -> [return: bb276, unwind: bb524];
    }

    bb274: {
        StorageLive(_629);
        _629 = ((_594 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_631);
        _631 = _629;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _631) -> [return: bb275, unwind: bb524];
    }

    bb275: {
        StorageDead(_631);
        StorageDead(_629);
        StorageDead(_594);
        StorageDead(_593);
        goto -> bb485;
    }

    bb276: {
        _637 = &_638;
        StorageDead(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _641 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _642, const 2_usize) -> [return: bb277, unwind: bb524];
    }

    bb277: {
        StorageDead(_642);
        _640 = &((*_641).0: anchor_lang::prelude::Pubkey);
        _636 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _637, move _640) -> [return: bb278, unwind: bb524];
    }

    bb278: {
        switchInt(move _636) -> [0: bb280, otherwise: bb279];
    }

    bb279: {
        StorageDead(_641);
        StorageDead(_640);
        StorageDead(_638);
        StorageDead(_637);
        StorageLive(_643);
        _643 = ();
        _635 = std::result::Result::<(), error::ErrorCode>::Ok(move _643);
        StorageDead(_643);
        goto -> bb288;
    }

    bb280: {
        StorageDead(_641);
        StorageDead(_640);
        StorageDead(_638);
        StorageDead(_637);
        StorageLive(_644);
        _644 = error::ErrorCode::InvalidSwap;
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        _1102 = const _;
        _655 = &(*_1102);
        _654 = &(*_655);
        _653 = move _654 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_654);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        _663 = &_644;
        _662 = &(*_663);
        _661 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _662) -> [return: bb281, unwind: bb524];
    }

    bb281: {
        StorageDead(_662);
        _660 = [move _661];
        StorageDead(_661);
        _659 = &_660;
        _658 = &(*_659);
        _657 = move _658 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_658);
        _652 = Arguments::<'_>::new_v1(move _653, move _657) -> [return: bb282, unwind: bb524];
    }

    bb282: {
        StorageDead(_657);
        StorageDead(_653);
        _651 = format(move _652) -> [return: bb283, unwind: bb524];
    }

    bb283: {
        StorageDead(_652);
        StorageDead(_663);
        StorageDead(_660);
        StorageDead(_659);
        StorageDead(_655);
        _650 = move _651;
        StorageDead(_651);
        _649 = &_650;
        _648 = &(*_649);
        _647 = <String as Deref>::deref(move _648) -> [return: bb284, unwind: bb520];
    }

    bb284: {
        _646 = &(*_647);
        StorageDead(_648);
        _645 = solana_program::log::sol_log(move _646) -> [return: bb285, unwind: bb520];
    }

    bb285: {
        StorageDead(_646);
        drop(_650) -> [return: bb286, unwind: bb524];
    }

    bb286: {
        StorageDead(_650);
        StorageDead(_649);
        StorageDead(_647);
        StorageDead(_645);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        _666 = const "the out_insurance_fund_vault passed to SwapBegin and End must match";
        _665 = &(*_666);
        _664 = solana_program::log::sol_log(move _665) -> [return: bb287, unwind: bb524];
    }

    bb287: {
        StorageDead(_665);
        StorageDead(_666);
        StorageDead(_664);
        StorageLive(_667);
        _667 = _644;
        _635 = std::result::Result::<(), error::ErrorCode>::Err(move _667);
        StorageDead(_667);
        StorageDead(_644);
        goto -> bb288;
    }

    bb288: {
        StorageDead(_636);
        _634 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _635) -> [return: bb289, unwind: bb524];
    }

    bb289: {
        StorageDead(_635);
        _668 = discriminant(_634);
        switchInt(move _668) -> [0: bb290, 1: bb291, otherwise: bb4];
    }

    bb290: {
        StorageLive(_672);
        _672 = ((_634 as Continue).0: ());
        _633 = _672;
        StorageDead(_672);
        StorageDead(_634);
        StorageDead(_633);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        _1141 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _1142 = deref_copy ((*_1141).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1218 = (((_1142.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _679 = &(*_1218);
        _678 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _679) -> [return: bb293, unwind: bb524];
    }

    bb291: {
        StorageLive(_669);
        _669 = ((_634 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_671);
        _671 = _669;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _671) -> [return: bb292, unwind: bb524];
    }

    bb292: {
        StorageDead(_671);
        StorageDead(_669);
        StorageDead(_634);
        StorageDead(_633);
        goto -> bb485;
    }

    bb293: {
        _677 = &_678;
        StorageDead(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        _682 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _681 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _682, const 3_usize) -> [return: bb294, unwind: bb524];
    }

    bb294: {
        StorageDead(_682);
        _680 = &((*_681).0: anchor_lang::prelude::Pubkey);
        _676 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _677, move _680) -> [return: bb295, unwind: bb524];
    }

    bb295: {
        switchInt(move _676) -> [0: bb297, otherwise: bb296];
    }

    bb296: {
        StorageDead(_681);
        StorageDead(_680);
        StorageDead(_678);
        StorageDead(_677);
        StorageLive(_683);
        _683 = ();
        _675 = std::result::Result::<(), error::ErrorCode>::Ok(move _683);
        StorageDead(_683);
        goto -> bb305;
    }

    bb297: {
        StorageDead(_681);
        StorageDead(_680);
        StorageDead(_678);
        StorageDead(_677);
        StorageLive(_684);
        _684 = error::ErrorCode::InvalidSwap;
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        _1101 = const _;
        _695 = &(*_1101);
        _694 = &(*_695);
        _693 = move _694 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_694);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        _703 = &_684;
        _702 = &(*_703);
        _701 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _702) -> [return: bb298, unwind: bb524];
    }

    bb298: {
        StorageDead(_702);
        _700 = [move _701];
        StorageDead(_701);
        _699 = &_700;
        _698 = &(*_699);
        _697 = move _698 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_698);
        _692 = Arguments::<'_>::new_v1(move _693, move _697) -> [return: bb299, unwind: bb524];
    }

    bb299: {
        StorageDead(_697);
        StorageDead(_693);
        _691 = format(move _692) -> [return: bb300, unwind: bb524];
    }

    bb300: {
        StorageDead(_692);
        StorageDead(_703);
        StorageDead(_700);
        StorageDead(_699);
        StorageDead(_695);
        _690 = move _691;
        StorageDead(_691);
        _689 = &_690;
        _688 = &(*_689);
        _687 = <String as Deref>::deref(move _688) -> [return: bb301, unwind: bb519];
    }

    bb301: {
        _686 = &(*_687);
        StorageDead(_688);
        _685 = solana_program::log::sol_log(move _686) -> [return: bb302, unwind: bb519];
    }

    bb302: {
        StorageDead(_686);
        drop(_690) -> [return: bb303, unwind: bb524];
    }

    bb303: {
        StorageDead(_690);
        StorageDead(_689);
        StorageDead(_687);
        StorageDead(_685);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        _706 = const "the in_insurance_fund_vault passed to SwapBegin and End must match";
        _705 = &(*_706);
        _704 = solana_program::log::sol_log(move _705) -> [return: bb304, unwind: bb524];
    }

    bb304: {
        StorageDead(_705);
        StorageDead(_706);
        StorageDead(_704);
        StorageLive(_707);
        _707 = _684;
        _675 = std::result::Result::<(), error::ErrorCode>::Err(move _707);
        StorageDead(_707);
        StorageDead(_684);
        goto -> bb305;
    }

    bb305: {
        StorageDead(_676);
        _674 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _675) -> [return: bb306, unwind: bb524];
    }

    bb306: {
        StorageDead(_675);
        _708 = discriminant(_674);
        switchInt(move _708) -> [0: bb307, 1: bb308, otherwise: bb4];
    }

    bb307: {
        StorageLive(_712);
        _712 = ((_674 as Continue).0: ());
        _673 = _712;
        StorageDead(_712);
        StorageDead(_674);
        StorageDead(_673);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        _1143 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _1144 = deref_copy ((*_1143).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1219 = (((_1144.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _719 = &(*_1219);
        _718 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _719) -> [return: bb310, unwind: bb524];
    }

    bb308: {
        StorageLive(_709);
        _709 = ((_674 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_711);
        _711 = _709;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _711) -> [return: bb309, unwind: bb524];
    }

    bb309: {
        StorageDead(_711);
        StorageDead(_709);
        StorageDead(_674);
        StorageDead(_673);
        goto -> bb485;
    }

    bb310: {
        _717 = &_718;
        StorageDead(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        _722 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _721 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _722, const 4_usize) -> [return: bb311, unwind: bb524];
    }

    bb311: {
        StorageDead(_722);
        _720 = &((*_721).0: anchor_lang::prelude::Pubkey);
        _716 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _717, move _720) -> [return: bb312, unwind: bb524];
    }

    bb312: {
        switchInt(move _716) -> [0: bb314, otherwise: bb313];
    }

    bb313: {
        StorageDead(_721);
        StorageDead(_720);
        StorageDead(_718);
        StorageDead(_717);
        StorageLive(_723);
        _723 = ();
        _715 = std::result::Result::<(), error::ErrorCode>::Ok(move _723);
        StorageDead(_723);
        goto -> bb322;
    }

    bb314: {
        StorageDead(_721);
        StorageDead(_720);
        StorageDead(_718);
        StorageDead(_717);
        StorageLive(_724);
        _724 = error::ErrorCode::InvalidSwap;
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        _1100 = const _;
        _735 = &(*_1100);
        _734 = &(*_735);
        _733 = move _734 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_734);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        _743 = &_724;
        _742 = &(*_743);
        _741 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _742) -> [return: bb315, unwind: bb524];
    }

    bb315: {
        StorageDead(_742);
        _740 = [move _741];
        StorageDead(_741);
        _739 = &_740;
        _738 = &(*_739);
        _737 = move _738 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_738);
        _732 = Arguments::<'_>::new_v1(move _733, move _737) -> [return: bb316, unwind: bb524];
    }

    bb316: {
        StorageDead(_737);
        StorageDead(_733);
        _731 = format(move _732) -> [return: bb317, unwind: bb524];
    }

    bb317: {
        StorageDead(_732);
        StorageDead(_743);
        StorageDead(_740);
        StorageDead(_739);
        StorageDead(_735);
        _730 = move _731;
        StorageDead(_731);
        _729 = &_730;
        _728 = &(*_729);
        _727 = <String as Deref>::deref(move _728) -> [return: bb318, unwind: bb518];
    }

    bb318: {
        _726 = &(*_727);
        StorageDead(_728);
        _725 = solana_program::log::sol_log(move _726) -> [return: bb319, unwind: bb518];
    }

    bb319: {
        StorageDead(_726);
        drop(_730) -> [return: bb320, unwind: bb524];
    }

    bb320: {
        StorageDead(_730);
        StorageDead(_729);
        StorageDead(_727);
        StorageDead(_725);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        _746 = const "the out_token_account passed to SwapBegin and End must match";
        _745 = &(*_746);
        _744 = solana_program::log::sol_log(move _745) -> [return: bb321, unwind: bb524];
    }

    bb321: {
        StorageDead(_745);
        StorageDead(_746);
        StorageDead(_744);
        StorageLive(_747);
        _747 = _724;
        _715 = std::result::Result::<(), error::ErrorCode>::Err(move _747);
        StorageDead(_747);
        StorageDead(_724);
        goto -> bb322;
    }

    bb322: {
        StorageDead(_716);
        _714 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _715) -> [return: bb323, unwind: bb524];
    }

    bb323: {
        StorageDead(_715);
        _748 = discriminant(_714);
        switchInt(move _748) -> [0: bb324, 1: bb325, otherwise: bb4];
    }

    bb324: {
        StorageLive(_752);
        _752 = ((_714 as Continue).0: ());
        _713 = _752;
        StorageDead(_752);
        StorageDead(_714);
        StorageDead(_713);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        _1145 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _1146 = deref_copy ((*_1145).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1220 = (((_1146.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _759 = &(*_1220);
        _758 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _759) -> [return: bb327, unwind: bb524];
    }

    bb325: {
        StorageLive(_749);
        _749 = ((_714 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_751);
        _751 = _749;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _751) -> [return: bb326, unwind: bb524];
    }

    bb326: {
        StorageDead(_751);
        StorageDead(_749);
        StorageDead(_714);
        StorageDead(_713);
        goto -> bb485;
    }

    bb327: {
        _757 = &_758;
        StorageDead(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        _762 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _761 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _762, const 5_usize) -> [return: bb328, unwind: bb524];
    }

    bb328: {
        StorageDead(_762);
        _760 = &((*_761).0: anchor_lang::prelude::Pubkey);
        _756 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _757, move _760) -> [return: bb329, unwind: bb524];
    }

    bb329: {
        switchInt(move _756) -> [0: bb331, otherwise: bb330];
    }

    bb330: {
        StorageDead(_761);
        StorageDead(_760);
        StorageDead(_758);
        StorageDead(_757);
        StorageLive(_763);
        _763 = ();
        _755 = std::result::Result::<(), error::ErrorCode>::Ok(move _763);
        StorageDead(_763);
        goto -> bb339;
    }

    bb331: {
        StorageDead(_761);
        StorageDead(_760);
        StorageDead(_758);
        StorageDead(_757);
        StorageLive(_764);
        _764 = error::ErrorCode::InvalidSwap;
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        _1099 = const _;
        _775 = &(*_1099);
        _774 = &(*_775);
        _773 = move _774 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_774);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        _783 = &_764;
        _782 = &(*_783);
        _781 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _782) -> [return: bb332, unwind: bb524];
    }

    bb332: {
        StorageDead(_782);
        _780 = [move _781];
        StorageDead(_781);
        _779 = &_780;
        _778 = &(*_779);
        _777 = move _778 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_778);
        _772 = Arguments::<'_>::new_v1(move _773, move _777) -> [return: bb333, unwind: bb524];
    }

    bb333: {
        StorageDead(_777);
        StorageDead(_773);
        _771 = format(move _772) -> [return: bb334, unwind: bb524];
    }

    bb334: {
        StorageDead(_772);
        StorageDead(_783);
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_775);
        _770 = move _771;
        StorageDead(_771);
        _769 = &_770;
        _768 = &(*_769);
        _767 = <String as Deref>::deref(move _768) -> [return: bb335, unwind: bb517];
    }

    bb335: {
        _766 = &(*_767);
        StorageDead(_768);
        _765 = solana_program::log::sol_log(move _766) -> [return: bb336, unwind: bb517];
    }

    bb336: {
        StorageDead(_766);
        drop(_770) -> [return: bb337, unwind: bb524];
    }

    bb337: {
        StorageDead(_770);
        StorageDead(_769);
        StorageDead(_767);
        StorageDead(_765);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        _786 = const "the in_token_account passed to SwapBegin and End must match";
        _785 = &(*_786);
        _784 = solana_program::log::sol_log(move _785) -> [return: bb338, unwind: bb524];
    }

    bb338: {
        StorageDead(_785);
        StorageDead(_786);
        StorageDead(_784);
        StorageLive(_787);
        _787 = _764;
        _755 = std::result::Result::<(), error::ErrorCode>::Err(move _787);
        StorageDead(_787);
        StorageDead(_764);
        goto -> bb339;
    }

    bb339: {
        StorageDead(_756);
        _754 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _755) -> [return: bb340, unwind: bb524];
    }

    bb340: {
        StorageDead(_755);
        _788 = discriminant(_754);
        switchInt(move _788) -> [0: bb341, 1: bb342, otherwise: bb4];
    }

    bb341: {
        StorageLive(_792);
        _792 = ((_754 as Continue).0: ());
        _753 = _792;
        StorageDead(_792);
        StorageDead(_754);
        StorageDead(_753);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _1147 = deref_copy (_1.1: &mut instructions::if_staker::InsuranceFundSwap<'_>);
        _799 = &((*_1147).6: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _798 = <anchor_lang::prelude::AccountLoader<'_, IfRebalanceConfig> as anchor_lang::Key>::key(move _799) -> [return: bb344, unwind: bb524];
    }

    bb342: {
        StorageLive(_789);
        _789 = ((_754 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_791);
        _791 = _789;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _791) -> [return: bb343, unwind: bb524];
    }

    bb343: {
        StorageDead(_791);
        StorageDead(_789);
        StorageDead(_754);
        StorageDead(_753);
        goto -> bb485;
    }

    bb344: {
        _797 = &_798;
        StorageDead(_799);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        _802 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _801 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _802, const 6_usize) -> [return: bb345, unwind: bb524];
    }

    bb345: {
        StorageDead(_802);
        _800 = &((*_801).0: anchor_lang::prelude::Pubkey);
        _796 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _797, move _800) -> [return: bb346, unwind: bb524];
    }

    bb346: {
        switchInt(move _796) -> [0: bb348, otherwise: bb347];
    }

    bb347: {
        StorageDead(_801);
        StorageDead(_800);
        StorageDead(_798);
        StorageDead(_797);
        StorageLive(_803);
        _803 = ();
        _795 = std::result::Result::<(), error::ErrorCode>::Ok(move _803);
        StorageDead(_803);
        goto -> bb356;
    }

    bb348: {
        StorageDead(_801);
        StorageDead(_800);
        StorageDead(_798);
        StorageDead(_797);
        StorageLive(_804);
        _804 = error::ErrorCode::InvalidSwap;
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        _1098 = const _;
        _815 = &(*_1098);
        _814 = &(*_815);
        _813 = move _814 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_814);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        _823 = &_804;
        _822 = &(*_823);
        _821 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _822) -> [return: bb349, unwind: bb524];
    }

    bb349: {
        StorageDead(_822);
        _820 = [move _821];
        StorageDead(_821);
        _819 = &_820;
        _818 = &(*_819);
        _817 = move _818 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_818);
        _812 = Arguments::<'_>::new_v1(move _813, move _817) -> [return: bb350, unwind: bb524];
    }

    bb350: {
        StorageDead(_817);
        StorageDead(_813);
        _811 = format(move _812) -> [return: bb351, unwind: bb524];
    }

    bb351: {
        StorageDead(_812);
        StorageDead(_823);
        StorageDead(_820);
        StorageDead(_819);
        StorageDead(_815);
        _810 = move _811;
        StorageDead(_811);
        _809 = &_810;
        _808 = &(*_809);
        _807 = <String as Deref>::deref(move _808) -> [return: bb352, unwind: bb516];
    }

    bb352: {
        _806 = &(*_807);
        StorageDead(_808);
        _805 = solana_program::log::sol_log(move _806) -> [return: bb353, unwind: bb516];
    }

    bb353: {
        StorageDead(_806);
        drop(_810) -> [return: bb354, unwind: bb524];
    }

    bb354: {
        StorageDead(_810);
        StorageDead(_809);
        StorageDead(_807);
        StorageDead(_805);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        _826 = const "the if_rebalance_config passed to SwapBegin and End must match";
        _825 = &(*_826);
        _824 = solana_program::log::sol_log(move _825) -> [return: bb355, unwind: bb524];
    }

    bb355: {
        StorageDead(_825);
        StorageDead(_826);
        StorageDead(_824);
        StorageLive(_827);
        _827 = _804;
        _795 = std::result::Result::<(), error::ErrorCode>::Err(move _827);
        StorageDead(_827);
        StorageDead(_804);
        goto -> bb356;
    }

    bb356: {
        StorageDead(_796);
        _794 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _795) -> [return: bb357, unwind: bb524];
    }

    bb357: {
        StorageDead(_795);
        _828 = discriminant(_794);
        switchInt(move _828) -> [0: bb358, 1: bb359, otherwise: bb4];
    }

    bb358: {
        StorageLive(_832);
        _832 = ((_794 as Continue).0: ());
        _793 = _832;
        StorageDead(_832);
        StorageDead(_794);
        StorageDead(_793);
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        _1148 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _838 = &(*_1148);
        _837 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::len(move _838) -> [return: bb361, unwind: bb524];
    }

    bb359: {
        StorageLive(_829);
        _829 = ((_794 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_831);
        _831 = _829;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _831) -> [return: bb360, unwind: bb524];
    }

    bb360: {
        StorageDead(_831);
        StorageDead(_829);
        StorageDead(_794);
        StorageDead(_793);
        goto -> bb485;
    }

    bb361: {
        StorageDead(_838);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        _841 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _840 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _841) -> [return: bb362, unwind: bb524];
    }

    bb362: {
        StorageDead(_841);
        _842 = CheckedSub(_840, const 10_usize);
        assert(!move (_842.1: bool), "attempt to compute `{} - {}`, which would overflow", move _840, const 10_usize) -> [success: bb363, unwind: bb524];
    }

    bb363: {
        _839 = move (_842.0: usize);
        StorageDead(_840);
        _836 = Eq(move _837, move _839);
        switchInt(move _836) -> [0: bb365, otherwise: bb364];
    }

    bb364: {
        StorageDead(_839);
        StorageDead(_837);
        StorageLive(_843);
        _843 = ();
        _835 = std::result::Result::<(), error::ErrorCode>::Ok(move _843);
        StorageDead(_843);
        goto -> bb373;
    }

    bb365: {
        StorageDead(_839);
        StorageDead(_837);
        StorageLive(_844);
        _844 = error::ErrorCode::InvalidSwap;
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        _1097 = const _;
        _855 = &(*_1097);
        _854 = &(*_855);
        _853 = move _854 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_854);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        _863 = &_844;
        _862 = &(*_863);
        _861 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _862) -> [return: bb366, unwind: bb524];
    }

    bb366: {
        StorageDead(_862);
        _860 = [move _861];
        StorageDead(_861);
        _859 = &_860;
        _858 = &(*_859);
        _857 = move _858 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_858);
        _852 = Arguments::<'_>::new_v1(move _853, move _857) -> [return: bb367, unwind: bb524];
    }

    bb367: {
        StorageDead(_857);
        StorageDead(_853);
        _851 = format(move _852) -> [return: bb368, unwind: bb524];
    }

    bb368: {
        StorageDead(_852);
        StorageDead(_863);
        StorageDead(_860);
        StorageDead(_859);
        StorageDead(_855);
        _850 = move _851;
        StorageDead(_851);
        _849 = &_850;
        _848 = &(*_849);
        _847 = <String as Deref>::deref(move _848) -> [return: bb369, unwind: bb515];
    }

    bb369: {
        _846 = &(*_847);
        StorageDead(_848);
        _845 = solana_program::log::sol_log(move _846) -> [return: bb370, unwind: bb515];
    }

    bb370: {
        StorageDead(_846);
        drop(_850) -> [return: bb371, unwind: bb524];
    }

    bb371: {
        StorageDead(_850);
        StorageDead(_849);
        StorageDead(_847);
        StorageDead(_845);
        StorageLive(_864);
        StorageLive(_865);
        StorageLive(_866);
        _866 = const "begin and end ix must have the same number of accounts";
        _865 = &(*_866);
        _864 = solana_program::log::sol_log(move _865) -> [return: bb372, unwind: bb524];
    }

    bb372: {
        StorageDead(_865);
        StorageDead(_866);
        StorageDead(_864);
        StorageLive(_867);
        _867 = _844;
        _835 = std::result::Result::<(), error::ErrorCode>::Err(move _867);
        StorageDead(_867);
        StorageDead(_844);
        goto -> bb373;
    }

    bb373: {
        StorageDead(_836);
        _834 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _835) -> [return: bb374, unwind: bb524];
    }

    bb374: {
        StorageDead(_835);
        _868 = discriminant(_834);
        switchInt(move _868) -> [0: bb375, 1: bb376, otherwise: bb4];
    }

    bb375: {
        StorageLive(_872);
        _872 = ((_834 as Continue).0: ());
        _833 = _872;
        StorageDead(_872);
        StorageDead(_834);
        StorageDead(_833);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        _876 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _875 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _876) -> [return: bb378, unwind: bb524];
    }

    bb376: {
        StorageLive(_869);
        _869 = ((_834 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_871);
        _871 = _869;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _871) -> [return: bb377, unwind: bb524];
    }

    bb377: {
        StorageDead(_871);
        StorageDead(_869);
        StorageDead(_834);
        StorageDead(_833);
        goto -> bb485;
    }

    bb378: {
        StorageDead(_876);
        _874 = std::ops::Range::<usize> { start: const 10_usize, end: move _875 };
        StorageDead(_875);
        _873 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _874) -> [return: bb379, unwind: bb524];
    }

    bb379: {
        StorageDead(_874);
        StorageLive(_877);
        _877 = move _873;
        goto -> bb380;
    }

    bb380: {
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        _881 = &mut _877;
        _880 = &mut (*_881);
        _879 = <std::ops::Range<usize> as Iterator>::next(move _880) -> [return: bb381, unwind: bb524];
    }

    bb381: {
        StorageDead(_880);
        _882 = discriminant(_879);
        switchInt(move _882) -> [0: bb383, 1: bb382, otherwise: bb4];
    }

    bb382: {
        StorageLive(_884);
        _884 = ((_879 as Some).0: usize);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        StorageLive(_891);
        _891 = _884;
        _892 = CheckedSub(_891, const 10_usize);
        assert(!move (_892.1: bool), "attempt to compute `{} - {}`, which would overflow", move _891, const 10_usize) -> [success: bb384, unwind: bb524];
    }

    bb383: {
        _514 = const ();
        StorageDead(_881);
        StorageDead(_879);
        StorageDead(_878);
        StorageDead(_877);
        StorageDead(_873);
        StorageDead(_553);
        goto -> bb460;
    }

    bb384: {
        _890 = move (_892.0: usize);
        StorageDead(_891);
        _1149 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _893 = Len((*_1149));
        _894 = Lt(_890, _893);
        assert(move _894, "index out of bounds: the length is {} but the index is {}", move _893, _890) -> [success: bb385, unwind: bb524];
    }

    bb385: {
        _1150 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1151 = deref_copy ((*_1150)[_890].0: &anchor_lang::prelude::Pubkey);
        _889 = &(*_1151);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        _897 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        StorageLive(_898);
        _898 = _884;
        _896 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _897, move _898) -> [return: bb386, unwind: bb524];
    }

    bb386: {
        StorageDead(_898);
        StorageDead(_897);
        _895 = &((*_896).0: anchor_lang::prelude::Pubkey);
        _888 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _889, move _895) -> [return: bb387, unwind: bb524];
    }

    bb387: {
        switchInt(move _888) -> [0: bb389, otherwise: bb388];
    }

    bb388: {
        StorageDead(_896);
        StorageDead(_895);
        StorageDead(_890);
        StorageDead(_889);
        StorageLive(_899);
        _899 = ();
        _887 = std::result::Result::<(), error::ErrorCode>::Ok(move _899);
        StorageDead(_899);
        goto -> bb407;
    }

    bb389: {
        StorageDead(_896);
        StorageDead(_895);
        StorageDead(_890);
        StorageDead(_889);
        StorageLive(_900);
        _900 = error::ErrorCode::InvalidSwap;
        StorageLive(_901);
        StorageLive(_902);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        _1096 = const _;
        _911 = &(*_1096);
        _910 = &(*_911);
        _909 = move _910 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_910);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        _919 = &_900;
        _918 = &(*_919);
        _917 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _918) -> [return: bb390, unwind: bb524];
    }

    bb390: {
        StorageDead(_918);
        _916 = [move _917];
        StorageDead(_917);
        _915 = &_916;
        _914 = &(*_915);
        _913 = move _914 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_914);
        _908 = Arguments::<'_>::new_v1(move _909, move _913) -> [return: bb391, unwind: bb524];
    }

    bb391: {
        StorageDead(_913);
        StorageDead(_909);
        _907 = format(move _908) -> [return: bb392, unwind: bb524];
    }

    bb392: {
        StorageDead(_908);
        StorageDead(_919);
        StorageDead(_916);
        StorageDead(_915);
        StorageDead(_911);
        _906 = move _907;
        StorageDead(_907);
        _905 = &_906;
        _904 = &(*_905);
        _903 = <String as Deref>::deref(move _904) -> [return: bb393, unwind: bb514];
    }

    bb393: {
        _902 = &(*_903);
        StorageDead(_904);
        _901 = solana_program::log::sol_log(move _902) -> [return: bb394, unwind: bb514];
    }

    bb394: {
        StorageDead(_902);
        drop(_906) -> [return: bb395, unwind: bb524];
    }

    bb395: {
        StorageDead(_906);
        StorageDead(_905);
        StorageDead(_903);
        StorageDead(_901);
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        _1095 = const _;
        _930 = &(*_1095);
        _929 = &(*_930);
        _928 = move _929 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_929);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        StorageLive(_936);
        StorageLive(_937);
        StorageLive(_938);
        _938 = &_884;
        _937 = &(*_938);
        _936 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _937) -> [return: bb396, unwind: bb524];
    }

    bb396: {
        StorageDead(_937);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        _943 = _884;
        _944 = CheckedSub(_943, const 10_usize);
        assert(!move (_944.1: bool), "attempt to compute `{} - {}`, which would overflow", move _943, const 10_usize) -> [success: bb397, unwind: bb524];
    }

    bb397: {
        _942 = move (_944.0: usize);
        StorageDead(_943);
        _1152 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _945 = Len((*_1152));
        _946 = Lt(_942, _945);
        assert(move _946, "index out of bounds: the length is {} but the index is {}", move _945, _942) -> [success: bb398, unwind: bb524];
    }

    bb398: {
        _1153 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _941 = &((*_1153)[_942].0: &anchor_lang::prelude::Pubkey);
        _940 = &(*_941);
        _939 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _940) -> [return: bb399, unwind: bb524];
    }

    bb399: {
        StorageDead(_940);
        StorageLive(_947);
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        _951 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        StorageLive(_952);
        _952 = _884;
        _950 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _951, move _952) -> [return: bb400, unwind: bb524];
    }

    bb400: {
        StorageDead(_952);
        StorageDead(_951);
        _949 = &((*_950).0: anchor_lang::prelude::Pubkey);
        _948 = &(*_949);
        _947 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _948) -> [return: bb401, unwind: bb524];
    }

    bb401: {
        StorageDead(_948);
        _935 = [move _936, move _939, move _947];
        StorageDead(_947);
        StorageDead(_939);
        StorageDead(_936);
        _934 = &_935;
        _933 = &(*_934);
        _932 = move _933 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_933);
        _927 = Arguments::<'_>::new_v1(move _928, move _932) -> [return: bb402, unwind: bb524];
    }

    bb402: {
        StorageDead(_932);
        StorageDead(_928);
        _926 = format(move _927) -> [return: bb403, unwind: bb524];
    }

    bb403: {
        StorageDead(_927);
        StorageDead(_950);
        StorageDead(_949);
        StorageDead(_942);
        StorageDead(_941);
        StorageDead(_938);
        StorageDead(_935);
        StorageDead(_934);
        StorageDead(_930);
        _925 = move _926;
        StorageDead(_926);
        _924 = &_925;
        _923 = &(*_924);
        _922 = <String as Deref>::deref(move _923) -> [return: bb404, unwind: bb513];
    }

    bb404: {
        _921 = &(*_922);
        StorageDead(_923);
        _920 = solana_program::log::sol_log(move _921) -> [return: bb405, unwind: bb513];
    }

    bb405: {
        StorageDead(_921);
        drop(_925) -> [return: bb406, unwind: bb524];
    }

    bb406: {
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_922);
        StorageDead(_920);
        StorageLive(_953);
        _953 = _900;
        _887 = std::result::Result::<(), error::ErrorCode>::Err(move _953);
        StorageDead(_953);
        StorageDead(_900);
        goto -> bb407;
    }

    bb407: {
        StorageDead(_888);
        _886 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _887) -> [return: bb408, unwind: bb524];
    }

    bb408: {
        StorageDead(_887);
        _954 = discriminant(_886);
        switchInt(move _954) -> [0: bb409, 1: bb410, otherwise: bb4];
    }

    bb409: {
        StorageLive(_958);
        _958 = ((_886 as Continue).0: ());
        _885 = _958;
        StorageDead(_958);
        StorageDead(_886);
        StorageDead(_885);
        _878 = const ();
        StorageDead(_884);
        StorageDead(_881);
        StorageDead(_879);
        StorageDead(_878);
        _501 = const ();
        goto -> bb380;
    }

    bb410: {
        StorageLive(_955);
        _955 = ((_886 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_957);
        _957 = _955;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _957) -> [return: bb411, unwind: bb524];
    }

    bb411: {
        StorageDead(_957);
        StorageDead(_955);
        StorageDead(_886);
        StorageDead(_885);
        StorageDead(_884);
        StorageDead(_881);
        StorageDead(_879);
        StorageDead(_878);
        StorageDead(_877);
        StorageDead(_873);
        goto -> bb485;
    }

    bb412: {
        StorageDead(_518);
        StorageDead(_517);
        StorageDead(_516);
        StorageLive(_959);
        _959 = _499;
        switchInt(move _959) -> [0: bb435, otherwise: bb413];
    }

    bb413: {
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        StorageLive(_964);
        _964 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _963 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _964) -> [return: bb414, unwind: bb524];
    }

    bb414: {
        _962 = &(*_963);
        StorageDead(_964);
        _961 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::iter(move _962) -> [return: bb415, unwind: bb524];
    }

    bb415: {
        StorageDead(_962);
        _960 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as IntoIterator>::into_iter(move _961) -> [return: bb416, unwind: bb524];
    }

    bb416: {
        StorageDead(_961);
        StorageLive(_965);
        _965 = move _960;
        goto -> bb417;
    }

    bb417: {
        StorageLive(_966);
        StorageLive(_967);
        StorageLive(_968);
        StorageLive(_969);
        _969 = &mut _965;
        _968 = &mut (*_969);
        _967 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as Iterator>::next(move _968) -> [return: bb418, unwind: bb524];
    }

    bb418: {
        StorageDead(_968);
        _970 = discriminant(_967);
        switchInt(move _970) -> [0: bb420, 1: bb419, otherwise: bb4];
    }

    bb419: {
        StorageLive(_972);
        _972 = ((_967 as Some).0: &anchor_lang::prelude::AccountMeta);
        StorageLive(_973);
        StorageLive(_974);
        StorageLive(_975);
        StorageLive(_976);
        StorageLive(_977);
        _977 = ((*_972).2: bool);
        _976 = Eq(move _977, const false);
        switchInt(move _976) -> [0: bb422, otherwise: bb421];
    }

    bb420: {
        _514 = const ();
        StorageDead(_969);
        StorageDead(_967);
        StorageDead(_966);
        StorageDead(_965);
        StorageDead(_963);
        StorageDead(_960);
        goto -> bb459;
    }

    bb421: {
        StorageDead(_977);
        StorageLive(_978);
        _978 = ();
        _975 = std::result::Result::<(), error::ErrorCode>::Ok(move _978);
        StorageDead(_978);
        goto -> bb430;
    }

    bb422: {
        StorageDead(_977);
        StorageLive(_979);
        _979 = error::ErrorCode::InvalidSwap;
        StorageLive(_980);
        StorageLive(_981);
        StorageLive(_982);
        StorageLive(_983);
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        _1106 = const _;
        _990 = &(*_1106);
        _989 = &(*_990);
        _988 = move _989 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_989);
        StorageLive(_992);
        StorageLive(_993);
        StorageLive(_994);
        StorageLive(_995);
        StorageLive(_996);
        StorageLive(_997);
        StorageLive(_998);
        _998 = &_979;
        _997 = &(*_998);
        _996 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _997) -> [return: bb423, unwind: bb524];
    }

    bb423: {
        StorageDead(_997);
        _995 = [move _996];
        StorageDead(_996);
        _994 = &_995;
        _993 = &(*_994);
        _992 = move _993 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_993);
        _987 = Arguments::<'_>::new_v1(move _988, move _992) -> [return: bb424, unwind: bb524];
    }

    bb424: {
        StorageDead(_992);
        StorageDead(_988);
        _986 = format(move _987) -> [return: bb425, unwind: bb524];
    }

    bb425: {
        StorageDead(_987);
        StorageDead(_998);
        StorageDead(_995);
        StorageDead(_994);
        StorageDead(_990);
        _985 = move _986;
        StorageDead(_986);
        _984 = &_985;
        _983 = &(*_984);
        _982 = <String as Deref>::deref(move _983) -> [return: bb426, unwind: bb512];
    }

    bb426: {
        _981 = &(*_982);
        StorageDead(_983);
        _980 = solana_program::log::sol_log(move _981) -> [return: bb427, unwind: bb512];
    }

    bb427: {
        StorageDead(_981);
        drop(_985) -> [return: bb428, unwind: bb524];
    }

    bb428: {
        StorageDead(_985);
        StorageDead(_984);
        StorageDead(_982);
        StorageDead(_980);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        _1001 = const "instructions after swap end must not have writable accounts";
        _1000 = &(*_1001);
        _999 = solana_program::log::sol_log(move _1000) -> [return: bb429, unwind: bb524];
    }

    bb429: {
        StorageDead(_1000);
        StorageDead(_1001);
        StorageDead(_999);
        StorageLive(_1002);
        _1002 = _979;
        _975 = std::result::Result::<(), error::ErrorCode>::Err(move _1002);
        StorageDead(_1002);
        StorageDead(_979);
        goto -> bb430;
    }

    bb430: {
        StorageDead(_976);
        _974 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _975) -> [return: bb431, unwind: bb524];
    }

    bb431: {
        StorageDead(_975);
        _1003 = discriminant(_974);
        switchInt(move _1003) -> [0: bb432, 1: bb433, otherwise: bb4];
    }

    bb432: {
        StorageLive(_1007);
        _1007 = ((_974 as Continue).0: ());
        _973 = _1007;
        StorageDead(_1007);
        StorageDead(_974);
        StorageDead(_973);
        _966 = const ();
        StorageDead(_972);
        StorageDead(_969);
        StorageDead(_967);
        StorageDead(_966);
        _501 = const ();
        goto -> bb417;
    }

    bb433: {
        StorageLive(_1004);
        _1004 = ((_974 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1006);
        _1006 = _1004;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1006) -> [return: bb434, unwind: bb524];
    }

    bb434: {
        StorageDead(_1006);
        StorageDead(_1004);
        StorageDead(_974);
        StorageDead(_973);
        StorageDead(_972);
        StorageDead(_969);
        StorageDead(_967);
        StorageDead(_966);
        StorageDead(_965);
        StorageDead(_963);
        StorageDead(_960);
        goto -> bb484;
    }

    bb435: {
        StorageLive(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        StorageLive(_1011);
        StorageLive(_1012);
        _1012 = &(_502.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _1011 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _1012) -> [return: bb436, unwind: bb524];
    }

    bb436: {
        _1010 = &(*_1011);
        StorageDead(_1012);
        _1009 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::iter(move _1010) -> [return: bb437, unwind: bb524];
    }

    bb437: {
        StorageDead(_1010);
        _1008 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as IntoIterator>::into_iter(move _1009) -> [return: bb438, unwind: bb524];
    }

    bb438: {
        StorageDead(_1009);
        StorageLive(_1013);
        _1013 = move _1008;
        goto -> bb439;
    }

    bb439: {
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        StorageLive(_1017);
        _1017 = &mut _1013;
        _1016 = &mut (*_1017);
        _1015 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as Iterator>::next(move _1016) -> [return: bb440, unwind: bb524];
    }

    bb440: {
        StorageDead(_1016);
        _1018 = discriminant(_1015);
        switchInt(move _1018) -> [0: bb442, 1: bb441, otherwise: bb4];
    }

    bb441: {
        StorageLive(_1020);
        _1020 = ((_1015 as Some).0: &anchor_lang::prelude::AccountMeta);
        StorageLive(_1021);
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        _1025 = &((*_1020).0: anchor_lang::prelude::Pubkey);
        StorageLive(_1026);
        StorageLive(_1027);
        _1027 = id() -> [return: bb443, unwind: bb524];
    }

    bb442: {
        _514 = const ();
        StorageDead(_1017);
        StorageDead(_1015);
        StorageDead(_1014);
        StorageDead(_1013);
        StorageDead(_1011);
        StorageDead(_1008);
        goto -> bb459;
    }

    bb443: {
        _1026 = &_1027;
        _1024 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1025, move _1026) -> [return: bb444, unwind: bb524];
    }

    bb444: {
        switchInt(move _1024) -> [0: bb446, otherwise: bb445];
    }

    bb445: {
        StorageDead(_1027);
        StorageDead(_1026);
        StorageDead(_1025);
        StorageLive(_1028);
        _1028 = ();
        _1023 = std::result::Result::<(), error::ErrorCode>::Ok(move _1028);
        StorageDead(_1028);
        goto -> bb454;
    }

    bb446: {
        StorageDead(_1027);
        StorageDead(_1026);
        StorageDead(_1025);
        StorageLive(_1029);
        _1029 = error::ErrorCode::InvalidSwap;
        StorageLive(_1030);
        StorageLive(_1031);
        StorageLive(_1032);
        StorageLive(_1033);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        StorageLive(_1038);
        StorageLive(_1039);
        StorageLive(_1040);
        _1107 = const _;
        _1040 = &(*_1107);
        _1039 = &(*_1040);
        _1038 = move _1039 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1039);
        StorageLive(_1042);
        StorageLive(_1043);
        StorageLive(_1044);
        StorageLive(_1045);
        StorageLive(_1046);
        StorageLive(_1047);
        StorageLive(_1048);
        _1048 = &_1029;
        _1047 = &(*_1048);
        _1046 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1047) -> [return: bb447, unwind: bb524];
    }

    bb447: {
        StorageDead(_1047);
        _1045 = [move _1046];
        StorageDead(_1046);
        _1044 = &_1045;
        _1043 = &(*_1044);
        _1042 = move _1043 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1043);
        _1037 = Arguments::<'_>::new_v1(move _1038, move _1042) -> [return: bb448, unwind: bb524];
    }

    bb448: {
        StorageDead(_1042);
        StorageDead(_1038);
        _1036 = format(move _1037) -> [return: bb449, unwind: bb524];
    }

    bb449: {
        StorageDead(_1037);
        StorageDead(_1048);
        StorageDead(_1045);
        StorageDead(_1044);
        StorageDead(_1040);
        _1035 = move _1036;
        StorageDead(_1036);
        _1034 = &_1035;
        _1033 = &(*_1034);
        _1032 = <String as Deref>::deref(move _1033) -> [return: bb450, unwind: bb511];
    }

    bb450: {
        _1031 = &(*_1032);
        StorageDead(_1033);
        _1030 = solana_program::log::sol_log(move _1031) -> [return: bb451, unwind: bb511];
    }

    bb451: {
        StorageDead(_1031);
        drop(_1035) -> [return: bb452, unwind: bb524];
    }

    bb452: {
        StorageDead(_1035);
        StorageDead(_1034);
        StorageDead(_1032);
        StorageDead(_1030);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        _1051 = const "instructions between begin and end must not be drift instructions";
        _1050 = &(*_1051);
        _1049 = solana_program::log::sol_log(move _1050) -> [return: bb453, unwind: bb524];
    }

    bb453: {
        StorageDead(_1050);
        StorageDead(_1051);
        StorageDead(_1049);
        StorageLive(_1052);
        _1052 = _1029;
        _1023 = std::result::Result::<(), error::ErrorCode>::Err(move _1052);
        StorageDead(_1052);
        StorageDead(_1029);
        goto -> bb454;
    }

    bb454: {
        StorageDead(_1024);
        _1022 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1023) -> [return: bb455, unwind: bb524];
    }

    bb455: {
        StorageDead(_1023);
        _1053 = discriminant(_1022);
        switchInt(move _1053) -> [0: bb456, 1: bb457, otherwise: bb4];
    }

    bb456: {
        StorageLive(_1057);
        _1057 = ((_1022 as Continue).0: ());
        _1021 = _1057;
        StorageDead(_1057);
        StorageDead(_1022);
        StorageDead(_1021);
        _1014 = const ();
        StorageDead(_1020);
        StorageDead(_1017);
        StorageDead(_1015);
        StorageDead(_1014);
        _501 = const ();
        goto -> bb439;
    }

    bb457: {
        StorageLive(_1054);
        _1054 = ((_1022 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1056);
        _1056 = _1054;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1056) -> [return: bb458, unwind: bb524];
    }

    bb458: {
        StorageDead(_1056);
        StorageDead(_1054);
        StorageDead(_1022);
        StorageDead(_1021);
        StorageDead(_1020);
        StorageDead(_1017);
        StorageDead(_1015);
        StorageDead(_1014);
        StorageDead(_1013);
        StorageDead(_1011);
        StorageDead(_1008);
        goto -> bb484;
    }

    bb459: {
        StorageDead(_959);
        goto -> bb460;
    }

    bb460: {
        StorageDead(_515);
        StorageDead(_514);
        _1058 = CheckedAdd(_496, const 1_usize);
        assert(!move (_1058.1: bool), "attempt to compute `{} + {}`, which would overflow", _496, const 1_usize) -> [success: bb461, unwind: bb524];
    }

    bb461: {
        _496 = move (_1058.0: usize);
        _501 = const ();
        drop(_502) -> [return: bb462, unwind: bb526];
    }

    bb462: {
        StorageDead(_502);
        goto -> bb218;
    }

    bb463: {
        StorageLive(_1063);
        _1063 = ();
        _1061 = std::result::Result::<(), error::ErrorCode>::Ok(move _1063);
        StorageDead(_1063);
        goto -> bb472;
    }

    bb464: {
        StorageLive(_1064);
        _1064 = error::ErrorCode::InvalidSwap;
        StorageLive(_1065);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        StorageLive(_1075);
        _1094 = const _;
        _1075 = &(*_1094);
        _1074 = &(*_1075);
        _1073 = move _1074 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1074);
        StorageLive(_1077);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        _1083 = &_1064;
        _1082 = &(*_1083);
        _1081 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1082) -> [return: bb465, unwind: bb526];
    }

    bb465: {
        StorageDead(_1082);
        _1080 = [move _1081];
        StorageDead(_1081);
        _1079 = &_1080;
        _1078 = &(*_1079);
        _1077 = move _1078 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1078);
        _1072 = Arguments::<'_>::new_v1(move _1073, move _1077) -> [return: bb466, unwind: bb526];
    }

    bb466: {
        StorageDead(_1077);
        StorageDead(_1073);
        _1071 = format(move _1072) -> [return: bb467, unwind: bb526];
    }

    bb467: {
        StorageDead(_1072);
        StorageDead(_1083);
        StorageDead(_1080);
        StorageDead(_1079);
        StorageDead(_1075);
        _1070 = move _1071;
        StorageDead(_1071);
        _1069 = &_1070;
        _1068 = &(*_1069);
        _1067 = <String as Deref>::deref(move _1068) -> [return: bb468, unwind: bb510];
    }

    bb468: {
        _1066 = &(*_1067);
        StorageDead(_1068);
        _1065 = solana_program::log::sol_log(move _1066) -> [return: bb469, unwind: bb510];
    }

    bb469: {
        StorageDead(_1066);
        drop(_1070) -> [return: bb470, unwind: bb526];
    }

    bb470: {
        StorageDead(_1070);
        StorageDead(_1069);
        StorageDead(_1067);
        StorageDead(_1065);
        StorageLive(_1084);
        StorageLive(_1085);
        StorageLive(_1086);
        _1086 = const "found no SwapEnd instruction in transaction";
        _1085 = &(*_1086);
        _1084 = solana_program::log::sol_log(move _1085) -> [return: bb471, unwind: bb526];
    }

    bb471: {
        StorageDead(_1085);
        StorageDead(_1086);
        StorageDead(_1084);
        StorageLive(_1087);
        _1087 = _1064;
        _1061 = std::result::Result::<(), error::ErrorCode>::Err(move _1087);
        StorageDead(_1087);
        StorageDead(_1064);
        goto -> bb472;
    }

    bb472: {
        StorageDead(_1062);
        _1060 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1061) -> [return: bb473, unwind: bb526];
    }

    bb473: {
        StorageDead(_1061);
        _1088 = discriminant(_1060);
        switchInt(move _1088) -> [0: bb474, 1: bb475, otherwise: bb4];
    }

    bb474: {
        StorageLive(_1092);
        _1092 = ((_1060 as Continue).0: ());
        _1059 = _1092;
        StorageDead(_1092);
        StorageDead(_1060);
        StorageDead(_1059);
        StorageLive(_1093);
        _1093 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _1093);
        StorageDead(_1093);
        StorageDead(_499);
        StorageDead(_496);
        drop(_450) -> [return: bb477, unwind: bb527];
    }

    bb475: {
        StorageLive(_1089);
        _1089 = ((_1060 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1091);
        _1091 = _1089;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1091) -> [return: bb476, unwind: bb526];
    }

    bb476: {
        StorageDead(_1091);
        StorageDead(_1089);
        StorageDead(_1060);
        StorageDead(_1059);
        goto -> bb488;
    }

    bb477: {
        StorageDead(_450);
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_403);
        StorageDead(_392);
        StorageDead(_391);
        drop(_350) -> [return: bb478, unwind: bb532];
    }

    bb478: {
        StorageDead(_350);
        StorageDead(_199);
        StorageDead(_195);
        drop(_184) -> [return: bb479, unwind: bb535];
    }

    bb479: {
        StorageDead(_184);
        drop(_88) -> [return: bb480, unwind: bb537];
    }

    bb480: {
        StorageDead(_88);
        StorageDead(_79);
        StorageDead(_70);
        StorageDead(_61);
        drop(_31) -> [return: bb481, unwind: bb538];
    }

    bb481: {
        StorageDead(_31);
        drop(_30) -> [return: bb482, unwind: bb539];
    }

    bb482: {
        StorageDead(_30);
        drop(_29) -> [return: bb483, unwind: bb542];
    }

    bb483: {
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb509;
    }

    bb484: {
        StorageDead(_959);
        goto -> bb486;
    }

    bb485: {
        StorageDead(_553);
        goto -> bb486;
    }

    bb486: {
        StorageDead(_515);
        StorageDead(_514);
        drop(_502) -> [return: bb487, unwind: bb526];
    }

    bb487: {
        StorageDead(_502);
        StorageDead(_500);
        goto -> bb488;
    }

    bb488: {
        StorageDead(_499);
        StorageDead(_496);
        goto -> bb489;
    }

    bb489: {
        drop(_450) -> [return: bb490, unwind: bb527];
    }

    bb490: {
        StorageDead(_450);
        goto -> bb491;
    }

    bb491: {
        StorageDead(_440);
        StorageDead(_438);
        goto -> bb492;
    }

    bb492: {
        StorageDead(_403);
        StorageDead(_392);
        StorageDead(_391);
        goto -> bb493;
    }

    bb493: {
        drop(_350) -> [return: bb494, unwind: bb532];
    }

    bb494: {
        StorageDead(_350);
        goto -> bb495;
    }

    bb495: {
        StorageDead(_199);
        StorageDead(_195);
        drop(_184) -> [return: bb496, unwind: bb535];
    }

    bb496: {
        StorageDead(_184);
        goto -> bb497;
    }

    bb497: {
        drop(_88) -> [return: bb498, unwind: bb537];
    }

    bb498: {
        StorageDead(_88);
        goto -> bb499;
    }

    bb499: {
        StorageDead(_79);
        goto -> bb500;
    }

    bb500: {
        StorageDead(_70);
        goto -> bb501;
    }

    bb501: {
        StorageDead(_61);
        drop(_31) -> [return: bb502, unwind: bb538];
    }

    bb502: {
        StorageDead(_31);
        drop(_30) -> [return: bb503, unwind: bb539];
    }

    bb503: {
        StorageDead(_30);
        drop(_29) -> [return: bb504, unwind: bb542];
    }

    bb504: {
        StorageDead(_29);
        goto -> bb507;
    }

    bb505: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_38) -> [return: bb506, unwind: bb542];
    }

    bb506: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb507;
    }

    bb507: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb508;
    }

    bb508: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb509;
    }

    bb509: {
        return;
    }

    bb510 (cleanup): {
        drop(_1070) -> [return: bb526, unwind terminate(cleanup)];
    }

    bb511 (cleanup): {
        drop(_1035) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb512 (cleanup): {
        drop(_985) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb513 (cleanup): {
        drop(_925) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb514 (cleanup): {
        drop(_906) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb515 (cleanup): {
        drop(_850) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb516 (cleanup): {
        drop(_810) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb517 (cleanup): {
        drop(_770) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb518 (cleanup): {
        drop(_730) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb519 (cleanup): {
        drop(_690) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb520 (cleanup): {
        drop(_650) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb521 (cleanup): {
        drop(_610) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb522 (cleanup): {
        drop(_570) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb523 (cleanup): {
        drop(_530) -> [return: bb524, unwind terminate(cleanup)];
    }

    bb524 (cleanup): {
        drop(_502) -> [return: bb526, unwind terminate(cleanup)];
    }

    bb525 (cleanup): {
        drop(_473) -> [return: bb526, unwind terminate(cleanup)];
    }

    bb526 (cleanup): {
        drop(_450) -> [return: bb527, unwind terminate(cleanup)];
    }

    bb527 (cleanup): {
        drop(_350) -> [return: bb532, unwind terminate(cleanup)];
    }

    bb528 (cleanup): {
        drop(_327) -> [return: bb532, unwind terminate(cleanup)];
    }

    bb529 (cleanup): {
        drop(_292) -> [return: bb532, unwind terminate(cleanup)];
    }

    bb530 (cleanup): {
        drop(_256) -> [return: bb532, unwind terminate(cleanup)];
    }

    bb531 (cleanup): {
        drop(_215) -> [return: bb532, unwind terminate(cleanup)];
    }

    bb532 (cleanup): {
        drop(_184) -> [return: bb535, unwind terminate(cleanup)];
    }

    bb533 (cleanup): {
        drop(_161) -> [return: bb535, unwind terminate(cleanup)];
    }

    bb534 (cleanup): {
        drop(_120) -> [return: bb535, unwind terminate(cleanup)];
    }

    bb535 (cleanup): {
        drop(_88) -> [return: bb537, unwind terminate(cleanup)];
    }

    bb536 (cleanup): {
        drop(_38) -> [return: bb537, unwind terminate(cleanup)];
    }

    bb537 (cleanup): {
        drop(_31) -> [return: bb538, unwind terminate(cleanup)];
    }

    bb538 (cleanup): {
        drop(_30) -> [return: bb539, unwind terminate(cleanup)];
    }

    bb539 (cleanup): {
        drop(_29) -> [return: bb542, unwind terminate(cleanup)];
    }

    bb540 (cleanup): {
        drop(_41) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb541 (cleanup): {
        drop(_38) -> [return: bb542, unwind terminate(cleanup)];
    }

    bb542 (cleanup): {
        resume;
    }

    bb543: {
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_500);
        StorageLive(_1059);
        StorageLive(_1060);
        StorageLive(_1061);
        StorageLive(_1062);
        _1062 = _499;
        switchInt(move _1062) -> [0: bb464, otherwise: bb463];
    }

    bb544: {
        drop(((_503 as Err).0: anchor_lang::prelude::ProgramError)) -> [return: bb543, unwind: bb526];
    }

    bb545 (cleanup): {
        _1196 = discriminant(_503);
        goto -> bb526;
    }

    bb546 (cleanup): {
        _1197 = discriminant(_451);
        goto -> bb527;
    }

    bb547 (cleanup): {
        _1198 = discriminant(_442);
        goto -> bb527;
    }

    bb548 (cleanup): {
        _1199 = discriminant(_412);
        goto -> bb527;
    }

    bb549 (cleanup): {
        _1200 = discriminant(_351);
        goto -> bb532;
    }

    bb550 (cleanup): {
        _1201 = discriminant(_185);
        goto -> bb535;
    }

    bb551 (cleanup): {
        _1202 = discriminant(_89);
        goto -> bb537;
    }

    bb552 (cleanup): {
        _1204 = discriminant(_33);
        goto -> bb540;
    }

    bb553 (cleanup): {
        _1205 = discriminant(_17);
        goto -> bb542;
    }

    bb554 (cleanup): {
        _1206 = discriminant(_6);
        goto -> bb542;
    }

    bb555: {
        (*_1208) = [move _49, move _50];
        StorageDead(_50);
        StorageDead(_49);
        _44 = move _48;
        _43 = move _44 as std::boxed::Box<[u16]> (PointerCoercion(Unsize));
        StorageDead(_48);
        StorageDead(_44);
        _42 = std::slice::<impl [u16]>::into_vec::<std::alloc::Global>(move _43) -> [return: bb16, unwind: bb541];
    }
}
