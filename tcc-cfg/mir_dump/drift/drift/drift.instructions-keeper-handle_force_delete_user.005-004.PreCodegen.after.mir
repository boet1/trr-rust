// MIR for `keeper::handle_force_delete_user` after PreCodegen

fn keeper::handle_force_delete_user(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::ForceDeleteUser<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let _8: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _9: &anchor_lang::prelude::Signer<'_>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let _11: anchor_lang::prelude::Pubkey;
    let mut _12: ();
    let _13: error::ErrorCode;
    let _14: ();
    let mut _15: &str;
    let _16: &str;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let _19: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[&str; 2];
    let _24: &[&str; 2];
    let _25: [&str; 2];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let mut _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &error::ErrorCode;
    let _32: &error::ErrorCode;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: error::ErrorCode;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: ();
    let _42: anchor_lang::prelude::Pubkey;
    let mut _43: [u8; 32];
    let _44: ();
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _46: std::result::Result<(), error::ErrorCode>;
    let mut _47: bool;
    let mut _48: &anchor_lang::prelude::Pubkey;
    let mut _49: &anchor_lang::prelude::Pubkey;
    let mut _50: ();
    let _52: ();
    let mut _53: &str;
    let _54: &str;
    let mut _55: &std::string::String;
    let _56: &std::string::String;
    let _57: std::string::String;
    let mut _59: std::fmt::Arguments<'_>;
    let mut _60: &[&str];
    let mut _61: &[&str; 2];
    let _62: &[&str; 2];
    let _63: [&str; 2];
    let mut _64: &[core::fmt::rt::Argument<'_>];
    let mut _65: &[core::fmt::rt::Argument<'_>; 1];
    let _66: &[core::fmt::rt::Argument<'_>; 1];
    let _67: [core::fmt::rt::Argument<'_>; 1];
    let mut _68: core::fmt::rt::Argument<'_>;
    let mut _69: &error::ErrorCode;
    let _70: &error::ErrorCode;
    let _71: ();
    let mut _72: &str;
    let _73: &str;
    let mut _74: error::ErrorCode;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: &anchor_lang::prelude::Signer<'_>;
    let mut _85: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _87: std::cell::RefMut<'_, state::user::User>;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _89: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _90: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _91: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _92: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _101: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _102: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _103: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _104: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: anchor_lang::prelude::Clock;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _113: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _120: anchor_lang::prelude::Clock;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _122: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _123: isize;
    let mut _125: !;
    let mut _126: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _131: instructions::optional_accounts::AccountMaps<'_>;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _133: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _134: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _135: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _136: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _137: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _138: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _139: &std::collections::BTreeSet<u16>;
    let _140: &std::collections::BTreeSet<u16>;
    let _141: std::collections::BTreeSet<u16>;
    let mut _142: &std::collections::BTreeSet<u16>;
    let _143: &std::collections::BTreeSet<u16>;
    let _144: std::collections::BTreeSet<u16>;
    let mut _145: &[state::user::SpotPosition];
    let mut _146: &[state::user::SpotPosition; 8];
    let _147: &[state::user::SpotPosition; 8];
    let _148: &state::user::User;
    let mut _149: &std::cell::RefMut<'_, state::user::User>;
    let mut _150: u64;
    let mut _151: std::option::Option<state::state::OracleGuardRails>;
    let mut _152: state::state::OracleGuardRails;
    let mut _153: &state::state::State;
    let mut _154: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _161: (i128, bool);
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, bool)>;
    let mut _163: std::result::Result<(i128, bool), error::ErrorCode>;
    let mut _164: &state::user::User;
    let _165: &state::user::User;
    let mut _166: &std::cell::RefMut<'_, state::user::User>;
    let mut _167: &state::perp_market_map::PerpMarketMap<'_>;
    let _168: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _169: &state::spot_market_map::SpotMarketMap<'_>;
    let _170: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _171: &mut state::oracle_map::OracleMap<'_>;
    let mut _172: &mut state::oracle_map::OracleMap<'_>;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: bool;
    let _183: ();
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _185: std::result::Result<(), error::ErrorCode>;
    let mut _186: bool;
    let mut _187: i128;
    let mut _188: i128;
    let mut _189: ();
    let _191: ();
    let mut _192: &str;
    let _193: &str;
    let mut _194: &std::string::String;
    let _195: &std::string::String;
    let _196: std::string::String;
    let mut _198: std::fmt::Arguments<'_>;
    let mut _199: &[&str];
    let mut _200: &[&str; 2];
    let _201: &[&str; 2];
    let _202: [&str; 2];
    let mut _203: &[core::fmt::rt::Argument<'_>];
    let mut _204: &[core::fmt::rt::Argument<'_>; 1];
    let _205: &[core::fmt::rt::Argument<'_>; 1];
    let _206: [core::fmt::rt::Argument<'_>; 1];
    let mut _207: core::fmt::rt::Argument<'_>;
    let mut _208: &error::ErrorCode;
    let _209: &error::ErrorCode;
    let _210: ();
    let mut _211: &str;
    let _212: &str;
    let mut _213: &std::string::String;
    let _214: &std::string::String;
    let _215: std::string::String;
    let mut _217: std::fmt::Arguments<'_>;
    let mut _218: &[&str];
    let mut _219: &[&str; 1];
    let _220: &[&str; 1];
    let _221: [&str; 1];
    let mut _222: &[core::fmt::rt::Argument<'_>];
    let mut _223: &[core::fmt::rt::Argument<'_>; 1];
    let _224: &[core::fmt::rt::Argument<'_>; 1];
    let _225: [core::fmt::rt::Argument<'_>; 1];
    let mut _226: core::fmt::rt::Argument<'_>;
    let mut _227: &i128;
    let _228: &i128;
    let mut _229: error::ErrorCode;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _235: ();
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _238: std::result::Result<u64, error::ErrorCode>;
    let mut _239: u64;
    let mut _240: u64;
    let mut _241: &state::user::User;
    let mut _242: &std::cell::RefMut<'_, state::user::User>;
    let mut _243: isize;
    let mut _245: !;
    let mut _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _248: ();
    let mut _249: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _250: std::result::Result<(), error::ErrorCode>;
    let mut _251: bool;
    let mut _252: u64;
    let mut _253: ();
    let _255: ();
    let mut _256: &str;
    let _257: &str;
    let mut _258: &std::string::String;
    let _259: &std::string::String;
    let _260: std::string::String;
    let mut _262: std::fmt::Arguments<'_>;
    let mut _263: &[&str];
    let mut _264: &[&str; 2];
    let _265: &[&str; 2];
    let _266: [&str; 2];
    let mut _267: &[core::fmt::rt::Argument<'_>];
    let mut _268: &[core::fmt::rt::Argument<'_>; 1];
    let _269: &[core::fmt::rt::Argument<'_>; 1];
    let _270: [core::fmt::rt::Argument<'_>; 1];
    let mut _271: core::fmt::rt::Argument<'_>;
    let mut _272: &error::ErrorCode;
    let _273: &error::ErrorCode;
    let _274: ();
    let mut _275: &str;
    let _276: &str;
    let mut _277: &std::string::String;
    let _278: &std::string::String;
    let _279: std::string::String;
    let mut _281: std::fmt::Arguments<'_>;
    let mut _282: &[&str];
    let mut _283: &[&str; 1];
    let _284: &[&str; 1];
    let _285: [&str; 1];
    let mut _286: &[core::fmt::rt::Argument<'_>];
    let mut _287: &[core::fmt::rt::Argument<'_>; 1];
    let _288: &[core::fmt::rt::Argument<'_>; 1];
    let _289: [core::fmt::rt::Argument<'_>; 1];
    let mut _290: core::fmt::rt::Argument<'_>;
    let mut _291: &u64;
    let _292: &u64;
    let mut _293: error::ErrorCode;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _299: std::vec::Vec<u32>;
    let mut _300: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<u32>>;
    let mut _301: std::result::Result<std::vec::Vec<u32>, error::ErrorCode>;
    let mut _302: &mut state::user::User;
    let mut _303: &mut state::user::User;
    let mut _304: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _305: &anchor_lang::prelude::Pubkey;
    let _306: &anchor_lang::prelude::Pubkey;
    let mut _307: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _308: &anchor_lang::prelude::Pubkey;
    let _309: &anchor_lang::prelude::Pubkey;
    let mut _310: &state::perp_market_map::PerpMarketMap<'_>;
    let _311: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _312: &state::spot_market_map::SpotMarketMap<'_>;
    let _313: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _314: &mut state::oracle_map::OracleMap<'_>;
    let mut _315: &mut state::oracle_map::OracleMap<'_>;
    let mut _316: i64;
    let mut _317: u64;
    let mut _318: state::events::OrderActionExplanation;
    let mut _319: std::option::Option<state::user::MarketType>;
    let mut _320: std::option::Option<u16>;
    let mut _321: std::option::Option<controller::position::PositionDirection>;
    let mut _322: isize;
    let mut _324: !;
    let mut _325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _327: ();
    let mut _328: std::slice::IterMut<'_, state::user::SpotPosition>;
    let mut _329: std::slice::IterMut<'_, state::user::SpotPosition>;
    let mut _330: &mut [state::user::SpotPosition];
    let mut _331: &mut [state::user::SpotPosition; 8];
    let mut _332: &mut state::user::User;
    let mut _333: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _335: ();
    let _336: ();
    let mut _337: std::option::Option<&mut state::user::SpotPosition>;
    let mut _338: &mut std::slice::IterMut<'_, state::user::SpotPosition>;
    let mut _339: &mut std::slice::IterMut<'_, state::user::SpotPosition>;
    let mut _340: isize;
    let mut _341: !;
    let _343: ();
    let mut _344: bool;
    let mut _345: &state::user::SpotPosition;
    let mut _346: !;
    let mut _348: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _349: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _350: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _351: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _352: &u16;
    let _353: &u16;
    let mut _354: isize;
    let mut _356: !;
    let mut _357: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _360: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _361: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _362: &mut state::oracle_map::OracleMap<'_>;
    let mut _363: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _364: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _365: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _366: &state::spot_market::SpotMarket;
    let _367: &state::spot_market::SpotMarket;
    let mut _368: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _369: isize;
    let mut _371: !;
    let mut _372: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _374: ();
    let mut _375: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _376: std::result::Result<(), error::ErrorCode>;
    let mut _377: &mut state::spot_market::SpotMarket;
    let mut _378: &mut state::spot_market::SpotMarket;
    let mut _379: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _380: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _381: &state::oracle::OraclePriceData;
    let mut _382: i64;
    let mut _383: isize;
    let mut _385: !;
    let mut _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _389: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _390: std::result::Result<u128, error::ErrorCode>;
    let mut _391: &state::user::SpotPosition;
    let mut _392: &state::spot_market::SpotMarket;
    let _393: &state::spot_market::SpotMarket;
    let mut _394: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _395: isize;
    let mut _397: !;
    let mut _398: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _402: &state::spot_market::SpotMarket;
    let _403: &state::spot_market::SpotMarket;
    let mut _404: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _406: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _407: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _408: std::option::Option<std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>>;
    let mut _409: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _410: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _411: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _412: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _413: {closure@programs/drift/src/instructions/keeper.rs:2973:19: 2973:24};
    let mut _414: &anchor_lang::prelude::Pubkey;
    let mut _415: {closure@programs/drift/src/instructions/keeper.rs:2974:18: 2974:23};
    let _417: &state::spot_market::SpotMarket;
    let mut _418: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _420: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _421: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _422: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _423: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _424: {closure@programs/drift/src/instructions/keeper.rs:2982:19: 2982:24};
    let mut _425: &&anchor_lang::prelude::Pubkey;
    let mut _426: {closure@programs/drift/src/instructions/keeper.rs:2983:18: 2983:23};
    let mut _428: &anchor_lang::prelude::Pubkey;
    let _429: &anchor_lang::prelude::Pubkey;
    let mut _430: &anchor_lang::prelude::Pubkey;
    let mut _431: &anchor_lang::prelude::Pubkey;
    let _432: &anchor_lang::prelude::Pubkey;
    let mut _434: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _435: std::option::Option<std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>>;
    let mut _436: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _437: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _438: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _439: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _440: {closure@programs/drift/src/instructions/keeper.rs:2993:19: 2993:24};
    let mut _441: &anchor_lang::prelude::Pubkey;
    let mut _442: {closure@programs/drift/src/instructions/keeper.rs:2994:18: 2994:23};
    let mut _444: &state::spot_market::SpotMarket;
    let mut _445: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _447: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _448: std::option::Option<std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>>;
    let mut _449: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _450: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _451: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _452: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _453: {closure@programs/drift/src/instructions/keeper.rs:3002:19: 3002:24};
    let mut _454: &anchor_lang::prelude::Pubkey;
    let mut _455: {closure@programs/drift/src/instructions/keeper.rs:3003:18: 3003:23};
    let _456: ();
    let mut _457: bool;
    let mut _458: &state::spot_market::SpotBalanceType;
    let mut _459: &state::spot_market::SpotBalanceType;
    let _460: state::spot_market::SpotBalanceType;
    let _461: ();
    let mut _462: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _463: std::result::Result<(), error::ErrorCode>;
    let mut _464: u128;
    let mut _465: &state::spot_market::SpotBalanceType;
    let _466: &state::spot_market::SpotBalanceType;
    let _467: state::spot_market::SpotBalanceType;
    let mut _468: &mut state::spot_market::SpotMarket;
    let mut _469: &mut state::spot_market::SpotMarket;
    let mut _470: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _471: &mut dyn state::spot_market::SpotBalance;
    let mut _472: &mut state::user::SpotPosition;
    let mut _473: isize;
    let mut _475: !;
    let mut _476: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _478: ();
    let mut _479: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _480: std::result::Result<(), anchor_lang::error::Error>;
    let mut _481: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _482: &&anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _483: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _484: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _485: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _486: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _487: &anchor_lang::prelude::AccountInfo<'_>;
    let _488: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _489: u8;
    let mut _490: &state::state::State;
    let mut _491: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _492: u64;
    let mut _493: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _494: std::result::Result<u64, error::ErrorCode>;
    let mut _495: u128;
    let mut _496: isize;
    let mut _498: !;
    let mut _499: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _501: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _502: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _503: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _504: isize;
    let mut _506: !;
    let mut _507: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _509: ();
    let mut _510: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _511: std::result::Result<(), error::ErrorCode>;
    let mut _512: u128;
    let mut _513: &state::spot_market::SpotBalanceType;
    let _514: &state::spot_market::SpotBalanceType;
    let _515: state::spot_market::SpotBalanceType;
    let mut _516: &mut state::spot_market::SpotMarket;
    let mut _517: &mut state::spot_market::SpotMarket;
    let mut _518: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _519: &mut dyn state::spot_market::SpotBalance;
    let mut _520: &mut state::user::SpotPosition;
    let mut _521: isize;
    let mut _523: !;
    let mut _524: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _526: ();
    let mut _527: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _528: std::result::Result<(), anchor_lang::error::Error>;
    let mut _529: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _530: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _531: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _532: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _533: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _534: &anchor_lang::prelude::AccountInfo<'_>;
    let _535: &anchor_lang::prelude::AccountInfo<'_>;
    let _536: anchor_lang::prelude::AccountInfo<'_>;
    let mut _537: &anchor_lang::prelude::Signer<'_>;
    let mut _538: u64;
    let mut _539: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _540: std::result::Result<u64, error::ErrorCode>;
    let mut _541: u128;
    let mut _542: isize;
    let mut _544: !;
    let mut _545: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _547: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _548: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _549: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _550: isize;
    let mut _552: !;
    let mut _553: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _555: ();
    let mut _556: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _557: std::result::Result<(), anchor_lang::error::Error>;
    let mut _558: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _559: isize;
    let mut _561: !;
    let mut _562: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _564: i64;
    let mut _565: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _566: std::result::Result<i64, error::ErrorCode>;
    let mut _567: &state::spot_market::SpotMarket;
    let _568: &state::spot_market::SpotMarket;
    let mut _569: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _570: u64;
    let mut _571: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _572: &anchor_spl::token_interface::TokenAccount;
    let _573: &anchor_spl::token_interface::TokenAccount;
    let mut _574: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _575: isize;
    let mut _577: !;
    let mut _578: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _580: ();
    let mut _581: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _582: std::result::Result<(), error::ErrorCode>;
    let mut _583: &state::user::User;
    let _584: &state::user::User;
    let mut _585: &std::cell::RefMut<'_, state::user::User>;
    let mut _586: &state::user::UserStats;
    let _587: &state::user::UserStats;
    let mut _588: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _589: &state::state::State;
    let _590: &state::state::State;
    let mut _591: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _592: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _593: i64;
    let mut _594: anchor_lang::prelude::Clock;
    let mut _595: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _596: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _597: isize;
    let mut _599: !;
    let mut _600: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _602: isize;
    let mut _604: !;
    let mut _605: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _607: ();
    let mut _608: u16;
    let mut _609: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _610: std::result::Result<u16, error::ErrorCode>;
    let mut _611: std::option::Option<u16>;
    let mut _612: u16;
    let mut _613: &state::user::UserStats;
    let mut _614: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _615: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _616: isize;
    let mut _618: !;
    let mut _619: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _621: &mut state::user::UserStats;
    let mut _622: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let _624: ();
    let mut _625: u64;
    let mut _626: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _627: std::result::Result<u64, error::ErrorCode>;
    let mut _628: std::option::Option<u64>;
    let mut _629: u64;
    let mut _630: &state::state::State;
    let mut _631: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _632: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _633: isize;
    let mut _635: !;
    let mut _636: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _638: &mut state::state::State;
    let mut _639: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let _640: ();
    let _641: ();
    let mut _642: &[&[u8]];
    let mut _643: &[&[u8]; 1];
    let _644: &[&[u8]; 1];
    let _645: [&[u8]; 1];
    let mut _646: &[u8];
    let _647: &[u8];
    let mut _648: &std::vec::Vec<u8>;
    let _649: &std::vec::Vec<u8>;
    let _650: std::vec::Vec<u8>;
    let mut _651: &state::events::DeleteUserRecord;
    let _652: &state::events::DeleteUserRecord;
    let _653: state::events::DeleteUserRecord;
    let mut _654: i64;
    let mut _655: anchor_lang::prelude::Pubkey;
    let mut _656: anchor_lang::prelude::Pubkey;
    let mut _657: u16;
    let mut _658: &state::user::User;
    let mut _659: &std::cell::RefMut<'_, state::user::User>;
    let mut _660: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _661: anchor_lang::prelude::Pubkey;
    let mut _662: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _663: &anchor_lang::prelude::Signer<'_>;
    let mut _664: ();
    let mut _674: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _675: &anchor_lang::prelude::Pubkey;
    let mut _676: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _677: &anchor_lang::prelude::Pubkey;
    let mut _678: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _679: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _680: &anchor_lang::prelude::Pubkey;
    let mut _681: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _682: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _683: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _684: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _685: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _686: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _687: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _688: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _689: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _690: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _691: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _692: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _693: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _694: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _695: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _696: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _697: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _698: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _699: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _700: &anchor_lang::prelude::Pubkey;
    let mut _701: &mut instructions::keeper::ForceDeleteUser<'_>;
    let mut _702: &anchor_lang::prelude::Pubkey;
    let mut _703: bool;
    let mut _704: bool;
    let mut _705: bool;
    let mut _706: isize;
    let mut _707: isize;
    let mut _708: isize;
    let mut _709: isize;
    let mut _710: isize;
    let mut _711: isize;
    let mut _712: isize;
    let mut _713: isize;
    let mut _714: isize;
    let mut _715: isize;
    let mut _716: isize;
    let mut _717: isize;
    let mut _718: isize;
    let mut _719: isize;
    let mut _720: isize;
    let mut _721: isize;
    let mut _722: isize;
    let mut _723: isize;
    let mut _724: isize;
    let mut _725: isize;
    let mut _726: isize;
    let mut _727: isize;
    let mut _728: isize;
    let mut _729: isize;
    let mut _730: isize;
    let mut _731: isize;
    let mut _732: isize;
    let mut _733: isize;
    let mut _734: isize;
    let mut _735: isize;
    let mut _736: isize;
    let mut _737: isize;
    let mut _738: isize;
    let mut _739: isize;
    let mut _740: isize;
    let mut _741: isize;
    let mut _742: isize;
    let mut _743: isize;
    let mut _744: isize;
    let mut _745: isize;
    let mut _746: isize;
    let mut _747: isize;
    let mut _748: isize;
    let mut _749: isize;
    let mut _750: isize;
    let mut _751: isize;
    let mut _752: isize;
    let mut _753: isize;
    let mut _754: isize;
    let mut _755: isize;
    let mut _756: isize;
    let mut _757: isize;
    let mut _758: isize;
    let mut _759: isize;
    let mut _760: isize;
    let mut _761: isize;
    let mut _762: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _763: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _764: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _765: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _766: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug error_code => _13;
        let _20: std::string::String;
        let mut _673: &[&str; 2];
        scope 2 {
            debug res => _20;
        }
    }
    scope 3 {
        debug residual => _38;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _41;
        scope 6 {
        }
    }
    scope 7 {
        debug pyra_program => _42;
        let _51: error::ErrorCode;
        let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _79: ();
        let _80: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 8 {
            debug error_code => _51;
            let _58: std::string::String;
            let mut _672: &[&str; 2];
            scope 9 {
                debug res => _58;
            }
        }
        scope 10 {
            debug residual => _76;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _79;
            scope 13 {
            }
        }
        scope 14 {
            debug state => _80;
            let _81: anchor_lang::prelude::Pubkey;
            scope 15 {
                debug keeper_key => _81;
                let _84: anchor_lang::prelude::Pubkey;
                scope 16 {
                    debug user_key => _84;
                    let _86: &mut std::cell::RefMut<'_, state::user::User>;
                    let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _97: std::cell::RefMut<'_, state::user::User>;
                    scope 17 {
                        debug user => _86;
                        let _98: &mut std::cell::RefMut<'_, state::user::UserStats>;
                        let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _109: std::cell::RefMut<'_, state::user::UserStats>;
                        scope 22 {
                            debug user_stats => _98;
                            let _110: u64;
                            let _115: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _118: anchor_lang::prelude::Clock;
                            scope 27 {
                                debug slot => _110;
                                let _119: i64;
                                let _124: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _127: anchor_lang::prelude::Clock;
                                scope 32 {
                                    debug now => _119;
                                    let _128: state::perp_market_map::PerpMarketMap<'_>;
                                    let _129: state::spot_market_map::SpotMarketMap<'_>;
                                    let mut _130: state::oracle_map::OracleMap<'_>;
                                    let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _159: instructions::optional_accounts::AccountMaps<'_>;
                                    scope 37 {
                                        debug perp_market_map => _128;
                                        debug spot_market_map => _129;
                                        debug oracle_map => _130;
                                        let _160: i128;
                                        let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _177: (i128, bool);
                                        scope 42 {
                                            debug user_equity => _160;
                                            let _178: i128;
                                            scope 47 {
                                                debug max_equity => _178;
                                                let _190: error::ErrorCode;
                                                let _231: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _234: ();
                                                let _236: u64;
                                                let _244: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _247: u64;
                                                let _323: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _326: std::vec::Vec<u32>;
                                                let mut _334: std::slice::IterMut<'_, state::user::SpotPosition>;
                                                let _598: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _601: anchor_lang::prelude::Clock;
                                                let _603: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _606: ();
                                                let _617: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _620: u16;
                                                let _623: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                                                scope 48 {
                                                    debug error_code => _190;
                                                    let _197: std::string::String;
                                                    let _216: std::string::String;
                                                    let mut _670: &[&str; 1];
                                                    let mut _671: &[&str; 2];
                                                    scope 49 {
                                                        debug res => _197;
                                                    }
                                                    scope 50 {
                                                        debug res => _216;
                                                    }
                                                }
                                                scope 51 {
                                                    debug residual => _231;
                                                    scope 52 {
                                                    }
                                                }
                                                scope 53 {
                                                    debug val => _234;
                                                    scope 54 {
                                                    }
                                                }
                                                scope 55 {
                                                    debug slots_since_last_active => _236;
                                                    let _254: error::ErrorCode;
                                                    let _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _298: ();
                                                    scope 60 {
                                                        debug error_code => _254;
                                                        let _261: std::string::String;
                                                        let _280: std::string::String;
                                                        let mut _668: &[&str; 1];
                                                        let mut _669: &[&str; 2];
                                                        scope 61 {
                                                            debug res => _261;
                                                        }
                                                        scope 62 {
                                                            debug res => _280;
                                                        }
                                                    }
                                                    scope 63 {
                                                        debug residual => _295;
                                                        scope 64 {
                                                        }
                                                    }
                                                    scope 65 {
                                                        debug val => _298;
                                                        scope 66 {
                                                        }
                                                    }
                                                }
                                                scope 56 {
                                                    debug residual => _244;
                                                    scope 57 {
                                                    }
                                                }
                                                scope 58 {
                                                    debug val => _247;
                                                    scope 59 {
                                                    }
                                                }
                                                scope 67 {
                                                    debug residual => _323;
                                                    scope 68 {
                                                    }
                                                }
                                                scope 69 {
                                                    debug val => _326;
                                                    scope 70 {
                                                    }
                                                }
                                                scope 71 {
                                                    debug iter => _334;
                                                    let _342: &mut state::user::SpotPosition;
                                                    scope 72 {
                                                        debug spot_position => _342;
                                                        let _347: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _358: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        scope 73 {
                                                            debug spot_market => _347;
                                                            let _359: &state::oracle::OraclePriceData;
                                                            let _370: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _373: &state::oracle::OraclePriceData;
                                                            scope 78 {
                                                                debug oracle_price_data => _359;
                                                                let _384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _387: ();
                                                                let _388: u128;
                                                                let _396: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _399: u128;
                                                                scope 83 {
                                                                    debug residual => _384;
                                                                    scope 84 {
                                                                    }
                                                                }
                                                                scope 85 {
                                                                    debug val => _387;
                                                                    scope 86 {
                                                                    }
                                                                }
                                                                scope 87 {
                                                                    debug token_amount => _388;
                                                                    let _400: state::spot_market::SpotBalanceType;
                                                                    scope 92 {
                                                                        debug balance_type => _400;
                                                                        let _401: anchor_lang::prelude::Pubkey;
                                                                        scope 93 {
                                                                            debug token_program_pubkey => _401;
                                                                            let _405: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                                            scope 94 {
                                                                                debug token_program => _405;
                                                                                let _416: &anchor_lang::prelude::Pubkey;
                                                                                scope 95 {
                                                                                    debug spot_market_mint => _416;
                                                                                    let _419: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                                                                    scope 96 {
                                                                                        debug mint_account_info => _419;
                                                                                        let _427: anchor_lang::prelude::Pubkey;
                                                                                        scope 97 {
                                                                                            debug keeper_vault => _427;
                                                                                            let _433: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                                                                                            scope 98 {
                                                                                                debug keeper_vault_account_info => _433;
                                                                                                let _443: anchor_lang::prelude::Pubkey;
                                                                                                scope 99 {
                                                                                                    debug spot_market_vault => _443;
                                                                                                    let mut _446: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                                                                                                    scope 100 {
                                                                                                        debug spot_market_vault_account_info => _446;
                                                                                                        let _474: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _477: ();
                                                                                                        let _497: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _500: u64;
                                                                                                        let _505: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                        let _508: ();
                                                                                                        let _522: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _525: ();
                                                                                                        let _543: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _546: u64;
                                                                                                        let _551: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                        let _554: ();
                                                                                                        let _560: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                        let _563: ();
                                                                                                        let _576: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _579: i64;
                                                                                                        let mut _665: &state::spot_market::SpotBalanceType;
                                                                                                        let mut _666: &state::spot_market::SpotBalanceType;
                                                                                                        let mut _667: &state::spot_market::SpotBalanceType;
                                                                                                        scope 101 {
                                                                                                            debug residual => _474;
                                                                                                            scope 102 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 103 {
                                                                                                            debug val => _477;
                                                                                                            scope 104 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 105 {
                                                                                                            debug residual => _497;
                                                                                                            scope 106 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 107 {
                                                                                                            debug val => _500;
                                                                                                            scope 108 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 109 {
                                                                                                            debug residual => _505;
                                                                                                            scope 110 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 111 {
                                                                                                            debug val => _508;
                                                                                                            scope 112 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 113 {
                                                                                                            debug residual => _522;
                                                                                                            scope 114 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 115 {
                                                                                                            debug val => _525;
                                                                                                            scope 116 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 117 {
                                                                                                            debug residual => _543;
                                                                                                            scope 118 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 119 {
                                                                                                            debug val => _546;
                                                                                                            scope 120 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 121 {
                                                                                                            debug residual => _551;
                                                                                                            scope 122 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 123 {
                                                                                                            debug val => _554;
                                                                                                            scope 124 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 125 {
                                                                                                            debug residual => _560;
                                                                                                            scope 126 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 127 {
                                                                                                            debug val => _563;
                                                                                                            scope 128 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 129 {
                                                                                                            debug residual => _576;
                                                                                                            scope 130 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 131 {
                                                                                                            debug val => _579;
                                                                                                            scope 132 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 88 {
                                                                    debug residual => _396;
                                                                    scope 89 {
                                                                    }
                                                                }
                                                                scope 90 {
                                                                    debug val => _399;
                                                                    scope 91 {
                                                                    }
                                                                }
                                                            }
                                                            scope 79 {
                                                                debug residual => _370;
                                                                scope 80 {
                                                                }
                                                            }
                                                            scope 81 {
                                                                debug val => _373;
                                                                scope 82 {
                                                                }
                                                            }
                                                        }
                                                        scope 74 {
                                                            debug residual => _355;
                                                            scope 75 {
                                                            }
                                                        }
                                                        scope 76 {
                                                            debug val => _358;
                                                            scope 77 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 133 {
                                                    debug residual => _598;
                                                    scope 134 {
                                                    }
                                                }
                                                scope 135 {
                                                    debug val => _601;
                                                    scope 136 {
                                                    }
                                                }
                                                scope 137 {
                                                    debug residual => _603;
                                                    scope 138 {
                                                    }
                                                }
                                                scope 139 {
                                                    debug val => _606;
                                                    scope 140 {
                                                    }
                                                }
                                                scope 141 {
                                                    debug residual => _617;
                                                    scope 142 {
                                                    }
                                                }
                                                scope 143 {
                                                    debug val => _620;
                                                    scope 144 {
                                                    }
                                                }
                                                scope 145 {
                                                    debug state => _623;
                                                    let _634: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _637: u64;
                                                    scope 146 {
                                                        debug residual => _634;
                                                        scope 147 {
                                                        }
                                                    }
                                                    scope 148 {
                                                        debug val => _637;
                                                        scope 149 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _174;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _177;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _156;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _159;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _124;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _127;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _115;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _118;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _106;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _109;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _94;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _97;
                        scope 21 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _705 = const false;
        _704 = const false;
        _703 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _674 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _9 = &((*_674).4: anchor_lang::prelude::Signer<'_>);
        _8 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _675 = deref_copy ((*_8).0: &anchor_lang::prelude::Pubkey);
        _7 = &(*_675);
        StorageLive(_10);
        StorageLive(_11);
        _11 = admin_hot_wallet::id() -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &_11;
        _6 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _7, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_12);
        _12 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _12);
        StorageDead(_12);
        goto -> bb13;
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_13);
        _13 = error::ErrorCode::DefaultError;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _673 = const _;
        _24 = &(*_673);
        _23 = &(*_24);
        _22 = move _23 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_13;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _31) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_31);
        _29 = [move _30];
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_27);
        _21 = Arguments::<'_>::new_v1(move _22, move _26) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = format(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_24);
        _19 = move _20;
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = <String as Deref>::deref(move _17) -> [return: bb9, unwind: bb319];
    }

    bb9: {
        _15 = &(*_16);
        StorageDead(_17);
        _14 = solana_program::log::sol_log(move _15) -> [return: bb10, unwind: bb319];
    }

    bb10: {
        StorageDead(_15);
        drop(_19) -> [return: bb11, unwind: bb320];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = const "only admin hot wallet can force delete user";
        _34 = &(*_35);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_36);
        _36 = _13;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _36);
        StorageDead(_36);
        StorageDead(_13);
        goto -> bb13;
    }

    bb13: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_5);
        _37 = discriminant(_4);
        switchInt(move _37) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        StorageLive(_41);
        _41 = ((_4 as Continue).0: ());
        _3 = _41;
        StorageDead(_41);
        StorageDead(_4);
        StorageDead(_3);
        _2 = const ();
        StorageDead(_2);
        StorageLive(_42);
        StorageLive(_43);
        _43 = [const 78_u8, const 213_u8, const 30_u8, const 187_u8, const 209_u8, const 231_u8, const 237_u8, const 80_u8, const 240_u8, const 91_u8, const 185_u8, const 12_u8, const 190_u8, const 244_u8, const 70_u8, const 89_u8, const 43_u8, const 216_u8, const 144_u8, const 112_u8, const 245_u8, const 81_u8, const 37_u8, const 89_u8, const 6_u8, const 162_u8, const 220_u8, const 74_u8, const 16_u8, const 187_u8, const 111_u8, const 195_u8];
        _42 = anchor_lang::prelude::Pubkey::new_from_array(move _43) -> [return: bb19, unwind continue];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        StorageLive(_38);
        _38 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb302;
    }

    bb19: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _676 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _677 = deref_copy (((*_676).3: anchor_lang::prelude::AccountInfo<'_>).3: &anchor_lang::prelude::Pubkey);
        _48 = &(*_677);
        StorageLive(_49);
        _49 = &_42;
        _47 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _48, move _49) -> [return: bb20, unwind continue];
    }

    bb20: {
        switchInt(move _47) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_50);
        _50 = ();
        _46 = std::result::Result::<(), error::ErrorCode>::Ok(move _50);
        StorageDead(_50);
        goto -> bb30;
    }

    bb22: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_51);
        _51 = error::ErrorCode::DefaultError;
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _672 = const _;
        _62 = &(*_672);
        _61 = &(*_62);
        _60 = move _61 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_61);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_51;
        _69 = &(*_70);
        _68 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _69) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_69);
        _67 = [move _68];
        StorageDead(_68);
        _66 = &_67;
        _65 = &(*_66);
        _64 = move _65 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_65);
        _59 = Arguments::<'_>::new_v1(move _60, move _64) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_64);
        StorageDead(_60);
        _58 = format(move _59) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_62);
        _57 = move _58;
        StorageDead(_58);
        _56 = &_57;
        _55 = &(*_56);
        _54 = <String as Deref>::deref(move _55) -> [return: bb26, unwind: bb318];
    }

    bb26: {
        _53 = &(*_54);
        StorageDead(_55);
        _52 = solana_program::log::sol_log(move _53) -> [return: bb27, unwind: bb318];
    }

    bb27: {
        StorageDead(_53);
        drop(_57) -> [return: bb28, unwind: bb320];
    }

    bb28: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = const "pyra accounts are exempt from force_delete_user";
        _72 = &(*_73);
        _71 = solana_program::log::sol_log(move _72) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_72);
        StorageDead(_73);
        StorageDead(_71);
        StorageLive(_74);
        _74 = _51;
        _46 = std::result::Result::<(), error::ErrorCode>::Err(move _74);
        StorageDead(_74);
        StorageDead(_51);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_47);
        _45 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _46) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_46);
        _75 = discriminant(_45);
        switchInt(move _75) -> [0: bb32, 1: bb33, otherwise: bb16];
    }

    bb32: {
        StorageLive(_79);
        _79 = ((_45 as Continue).0: ());
        _44 = _79;
        StorageDead(_79);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_80);
        _678 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _80 = &((*_678).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _679 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _83 = &((*_679).4: anchor_lang::prelude::Signer<'_>);
        _82 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _83) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_76);
        _76 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb301;
    }

    bb35: {
        StorageDead(_83);
        _680 = deref_copy ((*_82).0: &anchor_lang::prelude::Pubkey);
        _81 = (*_680);
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        _681 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _85 = &((*_681).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _84 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _85) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _682 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _91 = &((*_682).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _90 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _91) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_91);
        StorageLive(_92);
        _92 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _89 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _90, move _92) -> [return: bb38, unwind: bb320];
    }

    bb38: {
        StorageDead(_92);
        StorageDead(_90);
        _88 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _89) -> [return: bb39, unwind: bb320];
    }

    bb39: {
        StorageDead(_89);
        _93 = discriminant(_88);
        switchInt(move _93) -> [0: bb40, 1: bb41, otherwise: bb16];
    }

    bb40: {
        StorageLive(_97);
        _97 = move ((_88 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _87 = move _97;
        StorageDead(_97);
        _86 = &mut _87;
        _708 = discriminant(_88);
        StorageDead(_88);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _683 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _103 = &((*_683).1: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _102 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _103) -> [return: bb43, unwind: bb317];
    }

    bb41: {
        StorageLive(_94);
        _94 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb42, unwind: bb332];
    }

    bb42: {
        StorageDead(_96);
        StorageDead(_94);
        _706 = discriminant(_88);
        StorageDead(_88);
        goto -> bb300;
    }

    bb43: {
        StorageDead(_103);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _101 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _102, move _104) -> [return: bb44, unwind: bb317];
    }

    bb44: {
        StorageDead(_104);
        StorageDead(_102);
        _100 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _101) -> [return: bb45, unwind: bb317];
    }

    bb45: {
        StorageDead(_101);
        _105 = discriminant(_100);
        switchInt(move _105) -> [0: bb46, 1: bb47, otherwise: bb16];
    }

    bb46: {
        StorageLive(_109);
        _109 = move ((_100 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _99 = move _109;
        StorageDead(_109);
        _98 = &mut _99;
        _712 = discriminant(_100);
        StorageDead(_100);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb49, unwind: bb316];
    }

    bb47: {
        StorageLive(_106);
        _106 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb48, unwind: bb331];
    }

    bb48: {
        StorageDead(_108);
        StorageDead(_106);
        _710 = discriminant(_100);
        StorageDead(_100);
        goto -> bb299;
    }

    bb49: {
        _112 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _113) -> [return: bb50, unwind: bb316];
    }

    bb50: {
        StorageDead(_113);
        _114 = discriminant(_112);
        switchInt(move _114) -> [0: bb51, 1: bb52, otherwise: bb16];
    }

    bb51: {
        StorageLive(_118);
        _118 = move ((_112 as Continue).0: anchor_lang::prelude::Clock);
        _111 = move _118;
        StorageDead(_118);
        _110 = (_111.0: u64);
        _714 = discriminant(_112);
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb54, unwind: bb316];
    }

    bb52: {
        StorageLive(_115);
        _115 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_117);
        _117 = move _115;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _117) -> [return: bb53, unwind: bb330];
    }

    bb53: {
        StorageDead(_117);
        StorageDead(_115);
        _748 = discriminant(_112);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb298;
    }

    bb54: {
        _121 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _122) -> [return: bb55, unwind: bb316];
    }

    bb55: {
        StorageDead(_122);
        _123 = discriminant(_121);
        switchInt(move _123) -> [0: bb56, 1: bb57, otherwise: bb16];
    }

    bb56: {
        StorageLive(_127);
        _127 = move ((_121 as Continue).0: anchor_lang::prelude::Clock);
        _120 = move _127;
        StorageDead(_127);
        _119 = (_120.4: i64);
        _716 = discriminant(_121);
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _684 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _138 = &(*_684);
        _137 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _138) -> [return: bb59, unwind: bb316];
    }

    bb57: {
        StorageLive(_124);
        _124 = move ((_121 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_126);
        _126 = move _124;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _126) -> [return: bb58, unwind: bb329];
    }

    bb58: {
        StorageDead(_126);
        StorageDead(_124);
        _746 = discriminant(_121);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb297;
    }

    bb59: {
        StorageDead(_138);
        _136 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _137) -> [return: bb60, unwind: bb316];
    }

    bb60: {
        StorageDead(_137);
        _135 = &mut _136;
        _134 = &mut (*_135);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = BTreeSet::<u16>::new() -> [return: bb61, unwind: bb316];
    }

    bb61: {
        _140 = &_141;
        _139 = &(*_140);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &(*_86);
        _148 = <RefMut<'_, User> as Deref>::deref(move _149) -> [return: bb62, unwind: bb315];
    }

    bb62: {
        StorageDead(_149);
        _147 = &((*_148).3: [state::user::SpotPosition; 8]);
        _146 = &(*_147);
        _145 = move _146 as &[state::user::SpotPosition] (PointerCoercion(Unsize));
        StorageDead(_146);
        _144 = get_market_set_for_spot_positions(move _145) -> [return: bb63, unwind: bb315];
    }

    bb63: {
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        StorageLive(_150);
        _150 = _110;
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _685 = deref_copy (*_80);
        _762 = (((_685.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _154 = &(*_762);
        _153 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _154) -> [return: bb64, unwind: bb314];
    }

    bb64: {
        StorageDead(_154);
        _152 = ((*_153).7: state::state::OracleGuardRails);
        _151 = Option::<state::state::OracleGuardRails>::Some(move _152);
        StorageDead(_152);
        _133 = load_maps(move _134, move _139, move _142, move _150, move _151) -> [return: bb65, unwind: bb314];
    }

    bb65: {
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_134);
        _132 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _133) -> [return: bb66, unwind: bb314];
    }

    bb66: {
        StorageDead(_133);
        _155 = discriminant(_132);
        switchInt(move _155) -> [0: bb67, 1: bb68, otherwise: bb16];
    }

    bb67: {
        StorageLive(_159);
        _159 = move ((_132 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _131 = move _159;
        StorageDead(_159);
        StorageLive(_128);
        _128 = move (_131.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_129);
        _129 = move (_131.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_130);
        _130 = move (_131.2: state::oracle_map::OracleMap<'_>);
        _720 = discriminant(_132);
        StorageDead(_153);
        drop(_144) -> [return: bb70, unwind: bb310];
    }

    bb68: {
        StorageLive(_156);
        _156 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb69, unwind: bb328];
    }

    bb69: {
        StorageDead(_158);
        StorageDead(_156);
        _718 = discriminant(_132);
        StorageDead(_153);
        drop(_144) -> [return: bb295, unwind: bb315];
    }

    bb70: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        drop(_141) -> [return: bb71, unwind: bb311];
    }

    bb71: {
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &(*_86);
        _165 = <RefMut<'_, User> as Deref>::deref(move _166) -> [return: bb72, unwind: bb311];
    }

    bb72: {
        _164 = &(*_165);
        StorageDead(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_128;
        _167 = &(*_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &_129;
        _169 = &(*_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &mut _130;
        _171 = &mut (*_172);
        _163 = calculate_user_equity(move _164, move _167, move _169, move _171) -> [return: bb73, unwind: bb311];
    }

    bb73: {
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_164);
        _162 = <std::result::Result<(i128, bool), error::ErrorCode> as Try>::branch(move _163) -> [return: bb74, unwind: bb311];
    }

    bb74: {
        StorageDead(_163);
        _173 = discriminant(_162);
        switchInt(move _173) -> [0: bb75, 1: bb76, otherwise: bb16];
    }

    bb75: {
        StorageLive(_177);
        _177 = ((_162 as Continue).0: (i128, bool));
        _161 = _177;
        StorageDead(_177);
        StorageLive(_160);
        _160 = (_161.0: i128);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_161);
        StorageLive(_178);
        _179 = Eq(const 20_i128, const 0_i128);
        assert(!move _179, "attempt to divide `{}` by zero", const _) -> [success: bb78, unwind: bb311];
    }

    bb76: {
        StorageLive(_174);
        _174 = ((_162 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb77, unwind: bb311];
    }

    bb77: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_161);
        goto -> bb291;
    }

    bb78: {
        _180 = Eq(const 20_i128, const -1_i128);
        _181 = Eq(const _, const i128::MIN);
        _182 = BitAnd(move _180, move _181);
        assert(!move _182, "attempt to compute `{} / {}`, which would overflow", const _, const 20_i128) -> [success: bb79, unwind: bb311];
    }

    bb79: {
        _178 = Div(const _, const 20_i128);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = _160;
        StorageLive(_188);
        _188 = _178;
        _186 = Le(move _187, move _188);
        switchInt(move _186) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_189);
        _189 = ();
        _185 = std::result::Result::<(), error::ErrorCode>::Ok(move _189);
        StorageDead(_189);
        goto -> bb94;
    }

    bb81: {
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_190);
        _190 = error::ErrorCode::DefaultError;
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _671 = const _;
        _201 = &(*_671);
        _200 = &(*_201);
        _199 = move _200 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_200);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_190;
        _208 = &(*_209);
        _207 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _208) -> [return: bb82, unwind: bb311];
    }

    bb82: {
        StorageDead(_208);
        _206 = [move _207];
        StorageDead(_207);
        _205 = &_206;
        _204 = &(*_205);
        _203 = move _204 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_204);
        _198 = Arguments::<'_>::new_v1(move _199, move _203) -> [return: bb83, unwind: bb311];
    }

    bb83: {
        StorageDead(_203);
        StorageDead(_199);
        _197 = format(move _198) -> [return: bb84, unwind: bb311];
    }

    bb84: {
        StorageDead(_198);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_201);
        _196 = move _197;
        StorageDead(_197);
        _195 = &_196;
        _194 = &(*_195);
        _193 = <String as Deref>::deref(move _194) -> [return: bb85, unwind: bb309];
    }

    bb85: {
        _192 = &(*_193);
        StorageDead(_194);
        _191 = solana_program::log::sol_log(move _192) -> [return: bb86, unwind: bb309];
    }

    bb86: {
        StorageDead(_192);
        drop(_196) -> [return: bb87, unwind: bb311];
    }

    bb87: {
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_191);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _670 = const _;
        _220 = &(*_670);
        _219 = &(*_220);
        _218 = move _219 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_219);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &_178;
        _227 = &(*_228);
        _226 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _227) -> [return: bb88, unwind: bb311];
    }

    bb88: {
        StorageDead(_227);
        _225 = [move _226];
        StorageDead(_226);
        _224 = &_225;
        _223 = &(*_224);
        _222 = move _223 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_223);
        _217 = Arguments::<'_>::new_v1(move _218, move _222) -> [return: bb89, unwind: bb311];
    }

    bb89: {
        StorageDead(_222);
        StorageDead(_218);
        _216 = format(move _217) -> [return: bb90, unwind: bb311];
    }

    bb90: {
        StorageDead(_217);
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_220);
        _215 = move _216;
        StorageDead(_216);
        _214 = &_215;
        _213 = &(*_214);
        _212 = <String as Deref>::deref(move _213) -> [return: bb91, unwind: bb308];
    }

    bb91: {
        _211 = &(*_212);
        StorageDead(_213);
        _210 = solana_program::log::sol_log(move _211) -> [return: bb92, unwind: bb308];
    }

    bb92: {
        StorageDead(_211);
        drop(_215) -> [return: bb93, unwind: bb311];
    }

    bb93: {
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_210);
        StorageLive(_229);
        _229 = _190;
        _185 = std::result::Result::<(), error::ErrorCode>::Err(move _229);
        StorageDead(_229);
        StorageDead(_190);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_186);
        _184 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _185) -> [return: bb95, unwind: bb311];
    }

    bb95: {
        StorageDead(_185);
        _230 = discriminant(_184);
        switchInt(move _230) -> [0: bb96, 1: bb97, otherwise: bb16];
    }

    bb96: {
        StorageLive(_234);
        _234 = ((_184 as Continue).0: ());
        _183 = _234;
        StorageDead(_234);
        StorageDead(_184);
        StorageDead(_183);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = _110;
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &(*_86);
        _241 = <RefMut<'_, User> as Deref>::deref(move _242) -> [return: bb99, unwind: bb311];
    }

    bb97: {
        StorageLive(_231);
        _231 = ((_184 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_233);
        _233 = _231;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _233) -> [return: bb98, unwind: bb311];
    }

    bb98: {
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_184);
        StorageDead(_183);
        goto -> bb290;
    }

    bb99: {
        StorageDead(_242);
        _240 = ((*_241).14: u64);
        _238 = <u64 as SafeMath>::safe_sub(move _239, move _240) -> [return: bb100, unwind: bb311];
    }

    bb100: {
        StorageDead(_240);
        StorageDead(_239);
        _237 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _238) -> [return: bb101, unwind: bb311];
    }

    bb101: {
        StorageDead(_238);
        _243 = discriminant(_237);
        switchInt(move _243) -> [0: bb102, 1: bb103, otherwise: bb16];
    }

    bb102: {
        StorageLive(_247);
        _247 = ((_237 as Continue).0: u64);
        _236 = _247;
        StorageDead(_247);
        StorageDead(_241);
        StorageDead(_237);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = _236;
        _251 = Ge(move _252, const 18144000_u64);
        switchInt(move _251) -> [0: bb106, otherwise: bb105];
    }

    bb103: {
        StorageLive(_244);
        _244 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_246);
        _246 = _244;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _246) -> [return: bb104, unwind: bb311];
    }

    bb104: {
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_237);
        goto -> bb289;
    }

    bb105: {
        StorageDead(_252);
        StorageLive(_253);
        _253 = ();
        _250 = std::result::Result::<(), error::ErrorCode>::Ok(move _253);
        StorageDead(_253);
        goto -> bb119;
    }

    bb106: {
        StorageDead(_252);
        StorageLive(_254);
        _254 = error::ErrorCode::DefaultError;
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _669 = const _;
        _265 = &(*_669);
        _264 = &(*_265);
        _263 = move _264 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_264);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &_254;
        _272 = &(*_273);
        _271 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _272) -> [return: bb107, unwind: bb311];
    }

    bb107: {
        StorageDead(_272);
        _270 = [move _271];
        StorageDead(_271);
        _269 = &_270;
        _268 = &(*_269);
        _267 = move _268 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_268);
        _262 = Arguments::<'_>::new_v1(move _263, move _267) -> [return: bb108, unwind: bb311];
    }

    bb108: {
        StorageDead(_267);
        StorageDead(_263);
        _261 = format(move _262) -> [return: bb109, unwind: bb311];
    }

    bb109: {
        StorageDead(_262);
        StorageDead(_273);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_265);
        _260 = move _261;
        StorageDead(_261);
        _259 = &_260;
        _258 = &(*_259);
        _257 = <String as Deref>::deref(move _258) -> [return: bb110, unwind: bb307];
    }

    bb110: {
        _256 = &(*_257);
        StorageDead(_258);
        _255 = solana_program::log::sol_log(move _256) -> [return: bb111, unwind: bb307];
    }

    bb111: {
        StorageDead(_256);
        drop(_260) -> [return: bb112, unwind: bb311];
    }

    bb112: {
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_255);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _668 = const _;
        _284 = &(*_668);
        _283 = &(*_284);
        _282 = move _283 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_283);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _292 = &_236;
        _291 = &(*_292);
        _290 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _291) -> [return: bb113, unwind: bb311];
    }

    bb113: {
        StorageDead(_291);
        _289 = [move _290];
        StorageDead(_290);
        _288 = &_289;
        _287 = &(*_288);
        _286 = move _287 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_287);
        _281 = Arguments::<'_>::new_v1(move _282, move _286) -> [return: bb114, unwind: bb311];
    }

    bb114: {
        StorageDead(_286);
        StorageDead(_282);
        _280 = format(move _281) -> [return: bb115, unwind: bb311];
    }

    bb115: {
        StorageDead(_281);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_284);
        _279 = move _280;
        StorageDead(_280);
        _278 = &_279;
        _277 = &(*_278);
        _276 = <String as Deref>::deref(move _277) -> [return: bb116, unwind: bb306];
    }

    bb116: {
        _275 = &(*_276);
        StorageDead(_277);
        _274 = solana_program::log::sol_log(move _275) -> [return: bb117, unwind: bb306];
    }

    bb117: {
        StorageDead(_275);
        drop(_279) -> [return: bb118, unwind: bb311];
    }

    bb118: {
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_274);
        StorageLive(_293);
        _293 = _254;
        _250 = std::result::Result::<(), error::ErrorCode>::Err(move _293);
        StorageDead(_293);
        StorageDead(_254);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_251);
        _249 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _250) -> [return: bb120, unwind: bb311];
    }

    bb120: {
        StorageDead(_250);
        _294 = discriminant(_249);
        switchInt(move _294) -> [0: bb121, 1: bb122, otherwise: bb16];
    }

    bb121: {
        StorageLive(_298);
        _298 = ((_249 as Continue).0: ());
        _248 = _298;
        StorageDead(_298);
        StorageDead(_249);
        StorageDead(_248);
        _235 = const ();
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &mut (*_86);
        _303 = <RefMut<'_, User> as DerefMut>::deref_mut(move _304) -> [return: bb124, unwind: bb311];
    }

    bb122: {
        StorageLive(_295);
        _295 = ((_249 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_297);
        _297 = _295;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _297) -> [return: bb123, unwind: bb311];
    }

    bb123: {
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_249);
        StorageDead(_248);
        goto -> bb289;
    }

    bb124: {
        _302 = &mut (*_303);
        StorageDead(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &_84;
        _305 = &(*_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = &_81;
        _308 = &(*_309);
        _307 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _308);
        StorageDead(_308);
        StorageLive(_310);
        StorageLive(_311);
        _311 = &_128;
        _310 = &(*_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &_129;
        _312 = &(*_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &mut _130;
        _314 = &mut (*_315);
        StorageLive(_316);
        _316 = _119;
        StorageLive(_317);
        _317 = _110;
        StorageLive(_318);
        _318 = OrderActionExplanation::None;
        StorageLive(_319);
        _319 = Option::<state::user::MarketType>::None;
        StorageLive(_320);
        _320 = Option::<u16>::None;
        StorageLive(_321);
        _321 = Option::<controller::position::PositionDirection>::None;
        _301 = controller::orders::cancel_orders(move _302, move _305, move _307, move _310, move _312, move _314, move _316, move _317, move _318, move _319, move _320, move _321) -> [return: bb125, unwind: bb311];
    }

    bb125: {
        StorageDead(_321);
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_302);
        _300 = <std::result::Result<Vec<u32>, error::ErrorCode> as Try>::branch(move _301) -> [return: bb126, unwind: bb311];
    }

    bb126: {
        _705 = const true;
        StorageDead(_301);
        _322 = discriminant(_300);
        switchInt(move _322) -> [0: bb127, 1: bb128, otherwise: bb16];
    }

    bb127: {
        StorageLive(_326);
        _326 = move ((_300 as Continue).0: std::vec::Vec<u32>);
        _299 = move _326;
        StorageDead(_326);
        drop(_299) -> [return: bb130, unwind: bb327];
    }

    bb128: {
        StorageLive(_323);
        _323 = ((_300 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_325);
        _325 = _323;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _325) -> [return: bb129, unwind: bb327];
    }

    bb129: {
        StorageDead(_325);
        StorageDead(_323);
        _722 = discriminant(_300);
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_306);
        StorageDead(_303);
        _705 = const false;
        StorageDead(_300);
        StorageDead(_299);
        goto -> bb290;
    }

    bb130: {
        _724 = discriminant(_300);
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_306);
        StorageDead(_303);
        _705 = const false;
        StorageDead(_300);
        StorageDead(_299);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _333 = &mut (*_86);
        _332 = <RefMut<'_, User> as DerefMut>::deref_mut(move _333) -> [return: bb131, unwind: bb311];
    }

    bb131: {
        StorageDead(_333);
        _331 = &mut ((*_332).3: [state::user::SpotPosition; 8]);
        _330 = move _331 as &mut [state::user::SpotPosition] (PointerCoercion(Unsize));
        StorageDead(_331);
        _329 = core::slice::<impl [SpotPosition]>::iter_mut(move _330) -> [return: bb132, unwind: bb311];
    }

    bb132: {
        StorageDead(_330);
        _328 = <std::slice::IterMut<'_, SpotPosition> as IntoIterator>::into_iter(move _329) -> [return: bb133, unwind: bb311];
    }

    bb133: {
        StorageDead(_329);
        StorageLive(_334);
        _334 = move _328;
        goto -> bb134;
    }

    bb134: {
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = &mut _334;
        _338 = &mut (*_339);
        _337 = <std::slice::IterMut<'_, SpotPosition> as Iterator>::next(move _338) -> [return: bb135, unwind: bb311];
    }

    bb135: {
        StorageDead(_338);
        _340 = discriminant(_337);
        switchInt(move _340) -> [0: bb137, 1: bb136, otherwise: bb16];
    }

    bb136: {
        StorageLive(_342);
        _342 = move ((_337 as Some).0: &mut state::user::SpotPosition);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = &(*_342);
        _344 = SpotPosition::is_available(move _345) -> [return: bb138, unwind: bb311];
    }

    bb137: {
        _327 = const ();
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_328);
        StorageDead(_327);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        _585 = &(*_86);
        _584 = <RefMut<'_, User> as Deref>::deref(move _585) -> [return: bb241, unwind: bb311];
    }

    bb138: {
        switchInt(move _344) -> [0: bb140, otherwise: bb139];
    }

    bb139: {
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_336);
        goto -> bb134;
    }

    bb140: {
        StorageDead(_345);
        _343 = const ();
        StorageDead(_344);
        StorageDead(_343);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &_129;
        StorageLive(_352);
        StorageLive(_353);
        _353 = &((*_342).4: u16);
        _352 = &(*_353);
        _350 = SpotMarketMap::<'_>::get_ref_mut(move _351, move _352) -> [return: bb141, unwind: bb311];
    }

    bb141: {
        StorageDead(_352);
        StorageDead(_351);
        _349 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _350) -> [return: bb142, unwind: bb311];
    }

    bb142: {
        StorageDead(_350);
        _354 = discriminant(_349);
        switchInt(move _354) -> [0: bb143, 1: bb144, otherwise: bb16];
    }

    bb143: {
        StorageLive(_358);
        _358 = move ((_349 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _348 = move _358;
        StorageDead(_358);
        _347 = &mut _348;
        _728 = discriminant(_349);
        StorageDead(_353);
        StorageDead(_349);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &mut _130;
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = &(*_347);
        _367 = <RefMut<'_, SpotMarket> as Deref>::deref(move _368) -> [return: bb146, unwind: bb305];
    }

    bb144: {
        StorageLive(_355);
        _355 = ((_349 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_357);
        _357 = _355;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _357) -> [return: bb145, unwind: bb326];
    }

    bb145: {
        StorageDead(_357);
        StorageDead(_355);
        _726 = discriminant(_349);
        StorageDead(_353);
        StorageDead(_349);
        goto -> bb288;
    }

    bb146: {
        _366 = &(*_367);
        StorageDead(_368);
        _365 = SpotMarket::oracle_id(move _366) -> [return: bb147, unwind: bb305];
    }

    bb147: {
        StorageDead(_366);
        _364 = &_365;
        _363 = &(*_364);
        _361 = OracleMap::<'_>::get_price_data(move _362, move _363) -> [return: bb148, unwind: bb305];
    }

    bb148: {
        StorageDead(_363);
        StorageDead(_362);
        _360 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _361) -> [return: bb149, unwind: bb305];
    }

    bb149: {
        StorageDead(_361);
        _369 = discriminant(_360);
        switchInt(move _369) -> [0: bb150, 1: bb151, otherwise: bb16];
    }

    bb150: {
        StorageLive(_373);
        _373 = ((_360 as Continue).0: &state::oracle::OraclePriceData);
        _359 = _373;
        StorageDead(_373);
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_360);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _379 = &mut (*_347);
        _378 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _379) -> [return: bb153, unwind: bb305];
    }

    bb151: {
        StorageLive(_370);
        _370 = ((_360 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_372);
        _372 = _370;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _372) -> [return: bb152, unwind: bb305];
    }

    bb152: {
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_360);
        goto -> bb287;
    }

    bb153: {
        _377 = &mut (*_378);
        StorageDead(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &(*_359);
        _380 = Option::<&OraclePriceData>::Some(move _381);
        StorageDead(_381);
        StorageLive(_382);
        _382 = _119;
        _376 = controller::spot_balance::update_spot_market_cumulative_interest(move _377, move _380, move _382) -> [return: bb154, unwind: bb305];
    }

    bb154: {
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_377);
        _375 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _376) -> [return: bb155, unwind: bb305];
    }

    bb155: {
        StorageDead(_376);
        _383 = discriminant(_375);
        switchInt(move _383) -> [0: bb156, 1: bb157, otherwise: bb16];
    }

    bb156: {
        StorageLive(_387);
        _387 = ((_375 as Continue).0: ());
        _374 = _387;
        StorageDead(_387);
        StorageDead(_378);
        StorageDead(_375);
        StorageDead(_374);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &(*_342);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        _394 = &(*_347);
        _393 = <RefMut<'_, SpotMarket> as Deref>::deref(move _394) -> [return: bb159, unwind: bb305];
    }

    bb157: {
        StorageLive(_384);
        _384 = ((_375 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_386);
        _386 = _384;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _386) -> [return: bb158, unwind: bb305];
    }

    bb158: {
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_378);
        StorageDead(_375);
        StorageDead(_374);
        goto -> bb287;
    }

    bb159: {
        _392 = &(*_393);
        StorageDead(_394);
        _390 = SpotPosition::get_token_amount(move _391, move _392) -> [return: bb160, unwind: bb305];
    }

    bb160: {
        StorageDead(_392);
        StorageDead(_391);
        _389 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _390) -> [return: bb161, unwind: bb305];
    }

    bb161: {
        StorageDead(_390);
        _395 = discriminant(_389);
        switchInt(move _395) -> [0: bb162, 1: bb163, otherwise: bb16];
    }

    bb162: {
        StorageLive(_399);
        _399 = ((_389 as Continue).0: u128);
        _388 = _399;
        StorageDead(_399);
        StorageDead(_393);
        StorageDead(_389);
        StorageLive(_400);
        _400 = ((*_342).5: state::spot_market::SpotBalanceType);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &(*_347);
        _403 = <RefMut<'_, SpotMarket> as Deref>::deref(move _404) -> [return: bb165, unwind: bb305];
    }

    bb163: {
        StorageLive(_396);
        _396 = ((_389 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_398);
        _398 = _396;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _398) -> [return: bb164, unwind: bb305];
    }

    bb164: {
        StorageDead(_398);
        StorageDead(_396);
        StorageDead(_393);
        StorageDead(_389);
        goto -> bb286;
    }

    bb165: {
        _402 = &(*_403);
        StorageDead(_404);
        _401 = SpotMarket::get_token_program(move _402) -> [return: bb166, unwind: bb305];
    }

    bb166: {
        StorageDead(_402);
        StorageDead(_403);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _686 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _412 = &(*_686);
        _411 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _412) -> [return: bb167, unwind: bb305];
    }

    bb167: {
        _410 = &mut _411;
        StorageDead(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_401;
        _413 = {closure@programs/drift/src/instructions/keeper.rs:2973:19: 2973:24} { token_program_pubkey: move _414 };
        StorageDead(_414);
        _409 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::find::<{closure@programs/drift/src/instructions/keeper.rs:2973:19: 2973:24}>(move _410, move _413) -> [return: bb168, unwind: bb305];
    }

    bb168: {
        StorageDead(_413);
        StorageDead(_410);
        StorageLive(_415);
        _415 = {closure@programs/drift/src/instructions/keeper.rs:2974:18: 2974:23};
        _408 = Option::<&anchor_lang::prelude::AccountInfo<'_>>::map::<std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>, {closure@programs/drift/src/instructions/keeper.rs:2974:18: 2974:23}>(move _409, move _415) -> [return: bb169, unwind: bb305];
    }

    bb169: {
        StorageDead(_415);
        StorageDead(_409);
        _407 = Option::<std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>>::unwrap(move _408) -> [return: bb170, unwind: bb305];
    }

    bb170: {
        StorageDead(_408);
        _406 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::unwrap(move _407) -> [return: bb171, unwind: bb305];
    }

    bb171: {
        StorageDead(_407);
        _405 = &_406;
        StorageDead(_411);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &(*_347);
        _417 = <RefMut<'_, SpotMarket> as Deref>::deref(move _418) -> [return: bb172, unwind: bb305];
    }

    bb172: {
        StorageDead(_418);
        _416 = &((*_417).2: anchor_lang::prelude::Pubkey);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _687 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _423 = &(*_687);
        _422 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _423) -> [return: bb173, unwind: bb305];
    }

    bb173: {
        _421 = &mut _422;
        StorageDead(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &_416;
        _424 = {closure@programs/drift/src/instructions/keeper.rs:2982:19: 2982:24} { spot_market_mint: move _425 };
        StorageDead(_425);
        _420 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::find::<{closure@programs/drift/src/instructions/keeper.rs:2982:19: 2982:24}>(move _421, move _424) -> [return: bb174, unwind: bb305];
    }

    bb174: {
        StorageDead(_424);
        StorageDead(_421);
        StorageLive(_426);
        _426 = {closure@programs/drift/src/instructions/keeper.rs:2983:18: 2983:23};
        _419 = Option::<&anchor_lang::prelude::AccountInfo<'_>>::map::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>, {closure@programs/drift/src/instructions/keeper.rs:2983:18: 2983:23}>(move _420, move _426) -> [return: bb175, unwind: bb305];
    }

    bb175: {
        StorageDead(_426);
        StorageDead(_420);
        StorageDead(_422);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = &_81;
        _428 = &(*_429);
        StorageLive(_430);
        _430 = &(*_416);
        StorageLive(_431);
        StorageLive(_432);
        _432 = &_401;
        _431 = &(*_432);
        _427 = get_associated_token_address_with_program_id(move _428, move _430, move _431) -> [return: bb176, unwind: bb305];
    }

    bb176: {
        StorageDead(_431);
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_432);
        StorageDead(_429);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _688 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _439 = &(*_688);
        _438 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _439) -> [return: bb177, unwind: bb305];
    }

    bb177: {
        _437 = &mut _438;
        StorageDead(_439);
        StorageLive(_440);
        StorageLive(_441);
        _441 = &_427;
        _440 = {closure@programs/drift/src/instructions/keeper.rs:2993:19: 2993:24} { keeper_vault: move _441 };
        StorageDead(_441);
        _436 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::find::<{closure@programs/drift/src/instructions/keeper.rs:2993:19: 2993:24}>(move _437, move _440) -> [return: bb178, unwind: bb305];
    }

    bb178: {
        StorageDead(_440);
        StorageDead(_437);
        StorageLive(_442);
        _442 = {closure@programs/drift/src/instructions/keeper.rs:2994:18: 2994:23};
        _435 = Option::<&anchor_lang::prelude::AccountInfo<'_>>::map::<std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>, {closure@programs/drift/src/instructions/keeper.rs:2994:18: 2994:23}>(move _436, move _442) -> [return: bb179, unwind: bb305];
    }

    bb179: {
        StorageDead(_442);
        StorageDead(_436);
        _434 = Option::<std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>>::unwrap(move _435) -> [return: bb180, unwind: bb305];
    }

    bb180: {
        StorageDead(_435);
        _433 = std::result::Result::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>::unwrap(move _434) -> [return: bb181, unwind: bb305];
    }

    bb181: {
        StorageDead(_434);
        StorageDead(_438);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = &(*_347);
        _444 = <RefMut<'_, SpotMarket> as Deref>::deref(move _445) -> [return: bb182, unwind: bb305];
    }

    bb182: {
        StorageDead(_445);
        _443 = ((*_444).3: anchor_lang::prelude::Pubkey);
        StorageDead(_444);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _689 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _452 = &(*_689);
        _451 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _452) -> [return: bb183, unwind: bb305];
    }

    bb183: {
        _450 = &mut _451;
        StorageDead(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = &_443;
        _453 = {closure@programs/drift/src/instructions/keeper.rs:3002:19: 3002:24} { spot_market_vault: move _454 };
        StorageDead(_454);
        _449 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::find::<{closure@programs/drift/src/instructions/keeper.rs:3002:19: 3002:24}>(move _450, move _453) -> [return: bb184, unwind: bb305];
    }

    bb184: {
        StorageDead(_453);
        StorageDead(_450);
        StorageLive(_455);
        _455 = {closure@programs/drift/src/instructions/keeper.rs:3003:18: 3003:23};
        _448 = Option::<&anchor_lang::prelude::AccountInfo<'_>>::map::<std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>, {closure@programs/drift/src/instructions/keeper.rs:3003:18: 3003:23}>(move _449, move _455) -> [return: bb185, unwind: bb305];
    }

    bb185: {
        StorageDead(_455);
        StorageDead(_449);
        _447 = Option::<std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>>::unwrap(move _448) -> [return: bb186, unwind: bb305];
    }

    bb186: {
        StorageDead(_448);
        _446 = std::result::Result::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>::unwrap(move _447) -> [return: bb187, unwind: bb305];
    }

    bb187: {
        StorageDead(_447);
        StorageDead(_451);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = &_400;
        StorageLive(_459);
        _667 = const _;
        _459 = &(*_667);
        _457 = <SpotBalanceType as PartialEq>::eq(move _458, move _459) -> [return: bb188, unwind: bb305];
    }

    bb188: {
        switchInt(move _457) -> [0: bb207, otherwise: bb189];
    }

    bb189: {
        StorageDead(_459);
        StorageDead(_458);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = _388;
        StorageLive(_465);
        StorageLive(_466);
        _665 = const _;
        _466 = &(*_665);
        _465 = &(*_466);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _470 = &mut (*_347);
        _469 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _470) -> [return: bb190, unwind: bb305];
    }

    bb190: {
        _468 = &mut (*_469);
        StorageDead(_470);
        StorageLive(_471);
        StorageLive(_472);
        _472 = &mut (*_342);
        _471 = move _472 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_472);
        _463 = update_spot_balances(move _464, move _465, move _468, move _471, const true) -> [return: bb191, unwind: bb305];
    }

    bb191: {
        StorageDead(_471);
        StorageDead(_468);
        StorageDead(_465);
        StorageDead(_464);
        _462 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _463) -> [return: bb192, unwind: bb305];
    }

    bb192: {
        StorageDead(_463);
        _473 = discriminant(_462);
        switchInt(move _473) -> [0: bb193, 1: bb194, otherwise: bb16];
    }

    bb193: {
        StorageLive(_477);
        _477 = ((_462 as Continue).0: ());
        _461 = _477;
        StorageDead(_477);
        StorageDead(_469);
        StorageDead(_466);
        StorageDead(_462);
        StorageDead(_461);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &_405;
        _690 = deref_copy (*_482);
        _481 = &(*_690);
        StorageLive(_483);
        StorageLive(_484);
        _484 = &_446;
        _483 = &(*_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &_433;
        _485 = &(*_486);
        StorageLive(_487);
        StorageLive(_488);
        _691 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _488 = &((*_691).5: anchor_lang::prelude::AccountInfo<'_>);
        _487 = &(*_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        _692 = deref_copy (*_80);
        _763 = (((_692.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _491 = &(*_763);
        _490 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _491) -> [return: bb196, unwind: bb305];
    }

    bb194: {
        StorageLive(_474);
        _474 = ((_462 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_476);
        _476 = _474;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _476) -> [return: bb195, unwind: bb305];
    }

    bb195: {
        StorageDead(_476);
        StorageDead(_474);
        StorageDead(_469);
        StorageDead(_466);
        StorageDead(_462);
        StorageDead(_461);
        goto -> bb284;
    }

    bb196: {
        StorageDead(_491);
        _489 = ((*_490).15: u8);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        _495 = _388;
        _494 = <u128 as Cast>::cast::<u64>(move _495) -> [return: bb197, unwind: bb305];
    }

    bb197: {
        StorageDead(_495);
        _493 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _494) -> [return: bb198, unwind: bb305];
    }

    bb198: {
        StorageDead(_494);
        _496 = discriminant(_493);
        switchInt(move _496) -> [0: bb199, 1: bb200, otherwise: bb16];
    }

    bb199: {
        StorageLive(_500);
        _500 = ((_493 as Continue).0: u64);
        _492 = _500;
        StorageDead(_500);
        StorageLive(_501);
        StorageLive(_502);
        _502 = &_419;
        _501 = &(*_502);
        StorageLive(_503);
        _503 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        _480 = send_from_program_vault(move _481, move _483, move _485, move _487, move _489, move _492, move _501, move _503) -> [return: bb202, unwind: bb305];
    }

    bb200: {
        StorageLive(_497);
        _497 = ((_493 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_499);
        _499 = _497;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _499) -> [return: bb201, unwind: bb305];
    }

    bb201: {
        StorageDead(_499);
        StorageDead(_497);
        StorageDead(_492);
        StorageDead(_489);
        StorageDead(_487);
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_481);
        StorageDead(_480);
        goto -> bb283;
    }

    bb202: {
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_492);
        StorageDead(_489);
        StorageDead(_487);
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_481);
        _479 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _480) -> [return: bb203, unwind: bb305];
    }

    bb203: {
        StorageDead(_480);
        _504 = discriminant(_479);
        switchInt(move _504) -> [0: bb204, 1: bb205, otherwise: bb16];
    }

    bb204: {
        StorageLive(_508);
        _508 = ((_479 as Continue).0: ());
        _478 = _508;
        StorageDead(_508);
        _730 = discriminant(_479);
        StorageDead(_502);
        StorageDead(_493);
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_484);
        StorageDead(_482);
        StorageDead(_479);
        StorageDead(_478);
        _456 = const ();
        goto -> bb226;
    }

    bb205: {
        StorageLive(_505);
        _505 = move ((_479 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_507);
        _507 = move _505;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _507) -> [return: bb206, unwind: bb325];
    }

    bb206: {
        StorageDead(_507);
        StorageDead(_505);
        _744 = discriminant(_479);
        StorageDead(_502);
        goto -> bb283;
    }

    bb207: {
        StorageDead(_459);
        StorageDead(_458);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        _512 = _388;
        StorageLive(_513);
        StorageLive(_514);
        _666 = const _;
        _514 = &(*_666);
        _513 = &(*_514);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        _518 = &mut (*_347);
        _517 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _518) -> [return: bb208, unwind: bb305];
    }

    bb208: {
        _516 = &mut (*_517);
        StorageDead(_518);
        StorageLive(_519);
        StorageLive(_520);
        _520 = &mut (*_342);
        _519 = move _520 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_520);
        _511 = update_spot_balances(move _512, move _513, move _516, move _519, const false) -> [return: bb209, unwind: bb305];
    }

    bb209: {
        StorageDead(_519);
        StorageDead(_516);
        StorageDead(_513);
        StorageDead(_512);
        _510 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _511) -> [return: bb210, unwind: bb305];
    }

    bb210: {
        StorageDead(_511);
        _521 = discriminant(_510);
        switchInt(move _521) -> [0: bb211, 1: bb212, otherwise: bb16];
    }

    bb211: {
        StorageLive(_525);
        _525 = ((_510 as Continue).0: ());
        _509 = _525;
        StorageDead(_525);
        StorageDead(_517);
        StorageDead(_514);
        StorageDead(_510);
        StorageDead(_509);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        _529 = &(*_405);
        StorageLive(_530);
        StorageLive(_531);
        _531 = &_433;
        _530 = &(*_531);
        StorageLive(_532);
        StorageLive(_533);
        _533 = &_446;
        _532 = &(*_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _693 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _537 = &((*_693).4: anchor_lang::prelude::Signer<'_>);
        _536 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _537) -> [return: bb214, unwind: bb305];
    }

    bb212: {
        StorageLive(_522);
        _522 = ((_510 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_524);
        _524 = _522;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _524) -> [return: bb213, unwind: bb305];
    }

    bb213: {
        StorageDead(_524);
        StorageDead(_522);
        StorageDead(_517);
        StorageDead(_514);
        StorageDead(_510);
        StorageDead(_509);
        goto -> bb284;
    }

    bb214: {
        StorageDead(_537);
        _535 = &_536;
        _534 = &(*_535);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = _388;
        _540 = <u128 as Cast>::cast::<u64>(move _541) -> [return: bb215, unwind: bb304];
    }

    bb215: {
        StorageDead(_541);
        _539 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _540) -> [return: bb216, unwind: bb304];
    }

    bb216: {
        StorageDead(_540);
        _542 = discriminant(_539);
        switchInt(move _542) -> [0: bb217, 1: bb218, otherwise: bb16];
    }

    bb217: {
        StorageLive(_546);
        _546 = ((_539 as Continue).0: u64);
        _538 = _546;
        StorageDead(_546);
        StorageLive(_547);
        StorageLive(_548);
        _548 = &_419;
        _547 = &(*_548);
        StorageLive(_549);
        _549 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        _528 = receive(move _529, move _530, move _532, move _534, move _538, move _547, move _549) -> [return: bb220, unwind: bb304];
    }

    bb218: {
        StorageLive(_543);
        _543 = ((_539 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_545);
        _545 = _543;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _545) -> [return: bb219, unwind: bb304];
    }

    bb219: {
        StorageDead(_545);
        StorageDead(_543);
        StorageDead(_538);
        StorageDead(_534);
        StorageDead(_532);
        StorageDead(_530);
        StorageDead(_529);
        StorageDead(_528);
        goto -> bb281;
    }

    bb220: {
        StorageDead(_549);
        StorageDead(_547);
        StorageDead(_538);
        StorageDead(_534);
        StorageDead(_532);
        StorageDead(_530);
        StorageDead(_529);
        _527 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _528) -> [return: bb221, unwind: bb304];
    }

    bb221: {
        StorageDead(_528);
        _550 = discriminant(_527);
        switchInt(move _550) -> [0: bb222, 1: bb223, otherwise: bb16];
    }

    bb222: {
        StorageLive(_554);
        _554 = ((_527 as Continue).0: ());
        _526 = _554;
        StorageDead(_554);
        _732 = discriminant(_527);
        StorageDead(_548);
        StorageDead(_539);
        drop(_536) -> [return: bb225, unwind: bb305];
    }

    bb223: {
        StorageLive(_551);
        _551 = move ((_527 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_553);
        _553 = move _551;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _553) -> [return: bb224, unwind: bb324];
    }

    bb224: {
        StorageDead(_553);
        StorageDead(_551);
        _742 = discriminant(_527);
        StorageDead(_548);
        goto -> bb281;
    }

    bb225: {
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_531);
        StorageDead(_527);
        StorageDead(_526);
        _456 = const ();
        goto -> bb226;
    }

    bb226: {
        StorageDead(_457);
        StorageDead(_456);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        _558 = &mut _446;
        _557 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _558) -> [return: bb227, unwind: bb305];
    }

    bb227: {
        StorageDead(_558);
        _556 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _557) -> [return: bb228, unwind: bb305];
    }

    bb228: {
        StorageDead(_557);
        _559 = discriminant(_556);
        switchInt(move _559) -> [0: bb229, 1: bb230, otherwise: bb16];
    }

    bb229: {
        StorageLive(_563);
        _563 = ((_556 as Continue).0: ());
        _555 = _563;
        StorageDead(_563);
        _734 = discriminant(_556);
        StorageDead(_556);
        StorageDead(_555);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        _569 = &(*_347);
        _568 = <RefMut<'_, SpotMarket> as Deref>::deref(move _569) -> [return: bb232, unwind: bb305];
    }

    bb230: {
        StorageLive(_560);
        _560 = move ((_556 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_562);
        _562 = move _560;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _562) -> [return: bb231, unwind: bb323];
    }

    bb231: {
        StorageDead(_562);
        StorageDead(_560);
        _740 = discriminant(_556);
        StorageDead(_556);
        StorageDead(_555);
        goto -> bb285;
    }

    bb232: {
        _567 = &(*_568);
        StorageDead(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        _574 = &_446;
        _573 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _574) -> [return: bb233, unwind: bb305];
    }

    bb233: {
        _572 = &(*_573);
        _571 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _572) -> [return: bb234, unwind: bb305];
    }

    bb234: {
        StorageDead(_574);
        StorageDead(_572);
        _570 = ((*_571).2: u64);
        _566 = validate_spot_market_vault_amount(move _567, move _570) -> [return: bb235, unwind: bb305];
    }

    bb235: {
        StorageDead(_570);
        StorageDead(_567);
        _565 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _566) -> [return: bb236, unwind: bb305];
    }

    bb236: {
        StorageDead(_566);
        _575 = discriminant(_565);
        switchInt(move _575) -> [0: bb237, 1: bb238, otherwise: bb16];
    }

    bb237: {
        StorageLive(_579);
        _579 = ((_565 as Continue).0: i64);
        _564 = _579;
        StorageDead(_579);
        StorageDead(_573);
        StorageDead(_571);
        StorageDead(_568);
        StorageDead(_565);
        StorageDead(_564);
        _336 = const ();
        StorageDead(_446);
        StorageDead(_443);
        StorageDead(_433);
        StorageDead(_427);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_388);
        StorageDead(_359);
        drop(_348) -> [return: bb240, unwind: bb311];
    }

    bb238: {
        StorageLive(_576);
        _576 = ((_565 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_578);
        _578 = _576;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _578) -> [return: bb239, unwind: bb305];
    }

    bb239: {
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_573);
        StorageDead(_571);
        StorageDead(_568);
        StorageDead(_565);
        StorageDead(_564);
        goto -> bb285;
    }

    bb240: {
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_336);
        _335 = const ();
        goto -> bb134;
    }

    bb241: {
        _583 = &(*_584);
        StorageDead(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        _588 = &(*_98);
        _587 = <RefMut<'_, UserStats> as Deref>::deref(move _588) -> [return: bb242, unwind: bb311];
    }

    bb242: {
        _586 = &(*_587);
        StorageDead(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        _694 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _592 = &((*_694).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _695 = deref_copy (*_592);
        _764 = (((_695.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _591 = &(*_764);
        _590 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _591) -> [return: bb243, unwind: bb311];
    }

    bb243: {
        _589 = &(*_590);
        StorageDead(_591);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        _596 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb244, unwind: bb311];
    }

    bb244: {
        _595 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _596) -> [return: bb245, unwind: bb311];
    }

    bb245: {
        _703 = const true;
        _704 = const true;
        StorageDead(_596);
        _597 = discriminant(_595);
        switchInt(move _597) -> [0: bb246, 1: bb247, otherwise: bb16];
    }

    bb246: {
        StorageLive(_601);
        _601 = move ((_595 as Continue).0: anchor_lang::prelude::Clock);
        _594 = move _601;
        StorageDead(_601);
        _593 = (_594.4: i64);
        _582 = validate_user_deletion(move _583, move _586, move _589, move _593) -> [return: bb249, unwind: bb322];
    }

    bb247: {
        StorageLive(_598);
        _598 = move ((_595 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_600);
        _600 = move _598;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _600) -> [return: bb248, unwind: bb322];
    }

    bb248: {
        StorageDead(_600);
        StorageDead(_598);
        StorageDead(_593);
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_583);
        StorageDead(_582);
        goto -> bb321;
    }

    bb249: {
        StorageDead(_593);
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_583);
        _581 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _582) -> [return: bb250, unwind: bb322];
    }

    bb250: {
        StorageDead(_582);
        _602 = discriminant(_581);
        switchInt(move _602) -> [0: bb251, 1: bb252, otherwise: bb16];
    }

    bb251: {
        StorageLive(_606);
        _606 = ((_581 as Continue).0: ());
        _580 = _606;
        StorageDead(_606);
        _736 = discriminant(_595);
        _703 = const false;
        _704 = const false;
        StorageDead(_595);
        StorageDead(_594);
        StorageDead(_592);
        StorageDead(_590);
        StorageDead(_587);
        StorageDead(_584);
        StorageDead(_581);
        StorageDead(_580);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        _614 = &(*_98);
        _613 = <RefMut<'_, UserStats> as Deref>::deref(move _614) -> [return: bb254, unwind: bb311];
    }

    bb252: {
        StorageLive(_603);
        _603 = ((_581 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_605);
        _605 = _603;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _605) -> [return: bb253, unwind: bb322];
    }

    bb253: {
        StorageDead(_605);
        StorageDead(_603);
        goto -> bb321;
    }

    bb254: {
        StorageDead(_614);
        _612 = ((*_613).11: u16);
        _611 = core::num::<impl u16>::checked_sub(move _612, const 1_u16) -> [return: bb255, unwind: bb311];
    }

    bb255: {
        StorageDead(_612);
        StorageLive(_615);
        _615 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _610 = Option::<u16>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _611, move _615) -> [return: bb256, unwind: bb311];
    }

    bb256: {
        StorageDead(_615);
        StorageDead(_611);
        _609 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _610) -> [return: bb257, unwind: bb311];
    }

    bb257: {
        StorageDead(_610);
        _616 = discriminant(_609);
        switchInt(move _616) -> [0: bb258, 1: bb259, otherwise: bb16];
    }

    bb258: {
        StorageLive(_620);
        _620 = ((_609 as Continue).0: u16);
        _608 = _620;
        StorageDead(_620);
        StorageLive(_621);
        StorageLive(_622);
        _622 = &mut (*_98);
        _621 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _622) -> [return: bb261, unwind: bb311];
    }

    bb259: {
        StorageLive(_617);
        _617 = ((_609 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_619);
        _619 = _617;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _619) -> [return: bb260, unwind: bb311];
    }

    bb260: {
        StorageDead(_619);
        StorageDead(_617);
        StorageDead(_608);
        StorageDead(_613);
        StorageDead(_609);
        StorageDead(_607);
        goto -> bb290;
    }

    bb261: {
        StorageDead(_622);
        ((*_621).11: u16) = move _608;
        _607 = const ();
        StorageDead(_608);
        StorageDead(_621);
        StorageDead(_613);
        StorageDead(_609);
        StorageDead(_607);
        StorageLive(_623);
        _696 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _623 = &mut ((*_696).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        _697 = deref_copy (*_623);
        _765 = (((_697.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _631 = &(*_765);
        _630 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _631) -> [return: bb262, unwind: bb311];
    }

    bb262: {
        StorageDead(_631);
        _629 = ((*_630).9: u64);
        _628 = core::num::<impl u64>::checked_sub(move _629, const 1_u64) -> [return: bb263, unwind: bb311];
    }

    bb263: {
        StorageDead(_629);
        StorageLive(_632);
        _632 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _627 = Option::<u64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _628, move _632) -> [return: bb264, unwind: bb311];
    }

    bb264: {
        StorageDead(_632);
        StorageDead(_628);
        _626 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _627) -> [return: bb265, unwind: bb311];
    }

    bb265: {
        StorageDead(_627);
        _633 = discriminant(_626);
        switchInt(move _633) -> [0: bb266, 1: bb267, otherwise: bb16];
    }

    bb266: {
        StorageLive(_637);
        _637 = ((_626 as Continue).0: u64);
        _625 = _637;
        StorageDead(_637);
        StorageLive(_638);
        StorageLive(_639);
        _698 = deref_copy (*_623);
        _766 = (((_698.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _639 = &mut (*_766);
        _638 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _639) -> [return: bb269, unwind: bb311];
    }

    bb267: {
        StorageLive(_634);
        _634 = ((_626 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_636);
        _636 = _634;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _636) -> [return: bb268, unwind: bb311];
    }

    bb268: {
        StorageDead(_636);
        StorageDead(_634);
        StorageDead(_625);
        StorageDead(_630);
        StorageDead(_626);
        StorageDead(_624);
        StorageDead(_623);
        goto -> bb290;
    }

    bb269: {
        StorageDead(_639);
        ((*_638).9: u64) = move _625;
        _624 = const ();
        StorageDead(_625);
        StorageDead(_638);
        StorageDead(_630);
        StorageDead(_626);
        StorageDead(_624);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        _654 = _119;
        StorageLive(_655);
        _699 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _700 = deref_copy (((*_699).3: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        _655 = (*_700);
        StorageLive(_656);
        _656 = _84;
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        _659 = &(*_86);
        _658 = <RefMut<'_, User> as Deref>::deref(move _659) -> [return: bb270, unwind: bb311];
    }

    bb270: {
        StorageDead(_659);
        _657 = ((*_658).18: u16);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        _701 = deref_copy (_1.1: &mut instructions::keeper::ForceDeleteUser<'_>);
        _663 = &((*_701).4: anchor_lang::prelude::Signer<'_>);
        _662 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _663) -> [return: bb271, unwind: bb311];
    }

    bb271: {
        StorageDead(_663);
        _702 = deref_copy ((*_662).0: &anchor_lang::prelude::Pubkey);
        _661 = (*_702);
        _660 = Option::<anchor_lang::prelude::Pubkey>::Some(move _661);
        StorageDead(_661);
        _653 = DeleteUserRecord { ts: move _654, user_authority: move _655, user: move _656, sub_account_id: move _657, keeper: move _660 };
        StorageDead(_660);
        StorageDead(_657);
        StorageDead(_656);
        StorageDead(_655);
        StorageDead(_654);
        _652 = &_653;
        _651 = &(*_652);
        _650 = <DeleteUserRecord as anchor_lang::Event>::data(move _651) -> [return: bb272, unwind: bb311];
    }

    bb272: {
        StorageDead(_651);
        _649 = &_650;
        _648 = &(*_649);
        _647 = <Vec<u8> as Deref>::deref(move _648) -> [return: bb273, unwind: bb303];
    }

    bb273: {
        _646 = &(*_647);
        StorageDead(_648);
        _645 = [move _646];
        StorageDead(_646);
        _644 = &_645;
        _643 = &(*_644);
        _642 = move _643 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_643);
        _641 = solana_program::log::sol_log_data(move _642) -> [return: bb274, unwind: bb303];
    }

    bb274: {
        StorageDead(_642);
        drop(_650) -> [return: bb275, unwind: bb311];
    }

    bb275: {
        StorageDead(_662);
        StorageDead(_658);
        StorageDead(_653);
        StorageDead(_652);
        StorageDead(_650);
        StorageDead(_649);
        StorageDead(_647);
        StorageDead(_645);
        StorageDead(_644);
        StorageDead(_641);
        _640 = const ();
        StorageDead(_640);
        StorageLive(_664);
        _664 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _664);
        StorageDead(_664);
        StorageDead(_623);
        StorageDead(_178);
        StorageDead(_160);
        drop(_130) -> [return: bb276, unwind: bb312];
    }

    bb276: {
        StorageDead(_130);
        drop(_129) -> [return: bb277, unwind: bb313];
    }

    bb277: {
        StorageDead(_129);
        drop(_128) -> [return: bb278, unwind: bb316];
    }

    bb278: {
        StorageDead(_128);
        StorageDead(_119);
        StorageDead(_110);
        drop(_99) -> [return: bb279, unwind: bb317];
    }

    bb279: {
        StorageDead(_99);
        StorageDead(_98);
        drop(_87) -> [return: bb280, unwind: bb320];
    }

    bb280: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_42);
        goto -> bb302;
    }

    bb281: {
        StorageDead(_539);
        drop(_536) -> [return: bb282, unwind: bb305];
    }

    bb282: {
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_531);
        StorageDead(_527);
        StorageDead(_526);
        goto -> bb284;
    }

    bb283: {
        StorageDead(_493);
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_484);
        StorageDead(_482);
        StorageDead(_479);
        StorageDead(_478);
        goto -> bb284;
    }

    bb284: {
        StorageDead(_457);
        StorageDead(_456);
        goto -> bb285;
    }

    bb285: {
        StorageDead(_446);
        StorageDead(_443);
        StorageDead(_433);
        StorageDead(_427);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_401);
        StorageDead(_400);
        goto -> bb286;
    }

    bb286: {
        StorageDead(_388);
        goto -> bb287;
    }

    bb287: {
        StorageDead(_359);
        drop(_348) -> [return: bb288, unwind: bb311];
    }

    bb288: {
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_328);
        StorageDead(_327);
        goto -> bb290;
    }

    bb289: {
        StorageDead(_236);
        StorageDead(_235);
        goto -> bb290;
    }

    bb290: {
        StorageDead(_178);
        StorageDead(_160);
        goto -> bb291;
    }

    bb291: {
        drop(_130) -> [return: bb292, unwind: bb312];
    }

    bb292: {
        StorageDead(_130);
        drop(_129) -> [return: bb293, unwind: bb313];
    }

    bb293: {
        StorageDead(_129);
        drop(_128) -> [return: bb294, unwind: bb316];
    }

    bb294: {
        StorageDead(_128);
        goto -> bb297;
    }

    bb295: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        drop(_141) -> [return: bb296, unwind: bb316];
    }

    bb296: {
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb297;
    }

    bb297: {
        StorageDead(_119);
        goto -> bb298;
    }

    bb298: {
        StorageDead(_110);
        drop(_99) -> [return: bb299, unwind: bb317];
    }

    bb299: {
        StorageDead(_99);
        StorageDead(_98);
        drop(_87) -> [return: bb300, unwind: bb320];
    }

    bb300: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb301;
    }

    bb301: {
        StorageDead(_42);
        goto -> bb302;
    }

    bb302: {
        return;
    }

    bb303 (cleanup): {
        drop(_650) -> [return: bb311, unwind terminate(cleanup)];
    }

    bb304 (cleanup): {
        drop(_536) -> [return: bb305, unwind terminate(cleanup)];
    }

    bb305 (cleanup): {
        drop(_348) -> [return: bb311, unwind terminate(cleanup)];
    }

    bb306 (cleanup): {
        drop(_279) -> [return: bb311, unwind terminate(cleanup)];
    }

    bb307 (cleanup): {
        drop(_260) -> [return: bb311, unwind terminate(cleanup)];
    }

    bb308 (cleanup): {
        drop(_215) -> [return: bb311, unwind terminate(cleanup)];
    }

    bb309 (cleanup): {
        drop(_196) -> [return: bb311, unwind terminate(cleanup)];
    }

    bb310 (cleanup): {
        drop(_141) -> [return: bb311, unwind terminate(cleanup)];
    }

    bb311 (cleanup): {
        drop(_130) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb312 (cleanup): {
        drop(_129) -> [return: bb313, unwind terminate(cleanup)];
    }

    bb313 (cleanup): {
        drop(_128) -> [return: bb316, unwind terminate(cleanup)];
    }

    bb314 (cleanup): {
        drop(_144) -> [return: bb315, unwind terminate(cleanup)];
    }

    bb315 (cleanup): {
        drop(_141) -> [return: bb316, unwind terminate(cleanup)];
    }

    bb316 (cleanup): {
        drop(_99) -> [return: bb317, unwind terminate(cleanup)];
    }

    bb317 (cleanup): {
        drop(_87) -> [return: bb320, unwind terminate(cleanup)];
    }

    bb318 (cleanup): {
        drop(_57) -> [return: bb320, unwind terminate(cleanup)];
    }

    bb319 (cleanup): {
        drop(_19) -> [return: bb320, unwind terminate(cleanup)];
    }

    bb320 (cleanup): {
        resume;
    }

    bb321: {
        _738 = discriminant(_595);
        _703 = const false;
        _704 = const false;
        StorageDead(_595);
        StorageDead(_594);
        StorageDead(_592);
        StorageDead(_590);
        StorageDead(_587);
        StorageDead(_584);
        StorageDead(_581);
        StorageDead(_580);
        goto -> bb290;
    }

    bb322 (cleanup): {
        _750 = discriminant(_595);
        goto -> bb311;
    }

    bb323 (cleanup): {
        _751 = discriminant(_556);
        goto -> bb305;
    }

    bb324 (cleanup): {
        _752 = discriminant(_527);
        goto -> bb304;
    }

    bb325 (cleanup): {
        _753 = discriminant(_479);
        goto -> bb305;
    }

    bb326 (cleanup): {
        _754 = discriminant(_349);
        goto -> bb311;
    }

    bb327 (cleanup): {
        _755 = discriminant(_300);
        goto -> bb311;
    }

    bb328 (cleanup): {
        _757 = discriminant(_132);
        goto -> bb314;
    }

    bb329 (cleanup): {
        _758 = discriminant(_121);
        goto -> bb316;
    }

    bb330 (cleanup): {
        _759 = discriminant(_112);
        goto -> bb316;
    }

    bb331 (cleanup): {
        _760 = discriminant(_100);
        goto -> bb317;
    }

    bb332 (cleanup): {
        _761 = discriminant(_88);
        goto -> bb320;
    }
}
