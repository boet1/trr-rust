// MIR for `calculate_spread_revenue_retreat_amount` after PreCodegen

fn calculate_spread_revenue_retreat_amount(_1: u32, _2: u64, _3: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug base_spread => _1;
    debug max_spread => _2;
    debug net_revenue_since_last_funding => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _4: u64;
    let mut _5: bool;
    let mut _6: i64;
    let _7: u64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _9: std::result::Result<u64, error::ErrorCode>;
    let mut _10: u64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u64;
    let mut _16: bool;
    let mut _17: i64;
    let mut _18: i64;
    let mut _19: (i64, bool);
    let mut _20: u64;
    let mut _21: u64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _23: std::result::Result<u64, error::ErrorCode>;
    let mut _24: u64;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _26: std::result::Result<u64, error::ErrorCode>;
    let mut _27: u64;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _29: std::result::Result<u64, error::ErrorCode>;
    let mut _30: u32;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: i64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u64;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: u64;
    scope 1 {
        debug revenue_retreat_amount => _4;
    }
    scope 2 {
        debug max_retreat => _7;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: u64;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: u64;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: u64;
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _39;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _42;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _45;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _48;
            scope 18 {
            }
        }
    }
    scope 3 {
        debug residual => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _15;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = Lt(move _6, const _);
        switchInt(move _5) -> [0: bb30, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        _9 = <u64 as SafeMath>::safe_div(move _10, const 10_u64) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _8 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: u64);
        _7 = _15;
        StorageDead(_15);
        StorageDead(_8);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _3;
        StorageLive(_18);
        _19 = CheckedMul(const _, const 1000_i64);
        assert(!move (_19.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 1000_i64) -> [success: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_8);
        goto -> bb34;
    }

    bb8: {
        _18 = move (_19.0: i64);
        _16 = Ge(move _17, move _18);
        switchInt(move _16) -> [0: bb28, otherwise: bb9];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_20);
        _20 = _7;
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _1;
        _29 = <u32 as Cast>::cast::<u64>(move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_30);
        _28 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb12, 1: bb13, otherwise: bb5];
    }

    bb12: {
        StorageLive(_35);
        _35 = ((_28 as Continue).0: u64);
        _27 = _35;
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _3;
        _36 = core::num::<impl i64>::unsigned_abs(move _37) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_32);
        _32 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb32;
    }

    bb15: {
        StorageDead(_37);
        _26 = <u64 as SafeMath>::safe_mul(move _27, move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_27);
        _25 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _26) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_26);
        _38 = discriminant(_25);
        switchInt(move _38) -> [0: bb18, 1: bb19, otherwise: bb5];
    }

    bb18: {
        StorageLive(_42);
        _42 = ((_25 as Continue).0: u64);
        _24 = _42;
        StorageDead(_42);
        StorageLive(_43);
        _43 = core::num::<impl i64>::unsigned_abs(const _) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_39);
        _39 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb32;
    }

    bb21: {
        _23 = <u64 as SafeMath>::safe_div(move _24, move _43) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_24);
        _22 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _23) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_23);
        _44 = discriminant(_22);
        switchInt(move _44) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_48);
        _48 = ((_22 as Continue).0: u64);
        _21 = _48;
        StorageDead(_48);
        _4 = std::cmp::min::<u64>(move _20, move _21) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_45);
        _45 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb33;
    }

    bb27: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        goto -> bb29;
    }

    bb28: {
        StorageDead(_18);
        StorageDead(_17);
        _4 = _7;
        goto -> bb29;
    }

    bb29: {
        StorageDead(_16);
        StorageDead(_7);
        goto -> bb31;
    }

    bb30: {
        StorageDead(_6);
        _4 = const 0_u64;
        goto -> bb31;
    }

    bb31: {
        StorageDead(_5);
        StorageLive(_49);
        _49 = _4;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _49);
        StorageDead(_49);
        StorageDead(_4);
        goto -> bb35;
    }

    bb32: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_16);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb35;
    }

    bb35: {
        return;
    }
}
