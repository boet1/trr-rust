// MIR for `math::orders::get_position_delta_for_fill` before PreCodegen

fn math::orders::get_position_delta_for_fill(_1: u64, _2: u64, _3: controller::position::PositionDirection) -> std::result::Result<PositionDelta, error::ErrorCode> {
    debug base_asset_amount => _1;
    debug quote_asset_amount => _2;
    debug direction => _3;
    let mut _0: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _4: controller::position::PositionDelta;
    let mut _5: i64;
    let mut _6: isize;
    let mut _7: i64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _9: std::result::Result<i64, error::ErrorCode>;
    let mut _10: u64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i64;
    let mut _16: bool;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _18: std::result::Result<i64, error::ErrorCode>;
    let mut _19: u64;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: i64;
    let mut _25: i64;
    let mut _26: isize;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _28: std::result::Result<i64, error::ErrorCode>;
    let mut _29: u64;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: i64;
    let mut _35: i64;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _37: std::result::Result<i64, error::ErrorCode>;
    let mut _38: u64;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: i64;
    let mut _44: bool;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _31;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _34;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _40;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _43;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _2;
        _18 = <u64 as Cast>::cast::<i64>(move _19) -> [return: bb10, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        _9 = <u64 as Cast>::cast::<i64>(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        _8 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: i64);
        _7 = _15;
        StorageDead(_15);
        _16 = Eq(_7, const i64::MIN);
        assert(!move _16, "attempt to negate `{}`, which would overflow", _7) -> [success: bb9, unwind continue];
    }

    bb7: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<PositionDelta, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb31;
    }

    bb9: {
        _5 = Neg(move _7);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb15;
    }

    bb10: {
        StorageDead(_19);
        _17 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: i64);
        _5 = _24;
        StorageDead(_24);
        StorageDead(_17);
        goto -> bb15;
    }

    bb13: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<PositionDelta, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_17);
        goto -> bb31;
    }

    bb15: {
        StorageLive(_25);
        _26 = discriminant(_3);
        switchInt(move _26) -> [0: bb17, 1: bb16, otherwise: bb2];
    }

    bb16: {
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _1;
        _37 = <u64 as Cast>::cast::<i64>(move _38) -> [return: bb23, unwind continue];
    }

    bb17: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _1;
        _28 = <u64 as Cast>::cast::<i64>(move _29) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_29);
        _27 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _28) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb20, 1: bb21, otherwise: bb2];
    }

    bb20: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: i64);
        _25 = _34;
        StorageDead(_34);
        StorageDead(_27);
        goto -> bb29;
    }

    bb21: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<PositionDelta, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_27);
        goto -> bb30;
    }

    bb23: {
        StorageDead(_38);
        _36 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _37) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb25, 1: bb26, otherwise: bb2];
    }

    bb25: {
        StorageLive(_43);
        _43 = ((_36 as Continue).0: i64);
        _35 = _43;
        StorageDead(_43);
        _44 = Eq(_35, const i64::MIN);
        assert(!move _44, "attempt to negate `{}`, which would overflow", _35) -> [success: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_40);
        _40 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<PositionDelta, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb30;
    }

    bb28: {
        _25 = Neg(move _35);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb29;
    }

    bb29: {
        _4 = PositionDelta { quote_asset_amount: move _5, base_asset_amount: move _25 };
        StorageDead(_25);
        StorageDead(_5);
        _0 = std::result::Result::<PositionDelta, error::ErrorCode>::Ok(move _4);
        StorageDead(_4);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_25);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb32;
    }

    bb32: {
        return;
    }
}
