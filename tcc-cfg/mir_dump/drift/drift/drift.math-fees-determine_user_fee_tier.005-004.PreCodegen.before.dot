digraph Mir_0_2231 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn determine_user_fee_tier(_1: &amp;ReErased state::user::UserStats, _2: &amp;ReErased state::state::FeeStructure, _3: &amp;ReErased state::user::MarketType, _4: bool) -&gt; std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt;<br align="left"/>let mut _5: isize;<br align="left"/>let mut _6: &amp;ReErased &amp;ReErased state::user::MarketType;<br align="left"/>let mut _7: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: state::state::FeeTier;<br align="left"/>let _10: usize;<br align="left"/>let mut _11: usize;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _14: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _15: state::state::FeeTier;<br align="left"/>let mut _16: &amp;ReErased state::state::FeeTier;<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::state::FeeTier&gt;;<br align="left"/>let mut _18: std::result::Result&lt;&amp;ReErased state::state::FeeTier, error::ErrorCode&gt;;<br align="left"/>let mut _19: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _20: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: &amp;ReErased state::state::FeeTier;<br align="left"/>debug user_stats =&gt; _1;<br align="left"/>debug fee_structure =&gt; _2;<br align="left"/>debug market_type =&gt; _3;<br align="left"/>debug user_high_leverage_mode =&gt; _4;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>>;
    bb0__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_5 = discriminant((*_3))<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;(*_1)<br/>StorageLive(_20)<br/>_20 = &amp;(*_2)<br/></td></tr><tr><td align="left">_18 = determine_spot_fee_tier(move _19, move _20)</td></tr></table>>];
    bb2__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = _4<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = const 0_usize<br/>_11 = Len(((*_2).0: [state::state::FeeTier; 10]))<br/>_12 = Lt(_10, _11)<br/></td></tr><tr><td align="left">assert(move _12, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _11, _10)</td></tr></table>>];
    bb5__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_13)<br/>_13 = &amp;(*_1)<br/>StorageLive(_14)<br/>_14 = &amp;(*_2)<br/></td></tr><tr><td align="left">_0 = determine_perp_fee_tier(move _13, move _14)</td></tr></table>>];
    bb6__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_9 = ((*_2).0: [state::state::FeeTier; 10])[_10]<br/>_0 = std::result::Result::&lt;state::state::FeeTier, error::ErrorCode&gt;::Ok(move _9)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;&amp;state::state::FeeTier, error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb9__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_21 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb10__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_17 as Continue).0: &amp;state::state::FeeTier)<br/>_16 = _25<br/>StorageDead(_25)<br/>_15 = (*_16)<br/>_0 = std::result::Result::&lt;state::state::FeeTier, error::ErrorCode&gt;::Ok(move _15)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb12__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2231 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2231 -> bb1__0_2231 [label="0"];
    bb0__0_2231 -> bb3__0_2231 [label="1"];
    bb0__0_2231 -> bb2__0_2231 [label="otherwise"];
    bb1__0_2231 -> bb8__0_2231 [label="return"];
    bb3__0_2231 -> bb5__0_2231 [label="0"];
    bb3__0_2231 -> bb4__0_2231 [label="otherwise"];
    bb4__0_2231 -> bb6__0_2231 [label="success"];
    bb5__0_2231 -> bb7__0_2231 [label="return"];
    bb6__0_2231 -> bb13__0_2231 [label=""];
    bb7__0_2231 -> bb13__0_2231 [label=""];
    bb8__0_2231 -> bb9__0_2231 [label="return"];
    bb9__0_2231 -> bb10__0_2231 [label="0"];
    bb9__0_2231 -> bb11__0_2231 [label="1"];
    bb9__0_2231 -> bb2__0_2231 [label="otherwise"];
    bb10__0_2231 -> bb13__0_2231 [label=""];
    bb11__0_2231 -> bb12__0_2231 [label="return"];
    bb12__0_2231 -> bb13__0_2231 [label=""];
}
