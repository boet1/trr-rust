digraph Mir_0_3179 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;PhoenixFulfillmentParams&lt;'a, 'b&gt; as SpotFulfillmentParams&gt;::validate_vault_amounts(_1: &amp;ReErased state::fulfillment_params::phoenix::PhoenixFulfillmentParams&lt;ReErased, ReErased&gt;, _2: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;, _3: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _4: i64;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _6: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let _8: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _9: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: &amp;ReErased anchor_spl::token::spl_token::state::Account;<br align="left"/>let mut _12: &amp;ReErased anchor_spl::token::TokenAccount;<br align="left"/>let _13: &amp;ReErased anchor_spl::token::TokenAccount;<br align="left"/>let mut _14: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _19: i64;<br align="left"/>let _20: i64;<br align="left"/>let mut _21: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _22: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _23: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let _24: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _25: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _26: u64;<br align="left"/>let mut _27: &amp;ReErased anchor_spl::token::spl_token::state::Account;<br align="left"/>let mut _28: &amp;ReErased anchor_spl::token::TokenAccount;<br align="left"/>let _29: &amp;ReErased anchor_spl::token::TokenAccount;<br align="left"/>let mut _30: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: i64;<br align="left"/>let mut _36: ();<br align="left"/>let mut _37: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _38: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _39: *const anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;;<br align="left"/>let mut _40: *const anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug base_market =&gt; _2;<br align="left"/>debug quote_market =&gt; _3;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>>;
    bb0__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_2)<br/></td></tr><tr><td align="left">_8 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _9)</td></tr></table>>];
    bb1__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = &amp;(*_8)<br/>StorageDead(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_37 = deref_copy ((*_1).6: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;&gt;)<br/>_39 = (((_37.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;)<br/>_14 = &amp;(*_39)<br/></td></tr><tr><td align="left">_13 = &lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt; as Deref&gt;::deref(move _14)</td></tr></table>>];
    bb2__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_12 = &amp;(*_13)<br/></td></tr><tr><td align="left">_11 = &lt;anchor_spl::token::TokenAccount as Deref&gt;::deref(move _12)</td></tr></table>>];
    bb3__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>_10 = ((*_11).2: u64)<br/></td></tr><tr><td align="left">_6 = validate_spot_market_vault_amount(move _7, move _10)</td></tr></table>>];
    bb4__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb5__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_15 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb6__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_5 as Continue).0: i64)<br/>_4 = _19<br/>StorageDead(_19)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = &amp;(*_3)<br/></td></tr><tr><td align="left">_24 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _25)</td></tr></table>>];
    bb7__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb9__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_23 = &amp;(*_24)<br/>StorageDead(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_38 = deref_copy ((*_1).7: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;&gt;)<br/>_40 = (((_38.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;)<br/>_30 = &amp;(*_40)<br/></td></tr><tr><td align="left">_29 = &lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt; as Deref&gt;::deref(move _30)</td></tr></table>>];
    bb11__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_28 = &amp;(*_29)<br/></td></tr><tr><td align="left">_27 = &lt;anchor_spl::token::TokenAccount as Deref&gt;::deref(move _28)</td></tr></table>>];
    bb12__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/>_26 = ((*_27).2: u64)<br/></td></tr><tr><td align="left">_22 = validate_spot_market_vault_amount(move _23, move _26)</td></tr></table>>];
    bb13__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_21 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _22)</td></tr></table>>];
    bb14__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>_31 = discriminant(_21)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb15__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_21 as Continue).0: i64)<br/>_20 = _35<br/>StorageDead(_35)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageLive(_36)<br/>_36 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _36)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_21 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb17__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_3179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3179 -> bb1__0_3179 [label="return"];
    bb1__0_3179 -> bb2__0_3179 [label="return"];
    bb2__0_3179 -> bb3__0_3179 [label="return"];
    bb3__0_3179 -> bb4__0_3179 [label="return"];
    bb4__0_3179 -> bb5__0_3179 [label="return"];
    bb5__0_3179 -> bb6__0_3179 [label="0"];
    bb5__0_3179 -> bb8__0_3179 [label="1"];
    bb5__0_3179 -> bb7__0_3179 [label="otherwise"];
    bb6__0_3179 -> bb10__0_3179 [label="return"];
    bb8__0_3179 -> bb9__0_3179 [label="return"];
    bb9__0_3179 -> bb18__0_3179 [label=""];
    bb10__0_3179 -> bb11__0_3179 [label="return"];
    bb11__0_3179 -> bb12__0_3179 [label="return"];
    bb12__0_3179 -> bb13__0_3179 [label="return"];
    bb13__0_3179 -> bb14__0_3179 [label="return"];
    bb14__0_3179 -> bb15__0_3179 [label="0"];
    bb14__0_3179 -> bb16__0_3179 [label="1"];
    bb14__0_3179 -> bb7__0_3179 [label="otherwise"];
    bb15__0_3179 -> bb18__0_3179 [label=""];
    bb16__0_3179 -> bb17__0_3179 [label="return"];
    bb17__0_3179 -> bb18__0_3179 [label=""];
}
