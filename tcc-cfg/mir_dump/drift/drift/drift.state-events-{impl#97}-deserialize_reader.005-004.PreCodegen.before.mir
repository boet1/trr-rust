// MIR for `state::events::<impl at programs/drift/src/state/events.rs:413:1: 413:9>::deserialize_reader` before PreCodegen

fn state::events::<impl at programs/drift/src/state/events.rs:413:1: 413:9>::deserialize_reader(_1: &mut R) -> std::result::Result<LiquidationRecord, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<state::events::LiquidationRecord, std::io::Error>;
    let mut _2: state::events::LiquidationRecord;
    let mut _3: i64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, i64>;
    let mut _5: std::result::Result<i64, std::io::Error>;
    let mut _6: &mut R;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _11: i64;
    let mut _12: state::events::LiquidationType;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::events::LiquidationType>;
    let mut _14: std::result::Result<state::events::LiquidationType, std::io::Error>;
    let mut _15: &mut R;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _20: state::events::LiquidationType;
    let mut _21: anchor_lang::prelude::Pubkey;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _23: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _24: &mut R;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _29: anchor_lang::prelude::Pubkey;
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _32: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _33: &mut R;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _38: anchor_lang::prelude::Pubkey;
    let mut _39: u128;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u128>;
    let mut _41: std::result::Result<u128, std::io::Error>;
    let mut _42: &mut R;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _47: u128;
    let mut _48: i128;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, i128>;
    let mut _50: std::result::Result<i128, std::io::Error>;
    let mut _51: &mut R;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _56: i128;
    let mut _57: u64;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _59: std::result::Result<u64, std::io::Error>;
    let mut _60: &mut R;
    let mut _61: isize;
    let _62: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _65: u64;
    let mut _66: u16;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _68: std::result::Result<u16, std::io::Error>;
    let mut _69: &mut R;
    let mut _70: isize;
    let _71: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _74: u16;
    let mut _75: bool;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, bool>;
    let mut _77: std::result::Result<bool, std::io::Error>;
    let mut _78: &mut R;
    let mut _79: isize;
    let _80: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _83: bool;
    let mut _84: std::vec::Vec<u32>;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<u32>>;
    let mut _86: std::result::Result<std::vec::Vec<u32>, std::io::Error>;
    let mut _87: &mut R;
    let mut _88: isize;
    let _89: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _92: std::vec::Vec<u32>;
    let mut _93: state::events::LiquidatePerpRecord;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::events::LiquidatePerpRecord>;
    let mut _95: std::result::Result<state::events::LiquidatePerpRecord, std::io::Error>;
    let mut _96: &mut R;
    let mut _97: isize;
    let _98: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _101: state::events::LiquidatePerpRecord;
    let mut _102: state::events::LiquidateSpotRecord;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::events::LiquidateSpotRecord>;
    let mut _104: std::result::Result<state::events::LiquidateSpotRecord, std::io::Error>;
    let mut _105: &mut R;
    let mut _106: isize;
    let _107: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _110: state::events::LiquidateSpotRecord;
    let mut _111: state::events::LiquidateBorrowForPerpPnlRecord;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::events::LiquidateBorrowForPerpPnlRecord>;
    let mut _113: std::result::Result<state::events::LiquidateBorrowForPerpPnlRecord, std::io::Error>;
    let mut _114: &mut R;
    let mut _115: isize;
    let _116: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _119: state::events::LiquidateBorrowForPerpPnlRecord;
    let mut _120: state::events::LiquidatePerpPnlForDepositRecord;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::events::LiquidatePerpPnlForDepositRecord>;
    let mut _122: std::result::Result<state::events::LiquidatePerpPnlForDepositRecord, std::io::Error>;
    let mut _123: &mut R;
    let mut _124: isize;
    let _125: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _128: state::events::LiquidatePerpPnlForDepositRecord;
    let mut _129: state::events::PerpBankruptcyRecord;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::events::PerpBankruptcyRecord>;
    let mut _131: std::result::Result<state::events::PerpBankruptcyRecord, std::io::Error>;
    let mut _132: &mut R;
    let mut _133: isize;
    let _134: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _137: state::events::PerpBankruptcyRecord;
    let mut _138: state::events::SpotBankruptcyRecord;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::events::SpotBankruptcyRecord>;
    let mut _140: std::result::Result<state::events::SpotBankruptcyRecord, std::io::Error>;
    let mut _141: &mut R;
    let mut _142: isize;
    let _143: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _146: state::events::SpotBankruptcyRecord;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _26;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _29;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _35;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _38;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _44;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _47;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _53;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _56;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _62;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _65;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _71;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _74;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _80;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _83;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _89;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _92;
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _98;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _101;
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _107;
        scope 46 {
        }
    }
    scope 47 {
        debug val => _110;
        scope 48 {
        }
    }
    scope 49 {
        debug residual => _116;
        scope 50 {
        }
    }
    scope 51 {
        debug val => _119;
        scope 52 {
        }
    }
    scope 53 {
        debug residual => _125;
        scope 54 {
        }
    }
    scope 55 {
        debug val => _128;
        scope 56 {
        }
    }
    scope 57 {
        debug residual => _134;
        scope 58 {
        }
    }
    scope 59 {
        debug val => _137;
        scope 60 {
        }
    }
    scope 61 {
        debug residual => _143;
        scope 62 {
        }
    }
    scope 63 {
        debug val => _146;
        scope 64 {
        }
    }

    bb0: {
        _167 = const false;
        _166 = const false;
        _165 = const false;
        _164 = const false;
        _163 = const false;
        _162 = const false;
        _161 = const false;
        _160 = const false;
        _159 = const false;
        _158 = const false;
        _157 = const false;
        _156 = const false;
        _155 = const false;
        _154 = const false;
        _153 = const false;
        _152 = const false;
        _151 = const false;
        _150 = const false;
        _149 = const false;
        _148 = const false;
        _147 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <i64 as BorshDeserialize>::deserialize_reader::<R>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<i64, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb96];
    }

    bb2: {
        _167 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: i64);
        _3 = _11;
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_1);
        _14 = <LiquidationType as BorshDeserialize>::deserialize_reader::<R>(move _15) -> [return: bb7, unwind: bb127];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb127];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb111;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<LiquidationType, std::io::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb127];
    }

    bb8: {
        _166 = const true;
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: state::events::LiquidationType);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut (*_1);
        _23 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _24) -> [return: bb12, unwind: bb126];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb126];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb110;
    }

    bb12: {
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _23) -> [return: bb13, unwind: bb126];
    }

    bb13: {
        _165 = const true;
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: anchor_lang::prelude::Pubkey);
        _21 = _29;
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_1);
        _32 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _33) -> [return: bb17, unwind: bb125];
    }

    bb15: {
        StorageLive(_26);
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb16, unwind: bb125];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb109;
    }

    bb17: {
        StorageDead(_33);
        _31 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _32) -> [return: bb18, unwind: bb125];
    }

    bb18: {
        _164 = const true;
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: anchor_lang::prelude::Pubkey);
        _30 = _38;
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_1);
        _41 = <u128 as BorshDeserialize>::deserialize_reader::<R>(move _42) -> [return: bb22, unwind: bb124];
    }

    bb20: {
        StorageLive(_35);
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _37) -> [return: bb21, unwind: bb124];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb108;
    }

    bb22: {
        StorageDead(_42);
        _40 = <std::result::Result<u128, std::io::Error> as Try>::branch(move _41) -> [return: bb23, unwind: bb124];
    }

    bb23: {
        _163 = const true;
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: u128);
        _39 = _47;
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &mut (*_1);
        _50 = <i128 as BorshDeserialize>::deserialize_reader::<R>(move _51) -> [return: bb27, unwind: bb123];
    }

    bb25: {
        StorageLive(_44);
        _44 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _46) -> [return: bb26, unwind: bb123];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb107;
    }

    bb27: {
        StorageDead(_51);
        _49 = <std::result::Result<i128, std::io::Error> as Try>::branch(move _50) -> [return: bb28, unwind: bb123];
    }

    bb28: {
        _162 = const true;
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_56);
        _56 = ((_49 as Continue).0: i128);
        _48 = _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut (*_1);
        _59 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _60) -> [return: bb32, unwind: bb122];
    }

    bb30: {
        StorageLive(_53);
        _53 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _55) -> [return: bb31, unwind: bb122];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb106;
    }

    bb32: {
        StorageDead(_60);
        _58 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _59) -> [return: bb33, unwind: bb122];
    }

    bb33: {
        _161 = const true;
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_65);
        _65 = ((_58 as Continue).0: u64);
        _57 = _65;
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_1);
        _68 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _69) -> [return: bb37, unwind: bb121];
    }

    bb35: {
        StorageLive(_62);
        _62 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _64) -> [return: bb36, unwind: bb121];
    }

    bb36: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb105;
    }

    bb37: {
        StorageDead(_69);
        _67 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _68) -> [return: bb38, unwind: bb121];
    }

    bb38: {
        _160 = const true;
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_74);
        _74 = ((_67 as Continue).0: u16);
        _66 = _74;
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &mut (*_1);
        _77 = <bool as BorshDeserialize>::deserialize_reader::<R>(move _78) -> [return: bb42, unwind: bb120];
    }

    bb40: {
        StorageLive(_71);
        _71 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _73) -> [return: bb41, unwind: bb120];
    }

    bb41: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb104;
    }

    bb42: {
        StorageDead(_78);
        _76 = <std::result::Result<bool, std::io::Error> as Try>::branch(move _77) -> [return: bb43, unwind: bb120];
    }

    bb43: {
        _159 = const true;
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: bool);
        _75 = _83;
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &mut (*_1);
        _86 = <Vec<u32> as BorshDeserialize>::deserialize_reader::<R>(move _87) -> [return: bb47, unwind: bb119];
    }

    bb45: {
        StorageLive(_80);
        _80 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_82);
        _82 = move _80;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _82) -> [return: bb46, unwind: bb119];
    }

    bb46: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb103;
    }

    bb47: {
        StorageDead(_87);
        _85 = <std::result::Result<Vec<u32>, std::io::Error> as Try>::branch(move _86) -> [return: bb48, unwind: bb119];
    }

    bb48: {
        _157 = const true;
        _158 = const true;
        StorageDead(_86);
        _88 = discriminant(_85);
        switchInt(move _88) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_92);
        _92 = move ((_85 as Continue).0: std::vec::Vec<u32>);
        _84 = move _92;
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &mut (*_1);
        _95 = <LiquidatePerpRecord as BorshDeserialize>::deserialize_reader::<R>(move _96) -> [return: bb52, unwind: bb95];
    }

    bb50: {
        StorageLive(_89);
        _89 = move ((_85 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_91);
        _91 = move _89;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _91) -> [return: bb51, unwind: bb118];
    }

    bb51: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb102;
    }

    bb52: {
        StorageDead(_96);
        _94 = <std::result::Result<LiquidatePerpRecord, std::io::Error> as Try>::branch(move _95) -> [return: bb53, unwind: bb95];
    }

    bb53: {
        _155 = const true;
        _156 = const true;
        StorageDead(_95);
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_101);
        _101 = move ((_94 as Continue).0: state::events::LiquidatePerpRecord);
        _93 = move _101;
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &mut (*_1);
        _104 = <LiquidateSpotRecord as BorshDeserialize>::deserialize_reader::<R>(move _105) -> [return: bb57, unwind: bb94];
    }

    bb55: {
        StorageLive(_98);
        _98 = move ((_94 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_100);
        _100 = move _98;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _100) -> [return: bb56, unwind: bb94];
    }

    bb56: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_93);
        drop(_84) -> [return: bb87, unwind: bb117];
    }

    bb57: {
        StorageDead(_105);
        _103 = <std::result::Result<LiquidateSpotRecord, std::io::Error> as Try>::branch(move _104) -> [return: bb58, unwind: bb94];
    }

    bb58: {
        _153 = const true;
        _154 = const true;
        StorageDead(_104);
        _106 = discriminant(_103);
        switchInt(move _106) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_110);
        _110 = move ((_103 as Continue).0: state::events::LiquidateSpotRecord);
        _102 = move _110;
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &mut (*_1);
        _113 = <LiquidateBorrowForPerpPnlRecord as BorshDeserialize>::deserialize_reader::<R>(move _114) -> [return: bb62, unwind: bb93];
    }

    bb60: {
        StorageLive(_107);
        _107 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _109) -> [return: bb61, unwind: bb93];
    }

    bb61: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_102);
        StorageDead(_93);
        drop(_84) -> [return: bb86, unwind: bb116];
    }

    bb62: {
        StorageDead(_114);
        _112 = <std::result::Result<LiquidateBorrowForPerpPnlRecord, std::io::Error> as Try>::branch(move _113) -> [return: bb63, unwind: bb93];
    }

    bb63: {
        _151 = const true;
        _152 = const true;
        StorageDead(_113);
        _115 = discriminant(_112);
        switchInt(move _115) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_119);
        _119 = move ((_112 as Continue).0: state::events::LiquidateBorrowForPerpPnlRecord);
        _111 = move _119;
        StorageDead(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut (*_1);
        _122 = <LiquidatePerpPnlForDepositRecord as BorshDeserialize>::deserialize_reader::<R>(move _123) -> [return: bb67, unwind: bb92];
    }

    bb65: {
        StorageLive(_116);
        _116 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_118);
        _118 = move _116;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _118) -> [return: bb66, unwind: bb92];
    }

    bb66: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        drop(_84) -> [return: bb85, unwind: bb115];
    }

    bb67: {
        StorageDead(_123);
        _121 = <std::result::Result<LiquidatePerpPnlForDepositRecord, std::io::Error> as Try>::branch(move _122) -> [return: bb68, unwind: bb92];
    }

    bb68: {
        _149 = const true;
        _150 = const true;
        StorageDead(_122);
        _124 = discriminant(_121);
        switchInt(move _124) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_128);
        _128 = move ((_121 as Continue).0: state::events::LiquidatePerpPnlForDepositRecord);
        _120 = move _128;
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &mut (*_1);
        _131 = <PerpBankruptcyRecord as BorshDeserialize>::deserialize_reader::<R>(move _132) -> [return: bb72, unwind: bb91];
    }

    bb70: {
        StorageLive(_125);
        _125 = move ((_121 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_127);
        _127 = move _125;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _127) -> [return: bb71, unwind: bb91];
    }

    bb71: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        drop(_84) -> [return: bb84, unwind: bb114];
    }

    bb72: {
        StorageDead(_132);
        _130 = <std::result::Result<PerpBankruptcyRecord, std::io::Error> as Try>::branch(move _131) -> [return: bb73, unwind: bb91];
    }

    bb73: {
        _147 = const true;
        _148 = const true;
        StorageDead(_131);
        _133 = discriminant(_130);
        switchInt(move _133) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_137);
        _137 = move ((_130 as Continue).0: state::events::PerpBankruptcyRecord);
        _129 = move _137;
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &mut (*_1);
        _140 = <SpotBankruptcyRecord as BorshDeserialize>::deserialize_reader::<R>(move _141) -> [return: bb77, unwind: bb90];
    }

    bb75: {
        StorageLive(_134);
        _134 = move ((_130 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_136);
        _136 = move _134;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _136) -> [return: bb76, unwind: bb90];
    }

    bb76: {
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        drop(_84) -> [return: bb83, unwind: bb113];
    }

    bb77: {
        StorageDead(_141);
        _139 = <std::result::Result<SpotBankruptcyRecord, std::io::Error> as Try>::branch(move _140) -> [return: bb78, unwind: bb90];
    }

    bb78: {
        StorageDead(_140);
        _142 = discriminant(_139);
        switchInt(move _142) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_146);
        _146 = move ((_139 as Continue).0: state::events::SpotBankruptcyRecord);
        _138 = move _146;
        StorageDead(_146);
        _2 = LiquidationRecord { ts: move _3, liquidation_type: move _12, user: move _21, liquidator: move _30, margin_requirement: move _39, total_collateral: move _48, margin_freed: move _57, liquidation_id: move _66, bankrupt: move _75, canceled_order_ids: move _84, liquidate_perp: move _93, liquidate_spot: move _102, liquidate_borrow_for_perp_pnl: move _111, liquidate_perp_pnl_for_deposit: move _120, perp_bankruptcy: move _129, spot_bankruptcy: move _138 };
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        _0 = std::result::Result::<LiquidationRecord, std::io::Error>::Ok(move _2);
        StorageDead(_2);
        _168 = discriminant(_139);
        StorageDead(_139);
        _170 = discriminant(_130);
        _147 = const false;
        _148 = const false;
        StorageDead(_130);
        _172 = discriminant(_121);
        _149 = const false;
        _150 = const false;
        StorageDead(_121);
        _174 = discriminant(_112);
        _151 = const false;
        _152 = const false;
        StorageDead(_112);
        _176 = discriminant(_103);
        _153 = const false;
        _154 = const false;
        StorageDead(_103);
        _178 = discriminant(_94);
        _155 = const false;
        _156 = const false;
        StorageDead(_94);
        _180 = discriminant(_85);
        _157 = const false;
        _158 = const false;
        StorageDead(_85);
        _182 = discriminant(_76);
        _159 = const false;
        StorageDead(_76);
        _184 = discriminant(_67);
        _160 = const false;
        StorageDead(_67);
        _186 = discriminant(_58);
        _161 = const false;
        StorageDead(_58);
        _188 = discriminant(_49);
        _162 = const false;
        StorageDead(_49);
        _190 = discriminant(_40);
        _163 = const false;
        StorageDead(_40);
        _192 = discriminant(_31);
        _164 = const false;
        StorageDead(_31);
        _194 = discriminant(_22);
        _165 = const false;
        StorageDead(_22);
        _196 = discriminant(_13);
        _166 = const false;
        StorageDead(_13);
        _198 = discriminant(_4);
        _167 = const false;
        StorageDead(_4);
        goto -> bb88;
    }

    bb80: {
        StorageLive(_143);
        _143 = move ((_139 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_145);
        _145 = move _143;
        _0 = <std::result::Result<LiquidationRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _145) -> [return: bb81, unwind: bb89];
    }

    bb81: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        drop(_84) -> [return: bb82, unwind: bb112];
    }

    bb82: {
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        _200 = discriminant(_139);
        StorageDead(_139);
        goto -> bb97;
    }

    bb83: {
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb97;
    }

    bb84: {
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb98;
    }

    bb85: {
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb99;
    }

    bb86: {
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb100;
    }

    bb87: {
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb101;
    }

    bb88: {
        return;
    }

    bb89 (cleanup): {
        drop(_84) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_84) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_84) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_84) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_84) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_84) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_84) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        resume;
    }

    bb97: {
        _202 = discriminant(_130);
        _147 = const false;
        _148 = const false;
        StorageDead(_130);
        goto -> bb98;
    }

    bb98: {
        _204 = discriminant(_121);
        _149 = const false;
        _150 = const false;
        StorageDead(_121);
        goto -> bb99;
    }

    bb99: {
        _206 = discriminant(_112);
        _151 = const false;
        _152 = const false;
        StorageDead(_112);
        goto -> bb100;
    }

    bb100: {
        _208 = discriminant(_103);
        _153 = const false;
        _154 = const false;
        StorageDead(_103);
        goto -> bb101;
    }

    bb101: {
        _210 = discriminant(_94);
        _155 = const false;
        _156 = const false;
        StorageDead(_94);
        goto -> bb102;
    }

    bb102: {
        _212 = discriminant(_85);
        _157 = const false;
        _158 = const false;
        StorageDead(_85);
        goto -> bb103;
    }

    bb103: {
        _214 = discriminant(_76);
        _159 = const false;
        StorageDead(_76);
        goto -> bb104;
    }

    bb104: {
        _216 = discriminant(_67);
        _160 = const false;
        StorageDead(_67);
        goto -> bb105;
    }

    bb105: {
        _218 = discriminant(_58);
        _161 = const false;
        StorageDead(_58);
        goto -> bb106;
    }

    bb106: {
        _220 = discriminant(_49);
        _162 = const false;
        StorageDead(_49);
        goto -> bb107;
    }

    bb107: {
        _222 = discriminant(_40);
        _163 = const false;
        StorageDead(_40);
        goto -> bb108;
    }

    bb108: {
        _224 = discriminant(_31);
        _164 = const false;
        StorageDead(_31);
        goto -> bb109;
    }

    bb109: {
        _226 = discriminant(_22);
        _165 = const false;
        StorageDead(_22);
        goto -> bb110;
    }

    bb110: {
        _228 = discriminant(_13);
        _166 = const false;
        StorageDead(_13);
        goto -> bb111;
    }

    bb111: {
        _230 = discriminant(_4);
        _167 = const false;
        StorageDead(_4);
        goto -> bb88;
    }

    bb112 (cleanup): {
        _232 = discriminant(_139);
        goto -> bb113;
    }

    bb113 (cleanup): {
        _233 = discriminant(_130);
        goto -> bb114;
    }

    bb114 (cleanup): {
        _234 = discriminant(_121);
        goto -> bb115;
    }

    bb115 (cleanup): {
        _235 = discriminant(_112);
        goto -> bb116;
    }

    bb116 (cleanup): {
        _236 = discriminant(_103);
        goto -> bb117;
    }

    bb117 (cleanup): {
        _237 = discriminant(_94);
        goto -> bb118;
    }

    bb118 (cleanup): {
        _238 = discriminant(_85);
        goto -> bb119;
    }

    bb119 (cleanup): {
        _239 = discriminant(_76);
        goto -> bb120;
    }

    bb120 (cleanup): {
        _240 = discriminant(_67);
        goto -> bb121;
    }

    bb121 (cleanup): {
        _241 = discriminant(_58);
        goto -> bb122;
    }

    bb122 (cleanup): {
        _242 = discriminant(_49);
        goto -> bb123;
    }

    bb123 (cleanup): {
        _243 = discriminant(_40);
        goto -> bb124;
    }

    bb124 (cleanup): {
        _244 = discriminant(_31);
        goto -> bb125;
    }

    bb125 (cleanup): {
        _245 = discriminant(_22);
        goto -> bb126;
    }

    bb126 (cleanup): {
        _246 = discriminant(_13);
        goto -> bb127;
    }

    bb127 (cleanup): {
        _247 = discriminant(_4);
        goto -> bb96;
    }
}
