// MIR for `signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:59:1: 59:25>::space` before PreCodegen

fn signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:59:1: 59:25>::space(_1: usize) -> usize {
    debug num_orders => _1;
    let mut _0: usize;
    let mut _2: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: (usize, bool);
    let mut _6: (usize, bool);
    let mut _7: (usize, bool);
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: (usize, bool);
    let mut _11: (usize, bool);

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _5 = CheckedAdd(const 8_usize, const 32_usize);
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", const 8_usize, const 32_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = move (_5.0: usize);
        _6 = CheckedAdd(_4, const 4_usize);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 4_usize) -> [success: bb2, unwind continue];
    }

    bb2: {
        _3 = move (_6.0: usize);
        StorageDead(_4);
        _7 = CheckedAdd(_3, const 32_usize);
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 32_usize) -> [success: bb3, unwind continue];
    }

    bb3: {
        _2 = move (_7.0: usize);
        StorageDead(_3);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        _10 = CheckedMul(_9, const 24_usize);
        assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", move _9, const 24_usize) -> [success: bb4, unwind continue];
    }

    bb4: {
        _8 = move (_10.0: usize);
        StorageDead(_9);
        _11 = CheckedAdd(_2, _8);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _8) -> [success: bb5, unwind continue];
    }

    bb5: {
        _0 = move (_11.0: usize);
        StorageDead(_8);
        StorageDead(_2);
        return;
    }
}
