// MIR for `controller::insurance::request_remove_insurance_fund_stake` before PreCodegen

fn controller::insurance::request_remove_insurance_fund_stake(_1: u128, _2: u64, _3: &mut InsuranceFundStake, _4: &mut UserStats, _5: &mut SpotMarket, _6: i64) -> std::result::Result<(), error::ErrorCode> {
    debug n_shares => _1;
    debug insurance_vault_amount => _2;
    debug insurance_fund_stake => _3;
    debug user_stats => _4;
    debug spot_market => _5;
    debug now => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: ();
    let mut _8: &str;
    let _9: &str;
    let mut _10: &std::string::String;
    let _11: &std::string::String;
    let _12: std::string::String;
    let _13: std::string::String;
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[&str; 1];
    let _17: &[&str; 1];
    let _18: [&str; 1];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let mut _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let mut _24: &u128;
    let _25: &u128;
    let mut _26: u128;
    let _27: ();
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _29: std::result::Result<(), error::ErrorCode>;
    let mut _30: u64;
    let mut _31: &mut state::spot_market::SpotMarket;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: ();
    let _37: ();
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _39: std::result::Result<(), error::ErrorCode>;
    let mut _40: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _41: &mut state::spot_market::SpotMarket;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: ();
    let _47: u128;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _49: std::result::Result<u128, error::ErrorCode>;
    let mut _50: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _51: &state::spot_market::SpotMarket;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _56: u128;
    let _59: ();
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _61: std::result::Result<(), error::ErrorCode>;
    let mut _62: bool;
    let mut _63: u128;
    let mut _64: u128;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _66: std::result::Result<u128, error::ErrorCode>;
    let mut _67: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _68: &state::spot_market::SpotMarket;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: ();
    let _76: ();
    let mut _77: &str;
    let _78: &str;
    let mut _79: &std::string::String;
    let _80: &std::string::String;
    let _81: std::string::String;
    let mut _83: std::fmt::Arguments<'_>;
    let mut _84: &[&str];
    let mut _85: &[&str; 2];
    let _86: &[&str; 2];
    let _87: [&str; 2];
    let mut _88: &[core::fmt::rt::Argument<'_>];
    let mut _89: &[core::fmt::rt::Argument<'_>; 1];
    let _90: &[core::fmt::rt::Argument<'_>; 1];
    let _91: [core::fmt::rt::Argument<'_>; 1];
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: &error::ErrorCode;
    let _94: &error::ErrorCode;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: &std::string::String;
    let _99: &std::string::String;
    let _100: std::string::String;
    let mut _102: std::fmt::Arguments<'_>;
    let mut _103: &[&str];
    let mut _104: &[&str; 2];
    let _105: &[&str; 2];
    let _106: [&str; 2];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let mut _108: &[core::fmt::rt::Argument<'_>; 2];
    let _109: &[core::fmt::rt::Argument<'_>; 2];
    let _110: [core::fmt::rt::Argument<'_>; 2];
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &u128;
    let _113: &u128;
    let mut _114: core::fmt::rt::Argument<'_>;
    let mut _115: &u128;
    let _116: &u128;
    let _117: u128;
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _119: std::result::Result<u128, error::ErrorCode>;
    let mut _120: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _121: &state::spot_market::SpotMarket;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: error::ErrorCode;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _133: ();
    let mut _134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _135: std::result::Result<(), error::ErrorCode>;
    let mut _136: bool;
    let mut _137: u128;
    let mut _138: u128;
    let mut _139: ();
    let _141: ();
    let mut _142: &str;
    let _143: &str;
    let mut _144: &std::string::String;
    let _145: &std::string::String;
    let _146: std::string::String;
    let mut _148: std::fmt::Arguments<'_>;
    let mut _149: &[&str];
    let mut _150: &[&str; 2];
    let _151: &[&str; 2];
    let _152: [&str; 2];
    let mut _153: &[core::fmt::rt::Argument<'_>];
    let mut _154: &[core::fmt::rt::Argument<'_>; 1];
    let _155: &[core::fmt::rt::Argument<'_>; 1];
    let _156: [core::fmt::rt::Argument<'_>; 1];
    let mut _157: core::fmt::rt::Argument<'_>;
    let mut _158: &error::ErrorCode;
    let _159: &error::ErrorCode;
    let _160: ();
    let mut _161: &str;
    let _162: &str;
    let mut _163: error::ErrorCode;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: u64;
    let mut _170: u64;
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _172: std::result::Result<u64, error::ErrorCode>;
    let mut _173: u128;
    let mut _174: u128;
    let mut _175: u64;
    let mut _176: isize;
    let mut _178: !;
    let mut _179: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _181: u64;
    let mut _182: u64;
    let _183: ();
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _185: std::result::Result<(), error::ErrorCode>;
    let mut _186: bool;
    let mut _187: u64;
    let mut _188: bool;
    let mut _189: u64;
    let mut _190: u64;
    let mut _191: ();
    let _193: ();
    let mut _194: &str;
    let _195: &str;
    let mut _196: &std::string::String;
    let _197: &std::string::String;
    let _198: std::string::String;
    let mut _200: std::fmt::Arguments<'_>;
    let mut _201: &[&str];
    let mut _202: &[&str; 2];
    let _203: &[&str; 2];
    let _204: [&str; 2];
    let mut _205: &[core::fmt::rt::Argument<'_>];
    let mut _206: &[core::fmt::rt::Argument<'_>; 1];
    let _207: &[core::fmt::rt::Argument<'_>; 1];
    let _208: [core::fmt::rt::Argument<'_>; 1];
    let mut _209: core::fmt::rt::Argument<'_>;
    let mut _210: &error::ErrorCode;
    let _211: &error::ErrorCode;
    let _212: ();
    let mut _213: &str;
    let _214: &str;
    let mut _215: error::ErrorCode;
    let mut _216: isize;
    let mut _218: !;
    let mut _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _223: std::result::Result<u128, error::ErrorCode>;
    let mut _224: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _225: &state::spot_market::SpotMarket;
    let mut _226: isize;
    let mut _228: !;
    let mut _229: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _231: ();
    let mut _232: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _233: std::result::Result<(), error::ErrorCode>;
    let mut _234: u64;
    let mut _235: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _236: &mut state::user::UserStats;
    let mut _237: &mut state::spot_market::SpotMarket;
    let mut _238: i64;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _244: ();
    let _245: ();
    let mut _246: &[&[u8]];
    let mut _247: &[&[u8]; 1];
    let _248: &[&[u8]; 1];
    let _249: [&[u8]; 1];
    let mut _250: &[u8];
    let _251: &[u8];
    let mut _252: &std::vec::Vec<u8>;
    let _253: &std::vec::Vec<u8>;
    let _254: std::vec::Vec<u8>;
    let mut _255: &state::events::InsuranceFundStakeRecord;
    let _256: &state::events::InsuranceFundStakeRecord;
    let _257: state::events::InsuranceFundStakeRecord;
    let mut _258: i64;
    let mut _259: anchor_lang::prelude::Pubkey;
    let mut _260: state::events::StakeAction;
    let mut _261: u64;
    let mut _262: u16;
    let mut _263: u64;
    let mut _264: u128;
    let mut _265: u128;
    let mut _266: u128;
    let mut _267: u128;
    let mut _268: u128;
    let mut _269: u128;
    let mut _270: i64;
    let mut _271: ();
    let mut _276: &[&str; 1];
    scope 1 {
        debug res => _13;
    }
    scope 2 {
        debug residual => _33;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _36;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _43;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _46;
        scope 9 {
        }
    }
    scope 10 {
        debug if_shares_before => _47;
        let _57: u128;
        scope 15 {
            debug total_if_shares_before => _57;
            let _58: u128;
            scope 16 {
                debug user_if_shares_before => _58;
                let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _73: u128;
                let _75: error::ErrorCode;
                let _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _132: ();
                let _140: error::ErrorCode;
                let _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _168: ();
                let _177: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _180: u64;
                let _192: error::ErrorCode;
                let _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _220: ();
                let _221: u128;
                let _227: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _230: u128;
                scope 17 {
                    debug residual => _70;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _73;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug error_code => _75;
                    let _82: std::string::String;
                    let _101: std::string::String;
                    let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _126: u128;
                    let mut _274: &[&str; 2];
                    let mut _275: &[&str; 2];
                    scope 22 {
                        debug res => _82;
                    }
                    scope 23 {
                        debug res => _101;
                    }
                    scope 24 {
                        debug residual => _123;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _126;
                        scope 27 {
                        }
                    }
                }
                scope 28 {
                    debug residual => _129;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug val => _132;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug error_code => _140;
                    let _147: std::string::String;
                    let mut _273: &[&str; 2];
                    scope 33 {
                        debug res => _147;
                    }
                }
                scope 34 {
                    debug residual => _165;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug val => _168;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug residual => _177;
                    scope 39 {
                    }
                }
                scope 40 {
                    debug val => _180;
                    scope 41 {
                    }
                }
                scope 42 {
                    debug error_code => _192;
                    let _199: std::string::String;
                    let mut _272: &[&str; 2];
                    scope 43 {
                        debug res => _199;
                    }
                }
                scope 44 {
                    debug residual => _217;
                    scope 45 {
                    }
                }
                scope 46 {
                    debug val => _220;
                    scope 47 {
                    }
                }
                scope 48 {
                    debug if_shares_after => _221;
                    let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _243: ();
                    scope 53 {
                        debug residual => _240;
                        scope 54 {
                        }
                    }
                    scope 55 {
                        debug val => _243;
                        scope 56 {
                        }
                    }
                }
                scope 49 {
                    debug residual => _227;
                    scope 50 {
                    }
                }
                scope 51 {
                    debug val => _230;
                    scope 52 {
                    }
                }
            }
        }
    }
    scope 11 {
        debug residual => _53;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _56;
        scope 14 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _276 = const _;
        _17 = &(*_276);
        _16 = &(*_17);
        _15 = move _16 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_16);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_1;
        _24 = &(*_25);
        _23 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _24) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_24);
        _22 = [move _23];
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = move _20 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_20);
        _14 = Arguments::<'_>::new_v1(move _15, move _19) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_19);
        StorageDead(_15);
        _13 = format(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_17);
        _12 = move _13;
        StorageDead(_13);
        _11 = &_12;
        _10 = &(*_11);
        _9 = <String as Deref>::deref(move _10) -> [return: bb4, unwind: bb115];
    }

    bb4: {
        _8 = &(*_9);
        StorageDead(_10);
        _7 = solana_program::log::sol_log(move _8) -> [return: bb5, unwind: bb115];
    }

    bb5: {
        StorageDead(_8);
        drop(_12) -> [return: bb6, unwind: bb116];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_26);
        _26 = _1;
        ((*_3).2: u128) = move _26;
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _2;
        StorageLive(_31);
        _31 = &mut (*_5);
        _29 = apply_rebase_to_insurance_fund(move _30, move _31) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _29) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_36);
        _36 = ((_28 as Continue).0: ());
        _27 = _36;
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &mut (*_3);
        StorageLive(_41);
        _41 = &mut (*_5);
        _39 = apply_rebase_to_insurance_fund_stake(move _40, move _41) -> [return: bb13, unwind continue];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_33);
        _33 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb109;
    }

    bb13: {
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _39) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_39);
        _42 = discriminant(_38);
        switchInt(move _42) -> [0: bb15, 1: bb16, otherwise: bb10];
    }

    bb15: {
        StorageLive(_46);
        _46 = ((_38 as Continue).0: ());
        _37 = _46;
        StorageDead(_46);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_3);
        StorageLive(_51);
        _51 = &(*_5);
        _49 = InsuranceFundStake::checked_if_shares(move _50, move _51) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_43);
        _43 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb109;
    }

    bb18: {
        StorageDead(_51);
        StorageDead(_50);
        _48 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        _52 = discriminant(_48);
        switchInt(move _52) -> [0: bb20, 1: bb21, otherwise: bb10];
    }

    bb20: {
        StorageLive(_56);
        _56 = ((_48 as Continue).0: u128);
        _47 = _56;
        StorageDead(_56);
        StorageDead(_48);
        StorageLive(_57);
        _57 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_58);
        _58 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = ((*_3).2: u128);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &(*_3);
        StorageLive(_68);
        _68 = &(*_5);
        _66 = InsuranceFundStake::checked_if_shares(move _67, move _68) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_53);
        _53 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        goto -> bb108;
    }

    bb23: {
        StorageDead(_68);
        StorageDead(_67);
        _65 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _66) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_66);
        _69 = discriminant(_65);
        switchInt(move _69) -> [0: bb25, 1: bb26, otherwise: bb10];
    }

    bb25: {
        StorageLive(_73);
        _73 = ((_65 as Continue).0: u128);
        _64 = _73;
        StorageDead(_73);
        _62 = Le(move _63, move _64);
        switchInt(move _62) -> [0: bb29, otherwise: bb28];
    }

    bb26: {
        StorageLive(_70);
        _70 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb105;
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_74);
        _74 = ();
        _61 = std::result::Result::<(), error::ErrorCode>::Ok(move _74);
        StorageDead(_74);
        goto -> bb48;
    }

    bb29: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_75);
        _75 = error::ErrorCode::InvalidInsuranceUnstakeSize;
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _275 = const _;
        _86 = &(*_275);
        _85 = &(*_86);
        _84 = move _85 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_85);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_75;
        _93 = &(*_94);
        _92 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _93) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_93);
        _91 = [move _92];
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = move _89 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_89);
        _83 = Arguments::<'_>::new_v1(move _84, move _88) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_88);
        StorageDead(_84);
        _82 = format(move _83) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_83);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        _81 = move _82;
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = <String as Deref>::deref(move _79) -> [return: bb33, unwind: bb114];
    }

    bb33: {
        _77 = &(*_78);
        StorageDead(_79);
        _76 = solana_program::log::sol_log(move _77) -> [return: bb34, unwind: bb114];
    }

    bb34: {
        StorageDead(_77);
        drop(_81) -> [return: bb35, unwind: bb116];
    }

    bb35: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _274 = const _;
        _105 = &(*_274);
        _104 = &(*_105);
        _103 = move _104 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_104);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &((*_3).2: u128);
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _112) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_112);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &(*_3);
        StorageLive(_121);
        _121 = &(*_5);
        _119 = InsuranceFundStake::checked_if_shares(move _120, move _121) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_121);
        StorageDead(_120);
        _118 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _119) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_119);
        _122 = discriminant(_118);
        switchInt(move _122) -> [0: bb39, 1: bb40, otherwise: bb10];
    }

    bb39: {
        StorageLive(_126);
        _126 = ((_118 as Continue).0: u128);
        _117 = _126;
        StorageDead(_126);
        _116 = &_117;
        _115 = &(*_116);
        _114 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _115) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_123);
        _123 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_75);
        goto -> bb105;
    }

    bb42: {
        StorageDead(_115);
        _110 = [move _111, move _114];
        StorageDead(_114);
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = move _108 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_108);
        _102 = Arguments::<'_>::new_v1(move _103, move _107) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_107);
        StorageDead(_103);
        _101 = format(move _102) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_102);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_105);
        _100 = move _101;
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = <String as Deref>::deref(move _98) -> [return: bb45, unwind: bb113];
    }

    bb45: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb46, unwind: bb113];
    }

    bb46: {
        StorageDead(_96);
        drop(_100) -> [return: bb47, unwind: bb116];
    }

    bb47: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_127);
        _127 = _75;
        _61 = std::result::Result::<(), error::ErrorCode>::Err(move _127);
        StorageDead(_127);
        StorageDead(_75);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_62);
        _60 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _61) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_61);
        _128 = discriminant(_60);
        switchInt(move _128) -> [0: bb50, 1: bb51, otherwise: bb10];
    }

    bb50: {
        StorageLive(_132);
        _132 = ((_60 as Continue).0: ());
        _59 = _132;
        StorageDead(_132);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = ((*_3).3: u128);
        StorageLive(_138);
        _138 = (((*_5).9: state::spot_market::InsuranceFund).3: u128);
        _136 = Eq(move _137, move _138);
        switchInt(move _136) -> [0: bb54, otherwise: bb53];
    }

    bb51: {
        StorageLive(_129);
        _129 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_131);
        _131 = _129;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _131) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_131);
        StorageDead(_129);
        goto -> bb106;
    }

    bb53: {
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_139);
        _139 = ();
        _135 = std::result::Result::<(), error::ErrorCode>::Ok(move _139);
        StorageDead(_139);
        goto -> bb62;
    }

    bb54: {
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_140);
        _140 = error::ErrorCode::InvalidIFRebase;
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _273 = const _;
        _151 = &(*_273);
        _150 = &(*_151);
        _149 = move _150 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_150);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &_140;
        _158 = &(*_159);
        _157 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _158) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_158);
        _156 = [move _157];
        StorageDead(_157);
        _155 = &_156;
        _154 = &(*_155);
        _153 = move _154 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_154);
        _148 = Arguments::<'_>::new_v1(move _149, move _153) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_153);
        StorageDead(_149);
        _147 = format(move _148) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_148);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_151);
        _146 = move _147;
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = <String as Deref>::deref(move _144) -> [return: bb58, unwind: bb112];
    }

    bb58: {
        _142 = &(*_143);
        StorageDead(_144);
        _141 = solana_program::log::sol_log(move _142) -> [return: bb59, unwind: bb112];
    }

    bb59: {
        StorageDead(_142);
        drop(_146) -> [return: bb60, unwind: bb116];
    }

    bb60: {
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = const "if stake base != spot market base";
        _161 = &(*_162);
        _160 = solana_program::log::sol_log(move _161) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_161);
        StorageDead(_162);
        StorageDead(_160);
        StorageLive(_163);
        _163 = _140;
        _135 = std::result::Result::<(), error::ErrorCode>::Err(move _163);
        StorageDead(_163);
        StorageDead(_140);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_136);
        _134 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _135) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_135);
        _164 = discriminant(_134);
        switchInt(move _164) -> [0: bb64, 1: bb65, otherwise: bb10];
    }

    bb64: {
        StorageLive(_168);
        _168 = ((_134 as Continue).0: ());
        _133 = _168;
        StorageDead(_168);
        StorageDead(_134);
        StorageDead(_133);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = ((*_3).2: u128);
        StorageLive(_174);
        _174 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_175);
        _175 = _2;
        _172 = if_shares_to_vault_amount(move _173, move _174, move _175) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_165);
        _165 = ((_134 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_167);
        _167 = _165;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _167) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb107;
    }

    bb67: {
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_173);
        _171 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _172) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_172);
        _176 = discriminant(_171);
        switchInt(move _176) -> [0: bb69, 1: bb70, otherwise: bb10];
    }

    bb69: {
        StorageLive(_180);
        _180 = ((_171 as Continue).0: u64);
        _170 = _180;
        StorageDead(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _2;
        _181 = core::num::<impl u64>::saturating_sub(move _182, const 1_u64) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_177);
        _177 = ((_171 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_179);
        _179 = _177;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _179) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_171);
        goto -> bb107;
    }

    bb72: {
        StorageDead(_182);
        _169 = <u64 as Ord>::min(move _170, move _181) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_181);
        StorageDead(_170);
        ((*_3).5: u64) = move _169;
        StorageDead(_169);
        StorageDead(_171);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = ((*_3).5: u64);
        _186 = Eq(move _187, const 0_u64);
        switchInt(move _186) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        StorageDead(_187);
        goto -> bb76;
    }

    bb75: {
        StorageDead(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = ((*_3).5: u64);
        StorageLive(_190);
        _190 = _2;
        _188 = Lt(move _189, move _190);
        switchInt(move _188) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        StorageDead(_190);
        StorageDead(_189);
        StorageLive(_191);
        _191 = ();
        _185 = std::result::Result::<(), error::ErrorCode>::Ok(move _191);
        StorageDead(_191);
        goto -> bb85;
    }

    bb77: {
        StorageDead(_190);
        StorageDead(_189);
        StorageLive(_192);
        _192 = error::ErrorCode::InvalidIFUnstakeSize;
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _272 = const _;
        _203 = &(*_272);
        _202 = &(*_203);
        _201 = move _202 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_202);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &_192;
        _210 = &(*_211);
        _209 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _210) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_210);
        _208 = [move _209];
        StorageDead(_209);
        _207 = &_208;
        _206 = &(*_207);
        _205 = move _206 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_206);
        _200 = Arguments::<'_>::new_v1(move _201, move _205) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_205);
        StorageDead(_201);
        _199 = format(move _200) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_200);
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_203);
        _198 = move _199;
        StorageDead(_199);
        _197 = &_198;
        _196 = &(*_197);
        _195 = <String as Deref>::deref(move _196) -> [return: bb81, unwind: bb111];
    }

    bb81: {
        _194 = &(*_195);
        StorageDead(_196);
        _193 = solana_program::log::sol_log(move _194) -> [return: bb82, unwind: bb111];
    }

    bb82: {
        StorageDead(_194);
        drop(_198) -> [return: bb83, unwind: bb116];
    }

    bb83: {
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_193);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = const "Requested withdraw value is not below Insurance Fund balance";
        _213 = &(*_214);
        _212 = solana_program::log::sol_log(move _213) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_213);
        StorageDead(_214);
        StorageDead(_212);
        StorageLive(_215);
        _215 = _192;
        _185 = std::result::Result::<(), error::ErrorCode>::Err(move _215);
        StorageDead(_215);
        StorageDead(_192);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_188);
        StorageDead(_186);
        _184 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _185) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_185);
        _216 = discriminant(_184);
        switchInt(move _216) -> [0: bb87, 1: bb88, otherwise: bb10];
    }

    bb87: {
        StorageLive(_220);
        _220 = ((_184 as Continue).0: ());
        _183 = _220;
        StorageDead(_220);
        StorageDead(_184);
        StorageDead(_183);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &(*_3);
        StorageLive(_225);
        _225 = &(*_5);
        _223 = InsuranceFundStake::checked_if_shares(move _224, move _225) -> [return: bb90, unwind continue];
    }

    bb88: {
        StorageLive(_217);
        _217 = ((_184 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_219);
        _219 = _217;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _219) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_184);
        StorageDead(_183);
        goto -> bb107;
    }

    bb90: {
        StorageDead(_225);
        StorageDead(_224);
        _222 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _223) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_223);
        _226 = discriminant(_222);
        switchInt(move _226) -> [0: bb92, 1: bb93, otherwise: bb10];
    }

    bb92: {
        StorageLive(_230);
        _230 = ((_222 as Continue).0: u128);
        _221 = _230;
        StorageDead(_230);
        StorageDead(_222);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = _2;
        StorageLive(_235);
        _235 = &mut (*_3);
        StorageLive(_236);
        _236 = &mut (*_4);
        StorageLive(_237);
        _237 = &mut (*_5);
        StorageLive(_238);
        _238 = _6;
        _233 = update_user_stats_if_stake_amount(const 0_i64, move _234, move _235, move _236, move _237, move _238) -> [return: bb95, unwind continue];
    }

    bb93: {
        StorageLive(_227);
        _227 = ((_222 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_229);
        _229 = _227;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _229) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_222);
        goto -> bb104;
    }

    bb95: {
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_234);
        _232 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _233) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_233);
        _239 = discriminant(_232);
        switchInt(move _239) -> [0: bb97, 1: bb98, otherwise: bb10];
    }

    bb97: {
        StorageLive(_243);
        _243 = ((_232 as Continue).0: ());
        _231 = _243;
        StorageDead(_243);
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = _6;
        StorageLive(_259);
        _259 = ((*_4).0: anchor_lang::prelude::Pubkey);
        StorageLive(_260);
        _260 = StakeAction::UnstakeRequest;
        StorageLive(_261);
        _261 = ((*_3).5: u64);
        StorageLive(_262);
        _262 = ((*_5).42: u16);
        StorageLive(_263);
        _263 = _2;
        StorageLive(_264);
        _264 = _47;
        StorageLive(_265);
        _265 = _58;
        StorageLive(_266);
        _266 = _57;
        StorageLive(_267);
        _267 = _221;
        StorageLive(_268);
        _268 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_269);
        _269 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        _257 = InsuranceFundStakeRecord { ts: move _258, user_authority: move _259, action: move _260, amount: move _261, market_index: move _262, insurance_vault_amount_before: move _263, if_shares_before: move _264, user_if_shares_before: move _265, total_if_shares_before: move _266, if_shares_after: move _267, user_if_shares_after: move _269, total_if_shares_after: move _268 };
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_258);
        _256 = &_257;
        _255 = &(*_256);
        _254 = <InsuranceFundStakeRecord as anchor_lang::Event>::data(move _255) -> [return: bb100, unwind continue];
    }

    bb98: {
        StorageLive(_240);
        _240 = ((_232 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb104;
    }

    bb100: {
        StorageDead(_255);
        _253 = &_254;
        _252 = &(*_253);
        _251 = <Vec<u8> as Deref>::deref(move _252) -> [return: bb101, unwind: bb110];
    }

    bb101: {
        _250 = &(*_251);
        StorageDead(_252);
        _249 = [move _250];
        StorageDead(_250);
        _248 = &_249;
        _247 = &(*_248);
        _246 = move _247 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_247);
        _245 = solana_program::log::sol_log_data(move _246) -> [return: bb102, unwind: bb110];
    }

    bb102: {
        StorageDead(_246);
        drop(_254) -> [return: bb103, unwind: bb116];
    }

    bb103: {
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_245);
        _244 = const ();
        StorageDead(_244);
        StorageLive(_270);
        _270 = _6;
        ((*_3).6: i64) = move _270;
        StorageDead(_270);
        StorageLive(_271);
        _271 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _271);
        StorageDead(_271);
        StorageDead(_221);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_47);
        goto -> bb109;
    }

    bb104: {
        StorageDead(_221);
        goto -> bb107;
    }

    bb105: {
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb108;
    }

    bb108: {
        StorageDead(_47);
        goto -> bb109;
    }

    bb109: {
        return;
    }

    bb110 (cleanup): {
        drop(_254) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_198) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_146) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_100) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_81) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_12) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        resume;
    }
}
