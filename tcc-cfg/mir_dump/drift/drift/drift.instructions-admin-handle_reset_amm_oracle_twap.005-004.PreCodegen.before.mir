// MIR for `admin::handle_reset_amm_oracle_twap` before PreCodegen

fn admin::handle_reset_amm_oracle_twap(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::RepegCurve<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: ();
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _14: std::result::Result<(), anchor_lang::error::Error>;
    let mut _15: &anchor_lang::prelude::AccountInfo<'_>;
    let _16: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _23: ();
    let _24: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _25: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _27: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _28: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _29: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _30: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _36: ();
    let mut _37: &str;
    let _38: &str;
    let mut _39: &std::string::String;
    let _40: &std::string::String;
    let _41: std::string::String;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[&str; 1];
    let _46: &[&str; 1];
    let _47: [&str; 1];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let mut _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: [core::fmt::rt::Argument<'_>; 1];
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &u16;
    let _54: &u16;
    let _55: &state::perp_market::PerpMarket;
    let mut _56: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _57: ();
    let mut _58: &str;
    let _59: &str;
    let mut _60: &std::string::String;
    let _61: &std::string::String;
    let _62: std::string::String;
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[&str; 2];
    let _67: &[&str; 2];
    let _68: [&str; 2];
    let mut _69: &[core::fmt::rt::Argument<'_>];
    let mut _70: &[core::fmt::rt::Argument<'_>; 2];
    let _71: &[core::fmt::rt::Argument<'_>; 2];
    let _72: [core::fmt::rt::Argument<'_>; 2];
    let mut _73: core::fmt::rt::Argument<'_>;
    let mut _74: &i64;
    let _75: &i64;
    let _76: &state::perp_market::PerpMarket;
    let mut _77: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &i64;
    let _80: &i64;
    let _81: i64;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _83: std::result::Result<i64, error::ErrorCode>;
    let mut _84: u64;
    let mut _85: &state::perp_market::PerpMarket;
    let mut _86: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _92: ();
    let mut _93: &str;
    let _94: &str;
    let mut _95: &std::string::String;
    let _96: &std::string::String;
    let _97: std::string::String;
    let mut _99: std::fmt::Arguments<'_>;
    let mut _100: &[&str];
    let mut _101: &[&str; 2];
    let _102: &[&str; 2];
    let _103: [&str; 2];
    let mut _104: &[core::fmt::rt::Argument<'_>];
    let mut _105: &[core::fmt::rt::Argument<'_>; 2];
    let _106: &[core::fmt::rt::Argument<'_>; 2];
    let _107: [core::fmt::rt::Argument<'_>; 2];
    let mut _108: core::fmt::rt::Argument<'_>;
    let mut _109: &i64;
    let _110: &i64;
    let _111: &state::perp_market::PerpMarket;
    let mut _112: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _113: core::fmt::rt::Argument<'_>;
    let mut _114: &i64;
    let _115: &i64;
    let _116: &state::perp_market::PerpMarket;
    let mut _117: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _118: i64;
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _120: std::result::Result<i64, error::ErrorCode>;
    let mut _121: u64;
    let mut _122: &state::perp_market::PerpMarket;
    let mut _123: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _129: &mut state::perp_market::PerpMarket;
    let mut _130: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _131: i64;
    let mut _132: &state::perp_market::PerpMarket;
    let mut _133: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _134: &mut state::perp_market::PerpMarket;
    let mut _135: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _136: ();
    let mut _140: &mut instructions::admin::RepegCurve<'_>;
    let mut _141: &mut instructions::admin::RepegCurve<'_>;
    let mut _142: &mut instructions::admin::RepegCurve<'_>;
    let mut _143: &mut instructions::admin::RepegCurve<'_>;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _20;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _23;
        scope 8 {
        }
    }
    scope 9 {
        debug perp_market => _24;
        let _42: std::string::String;
        let _63: std::string::String;
        let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _91: i64;
        let _98: std::string::String;
        let _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _128: i64;
        let mut _137: &[&str; 2];
        let mut _138: &[&str; 2];
        let mut _139: &[&str; 1];
        scope 14 {
            debug res => _42;
        }
        scope 15 {
            debug res => _63;
        }
        scope 16 {
            debug residual => _88;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _91;
            scope 19 {
            }
        }
        scope 20 {
            debug res => _98;
        }
        scope 21 {
            debug residual => _125;
            scope 22 {
            }
        }
        scope 23 {
            debug val => _128;
            scope 24 {
            }
        }
    }
    scope 10 {
        debug residual => _32;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _35;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _140 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _6 = &((*_140).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _5 = &(*_6);
        _4 = constraints::perp_market_valid(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb65];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _144 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _141 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _16 = &((*_141).2: anchor_lang::prelude::AccountInfo<'_>);
        _15 = &(*_16);
        StorageLive(_17);
        StorageLive(_18);
        _142 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _18 = &((*_142).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _17 = &(*_18);
        _14 = constraints::valid_oracle_for_perp_market(move _15, move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb68];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _154 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb60;
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_15);
        _13 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb65];
    }

    bb8: {
        StorageDead(_14);
        _19 = discriminant(_13);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_13 as Continue).0: ());
        _12 = _23;
        StorageDead(_23);
        _146 = discriminant(_13);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _143 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _29 = &((*_143).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _28 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _29) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb11, unwind: bb67];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _152 = discriminant(_13);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb60;
    }

    bb12: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _27 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _28, move _30) -> [return: bb13, unwind: bb65];
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _27) -> [return: bb14, unwind: bb65];
    }

    bb14: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_35);
        _35 = move ((_26 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _25 = move _35;
        StorageDead(_35);
        _24 = &mut _25;
        _150 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _139 = const _;
        _46 = &(*_139);
        _45 = &(*_46);
        _44 = move _45 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_45);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &(*_24);
        _55 = <RefMut<'_, PerpMarket> as Deref>::deref(move _56) -> [return: bb18, unwind: bb64];
    }

    bb16: {
        StorageLive(_32);
        _32 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb17, unwind: bb66];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_32);
        _148 = discriminant(_26);
        StorageDead(_26);
        goto -> bb59;
    }

    bb18: {
        StorageDead(_56);
        _54 = &((*_55).21: u16);
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _53) -> [return: bb19, unwind: bb64];
    }

    bb19: {
        StorageDead(_53);
        _51 = [move _52];
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = move _49 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_49);
        _43 = Arguments::<'_>::new_v1(move _44, move _48) -> [return: bb20, unwind: bb64];
    }

    bb20: {
        StorageDead(_48);
        StorageDead(_44);
        _42 = format(move _43) -> [return: bb21, unwind: bb64];
    }

    bb21: {
        StorageDead(_43);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        _41 = move _42;
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = <String as Deref>::deref(move _39) -> [return: bb22, unwind: bb63];
    }

    bb22: {
        _37 = &(*_38);
        StorageDead(_39);
        _36 = solana_program::log::sol_log(move _37) -> [return: bb23, unwind: bb63];
    }

    bb23: {
        StorageDead(_37);
        drop(_41) -> [return: bb24, unwind: bb64];
    }

    bb24: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _138 = const _;
        _67 = &(*_138);
        _66 = &(*_67);
        _65 = move _66 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_24);
        _76 = <RefMut<'_, PerpMarket> as Deref>::deref(move _77) -> [return: bb25, unwind: bb64];
    }

    bb25: {
        StorageDead(_77);
        _75 = &((((*_76).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        _74 = &(*_75);
        _73 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _74) -> [return: bb26, unwind: bb64];
    }

    bb26: {
        StorageDead(_74);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &(*_24);
        _85 = <RefMut<'_, PerpMarket> as Deref>::deref(move _86) -> [return: bb27, unwind: bb64];
    }

    bb27: {
        StorageDead(_86);
        _84 = (((*_85).1: state::perp_market::AMM).45: u64);
        _83 = <u64 as Cast>::cast::<i64>(move _84) -> [return: bb28, unwind: bb64];
    }

    bb28: {
        StorageDead(_84);
        _82 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _83) -> [return: bb29, unwind: bb64];
    }

    bb29: {
        StorageDead(_83);
        _87 = discriminant(_82);
        switchInt(move _87) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_91);
        _91 = ((_82 as Continue).0: i64);
        _81 = _91;
        StorageDead(_91);
        _80 = &_81;
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _79) -> [return: bb33, unwind: bb64];
    }

    bb31: {
        StorageLive(_88);
        _88 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb32, unwind: bb64];
    }

    bb32: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb58;
    }

    bb33: {
        StorageDead(_79);
        _72 = [move _73, move _78];
        StorageDead(_78);
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = move _70 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_70);
        _64 = Arguments::<'_>::new_v1(move _65, move _69) -> [return: bb34, unwind: bb64];
    }

    bb34: {
        StorageDead(_69);
        StorageDead(_65);
        _63 = format(move _64) -> [return: bb35, unwind: bb64];
    }

    bb35: {
        StorageDead(_64);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        _62 = move _63;
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = <String as Deref>::deref(move _60) -> [return: bb36, unwind: bb62];
    }

    bb36: {
        _58 = &(*_59);
        StorageDead(_60);
        _57 = solana_program::log::sol_log(move _58) -> [return: bb37, unwind: bb62];
    }

    bb37: {
        StorageDead(_58);
        drop(_62) -> [return: bb38, unwind: bb64];
    }

    bb38: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _137 = const _;
        _102 = &(*_137);
        _101 = &(*_102);
        _100 = move _101 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_101);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_24);
        _111 = <RefMut<'_, PerpMarket> as Deref>::deref(move _112) -> [return: bb39, unwind: bb64];
    }

    bb39: {
        StorageDead(_112);
        _110 = &((((*_111).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).5: i64);
        _109 = &(*_110);
        _108 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _109) -> [return: bb40, unwind: bb64];
    }

    bb40: {
        StorageDead(_109);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &(*_24);
        _116 = <RefMut<'_, PerpMarket> as Deref>::deref(move _117) -> [return: bb41, unwind: bb64];
    }

    bb41: {
        StorageDead(_117);
        _115 = &(((*_116).1: state::perp_market::AMM).62: i64);
        _114 = &(*_115);
        _113 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _114) -> [return: bb42, unwind: bb64];
    }

    bb42: {
        StorageDead(_114);
        _107 = [move _108, move _113];
        StorageDead(_113);
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = move _105 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_105);
        _99 = Arguments::<'_>::new_v1(move _100, move _104) -> [return: bb43, unwind: bb64];
    }

    bb43: {
        StorageDead(_104);
        StorageDead(_100);
        _98 = format(move _99) -> [return: bb44, unwind: bb64];
    }

    bb44: {
        StorageDead(_99);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_102);
        _97 = move _98;
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = <String as Deref>::deref(move _95) -> [return: bb45, unwind: bb61];
    }

    bb45: {
        _93 = &(*_94);
        StorageDead(_95);
        _92 = solana_program::log::sol_log(move _93) -> [return: bb46, unwind: bb61];
    }

    bb46: {
        StorageDead(_93);
        drop(_97) -> [return: bb47, unwind: bb64];
    }

    bb47: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &(*_24);
        _122 = <RefMut<'_, PerpMarket> as Deref>::deref(move _123) -> [return: bb48, unwind: bb64];
    }

    bb48: {
        StorageDead(_123);
        _121 = (((*_122).1: state::perp_market::AMM).45: u64);
        _120 = <u64 as Cast>::cast::<i64>(move _121) -> [return: bb49, unwind: bb64];
    }

    bb49: {
        StorageDead(_121);
        _119 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _120) -> [return: bb50, unwind: bb64];
    }

    bb50: {
        StorageDead(_120);
        _124 = discriminant(_119);
        switchInt(move _124) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_128);
        _128 = ((_119 as Continue).0: i64);
        _118 = _128;
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &mut (*_24);
        _129 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _130) -> [return: bb54, unwind: bb64];
    }

    bb52: {
        StorageLive(_125);
        _125 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_127);
        _127 = _125;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _127) -> [return: bb53, unwind: bb64];
    }

    bb53: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_118);
        StorageDead(_122);
        StorageDead(_119);
        goto -> bb58;
    }

    bb54: {
        StorageDead(_130);
        ((((*_129).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64) = move _118;
        StorageDead(_118);
        StorageDead(_129);
        StorageDead(_122);
        StorageDead(_119);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &(*_24);
        _132 = <RefMut<'_, PerpMarket> as Deref>::deref(move _133) -> [return: bb55, unwind: bb64];
    }

    bb55: {
        StorageDead(_133);
        _131 = (((*_132).1: state::perp_market::AMM).62: i64);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &mut (*_24);
        _134 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _135) -> [return: bb56, unwind: bb64];
    }

    bb56: {
        StorageDead(_135);
        ((((*_134).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).5: i64) = move _131;
        StorageDead(_131);
        StorageDead(_134);
        StorageDead(_132);
        StorageLive(_136);
        _136 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _136);
        StorageDead(_136);
        drop(_25) -> [return: bb57, unwind: bb65];
    }

    bb57: {
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb60;
    }

    bb58: {
        drop(_25) -> [return: bb59, unwind: bb65];
    }

    bb59: {
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb60;
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        drop(_97) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_62) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_41) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_25) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        resume;
    }

    bb66 (cleanup): {
        _156 = discriminant(_26);
        goto -> bb65;
    }

    bb67 (cleanup): {
        _157 = discriminant(_13);
        goto -> bb65;
    }

    bb68 (cleanup): {
        _158 = discriminant(_3);
        goto -> bb65;
    }
}
