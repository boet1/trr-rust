// MIR for `admin::handle_update_perp_liquidation_fee` before PreCodegen

fn admin::handle_update_perp_liquidation_fee(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u32, _3: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidator_fee => _2;
    debug if_liquidation_fee => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _20: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _26: ();
    let mut _27: &str;
    let _28: &str;
    let mut _29: &std::string::String;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[&str; 2];
    let _36: &[&str; 2];
    let _37: [&str; 2];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let mut _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let mut _43: &u16;
    let _44: &u16;
    let _45: &state::perp_market::PerpMarket;
    let mut _46: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _49: std::result::Result<(), error::ErrorCode>;
    let mut _50: bool;
    let mut _51: u32;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _53: std::result::Result<u32, error::ErrorCode>;
    let mut _54: u32;
    let mut _55: u32;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: ();
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: &std::string::String;
    let _67: &std::string::String;
    let _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[&str; 2];
    let _73: &[&str; 2];
    let _74: [&str; 2];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let mut _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: &error::ErrorCode;
    let _81: &error::ErrorCode;
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: error::ErrorCode;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _91: ();
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _93: std::result::Result<(), error::ErrorCode>;
    let mut _94: bool;
    let mut _95: u32;
    let mut _96: ();
    let _98: ();
    let mut _99: &str;
    let _100: &str;
    let mut _101: &std::string::String;
    let _102: &std::string::String;
    let _103: std::string::String;
    let mut _105: std::fmt::Arguments<'_>;
    let mut _106: &[&str];
    let mut _107: &[&str; 2];
    let _108: &[&str; 2];
    let _109: [&str; 2];
    let mut _110: &[core::fmt::rt::Argument<'_>];
    let mut _111: &[core::fmt::rt::Argument<'_>; 1];
    let _112: &[core::fmt::rt::Argument<'_>; 1];
    let _113: [core::fmt::rt::Argument<'_>; 1];
    let mut _114: core::fmt::rt::Argument<'_>;
    let mut _115: &error::ErrorCode;
    let _116: &error::ErrorCode;
    let _117: ();
    let mut _118: &str;
    let _119: &str;
    let mut _120: error::ErrorCode;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _126: ();
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _128: std::result::Result<(), error::ErrorCode>;
    let mut _129: u32;
    let mut _130: &state::perp_market::PerpMarket;
    let mut _131: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _132: u32;
    let mut _133: &state::perp_market::PerpMarket;
    let mut _134: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _135: u32;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _137: std::result::Result<u32, error::ErrorCode>;
    let mut _138: u16;
    let mut _139: &state::perp_market::PerpMarket;
    let mut _140: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: u32;
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _148: std::result::Result<u32, error::ErrorCode>;
    let mut _149: u16;
    let mut _150: &state::perp_market::PerpMarket;
    let mut _151: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _152: isize;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _157: u32;
    let mut _158: u32;
    let mut _159: &state::perp_market::PerpMarket;
    let mut _160: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _161: isize;
    let mut _163: !;
    let mut _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _166: ();
    let mut _167: &str;
    let _168: &str;
    let mut _169: &std::string::String;
    let _170: &std::string::String;
    let _171: std::string::String;
    let mut _173: std::fmt::Arguments<'_>;
    let mut _174: &[&str];
    let mut _175: &[&str; 2];
    let _176: &[&str; 2];
    let _177: [&str; 2];
    let mut _178: &[core::fmt::rt::Argument<'_>];
    let mut _179: &[core::fmt::rt::Argument<'_>; 2];
    let _180: &[core::fmt::rt::Argument<'_>; 2];
    let _181: [core::fmt::rt::Argument<'_>; 2];
    let mut _182: core::fmt::rt::Argument<'_>;
    let mut _183: &u32;
    let _184: &u32;
    let _185: &state::perp_market::PerpMarket;
    let mut _186: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _187: core::fmt::rt::Argument<'_>;
    let mut _188: &u32;
    let _189: &u32;
    let _190: ();
    let mut _191: &str;
    let _192: &str;
    let mut _193: &std::string::String;
    let _194: &std::string::String;
    let _195: std::string::String;
    let mut _197: std::fmt::Arguments<'_>;
    let mut _198: &[&str];
    let mut _199: &[&str; 2];
    let _200: &[&str; 2];
    let _201: [&str; 2];
    let mut _202: &[core::fmt::rt::Argument<'_>];
    let mut _203: &[core::fmt::rt::Argument<'_>; 2];
    let _204: &[core::fmt::rt::Argument<'_>; 2];
    let _205: [core::fmt::rt::Argument<'_>; 2];
    let mut _206: core::fmt::rt::Argument<'_>;
    let mut _207: &u32;
    let _208: &u32;
    let _209: &state::perp_market::PerpMarket;
    let mut _210: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _211: core::fmt::rt::Argument<'_>;
    let mut _212: &u32;
    let _213: &u32;
    let mut _214: u32;
    let mut _215: &mut state::perp_market::PerpMarket;
    let mut _216: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _217: u32;
    let mut _218: &mut state::perp_market::PerpMarket;
    let mut _219: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _220: ();
    let mut _226: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _227: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _14;
        let _32: std::string::String;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: u32;
        let _62: error::ErrorCode;
        let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _90: ();
        let _97: error::ErrorCode;
        let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _125: ();
        let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _145: u32;
        let _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _156: u32;
        let _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _165: ();
        let _172: std::string::String;
        let _196: std::string::String;
        let mut _221: &[&str; 2];
        let mut _222: &[&str; 2];
        let mut _225: &[&str; 2];
        scope 10 {
            debug res => _32;
        }
        scope 11 {
            debug residual => _57;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _60;
            scope 14 {
            }
        }
        scope 15 {
            debug error_code => _62;
            let _69: std::string::String;
            let mut _224: &[&str; 2];
            scope 16 {
                debug res => _69;
            }
        }
        scope 17 {
            debug residual => _87;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _90;
            scope 20 {
            }
        }
        scope 21 {
            debug error_code => _97;
            let _104: std::string::String;
            let mut _223: &[&str; 2];
            scope 22 {
                debug res => _104;
            }
        }
        scope 23 {
            debug residual => _122;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _125;
            scope 26 {
            }
        }
        scope 27 {
            debug residual => _142;
            scope 28 {
            }
        }
        scope 29 {
            debug val => _145;
            scope 30 {
            }
        }
        scope 31 {
            debug residual => _153;
            scope 32 {
            }
        }
        scope 33 {
            debug val => _156;
            scope 34 {
            }
        }
        scope 35 {
            debug residual => _162;
            scope 36 {
            }
        }
        scope 37 {
            debug val => _165;
            scope 38 {
            }
        }
        scope 39 {
            debug res => _172;
        }
        scope 40 {
            debug res => _196;
        }
    }
    scope 6 {
        debug residual => _22;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _226 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _8 = &((*_226).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _7 = &(*_8);
        _6 = constraints::perp_market_valid(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb104];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _228 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _227 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _19 = &((*_227).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _18 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb106];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _234 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb97;
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _17 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _18, move _20) -> [return: bb8, unwind: bb104];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb9, unwind: bb104];
    }

    bb9: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _15 = move _25;
        StorageDead(_25);
        _14 = &mut _15;
        _232 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _225 = const _;
        _36 = &(*_225);
        _35 = &(*_36);
        _34 = move _35 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_14);
        _45 = <RefMut<'_, PerpMarket> as Deref>::deref(move _46) -> [return: bb13, unwind: bb103];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb12, unwind: bb105];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _230 = discriminant(_16);
        StorageDead(_16);
        goto -> bb96;
    }

    bb13: {
        StorageDead(_46);
        _44 = &((*_45).21: u16);
        _43 = &(*_44);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _43) -> [return: bb14, unwind: bb103];
    }

    bb14: {
        StorageDead(_43);
        _41 = [move _42];
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = move _39 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_39);
        _33 = Arguments::<'_>::new_v1(move _34, move _38) -> [return: bb15, unwind: bb103];
    }

    bb15: {
        StorageDead(_38);
        StorageDead(_34);
        _32 = format(move _33) -> [return: bb16, unwind: bb103];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_36);
        _31 = move _32;
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = <String as Deref>::deref(move _29) -> [return: bb17, unwind: bb102];
    }

    bb17: {
        _27 = &(*_28);
        StorageDead(_29);
        _26 = solana_program::log::sol_log(move _27) -> [return: bb18, unwind: bb102];
    }

    bb18: {
        StorageDead(_27);
        drop(_31) -> [return: bb19, unwind: bb103];
    }

    bb19: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _2;
        StorageLive(_55);
        _55 = _3;
        _53 = <u32 as SafeMath>::safe_add(move _54, move _55) -> [return: bb20, unwind: bb103];
    }

    bb20: {
        StorageDead(_55);
        StorageDead(_54);
        _52 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _53) -> [return: bb21, unwind: bb103];
    }

    bb21: {
        StorageDead(_53);
        _56 = discriminant(_52);
        switchInt(move _56) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_60);
        _60 = ((_52 as Continue).0: u32);
        _51 = _60;
        StorageDead(_60);
        _50 = Lt(move _51, const _);
        switchInt(move _50) -> [0: bb26, otherwise: bb25];
    }

    bb23: {
        StorageLive(_57);
        _57 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb24, unwind: bb103];
    }

    bb24: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb94;
    }

    bb25: {
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_61);
        _61 = ();
        _49 = std::result::Result::<(), error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        goto -> bb34;
    }

    bb26: {
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_62);
        _62 = error::ErrorCode::DefaultError;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _224 = const _;
        _73 = &(*_224);
        _72 = &(*_73);
        _71 = move _72 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_62;
        _80 = &(*_81);
        _79 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _80) -> [return: bb27, unwind: bb103];
    }

    bb27: {
        StorageDead(_80);
        _78 = [move _79];
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        _70 = Arguments::<'_>::new_v1(move _71, move _75) -> [return: bb28, unwind: bb103];
    }

    bb28: {
        StorageDead(_75);
        StorageDead(_71);
        _69 = format(move _70) -> [return: bb29, unwind: bb103];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _68 = move _69;
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = <String as Deref>::deref(move _66) -> [return: bb30, unwind: bb101];
    }

    bb30: {
        _64 = &(*_65);
        StorageDead(_66);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb31, unwind: bb101];
    }

    bb31: {
        StorageDead(_64);
        drop(_68) -> [return: bb32, unwind: bb103];
    }

    bb32: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = const "Total liquidation fee must be less than 100%";
        _83 = &(*_84);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb33, unwind: bb103];
    }

    bb33: {
        StorageDead(_83);
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_85);
        _85 = _62;
        _49 = std::result::Result::<(), error::ErrorCode>::Err(move _85);
        StorageDead(_85);
        StorageDead(_62);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_50);
        _48 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _49) -> [return: bb35, unwind: bb103];
    }

    bb35: {
        StorageDead(_49);
        _86 = discriminant(_48);
        switchInt(move _86) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_90);
        _90 = ((_48 as Continue).0: ());
        _47 = _90;
        StorageDead(_90);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _3;
        _94 = Lt(move _95, const _);
        switchInt(move _94) -> [0: bb40, otherwise: bb39];
    }

    bb37: {
        StorageLive(_87);
        _87 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb38, unwind: bb103];
    }

    bb38: {
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb94;
    }

    bb39: {
        StorageDead(_95);
        StorageLive(_96);
        _96 = ();
        _93 = std::result::Result::<(), error::ErrorCode>::Ok(move _96);
        StorageDead(_96);
        goto -> bb48;
    }

    bb40: {
        StorageDead(_95);
        StorageLive(_97);
        _97 = error::ErrorCode::DefaultError;
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _223 = const _;
        _108 = &(*_223);
        _107 = &(*_108);
        _106 = move _107 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_107);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &_97;
        _115 = &(*_116);
        _114 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _115) -> [return: bb41, unwind: bb103];
    }

    bb41: {
        StorageDead(_115);
        _113 = [move _114];
        StorageDead(_114);
        _112 = &_113;
        _111 = &(*_112);
        _110 = move _111 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_111);
        _105 = Arguments::<'_>::new_v1(move _106, move _110) -> [return: bb42, unwind: bb103];
    }

    bb42: {
        StorageDead(_110);
        StorageDead(_106);
        _104 = format(move _105) -> [return: bb43, unwind: bb103];
    }

    bb43: {
        StorageDead(_105);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_108);
        _103 = move _104;
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        _100 = <String as Deref>::deref(move _101) -> [return: bb44, unwind: bb100];
    }

    bb44: {
        _99 = &(*_100);
        StorageDead(_101);
        _98 = solana_program::log::sol_log(move _99) -> [return: bb45, unwind: bb100];
    }

    bb45: {
        StorageDead(_99);
        drop(_103) -> [return: bb46, unwind: bb103];
    }

    bb46: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = const "If liquidation fee must be less than 100%";
        _118 = &(*_119);
        _117 = solana_program::log::sol_log(move _118) -> [return: bb47, unwind: bb103];
    }

    bb47: {
        StorageDead(_118);
        StorageDead(_119);
        StorageDead(_117);
        StorageLive(_120);
        _120 = _97;
        _93 = std::result::Result::<(), error::ErrorCode>::Err(move _120);
        StorageDead(_120);
        StorageDead(_97);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_94);
        _92 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _93) -> [return: bb49, unwind: bb103];
    }

    bb49: {
        StorageDead(_93);
        _121 = discriminant(_92);
        switchInt(move _121) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_125);
        _125 = ((_92 as Continue).0: ());
        _91 = _125;
        StorageDead(_125);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &(*_14);
        _130 = <RefMut<'_, PerpMarket> as Deref>::deref(move _131) -> [return: bb53, unwind: bb103];
    }

    bb51: {
        StorageLive(_122);
        _122 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb52, unwind: bb103];
    }

    bb52: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb95;
    }

    bb53: {
        StorageDead(_131);
        _129 = ((*_130).15: u32);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &(*_14);
        _133 = <RefMut<'_, PerpMarket> as Deref>::deref(move _134) -> [return: bb54, unwind: bb103];
    }

    bb54: {
        StorageDead(_134);
        _132 = ((*_133).16: u32);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &(*_14);
        _139 = <RefMut<'_, PerpMarket> as Deref>::deref(move _140) -> [return: bb55, unwind: bb103];
    }

    bb55: {
        StorageDead(_140);
        _138 = ((*_139).32: u16);
        _137 = <u16 as Cast>::cast::<u32>(move _138) -> [return: bb56, unwind: bb103];
    }

    bb56: {
        StorageDead(_138);
        _136 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _137) -> [return: bb57, unwind: bb103];
    }

    bb57: {
        StorageDead(_137);
        _141 = discriminant(_136);
        switchInt(move _141) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_145);
        _145 = ((_136 as Continue).0: u32);
        _135 = _145;
        StorageDead(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &(*_14);
        _150 = <RefMut<'_, PerpMarket> as Deref>::deref(move _151) -> [return: bb61, unwind: bb103];
    }

    bb59: {
        StorageLive(_142);
        _142 = ((_136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb60, unwind: bb103];
    }

    bb60: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb93;
    }

    bb61: {
        StorageDead(_151);
        _149 = ((*_150).33: u16);
        _148 = <u16 as Cast>::cast::<u32>(move _149) -> [return: bb62, unwind: bb103];
    }

    bb62: {
        StorageDead(_149);
        _147 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _148) -> [return: bb63, unwind: bb103];
    }

    bb63: {
        StorageDead(_148);
        _152 = discriminant(_147);
        switchInt(move _152) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_156);
        _156 = ((_147 as Continue).0: u32);
        _146 = _156;
        StorageDead(_156);
        StorageLive(_157);
        _157 = _2;
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_14);
        _159 = <RefMut<'_, PerpMarket> as Deref>::deref(move _160) -> [return: bb67, unwind: bb103];
    }

    bb65: {
        StorageLive(_153);
        _153 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_155);
        _155 = _153;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _155) -> [return: bb66, unwind: bb103];
    }

    bb66: {
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_146);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb92;
    }

    bb67: {
        StorageDead(_160);
        _158 = (((*_159).1: state::perp_market::AMM).64: u32);
        _128 = validate_margin(move _129, move _132, move _135, move _146, move _157, move _158) -> [return: bb68, unwind: bb103];
    }

    bb68: {
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_146);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        _127 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _128) -> [return: bb69, unwind: bb103];
    }

    bb69: {
        StorageDead(_128);
        _161 = discriminant(_127);
        switchInt(move _161) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_165);
        _165 = ((_127 as Continue).0: ());
        _126 = _165;
        StorageDead(_165);
        StorageDead(_159);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _222 = const _;
        _176 = &(*_222);
        _175 = &(*_176);
        _174 = move _175 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_175);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &(*_14);
        _185 = <RefMut<'_, PerpMarket> as Deref>::deref(move _186) -> [return: bb73, unwind: bb103];
    }

    bb71: {
        StorageLive(_162);
        _162 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_164);
        _164 = _162;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _164) -> [return: bb72, unwind: bb103];
    }

    bb72: {
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_159);
        goto -> bb92;
    }

    bb73: {
        StorageDead(_186);
        _184 = &((*_185).13: u32);
        _183 = &(*_184);
        _182 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _183) -> [return: bb74, unwind: bb103];
    }

    bb74: {
        StorageDead(_183);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &_2;
        _188 = &(*_189);
        _187 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _188) -> [return: bb75, unwind: bb103];
    }

    bb75: {
        StorageDead(_188);
        _181 = [move _182, move _187];
        StorageDead(_187);
        StorageDead(_182);
        _180 = &_181;
        _179 = &(*_180);
        _178 = move _179 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_179);
        _173 = Arguments::<'_>::new_v1(move _174, move _178) -> [return: bb76, unwind: bb103];
    }

    bb76: {
        StorageDead(_178);
        StorageDead(_174);
        _172 = format(move _173) -> [return: bb77, unwind: bb103];
    }

    bb77: {
        StorageDead(_173);
        StorageDead(_189);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_176);
        _171 = move _172;
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = <String as Deref>::deref(move _169) -> [return: bb78, unwind: bb99];
    }

    bb78: {
        _167 = &(*_168);
        StorageDead(_169);
        _166 = solana_program::log::sol_log(move _167) -> [return: bb79, unwind: bb99];
    }

    bb79: {
        StorageDead(_167);
        drop(_171) -> [return: bb80, unwind: bb103];
    }

    bb80: {
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _221 = const _;
        _200 = &(*_221);
        _199 = &(*_200);
        _198 = move _199 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_199);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &(*_14);
        _209 = <RefMut<'_, PerpMarket> as Deref>::deref(move _210) -> [return: bb81, unwind: bb103];
    }

    bb81: {
        StorageDead(_210);
        _208 = &((*_209).14: u32);
        _207 = &(*_208);
        _206 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _207) -> [return: bb82, unwind: bb103];
    }

    bb82: {
        StorageDead(_207);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_3;
        _212 = &(*_213);
        _211 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _212) -> [return: bb83, unwind: bb103];
    }

    bb83: {
        StorageDead(_212);
        _205 = [move _206, move _211];
        StorageDead(_211);
        StorageDead(_206);
        _204 = &_205;
        _203 = &(*_204);
        _202 = move _203 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_203);
        _197 = Arguments::<'_>::new_v1(move _198, move _202) -> [return: bb84, unwind: bb103];
    }

    bb84: {
        StorageDead(_202);
        StorageDead(_198);
        _196 = format(move _197) -> [return: bb85, unwind: bb103];
    }

    bb85: {
        StorageDead(_197);
        StorageDead(_213);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_200);
        _195 = move _196;
        StorageDead(_196);
        _194 = &_195;
        _193 = &(*_194);
        _192 = <String as Deref>::deref(move _193) -> [return: bb86, unwind: bb98];
    }

    bb86: {
        _191 = &(*_192);
        StorageDead(_193);
        _190 = solana_program::log::sol_log(move _191) -> [return: bb87, unwind: bb98];
    }

    bb87: {
        StorageDead(_191);
        drop(_195) -> [return: bb88, unwind: bb103];
    }

    bb88: {
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_190);
        StorageLive(_214);
        _214 = _2;
        StorageLive(_215);
        StorageLive(_216);
        _216 = &mut (*_14);
        _215 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _216) -> [return: bb89, unwind: bb103];
    }

    bb89: {
        StorageDead(_216);
        ((*_215).13: u32) = move _214;
        StorageDead(_214);
        StorageDead(_215);
        StorageLive(_217);
        _217 = _3;
        StorageLive(_218);
        StorageLive(_219);
        _219 = &mut (*_14);
        _218 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _219) -> [return: bb90, unwind: bb103];
    }

    bb90: {
        StorageDead(_219);
        ((*_218).14: u32) = move _217;
        StorageDead(_217);
        StorageDead(_218);
        StorageLive(_220);
        _220 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _220);
        StorageDead(_220);
        drop(_15) -> [return: bb91, unwind: bb104];
    }

    bb91: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb97;
    }

    bb92: {
        StorageDead(_150);
        StorageDead(_147);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb95;
    }

    bb94: {
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb95;
    }

    bb95: {
        drop(_15) -> [return: bb96, unwind: bb104];
    }

    bb96: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb97;
    }

    bb97: {
        return;
    }

    bb98 (cleanup): {
        drop(_195) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_171) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_103) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_68) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_31) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_15) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        resume;
    }

    bb105 (cleanup): {
        _236 = discriminant(_16);
        goto -> bb104;
    }

    bb106 (cleanup): {
        _237 = discriminant(_5);
        goto -> bb104;
    }
}
