// MIR for `load_ref_mut` before PreCodegen

fn load_ref_mut(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<RefMut<'_, T>, anchor_lang::error::Error> {
    debug account_info => _1;
    let mut _0: std::result::Result<std::cell::RefMut<'_, T>, anchor_lang::error::Error>;
    let _2: std::cell::RefMut<'_, &mut [u8]>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::RefMut<'_, &mut [u8]>>;
    let mut _4: std::result::Result<std::cell::RefMut<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _10: std::cell::RefMut<'_, &mut [u8]>;
    let _11: ();
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: &[u8];
    let _15: &&mut [u8];
    let mut _16: &std::cell::RefMut<'_, &mut [u8]>;
    let mut _17: usize;
    let mut _18: &[u8];
    let mut _19: &[u8; 8];
    let _20: [u8; 8];
    let mut _21: !;
    let mut _22: anchor_lang::error::Error;
    let mut _23: anchor_lang::error::ErrorCode;
    let _27: &[u8];
    let mut _28: &[u8];
    let _29: &&mut [u8];
    let mut _30: &std::cell::RefMut<'_, &mut [u8]>;
    let mut _31: std::ops::Range<usize>;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: (usize, bool);
    let mut _36: &[u8];
    let _37: ();
    let mut _38: bool;
    let mut _39: &&[u8; 8];
    let mut _40: &&[u8; 8];
    let _41: &[u8; 8];
    let _42: [u8; 8];
    let mut _43: !;
    let mut _44: anchor_lang::error::Error;
    let mut _45: anchor_lang::error::ErrorCode;
    let mut _46: std::cell::RefMut<'_, T>;
    let mut _47: std::cell::RefMut<'_, &mut [u8]>;
    let mut _48: {closure@programs/drift/src/state/load_ref.rs:36:26: 36:32};
    let mut _49: &mut [u8];
    let mut _50: &mut [u8];
    let mut _51: bool;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    scope 1 {
        debug data => _2;
        let _24: &[u8; 8];
        let _25: usize;
        scope 6 {
            debug disc_bytes => _24;
        }
        scope 7 {
            debug offset => _25;
            let _26: &[u8];
            scope 8 {
                debug slice => _26;
                scope 9 {
                    scope 10 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _51 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_mut_data(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<RefMut<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _4) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_3 as Continue).0: std::cell::RefMut<'_, &mut [u8]>);
        _51 = const true;
        _2 = move _10;
        StorageDead(_10);
        _52 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_2;
        _15 = <RefMut<'_, &mut [u8]> as Deref>::deref(move _16) -> [return: bb7, unwind: bb29];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<RefMut<'_, T>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb30];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _54 = discriminant(_3);
        StorageDead(_3);
        goto -> bb25;
    }

    bb7: {
        _49 = deref_copy (*_15);
        _14 = &(*_49);
        StorageDead(_16);
        _13 = core::slice::<impl [u8]>::len(move _14) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = <T as anchor_lang::Discriminator>::discriminator() -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _19 = &_20;
        _18 = move _19 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_19);
        _17 = core::slice::<impl [u8]>::len(move _18) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        StorageDead(_18);
        _12 = Lt(move _13, move _17);
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_22);
        StorageLive(_23);
        _23 = AccountDiscriminatorNotFound;
        _22 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _23) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        StorageDead(_23);
        _0 = std::result::Result::<RefMut<'_, T>, anchor_lang::error::Error>::Err(move _22);
        StorageDead(_22);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb24;
    }

    bb13: {
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_24);
        StorageLive(_25);
        _25 = const 0_usize;
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_2;
        _29 = <RefMut<'_, &mut [u8]> as Deref>::deref(move _30) -> [return: bb14, unwind: bb29];
    }

    bb14: {
        _50 = deref_copy (*_29);
        _28 = &(*_50);
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _25;
        StorageLive(_33);
        StorageLive(_34);
        _34 = _25;
        _35 = CheckedAdd(_34, const 8_usize);
        assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", move _34, const 8_usize) -> [success: bb15, unwind: bb29];
    }

    bb15: {
        _33 = move (_35.0: usize);
        StorageDead(_34);
        _31 = std::ops::Range::<usize> { start: move _32, end: move _33 };
        StorageDead(_33);
        StorageDead(_32);
        _27 = <[u8] as Index<std::ops::Range<usize>>>::index(move _28, move _31) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_28);
        _26 = &(*_27);
        StorageLive(_36);
        _36 = &(*_26);
        _24 = load_ref_mut::as_array::<u8>(move _36) -> [return: bb17, unwind: bb29];
    }

    bb17: {
        StorageDead(_36);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_24;
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = <T as anchor_lang::Discriminator>::discriminator() -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _41 = &_42;
        _40 = &_41;
        _38 = <&[u8; 8] as PartialEq>::ne(move _39, move _40) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        switchInt(move _38) -> [0: bb22, otherwise: bb20];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        StorageLive(_45);
        _45 = AccountDiscriminatorMismatch;
        _44 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _45) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        StorageDead(_45);
        _0 = std::result::Result::<RefMut<'_, T>, anchor_lang::error::Error>::Err(move _44);
        StorageDead(_44);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_24);
        goto -> bb24;
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        _37 = const ();
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_46);
        StorageLive(_47);
        _51 = const false;
        _47 = move _2;
        StorageLive(_48);
        _48 = {closure@programs/drift/src/state/load_ref.rs:36:26: 36:32};
        _46 = RefMut::<'_, &mut [u8]>::map::<T, {closure@programs/drift/src/state/load_ref.rs:36:26: 36:32}>(move _47, move _48) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        StorageDead(_48);
        StorageDead(_47);
        _0 = std::result::Result::<RefMut<'_, T>, anchor_lang::error::Error>::Ok(move _46);
        StorageDead(_46);
        StorageDead(_24);
        _51 = const false;
        StorageDead(_2);
        goto -> bb26;
    }

    bb24: {
        drop(_2) -> [return: bb25, unwind: bb27];
    }

    bb25: {
        _51 = const false;
        StorageDead(_2);
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        resume;
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_51) -> [0: bb27, otherwise: bb28];
    }

    bb30 (cleanup): {
        _56 = discriminant(_3);
        goto -> bb27;
    }
}
