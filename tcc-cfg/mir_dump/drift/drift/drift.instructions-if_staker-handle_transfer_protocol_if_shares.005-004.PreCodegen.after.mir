// MIR for `if_staker::handle_transfer_protocol_if_shares` after PreCodegen

fn if_staker::handle_transfer_protocol_if_shares(_1: anchor_lang::context::Context<'_, '_, '_, '_, if_staker::TransferProtocolIfShares<'_>>, _2: u16, _3: u128) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug shares => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: i64;
    let mut _5: anchor_lang::prelude::Clock;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _7: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _12: anchor_lang::prelude::Clock;
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _15: std::result::Result<(), error::ErrorCode>;
    let mut _16: bool;
    let mut _17: u16;
    let mut _18: ();
    let _20: ();
    let mut _21: &str;
    let _22: &str;
    let mut _23: &std::string::String;
    let _24: &std::string::String;
    let _25: std::string::String;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[&str; 2];
    let _30: &[&str; 2];
    let _31: [&str; 2];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let mut _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let mut _37: &error::ErrorCode;
    let _38: &error::ErrorCode;
    let _39: ();
    let mut _40: &str;
    let _41: &str;
    let mut _42: error::ErrorCode;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>>;
    let mut _50: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>, anchor_lang::error::Error>;
    let mut _51: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _57: ();
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _59: std::result::Result<(), error::ErrorCode>;
    let mut _60: &state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let _61: &state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _62: &std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _63: &anchor_lang::prelude::Pubkey;
    let _64: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _65: &anchor_lang::prelude::Signer<'_>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: ();
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _73: std::result::Result<(), error::ErrorCode>;
    let mut _74: &mut state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _75: &mut state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _76: &mut std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _77: i64;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _83: ();
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _85: std::result::Result<(), error::ErrorCode>;
    let mut _86: &state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let _87: &state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _88: &std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _89: u128;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _95: u128;
    let mut _96: &mut state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _97: &mut std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _98: (u128, bool);
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _101: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _102: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _110: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _111: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _119: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _120: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _126: u64;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _128: std::result::Result<u64, error::ErrorCode>;
    let mut _129: u64;
    let mut _130: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _131: &anchor_spl::token_interface::TokenAccount;
    let _132: &anchor_spl::token_interface::TokenAccount;
    let mut _133: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _134: u128;
    let mut _135: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _136: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _137: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _138: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _139: &mut state::user::UserStats;
    let mut _140: &mut state::user::UserStats;
    let mut _141: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _142: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _143: &mut state::spot_market::SpotMarket;
    let mut _144: &mut state::spot_market::SpotMarket;
    let mut _145: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _146: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _147: i64;
    let mut _148: anchor_lang::prelude::Clock;
    let mut _149: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _150: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _156: anchor_lang::prelude::Pubkey;
    let mut _157: &state::state::State;
    let mut _158: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _164: ();
    let mut _166: &mut instructions::if_staker::TransferProtocolIfShares<'_>;
    let mut _167: &mut instructions::if_staker::TransferProtocolIfShares<'_>;
    let mut _168: &anchor_lang::prelude::Pubkey;
    let mut _169: &mut instructions::if_staker::TransferProtocolIfShares<'_>;
    let mut _170: &mut instructions::if_staker::TransferProtocolIfShares<'_>;
    let mut _171: &mut instructions::if_staker::TransferProtocolIfShares<'_>;
    let mut _172: &mut instructions::if_staker::TransferProtocolIfShares<'_>;
    let mut _173: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _174: &mut instructions::if_staker::TransferProtocolIfShares<'_>;
    let mut _175: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _209: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug now => _4;
        let _19: error::ErrorCode;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: ();
        let mut _48: std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
        let _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _56: std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
        scope 6 {
            debug error_code => _19;
            let _26: std::string::String;
            let mut _165: &[&str; 2];
            scope 7 {
                debug res => _26;
            }
        }
        scope 8 {
            debug residual => _44;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _47;
            scope 11 {
            }
        }
        scope 12 {
            debug transfer_config => _48;
            let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _70: ();
            let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _82: ();
            let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _94: ();
            let mut _99: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
            let _104: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _107: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
            scope 17 {
                debug residual => _67;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _70;
                scope 20 {
                }
            }
            scope 21 {
                debug residual => _79;
                scope 22 {
                }
            }
            scope 23 {
                debug val => _82;
                scope 24 {
                }
            }
            scope 25 {
                debug residual => _91;
                scope 26 {
                }
            }
            scope 27 {
                debug val => _94;
                scope 28 {
                }
            }
            scope 29 {
                debug if_stake => _99;
                let mut _108: std::cell::RefMut<'_, state::user::UserStats>;
                let _113: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _116: std::cell::RefMut<'_, state::user::UserStats>;
                scope 34 {
                    debug user_stats => _108;
                    let mut _117: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _125: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    scope 39 {
                        debug spot_market => _117;
                        let _152: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                        let _155: anchor_lang::prelude::Clock;
                        let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _163: u64;
                        scope 44 {
                            debug residual => _152;
                            scope 45 {
                            }
                        }
                        scope 46 {
                            debug val => _155;
                            scope 47 {
                            }
                        }
                        scope 48 {
                            debug residual => _160;
                            scope 49 {
                            }
                        }
                        scope 50 {
                            debug val => _163;
                            scope 51 {
                            }
                        }
                    }
                    scope 40 {
                        debug residual => _122;
                        scope 41 {
                        }
                    }
                    scope 42 {
                        debug val => _125;
                        scope 43 {
                        }
                    }
                }
                scope 35 {
                    debug residual => _113;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug val => _116;
                    scope 38 {
                    }
                }
            }
            scope 30 {
                debug residual => _104;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _107;
                scope 33 {
                }
            }
        }
        scope 13 {
            debug residual => _53;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _56;
            scope 16 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        _177 = const false;
        _176 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _7) -> [return: bb2, unwind: bb94];
    }

    bb2: {
        StorageDead(_7);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_6 as Continue).0: anchor_lang::prelude::Clock);
        _5 = move _12;
        StorageDead(_12);
        _4 = (_5.4: i64);
        _178 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _2;
        _16 = Eq(move _17, const _);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _11) -> [return: bb6, unwind: bb101];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _200 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb87;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        _18 = ();
        _15 = std::result::Result::<(), error::ErrorCode>::Ok(move _18);
        StorageDead(_18);
        goto -> bb16;
    }

    bb8: {
        StorageDead(_17);
        StorageLive(_19);
        _19 = error::ErrorCode::DefaultError;
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _165 = const _;
        _30 = &(*_165);
        _29 = &(*_30);
        _28 = move _29 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &_19;
        _37 = &(*_38);
        _36 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _37) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_37);
        _35 = [move _36];
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = move _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_33);
        _27 = Arguments::<'_>::new_v1(move _28, move _32) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_32);
        StorageDead(_28);
        _26 = format(move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_27);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_30);
        _25 = move _26;
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = <String as Deref>::deref(move _23) -> [return: bb12, unwind: bb93];
    }

    bb12: {
        _21 = &(*_22);
        StorageDead(_23);
        _20 = solana_program::log::sol_log(move _21) -> [return: bb13, unwind: bb93];
    }

    bb13: {
        StorageDead(_21);
        drop(_25) -> [return: bb14, unwind: bb94];
    }

    bb14: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = const "must be if for quote spot market";
        _40 = &(*_41);
        _39 = solana_program::log::sol_log(move _40) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_40);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_42);
        _42 = _19;
        _15 = std::result::Result::<(), error::ErrorCode>::Err(move _42);
        StorageDead(_42);
        StorageDead(_19);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_16);
        _14 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _15) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_15);
        _43 = discriminant(_14);
        switchInt(move _43) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_47);
        _47 = ((_14 as Continue).0: ());
        _13 = _47;
        StorageDead(_47);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _166 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfShares<'_>);
        _51 = &((*_166).1: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>);
        _50 = anchor_lang::prelude::AccountLoader::<'_, ProtocolIfSharesTransferConfig>::load_mut(move _51) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_44);
        _44 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb87;
    }

    bb21: {
        StorageDead(_51);
        _49 = <std::result::Result<RefMut<'_, ProtocolIfSharesTransferConfig>, anchor_lang::error::Error> as Try>::branch(move _50) -> [return: bb22, unwind: bb94];
    }

    bb22: {
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_56);
        _56 = move ((_49 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>);
        _48 = move _56;
        StorageDead(_56);
        _180 = discriminant(_49);
        StorageDead(_49);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_48;
        _61 = <RefMut<'_, ProtocolIfSharesTransferConfig> as Deref>::deref(move _62) -> [return: bb26, unwind: bb92];
    }

    bb24: {
        StorageLive(_53);
        _53 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _55) -> [return: bb25, unwind: bb100];
    }

    bb25: {
        StorageDead(_55);
        StorageDead(_53);
        _198 = discriminant(_49);
        StorageDead(_49);
        goto -> bb86;
    }

    bb26: {
        _60 = &(*_61);
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _167 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfShares<'_>);
        _65 = &((*_167).0: anchor_lang::prelude::Signer<'_>);
        _64 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _65) -> [return: bb27, unwind: bb92];
    }

    bb27: {
        StorageDead(_65);
        _168 = deref_copy ((*_64).0: &anchor_lang::prelude::Pubkey);
        _63 = &(*_168);
        _59 = ProtocolIfSharesTransferConfig::validate_signer(move _60, move _63) -> [return: bb28, unwind: bb92];
    }

    bb28: {
        StorageDead(_63);
        StorageDead(_60);
        _58 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _59) -> [return: bb29, unwind: bb92];
    }

    bb29: {
        StorageDead(_59);
        _66 = discriminant(_58);
        switchInt(move _66) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_70);
        _70 = ((_58 as Continue).0: ());
        _57 = _70;
        StorageDead(_70);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &mut _48;
        _75 = <RefMut<'_, ProtocolIfSharesTransferConfig> as DerefMut>::deref_mut(move _76) -> [return: bb33, unwind: bb92];
    }

    bb31: {
        StorageLive(_67);
        _67 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb32, unwind: bb92];
    }

    bb32: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb85;
    }

    bb33: {
        _74 = &mut (*_75);
        StorageDead(_76);
        StorageLive(_77);
        _77 = _4;
        _73 = ProtocolIfSharesTransferConfig::update_epoch(move _74, move _77) -> [return: bb34, unwind: bb92];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_74);
        _72 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _73) -> [return: bb35, unwind: bb92];
    }

    bb35: {
        StorageDead(_73);
        _78 = discriminant(_72);
        switchInt(move _78) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_82);
        _82 = ((_72 as Continue).0: ());
        _71 = _82;
        StorageDead(_82);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_48;
        _87 = <RefMut<'_, ProtocolIfSharesTransferConfig> as Deref>::deref(move _88) -> [return: bb39, unwind: bb92];
    }

    bb37: {
        StorageLive(_79);
        _79 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb38, unwind: bb92];
    }

    bb38: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb85;
    }

    bb39: {
        _86 = &(*_87);
        StorageDead(_88);
        StorageLive(_89);
        _89 = _3;
        _85 = ProtocolIfSharesTransferConfig::validate_transfer(move _86, move _89) -> [return: bb40, unwind: bb92];
    }

    bb40: {
        StorageDead(_89);
        StorageDead(_86);
        _84 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _85) -> [return: bb41, unwind: bb92];
    }

    bb41: {
        StorageDead(_85);
        _90 = discriminant(_84);
        switchInt(move _90) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_94);
        _94 = ((_84 as Continue).0: ());
        _83 = _94;
        StorageDead(_94);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_83);
        StorageLive(_95);
        _95 = _3;
        StorageLive(_96);
        StorageLive(_97);
        _97 = &mut _48;
        _96 = <RefMut<'_, ProtocolIfSharesTransferConfig> as DerefMut>::deref_mut(move _97) -> [return: bb45, unwind: bb92];
    }

    bb43: {
        StorageLive(_91);
        _91 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb44, unwind: bb92];
    }

    bb44: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_83);
        goto -> bb85;
    }

    bb45: {
        StorageDead(_97);
        _98 = CheckedAdd(((*_96).2: u128), _95);
        assert(!move (_98.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_96).2: u128), move _95) -> [success: bb46, unwind: bb92];
    }

    bb46: {
        ((*_96).2: u128) = move (_98.0: u128);
        StorageDead(_95);
        StorageDead(_96);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _169 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfShares<'_>);
        _102 = &((*_169).4: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _101 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load_mut(move _102) -> [return: bb47, unwind: bb92];
    }

    bb47: {
        StorageDead(_102);
        _100 = <std::result::Result<RefMut<'_, InsuranceFundStake>, anchor_lang::error::Error> as Try>::branch(move _101) -> [return: bb48, unwind: bb92];
    }

    bb48: {
        StorageDead(_101);
        _103 = discriminant(_100);
        switchInt(move _103) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_107);
        _107 = move ((_100 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _99 = move _107;
        StorageDead(_107);
        _182 = discriminant(_100);
        StorageDead(_100);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _170 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfShares<'_>);
        _111 = &((*_170).5: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _110 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _111) -> [return: bb52, unwind: bb91];
    }

    bb50: {
        StorageLive(_104);
        _104 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_106);
        _106 = move _104;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _106) -> [return: bb51, unwind: bb99];
    }

    bb51: {
        StorageDead(_106);
        StorageDead(_104);
        _196 = discriminant(_100);
        StorageDead(_100);
        goto -> bb84;
    }

    bb52: {
        StorageDead(_111);
        _109 = <std::result::Result<RefMut<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _110) -> [return: bb53, unwind: bb91];
    }

    bb53: {
        StorageDead(_110);
        _112 = discriminant(_109);
        switchInt(move _112) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_116);
        _116 = move ((_109 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _108 = move _116;
        StorageDead(_116);
        _184 = discriminant(_109);
        StorageDead(_109);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _171 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfShares<'_>);
        _120 = &((*_171).3: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _119 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _120) -> [return: bb57, unwind: bb90];
    }

    bb55: {
        StorageLive(_113);
        _113 = move ((_109 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_115);
        _115 = move _113;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _115) -> [return: bb56, unwind: bb98];
    }

    bb56: {
        StorageDead(_115);
        StorageDead(_113);
        _194 = discriminant(_109);
        StorageDead(_109);
        goto -> bb83;
    }

    bb57: {
        StorageDead(_120);
        _118 = <std::result::Result<RefMut<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _119) -> [return: bb58, unwind: bb90];
    }

    bb58: {
        StorageDead(_119);
        _121 = discriminant(_118);
        switchInt(move _121) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_125);
        _125 = move ((_118 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _117 = move _125;
        StorageDead(_125);
        _186 = discriminant(_118);
        StorageDead(_118);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _172 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfShares<'_>);
        _173 = deref_copy ((*_172).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _208 = (((_173.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _133 = &(*_208);
        _132 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _133) -> [return: bb62, unwind: bb89];
    }

    bb60: {
        StorageLive(_122);
        _122 = move ((_118 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb61, unwind: bb97];
    }

    bb61: {
        StorageDead(_124);
        StorageDead(_122);
        _192 = discriminant(_118);
        StorageDead(_118);
        goto -> bb82;
    }

    bb62: {
        _131 = &(*_132);
        _130 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _131) -> [return: bb63, unwind: bb89];
    }

    bb63: {
        StorageDead(_133);
        StorageDead(_131);
        _129 = ((*_130).2: u64);
        StorageLive(_134);
        _134 = _3;
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &mut _99;
        _137 = &mut (*_138);
        _136 = <RefMut<'_, InsuranceFundStake> as DerefMut>::deref_mut(move _137) -> [return: bb64, unwind: bb89];
    }

    bb64: {
        _135 = &mut (*_136);
        StorageDead(_137);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &mut _108;
        _141 = &mut (*_142);
        _140 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _141) -> [return: bb65, unwind: bb89];
    }

    bb65: {
        _139 = &mut (*_140);
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &mut _117;
        _145 = &mut (*_146);
        _144 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _145) -> [return: bb66, unwind: bb89];
    }

    bb66: {
        _143 = &mut (*_144);
        StorageDead(_145);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb67, unwind: bb89];
    }

    bb67: {
        _149 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _150) -> [return: bb68, unwind: bb89];
    }

    bb68: {
        _176 = const true;
        _177 = const true;
        StorageDead(_150);
        _151 = discriminant(_149);
        switchInt(move _151) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_155);
        _155 = move ((_149 as Continue).0: anchor_lang::prelude::Clock);
        _148 = move _155;
        StorageDead(_155);
        _147 = (_148.4: i64);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _174 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfShares<'_>);
        _175 = deref_copy ((*_174).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _209 = (((_175.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _158 = &(*_209);
        _157 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _158) -> [return: bb72, unwind: bb96];
    }

    bb70: {
        StorageLive(_152);
        _152 = move ((_149 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _154) -> [return: bb71, unwind: bb96];
    }

    bb71: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_147);
        StorageDead(_143);
        StorageDead(_139);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb95;
    }

    bb72: {
        StorageDead(_158);
        _156 = ((*_157).3: anchor_lang::prelude::Pubkey);
        _128 = transfer_protocol_insurance_fund_stake(move _129, move _134, move _135, move _139, move _143, move _147, move _156) -> [return: bb73, unwind: bb96];
    }

    bb73: {
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_143);
        StorageDead(_139);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_129);
        _127 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _128) -> [return: bb74, unwind: bb96];
    }

    bb74: {
        StorageDead(_128);
        _159 = discriminant(_127);
        switchInt(move _159) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_163);
        _163 = ((_127 as Continue).0: u64);
        _126 = _163;
        StorageDead(_163);
        StorageDead(_157);
        _188 = discriminant(_149);
        _176 = const false;
        _177 = const false;
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_164);
        _164 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _164);
        StorageDead(_164);
        drop(_117) -> [return: bb78, unwind: bb90];
    }

    bb76: {
        StorageLive(_160);
        _160 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb77, unwind: bb96];
    }

    bb77: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_157);
        goto -> bb95;
    }

    bb78: {
        StorageDead(_117);
        drop(_108) -> [return: bb79, unwind: bb91];
    }

    bb79: {
        StorageDead(_108);
        drop(_99) -> [return: bb80, unwind: bb92];
    }

    bb80: {
        StorageDead(_99);
        drop(_48) -> [return: bb81, unwind: bb94];
    }

    bb81: {
        StorageDead(_48);
        StorageDead(_4);
        goto -> bb88;
    }

    bb82: {
        StorageDead(_117);
        drop(_108) -> [return: bb83, unwind: bb91];
    }

    bb83: {
        StorageDead(_108);
        drop(_99) -> [return: bb84, unwind: bb92];
    }

    bb84: {
        StorageDead(_99);
        goto -> bb85;
    }

    bb85: {
        drop(_48) -> [return: bb86, unwind: bb94];
    }

    bb86: {
        StorageDead(_48);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_4);
        goto -> bb88;
    }

    bb88: {
        return;
    }

    bb89 (cleanup): {
        drop(_117) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_108) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_99) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_48) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_25) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        resume;
    }

    bb95: {
        _190 = discriminant(_149);
        _176 = const false;
        _177 = const false;
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        drop(_117) -> [return: bb82, unwind: bb90];
    }

    bb96 (cleanup): {
        _202 = discriminant(_149);
        goto -> bb89;
    }

    bb97 (cleanup): {
        _203 = discriminant(_118);
        goto -> bb90;
    }

    bb98 (cleanup): {
        _204 = discriminant(_109);
        goto -> bb91;
    }

    bb99 (cleanup): {
        _205 = discriminant(_100);
        goto -> bb92;
    }

    bb100 (cleanup): {
        _206 = discriminant(_49);
        goto -> bb94;
    }

    bb101 (cleanup): {
        _207 = discriminant(_6);
        goto -> bb94;
    }
}
