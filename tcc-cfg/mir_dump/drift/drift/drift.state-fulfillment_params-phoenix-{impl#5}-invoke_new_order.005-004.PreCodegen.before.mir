// MIR for `phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:310:1: 310:46>::invoke_new_order` before PreCodegen

fn phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:310:1: 310:46>::invoke_new_order(_1: &PhoenixFulfillmentParams<'_, '_>, _2: OrderPacket) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug order_packet => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: anchor_lang::prelude::Pubkey;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: &state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let _11: &anchor_lang::prelude::Pubkey;
    let _12: anchor_lang::prelude::Pubkey;
    let mut _13: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _14: &anchor_lang::prelude::Pubkey;
    let _15: &anchor_lang::prelude::Pubkey;
    let _16: anchor_lang::prelude::Pubkey;
    let mut _17: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _18: &anchor_lang::prelude::Pubkey;
    let _19: &anchor_lang::prelude::Pubkey;
    let mut _20: &anchor_lang::prelude::Pubkey;
    let _21: &anchor_lang::prelude::Pubkey;
    let mut _22: &phoenix::state::OrderPacket;
    let _23: &phoenix::state::OrderPacket;
    let mut _25: &u8;
    let _26: &u8;
    let _28: [&[&[u8]]; 1];
    let mut _29: &[&[u8]];
    let _30: &[&[u8]];
    let mut _31: &[&[u8]; 2];
    let mut _32: std::ops::RangeFull;
    let _33: ();
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _35: std::result::Result<(), error::ErrorCode>;
    let mut _36: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _37: &solana_program::instruction::Instruction;
    let _38: &solana_program::instruction::Instruction;
    let mut _39: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _40: &[anchor_lang::prelude::AccountInfo<'_>; 9];
    let _41: &[anchor_lang::prelude::AccountInfo<'_>; 9];
    let _42: [anchor_lang::prelude::AccountInfo<'_>; 9];
    let mut _43: &state::fulfillment_params::phoenix::PhoenixFulfillmentParams<'_, '_>;
    let mut _44: &[&[&[u8]]];
    let mut _45: &[&[&[u8]]; 1];
    let mut _46: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:333:18: 333:21};
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: ();
    let mut _53: &anchor_lang::prelude::Pubkey;
    let mut _54: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _57: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _58: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _59: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    scope 1 {
        debug base_mint => _3;
        let _4: anchor_lang::prelude::Pubkey;
        scope 2 {
            debug quote_mint => _4;
            let _5: solana_program::instruction::Instruction;
            scope 3 {
                debug new_order_instruction => _5;
                let _24: [&[u8]; 2];
                scope 4 {
                    debug signer_seeds => _24;
                    let _27: &[&[&[u8]]; 1];
                    scope 5 {
                        debug signers_seeds => _27;
                        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _51: ();
                        scope 6 {
                            debug residual => _48;
                            scope 7 {
                            }
                        }
                        scope 8 {
                            debug val => _51;
                            scope 9 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = (((((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>).1: phoenix::program::MarketHeader).3: phoenix::program::TokenParams).2: anchor_lang::prelude::Pubkey);
        StorageLive(_4);
        _4 = (((((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>).1: phoenix::program::MarketHeader).5: phoenix::program::TokenParams).2: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>);
        _7 = <PhoenixMarketContext<'_, '_> as Deref>::deref(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _53 = deref_copy ((*_7).0: &anchor_lang::prelude::Pubkey);
        _6 = &(*_53);
        StorageLive(_9);
        _54 = deref_copy ((*_1).3: &anchor_lang::prelude::AccountInfo<'_>);
        _55 = deref_copy ((*_54).0: &anchor_lang::prelude::Pubkey);
        _9 = &(*_55);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _56 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _58 = (((_56.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _13 = &(*_58);
        _12 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::Key>::key(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _11 = &_12;
        _10 = &(*_11);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _57 = deref_copy ((*_1).7: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _59 = (((_57.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _17 = &(*_59);
        _16 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::Key>::key(move _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_3;
        _18 = &(*_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_4;
        _20 = &(*_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &_2;
        _22 = &(*_23);
        _5 = create_new_order_instruction_with_custom_token_accounts(move _6, move _9, move _10, move _14, move _18, move _20, move _22) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_7);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &((*_1).9: u8);
        _25 = &(*_26);
        _24 = get_signer_seeds(move _25) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        StorageDead(_25);
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_24;
        StorageLive(_32);
        _32 = RangeFull;
        _30 = <[&[u8]; 2] as Index<RangeFull>>::index(move _31, move _32) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        StorageDead(_32);
        StorageDead(_31);
        _29 = &(*_30);
        _28 = [move _29];
        StorageDead(_29);
        _27 = &_28;
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &_5;
        _37 = &(*_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &(*_1);
        _42 = PhoenixFulfillmentParams::<'_, '_>::to_account_infos(move _43) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_27);
        _44 = move _45 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_45);
        _36 = invoke_signed_unchecked(move _37, move _39, move _44) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_37);
        StorageLive(_46);
        _46 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:333:18: 333:21};
        _35 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:333:18: 333:21}>(move _36, move _46) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        StorageDead(_46);
        StorageDead(_36);
        _34 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _35) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        StorageDead(_35);
        _47 = discriminant(_34);
        switchInt(move _47) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_51);
        _51 = ((_34 as Continue).0: ());
        _33 = _51;
        StorageDead(_51);
        drop(_42) -> [return: bb15, unwind: bb21];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_48);
        _48 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        StorageDead(_50);
        StorageDead(_48);
        drop(_42) -> [return: bb17, unwind: bb21];
    }

    bb15: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_52);
        _52 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _52);
        StorageDead(_52);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_24);
        drop(_5) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb19;
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_24);
        drop(_5) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_42) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_5) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }
}
