// MIR for `keeper::handle_update_user_idle` before PreCodegen

fn keeper::handle_update_user_idle(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdateUserIdle<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _6: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let mut _12: std::cell::RefMut<'_, state::user::User>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _17: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: std::cell::RefMut<'_, state::user::User>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _25: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _34: instructions::optional_accounts::AccountMaps<'_>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _36: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _37: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _38: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _39: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _40: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _41: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &std::collections::BTreeSet<u16>;
    let _43: &std::collections::BTreeSet<u16>;
    let _44: std::collections::BTreeSet<u16>;
    let mut _45: &std::collections::BTreeSet<u16>;
    let _46: &std::collections::BTreeSet<u16>;
    let _47: std::collections::BTreeSet<u16>;
    let mut _48: u64;
    let mut _49: anchor_lang::prelude::Clock;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _51: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _57: std::option::Option<state::state::OracleGuardRails>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: (i128, bool);
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, bool)>;
    let mut _66: std::result::Result<(i128, bool), error::ErrorCode>;
    let mut _67: &state::user::User;
    let _68: &state::user::User;
    let mut _69: &std::cell::RefMut<'_, state::user::User>;
    let _70: &std::cell::RefMut<'_, state::user::User>;
    let mut _71: &state::perp_market_map::PerpMarketMap<'_>;
    let _72: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _73: &state::spot_market_map::SpotMarketMap<'_>;
    let _74: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _75: &mut state::oracle_map::OracleMap<'_>;
    let mut _76: &mut state::oracle_map::OracleMap<'_>;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _83: i128;
    let mut _84: i128;
    let mut _85: (i128, bool);
    let _86: ();
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _88: std::result::Result<(), error::ErrorCode>;
    let mut _89: &state::user::User;
    let _90: &state::user::User;
    let mut _91: &std::cell::RefMut<'_, state::user::User>;
    let _92: &std::cell::RefMut<'_, state::user::User>;
    let mut _93: u64;
    let mut _94: bool;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: &mut state::user::User;
    let mut _101: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _102: ();
    let mut _103: &mut instructions::keeper::UpdateUserIdle<'_>;
    let mut _104: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _105: &mut instructions::keeper::UpdateUserIdle<'_>;
    let mut _106: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug user => _12;
        let _23: anchor_lang::prelude::Clock;
        let _27: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _30: anchor_lang::prelude::Clock;
        scope 10 {
            debug clock => _23;
            let _31: state::perp_market_map::PerpMarketMap<'_>;
            let _32: state::spot_market_map::SpotMarketMap<'_>;
            let mut _33: state::oracle_map::OracleMap<'_>;
            let _53: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _56: anchor_lang::prelude::Clock;
            let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _62: instructions::optional_accounts::AccountMaps<'_>;
            scope 15 {
                debug perp_market_map => _31;
                debug spot_market_map => _32;
                debug oracle_map => _33;
                let _63: i128;
                let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _81: (i128, bool);
                scope 24 {
                    debug equity => _63;
                    let _82: bool;
                    scope 29 {
                        debug accelerated => _82;
                        let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _99: ();
                        scope 30 {
                            debug residual => _96;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _99;
                            scope 33 {
                            }
                        }
                    }
                }
                scope 25 {
                    debug residual => _78;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _81;
                    scope 28 {
                    }
                }
            }
            scope 16 {
                debug residual => _53;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _56;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _59;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _62;
                scope 23 {
                }
            }
        }
        scope 11 {
            debug residual => _27;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _30;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        _108 = const false;
        _107 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _103 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserIdle<'_>);
        _6 = &((*_103).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _104 = deref_copy (*_6);
        _136 = (((_104.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _5 = &(*_136);
        _4 = constraints::exchange_not_paused(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb69];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _109 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _105 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserIdle<'_>);
        _16 = &((*_105).3: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _15 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb74];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _127 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb61;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _14 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _15, move _17) -> [return: bb8, unwind: bb69];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        _13 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _14) -> [return: bb9, unwind: bb69];
    }

    bb9: {
        StorageDead(_14);
        _18 = discriminant(_13);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_22);
        _22 = move ((_13 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _12 = move _22;
        StorageDead(_22);
        _113 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb13, unwind: bb68];
    }

    bb11: {
        StorageLive(_19);
        _19 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb12, unwind: bb73];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        _111 = discriminant(_13);
        StorageDead(_13);
        goto -> bb60;
    }

    bb13: {
        _24 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _25) -> [return: bb14, unwind: bb68];
    }

    bb14: {
        StorageDead(_25);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_30);
        _30 = move ((_24 as Continue).0: anchor_lang::prelude::Clock);
        _23 = move _30;
        StorageDead(_30);
        _115 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _106 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _41 = &(*_106);
        _40 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _41) -> [return: bb18, unwind: bb68];
    }

    bb16: {
        StorageLive(_27);
        _27 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _29) -> [return: bb17, unwind: bb72];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_27);
        _125 = discriminant(_24);
        StorageDead(_24);
        goto -> bb59;
    }

    bb18: {
        StorageDead(_41);
        _39 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _40) -> [return: bb19, unwind: bb68];
    }

    bb19: {
        StorageDead(_40);
        _38 = &mut _39;
        _37 = &mut (*_38);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = BTreeSet::<u16>::new() -> [return: bb20, unwind: bb68];
    }

    bb20: {
        _43 = &_44;
        _42 = &(*_43);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = BTreeSet::<u16>::new() -> [return: bb21, unwind: bb67];
    }

    bb21: {
        _46 = &_47;
        _45 = &(*_46);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb22, unwind: bb66];
    }

    bb22: {
        _50 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _51) -> [return: bb23, unwind: bb66];
    }

    bb23: {
        _107 = const true;
        _108 = const true;
        StorageDead(_51);
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_56);
        _56 = move ((_50 as Continue).0: anchor_lang::prelude::Clock);
        _49 = move _56;
        StorageDead(_56);
        _48 = (_49.0: u64);
        StorageLive(_57);
        _57 = Option::<state::state::OracleGuardRails>::None;
        _36 = load_maps(move _37, move _42, move _45, move _48, move _57) -> [return: bb27, unwind: bb71];
    }

    bb25: {
        StorageLive(_53);
        _53 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _55) -> [return: bb26, unwind: bb71];
    }

    bb26: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb56;
    }

    bb27: {
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_37);
        _35 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _36) -> [return: bb28, unwind: bb71];
    }

    bb28: {
        StorageDead(_36);
        _58 = discriminant(_35);
        switchInt(move _58) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_62);
        _62 = move ((_35 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _34 = move _62;
        StorageDead(_62);
        StorageLive(_31);
        _31 = move (_34.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_32);
        _32 = move (_34.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_33);
        _33 = move (_34.2: state::oracle_map::OracleMap<'_>);
        _119 = discriminant(_35);
        _121 = discriminant(_50);
        _107 = const false;
        _108 = const false;
        StorageDead(_50);
        StorageDead(_49);
        drop(_47) -> [return: bb32, unwind: bb62];
    }

    bb30: {
        StorageLive(_59);
        _59 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb31, unwind: bb70];
    }

    bb31: {
        StorageDead(_61);
        StorageDead(_59);
        _117 = discriminant(_35);
        goto -> bb56;
    }

    bb32: {
        StorageDead(_47);
        StorageDead(_46);
        drop(_44) -> [return: bb33, unwind: bb63];
    }

    bb33: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_12;
        _69 = &(*_70);
        _68 = <RefMut<'_, User> as Deref>::deref(move _69) -> [return: bb34, unwind: bb63];
    }

    bb34: {
        _67 = &(*_68);
        StorageDead(_69);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_31;
        _71 = &(*_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_32;
        _73 = &(*_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &mut _33;
        _75 = &mut (*_76);
        _66 = calculate_user_equity(move _67, move _71, move _73, move _75) -> [return: bb35, unwind: bb63];
    }

    bb35: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_67);
        _65 = <std::result::Result<(i128, bool), error::ErrorCode> as Try>::branch(move _66) -> [return: bb36, unwind: bb63];
    }

    bb36: {
        StorageDead(_66);
        _77 = discriminant(_65);
        switchInt(move _77) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_81);
        _81 = ((_65 as Continue).0: (i128, bool));
        _64 = _81;
        StorageDead(_81);
        StorageLive(_63);
        _63 = (_64.0: i128);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_82);
        StorageLive(_83);
        _83 = _63;
        StorageLive(_84);
        _85 = CheckedMul(const _, const 1000_i128);
        assert(!move (_85.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 1000_i128) -> [success: bb40, unwind: bb63];
    }

    bb38: {
        StorageLive(_78);
        _78 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb39, unwind: bb63];
    }

    bb39: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb52;
    }

    bb40: {
        _84 = move (_85.0: i128);
        _82 = Lt(move _83, move _84);
        StorageDead(_84);
        StorageDead(_83);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_12;
        _91 = &(*_92);
        _90 = <RefMut<'_, User> as Deref>::deref(move _91) -> [return: bb41, unwind: bb63];
    }

    bb41: {
        _89 = &(*_90);
        StorageDead(_91);
        StorageLive(_93);
        _93 = (_23.0: u64);
        StorageLive(_94);
        _94 = _82;
        _88 = validate_user_is_idle(move _89, move _93, move _94) -> [return: bb42, unwind: bb63];
    }

    bb42: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_89);
        _87 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _88) -> [return: bb43, unwind: bb63];
    }

    bb43: {
        StorageDead(_88);
        _95 = discriminant(_87);
        switchInt(move _95) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_99);
        _99 = ((_87 as Continue).0: ());
        _86 = _99;
        StorageDead(_99);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &mut _12;
        _100 = <RefMut<'_, User> as DerefMut>::deref_mut(move _101) -> [return: bb47, unwind: bb63];
    }

    bb45: {
        StorageLive(_96);
        _96 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb46, unwind: bb63];
    }

    bb46: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_82);
        StorageDead(_63);
        goto -> bb52;
    }

    bb47: {
        StorageDead(_101);
        ((*_100).21: bool) = const true;
        StorageDead(_100);
        StorageLive(_102);
        _102 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _102);
        StorageDead(_102);
        StorageDead(_82);
        StorageDead(_63);
        drop(_33) -> [return: bb48, unwind: bb64];
    }

    bb48: {
        StorageDead(_33);
        drop(_32) -> [return: bb49, unwind: bb65];
    }

    bb49: {
        StorageDead(_32);
        drop(_31) -> [return: bb50, unwind: bb68];
    }

    bb50: {
        StorageDead(_31);
        StorageDead(_23);
        drop(_12) -> [return: bb51, unwind: bb69];
    }

    bb51: {
        StorageDead(_12);
        goto -> bb61;
    }

    bb52: {
        drop(_33) -> [return: bb53, unwind: bb64];
    }

    bb53: {
        StorageDead(_33);
        drop(_32) -> [return: bb54, unwind: bb65];
    }

    bb54: {
        StorageDead(_32);
        drop(_31) -> [return: bb55, unwind: bb68];
    }

    bb55: {
        StorageDead(_31);
        goto -> bb59;
    }

    bb56: {
        _123 = discriminant(_50);
        _107 = const false;
        _108 = const false;
        StorageDead(_50);
        StorageDead(_49);
        drop(_47) -> [return: bb57, unwind: bb67];
    }

    bb57: {
        StorageDead(_47);
        StorageDead(_46);
        drop(_44) -> [return: bb58, unwind: bb68];
    }

    bb58: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_23);
        drop(_12) -> [return: bb60, unwind: bb69];
    }

    bb60: {
        StorageDead(_12);
        goto -> bb61;
    }

    bb61: {
        return;
    }

    bb62 (cleanup): {
        drop(_44) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_33) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_32) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_31) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_47) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_44) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_12) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        resume;
    }

    bb70 (cleanup): {
        _131 = discriminant(_35);
        goto -> bb71;
    }

    bb71 (cleanup): {
        _132 = discriminant(_50);
        goto -> bb66;
    }

    bb72 (cleanup): {
        _133 = discriminant(_24);
        goto -> bb68;
    }

    bb73 (cleanup): {
        _134 = discriminant(_13);
        goto -> bb69;
    }

    bb74 (cleanup): {
        _135 = discriminant(_3);
        goto -> bb69;
    }
}
