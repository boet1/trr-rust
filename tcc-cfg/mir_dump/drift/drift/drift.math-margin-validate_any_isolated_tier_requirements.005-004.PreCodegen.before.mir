// MIR for `validate_any_isolated_tier_requirements` before PreCodegen

fn validate_any_isolated_tier_requirements(_1: &User, _2: MarginCalculation) -> std::result::Result<(), error::ErrorCode> {
    debug user => _1;
    debug calculation => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: &state::user::User;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _9: std::result::Result<(), error::ErrorCode>;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: ();
    let _13: error::ErrorCode;
    let _14: ();
    let mut _15: &str;
    let _16: &str;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let _19: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[&str; 2];
    let _24: &[&str; 2];
    let _25: [&str; 2];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let mut _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &error::ErrorCode;
    let _32: &error::ErrorCode;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: error::ErrorCode;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: ();
    let _42: ();
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _44: std::result::Result<(), error::ErrorCode>;
    let mut _45: bool;
    let mut _46: ();
    let _47: error::ErrorCode;
    let _48: ();
    let mut _49: &str;
    let _50: &str;
    let mut _51: &std::string::String;
    let _52: &std::string::String;
    let _53: std::string::String;
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[&str; 2];
    let _58: &[&str; 2];
    let _59: [&str; 2];
    let mut _60: &[core::fmt::rt::Argument<'_>];
    let mut _61: &[core::fmt::rt::Argument<'_>; 1];
    let _62: &[core::fmt::rt::Argument<'_>; 1];
    let _63: [core::fmt::rt::Argument<'_>; 1];
    let mut _64: core::fmt::rt::Argument<'_>;
    let mut _65: &error::ErrorCode;
    let _66: &error::ErrorCode;
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: error::ErrorCode;
    let mut _71: isize;
    let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _75: ();
    let mut _76: bool;
    let mut _77: u8;
    let _78: &state::user::SpotPosition;
    let mut _79: &state::user::User;
    let _80: ();
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _82: std::result::Result<(), error::ErrorCode>;
    let mut _83: bool;
    let mut _84: u8;
    let mut _85: bool;
    let mut _86: &state::user::SpotPosition;
    let mut _87: ();
    let _89: ();
    let mut _90: &str;
    let _91: &str;
    let mut _92: &std::string::String;
    let _93: &std::string::String;
    let _94: std::string::String;
    let mut _96: std::fmt::Arguments<'_>;
    let mut _97: &[&str];
    let mut _98: &[&str; 2];
    let _99: &[&str; 2];
    let _100: [&str; 2];
    let mut _101: &[core::fmt::rt::Argument<'_>];
    let mut _102: &[core::fmt::rt::Argument<'_>; 1];
    let _103: &[core::fmt::rt::Argument<'_>; 1];
    let _104: [core::fmt::rt::Argument<'_>; 1];
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &error::ErrorCode;
    let _107: &error::ErrorCode;
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _111: error::ErrorCode;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _117: ();
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: &state::user::User;
    let _121: ();
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _123: std::result::Result<(), error::ErrorCode>;
    let mut _124: bool;
    let mut _125: u8;
    let mut _126: bool;
    let mut _127: u8;
    let mut _128: ();
    let _129: error::ErrorCode;
    let _130: ();
    let mut _131: &str;
    let _132: &str;
    let mut _133: &std::string::String;
    let _134: &std::string::String;
    let _135: std::string::String;
    let mut _137: std::fmt::Arguments<'_>;
    let mut _138: &[&str];
    let mut _139: &[&str; 2];
    let _140: &[&str; 2];
    let _141: [&str; 2];
    let mut _142: &[core::fmt::rt::Argument<'_>];
    let mut _143: &[core::fmt::rt::Argument<'_>; 1];
    let _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: [core::fmt::rt::Argument<'_>; 1];
    let mut _146: core::fmt::rt::Argument<'_>;
    let mut _147: &error::ErrorCode;
    let _148: &error::ErrorCode;
    let _149: ();
    let mut _150: &str;
    let _151: &str;
    let mut _152: error::ErrorCode;
    let mut _153: isize;
    let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _157: ();
    let mut _158: ();
    scope 1 {
        debug error_code => _13;
        let _20: std::string::String;
        let mut _162: &[&str; 2];
        scope 2 {
            debug res => _20;
        }
    }
    scope 3 {
        debug residual => _38;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _41;
        scope 6 {
        }
    }
    scope 7 {
        debug error_code => _47;
        let _54: std::string::String;
        let mut _161: &[&str; 2];
        scope 8 {
            debug res => _54;
        }
    }
    scope 9 {
        debug residual => _72;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _75;
        scope 12 {
        }
    }
    scope 13 {
        debug quote_spot_position => _78;
        let _88: error::ErrorCode;
        let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _116: ();
        scope 14 {
            debug error_code => _88;
            let _95: std::string::String;
            let mut _160: &[&str; 2];
            scope 15 {
                debug res => _95;
            }
        }
        scope 16 {
            debug residual => _113;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _116;
            scope 19 {
            }
        }
    }
    scope 20 {
        debug error_code => _129;
        let _136: std::string::String;
        let mut _159: &[&str; 2];
        scope 21 {
            debug res => _136;
        }
    }
    scope 22 {
        debug residual => _154;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _157;
        scope 25 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = (_2.9: bool);
        switchInt(move _4) -> [0: bb56, otherwise: bb1];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = User::is_reduce_only(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        goto -> bb56;
    }

    bb4: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = (_2.6: u8);
        _10 = Le(move _11, const 1_u8);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_11);
        StorageLive(_12);
        _12 = ();
        _9 = std::result::Result::<(), error::ErrorCode>::Ok(move _12);
        StorageDead(_12);
        goto -> bb14;
    }

    bb6: {
        StorageDead(_11);
        StorageLive(_13);
        _13 = error::ErrorCode::IsolatedAssetTierViolation;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _162 = const _;
        _24 = &(*_162);
        _23 = &(*_24);
        _22 = move _23 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_13;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _31) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_31);
        _29 = [move _30];
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_27);
        _21 = Arguments::<'_>::new_v1(move _22, move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = format(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_24);
        _19 = move _20;
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = <String as Deref>::deref(move _17) -> [return: bb10, unwind: bb86];
    }

    bb10: {
        _15 = &(*_16);
        StorageDead(_17);
        _14 = solana_program::log::sol_log(move _15) -> [return: bb11, unwind: bb86];
    }

    bb11: {
        StorageDead(_15);
        drop(_19) -> [return: bb12, unwind: bb87];
    }

    bb12: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = const "User attempting to increase perp liabilities above 1 with a isolated tier liability";
        _34 = &(*_35);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_36);
        _36 = _13;
        _9 = std::result::Result::<(), error::ErrorCode>::Err(move _36);
        StorageDead(_36);
        StorageDead(_13);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_10);
        _8 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _9) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_9);
        _37 = discriminant(_8);
        switchInt(move _37) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_41);
        _41 = ((_8 as Continue).0: ());
        _7 = _41;
        StorageDead(_41);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = ((*_1).20: bool);
        switchInt(move _45) -> [0: bb21, otherwise: bb20];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_38);
        _38 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb81;
    }

    bb20: {
        StorageLive(_47);
        _47 = error::ErrorCode::IsolatedAssetTierViolation;
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _161 = const _;
        _58 = &(*_161);
        _57 = &(*_58);
        _56 = move _57 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_57);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_47;
        _65 = &(*_66);
        _64 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _65) -> [return: bb22, unwind continue];
    }

    bb21: {
        StorageLive(_46);
        _46 = ();
        _44 = std::result::Result::<(), error::ErrorCode>::Ok(move _46);
        StorageDead(_46);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_65);
        _63 = [move _64];
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = move _61 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_61);
        _55 = Arguments::<'_>::new_v1(move _56, move _60) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_60);
        StorageDead(_56);
        _54 = format(move _55) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_55);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_58);
        _53 = move _54;
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = <String as Deref>::deref(move _51) -> [return: bb25, unwind: bb85];
    }

    bb25: {
        _49 = &(*_50);
        StorageDead(_51);
        _48 = solana_program::log::sol_log(move _49) -> [return: bb26, unwind: bb85];
    }

    bb26: {
        StorageDead(_49);
        drop(_53) -> [return: bb27, unwind: bb87];
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = const "User attempting isolated tier liability with margin trading enabled";
        _68 = &(*_69);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_68);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_70);
        _70 = _47;
        _44 = std::result::Result::<(), error::ErrorCode>::Err(move _70);
        StorageDead(_70);
        StorageDead(_47);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_45);
        _43 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _44) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_44);
        _71 = discriminant(_43);
        switchInt(move _71) -> [0: bb31, 1: bb32, otherwise: bb17];
    }

    bb31: {
        StorageLive(_75);
        _75 = ((_43 as Continue).0: ());
        _42 = _75;
        StorageDead(_75);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_76);
        StorageLive(_77);
        _77 = (_2.5: u8);
        _76 = Gt(move _77, const 0_u8);
        switchInt(move _76) -> [0: bb35, otherwise: bb34];
    }

    bb32: {
        StorageLive(_72);
        _72 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb81;
    }

    bb34: {
        StorageDead(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &(*_1);
        _78 = User::get_quote_spot_position(move _79) -> [return: bb36, unwind continue];
    }

    bb35: {
        StorageDead(_77);
        _3 = const ();
        goto -> bb55;
    }

    bb36: {
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = (_2.5: u8);
        _83 = Eq(move _84, const 1_u8);
        switchInt(move _83) -> [0: bb41, otherwise: bb37];
    }

    bb37: {
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &(*_78);
        _85 = SpotPosition::is_borrow(move _86) -> [return: bb38, unwind continue];
    }

    bb38: {
        switchInt(move _85) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageDead(_86);
        StorageLive(_87);
        _87 = ();
        _82 = std::result::Result::<(), error::ErrorCode>::Ok(move _87);
        StorageDead(_87);
        goto -> bb50;
    }

    bb40: {
        StorageDead(_86);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_84);
        goto -> bb42;
    }

    bb42: {
        StorageLive(_88);
        _88 = error::ErrorCode::IsolatedAssetTierViolation;
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _160 = const _;
        _99 = &(*_160);
        _98 = &(*_99);
        _97 = move _98 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_98);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_88;
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _106) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_106);
        _104 = [move _105];
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = move _102 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_102);
        _96 = Arguments::<'_>::new_v1(move _97, move _101) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_101);
        StorageDead(_97);
        _95 = format(move _96) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_96);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_99);
        _94 = move _95;
        StorageDead(_95);
        _93 = &_94;
        _92 = &(*_93);
        _91 = <String as Deref>::deref(move _92) -> [return: bb46, unwind: bb84];
    }

    bb46: {
        _90 = &(*_91);
        StorageDead(_92);
        _89 = solana_program::log::sol_log(move _90) -> [return: bb47, unwind: bb84];
    }

    bb47: {
        StorageDead(_90);
        drop(_94) -> [return: bb48, unwind: bb87];
    }

    bb48: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = const "User attempting to increase spot liabilities beyond usdc with a isolated tier liability";
        _109 = &(*_110);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_109);
        StorageDead(_110);
        StorageDead(_108);
        StorageLive(_111);
        _111 = _88;
        _82 = std::result::Result::<(), error::ErrorCode>::Err(move _111);
        StorageDead(_111);
        StorageDead(_88);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_85);
        StorageDead(_83);
        _81 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _82) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_82);
        _112 = discriminant(_81);
        switchInt(move _112) -> [0: bb52, 1: bb53, otherwise: bb17];
    }

    bb52: {
        StorageLive(_116);
        _116 = ((_81 as Continue).0: ());
        _80 = _116;
        StorageDead(_116);
        StorageDead(_81);
        StorageDead(_80);
        _3 = const ();
        StorageDead(_78);
        goto -> bb55;
    }

    bb53: {
        StorageLive(_113);
        _113 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        goto -> bb81;
    }

    bb55: {
        StorageDead(_76);
        goto -> bb57;
    }

    bb56: {
        _3 = const ();
        goto -> bb57;
    }

    bb57: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_117);
        StorageLive(_118);
        _118 = (_2.10: bool);
        switchInt(move _118) -> [0: bb79, otherwise: bb58];
    }

    bb58: {
        StorageLive(_119);
        StorageLive(_120);
        _120 = &(*_1);
        _119 = User::is_reduce_only(move _120) -> [return: bb59, unwind continue];
    }

    bb59: {
        switchInt(move _119) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        StorageDead(_120);
        goto -> bb79;
    }

    bb61: {
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = (_2.6: u8);
        _124 = Eq(move _125, const 0_u8);
        switchInt(move _124) -> [0: bb65, otherwise: bb62];
    }

    bb62: {
        StorageDead(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = (_2.5: u8);
        _126 = Eq(move _127, const 1_u8);
        switchInt(move _126) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        StorageDead(_127);
        StorageLive(_128);
        _128 = ();
        _123 = std::result::Result::<(), error::ErrorCode>::Ok(move _128);
        StorageDead(_128);
        goto -> bb74;
    }

    bb64: {
        StorageDead(_127);
        goto -> bb66;
    }

    bb65: {
        StorageDead(_125);
        goto -> bb66;
    }

    bb66: {
        StorageLive(_129);
        _129 = error::ErrorCode::IsolatedAssetTierViolation;
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _159 = const _;
        _140 = &(*_159);
        _139 = &(*_140);
        _138 = move _139 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_139);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &_129;
        _147 = &(*_148);
        _146 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _147) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_147);
        _145 = [move _146];
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = move _143 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_143);
        _137 = Arguments::<'_>::new_v1(move _138, move _142) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_142);
        StorageDead(_138);
        _136 = format(move _137) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_137);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_140);
        _135 = move _136;
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = <String as Deref>::deref(move _133) -> [return: bb70, unwind: bb83];
    }

    bb70: {
        _131 = &(*_132);
        StorageDead(_133);
        _130 = solana_program::log::sol_log(move _131) -> [return: bb71, unwind: bb83];
    }

    bb71: {
        StorageDead(_131);
        drop(_135) -> [return: bb72, unwind: bb87];
    }

    bb72: {
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_130);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = const "User attempting to increase perp liabilities above 0 with a isolated tier liability";
        _150 = &(*_151);
        _149 = solana_program::log::sol_log(move _150) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_150);
        StorageDead(_151);
        StorageDead(_149);
        StorageLive(_152);
        _152 = _129;
        _123 = std::result::Result::<(), error::ErrorCode>::Err(move _152);
        StorageDead(_152);
        StorageDead(_129);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_126);
        StorageDead(_124);
        _122 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _123) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_123);
        _153 = discriminant(_122);
        switchInt(move _153) -> [0: bb76, 1: bb77, otherwise: bb17];
    }

    bb76: {
        StorageLive(_157);
        _157 = ((_122 as Continue).0: ());
        _121 = _157;
        StorageDead(_157);
        StorageDead(_122);
        StorageDead(_121);
        _117 = const ();
        goto -> bb80;
    }

    bb77: {
        StorageLive(_154);
        _154 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb82;
    }

    bb79: {
        _117 = const ();
        goto -> bb80;
    }

    bb80: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_158);
        _158 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _158);
        StorageDead(_158);
        goto -> bb82;
    }

    bb81: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb82;
    }

    bb82: {
        return;
    }

    bb83 (cleanup): {
        drop(_135) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_94) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_53) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_19) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        resume;
    }
}
