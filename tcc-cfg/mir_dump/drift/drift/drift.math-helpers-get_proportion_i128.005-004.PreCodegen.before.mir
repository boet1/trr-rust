// MIR for `get_proportion_i128` before PreCodegen

fn get_proportion_i128(_1: i128, _2: u128, _3: u128) -> std::result::Result<i128, error::ErrorCode> {
    debug value => _1;
    debug numerator => _2;
    debug denominator => _3;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: i128;
    let mut _9: u128;
    let mut _10: u128;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u128;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _18: std::result::Result<i128, error::ErrorCode>;
    let mut _19: i128;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _21: std::result::Result<i128, error::ErrorCode>;
    let mut _22: u128;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: i128;
    let mut _29: i128;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: i128;
    scope 1 {
        debug proportional_u128 => _4;
        let _16: i128;
        let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _27: i128;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: i128;
        scope 6 {
            debug proportional_value => _16;
        }
        scope 7 {
            debug residual => _24;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _27;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _31;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _34;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        _7 = core::num::<impl i128>::unsigned_abs(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = _2;
        StorageLive(_10);
        _10 = _3;
        _6 = get_proportion_u128(move _7, move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_5 as Continue).0: u128);
        _4 = _15;
        StorageDead(_15);
        StorageDead(_5);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _4;
        _21 = <u128 as Cast>::cast::<i128>(move _22) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_5);
        goto -> bb20;
    }

    bb8: {
        StorageDead(_22);
        _20 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_20 as Continue).0: i128);
        _19 = _27;
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _1;
        _28 = core::num::<impl i128>::signum(move _29) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_24);
        _24 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb19;
    }

    bb13: {
        StorageDead(_29);
        _18 = <i128 as SafeMath>::safe_mul(move _19, move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_19);
        _17 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_18);
        _30 = discriminant(_17);
        switchInt(move _30) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        StorageLive(_34);
        _34 = ((_17 as Continue).0: i128);
        _16 = _34;
        StorageDead(_34);
        StorageDead(_20);
        StorageDead(_17);
        StorageLive(_35);
        _35 = _16;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _35);
        StorageDead(_35);
        StorageDead(_16);
        StorageDead(_4);
        goto -> bb21;
    }

    bb17: {
        StorageLive(_31);
        _31 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_4);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}
