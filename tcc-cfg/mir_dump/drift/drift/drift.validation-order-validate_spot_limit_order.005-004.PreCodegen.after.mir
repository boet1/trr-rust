// MIR for `validate_spot_limit_order` after PreCodegen

fn validate_spot_limit_order(_1: &Order, _2: u64, _3: u64) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug step_size => _2;
    debug min_order_size => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: &state::user::Order;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: bool;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: ();
    let _16: ();
    let mut _17: bool;
    let mut _18: u64;
    let mut _19: bool;
    let mut _20: state::user::Order;
    let mut _21: !;
    let _22: ();
    let mut _23: &str;
    let _24: &str;
    let mut _25: error::ErrorCode;
    let _26: ();
    let mut _27: bool;
    let mut _28: state::user::Order;
    let mut _29: bool;
    let mut _30: u64;
    let mut _31: !;
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: error::ErrorCode;
    let _36: ();
    let mut _37: bool;
    let mut _38: u64;
    let mut _39: !;
    let _40: ();
    let mut _41: &str;
    let _42: &str;
    let mut _43: error::ErrorCode;
    let _44: ();
    let mut _45: bool;
    let _46: ();
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _48: std::result::Result<(), error::ErrorCode>;
    let mut _49: bool;
    let mut _50: &state::user::Order;
    let mut _51: ();
    let _52: error::ErrorCode;
    let _53: ();
    let mut _54: &str;
    let _55: &str;
    let mut _56: &std::string::String;
    let _57: &std::string::String;
    let _58: std::string::String;
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[&str; 2];
    let _63: &[&str; 2];
    let _64: [&str; 2];
    let mut _65: &[core::fmt::rt::Argument<'_>];
    let mut _66: &[core::fmt::rt::Argument<'_>; 1];
    let _67: &[core::fmt::rt::Argument<'_>; 1];
    let _68: [core::fmt::rt::Argument<'_>; 1];
    let mut _69: core::fmt::rt::Argument<'_>;
    let mut _70: &error::ErrorCode;
    let _71: &error::ErrorCode;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: error::ErrorCode;
    let mut _76: isize;
    let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _80: ();
    let _81: ();
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _83: std::result::Result<(), error::ErrorCode>;
    let mut _84: &state::user::Order;
    let mut _85: isize;
    let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _89: ();
    let mut _90: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _52;
        let _59: std::string::String;
        let mut _91: &[&str; 2];
        scope 6 {
            debug res => _59;
        }
    }
    scope 7 {
        debug residual => _77;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _80;
        scope 10 {
        }
    }
    scope 11 {
        debug residual => _86;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _89;
        scope 14 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        _9 = _3;
        StorageLive(_10);
        _10 = ((*_1).18: bool);
        _6 = validate_base_asset_amount(move _7, move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_5 as Continue).0: ());
        _4 = _15;
        StorageDead(_15);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_1).1: u64);
        _17 = Eq(move _18, const 0_u64);
        switchInt(move _17) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb47;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = (*_1);
        _19 = Order::has_oracle_price_offset(move _20) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        goto -> bb13;
    }

    bb9: {
        switchInt(move _19) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_20);
        goto -> bb13;
    }

    bb11: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = const "Limit order price == 0";
        _23 = &(*_24);
        _22 = solana_program::log::sol_log(move _23) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_25);
        _25 = error::ErrorCode::InvalidOrderLimitPrice;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _25);
        StorageDead(_25);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb47;
    }

    bb13: {
        _16 = const ();
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = (*_1);
        _27 = Order::has_oracle_price_offset(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _27) -> [0: bb19, otherwise: bb15];
    }

    bb15: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = ((*_1).1: u64);
        _29 = Ne(move _30, const 0_u64);
        switchInt(move _29) -> [0: bb18, otherwise: bb16];
    }

    bb16: {
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = const "Limit order price must be 0 for taker oracle offset order";
        _33 = &(*_34);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_35);
        _35 = error::ErrorCode::InvalidOrderOracleOffset;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _35);
        StorageDead(_35);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb47;
    }

    bb18: {
        StorageDead(_30);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_28);
        goto -> bb20;
    }

    bb20: {
        _26 = const ();
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = ((*_1).5: u64);
        _37 = Gt(move _38, const 0_u64);
        switchInt(move _37) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const "Limit order should not have trigger price";
        _41 = &(*_42);
        _40 = solana_program::log::sol_log(move _41) -> [return: bb23, unwind continue];
    }

    bb22: {
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_44);
        StorageLive(_45);
        _45 = ((*_1).19: bool);
        switchInt(move _45) -> [0: bb25, otherwise: bb24];
    }

    bb23: {
        StorageDead(_41);
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_43);
        _43 = error::ErrorCode::InvalidOrderTrigger;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _43);
        StorageDead(_43);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb47;
    }

    bb24: {
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_1);
        _49 = Order::has_auction(move _50) -> [return: bb26, unwind continue];
    }

    bb25: {
        _44 = const ();
        goto -> bb41;
    }

    bb26: {
        switchInt(move _49) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        StorageDead(_50);
        StorageLive(_52);
        _52 = error::ErrorCode::InvalidOrder;
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _91 = const _;
        _63 = &(*_91);
        _62 = &(*_63);
        _61 = move _62 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_52;
        _70 = &(*_71);
        _69 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _70) -> [return: bb29, unwind continue];
    }

    bb28: {
        StorageDead(_50);
        StorageLive(_51);
        _51 = ();
        _48 = std::result::Result::<(), error::ErrorCode>::Ok(move _51);
        StorageDead(_51);
        goto -> bb36;
    }

    bb29: {
        StorageDead(_70);
        _68 = [move _69];
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = move _66 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_66);
        _60 = Arguments::<'_>::new_v1(move _61, move _65) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_65);
        StorageDead(_61);
        _59 = format(move _60) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_60);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_63);
        _58 = move _59;
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = <String as Deref>::deref(move _56) -> [return: bb32, unwind: bb48];
    }

    bb32: {
        _54 = &(*_55);
        StorageDead(_56);
        _53 = solana_program::log::sol_log(move _54) -> [return: bb33, unwind: bb48];
    }

    bb33: {
        StorageDead(_54);
        drop(_58) -> [return: bb34, unwind: bb49];
    }

    bb34: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = const "post only limit order cant have auction";
        _73 = &(*_74);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_73);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_75);
        _75 = _52;
        _48 = std::result::Result::<(), error::ErrorCode>::Err(move _75);
        StorageDead(_75);
        StorageDead(_52);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_49);
        _47 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _48) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_48);
        _76 = discriminant(_47);
        switchInt(move _76) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_80);
        _80 = ((_47 as Continue).0: ());
        _46 = _80;
        StorageDead(_80);
        StorageDead(_47);
        StorageDead(_46);
        _44 = const ();
        goto -> bb41;
    }

    bb39: {
        StorageLive(_77);
        _77 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb47;
    }

    bb41: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        _83 = validate_limit_order_auction_params(move _84) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_84);
        _82 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _83) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_83);
        _85 = discriminant(_82);
        switchInt(move _85) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_89);
        _89 = ((_82 as Continue).0: ());
        _81 = _89;
        StorageDead(_89);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_90);
        _90 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _90);
        StorageDead(_90);
        goto -> bb47;
    }

    bb45: {
        StorageLive(_86);
        _86 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb47;
    }

    bb47: {
        return;
    }

    bb48 (cleanup): {
        drop(_58) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        resume;
    }
}
