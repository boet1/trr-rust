// MIR for `keeper::handle_fill_spot_order` before PreCodegen

fn keeper::handle_fill_spot_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::FillOrder<'_>>, _2: Option<u32>, _3: Option<keeper::SpotFulfillmentType>, _4: Option<u32>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug order_id => _2;
    debug fulfillment_type => _3;
    debug _maker_order_id => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _9: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: u32;
    let _16: u16;
    let mut _17: (u32, u16);
    let _18: &std::cell::Ref<'_, state::user::User>;
    let _19: std::cell::Ref<'_, state::user::User>;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _21: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _22: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _23: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _24: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: std::cell::Ref<'_, state::user::User>;
    let mut _31: std::option::Option<u32>;
    let mut _32: {closure@programs/drift/src/instructions/keeper.rs:212:48: 212:50};
    let mut _33: &&std::cell::Ref<'_, state::user::User>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _36: std::result::Result<u16, error::ErrorCode>;
    let mut _37: std::option::Option<u16>;
    let mut _38: std::option::Option<&state::user::Order>;
    let mut _39: &state::user::User;
    let _40: &state::user::User;
    let mut _41: &std::cell::Ref<'_, state::user::User>;
    let mut _42: u32;
    let mut _43: {closure@programs/drift/src/instructions/keeper.rs:215:18: 215:25};
    let mut _44: error::ErrorCode;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: u32;
    let mut _51: u16;
    let _53: anchor_lang::prelude::Pubkey;
    let mut _54: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _55: ();
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _57: std::result::Result<(), anchor_lang::error::Error>;
    let mut _58: std::result::Result<(), anchor_lang::error::Error>;
    let mut _59: anchor_lang::context::Context<'_, '_, '_, '_, instructions::keeper::FillOrder<'_>>;
    let mut _60: u32;
    let mut _61: u16;
    let mut _62: instructions::keeper::SpotFulfillmentType;
    let mut _63: std::option::Option<instructions::keeper::SpotFulfillmentType>;
    let mut _64: instructions::keeper::SpotFulfillmentType;
    let mut _65: {closure@programs/drift/src/instructions/keeper.rs:228:14: 228:17};
    let mut _66: &u32;
    let mut _67: &&anchor_lang::prelude::Pubkey;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _73: ();
    let mut _74: &mut instructions::keeper::FillOrder<'_>;
    let mut _75: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _76: &mut instructions::keeper::FillOrder<'_>;
    let mut _77: &mut instructions::keeper::FillOrder<'_>;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug order_id => _15;
        debug market_index => _16;
        let _52: &anchor_lang::prelude::Pubkey;
        scope 17 {
            debug user_key => _52;
            let _69: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _72: ();
            scope 18 {
                debug residual => _69;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _72;
                scope 21 {
                }
            }
        }
    }
    scope 6 {
        debug user => _18;
        let _30: u32;
        scope 11 {
            debug order_id => _30;
            let _34: u16;
            let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _49: u16;
            scope 12 {
                debug market_index => _34;
            }
            scope 13 {
                debug residual => _46;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _49;
                scope 16 {
                }
            }
        }
    }
    scope 7 {
        debug residual => _26;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _29;
        scope 10 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _74 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _9 = &((*_74).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _75 = deref_copy (*_9);
        _93 = (((_75.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _8 = &(*_93);
        _7 = constraints::fill_not_paused(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _78 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _76 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _23 = &((*_76).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _22 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _23) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _88 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb32;
    }

    bb7: {
        StorageDead(_23);
        StorageLive(_24);
        _24 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _21 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _22, move _24) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        StorageDead(_24);
        StorageDead(_22);
        _20 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _21) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        StorageDead(_21);
        _25 = discriminant(_20);
        switchInt(move _25) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_29);
        _29 = move ((_20 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _19 = move _29;
        StorageDead(_29);
        _18 = &_19;
        _82 = discriminant(_20);
        StorageDead(_20);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _2;
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_18;
        _32 = {closure@programs/drift/src/instructions/keeper.rs:212:48: 212:50} { user: move _33 };
        StorageDead(_33);
        _30 = Option::<u32>::unwrap_or_else::<{closure@programs/drift/src/instructions/keeper.rs:212:48: 212:50}>(move _31, move _32) -> [return: bb13, unwind: bb33];
    }

    bb11: {
        StorageLive(_26);
        _26 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb12, unwind: bb36];
    }

    bb12: {
        StorageDead(_28);
        StorageDead(_26);
        _80 = discriminant(_20);
        StorageDead(_20);
        goto -> bb31;
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_18);
        _40 = <Ref<'_, User> as Deref>::deref(move _41) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _39 = &(*_40);
        StorageDead(_41);
        StorageLive(_42);
        _42 = _30;
        _38 = User::get_order(move _39, move _42) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        StorageDead(_42);
        StorageDead(_39);
        StorageLive(_43);
        _43 = {closure@programs/drift/src/instructions/keeper.rs:215:18: 215:25};
        _37 = Option::<&Order>::map::<u16, {closure@programs/drift/src/instructions/keeper.rs:215:18: 215:25}>(move _38, move _43) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        StorageDead(_43);
        StorageDead(_38);
        StorageLive(_44);
        _44 = error::ErrorCode::OrderDoesNotExist;
        _36 = Option::<u16>::ok_or::<error::ErrorCode>(move _37, move _44) -> [return: bb17, unwind: bb33];
    }

    bb17: {
        StorageDead(_44);
        StorageDead(_37);
        _35 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _36) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        StorageDead(_36);
        _45 = discriminant(_35);
        switchInt(move _45) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_49);
        _49 = ((_35 as Continue).0: u16);
        _34 = _49;
        StorageDead(_49);
        StorageDead(_40);
        StorageDead(_35);
        StorageLive(_50);
        _50 = _30;
        StorageLive(_51);
        _51 = _34;
        _17 = (move _50, move _51);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_34);
        StorageDead(_30);
        drop(_19) -> [return: bb22, unwind: bb34];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb21, unwind: bb33];
    }

    bb21: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_40);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_30);
        drop(_19) -> [return: bb31, unwind: bb34];
    }

    bb22: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_15);
        _15 = (_17.0: u32);
        StorageLive(_16);
        _16 = (_17.1: u16);
        StorageDead(_17);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _77 = deref_copy (_1.1: &mut instructions::keeper::FillOrder<'_>);
        _54 = &((*_77).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _53 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _54) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_54);
        _52 = &_53;
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = move _1;
        StorageLive(_60);
        _60 = _15;
        StorageLive(_61);
        _61 = _16;
        StorageLive(_62);
        StorageLive(_63);
        _63 = _3;
        StorageLive(_64);
        _64 = keeper::SpotFulfillmentType::Match;
        _62 = Option::<keeper::SpotFulfillmentType>::unwrap_or(move _63, move _64) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_64);
        StorageDead(_63);
        _58 = keeper::fill_spot_order::<'_, '_>(move _59, move _60, move _61, move _62) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_15;
        StorageLive(_67);
        _67 = &_52;
        _65 = {closure@programs/drift/src/instructions/keeper.rs:228:14: 228:17} { order_id: move _66, user_key: move _67 };
        StorageDead(_67);
        StorageDead(_66);
        _57 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:228:14: 228:17}>(move _58, move _65) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        StorageDead(_65);
        StorageDead(_58);
        _56 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _57) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        StorageDead(_57);
        _68 = discriminant(_56);
        switchInt(move _68) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_72);
        _72 = ((_56 as Continue).0: ());
        _55 = _72;
        StorageDead(_72);
        _84 = discriminant(_56);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_73);
        _73 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _73);
        StorageDead(_73);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb32;
    }

    bb29: {
        StorageLive(_69);
        _69 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_71);
        _71 = move _69;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _71) -> [return: bb30, unwind: bb35];
    }

    bb30: {
        StorageDead(_71);
        StorageDead(_69);
        _86 = discriminant(_56);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb32;
    }

    bb31: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_19) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        _90 = discriminant(_56);
        goto -> bb34;
    }

    bb36 (cleanup): {
        _91 = discriminant(_20);
        goto -> bb34;
    }

    bb37 (cleanup): {
        _92 = discriminant(_6);
        goto -> bb34;
    }
}
