// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5536:10: 5536:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5536:10: 5536:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeOpenbookV2FulfillmentConfigBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::admin::InitializeOpenbookV2FulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::admin::InitializeOpenbookV2FulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::admin::InitializeOpenbookV2FulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::admin::InitializeOpenbookV2FulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _22: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _52: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _67: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _82: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _97: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _110: ();
    let mut _111: bool;
    let mut _112: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _113: !;
    let mut _114: anchor_lang::error::Error;
    let mut _115: anchor_lang::error::ErrorCode;
    let _117: usize;
    let mut _118: usize;
    let mut _119: bool;
    let mut _120: &[anchor_lang::prelude::AccountInfo<'_>];
    let _121: &[anchor_lang::prelude::AccountInfo<'_>];
    let _122: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _123: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _124: std::ops::RangeFrom<usize>;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _127: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _128: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _129: &anchor_lang::prelude::Pubkey;
    let mut _130: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _131: &[u8];
    let mut _132: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps;
    let mut _133: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _134: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _142: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _143: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _144: &anchor_lang::prelude::Pubkey;
    let mut _145: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _146: &[u8];
    let mut _147: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps;
    let mut _148: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _149: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _156: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _157: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _158: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _159: &anchor_lang::prelude::Pubkey;
    let mut _160: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _161: &[u8];
    let mut _162: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps;
    let mut _163: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _164: {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _172: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _180: (anchor_lang::prelude::Pubkey, u8);
    let mut _181: &[&[u8]];
    let mut _182: &[&[u8]; 2];
    let _183: &[&[u8]; 2];
    let _184: [&[u8]; 2];
    let mut _185: &[u8];
    let _186: &[u8];
    let mut _187: &[u8; 30];
    let _188: &[u8; 30];
    let mut _189: &[u8];
    let _190: &[u8];
    let mut _191: &anchor_lang::prelude::Pubkey;
    let mut _192: &anchor_lang::prelude::Pubkey;
    let mut _193: u8;
    let _194: ();
    let mut _195: bool;
    let mut _196: &anchor_lang::prelude::Pubkey;
    let _197: anchor_lang::prelude::Pubkey;
    let mut _198: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _199: &anchor_lang::prelude::Pubkey;
    let mut _200: !;
    let mut _201: anchor_lang::error::Error;
    let mut _202: anchor_lang::error::Error;
    let mut _203: anchor_lang::error::Error;
    let mut _204: anchor_lang::error::ErrorCode;
    let mut _205: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _206: anchor_lang::prelude::Pubkey;
    let mut _207: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _208: anchor_lang::prelude::Pubkey;
    let mut _211: &&anchor_lang::prelude::AccountInfo<'_>;
    let _212: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _216: bool;
    let mut _217: bool;
    let mut _218: &&anchor_lang::prelude::Pubkey;
    let mut _219: &&anchor_lang::prelude::Pubkey;
    let _220: &anchor_lang::prelude::Pubkey;
    let _221: anchor_lang::prelude::Pubkey;
    let mut _223: &anchor_lang::prelude::AccountInfo<'_>;
    let _224: ();
    let mut _225: bool;
    let mut _226: u64;
    let mut _229: &anchor_lang::prelude::Rent;
    let mut _230: usize;
    let mut _232: anchor_lang::prelude::AccountInfo<'_>;
    let mut _233: &anchor_lang::prelude::Signer<'_>;
    let mut _234: anchor_lang::prelude::AccountInfo<'_>;
    let mut _235: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _237: anchor_lang::prelude::AccountInfo<'_>;
    let mut _238: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _239: anchor_lang::system_program::CreateAccount<'_>;
    let _240: ();
    let mut _241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _242: std::result::Result<(), anchor_lang::error::Error>;
    let mut _243: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _244: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _245: &[&[&[u8]]];
    let mut _246: &[&[&[u8]]; 1];
    let _247: &[&[&[u8]]; 1];
    let _248: [&[&[u8]]; 1];
    let mut _249: &[&[u8]];
    let _250: &[&[u8]];
    let _251: &[&[u8]];
    let mut _252: &[&[u8]; 3];
    let _253: [&[u8]; 3];
    let mut _254: &[u8];
    let mut _255: &[u8; 30];
    let _256: &[u8; 30];
    let mut _257: &[u8];
    let _258: &[u8];
    let mut _259: &anchor_lang::prelude::Pubkey;
    let mut _260: &[u8];
    let _261: &[u8];
    let _262: &[u8];
    let mut _263: &[u8; 1];
    let _264: [u8; 1];
    let mut _265: u8;
    let mut _266: std::ops::RangeFull;
    let mut _267: std::ops::RangeFull;
    let mut _268: u64;
    let mut _269: u64;
    let mut _270: usize;
    let mut _271: &anchor_lang::prelude::Pubkey;
    let mut _272: isize;
    let mut _274: !;
    let mut _275: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _277: ();
    let mut _278: bool;
    let mut _279: &anchor_lang::prelude::Pubkey;
    let _280: anchor_lang::prelude::Pubkey;
    let mut _281: &anchor_lang::prelude::Signer<'_>;
    let mut _282: &anchor_lang::prelude::Pubkey;
    let _283: anchor_lang::prelude::Pubkey;
    let mut _284: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _285: !;
    let mut _286: anchor_lang::error::Error;
    let mut _287: anchor_lang::error::Error;
    let mut _288: anchor_lang::error::AnchorError;
    let mut _289: std::string::String;
    let mut _290: &anchor_lang::error::ErrorCode;
    let _291: anchor_lang::error::ErrorCode;
    let mut _292: u32;
    let mut _293: anchor_lang::error::ErrorCode;
    let mut _294: std::string::String;
    let mut _295: &anchor_lang::error::ErrorCode;
    let _296: anchor_lang::error::ErrorCode;
    let mut _297: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _298: anchor_lang::error::ErrorOrigin;
    let mut _299: anchor_lang::error::Source;
    let mut _300: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _301: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _302: anchor_lang::prelude::Pubkey;
    let mut _303: &anchor_lang::prelude::Signer<'_>;
    let mut _304: anchor_lang::prelude::Pubkey;
    let mut _305: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _307: u64;
    let mut _308: u64;
    let mut _309: &anchor_lang::prelude::Rent;
    let mut _310: usize;
    let mut _311: u64;
    let _312: ();
    let mut _313: bool;
    let mut _314: u64;
    let mut _316: anchor_lang::prelude::AccountInfo<'_>;
    let mut _317: &anchor_lang::prelude::Signer<'_>;
    let mut _318: anchor_lang::prelude::AccountInfo<'_>;
    let mut _319: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _321: anchor_lang::prelude::AccountInfo<'_>;
    let mut _322: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _323: anchor_lang::system_program::Transfer<'_>;
    let _324: ();
    let mut _325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _326: std::result::Result<(), anchor_lang::error::Error>;
    let mut _327: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _328: u64;
    let mut _329: isize;
    let mut _331: !;
    let mut _332: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _335: anchor_lang::prelude::AccountInfo<'_>;
    let mut _336: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _338: anchor_lang::prelude::AccountInfo<'_>;
    let mut _339: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _340: anchor_lang::system_program::Allocate<'_>;
    let _341: ();
    let mut _342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _343: std::result::Result<(), anchor_lang::error::Error>;
    let mut _344: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _345: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _346: &[&[&[u8]]];
    let mut _347: &[&[&[u8]]; 1];
    let _348: &[&[&[u8]]; 1];
    let _349: [&[&[u8]]; 1];
    let mut _350: &[&[u8]];
    let _351: &[&[u8]];
    let _352: &[&[u8]];
    let mut _353: &[&[u8]; 3];
    let _354: [&[u8]; 3];
    let mut _355: &[u8];
    let mut _356: &[u8; 30];
    let _357: &[u8; 30];
    let mut _358: &[u8];
    let _359: &[u8];
    let mut _360: &anchor_lang::prelude::Pubkey;
    let mut _361: &[u8];
    let _362: &[u8];
    let _363: &[u8];
    let mut _364: &[u8; 1];
    let _365: [u8; 1];
    let mut _366: u8;
    let mut _367: std::ops::RangeFull;
    let mut _368: std::ops::RangeFull;
    let mut _369: u64;
    let mut _370: usize;
    let mut _371: isize;
    let mut _373: !;
    let mut _374: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _377: anchor_lang::prelude::AccountInfo<'_>;
    let mut _378: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _380: anchor_lang::prelude::AccountInfo<'_>;
    let mut _381: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _382: anchor_lang::system_program::Assign<'_>;
    let _383: ();
    let mut _384: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _385: std::result::Result<(), anchor_lang::error::Error>;
    let mut _386: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _387: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _388: &[&[&[u8]]];
    let mut _389: &[&[&[u8]]; 1];
    let _390: &[&[&[u8]]; 1];
    let _391: [&[&[u8]]; 1];
    let mut _392: &[&[u8]];
    let _393: &[&[u8]];
    let _394: &[&[u8]];
    let mut _395: &[&[u8]; 3];
    let _396: [&[u8]; 3];
    let mut _397: &[u8];
    let mut _398: &[u8; 30];
    let _399: &[u8; 30];
    let mut _400: &[u8];
    let _401: &[u8];
    let mut _402: &anchor_lang::prelude::Pubkey;
    let mut _403: &[u8];
    let _404: &[u8];
    let _405: &[u8];
    let mut _406: &[u8; 1];
    let _407: [u8; 1];
    let mut _408: u8;
    let mut _409: std::ops::RangeFull;
    let mut _410: std::ops::RangeFull;
    let mut _411: &anchor_lang::prelude::Pubkey;
    let mut _412: isize;
    let mut _414: !;
    let mut _415: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _417: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _418: &anchor_lang::prelude::Pubkey;
    let mut _419: &anchor_lang::prelude::AccountInfo<'_>;
    let _420: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _421: isize;
    let mut _424: !;
    let mut _425: anchor_lang::error::Error;
    let mut _426: anchor_lang::error::Error;
    let mut _427: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _428: &anchor_lang::prelude::AccountInfo<'_>;
    let _429: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _430: isize;
    let mut _433: !;
    let mut _434: anchor_lang::error::Error;
    let mut _435: anchor_lang::error::Error;
    let _436: ();
    let mut _437: bool;
    let _438: ();
    let mut _439: bool;
    let mut _440: usize;
    let mut _441: usize;
    let mut _442: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _443: !;
    let mut _444: anchor_lang::error::Error;
    let mut _445: anchor_lang::error::Error;
    let mut _446: anchor_lang::error::Error;
    let mut _447: anchor_lang::error::ErrorCode;
    let mut _448: (usize, usize);
    let mut _449: usize;
    let mut _450: usize;
    let mut _451: &anchor_lang::prelude::AccountInfo<'_>;
    let _452: ();
    let mut _453: bool;
    let mut _454: &&anchor_lang::prelude::Pubkey;
    let mut _455: &&anchor_lang::prelude::Pubkey;
    let mut _456: !;
    let mut _457: anchor_lang::error::Error;
    let mut _458: anchor_lang::error::Error;
    let mut _459: anchor_lang::error::Error;
    let mut _460: anchor_lang::error::ErrorCode;
    let mut _461: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _462: anchor_lang::prelude::Pubkey;
    let mut _463: anchor_lang::prelude::Pubkey;
    let mut _465: &anchor_lang::prelude::Rent;
    let mut _466: usize;
    let mut _467: bool;
    let mut _468: u64;
    let mut _469: &anchor_lang::prelude::AccountInfo<'_>;
    let _470: anchor_lang::prelude::AccountInfo<'_>;
    let mut _471: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _472: u64;
    let mut _473: !;
    let mut _474: anchor_lang::error::Error;
    let mut _475: anchor_lang::error::Error;
    let mut _476: anchor_lang::error::ErrorCode;
    let _477: ();
    let mut _478: bool;
    let mut _479: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _480: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let _481: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _482: !;
    let mut _483: anchor_lang::error::Error;
    let mut _484: anchor_lang::error::Error;
    let mut _485: anchor_lang::error::ErrorCode;
    let _486: ();
    let mut _487: bool;
    let mut _488: &anchor_lang::prelude::Rent;
    let mut _489: u64;
    let mut _490: &anchor_lang::prelude::AccountInfo<'_>;
    let _491: anchor_lang::prelude::AccountInfo<'_>;
    let mut _492: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _493: usize;
    let mut _494: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _495: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _496: &anchor_lang::prelude::AccountInfo<'_>;
    let _497: anchor_lang::prelude::AccountInfo<'_>;
    let mut _498: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _499: isize;
    let mut _501: !;
    let mut _502: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _504: !;
    let mut _505: anchor_lang::error::Error;
    let mut _506: anchor_lang::error::Error;
    let mut _507: anchor_lang::error::ErrorCode;
    let mut _510: (anchor_lang::prelude::Pubkey, u8);
    let mut _511: &[&[u8]];
    let mut _512: &[&[u8]; 2];
    let _513: &[&[u8]; 2];
    let _514: [&[u8]; 2];
    let mut _515: &[u8];
    let mut _516: &[u8; 11];
    let _517: &[u8; 11];
    let mut _518: &[u8];
    let _519: &[u8];
    let mut _520: &[u8; 2];
    let _521: [u8; 2];
    let mut _522: u16;
    let mut _523: &anchor_lang::prelude::Pubkey;
    let _524: &&anchor_lang::prelude::Pubkey;
    let mut _525: u8;
    let _526: ();
    let mut _527: bool;
    let mut _528: &anchor_lang::prelude::Pubkey;
    let _529: anchor_lang::prelude::Pubkey;
    let mut _530: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _531: &anchor_lang::prelude::Pubkey;
    let mut _532: !;
    let mut _533: anchor_lang::error::Error;
    let mut _534: anchor_lang::error::Error;
    let mut _535: anchor_lang::error::Error;
    let mut _536: anchor_lang::error::ErrorCode;
    let mut _537: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _538: anchor_lang::prelude::Pubkey;
    let mut _539: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _540: anchor_lang::prelude::Pubkey;
    let mut _543: (anchor_lang::prelude::Pubkey, u8);
    let mut _544: &[&[u8]];
    let mut _545: &[&[u8]; 2];
    let _546: &[&[u8]; 2];
    let _547: [&[u8]; 2];
    let mut _548: &[u8];
    let mut _549: &[u8; 11];
    let _550: &[u8; 11];
    let mut _551: &[u8];
    let _552: &[u8];
    let mut _553: &[u8; 2];
    let _554: [u8; 2];
    let mut _555: &anchor_lang::prelude::Pubkey;
    let _556: &&anchor_lang::prelude::Pubkey;
    let mut _557: u8;
    let _558: ();
    let mut _559: bool;
    let mut _560: &anchor_lang::prelude::Pubkey;
    let _561: anchor_lang::prelude::Pubkey;
    let mut _562: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _563: &anchor_lang::prelude::Pubkey;
    let mut _564: !;
    let mut _565: anchor_lang::error::Error;
    let mut _566: anchor_lang::error::Error;
    let mut _567: anchor_lang::error::Error;
    let mut _568: anchor_lang::error::ErrorCode;
    let mut _569: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _570: anchor_lang::prelude::Pubkey;
    let mut _571: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _572: anchor_lang::prelude::Pubkey;
    let _573: ();
    let mut _574: bool;
    let mut _575: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _576: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _577: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _578: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _579: !;
    let mut _580: anchor_lang::error::Error;
    let mut _581: anchor_lang::error::Error;
    let mut _582: anchor_lang::error::ErrorCode;
    let _583: ();
    let mut _585: &state::state::State;
    let mut _586: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _588: &anchor_lang::prelude::Signer<'_>;
    let mut _589: bool;
    let mut _590: &anchor_lang::prelude::Pubkey;
    let mut _591: &anchor_lang::prelude::Pubkey;
    let mut _592: !;
    let mut _593: anchor_lang::error::Error;
    let mut _594: anchor_lang::error::Error;
    let mut _595: anchor_lang::error::Error;
    let mut _596: anchor_lang::error::ErrorCode;
    let mut _597: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _598: anchor_lang::prelude::Pubkey;
    let mut _599: anchor_lang::prelude::Pubkey;
    let _600: ();
    let mut _601: bool;
    let mut _602: &anchor_lang::prelude::Pubkey;
    let _603: &state::state::State;
    let mut _604: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _605: &anchor_lang::prelude::Pubkey;
    let _606: &anchor_lang::prelude::Pubkey;
    let _607: anchor_lang::prelude::Pubkey;
    let mut _608: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _609: !;
    let mut _610: anchor_lang::error::Error;
    let mut _611: anchor_lang::error::Error;
    let mut _612: anchor_lang::error::ErrorCode;
    let _613: ();
    let mut _614: bool;
    let mut _615: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _616: &anchor_lang::prelude::Signer<'_>;
    let _617: &anchor_lang::prelude::Signer<'_>;
    let mut _618: !;
    let mut _619: anchor_lang::error::Error;
    let mut _620: anchor_lang::error::Error;
    let mut _621: anchor_lang::error::ErrorCode;
    let mut _622: instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>;
    let mut _623: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _624: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _625: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _626: anchor_lang::prelude::AccountInfo<'_>;
    let mut _627: anchor_lang::prelude::AccountInfo<'_>;
    let mut _628: anchor_lang::prelude::AccountInfo<'_>;
    let mut _629: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _630: anchor_lang::prelude::Signer<'_>;
    let mut _631: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _632: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _636: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _637: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _638: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _639: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _640: &anchor_lang::prelude::Pubkey;
    let mut _641: &anchor_lang::prelude::Pubkey;
    let mut _642: &anchor_lang::prelude::Pubkey;
    let mut _643: &anchor_lang::prelude::Pubkey;
    let mut _644: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _645: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _646: &anchor_lang::prelude::Pubkey;
    let mut _647: &anchor_lang::prelude::Pubkey;
    let mut _648: bool;
    let mut _649: bool;
    let mut _650: bool;
    let mut _651: bool;
    let mut _652: bool;
    let mut _653: bool;
    let mut _654: bool;
    let mut _655: bool;
    let mut _656: bool;
    let mut _657: bool;
    let mut _658: bool;
    let mut _659: bool;
    let mut _660: bool;
    let mut _661: isize;
    let mut _662: isize;
    let mut _663: isize;
    let mut _664: isize;
    let mut _665: isize;
    let mut _666: isize;
    let mut _667: isize;
    let mut _668: isize;
    let mut _669: isize;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: isize;
    let mut _673: isize;
    let mut _674: isize;
    let mut _675: isize;
    let mut _676: isize;
    let mut _677: isize;
    let mut _678: isize;
    let mut _679: isize;
    let mut _680: isize;
    let mut _681: isize;
    let mut _682: isize;
    let mut _683: isize;
    let mut _684: isize;
    let mut _685: isize;
    let mut _686: isize;
    let mut _687: isize;
    let mut _688: isize;
    let mut _689: isize;
    let mut _690: isize;
    let mut _691: isize;
    let mut _692: isize;
    let mut _693: isize;
    let mut _694: isize;
    let mut _695: isize;
    let mut _696: isize;
    let mut _697: isize;
    let mut _698: isize;
    let mut _699: isize;
    let mut _700: isize;
    let mut _701: isize;
    let mut _702: isize;
    let mut _703: isize;
    let mut _704: isize;
    let mut _705: isize;
    let mut _706: isize;
    let mut _707: isize;
    let mut _708: isize;
    let mut _709: isize;
    let mut _710: isize;
    let mut _711: isize;
    let mut _712: isize;
    let mut _713: isize;
    let mut _714: isize;
    let mut _715: isize;
    let mut _716: isize;
    let mut _717: isize;
    let mut _718: isize;
    let mut _719: isize;
    let mut _720: isize;
    let mut _721: isize;
    let mut _722: isize;
    let mut _723: isize;
    let mut _724: isize;
    let mut _725: isize;
    let mut _726: isize;
    let mut _727: isize;
    let mut _728: isize;
    let mut _729: isize;
    let mut _730: isize;
    let mut _731: isize;
    let mut _732: isize;
    let mut _733: isize;
    let mut _734: isize;
    let mut _735: isize;
    let mut _736: isize;
    let mut _737: isize;
    let mut _738: isize;
    let mut _739: isize;
    let mut _740: isize;
    let mut _741: isize;
    let mut _742: isize;
    let mut _743: isize;
    let mut _744: isize;
    let mut _745: isize;
    let mut _746: isize;
    let mut _747: isize;
    let mut _748: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _749: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::admin::InitializeOpenbookV2FulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts::__Args;
        scope 2 {
            debug market_index => _7;
            let _20: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            scope 7 {
                debug base_spot_market => _20;
                let _35: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                scope 12 {
                    debug quote_spot_market => _35;
                    let _50: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    scope 17 {
                        debug state => _50;
                        let _65: anchor_lang::prelude::AccountInfo<'_>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::AccountInfo<'_>;
                        scope 22 {
                            debug openbook_v2_program => _65;
                            let _80: anchor_lang::prelude::AccountInfo<'_>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::AccountInfo<'_>;
                            scope 27 {
                                debug openbook_v2_market => _80;
                                let _95: anchor_lang::prelude::AccountInfo<'_>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::AccountInfo<'_>;
                                scope 32 {
                                    debug drift_signer => _95;
                                    let _116: &anchor_lang::prelude::AccountInfo<'_>;
                                    scope 37 {
                                        debug openbook_v2_fulfillment_config => _116;
                                        let _125: anchor_lang::prelude::Signer<'_>;
                                        let _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _139: anchor_lang::prelude::Signer<'_>;
                                        scope 38 {
                                            debug admin => _125;
                                            let _140: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                            let _151: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _154: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                            scope 43 {
                                                debug rent => _140;
                                                let _155: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                                let _166: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _169: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                                scope 48 {
                                                    debug system_program => _155;
                                                    let _170: anchor_lang::prelude::Rent;
                                                    let _174: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                    let _177: anchor_lang::prelude::Rent;
                                                    scope 53 {
                                                        debug __anchor_rent => _170;
                                                        let _178: anchor_lang::prelude::Pubkey;
                                                        let _179: u8;
                                                        scope 58 {
                                                            debug __pda_address => _178;
                                                            debug __bump => _179;
                                                            let _209: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                                                            let _210: &anchor_lang::prelude::AccountInfo<'_>;
                                                            scope 59 {
                                                                debug openbook_v2_fulfillment_config => _209;
                                                                let _500: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                let _503: usize;
                                                                let _508: anchor_lang::prelude::Pubkey;
                                                                let _509: u8;
                                                                scope 97 {
                                                                    debug residual => _500;
                                                                    scope 98 {
                                                                    }
                                                                }
                                                                scope 99 {
                                                                    debug val => _503;
                                                                    scope 100 {
                                                                    }
                                                                }
                                                                scope 101 {
                                                                    debug __pda_address => _508;
                                                                    debug __bump => _509;
                                                                    let _541: anchor_lang::prelude::Pubkey;
                                                                    let _542: u8;
                                                                    scope 102 {
                                                                        debug __pda_address => _541;
                                                                        debug __bump => _542;
                                                                        let _584: anchor_lang::prelude::Pubkey;
                                                                        scope 103 {
                                                                            debug my_key => _584;
                                                                            let _587: anchor_lang::prelude::Pubkey;
                                                                            scope 104 {
                                                                                debug target_key => _587;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 60 {
                                                                debug actual_field => _210;
                                                                let _213: &anchor_lang::prelude::Pubkey;
                                                                scope 61 {
                                                                    debug actual_owner => _213;
                                                                    let _214: usize;
                                                                    scope 62 {
                                                                        debug space => _214;
                                                                        let _215: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                                                                        let _222: u64;
                                                                        let _431: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                                                                        let _432: anchor_lang::error::Error;
                                                                        let mut _635: &&anchor_lang::prelude::Pubkey;
                                                                        scope 63 {
                                                                            debug pa => _215;
                                                                            let _464: u64;
                                                                            scope 96 {
                                                                                debug required_lamports => _464;
                                                                            }
                                                                        }
                                                                        scope 64 {
                                                                            debug __current_lamports => _222;
                                                                            let _227: usize;
                                                                            let _306: u64;
                                                                            let _422: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                                                                            let _423: anchor_lang::error::Error;
                                                                            let mut _633: &anchor_lang::error::ErrorCode;
                                                                            let mut _634: &anchor_lang::error::ErrorCode;
                                                                            scope 65 {
                                                                                debug space => _227;
                                                                                let _228: u64;
                                                                                scope 66 {
                                                                                    debug lamports => _228;
                                                                                    let _231: anchor_lang::system_program::CreateAccount<'_>;
                                                                                    scope 67 {
                                                                                        debug cpi_accounts => _231;
                                                                                        let _236: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                        scope 68 {
                                                                                            debug cpi_context => _236;
                                                                                            let _273: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _276: ();
                                                                                            scope 69 {
                                                                                                debug residual => _273;
                                                                                                scope 70 {
                                                                                                }
                                                                                            }
                                                                                            scope 71 {
                                                                                                debug val => _276;
                                                                                                scope 72 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 73 {
                                                                                debug required_lamports => _306;
                                                                                let _315: anchor_lang::system_program::Transfer<'_>;
                                                                                let _334: anchor_lang::system_program::Allocate<'_>;
                                                                                scope 74 {
                                                                                    debug cpi_accounts => _315;
                                                                                    let _320: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                    scope 75 {
                                                                                        debug cpi_context => _320;
                                                                                        let _330: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _333: ();
                                                                                        scope 76 {
                                                                                            debug residual => _330;
                                                                                            scope 77 {
                                                                                            }
                                                                                        }
                                                                                        scope 78 {
                                                                                            debug val => _333;
                                                                                            scope 79 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 80 {
                                                                                    debug cpi_accounts => _334;
                                                                                    let _337: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                    scope 81 {
                                                                                        debug cpi_context => _337;
                                                                                        let _372: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _375: ();
                                                                                        let _376: anchor_lang::system_program::Assign<'_>;
                                                                                        scope 82 {
                                                                                            debug residual => _372;
                                                                                            scope 83 {
                                                                                            }
                                                                                        }
                                                                                        scope 84 {
                                                                                            debug val => _375;
                                                                                            scope 85 {
                                                                                            }
                                                                                        }
                                                                                        scope 86 {
                                                                                            debug cpi_accounts => _376;
                                                                                            let _379: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                            scope 87 {
                                                                                                debug cpi_context => _379;
                                                                                                let _413: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                let _416: ();
                                                                                                scope 88 {
                                                                                                    debug residual => _413;
                                                                                                    scope 89 {
                                                                                                    }
                                                                                                }
                                                                                                scope 90 {
                                                                                                    debug val => _416;
                                                                                                    scope 91 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 92 {
                                                                                debug val => _422;
                                                                            }
                                                                            scope 93 {
                                                                                debug e => _423;
                                                                            }
                                                                        }
                                                                        scope 94 {
                                                                            debug val => _431;
                                                                        }
                                                                        scope 95 {
                                                                            debug e => _432;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 54 {
                                                        debug residual => _174;
                                                        scope 55 {
                                                        }
                                                    }
                                                    scope 56 {
                                                        debug val => _177;
                                                        scope 57 {
                                                        }
                                                    }
                                                }
                                                scope 49 {
                                                    debug residual => _166;
                                                    scope 50 {
                                                    }
                                                }
                                                scope 51 {
                                                    debug val => _169;
                                                    scope 52 {
                                                    }
                                                }
                                            }
                                            scope 44 {
                                                debug residual => _151;
                                                scope 45 {
                                                }
                                            }
                                            scope 46 {
                                                debug val => _154;
                                                scope 47 {
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _136;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _139;
                                            scope 42 {
                                            }
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _106;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _109;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _91;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _94;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _660 = const false;
        _659 = const false;
        _658 = const false;
        _657 = const false;
        _656 = const false;
        _655 = const false;
        _654 = const false;
        _653 = const false;
        _652 = const false;
        _651 = const false;
        _649 = const false;
        _648 = const false;
        _650 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<admin::InitializeOpenbookV2FulfillmentConfig<'info> as anchor_lang::Accounts<'info, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _10 = std::result::Result::<<admin::InitializeOpenbookV2FulfillmentConfig<'info> as anchor_lang::Accounts<'info, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _11, move _14) -> [return: bb2, unwind: bb301];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<admin::InitializeOpenbookV2FulfillmentConfig<'info> as anchor_lang::Accounts<'info, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::admin::InitializeOpenbookV2FulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb289;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _22 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _23, move _29) -> [return: bb9, unwind: bb301];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb301];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _20 = move _34;
        StorageDead(_34);
        _661 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb342];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _729 = discriminant(_21);
        StorageDead(_21);
        goto -> bb288;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _37 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _38, move _44) -> [return: bb15, unwind: bb301];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb301];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _35 = move _49;
        StorageDead(_49);
        _663 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb341];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _727 = discriminant(_36);
        StorageDead(_36);
        goto -> bb287;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _52 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _53, move _59) -> [return: bb21, unwind: bb301];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb301];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _50 = move _64;
        StorageDead(_64);
        _665 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb300];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb340];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _725 = discriminant(_51);
        StorageDead(_51);
        goto -> bb286;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _67 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _68, move _74) -> [return: bb27, unwind: bb300];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb300];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _65 = move _79;
        StorageDead(_79);
        _667 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb299];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb339];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _723 = discriminant(_66);
        StorageDead(_66);
        goto -> bb285;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _82 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _83, move _89) -> [return: bb33, unwind: bb299];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb299];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _80 = move _94;
        StorageDead(_94);
        _669 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb298];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb338];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _721 = discriminant(_81);
        StorageDead(_81);
        goto -> bb284;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _97 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _98, move _104) -> [return: bb39, unwind: bb298];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb298];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _95 = move _109;
        StorageDead(_109);
        _671 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _636 = deref_copy (*_2);
        _112 = &(*_636);
        _111 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _112) -> [return: bb44, unwind: bb297];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb337];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _719 = discriminant(_96);
        StorageDead(_96);
        goto -> bb283;
    }

    bb44: {
        switchInt(move _111) -> [0: bb47, otherwise: bb45];
    }

    bb45: {
        StorageDead(_112);
        StorageLive(_114);
        StorageLive(_115);
        _115 = AccountNotEnoughKeys;
        _114 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _115) -> [return: bb46, unwind: bb297];
    }

    bb46: {
        StorageDead(_115);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _114);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb282;
    }

    bb47: {
        StorageDead(_112);
        _110 = const ();
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_116);
        StorageLive(_117);
        _117 = const 0_usize;
        _637 = deref_copy (*_2);
        _118 = Len((*_637));
        _119 = Lt(_117, _118);
        assert(move _119, "index out of bounds: the length is {} but the index is {}", move _118, _117) -> [success: bb48, unwind: bb297];
    }

    bb48: {
        _638 = deref_copy (*_2);
        _116 = &(*_638)[_117];
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _639 = deref_copy (*_2);
        _123 = &(*_639);
        StorageLive(_124);
        _124 = RangeFrom::<usize> { start: const 1_usize };
        _122 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _123, move _124) -> [return: bb49, unwind: bb297];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_123);
        _121 = &(*_122);
        _120 = &(*_121);
        (*_2) = move _120;
        StorageDead(_120);
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_1);
        StorageLive(_130);
        _130 = &mut (*_2);
        StorageLive(_131);
        _131 = &(*_6);
        StorageLive(_132);
        _132 = &mut (*_4);
        StorageLive(_133);
        _133 = &mut (*_5);
        _128 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts(move _129, move _130, move _131, move _132, move _133) -> [return: bb50, unwind: bb297];
    }

    bb50: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_134);
        _134 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _127 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _128, move _134) -> [return: bb51, unwind: bb297];
    }

    bb51: {
        StorageDead(_134);
        StorageDead(_128);
        _126 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _127) -> [return: bb52, unwind: bb297];
    }

    bb52: {
        StorageDead(_127);
        _135 = discriminant(_126);
        switchInt(move _135) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_139);
        _139 = move ((_126 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _125 = move _139;
        StorageDead(_139);
        _673 = discriminant(_126);
        StorageDead(_126);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &(*_1);
        StorageLive(_145);
        _145 = &mut (*_2);
        StorageLive(_146);
        _146 = &(*_6);
        StorageLive(_147);
        _147 = &mut (*_4);
        StorageLive(_148);
        _148 = &mut (*_5);
        _143 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts(move _144, move _145, move _146, move _147, move _148) -> [return: bb56, unwind: bb297];
    }

    bb54: {
        StorageLive(_136);
        _136 = move ((_126 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_138);
        _138 = move _136;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _138) -> [return: bb55, unwind: bb336];
    }

    bb55: {
        StorageDead(_138);
        StorageDead(_136);
        _717 = discriminant(_126);
        StorageDead(_126);
        goto -> bb281;
    }

    bb56: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_149);
        _149 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _142 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _143, move _149) -> [return: bb57, unwind: bb297];
    }

    bb57: {
        StorageDead(_149);
        StorageDead(_143);
        _141 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _142) -> [return: bb58, unwind: bb297];
    }

    bb58: {
        StorageDead(_142);
        _150 = discriminant(_141);
        switchInt(move _150) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_154);
        _154 = move ((_141 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _140 = move _154;
        StorageDead(_154);
        _675 = discriminant(_141);
        StorageDead(_141);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &(*_1);
        StorageLive(_160);
        _160 = &mut (*_2);
        StorageLive(_161);
        _161 = &(*_6);
        StorageLive(_162);
        _162 = &mut (*_4);
        StorageLive(_163);
        _163 = &mut (*_5);
        _158 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeOpenbookV2FulfillmentConfigBumps>>::try_accounts(move _159, move _160, move _161, move _162, move _163) -> [return: bb62, unwind: bb297];
    }

    bb60: {
        StorageLive(_151);
        _151 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_153);
        _153 = move _151;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _153) -> [return: bb61, unwind: bb335];
    }

    bb61: {
        StorageDead(_153);
        StorageDead(_151);
        _715 = discriminant(_141);
        StorageDead(_141);
        goto -> bb280;
    }

    bb62: {
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageLive(_164);
        _164 = {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18};
        _157 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5536:10: 5536:18}>(move _158, move _164) -> [return: bb63, unwind: bb297];
    }

    bb63: {
        StorageDead(_164);
        StorageDead(_158);
        _156 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _157) -> [return: bb64, unwind: bb297];
    }

    bb64: {
        StorageDead(_157);
        _165 = discriminant(_156);
        switchInt(move _165) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_169);
        _169 = move ((_156 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _155 = move _169;
        StorageDead(_169);
        _677 = discriminant(_156);
        StorageDead(_156);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb68, unwind: bb297];
    }

    bb66: {
        StorageLive(_166);
        _166 = move ((_156 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_168);
        _168 = move _166;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _168) -> [return: bb67, unwind: bb334];
    }

    bb67: {
        StorageDead(_168);
        StorageDead(_166);
        _713 = discriminant(_156);
        StorageDead(_156);
        goto -> bb279;
    }

    bb68: {
        _171 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _172) -> [return: bb69, unwind: bb297];
    }

    bb69: {
        StorageDead(_172);
        _173 = discriminant(_171);
        switchInt(move _173) -> [0: bb70, 1: bb71, otherwise: bb5];
    }

    bb70: {
        StorageLive(_177);
        _177 = ((_171 as Continue).0: anchor_lang::prelude::Rent);
        _170 = _177;
        StorageDead(_177);
        _679 = discriminant(_171);
        StorageDead(_171);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = const b"openbook_v2_fulfillment_config";
        _187 = &(*_188);
        _186 = <[u8; 30] as AsRef<[u8]>>::as_ref(move _187) -> [return: bb73, unwind: bb297];
    }

    bb71: {
        StorageLive(_174);
        _174 = move ((_171 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_176);
        _176 = move _174;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _176) -> [return: bb72, unwind: bb333];
    }

    bb72: {
        StorageDead(_176);
        StorageDead(_174);
        _711 = discriminant(_171);
        StorageDead(_171);
        goto -> bb278;
    }

    bb73: {
        _185 = &(*_186);
        StorageDead(_187);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _640 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _191 = &(*_640);
        _190 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _191) -> [return: bb74, unwind: bb297];
    }

    bb74: {
        _189 = &(*_190);
        StorageDead(_191);
        _184 = [move _185, move _189];
        StorageDead(_189);
        StorageDead(_185);
        _183 = &_184;
        _182 = &(*_183);
        _181 = move _182 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_182);
        StorageLive(_192);
        _192 = &(*_1);
        _180 = anchor_lang::prelude::Pubkey::find_program_address(move _181, move _192) -> [return: bb75, unwind: bb297];
    }

    bb75: {
        StorageDead(_192);
        StorageDead(_181);
        StorageLive(_178);
        _178 = (_180.0: anchor_lang::prelude::Pubkey);
        StorageLive(_179);
        _179 = (_180.1: u8);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_180);
        StorageLive(_193);
        _193 = _179;
        ((*_4).2: u8) = move _193;
        StorageDead(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &(*_116);
        _197 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _198) -> [return: bb76, unwind: bb297];
    }

    bb76: {
        _196 = &_197;
        StorageDead(_198);
        StorageLive(_199);
        _199 = &_178;
        _195 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _196, move _199) -> [return: bb77, unwind: bb297];
    }

    bb77: {
        switchInt(move _195) -> [0: bb83, otherwise: bb78];
    }

    bb78: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_196);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = ConstraintSeeds;
        _203 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _204) -> [return: bb79, unwind: bb297];
    }

    bb79: {
        StorageDead(_204);
        _202 = anchor_lang::error::Error::with_account_name::<&str>(move _203, const "openbook_v2_fulfillment_config") -> [return: bb80, unwind: bb297];
    }

    bb80: {
        _660 = const true;
        StorageDead(_203);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &(*_116);
        _206 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _207) -> [return: bb81, unwind: bb332];
    }

    bb81: {
        StorageDead(_207);
        StorageLive(_208);
        _208 = _178;
        _205 = (move _206, move _208);
        StorageDead(_208);
        StorageDead(_206);
        _660 = const false;
        _201 = anchor_lang::error::Error::with_pubkeys(move _202, move _205) -> [return: bb82, unwind: bb332];
    }

    bb82: {
        StorageDead(_205);
        _660 = const false;
        StorageDead(_202);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _201);
        StorageDead(_201);
        StorageDead(_195);
        StorageDead(_194);
        goto -> bb277;
    }

    bb83: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_196);
        _194 = const ();
        StorageDead(_195);
        StorageDead(_194);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_116;
        _211 = &(*_212);
        _210 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _211) -> [return: bb84, unwind: bb297];
    }

    bb84: {
        StorageDead(_211);
        StorageDead(_212);
        StorageLive(_213);
        _213 = ((*_210).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_214);
        _214 = const _;
        StorageLive(_215);
        StorageLive(_216);
        _216 = const false;
        switchInt(move _216) -> [0: bb87, otherwise: bb85];
    }

    bb85: {
        StorageLive(_217);
        StorageLive(_218);
        _218 = &_213;
        StorageLive(_219);
        _635 = const _;
        _219 = &(*_635);
        _217 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _218, move _219) -> [return: bb86, unwind: bb297];
    }

    bb86: {
        switchInt(move _217) -> [0: bb164, otherwise: bb87];
    }

    bb87: {
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &(*_116);
        _222 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _223) -> [return: bb88, unwind: bb297];
    }

    bb88: {
        StorageDead(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = _222;
        _225 = Eq(move _226, const 0_u64);
        switchInt(move _225) -> [0: bb105, otherwise: bb89];
    }

    bb89: {
        StorageDead(_226);
        StorageLive(_227);
        _227 = _214;
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_170;
        StorageLive(_230);
        _230 = _227;
        _228 = anchor_lang::prelude::Rent::minimum_balance(move _229, move _230) -> [return: bb90, unwind: bb297];
    }

    bb90: {
        StorageDead(_230);
        StorageDead(_229);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_125;
        _232 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _233) -> [return: bb91, unwind: bb297];
    }

    bb91: {
        StorageDead(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &(*_116);
        _234 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _235) -> [return: bb92, unwind: bb296];
    }

    bb92: {
        StorageDead(_235);
        _659 = const true;
        _231 = anchor_lang::system_program::CreateAccount::<'_> { from: move _232, to: move _234 };
        StorageDead(_234);
        StorageDead(_232);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &_155;
        _237 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _238) -> [return: bb93, unwind: bb330];
    }

    bb93: {
        StorageDead(_238);
        StorageLive(_239);
        _659 = const false;
        _239 = move _231;
        _236 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _237, move _239) -> [return: bb94, unwind: bb330];
    }

    bb94: {
        StorageDead(_239);
        StorageDead(_237);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _658 = const true;
        _244 = move _236;
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = const b"openbook_v2_fulfillment_config";
        _255 = &(*_256);
        _254 = <[u8; 30] as AsRef<[u8]>>::as_ref(move _255) -> [return: bb95, unwind: bb328];
    }

    bb95: {
        StorageDead(_255);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _641 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _259 = &(*_641);
        _258 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _259) -> [return: bb96, unwind: bb328];
    }

    bb96: {
        _257 = &(*_258);
        StorageDead(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = _179;
        _264 = [move _265];
        _263 = &_264;
        StorageDead(_265);
        StorageLive(_266);
        _266 = RangeFull;
        _262 = <[u8; 1] as Index<RangeFull>>::index(move _263, move _266) -> [return: bb97, unwind: bb328];
    }

    bb97: {
        StorageDead(_266);
        StorageDead(_263);
        _261 = &(*_262);
        _260 = &(*_261);
        _253 = [move _254, move _257, move _260];
        _252 = &_253;
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_254);
        StorageLive(_267);
        _267 = RangeFull;
        _251 = <[&[u8]; 3] as Index<RangeFull>>::index(move _252, move _267) -> [return: bb98, unwind: bb328];
    }

    bb98: {
        StorageDead(_267);
        StorageDead(_252);
        _250 = &(*_251);
        _249 = &(*_250);
        _248 = [move _249];
        StorageDead(_249);
        _247 = &_248;
        _246 = &(*_247);
        _245 = move _246 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_246);
        _658 = const false;
        _243 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _244, move _245) -> [return: bb99, unwind: bb328];
    }

    bb99: {
        StorageDead(_245);
        _658 = const false;
        StorageDead(_244);
        StorageLive(_268);
        _268 = _228;
        StorageLive(_269);
        StorageLive(_270);
        _270 = _227;
        _269 = move _270 as u64 (IntToInt);
        StorageDead(_270);
        StorageLive(_271);
        _271 = &(*_1);
        _242 = anchor_lang::system_program::create_account(move _243, move _268, move _269, move _271) -> [return: bb100, unwind: bb330];
    }

    bb100: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_243);
        _241 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _242) -> [return: bb101, unwind: bb330];
    }

    bb101: {
        StorageDead(_242);
        _272 = discriminant(_241);
        switchInt(move _272) -> [0: bb102, 1: bb103, otherwise: bb5];
    }

    bb102: {
        StorageLive(_276);
        _276 = ((_241 as Continue).0: ());
        _240 = _276;
        StorageDead(_276);
        _681 = discriminant(_241);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_241);
        StorageDead(_240);
        _224 = const ();
        StorageDead(_236);
        _659 = const false;
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_227);
        goto -> bb159;
    }

    bb103: {
        StorageLive(_273);
        _273 = move ((_241 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_275);
        _275 = move _273;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _275) -> [return: bb104, unwind: bb326];
    }

    bb104: {
        StorageDead(_275);
        StorageDead(_273);
        _709 = discriminant(_241);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_236);
        _659 = const false;
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_227);
        goto -> bb273;
    }

    bb105: {
        StorageDead(_226);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &_125;
        _280 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _281) -> [return: bb106, unwind: bb297];
    }

    bb106: {
        _279 = &_280;
        StorageDead(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _284 = &(*_116);
        _283 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _284) -> [return: bb107, unwind: bb297];
    }

    bb107: {
        _282 = &_283;
        StorageDead(_284);
        _278 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _279, move _282) -> [return: bb108, unwind: bb297];
    }

    bb108: {
        switchInt(move _278) -> [0: bb117, otherwise: bb109];
    }

    bb109: {
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_279);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _634 = const _;
        _290 = &(*_634);
        _289 = anchor_lang::error::ErrorCode::name(move _290) -> [return: bb110, unwind: bb297];
    }

    bb110: {
        StorageDead(_290);
        StorageLive(_292);
        StorageLive(_293);
        _293 = TryingToInitPayerAsProgramAccount;
        _292 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _293) -> [return: bb111, unwind: bb295];
    }

    bb111: {
        StorageDead(_293);
        StorageLive(_294);
        StorageLive(_295);
        _633 = const _;
        _295 = &(*_633);
        _294 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _295) -> [return: bb112, unwind: bb295];
    }

    bb112: {
        StorageDead(_295);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _299 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 5536_u32 };
        _298 = anchor_lang::error::ErrorOrigin::Source(move _299);
        StorageDead(_299);
        _297 = Option::<ErrorOrigin>::Some(move _298);
        StorageDead(_298);
        StorageLive(_300);
        _300 = Option::<ComparedValues>::None;
        _288 = anchor_lang::error::AnchorError { error_name: move _289, error_code_number: move _292, error_msg: move _294, error_origin: move _297, compared_values: move _300 };
        StorageDead(_300);
        StorageDead(_297);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_289);
        _287 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _288) -> [return: bb113, unwind: bb297];
    }

    bb113: {
        _657 = const true;
        StorageDead(_288);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &_125;
        _302 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _303) -> [return: bb114, unwind: bb325];
    }

    bb114: {
        StorageDead(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &(*_116);
        _304 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _305) -> [return: bb115, unwind: bb325];
    }

    bb115: {
        StorageDead(_305);
        _301 = (move _302, move _304);
        StorageDead(_304);
        StorageDead(_302);
        _657 = const false;
        _286 = anchor_lang::error::Error::with_pubkeys(move _287, move _301) -> [return: bb116, unwind: bb325];
    }

    bb116: {
        StorageDead(_301);
        _657 = const false;
        StorageDead(_287);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _286);
        StorageDead(_286);
        StorageDead(_278);
        StorageDead(_277);
        goto -> bb273;
    }

    bb117: {
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_279);
        _277 = const ();
        StorageDead(_278);
        StorageDead(_277);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = &_170;
        StorageLive(_310);
        _310 = _214;
        _308 = anchor_lang::prelude::Rent::minimum_balance(move _309, move _310) -> [return: bb118, unwind: bb297];
    }

    bb118: {
        StorageDead(_310);
        StorageDead(_309);
        _307 = <u64 as Ord>::max(move _308, const 1_u64) -> [return: bb119, unwind: bb297];
    }

    bb119: {
        StorageDead(_308);
        StorageLive(_311);
        _311 = _222;
        _306 = core::num::<impl u64>::saturating_sub(move _307, move _311) -> [return: bb120, unwind: bb297];
    }

    bb120: {
        StorageDead(_311);
        StorageDead(_307);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = _306;
        _313 = Gt(move _314, const 0_u64);
        switchInt(move _313) -> [0: bb131, otherwise: bb121];
    }

    bb121: {
        StorageDead(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        _317 = &_125;
        _316 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _317) -> [return: bb122, unwind: bb297];
    }

    bb122: {
        StorageDead(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &(*_116);
        _318 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _319) -> [return: bb123, unwind: bb294];
    }

    bb123: {
        StorageDead(_319);
        _656 = const true;
        _315 = anchor_lang::system_program::Transfer::<'_> { from: move _316, to: move _318 };
        StorageDead(_318);
        StorageDead(_316);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = &_155;
        _321 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _322) -> [return: bb124, unwind: bb323];
    }

    bb124: {
        StorageDead(_322);
        StorageLive(_323);
        _656 = const false;
        _323 = move _315;
        _320 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _321, move _323) -> [return: bb125, unwind: bb323];
    }

    bb125: {
        StorageDead(_323);
        StorageDead(_321);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = move _320;
        StorageLive(_328);
        _328 = _306;
        _326 = anchor_lang::system_program::transfer(move _327, move _328) -> [return: bb126, unwind: bb323];
    }

    bb126: {
        StorageDead(_328);
        StorageDead(_327);
        _325 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _326) -> [return: bb127, unwind: bb323];
    }

    bb127: {
        StorageDead(_326);
        _329 = discriminant(_325);
        switchInt(move _329) -> [0: bb128, 1: bb129, otherwise: bb5];
    }

    bb128: {
        StorageLive(_333);
        _333 = ((_325 as Continue).0: ());
        _324 = _333;
        StorageDead(_333);
        _683 = discriminant(_325);
        StorageDead(_325);
        StorageDead(_324);
        _312 = const ();
        StorageDead(_320);
        _656 = const false;
        StorageDead(_315);
        goto -> bb132;
    }

    bb129: {
        StorageLive(_330);
        _330 = move ((_325 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_332);
        _332 = move _330;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _332) -> [return: bb130, unwind: bb321];
    }

    bb130: {
        StorageDead(_332);
        StorageDead(_330);
        _707 = discriminant(_325);
        StorageDead(_325);
        StorageDead(_324);
        StorageDead(_320);
        _656 = const false;
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_312);
        goto -> bb272;
    }

    bb131: {
        StorageDead(_314);
        _312 = const ();
        goto -> bb132;
    }

    bb132: {
        StorageDead(_313);
        StorageDead(_312);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = &(*_116);
        _335 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _336) -> [return: bb133, unwind: bb297];
    }

    bb133: {
        StorageDead(_336);
        _655 = const true;
        _334 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _335 };
        StorageDead(_335);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = &_155;
        _338 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _339) -> [return: bb134, unwind: bb320];
    }

    bb134: {
        StorageDead(_339);
        StorageLive(_340);
        _655 = const false;
        _340 = move _334;
        _337 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _338, move _340) -> [return: bb135, unwind: bb320];
    }

    bb135: {
        StorageDead(_340);
        StorageDead(_338);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _654 = const true;
        _345 = move _337;
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = const b"openbook_v2_fulfillment_config";
        _356 = &(*_357);
        _355 = <[u8; 30] as AsRef<[u8]>>::as_ref(move _356) -> [return: bb136, unwind: bb318];
    }

    bb136: {
        StorageDead(_356);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _642 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _360 = &(*_642);
        _359 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _360) -> [return: bb137, unwind: bb318];
    }

    bb137: {
        _358 = &(*_359);
        StorageDead(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        _366 = _179;
        _365 = [move _366];
        _364 = &_365;
        StorageDead(_366);
        StorageLive(_367);
        _367 = RangeFull;
        _363 = <[u8; 1] as Index<RangeFull>>::index(move _364, move _367) -> [return: bb138, unwind: bb318];
    }

    bb138: {
        StorageDead(_367);
        StorageDead(_364);
        _362 = &(*_363);
        _361 = &(*_362);
        _354 = [move _355, move _358, move _361];
        _353 = &_354;
        StorageDead(_361);
        StorageDead(_358);
        StorageDead(_355);
        StorageLive(_368);
        _368 = RangeFull;
        _352 = <[&[u8]; 3] as Index<RangeFull>>::index(move _353, move _368) -> [return: bb139, unwind: bb318];
    }

    bb139: {
        StorageDead(_368);
        StorageDead(_353);
        _351 = &(*_352);
        _350 = &(*_351);
        _349 = [move _350];
        StorageDead(_350);
        _348 = &_349;
        _347 = &(*_348);
        _346 = move _347 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_347);
        _654 = const false;
        _344 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _345, move _346) -> [return: bb140, unwind: bb318];
    }

    bb140: {
        StorageDead(_346);
        _654 = const false;
        StorageDead(_345);
        StorageLive(_369);
        StorageLive(_370);
        _370 = _214;
        _369 = move _370 as u64 (IntToInt);
        StorageDead(_370);
        _343 = anchor_lang::system_program::allocate(move _344, move _369) -> [return: bb141, unwind: bb320];
    }

    bb141: {
        StorageDead(_369);
        StorageDead(_344);
        _342 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _343) -> [return: bb142, unwind: bb320];
    }

    bb142: {
        StorageDead(_343);
        _371 = discriminant(_342);
        switchInt(move _371) -> [0: bb143, 1: bb144, otherwise: bb5];
    }

    bb143: {
        StorageLive(_375);
        _375 = ((_342 as Continue).0: ());
        _341 = _375;
        StorageDead(_375);
        _685 = discriminant(_342);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_359);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_342);
        StorageDead(_341);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &(*_116);
        _377 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _378) -> [return: bb146, unwind: bb320];
    }

    bb144: {
        StorageLive(_372);
        _372 = move ((_342 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_374);
        _374 = move _372;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _374) -> [return: bb145, unwind: bb316];
    }

    bb145: {
        StorageDead(_374);
        StorageDead(_372);
        _705 = discriminant(_342);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_359);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_342);
        StorageDead(_341);
        goto -> bb271;
    }

    bb146: {
        StorageDead(_378);
        _653 = const true;
        _376 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _377 };
        StorageDead(_377);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &_155;
        _380 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _381) -> [return: bb147, unwind: bb315];
    }

    bb147: {
        StorageDead(_381);
        StorageLive(_382);
        _653 = const false;
        _382 = move _376;
        _379 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _380, move _382) -> [return: bb148, unwind: bb315];
    }

    bb148: {
        StorageDead(_382);
        StorageDead(_380);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _652 = const true;
        _387 = move _379;
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = const b"openbook_v2_fulfillment_config";
        _398 = &(*_399);
        _397 = <[u8; 30] as AsRef<[u8]>>::as_ref(move _398) -> [return: bb149, unwind: bb313];
    }

    bb149: {
        StorageDead(_398);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _643 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _402 = &(*_643);
        _401 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _402) -> [return: bb150, unwind: bb313];
    }

    bb150: {
        _400 = &(*_401);
        StorageDead(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = _179;
        _407 = [move _408];
        _406 = &_407;
        StorageDead(_408);
        StorageLive(_409);
        _409 = RangeFull;
        _405 = <[u8; 1] as Index<RangeFull>>::index(move _406, move _409) -> [return: bb151, unwind: bb313];
    }

    bb151: {
        StorageDead(_409);
        StorageDead(_406);
        _404 = &(*_405);
        _403 = &(*_404);
        _396 = [move _397, move _400, move _403];
        _395 = &_396;
        StorageDead(_403);
        StorageDead(_400);
        StorageDead(_397);
        StorageLive(_410);
        _410 = RangeFull;
        _394 = <[&[u8]; 3] as Index<RangeFull>>::index(move _395, move _410) -> [return: bb152, unwind: bb313];
    }

    bb152: {
        StorageDead(_410);
        StorageDead(_395);
        _393 = &(*_394);
        _392 = &(*_393);
        _391 = [move _392];
        StorageDead(_392);
        _390 = &_391;
        _389 = &(*_390);
        _388 = move _389 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_389);
        _652 = const false;
        _386 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _387, move _388) -> [return: bb153, unwind: bb313];
    }

    bb153: {
        StorageDead(_388);
        _652 = const false;
        StorageDead(_387);
        StorageLive(_411);
        _411 = &(*_1);
        _385 = anchor_lang::system_program::assign(move _386, move _411) -> [return: bb154, unwind: bb315];
    }

    bb154: {
        StorageDead(_411);
        StorageDead(_386);
        _384 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _385) -> [return: bb155, unwind: bb315];
    }

    bb155: {
        StorageDead(_385);
        _412 = discriminant(_384);
        switchInt(move _412) -> [0: bb156, 1: bb157, otherwise: bb5];
    }

    bb156: {
        StorageLive(_416);
        _416 = ((_384 as Continue).0: ());
        _383 = _416;
        StorageDead(_416);
        _687 = discriminant(_384);
        StorageDead(_407);
        StorageDead(_405);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_391);
        StorageDead(_390);
        StorageDead(_384);
        StorageDead(_383);
        _224 = const ();
        StorageDead(_379);
        _653 = const false;
        StorageDead(_376);
        StorageDead(_337);
        _655 = const false;
        StorageDead(_334);
        StorageDead(_306);
        goto -> bb159;
    }

    bb157: {
        StorageLive(_413);
        _413 = move ((_384 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_415);
        _415 = move _413;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _415) -> [return: bb158, unwind: bb311];
    }

    bb158: {
        StorageDead(_415);
        StorageDead(_413);
        _703 = discriminant(_384);
        StorageDead(_407);
        StorageDead(_405);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_391);
        StorageDead(_390);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_379);
        _653 = const false;
        StorageDead(_376);
        goto -> bb271;
    }

    bb159: {
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &(*_1);
        StorageLive(_419);
        StorageLive(_420);
        _420 = &_116;
        _644 = deref_copy (*_420);
        _419 = &(*_644);
        _417 = anchor_lang::prelude::AccountLoader::<'_, OpenbookV2FulfillmentConfig>::try_from_unchecked(move _418, move _419) -> [return: bb160, unwind: bb297];
    }

    bb160: {
        StorageDead(_419);
        StorageDead(_418);
        _421 = discriminant(_417);
        switchInt(move _421) -> [0: bb162, 1: bb161, otherwise: bb5];
    }

    bb161: {
        StorageLive(_423);
        _423 = move ((_417 as Err).0: anchor_lang::error::Error);
        StorageLive(_425);
        StorageLive(_426);
        _426 = move _423;
        _425 = anchor_lang::error::Error::with_account_name::<&str>(move _426, const "openbook_v2_fulfillment_config") -> [return: bb163, unwind: bb310];
    }

    bb162: {
        StorageLive(_422);
        _422 = move ((_417 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>);
        _215 = move _422;
        StorageDead(_422);
        StorageDead(_222);
        _689 = discriminant(_417);
        StorageDead(_420);
        StorageDead(_417);
        goto -> bb169;
    }

    bb163: {
        StorageDead(_426);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _425);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_222);
        _701 = discriminant(_417);
        StorageDead(_420);
        StorageDead(_417);
        goto -> bb274;
    }

    bb164: {
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = &_116;
        _645 = deref_copy (*_429);
        _428 = &(*_645);
        _427 = anchor_lang::prelude::AccountLoader::<'_, OpenbookV2FulfillmentConfig>::try_from(move _428) -> [return: bb165, unwind: bb297];
    }

    bb165: {
        StorageDead(_428);
        _430 = discriminant(_427);
        switchInt(move _430) -> [0: bb167, 1: bb166, otherwise: bb5];
    }

    bb166: {
        StorageLive(_432);
        _432 = move ((_427 as Err).0: anchor_lang::error::Error);
        StorageLive(_434);
        StorageLive(_435);
        _435 = move _432;
        _434 = anchor_lang::error::Error::with_account_name::<&str>(move _435, const "openbook_v2_fulfillment_config") -> [return: bb168, unwind: bb309];
    }

    bb167: {
        StorageLive(_431);
        _431 = move ((_427 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>);
        _215 = move _431;
        StorageDead(_431);
        _691 = discriminant(_427);
        StorageDead(_429);
        StorageDead(_427);
        goto -> bb169;
    }

    bb168: {
        StorageDead(_435);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _434);
        StorageDead(_434);
        StorageDead(_432);
        _699 = discriminant(_427);
        StorageDead(_429);
        StorageDead(_427);
        goto -> bb274;
    }

    bb169: {
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_436);
        StorageLive(_437);
        _437 = const false;
        switchInt(move _437) -> [0: bb193, otherwise: bb170];
    }

    bb170: {
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = _214;
        StorageLive(_441);
        StorageLive(_442);
        _442 = &(*_210);
        _441 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _442) -> [return: bb171, unwind: bb297];
    }

    bb171: {
        StorageDead(_442);
        _439 = Ne(move _440, move _441);
        switchInt(move _439) -> [0: bb177, otherwise: bb172];
    }

    bb172: {
        StorageDead(_441);
        StorageDead(_440);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _447 = ConstraintSpace;
        _446 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _447) -> [return: bb173, unwind: bb297];
    }

    bb173: {
        StorageDead(_447);
        _445 = anchor_lang::error::Error::with_account_name::<&str>(move _446, const "openbook_v2_fulfillment_config") -> [return: bb174, unwind: bb297];
    }

    bb174: {
        _651 = const true;
        StorageDead(_446);
        StorageLive(_448);
        StorageLive(_449);
        _449 = _214;
        StorageLive(_450);
        StorageLive(_451);
        _451 = &(*_210);
        _450 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _451) -> [return: bb175, unwind: bb308];
    }

    bb175: {
        StorageDead(_451);
        _448 = (move _449, move _450);
        StorageDead(_450);
        StorageDead(_449);
        _651 = const false;
        _444 = anchor_lang::error::Error::with_values::<usize, usize>(move _445, move _448) -> [return: bb176, unwind: bb308];
    }

    bb176: {
        StorageDead(_448);
        _651 = const false;
        StorageDead(_445);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _444);
        StorageDead(_444);
        StorageDead(_439);
        StorageDead(_438);
        goto -> bb270;
    }

    bb177: {
        StorageDead(_441);
        StorageDead(_440);
        _438 = const ();
        StorageDead(_439);
        StorageDead(_438);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = &_213;
        StorageLive(_455);
        _455 = &_1;
        _453 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _454, move _455) -> [return: bb178, unwind: bb297];
    }

    bb178: {
        switchInt(move _453) -> [0: bb183, otherwise: bb179];
    }

    bb179: {
        StorageDead(_455);
        StorageDead(_454);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = ConstraintOwner;
        _459 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _460) -> [return: bb180, unwind: bb297];
    }

    bb180: {
        StorageDead(_460);
        _458 = anchor_lang::error::Error::with_account_name::<&str>(move _459, const "openbook_v2_fulfillment_config") -> [return: bb181, unwind: bb297];
    }

    bb181: {
        StorageDead(_459);
        StorageLive(_461);
        StorageLive(_462);
        _462 = (*_213);
        StorageLive(_463);
        _463 = (*_1);
        _461 = (move _462, move _463);
        StorageDead(_463);
        StorageDead(_462);
        _457 = anchor_lang::error::Error::with_pubkeys(move _458, move _461) -> [return: bb182, unwind: bb297];
    }

    bb182: {
        StorageDead(_461);
        StorageDead(_458);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _457);
        StorageDead(_457);
        StorageDead(_453);
        StorageDead(_452);
        goto -> bb270;
    }

    bb183: {
        StorageDead(_455);
        StorageDead(_454);
        _452 = const ();
        StorageDead(_453);
        StorageDead(_452);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &_170;
        StorageLive(_466);
        _466 = _214;
        _464 = anchor_lang::prelude::Rent::minimum_balance(move _465, move _466) -> [return: bb184, unwind: bb297];
    }

    bb184: {
        StorageDead(_466);
        StorageDead(_465);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = &_215;
        _470 = <anchor_lang::prelude::AccountLoader<'_, OpenbookV2FulfillmentConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _471) -> [return: bb185, unwind: bb297];
    }

    bb185: {
        _469 = &_470;
        StorageDead(_471);
        _468 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _469) -> [return: bb186, unwind: bb293];
    }

    bb186: {
        StorageDead(_469);
        StorageLive(_472);
        _472 = _464;
        _467 = Lt(move _468, move _472);
        switchInt(move _467) -> [0: bb191, otherwise: bb187];
    }

    bb187: {
        StorageDead(_472);
        drop(_470) -> [return: bb188, unwind: bb297];
    }

    bb188: {
        StorageDead(_470);
        StorageDead(_468);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        _476 = ConstraintRentExempt;
        _475 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _476) -> [return: bb189, unwind: bb297];
    }

    bb189: {
        StorageDead(_476);
        _474 = anchor_lang::error::Error::with_account_name::<&str>(move _475, const "openbook_v2_fulfillment_config") -> [return: bb190, unwind: bb297];
    }

    bb190: {
        StorageDead(_475);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _474);
        StorageDead(_474);
        StorageDead(_467);
        StorageDead(_464);
        goto -> bb270;
    }

    bb191: {
        StorageDead(_472);
        drop(_470) -> [return: bb192, unwind: bb297];
    }

    bb192: {
        StorageDead(_470);
        StorageDead(_468);
        _436 = const ();
        StorageDead(_467);
        StorageDead(_464);
        goto -> bb194;
    }

    bb193: {
        _436 = const ();
        goto -> bb194;
    }

    bb194: {
        StorageDead(_437);
        StorageDead(_436);
        _209 = move _215;
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_210);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        _481 = &_209;
        _480 = &(*_481);
        _479 = <anchor_lang::prelude::AccountLoader<'_, OpenbookV2FulfillmentConfig> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _480) -> [return: bb195, unwind: bb297];
    }

    bb195: {
        StorageDead(_480);
        _478 = ((*_479).6: bool);
        switchInt(move _478) -> [0: bb196, otherwise: bb199];
    }

    bb196: {
        StorageDead(_481);
        StorageDead(_479);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        _485 = ConstraintMut;
        _484 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _485) -> [return: bb197, unwind: bb297];
    }

    bb197: {
        StorageDead(_485);
        _483 = anchor_lang::error::Error::with_account_name::<&str>(move _484, const "openbook_v2_fulfillment_config") -> [return: bb198, unwind: bb297];
    }

    bb198: {
        StorageDead(_484);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _483);
        StorageDead(_483);
        StorageDead(_478);
        StorageDead(_477);
        goto -> bb276;
    }

    bb199: {
        StorageDead(_481);
        StorageDead(_479);
        _477 = const ();
        StorageDead(_478);
        StorageDead(_477);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        _488 = &_170;
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = &_209;
        _491 = <anchor_lang::prelude::AccountLoader<'_, OpenbookV2FulfillmentConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _492) -> [return: bb200, unwind: bb297];
    }

    bb200: {
        _490 = &_491;
        StorageDead(_492);
        _489 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _490) -> [return: bb201, unwind: bb292];
    }

    bb201: {
        StorageDead(_490);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        _498 = &_209;
        _497 = <anchor_lang::prelude::AccountLoader<'_, OpenbookV2FulfillmentConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _498) -> [return: bb202, unwind: bb292];
    }

    bb202: {
        _496 = &_497;
        StorageDead(_498);
        _495 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _496) -> [return: bb203, unwind: bb291];
    }

    bb203: {
        StorageDead(_496);
        _494 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _495) -> [return: bb204, unwind: bb291];
    }

    bb204: {
        _650 = const true;
        StorageDead(_495);
        _499 = discriminant(_494);
        switchInt(move _499) -> [0: bb205, 1: bb206, otherwise: bb5];
    }

    bb205: {
        StorageLive(_503);
        _503 = ((_494 as Continue).0: usize);
        _493 = _503;
        StorageDead(_503);
        _487 = anchor_lang::prelude::Rent::is_exempt(move _488, move _489, move _493) -> [return: bb208, unwind: bb306];
    }

    bb206: {
        StorageLive(_500);
        _500 = move ((_494 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_502);
        _502 = move _500;
        _0 = <std::result::Result<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _502) -> [return: bb207, unwind: bb306];
    }

    bb207: {
        StorageDead(_502);
        StorageDead(_500);
        StorageDead(_493);
        StorageDead(_489);
        StorageDead(_488);
        _697 = discriminant(_494);
        drop(_497) -> [return: bb267, unwind: bb292];
    }

    bb208: {
        switchInt(move _487) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        StorageDead(_493);
        StorageDead(_489);
        StorageDead(_488);
        _693 = discriminant(_494);
        drop(_497) -> [return: bb215, unwind: bb292];
    }

    bb210: {
        StorageDead(_493);
        StorageDead(_489);
        StorageDead(_488);
        _695 = discriminant(_494);
        drop(_497) -> [return: bb211, unwind: bb292];
    }

    bb211: {
        StorageDead(_497);
        _650 = const false;
        StorageDead(_494);
        drop(_491) -> [return: bb212, unwind: bb297];
    }

    bb212: {
        StorageDead(_491);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        _507 = ConstraintRentExempt;
        _506 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _507) -> [return: bb213, unwind: bb297];
    }

    bb213: {
        StorageDead(_507);
        _505 = anchor_lang::error::Error::with_account_name::<&str>(move _506, const "openbook_v2_fulfillment_config") -> [return: bb214, unwind: bb297];
    }

    bb214: {
        StorageDead(_506);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _505);
        StorageDead(_505);
        goto -> bb269;
    }

    bb215: {
        StorageDead(_497);
        _650 = const false;
        StorageDead(_494);
        drop(_491) -> [return: bb216, unwind: bb297];
    }

    bb216: {
        StorageDead(_491);
        _486 = const ();
        StorageDead(_487);
        StorageDead(_486);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        _517 = const b"spot_market";
        _516 = &(*_517);
        _515 = move _516 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_516);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        _522 = _7;
        _521 = core::num::<impl u16>::to_le_bytes(move _522) -> [return: bb217, unwind: bb297];
    }

    bb217: {
        _520 = &_521;
        StorageDead(_522);
        _519 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _520) -> [return: bb218, unwind: bb297];
    }

    bb218: {
        _518 = &(*_519);
        StorageDead(_520);
        _514 = [move _515, move _518];
        StorageDead(_518);
        StorageDead(_515);
        _513 = &_514;
        _512 = &(*_513);
        _511 = move _512 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_512);
        StorageLive(_523);
        StorageLive(_524);
        _524 = &_1;
        _646 = deref_copy (*_524);
        _523 = &(*_646);
        _510 = anchor_lang::prelude::Pubkey::find_program_address(move _511, move _523) -> [return: bb219, unwind: bb297];
    }

    bb219: {
        StorageDead(_523);
        StorageDead(_511);
        StorageLive(_508);
        _508 = (_510.0: anchor_lang::prelude::Pubkey);
        StorageLive(_509);
        _509 = (_510.1: u8);
        StorageDead(_524);
        StorageDead(_521);
        StorageDead(_519);
        StorageDead(_517);
        StorageDead(_514);
        StorageDead(_513);
        StorageDead(_510);
        StorageLive(_525);
        _525 = _509;
        ((*_4).0: u8) = move _525;
        StorageDead(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = &_20;
        _529 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _530) -> [return: bb220, unwind: bb297];
    }

    bb220: {
        _528 = &_529;
        StorageDead(_530);
        StorageLive(_531);
        _531 = &_508;
        _527 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _528, move _531) -> [return: bb221, unwind: bb297];
    }

    bb221: {
        switchInt(move _527) -> [0: bb227, otherwise: bb222];
    }

    bb222: {
        StorageDead(_531);
        StorageDead(_529);
        StorageDead(_528);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        _536 = ConstraintSeeds;
        _535 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _536) -> [return: bb223, unwind: bb297];
    }

    bb223: {
        StorageDead(_536);
        _534 = anchor_lang::error::Error::with_account_name::<&str>(move _535, const "base_spot_market") -> [return: bb224, unwind: bb297];
    }

    bb224: {
        _649 = const true;
        StorageDead(_535);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        _539 = &_20;
        _538 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _539) -> [return: bb225, unwind: bb305];
    }

    bb225: {
        StorageDead(_539);
        StorageLive(_540);
        _540 = _508;
        _537 = (move _538, move _540);
        StorageDead(_540);
        StorageDead(_538);
        _649 = const false;
        _533 = anchor_lang::error::Error::with_pubkeys(move _534, move _537) -> [return: bb226, unwind: bb305];
    }

    bb226: {
        StorageDead(_537);
        _649 = const false;
        StorageDead(_534);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _533);
        StorageDead(_533);
        StorageDead(_527);
        StorageDead(_526);
        goto -> bb266;
    }

    bb227: {
        StorageDead(_531);
        StorageDead(_529);
        StorageDead(_528);
        _526 = const ();
        StorageDead(_527);
        StorageDead(_526);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        _550 = const b"spot_market";
        _549 = &(*_550);
        _548 = move _549 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_549);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        _554 = core::num::<impl u16>::to_le_bytes(const 0_u16) -> [return: bb228, unwind: bb297];
    }

    bb228: {
        _553 = &_554;
        _552 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _553) -> [return: bb229, unwind: bb297];
    }

    bb229: {
        _551 = &(*_552);
        StorageDead(_553);
        _547 = [move _548, move _551];
        StorageDead(_551);
        StorageDead(_548);
        _546 = &_547;
        _545 = &(*_546);
        _544 = move _545 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_545);
        StorageLive(_555);
        StorageLive(_556);
        _556 = &_1;
        _647 = deref_copy (*_556);
        _555 = &(*_647);
        _543 = anchor_lang::prelude::Pubkey::find_program_address(move _544, move _555) -> [return: bb230, unwind: bb297];
    }

    bb230: {
        StorageDead(_555);
        StorageDead(_544);
        StorageLive(_541);
        _541 = (_543.0: anchor_lang::prelude::Pubkey);
        StorageLive(_542);
        _542 = (_543.1: u8);
        StorageDead(_556);
        StorageDead(_554);
        StorageDead(_552);
        StorageDead(_550);
        StorageDead(_547);
        StorageDead(_546);
        StorageDead(_543);
        StorageLive(_557);
        _557 = _542;
        ((*_4).1: u8) = move _557;
        StorageDead(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        _562 = &_35;
        _561 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _562) -> [return: bb231, unwind: bb297];
    }

    bb231: {
        _560 = &_561;
        StorageDead(_562);
        StorageLive(_563);
        _563 = &_541;
        _559 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _560, move _563) -> [return: bb232, unwind: bb297];
    }

    bb232: {
        switchInt(move _559) -> [0: bb238, otherwise: bb233];
    }

    bb233: {
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_560);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _568 = ConstraintSeeds;
        _567 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _568) -> [return: bb234, unwind: bb297];
    }

    bb234: {
        StorageDead(_568);
        _566 = anchor_lang::error::Error::with_account_name::<&str>(move _567, const "quote_spot_market") -> [return: bb235, unwind: bb297];
    }

    bb235: {
        _648 = const true;
        StorageDead(_567);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        _571 = &_35;
        _570 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _571) -> [return: bb236, unwind: bb303];
    }

    bb236: {
        StorageDead(_571);
        StorageLive(_572);
        _572 = _541;
        _569 = (move _570, move _572);
        StorageDead(_572);
        StorageDead(_570);
        _648 = const false;
        _565 = anchor_lang::error::Error::with_pubkeys(move _566, move _569) -> [return: bb237, unwind: bb303];
    }

    bb237: {
        StorageDead(_569);
        _648 = const false;
        StorageDead(_566);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _565);
        StorageDead(_565);
        StorageDead(_559);
        StorageDead(_558);
        goto -> bb265;
    }

    bb238: {
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_560);
        _558 = const ();
        StorageDead(_559);
        StorageDead(_558);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        _578 = &_50;
        _577 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as AsRef<anchor_lang::prelude::Account<'_, state::state::State>>>::as_ref(move _578) -> [return: bb239, unwind: bb297];
    }

    bb239: {
        _576 = &(*_577);
        StorageDead(_578);
        _575 = <anchor_lang::prelude::Account<'_, state::state::State> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _576) -> [return: bb240, unwind: bb297];
    }

    bb240: {
        StorageDead(_576);
        _574 = ((*_575).6: bool);
        switchInt(move _574) -> [0: bb241, otherwise: bb244];
    }

    bb241: {
        StorageDead(_577);
        StorageDead(_575);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        _582 = ConstraintMut;
        _581 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _582) -> [return: bb242, unwind: bb297];
    }

    bb242: {
        StorageDead(_582);
        _580 = anchor_lang::error::Error::with_account_name::<&str>(move _581, const "state") -> [return: bb243, unwind: bb297];
    }

    bb243: {
        StorageDead(_581);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _580);
        StorageDead(_580);
        StorageDead(_574);
        StorageDead(_573);
        goto -> bb265;
    }

    bb244: {
        StorageDead(_577);
        StorageDead(_575);
        _573 = const ();
        StorageDead(_574);
        StorageDead(_573);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        _748 = (((_50.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _586 = &(*_748);
        _585 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _586) -> [return: bb245, unwind: bb297];
    }

    bb245: {
        StorageDead(_586);
        _584 = ((*_585).0: anchor_lang::prelude::Pubkey);
        StorageDead(_585);
        StorageLive(_587);
        StorageLive(_588);
        _588 = &_125;
        _587 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _588) -> [return: bb246, unwind: bb297];
    }

    bb246: {
        StorageDead(_588);
        StorageLive(_589);
        StorageLive(_590);
        _590 = &_584;
        StorageLive(_591);
        _591 = &_587;
        _589 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _590, move _591) -> [return: bb247, unwind: bb297];
    }

    bb247: {
        switchInt(move _589) -> [0: bb252, otherwise: bb248];
    }

    bb248: {
        StorageDead(_591);
        StorageDead(_590);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        _596 = ConstraintHasOne;
        _595 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _596) -> [return: bb249, unwind: bb297];
    }

    bb249: {
        StorageDead(_596);
        _594 = anchor_lang::error::Error::with_account_name::<&str>(move _595, const "state") -> [return: bb250, unwind: bb297];
    }

    bb250: {
        StorageDead(_595);
        StorageLive(_597);
        StorageLive(_598);
        _598 = _584;
        StorageLive(_599);
        _599 = _587;
        _597 = (move _598, move _599);
        StorageDead(_599);
        StorageDead(_598);
        _593 = anchor_lang::error::Error::with_pubkeys(move _594, move _597) -> [return: bb251, unwind: bb297];
    }

    bb251: {
        StorageDead(_597);
        StorageDead(_594);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _593);
        StorageDead(_593);
        StorageDead(_589);
        StorageDead(_587);
        StorageDead(_584);
        StorageDead(_583);
        goto -> bb265;
    }

    bb252: {
        StorageDead(_591);
        StorageDead(_590);
        _583 = const ();
        StorageDead(_589);
        StorageDead(_587);
        StorageDead(_584);
        StorageDead(_583);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _749 = (((_50.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _604 = &(*_749);
        _603 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _604) -> [return: bb253, unwind: bb297];
    }

    bb253: {
        StorageDead(_604);
        _602 = &((*_603).3: anchor_lang::prelude::Pubkey);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        _608 = &_95;
        _607 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _608) -> [return: bb254, unwind: bb297];
    }

    bb254: {
        StorageDead(_608);
        _606 = &_607;
        _605 = &(*_606);
        _601 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _602, move _605) -> [return: bb255, unwind: bb297];
    }

    bb255: {
        switchInt(move _601) -> [0: bb257, otherwise: bb256];
    }

    bb256: {
        StorageDead(_605);
        StorageDead(_602);
        StorageDead(_607);
        StorageDead(_606);
        StorageDead(_603);
        _600 = const ();
        StorageDead(_601);
        StorageDead(_600);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        _617 = &_125;
        _616 = &(*_617);
        _615 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _616) -> [return: bb260, unwind: bb297];
    }

    bb257: {
        StorageDead(_605);
        StorageDead(_602);
        StorageDead(_607);
        StorageDead(_606);
        StorageDead(_603);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        _612 = ConstraintRaw;
        _611 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _612) -> [return: bb258, unwind: bb297];
    }

    bb258: {
        StorageDead(_612);
        _610 = anchor_lang::error::Error::with_account_name::<&str>(move _611, const "drift_signer") -> [return: bb259, unwind: bb297];
    }

    bb259: {
        StorageDead(_611);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _610);
        StorageDead(_610);
        StorageDead(_601);
        StorageDead(_600);
        goto -> bb265;
    }

    bb260: {
        StorageDead(_616);
        _614 = ((*_615).6: bool);
        switchInt(move _614) -> [0: bb261, otherwise: bb264];
    }

    bb261: {
        StorageDead(_617);
        StorageDead(_615);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        _621 = ConstraintMut;
        _620 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _621) -> [return: bb262, unwind: bb297];
    }

    bb262: {
        StorageDead(_621);
        _619 = anchor_lang::error::Error::with_account_name::<&str>(move _620, const "admin") -> [return: bb263, unwind: bb297];
    }

    bb263: {
        StorageDead(_620);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _619);
        StorageDead(_619);
        StorageDead(_614);
        StorageDead(_613);
        goto -> bb265;
    }

    bb264: {
        StorageDead(_617);
        StorageDead(_615);
        _613 = const ();
        StorageDead(_614);
        StorageDead(_613);
        StorageLive(_622);
        StorageLive(_623);
        _623 = move _20;
        StorageLive(_624);
        _624 = move _35;
        StorageLive(_625);
        _625 = move _50;
        StorageLive(_626);
        _626 = move _65;
        StorageLive(_627);
        _627 = move _80;
        StorageLive(_628);
        _628 = move _95;
        StorageLive(_629);
        _629 = move _209;
        StorageLive(_630);
        _630 = move _125;
        StorageLive(_631);
        _631 = move _140;
        StorageLive(_632);
        _632 = move _155;
        _622 = admin::InitializeOpenbookV2FulfillmentConfig::<'_> { base_spot_market: move _623, quote_spot_market: move _624, state: move _625, openbook_v2_program: move _626, openbook_v2_market: move _627, drift_signer: move _628, openbook_v2_fulfillment_config: move _629, admin: move _630, rent: move _631, system_program: move _632 };
        StorageDead(_632);
        StorageDead(_631);
        StorageDead(_630);
        StorageDead(_629);
        StorageDead(_628);
        StorageDead(_627);
        StorageDead(_626);
        StorageDead(_625);
        StorageDead(_624);
        StorageDead(_623);
        _0 = std::result::Result::<admin::InitializeOpenbookV2FulfillmentConfig<'_>, anchor_lang::error::Error>::Ok(move _622);
        StorageDead(_622);
        StorageDead(_542);
        StorageDead(_541);
        StorageDead(_509);
        StorageDead(_508);
        StorageDead(_209);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_170);
        StorageDead(_155);
        StorageDead(_140);
        StorageDead(_125);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb290;
    }

    bb265: {
        StorageDead(_542);
        StorageDead(_541);
        goto -> bb266;
    }

    bb266: {
        StorageDead(_509);
        StorageDead(_508);
        goto -> bb276;
    }

    bb267: {
        StorageDead(_497);
        _650 = const false;
        StorageDead(_494);
        drop(_491) -> [return: bb268, unwind: bb297];
    }

    bb268: {
        StorageDead(_491);
        goto -> bb269;
    }

    bb269: {
        StorageDead(_487);
        StorageDead(_486);
        goto -> bb276;
    }

    bb270: {
        StorageDead(_437);
        StorageDead(_436);
        goto -> bb275;
    }

    bb271: {
        StorageDead(_337);
        _655 = const false;
        StorageDead(_334);
        goto -> bb272;
    }

    bb272: {
        StorageDead(_306);
        goto -> bb273;
    }

    bb273: {
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_222);
        goto -> bb274;
    }

    bb274: {
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb275;
    }

    bb275: {
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_210);
        goto -> bb276;
    }

    bb276: {
        StorageDead(_209);
        goto -> bb277;
    }

    bb277: {
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb278;
    }

    bb278: {
        StorageDead(_170);
        goto -> bb279;
    }

    bb279: {
        StorageDead(_155);
        goto -> bb280;
    }

    bb280: {
        StorageDead(_140);
        goto -> bb281;
    }

    bb281: {
        StorageDead(_125);
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb282;
    }

    bb282: {
        drop(_95) -> [return: bb283, unwind: bb298];
    }

    bb283: {
        StorageDead(_95);
        drop(_80) -> [return: bb284, unwind: bb299];
    }

    bb284: {
        StorageDead(_80);
        drop(_65) -> [return: bb285, unwind: bb300];
    }

    bb285: {
        StorageDead(_65);
        drop(_50) -> [return: bb286, unwind: bb301];
    }

    bb286: {
        StorageDead(_50);
        goto -> bb287;
    }

    bb287: {
        StorageDead(_35);
        goto -> bb288;
    }

    bb288: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb289;
    }

    bb289: {
        StorageDead(_6);
        goto -> bb290;
    }

    bb290: {
        return;
    }

    bb291 (cleanup): {
        drop(_497) -> [return: bb292, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        drop(_491) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb293 (cleanup): {
        drop(_470) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb294 (cleanup): {
        drop(_316) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb295 (cleanup): {
        drop(_289) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb296 (cleanup): {
        drop(_232) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb297 (cleanup): {
        drop(_95) -> [return: bb298, unwind terminate(cleanup)];
    }

    bb298 (cleanup): {
        drop(_80) -> [return: bb299, unwind terminate(cleanup)];
    }

    bb299 (cleanup): {
        drop(_65) -> [return: bb300, unwind terminate(cleanup)];
    }

    bb300 (cleanup): {
        drop(_50) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb301 (cleanup): {
        resume;
    }

    bb302 (cleanup): {
        drop(_566) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb303 (cleanup): {
        switchInt(_648) -> [0: bb297, otherwise: bb302];
    }

    bb304 (cleanup): {
        drop(_534) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb305 (cleanup): {
        switchInt(_649) -> [0: bb297, otherwise: bb304];
    }

    bb306 (cleanup): {
        _731 = discriminant(_494);
        goto -> bb291;
    }

    bb307 (cleanup): {
        drop(_445) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb308 (cleanup): {
        switchInt(_651) -> [0: bb297, otherwise: bb307];
    }

    bb309 (cleanup): {
        _732 = discriminant(_427);
        goto -> bb297;
    }

    bb310 (cleanup): {
        _733 = discriminant(_417);
        goto -> bb297;
    }

    bb311 (cleanup): {
        _734 = discriminant(_384);
        goto -> bb315;
    }

    bb312 (cleanup): {
        drop(_387) -> [return: bb315, unwind terminate(cleanup)];
    }

    bb313 (cleanup): {
        switchInt(_652) -> [0: bb315, otherwise: bb312];
    }

    bb314 (cleanup): {
        drop(_376) -> [return: bb320, unwind terminate(cleanup)];
    }

    bb315 (cleanup): {
        switchInt(_653) -> [0: bb320, otherwise: bb314];
    }

    bb316 (cleanup): {
        _735 = discriminant(_342);
        goto -> bb320;
    }

    bb317 (cleanup): {
        drop(_345) -> [return: bb320, unwind terminate(cleanup)];
    }

    bb318 (cleanup): {
        switchInt(_654) -> [0: bb320, otherwise: bb317];
    }

    bb319 (cleanup): {
        drop(_334) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb320 (cleanup): {
        switchInt(_655) -> [0: bb297, otherwise: bb319];
    }

    bb321 (cleanup): {
        _736 = discriminant(_325);
        goto -> bb323;
    }

    bb322 (cleanup): {
        drop(_315) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb323 (cleanup): {
        switchInt(_656) -> [0: bb297, otherwise: bb322];
    }

    bb324 (cleanup): {
        drop(_287) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb325 (cleanup): {
        switchInt(_657) -> [0: bb297, otherwise: bb324];
    }

    bb326 (cleanup): {
        _737 = discriminant(_241);
        goto -> bb330;
    }

    bb327 (cleanup): {
        drop(_244) -> [return: bb330, unwind terminate(cleanup)];
    }

    bb328 (cleanup): {
        switchInt(_658) -> [0: bb330, otherwise: bb327];
    }

    bb329 (cleanup): {
        drop(_231) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb330 (cleanup): {
        switchInt(_659) -> [0: bb297, otherwise: bb329];
    }

    bb331 (cleanup): {
        drop(_202) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb332 (cleanup): {
        switchInt(_660) -> [0: bb297, otherwise: bb331];
    }

    bb333 (cleanup): {
        _738 = discriminant(_171);
        goto -> bb297;
    }

    bb334 (cleanup): {
        _739 = discriminant(_156);
        goto -> bb297;
    }

    bb335 (cleanup): {
        _740 = discriminant(_141);
        goto -> bb297;
    }

    bb336 (cleanup): {
        _741 = discriminant(_126);
        goto -> bb297;
    }

    bb337 (cleanup): {
        _742 = discriminant(_96);
        goto -> bb298;
    }

    bb338 (cleanup): {
        _743 = discriminant(_81);
        goto -> bb299;
    }

    bb339 (cleanup): {
        _744 = discriminant(_66);
        goto -> bb300;
    }

    bb340 (cleanup): {
        _745 = discriminant(_51);
        goto -> bb301;
    }

    bb341 (cleanup): {
        _746 = discriminant(_36);
        goto -> bb301;
    }

    bb342 (cleanup): {
        _747 = discriminant(_21);
        goto -> bb301;
    }
}

alloc230 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}

alloc229 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}

alloc228 (size: 30, align: 1) {
    0x00 │ 6f 70 65 6e 62 6f 6f 6b 5f 76 32 5f 66 75 6c 66 │ openbook_v2_fulf
    0x10 │ 69 6c 6c 6d 65 6e 74 5f 63 6f 6e 66 69 67       │ illment_config
}

alloc227 (size: 30, align: 1) {
    0x00 │ 6f 70 65 6e 62 6f 6f 6b 5f 76 32 5f 66 75 6c 66 │ openbook_v2_fulf
    0x10 │ 69 6c 6c 6d 65 6e 74 5f 63 6f 6e 66 69 67       │ illment_config
}

alloc226 (size: 30, align: 1) {
    0x00 │ 6f 70 65 6e 62 6f 6f 6b 5f 76 32 5f 66 75 6c 66 │ openbook_v2_fulf
    0x10 │ 69 6c 6c 6d 65 6e 74 5f 63 6f 6e 66 69 67       │ illment_config
}

alloc225 (size: 30, align: 1) {
    0x00 │ 6f 70 65 6e 62 6f 6f 6b 5f 76 32 5f 66 75 6c 66 │ openbook_v2_fulf
    0x10 │ 69 6c 6c 6d 65 6e 74 5f 63 6f 6e 66 69 67       │ illment_config
}
