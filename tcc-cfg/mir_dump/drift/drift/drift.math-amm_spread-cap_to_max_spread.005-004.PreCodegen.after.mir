// MIR for `cap_to_max_spread` after PreCodegen

fn cap_to_max_spread(_1: u64, _2: u64, _3: u64) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug long_spread => _1;
    debug short_spread => _2;
    debug max_spread => _3;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u64;
    let _14: ();
    let mut _15: bool;
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: bool;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: u64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _23: std::result::Result<u64, error::ErrorCode>;
    let mut _24: u64;
    let mut _25: u64;
    let mut _26: u64;
    let mut _27: u64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: u64;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _35: std::result::Result<u64, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: u64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u64;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _45: std::result::Result<u64, error::ErrorCode>;
    let mut _46: u64;
    let mut _47: u64;
    let mut _48: u64;
    let mut _49: u64;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: u64;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _57: std::result::Result<u64, error::ErrorCode>;
    let mut _58: u64;
    let mut _59: u64;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _67: std::result::Result<u64, error::ErrorCode>;
    let mut _68: u64;
    let mut _69: u64;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _75: ();
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _77: std::result::Result<(), error::ErrorCode>;
    let mut _78: bool;
    let mut _79: u64;
    let mut _80: u64;
    let mut _81: ();
    let _83: ();
    let mut _84: &str;
    let _85: &str;
    let mut _86: &std::string::String;
    let _87: &std::string::String;
    let _88: std::string::String;
    let mut _90: std::fmt::Arguments<'_>;
    let mut _91: &[&str];
    let mut _92: &[&str; 2];
    let _93: &[&str; 2];
    let _94: [&str; 2];
    let mut _95: &[core::fmt::rt::Argument<'_>];
    let mut _96: &[core::fmt::rt::Argument<'_>; 1];
    let _97: &[core::fmt::rt::Argument<'_>; 1];
    let _98: [core::fmt::rt::Argument<'_>; 1];
    let mut _99: core::fmt::rt::Argument<'_>;
    let mut _100: &error::ErrorCode;
    let _101: &error::ErrorCode;
    let _102: ();
    let mut _103: &str;
    let _104: &str;
    let mut _105: &std::string::String;
    let _106: &std::string::String;
    let _107: std::string::String;
    let mut _109: std::fmt::Arguments<'_>;
    let mut _110: &[&str];
    let mut _111: &[&str; 3];
    let _112: &[&str; 3];
    let _113: [&str; 3];
    let mut _114: &[core::fmt::rt::Argument<'_>];
    let mut _115: &[core::fmt::rt::Argument<'_>; 2];
    let _116: &[core::fmt::rt::Argument<'_>; 2];
    let _117: [core::fmt::rt::Argument<'_>; 2];
    let mut _118: core::fmt::rt::Argument<'_>;
    let mut _119: &u64;
    let _120: &u64;
    let mut _121: core::fmt::rt::Argument<'_>;
    let mut _122: &u64;
    let _123: &u64;
    let mut _124: error::ErrorCode;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _130: (u64, u64);
    let mut _131: u64;
    let mut _132: u64;
    scope 1 {
        debug total_spread => _4;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: u64;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: u64;
        let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _54: u64;
        let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _64: u64;
        let _65: u64;
        let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _74: u64;
        scope 6 {
            debug residual => _29;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _32;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _39;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _42;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _51;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _54;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _61;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _64;
            scope 21 {
            }
        }
        scope 22 {
            debug new_total_spread => _65;
            let _82: error::ErrorCode;
            let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _129: ();
            scope 27 {
                debug error_code => _82;
                let _89: std::string::String;
                let _108: std::string::String;
                let mut _133: &[&str; 3];
                let mut _134: &[&str; 2];
                scope 28 {
                    debug res => _89;
                }
                scope 29 {
                    debug res => _108;
                }
            }
            scope 30 {
                debug residual => _126;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _129;
                scope 33 {
                }
            }
        }
        scope 23 {
            debug residual => _71;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _74;
            scope 26 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _1;
        StorageLive(_8);
        _8 = _2;
        _6 = <u64 as SafeMath>::safe_add(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: u64);
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _4;
        StorageLive(_17);
        _17 = _3;
        _15 = Gt(move _16, move _17);
        switchInt(move _15) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        goto -> bb62;
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _1;
        StorageLive(_20);
        _20 = _2;
        _18 = Gt(move _19, move _20);
        switchInt(move _18) -> [0: bb21, otherwise: bb9];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = const ();
        goto -> bb34;
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _1;
        StorageLive(_26);
        _26 = _3;
        _24 = core::num::<impl u64>::saturating_mul(move _25, move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_27);
        _27 = _4;
        _23 = <u64 as SafeMath>::safe_div_ceil(move _24, move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_27);
        StorageDead(_24);
        _22 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _23) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_23);
        _28 = discriminant(_22);
        switchInt(move _28) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_32);
        _32 = ((_22 as Continue).0: u64);
        _21 = _32;
        StorageDead(_32);
        _1 = move _21;
        StorageDead(_21);
        StorageDead(_22);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _3;
        StorageLive(_37);
        _37 = _1;
        _35 = <u64 as SafeMath>::safe_sub(move _36, move _37) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_21);
        StorageDead(_22);
        goto -> bb61;
    }

    bb16: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_35);
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_42);
        _42 = ((_34 as Continue).0: u64);
        _33 = _42;
        StorageDead(_42);
        _2 = move _33;
        StorageDead(_33);
        StorageDead(_34);
        _14 = const ();
        goto -> bb33;
    }

    bb19: {
        StorageLive(_39);
        _39 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_33);
        StorageDead(_34);
        goto -> bb61;
    }

    bb21: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _2;
        StorageLive(_48);
        _48 = _3;
        _46 = core::num::<impl u64>::saturating_mul(move _47, move _48) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_49);
        _49 = _4;
        _45 = <u64 as SafeMath>::safe_div_ceil(move _46, move _49) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_46);
        _44 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _45) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_45);
        _50 = discriminant(_44);
        switchInt(move _50) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_54);
        _54 = ((_44 as Continue).0: u64);
        _43 = _54;
        StorageDead(_54);
        _2 = move _43;
        StorageDead(_43);
        StorageDead(_44);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _3;
        StorageLive(_59);
        _59 = _2;
        _57 = <u64 as SafeMath>::safe_sub(move _58, move _59) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_51);
        _51 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_43);
        StorageDead(_44);
        goto -> bb61;
    }

    bb28: {
        StorageDead(_59);
        StorageDead(_58);
        _56 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _57) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_57);
        _60 = discriminant(_56);
        switchInt(move _60) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_64);
        _64 = ((_56 as Continue).0: u64);
        _55 = _64;
        StorageDead(_64);
        _1 = move _55;
        StorageDead(_55);
        StorageDead(_56);
        _14 = const ();
        goto -> bb33;
    }

    bb31: {
        StorageLive(_61);
        _61 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_55);
        StorageDead(_56);
        goto -> bb61;
    }

    bb33: {
        StorageDead(_18);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _1;
        StorageLive(_69);
        _69 = _2;
        _67 = <u64 as SafeMath>::safe_add(move _68, move _69) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_69);
        StorageDead(_68);
        _66 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _67) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_67);
        _70 = discriminant(_66);
        switchInt(move _70) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_74);
        _74 = ((_66 as Continue).0: u64);
        _65 = _74;
        StorageDead(_74);
        StorageDead(_66);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _65;
        StorageLive(_80);
        _80 = _3;
        _78 = Le(move _79, move _80);
        switchInt(move _78) -> [0: bb41, otherwise: bb40];
    }

    bb38: {
        StorageLive(_71);
        _71 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_66);
        goto -> bb60;
    }

    bb40: {
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_81);
        _81 = ();
        _77 = std::result::Result::<(), error::ErrorCode>::Ok(move _81);
        StorageDead(_81);
        goto -> bb55;
    }

    bb41: {
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_82);
        _82 = error::ErrorCode::InvalidAmmMaxSpreadDetected;
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _134 = const _;
        _93 = &(*_134);
        _92 = &(*_93);
        _91 = move _92 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_92);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_82;
        _100 = &(*_101);
        _99 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _100) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_100);
        _98 = [move _99];
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _95 = move _96 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_96);
        _90 = Arguments::<'_>::new_v1(move _91, move _95) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_95);
        StorageDead(_91);
        _89 = format(move _90) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_90);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_93);
        _88 = move _89;
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = <String as Deref>::deref(move _86) -> [return: bb45, unwind: bb65];
    }

    bb45: {
        _84 = &(*_85);
        StorageDead(_86);
        _83 = solana_program::log::sol_log(move _84) -> [return: bb46, unwind: bb65];
    }

    bb46: {
        StorageDead(_84);
        drop(_88) -> [return: bb47, unwind: bb66];
    }

    bb47: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _133 = const _;
        _112 = &(*_133);
        _111 = &(*_112);
        _110 = move _111 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_111);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_65;
        _119 = &(*_120);
        _118 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _119) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_119);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_3;
        _122 = &(*_123);
        _121 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _122) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_122);
        _117 = [move _118, move _121];
        StorageDead(_121);
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = move _115 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_115);
        _109 = Arguments::<'_>::new_v1(move _110, move _114) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_114);
        StorageDead(_110);
        _108 = format(move _109) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_109);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_112);
        _107 = move _108;
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = <String as Deref>::deref(move _105) -> [return: bb52, unwind: bb64];
    }

    bb52: {
        _103 = &(*_104);
        StorageDead(_105);
        _102 = solana_program::log::sol_log(move _103) -> [return: bb53, unwind: bb64];
    }

    bb53: {
        StorageDead(_103);
        drop(_107) -> [return: bb54, unwind: bb66];
    }

    bb54: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_124);
        _124 = _82;
        _77 = std::result::Result::<(), error::ErrorCode>::Err(move _124);
        StorageDead(_124);
        StorageDead(_82);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_78);
        _76 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _77) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_77);
        _125 = discriminant(_76);
        switchInt(move _125) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_129);
        _129 = ((_76 as Continue).0: ());
        _75 = _129;
        StorageDead(_129);
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_130);
        StorageLive(_131);
        _131 = _1;
        StorageLive(_132);
        _132 = _2;
        _130 = (move _131, move _132);
        StorageDead(_132);
        StorageDead(_131);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _130);
        StorageDead(_130);
        StorageDead(_65);
        StorageDead(_4);
        goto -> bb63;
    }

    bb58: {
        StorageLive(_126);
        _126 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_65);
        goto -> bb62;
    }

    bb61: {
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_4);
        goto -> bb63;
    }

    bb63: {
        return;
    }

    bb64 (cleanup): {
        drop(_107) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_88) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }
}
