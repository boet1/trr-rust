// MIR for `get_token_amount` before PreCodegen

fn get_token_amount(_1: u128, _2: &SpotMarket, _3: &SpotBalanceType) -> std::result::Result<u128, error::ErrorCode> {
    debug balance => _1;
    debug spot_market => _2;
    debug balance_type => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: u128;
    let mut _5: u32;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _7: std::result::Result<u32, error::ErrorCode>;
    let mut _8: u32;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u32;
    let mut _15: isize;
    let mut _17: isize;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: u128;
    let mut _24: u128;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _37: std::result::Result<u128, error::ErrorCode>;
    let mut _38: u128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: u128;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: u128;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: u128;
    scope 1 {
        debug precision_decrease => _4;
        let _14: u128;
        scope 6 {
            debug cumulative_interest => _14;
            let _16: u128;
            let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _29: u128;
            let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _35: u128;
            let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _47: u128;
            let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _53: u128;
            scope 7 {
                debug token_amount => _16;
            }
            scope 8 {
                debug residual => _26;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _29;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _32;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _35;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _44;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _47;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _50;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _53;
                scope 23 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_2).41: u32);
        _7 = <u32 as SafeMath>::safe_sub(const 19_u32, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: u32);
        _5 = _13;
        StorageDead(_13);
        _4 = core::num::<impl u128>::pow(const 10_u128, move _5) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_6);
        goto -> bb37;
    }

    bb7: {
        StorageDead(_5);
        StorageDead(_6);
        StorageLive(_14);
        _15 = discriminant((*_3));
        switchInt(move _15) -> [0: bb9, 1: bb8, otherwise: bb4];
    }

    bb8: {
        _14 = ((*_2).14: u128);
        goto -> bb10;
    }

    bb9: {
        _14 = ((*_2).13: u128);
        goto -> bb10;
    }

    bb10: {
        StorageLive(_16);
        _17 = discriminant((*_3));
        switchInt(move _17) -> [0: bb12, 1: bb11, otherwise: bb4];
    }

    bb11: {
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _1;
        StorageLive(_42);
        _42 = _14;
        _40 = <u128 as SafeMath>::safe_mul(move _41, move _42) -> [return: bb23, unwind continue];
    }

    bb12: {
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _1;
        StorageLive(_24);
        _24 = _14;
        _22 = <u128 as SafeMath>::safe_mul(move _23, move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_22);
        _25 = discriminant(_21);
        switchInt(move _25) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_29);
        _29 = ((_21 as Continue).0: u128);
        _20 = _29;
        StorageDead(_29);
        StorageLive(_30);
        _30 = _4;
        _19 = <u128 as SafeMath>::safe_div(move _20, move _30) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_26);
        _26 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb35;
    }

    bb18: {
        StorageDead(_30);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_19);
        _31 = discriminant(_18);
        switchInt(move _31) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_35);
        _35 = ((_18 as Continue).0: u128);
        _16 = _35;
        StorageDead(_35);
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb33;
    }

    bb21: {
        StorageLive(_32);
        _32 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb35;
    }

    bb23: {
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_40);
        _43 = discriminant(_39);
        switchInt(move _43) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_39 as Continue).0: u128);
        _38 = _47;
        StorageDead(_47);
        StorageLive(_48);
        _48 = _4;
        _37 = <u128 as SafeMath>::safe_div_ceil(move _38, move _48) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_44);
        _44 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb34;
    }

    bb28: {
        StorageDead(_48);
        StorageDead(_38);
        _36 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _37) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_37);
        _49 = discriminant(_36);
        switchInt(move _49) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_53);
        _53 = ((_36 as Continue).0: u128);
        _16 = _53;
        StorageDead(_53);
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb33;
    }

    bb31: {
        StorageLive(_50);
        _50 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_52);
        StorageDead(_50);
        goto -> bb34;
    }

    bb33: {
        StorageLive(_54);
        _54 = _16;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _54);
        StorageDead(_54);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_4);
        goto -> bb38;
    }

    bb34: {
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb36;
    }

    bb35: {
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_4);
        goto -> bb38;
    }

    bb38: {
        return;
    }
}
