digraph Mir_0_2260 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_perp_fuel_bonus(_1: &amp;ReErased state::perp_market::PerpMarket, _2: i128, _3: i64) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _4: u64;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: u128;<br align="left"/>let mut _7: i128;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _10: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _13: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _16: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _19: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _20: u128;<br align="left"/>let mut _21: i128;<br align="left"/>let mut _22: u128;<br align="left"/>let mut _23: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _24: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _25: i64;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: u128;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: u128;<br align="left"/>let mut _36: u128;<br align="left"/>let mut _37: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _38: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _39: u8;<br align="left"/>let mut _40: isize;<br align="left"/>let _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _42: !;<br align="left"/>let mut _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _44: u128;<br align="left"/>let mut _45: isize;<br align="left"/>let _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _47: !;<br align="left"/>let mut _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _49: u128;<br align="left"/>let mut _50: isize;<br align="left"/>let _51: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _52: !;<br align="left"/>let mut _53: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _54: u128;<br align="left"/>let mut _55: isize;<br align="left"/>let _56: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _57: !;<br align="left"/>let mut _58: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _59: u64;<br align="left"/>let mut _60: u64;<br align="left"/>let mut _61: bool;<br align="left"/>let mut _62: bool;<br align="left"/>let mut _63: u64;<br align="left"/>debug perp_market =&gt; _1;<br align="left"/>debug base_asset_value =&gt; _2;<br align="left"/>debug fuel_bonus_numerator =&gt; _3;<br align="left"/>debug result =&gt; _4;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug residual =&gt; _41;<br align="left"/>debug val =&gt; _44;<br align="left"/>debug residual =&gt; _46;<br align="left"/>debug val =&gt; _49;<br align="left"/>debug residual =&gt; _51;<br align="left"/>debug val =&gt; _54;<br align="left"/>debug residual =&gt; _56;<br align="left"/>debug val =&gt; _59;<br align="left"/>>;
    bb0__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _2<br/></td></tr><tr><td align="left">_6 = core::num::&lt;impl i128&gt;::unsigned_abs(move _7)</td></tr></table>>];
    bb1__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_5 = Lt(move _6, const _)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb2__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = const 0_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _2<br/></td></tr><tr><td align="left">_20 = core::num::&lt;impl i128&gt;::unsigned_abs(move _21)</td></tr></table>>];
    bb4__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = _3<br/></td></tr><tr><td align="left">_24 = &lt;i64 as Cast&gt;::cast::&lt;u128&gt;(move _25)</td></tr></table>>];
    bb5__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/></td></tr><tr><td align="left">_23 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _24)</td></tr></table>>];
    bb6__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_26 = discriminant(_23)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb7__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_23 as Continue).0: u128)<br/>_22 = _30<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_19 = &lt;u128 as SafeMath&gt;::safe_mul(move _20, move _22)</td></tr></table>>];
    bb8__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_23 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb10__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb12__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_31 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb13__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_18 as Continue).0: u128)<br/>_17 = _35<br/>StorageDead(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = ((*_1).28: u8)<br/></td></tr><tr><td align="left">_38 = &lt;u8 as Cast&gt;::cast::&lt;u128&gt;(move _39)</td></tr></table>>];
    bb14__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb15__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/></td></tr><tr><td align="left">_37 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _38)</td></tr></table>>];
    bb17__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_40 = discriminant(_37)<br/></td></tr><tr><td align="left">switchInt(move _40)</td></tr></table>>];
    bb18__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_37 as Continue).0: u128)<br/>_36 = _44<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">_16 = &lt;u128 as SafeMath&gt;::safe_mul(move _17, move _36)</td></tr></table>>];
    bb19__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_37 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_43)<br/>_43 = _41<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _43)</td></tr></table>>];
    bb20__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_41)<br/>StorageDead(_36)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb22__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_45 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb23__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_15 as Continue).0: u128)<br/>_14 = _49<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">_13 = &lt;u128 as SafeMath&gt;::safe_div(move _14, const _)</td></tr></table>>];
    bb24__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_48)<br/>_48 = _46<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _48)</td></tr></table>>];
    bb25__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb27__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_50 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _50)</td></tr></table>>];
    bb28__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_54)<br/>_54 = ((_12 as Continue).0: u128)<br/>_11 = _54<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_10 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _11)</td></tr></table>>];
    bb29__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_53)<br/>_53 = _51<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _53)</td></tr></table>>];
    bb30__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb32__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_55 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _55)</td></tr></table>>];
    bb33__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = ((_9 as Continue).0: u64)<br/>_8 = _59<br/>StorageDead(_59)<br/>StorageLive(_60)<br/>_61 = Eq(const 10_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _61, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb34__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_58)<br/>_58 = _56<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _58)</td></tr></table>>];
    bb35__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_60 = Div(const _, const 10_u64)<br/>_62 = Eq(_60, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _62, &quot;attempt to divide `{}` by zero&quot;, _8)</td></tr></table>>];
    bb37__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_4 = Div(move _8, move _60)<br/>StorageDead(_60)<br/>StorageDead(_8)<br/>StorageDead(_37)<br/>StorageDead(_23)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_63)<br/>_63 = _4<br/>_0 = std::result::Result::&lt;u64, error::ErrorCode&gt;::Ok(move _63)<br/>StorageDead(_63)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_2260 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2260 -> bb1__0_2260 [label="return"];
    bb1__0_2260 -> bb3__0_2260 [label="0"];
    bb1__0_2260 -> bb2__0_2260 [label="otherwise"];
    bb2__0_2260 -> bb38__0_2260 [label=""];
    bb3__0_2260 -> bb4__0_2260 [label="return"];
    bb4__0_2260 -> bb5__0_2260 [label="return"];
    bb5__0_2260 -> bb6__0_2260 [label="return"];
    bb6__0_2260 -> bb7__0_2260 [label="0"];
    bb6__0_2260 -> bb9__0_2260 [label="1"];
    bb6__0_2260 -> bb8__0_2260 [label="otherwise"];
    bb7__0_2260 -> bb11__0_2260 [label="return"];
    bb9__0_2260 -> bb10__0_2260 [label="return"];
    bb10__0_2260 -> bb42__0_2260 [label=""];
    bb11__0_2260 -> bb12__0_2260 [label="return"];
    bb12__0_2260 -> bb13__0_2260 [label="0"];
    bb12__0_2260 -> bb14__0_2260 [label="1"];
    bb12__0_2260 -> bb8__0_2260 [label="otherwise"];
    bb13__0_2260 -> bb16__0_2260 [label="return"];
    bb14__0_2260 -> bb15__0_2260 [label="return"];
    bb15__0_2260 -> bb42__0_2260 [label=""];
    bb16__0_2260 -> bb17__0_2260 [label="return"];
    bb17__0_2260 -> bb18__0_2260 [label="0"];
    bb17__0_2260 -> bb19__0_2260 [label="1"];
    bb17__0_2260 -> bb8__0_2260 [label="otherwise"];
    bb18__0_2260 -> bb21__0_2260 [label="return"];
    bb19__0_2260 -> bb20__0_2260 [label="return"];
    bb20__0_2260 -> bb39__0_2260 [label=""];
    bb21__0_2260 -> bb22__0_2260 [label="return"];
    bb22__0_2260 -> bb23__0_2260 [label="0"];
    bb22__0_2260 -> bb24__0_2260 [label="1"];
    bb22__0_2260 -> bb8__0_2260 [label="otherwise"];
    bb23__0_2260 -> bb26__0_2260 [label="return"];
    bb24__0_2260 -> bb25__0_2260 [label="return"];
    bb25__0_2260 -> bb39__0_2260 [label=""];
    bb26__0_2260 -> bb27__0_2260 [label="return"];
    bb27__0_2260 -> bb28__0_2260 [label="0"];
    bb27__0_2260 -> bb29__0_2260 [label="1"];
    bb27__0_2260 -> bb8__0_2260 [label="otherwise"];
    bb28__0_2260 -> bb31__0_2260 [label="return"];
    bb29__0_2260 -> bb30__0_2260 [label="return"];
    bb30__0_2260 -> bb40__0_2260 [label=""];
    bb31__0_2260 -> bb32__0_2260 [label="return"];
    bb32__0_2260 -> bb33__0_2260 [label="0"];
    bb32__0_2260 -> bb34__0_2260 [label="1"];
    bb32__0_2260 -> bb8__0_2260 [label="otherwise"];
    bb33__0_2260 -> bb36__0_2260 [label="success"];
    bb34__0_2260 -> bb35__0_2260 [label="return"];
    bb35__0_2260 -> bb41__0_2260 [label=""];
    bb36__0_2260 -> bb37__0_2260 [label="success"];
    bb37__0_2260 -> bb38__0_2260 [label=""];
    bb38__0_2260 -> bb44__0_2260 [label=""];
    bb39__0_2260 -> bb40__0_2260 [label=""];
    bb40__0_2260 -> bb41__0_2260 [label=""];
    bb41__0_2260 -> bb43__0_2260 [label=""];
    bb42__0_2260 -> bb43__0_2260 [label=""];
    bb43__0_2260 -> bb44__0_2260 [label=""];
}
