// MIR for `keeper::handle_update_user_gov_token_insurance_stake_devnet` after PreCodegen

fn keeper::handle_update_user_gov_token_insurance_stake_devnet(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdateUserGovTokenInsuranceStakeDevnet<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug gov_stake_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: !;
    let _5: !;
    let _6: !;
    let _7: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _8: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _10: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _11: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _12: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _13: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _19: u64;
    let mut _20: &mut state::user::UserStats;
    let mut _21: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _22: ();
    scope 1 {
        debug user_stats => _7;
    }
    scope 2 {
        debug residual => _15;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _18;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_6);
        _6 = begin_panic::<&str>(const "Devnet function is disabled on mainnet-beta") -> unwind continue;
    }
}
