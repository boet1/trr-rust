// MIR for `spot_market_map::<impl at programs/drift/src/state/spot_market_map.rs:24:1: 24:27>::load` before PreCodegen

fn spot_market_map::<impl at programs/drift/src/state/spot_market_map.rs:24:1: 24:27>::load(_1: &BTreeSet<u16>, _2: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>) -> std::result::Result<SpotMarketMap<'_>, error::ErrorCode> {
    debug writable_spot_markets => _1;
    debug account_info_iter => _2;
    let mut _0: std::result::Result<state::spot_market_map::SpotMarketMap<'_>, error::ErrorCode>;
    let mut _3: state::spot_market_map::SpotMarketMap<'_>;
    let mut _4: std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _5: std::collections::BTreeSet<u16>;
    let mut _6: &std::collections::BTreeSet<u16>;
    let _8: ();
    let mut _9: ();
    let mut _10: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _11: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _12: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _16: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _18: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _20: error::ErrorCode;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: ();
    let mut _28: bool;
    let mut _29: usize;
    let mut _30: &[u8];
    let _31: &&mut [u8];
    let mut _32: &std::cell::Ref<'_, &mut [u8]>;
    let mut _33: usize;
    let mut _34: !;
    let _38: &[u8];
    let mut _39: &[u8];
    let _40: &&mut [u8];
    let mut _41: &std::cell::Ref<'_, &mut [u8]>;
    let mut _42: std::ops::Range<usize>;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: usize;
    let mut _46: (usize, bool);
    let mut _47: &[u8];
    let _48: ();
    let mut _49: bool;
    let mut _50: &&[u8; 8];
    let mut _51: &&[u8; 8];
    let _52: &[u8; 8];
    let mut _53: !;
    let mut _55: [u8; 2];
    let mut _56: &[u8; 2];
    let _59: &[u8];
    let mut _60: &[u8];
    let _61: &&mut [u8];
    let mut _62: &std::cell::Ref<'_, &mut [u8]>;
    let mut _63: std::ops::Range<usize>;
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: usize;
    let mut _67: (usize, bool);
    let mut _68: &[u8];
    let _69: ();
    let mut _70: bool;
    let mut _71: &std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _72: &u16;
    let _73: &u16;
    let mut _74: !;
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: &std::string::String;
    let _79: &std::string::String;
    let _80: std::string::String;
    let mut _82: std::fmt::Arguments<'_>;
    let mut _83: &[&str];
    let mut _84: &[&str; 1];
    let _85: &[&str; 1];
    let _86: [&str; 1];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let mut _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: &[core::fmt::rt::Argument<'_>; 1];
    let _90: [core::fmt::rt::Argument<'_>; 1];
    let mut _91: core::fmt::rt::Argument<'_>;
    let mut _92: &u16;
    let _93: &u16;
    let mut _94: error::ErrorCode;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _97: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _98: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _99: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _108: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _109: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _110: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _111: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _112: error::ErrorCode;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _118: ();
    let mut _119: bool;
    let mut _120: &std::collections::BTreeSet<u16>;
    let mut _121: &u16;
    let _122: &u16;
    let mut _123: bool;
    let mut _124: !;
    let mut _125: error::ErrorCode;
    let _126: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _127: &mut std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _128: u16;
    let mut _129: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _130: !;
    let _131: ();
    let mut _132: !;
    let mut _133: state::spot_market_map::SpotMarketMap<'_>;
    let mut _135: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _136: &mut [u8];
    let mut _137: &mut [u8];
    let mut _138: &mut [u8];
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    scope 1 {
        debug spot_market_map => _3;
        let _7: [u8; 8];
        scope 2 {
            debug spot_market_discriminator => _7;
            scope 3 {
                debug account_info => _13;
                let _13: &&anchor_lang::prelude::AccountInfo<'_>;
                let _14: std::cell::Ref<'_, &mut [u8]>;
                let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _25: std::cell::Ref<'_, &mut [u8]>;
                scope 4 {
                    debug data => _14;
                    let _26: usize;
                    scope 9 {
                        debug expected_data_len => _26;
                        let _35: &[u8; 8];
                        let _36: usize;
                        scope 10 {
                            debug account_discriminator => _35;
                            let _54: u16;
                            let _57: usize;
                            scope 15 {
                                debug market_index => _54;
                                let _81: std::string::String;
                                let _95: &anchor_lang::prelude::AccountInfo<'_>;
                                let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _104: &anchor_lang::prelude::AccountInfo<'_>;
                                let mut _134: &[&str; 1];
                                scope 20 {
                                    debug res => _81;
                                }
                                scope 21 {
                                    debug account_info => _95;
                                    let _105: bool;
                                    scope 26 {
                                        debug is_writable => _105;
                                        let _106: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                                        let _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _117: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                                        scope 27 {
                                            debug account_loader => _106;
                                        }
                                        scope 28 {
                                            debug residual => _114;
                                            scope 29 {
                                            }
                                        }
                                        scope 30 {
                                            debug val => _117;
                                            scope 31 {
                                            }
                                        }
                                    }
                                }
                                scope 22 {
                                    debug residual => _101;
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug val => _104;
                                    scope 25 {
                                    }
                                }
                            }
                            scope 16 {
                                debug offset => _57;
                                let _58: &[u8];
                                scope 17 {
                                    debug slice => _58;
                                    scope 18 {
                                        scope 19 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 11 {
                            debug offset => _36;
                            let _37: &[u8];
                            scope 12 {
                                debug slice => _37;
                                scope 13 {
                                    scope 14 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 5 {
                    debug residual => _22;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _25;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = BTreeMap::<u16, anchor_lang::prelude::AccountLoader<'_, SpotMarket>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = <BTreeSet<u16> as Clone>::clone(move _6) -> [return: bb2, unwind: bb71];
    }

    bb2: {
        StorageDead(_6);
        _3 = SpotMarketMap::<'_>(move _4, move _5);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_7);
        _7 = <SpotMarket as anchor_lang::Discriminator>::discriminator() -> [return: bb3, unwind: bb70];
    }

    bb3: {
        StorageLive(_8);
        goto -> bb4;
    }

    bb4: {
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut (*_2);
        _10 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _11) -> [return: bb5, unwind: bb70];
    }

    bb5: {
        StorageDead(_11);
        _12 = discriminant(_10);
        switchInt(move _12) -> [1: bb6, otherwise: bb58];
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_10 as Some).0: &&anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _135 = deref_copy (*_13);
        _18 = &(*_135);
        _17 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _18) -> [return: bb7, unwind: bb70];
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = error::ErrorCode::CouldNotLoadSpotMarketData;
        _19 = std::result::Result::<Ref<'_, &mut [u8]>, error::ErrorCode>::Err(move _20);
        StorageDead(_20);
        _16 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::or::<error::ErrorCode>(move _17, move _19) -> [return: bb8, unwind: bb70];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb70];
    }

    bb9: {
        StorageDead(_16);
        _21 = discriminant(_15);
        switchInt(move _21) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_25);
        _25 = move ((_15 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _14 = move _25;
        StorageDead(_25);
        _141 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_26);
        _26 = const _;
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_14;
        _31 = <Ref<'_, &mut [u8]> as Deref>::deref(move _32) -> [return: bb14, unwind: bb69];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_22);
        _22 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<SpotMarketMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb13, unwind: bb73];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        _139 = discriminant(_15);
        StorageDead(_15);
        goto -> bb65;
    }

    bb14: {
        _136 = deref_copy (*_31);
        _30 = &(*_136);
        StorageDead(_32);
        _29 = core::slice::<impl [u8]>::len(move _30) -> [return: bb15, unwind: bb69];
    }

    bb15: {
        StorageDead(_30);
        StorageLive(_33);
        _33 = _26;
        _28 = Lt(move _29, move _33);
        switchInt(move _28) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        _8 = const ();
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb59;
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_35);
        StorageLive(_36);
        _36 = const 0_usize;
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_14;
        _40 = <Ref<'_, &mut [u8]> as Deref>::deref(move _41) -> [return: bb18, unwind: bb69];
    }

    bb18: {
        _137 = deref_copy (*_40);
        _39 = &(*_137);
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _36;
        StorageLive(_44);
        StorageLive(_45);
        _45 = _36;
        _46 = CheckedAdd(_45, const 8_usize);
        assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, const 8_usize) -> [success: bb19, unwind: bb69];
    }

    bb19: {
        _44 = move (_46.0: usize);
        StorageDead(_45);
        _42 = std::ops::Range::<usize> { start: move _43, end: move _44 };
        StorageDead(_44);
        StorageDead(_43);
        _38 = <[u8] as Index<std::ops::Range<usize>>>::index(move _39, move _42) -> [return: bb20, unwind: bb69];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_39);
        _37 = &(*_38);
        StorageLive(_47);
        _47 = &(*_37);
        _35 = SpotMarketMap::<'a>::load::as_array::<u8>(move _47) -> [return: bb21, unwind: bb69];
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_35;
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_7;
        _51 = &_52;
        _49 = <&[u8; 8] as PartialEq>::ne(move _50, move _51) -> [return: bb22, unwind: bb69];
    }

    bb22: {
        switchInt(move _49) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        _8 = const ();
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_35);
        goto -> bb59;
    }

    bb24: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        _48 = const ();
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = const 684_usize;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_14;
        _61 = <Ref<'_, &mut [u8]> as Deref>::deref(move _62) -> [return: bb25, unwind: bb69];
    }

    bb25: {
        _138 = deref_copy (*_61);
        _60 = &(*_138);
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _57;
        StorageLive(_65);
        StorageLive(_66);
        _66 = _57;
        _67 = CheckedAdd(_66, const 2_usize);
        assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", move _66, const 2_usize) -> [success: bb26, unwind: bb69];
    }

    bb26: {
        _65 = move (_67.0: usize);
        StorageDead(_66);
        _63 = std::ops::Range::<usize> { start: move _64, end: move _65 };
        StorageDead(_65);
        StorageDead(_64);
        _59 = <[u8] as Index<std::ops::Range<usize>>>::index(move _60, move _63) -> [return: bb27, unwind: bb69];
    }

    bb27: {
        StorageDead(_63);
        StorageDead(_60);
        _58 = &(*_59);
        StorageLive(_68);
        _68 = &(*_58);
        _56 = SpotMarketMap::<'a>::load::as_array::<u8>(move _68) -> [return: bb28, unwind: bb69];
    }

    bb28: {
        StorageDead(_68);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        _55 = (*_56);
        _54 = core::num::<impl u16>::from_le_bytes(move _55) -> [return: bb29, unwind: bb69];
    }

    bb29: {
        StorageDead(_55);
        StorageDead(_56);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(_3.0: std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_54;
        _72 = &(*_73);
        _70 = BTreeMap::<u16, anchor_lang::prelude::AccountLoader<'_, SpotMarket>>::contains_key::<u16>(move _71, move _72) -> [return: bb30, unwind: bb69];
    }

    bb30: {
        switchInt(move _70) -> [0: bb38, otherwise: bb31];
    }

    bb31: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _134 = const _;
        _85 = &(*_134);
        _84 = &(*_85);
        _83 = move _84 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_54;
        _92 = &(*_93);
        _91 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _92) -> [return: bb32, unwind: bb69];
    }

    bb32: {
        StorageDead(_92);
        _90 = [move _91];
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = move _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_88);
        _82 = Arguments::<'_>::new_v1(move _83, move _87) -> [return: bb33, unwind: bb69];
    }

    bb33: {
        StorageDead(_87);
        StorageDead(_83);
        _81 = format(move _82) -> [return: bb34, unwind: bb69];
    }

    bb34: {
        StorageDead(_82);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_85);
        _80 = move _81;
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = <String as Deref>::deref(move _78) -> [return: bb35, unwind: bb68];
    }

    bb35: {
        _76 = &(*_77);
        StorageDead(_78);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb36, unwind: bb68];
    }

    bb36: {
        StorageDead(_76);
        drop(_80) -> [return: bb37, unwind: bb69];
    }

    bb37: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_94);
        _94 = error::ErrorCode::InvalidSpotMarketAccount;
        _0 = std::result::Result::<SpotMarketMap<'_>, error::ErrorCode>::Err(move _94);
        StorageDead(_94);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb64;
    }

    bb38: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        _69 = const ();
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &mut (*_2);
        _98 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _99) -> [return: bb39, unwind: bb69];
    }

    bb39: {
        StorageDead(_99);
        _97 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _98) -> [return: bb40, unwind: bb69];
    }

    bb40: {
        StorageDead(_98);
        _96 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _97) -> [return: bb41, unwind: bb69];
    }

    bb41: {
        StorageDead(_97);
        _100 = discriminant(_96);
        switchInt(move _100) -> [0: bb42, 1: bb43, otherwise: bb11];
    }

    bb42: {
        StorageLive(_104);
        _104 = ((_96 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _95 = _104;
        StorageDead(_104);
        StorageDead(_96);
        StorageLive(_105);
        _105 = ((*_95).6: bool);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &(*_95);
        _109 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::try_from(move _110) -> [return: bb45, unwind: bb69];
    }

    bb43: {
        StorageLive(_101);
        _101 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<SpotMarketMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb44, unwind: bb69];
    }

    bb44: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_96);
        goto -> bb63;
    }

    bb45: {
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = error::ErrorCode::InvalidSpotMarketAccount;
        _111 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, error::ErrorCode>::Err(move _112);
        StorageDead(_112);
        _108 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _109, move _111) -> [return: bb46, unwind: bb69];
    }

    bb46: {
        StorageDead(_111);
        StorageDead(_109);
        _107 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _108) -> [return: bb47, unwind: bb69];
    }

    bb47: {
        StorageDead(_108);
        _113 = discriminant(_107);
        switchInt(move _113) -> [0: bb48, 1: bb49, otherwise: bb11];
    }

    bb48: {
        StorageLive(_117);
        _117 = move ((_107 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _106 = move _117;
        StorageDead(_117);
        StorageDead(_107);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &(*_1);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &_54;
        _121 = &(*_122);
        _119 = BTreeSet::<u16>::contains::<u16>(move _120, move _121) -> [return: bb51, unwind: bb69];
    }

    bb49: {
        StorageLive(_114);
        _114 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_116);
        _116 = _114;
        _0 = <std::result::Result<SpotMarketMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _116) -> [return: bb50, unwind: bb69];
    }

    bb50: {
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_107);
        goto -> bb62;
    }

    bb51: {
        switchInt(move _119) -> [0: bb54, otherwise: bb52];
    }

    bb52: {
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_123);
        _123 = _105;
        switchInt(move _123) -> [0: bb53, otherwise: bb55];
    }

    bb53: {
        StorageLive(_125);
        _125 = error::ErrorCode::SpotMarketWrongMutability;
        _0 = std::result::Result::<SpotMarketMap<'_>, error::ErrorCode>::Err(move _125);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb62;
    }

    bb54: {
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb55;
    }

    bb55: {
        _118 = const ();
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &mut (_3.0: std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>);
        StorageLive(_128);
        _128 = _54;
        StorageLive(_129);
        _129 = move _106;
        _126 = BTreeMap::<u16, anchor_lang::prelude::AccountLoader<'_, SpotMarket>>::insert(move _127, move _128, move _129) -> [return: bb56, unwind: bb69];
    }

    bb56: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        _9 = const ();
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_95);
        StorageDead(_54);
        StorageDead(_35);
        StorageDead(_26);
        drop(_14) -> [return: bb57, unwind: bb70];
    }

    bb57: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_10);
        goto -> bb4;
    }

    bb58: {
        StorageLive(_131);
        _8 = const ();
        StorageDead(_131);
        goto -> bb61;
    }

    bb59: {
        StorageDead(_26);
        drop(_14) -> [return: bb60, unwind: bb70];
    }

    bb60: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_133);
        _133 = move _3;
        _0 = std::result::Result::<SpotMarketMap<'_>, error::ErrorCode>::Ok(move _133);
        StorageDead(_133);
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb67;
    }

    bb62: {
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_95);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_54);
        StorageDead(_35);
        StorageDead(_26);
        drop(_14) -> [return: bb65, unwind: bb70];
    }

    bb65: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        drop(_3) -> [return: bb66, unwind: bb72];
    }

    bb66: {
        StorageDead(_3);
        goto -> bb67;
    }

    bb67: {
        return;
    }

    bb68 (cleanup): {
        drop(_80) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_14) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_3) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_4) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        resume;
    }

    bb73 (cleanup): {
        _143 = discriminant(_15);
        goto -> bb70;
    }
}
