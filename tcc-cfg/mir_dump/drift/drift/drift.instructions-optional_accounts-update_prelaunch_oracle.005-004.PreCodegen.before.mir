// MIR for `instructions::optional_accounts::update_prelaunch_oracle` before PreCodegen

fn instructions::optional_accounts::update_prelaunch_oracle(_1: &PerpMarket, _2: &OracleMap<'_>, _3: u64) -> std::result::Result<(), error::ErrorCode> {
    debug perp_market => _1;
    debug oracle_map => _2;
    debug slot => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &state::oracle::OracleSource;
    let mut _7: &state::oracle::OracleSource;
    let _8: state::oracle::OracleSource;
    let mut _9: !;
    let mut _10: ();
    let _11: anchor_lang::prelude::AccountInfo<'_>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _13: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _14: &state::oracle_map::OracleMap<'_>;
    let mut _15: &anchor_lang::prelude::Pubkey;
    let _16: &anchor_lang::prelude::Pubkey;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::oracle::PrelaunchOracle>>;
    let mut _24: std::result::Result<std::cell::RefMut<'_, state::oracle::PrelaunchOracle>, error::ErrorCode>;
    let mut _25: std::result::Result<std::cell::RefMut<'_, state::oracle::PrelaunchOracle>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::AccountInfo<'_>;
    let _27: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _28: std::result::Result<std::cell::RefMut<'_, state::oracle::PrelaunchOracle>, error::ErrorCode>;
    let mut _29: error::ErrorCode;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: ();
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _37: std::result::Result<(), error::ErrorCode>;
    let mut _38: &mut state::oracle::PrelaunchOracle;
    let mut _39: &mut state::oracle::PrelaunchOracle;
    let mut _40: &mut std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let mut _41: &state::perp_market::PerpMarket;
    let mut _42: u64;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: ();
    let mut _49: &state::oracle::OracleSource;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    scope 1 {
        debug oracle_account_info => _11;
        let mut _22: std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
        scope 6 {
            debug oracle => _22;
            let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _47: ();
            scope 11 {
                debug residual => _44;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _47;
                scope 14 {
                }
            }
        }
        scope 7 {
            debug residual => _31;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _34;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(((*_1).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        StorageLive(_7);
        _49 = const _;
        _7 = &(*_49);
        _5 = <state::oracle::OracleSource as PartialEq>::ne(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_10);
        _10 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb26;
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_2);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(((*_1).1: state::perp_market::AMM).0: anchor_lang::prelude::Pubkey);
        _15 = &(*_16);
        _13 = OracleMap::<'_>::get_account_info(move _14, move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _13) -> [return: bb5, unwind: bb29];
    }

    bb5: {
        StorageDead(_13);
        _17 = discriminant(_12);
        switchInt(move _17) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_21);
        _21 = move ((_12 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _11 = move _21;
        StorageDead(_21);
        _52 = discriminant(_12);
        StorageDead(_16);
        StorageDead(_12);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_11;
        _26 = &(*_27);
        _25 = load_ref_mut::<PrelaunchOracle>(move _26) -> [return: bb10, unwind: bb28];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_18);
        _18 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb9, unwind: bb31];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_18);
        _50 = discriminant(_12);
        StorageDead(_16);
        StorageDead(_12);
        goto -> bb25;
    }

    bb10: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        _29 = error::ErrorCode::UnableToLoadOracle;
        _28 = std::result::Result::<RefMut<'_, PrelaunchOracle>, error::ErrorCode>::Err(move _29);
        StorageDead(_29);
        _24 = std::result::Result::<RefMut<'_, PrelaunchOracle>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _25, move _28) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_25);
        _23 = <std::result::Result<RefMut<'_, PrelaunchOracle>, error::ErrorCode> as Try>::branch(move _24) -> [return: bb12, unwind: bb28];
    }

    bb12: {
        StorageDead(_24);
        _30 = discriminant(_23);
        switchInt(move _30) -> [0: bb13, 1: bb14, otherwise: bb7];
    }

    bb13: {
        StorageLive(_34);
        _34 = move ((_23 as Continue).0: std::cell::RefMut<'_, state::oracle::PrelaunchOracle>);
        _22 = move _34;
        StorageDead(_34);
        _56 = discriminant(_23);
        StorageDead(_27);
        StorageDead(_23);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &mut _22;
        _39 = <RefMut<'_, PrelaunchOracle> as DerefMut>::deref_mut(move _40) -> [return: bb16, unwind: bb27];
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_31);
        _54 = discriminant(_23);
        StorageDead(_27);
        StorageDead(_23);
        goto -> bb24;
    }

    bb16: {
        _38 = &mut (*_39);
        StorageDead(_40);
        StorageLive(_41);
        _41 = &(*_1);
        StorageLive(_42);
        _42 = _3;
        _37 = PrelaunchOracle::update(move _38, move _41, move _42) -> [return: bb17, unwind: bb27];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_38);
        _36 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _37) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        StorageDead(_37);
        _43 = discriminant(_36);
        switchInt(move _43) -> [0: bb19, 1: bb20, otherwise: bb7];
    }

    bb19: {
        StorageLive(_47);
        _47 = ((_36 as Continue).0: ());
        _35 = _47;
        StorageDead(_47);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_48);
        _48 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _48);
        StorageDead(_48);
        drop(_22) -> [return: bb22, unwind: bb28];
    }

    bb20: {
        StorageLive(_44);
        _44 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        drop(_22) -> [return: bb24, unwind: bb28];
    }

    bb22: {
        StorageDead(_22);
        drop(_11) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        StorageDead(_11);
        goto -> bb26;
    }

    bb24: {
        StorageDead(_22);
        drop(_11) -> [return: bb25, unwind: bb29];
    }

    bb25: {
        StorageDead(_11);
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_22) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_11) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        _58 = discriminant(_23);
        goto -> bb28;
    }

    bb31 (cleanup): {
        _59 = discriminant(_12);
        goto -> bb29;
    }
}
