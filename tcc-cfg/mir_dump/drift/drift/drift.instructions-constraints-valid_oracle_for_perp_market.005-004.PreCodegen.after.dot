digraph Mir_0_1160 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn constraints::valid_oracle_for_perp_market(_1: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _2: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _5: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _8: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _9: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _10: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _11: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _12: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _13: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _18: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _19: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _20: ();<br align="left"/>let _21: error::ErrorCode;<br align="left"/>let _22: ();<br align="left"/>let mut _23: &amp;ReErased str;<br align="left"/>let _24: &amp;ReErased str;<br align="left"/>let mut _25: &amp;ReErased std::string::String;<br align="left"/>let _26: &amp;ReErased std::string::String;<br align="left"/>let _27: std::string::String;<br align="left"/>let _28: std::string::String;<br align="left"/>let mut _29: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _30: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _31: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _32: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _33: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _34: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _35: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _36: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _37: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _38: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _39: &amp;ReErased error::ErrorCode;<br align="left"/>let _40: &amp;ReErased error::ErrorCode;<br align="left"/>let _41: ();<br align="left"/>let mut _42: &amp;ReErased str;<br align="left"/>let _43: &amp;ReErased str;<br align="left"/>let mut _44: error::ErrorCode;<br align="left"/>let mut _45: isize;<br align="left"/>let _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _47: !;<br align="left"/>let mut _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _49: ();<br align="left"/>let mut _50: ();<br align="left"/>let mut _51: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _52: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: isize;<br align="left"/>let mut _56: isize;<br align="left"/>let mut _57: isize;<br align="left"/>let mut _58: isize;<br align="left"/>let mut _59: isize;<br align="left"/>let mut _60: isize;<br align="left"/>let mut _61: isize;<br align="left"/>debug oracle =&gt; _1;<br align="left"/>debug market =&gt; _2;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>debug error_code =&gt; _21;<br align="left"/>debug res =&gt; _28;<br align="left"/>debug residual =&gt; _46;<br align="left"/>debug val =&gt; _49;<br align="left"/>>;
    bb0__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_54 = const false<br/>_53 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;(*_2)<br/></td></tr><tr><td align="left">_12 = anchor_lang::prelude::AccountLoader::&lt;'_, PerpMarket&gt;::load(move _13)</td></tr></table>>];
    bb1__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _12)</td></tr></table>>];
    bb2__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_53 = const true<br/>_54 = const true<br/>StorageDead(_12)<br/>_14 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb3__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = move ((_11 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_10 = move _18<br/>StorageDead(_18)<br/>_9 = &amp;_10<br/></td></tr><tr><td align="left">_8 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _9)</td></tr></table>>];
    bb4__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = move ((_11 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_17)<br/>_17 = move _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb6__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_9)<br/>_59 = discriminant(_11)<br/>_53 = const false<br/>_54 = const false<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_7 = &amp;(((*_8).1: state::perp_market::AMM).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_19)<br/>_52 = deref_copy ((*_1).0: &amp;anchor_lang::prelude::Pubkey)<br/>_19 = &amp;(*_52)<br/></td></tr><tr><td align="left">_6 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _7, move _19)</td></tr></table>>];
    bb8__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb9__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/></td></tr><tr><td align="left">drop(_10)</td></tr></table>>];
    bb10__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/></td></tr><tr><td align="left">drop(_10)</td></tr></table>>];
    bb11__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>_37 = [move _38]<br/>StorageDead(_38)<br/>_36 = &amp;_37<br/>_35 = &amp;(*_36)<br/>_34 = move _35 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_29 = Arguments::&lt;'_&gt;::new_v1(move _30, move _34)</td></tr></table>>];
    bb12__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_28 = format(move _29)</td></tr></table>>];
    bb13__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_40)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_32)<br/>_27 = move _28<br/>StorageDead(_28)<br/>_26 = &amp;_27<br/>_25 = &amp;(*_26)<br/></td></tr><tr><td align="left">_24 = &lt;String as Deref&gt;::deref(move _25)</td></tr></table>>];
    bb14__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_23 = &amp;(*_24)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_22 = solana_program::log::sol_log(move _23)</td></tr></table>>];
    bb15__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/></td></tr><tr><td align="left">drop(_27)</td></tr></table>>];
    bb16__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = const &quot;not valid_oracle_for_perp_market&quot;<br/>_42 = &amp;(*_43)<br/></td></tr><tr><td align="left">_41 = solana_program::log::sol_log(move _42)</td></tr></table>>];
    bb17__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_43)<br/>StorageDead(_41)<br/>StorageLive(_44)<br/>_44 = _21<br/>_5 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _44)<br/>StorageDead(_44)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb19__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_45 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb20__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_4 as Continue).0: ())<br/>_3 = _49<br/>StorageDead(_49)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_50)<br/>_50 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _50)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_48)<br/>_48 = _46<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _48)</td></tr></table>>];
    bb22__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left">return</td></tr></table>>];
    bb25__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">25 (cleanup)</td></tr><tr><td align="left">drop(_27)</td></tr></table>>];
    bb26__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">26 (cleanup)</td></tr><tr><td align="left">drop(_10)</td></tr></table>>];
    bb27__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">27 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb28__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_55 = discriminant(_11)<br/>_53 = const false<br/>_54 = const false<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_20)<br/>_20 = ()<br/>_5 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _20)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_57 = discriminant(_11)<br/>_53 = const false<br/>_54 = const false<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_21)<br/>_21 = error::ErrorCode::InvalidOracle<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_51 = const _<br/>_32 = &amp;(*_51)<br/>_31 = &amp;(*_32)<br/>_30 = move _31 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_31)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = &amp;_21<br/>_39 = &amp;(*_40)<br/></td></tr><tr><td align="left">_38 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _39)</td></tr></table>>];
    bb30__0_1160 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">30 (cleanup)</td></tr><tr><td align="left" balign="left">_61 = discriminant(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1160 -> bb1__0_1160 [label="return"];
    bb1__0_1160 -> bb2__0_1160 [label="return"];
    bb1__0_1160 -> bb27__0_1160 [label="unwind"];
    bb2__0_1160 -> bb3__0_1160 [label="0"];
    bb2__0_1160 -> bb5__0_1160 [label="1"];
    bb2__0_1160 -> bb4__0_1160 [label="otherwise"];
    bb3__0_1160 -> bb7__0_1160 [label="return"];
    bb3__0_1160 -> bb26__0_1160 [label="unwind"];
    bb5__0_1160 -> bb6__0_1160 [label="return"];
    bb5__0_1160 -> bb30__0_1160 [label="unwind"];
    bb6__0_1160 -> bb23__0_1160 [label=""];
    bb7__0_1160 -> bb8__0_1160 [label="return"];
    bb7__0_1160 -> bb26__0_1160 [label="unwind"];
    bb8__0_1160 -> bb10__0_1160 [label="0"];
    bb8__0_1160 -> bb9__0_1160 [label="otherwise"];
    bb9__0_1160 -> bb28__0_1160 [label="return"];
    bb9__0_1160 -> bb30__0_1160 [label="unwind"];
    bb10__0_1160 -> bb29__0_1160 [label="return"];
    bb10__0_1160 -> bb30__0_1160 [label="unwind"];
    bb11__0_1160 -> bb12__0_1160 [label="return"];
    bb12__0_1160 -> bb13__0_1160 [label="return"];
    bb13__0_1160 -> bb14__0_1160 [label="return"];
    bb13__0_1160 -> bb25__0_1160 [label="unwind"];
    bb14__0_1160 -> bb15__0_1160 [label="return"];
    bb14__0_1160 -> bb25__0_1160 [label="unwind"];
    bb15__0_1160 -> bb16__0_1160 [label="return"];
    bb15__0_1160 -> bb27__0_1160 [label="unwind"];
    bb16__0_1160 -> bb17__0_1160 [label="return"];
    bb17__0_1160 -> bb18__0_1160 [label=""];
    bb18__0_1160 -> bb19__0_1160 [label="return"];
    bb19__0_1160 -> bb20__0_1160 [label="0"];
    bb19__0_1160 -> bb21__0_1160 [label="1"];
    bb19__0_1160 -> bb4__0_1160 [label="otherwise"];
    bb20__0_1160 -> bb24__0_1160 [label=""];
    bb21__0_1160 -> bb22__0_1160 [label="return"];
    bb22__0_1160 -> bb23__0_1160 [label=""];
    bb23__0_1160 -> bb24__0_1160 [label=""];
    bb25__0_1160 -> bb27__0_1160 [label="return"];
    bb26__0_1160 -> bb30__0_1160 [label="return"];
    bb28__0_1160 -> bb18__0_1160 [label=""];
    bb29__0_1160 -> bb11__0_1160 [label="return"];
    bb30__0_1160 -> bb27__0_1160 [label=""];
}
