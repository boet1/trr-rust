// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:912:23: 912:32>::eq` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:912:23: 912:32>::eq(_1: &PoolBalance, _2: &PoolBalance) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u128;
    let mut _5: u128;
    let mut _6: bool;
    let mut _7: u16;
    let mut _8: u16;
    let mut _9: &[u8; 6];
    let mut _10: &[u8; 6];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: u128);
        StorageLive(_5);
        _5 = ((*_2).0: u128);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u16);
        StorageLive(_8);
        _8 = ((*_2).1: u16);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        _9 = &((*_1).2: [u8; 6]);
        StorageLive(_10);
        _10 = &((*_2).2: [u8; 6]);
        _0 = <[u8; 6] as PartialEq>::eq(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb5;
    }

    bb5: {
        _0 = const false;
        goto -> bb7;
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
