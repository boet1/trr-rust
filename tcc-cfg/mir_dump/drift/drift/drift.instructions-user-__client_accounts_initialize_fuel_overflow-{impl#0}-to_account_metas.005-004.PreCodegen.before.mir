// MIR for `instructions::user::__client_accounts_initialize_fuel_overflow::<impl at programs/drift/src/instructions/user.rs:4052:10: 4052:18>::to_account_metas` before PreCodegen

fn instructions::user::__client_accounts_initialize_fuel_overflow::<impl at programs/drift/src/instructions/user.rs:4052:10: 4052:18>::to_account_metas(_1: &instructions::user::__client_accounts_initialize_fuel_overflow::InitializeFuelOverflow, _2: Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let _8: ();
    let mut _9: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _10: anchor_lang::prelude::AccountMeta;
    let mut _11: anchor_lang::prelude::Pubkey;
    let _12: ();
    let mut _13: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _14: anchor_lang::prelude::AccountMeta;
    let mut _15: anchor_lang::prelude::Pubkey;
    let _16: ();
    let mut _17: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _18: anchor_lang::prelude::AccountMeta;
    let mut _19: anchor_lang::prelude::Pubkey;
    let _20: ();
    let mut _21: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _22: anchor_lang::prelude::AccountMeta;
    let mut _23: anchor_lang::prelude::Pubkey;
    let _24: ();
    let mut _25: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _26: anchor_lang::prelude::AccountMeta;
    let mut _27: anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = anchor_lang::prelude::AccountMeta::new(move _7, const false) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _3;
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).1: anchor_lang::prelude::Pubkey);
        _10 = anchor_lang::prelude::AccountMeta::new(move _11, const false) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        StorageDead(_11);
        _8 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _9, move _10) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _3;
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).2: anchor_lang::prelude::Pubkey);
        _14 = anchor_lang::prelude::AccountMeta::new_readonly(move _15, const false) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        StorageDead(_15);
        _12 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _13, move _14) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut _3;
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).3: anchor_lang::prelude::Pubkey);
        _18 = anchor_lang::prelude::AccountMeta::new(move _19, const true) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        StorageDead(_19);
        _16 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _17, move _18) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _3;
        StorageLive(_22);
        StorageLive(_23);
        _23 = ((*_1).4: anchor_lang::prelude::Pubkey);
        _22 = anchor_lang::prelude::AccountMeta::new_readonly(move _23, const false) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        StorageDead(_23);
        _20 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _21, move _22) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut _3;
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_1).5: anchor_lang::prelude::Pubkey);
        _26 = anchor_lang::prelude::AccountMeta::new_readonly(move _27, const false) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        StorageDead(_27);
        _24 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _25, move _26) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}
