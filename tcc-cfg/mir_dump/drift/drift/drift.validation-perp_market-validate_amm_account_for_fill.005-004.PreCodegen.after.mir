// MIR for `validate_amm_account_for_fill` after PreCodegen

fn validate_amm_account_for_fill(_1: &AMM, _2: controller::position::PositionDirection) -> std::result::Result<(), error::ErrorCode> {
    debug amm => _1;
    debug direction => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &controller::position::PositionDirection;
    let mut _6: &controller::position::PositionDirection;
    let _7: controller::position::PositionDirection;
    let _8: ();
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _10: std::result::Result<(), error::ErrorCode>;
    let mut _11: bool;
    let mut _12: u128;
    let mut _13: u128;
    let mut _14: ();
    let _15: error::ErrorCode;
    let _16: ();
    let mut _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[&str; 2];
    let _26: &[&str; 2];
    let _27: [&str; 2];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let mut _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &error::ErrorCode;
    let _34: &error::ErrorCode;
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: &std::string::String;
    let _39: &std::string::String;
    let _40: std::string::String;
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[&str; 2];
    let _45: &[&str; 2];
    let _46: [&str; 2];
    let mut _47: &[core::fmt::rt::Argument<'_>];
    let mut _48: &[core::fmt::rt::Argument<'_>; 2];
    let _49: &[core::fmt::rt::Argument<'_>; 2];
    let _50: [core::fmt::rt::Argument<'_>; 2];
    let mut _51: core::fmt::rt::Argument<'_>;
    let mut _52: &u128;
    let _53: &u128;
    let mut _54: core::fmt::rt::Argument<'_>;
    let mut _55: &u128;
    let _56: &u128;
    let mut _57: error::ErrorCode;
    let mut _58: isize;
    let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _62: ();
    let _63: ();
    let mut _64: bool;
    let mut _65: &controller::position::PositionDirection;
    let mut _66: &controller::position::PositionDirection;
    let _67: controller::position::PositionDirection;
    let _68: ();
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _70: std::result::Result<(), error::ErrorCode>;
    let mut _71: bool;
    let mut _72: u128;
    let mut _73: u128;
    let mut _74: ();
    let _75: error::ErrorCode;
    let _76: ();
    let mut _77: &str;
    let _78: &str;
    let mut _79: &std::string::String;
    let _80: &std::string::String;
    let _81: std::string::String;
    let mut _83: std::fmt::Arguments<'_>;
    let mut _84: &[&str];
    let mut _85: &[&str; 2];
    let _86: &[&str; 2];
    let _87: [&str; 2];
    let mut _88: &[core::fmt::rt::Argument<'_>];
    let mut _89: &[core::fmt::rt::Argument<'_>; 1];
    let _90: &[core::fmt::rt::Argument<'_>; 1];
    let _91: [core::fmt::rt::Argument<'_>; 1];
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: &error::ErrorCode;
    let _94: &error::ErrorCode;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: error::ErrorCode;
    let mut _99: isize;
    let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _103: ();
    let mut _104: ();
    let mut _106: &controller::position::PositionDirection;
    let mut _109: &controller::position::PositionDirection;
    scope 1 {
        debug error_code => _15;
        let _22: std::string::String;
        let _41: std::string::String;
        let mut _107: &[&str; 2];
        let mut _108: &[&str; 2];
        scope 2 {
            debug res => _22;
        }
        scope 3 {
            debug res => _41;
        }
    }
    scope 4 {
        debug residual => _59;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _62;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _75;
        let _82: std::string::String;
        let mut _105: &[&str; 2];
        scope 9 {
            debug res => _82;
        }
    }
    scope 10 {
        debug residual => _100;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _103;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_2;
        StorageLive(_6);
        _109 = const _;
        _6 = &(*_109);
        _4 = <controller::position::PositionDirection as PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb24, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = ((*_1).5: u128);
        StorageLive(_13);
        _13 = ((*_1).8: u128);
        _11 = Ge(move _12, move _13);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_14);
        _14 = ();
        _10 = std::result::Result::<(), error::ErrorCode>::Ok(move _14);
        StorageDead(_14);
        goto -> bb18;
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_15);
        _15 = error::ErrorCode::InvalidAmmForFillDetected;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _108 = const _;
        _26 = &(*_108);
        _25 = &(*_26);
        _24 = move _25 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_15;
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _33) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_33);
        _31 = [move _32];
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = move _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_29);
        _23 = Arguments::<'_>::new_v1(move _24, move _28) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = format(move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        _21 = move _22;
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <String as Deref>::deref(move _19) -> [return: bb8, unwind: bb47];
    }

    bb8: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = solana_program::log::sol_log(move _17) -> [return: bb9, unwind: bb47];
    }

    bb9: {
        StorageDead(_17);
        drop(_21) -> [return: bb10, unwind: bb48];
    }

    bb10: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _107 = const _;
        _45 = &(*_107);
        _44 = &(*_45);
        _43 = move _44 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &((*_1).5: u128);
        _52 = &(*_53);
        _51 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _52) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &((*_1).8: u128);
        _55 = &(*_56);
        _54 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _55) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_55);
        _50 = [move _51, move _54];
        StorageDead(_54);
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = move _48 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_48);
        _42 = Arguments::<'_>::new_v1(move _43, move _47) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_47);
        StorageDead(_43);
        _41 = format(move _42) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_42);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_45);
        _40 = move _41;
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = <String as Deref>::deref(move _38) -> [return: bb15, unwind: bb46];
    }

    bb15: {
        _36 = &(*_37);
        StorageDead(_38);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb16, unwind: bb46];
    }

    bb16: {
        StorageDead(_36);
        drop(_40) -> [return: bb17, unwind: bb48];
    }

    bb17: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_57);
        _57 = _15;
        _10 = std::result::Result::<(), error::ErrorCode>::Err(move _57);
        StorageDead(_57);
        StorageDead(_15);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_11);
        _9 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _10) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_10);
        _58 = discriminant(_9);
        switchInt(move _58) -> [0: bb20, 1: bb22, otherwise: bb21];
    }

    bb20: {
        StorageLive(_62);
        _62 = ((_9 as Continue).0: ());
        _8 = _62;
        StorageDead(_62);
        StorageDead(_9);
        StorageDead(_8);
        _3 = const ();
        goto -> bb25;
    }

    bb21: {
        unreachable;
    }

    bb22: {
        StorageLive(_59);
        _59 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb44;
    }

    bb24: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        goto -> bb25;
    }

    bb25: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_2;
        StorageLive(_66);
        _106 = const _;
        _66 = &(*_106);
        _64 = <controller::position::PositionDirection as PartialEq>::eq(move _65, move _66) -> [return: bb26, unwind continue];
    }

    bb26: {
        switchInt(move _64) -> [0: bb42, otherwise: bb27];
    }

    bb27: {
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = ((*_1).5: u128);
        StorageLive(_73);
        _73 = ((*_1).9: u128);
        _71 = Le(move _72, move _73);
        switchInt(move _71) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_74);
        _74 = ();
        _70 = std::result::Result::<(), error::ErrorCode>::Ok(move _74);
        StorageDead(_74);
        goto -> bb37;
    }

    bb29: {
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_75);
        _75 = error::ErrorCode::InvalidAmmForFillDetected;
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _105 = const _;
        _86 = &(*_105);
        _85 = &(*_86);
        _84 = move _85 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_85);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_75;
        _93 = &(*_94);
        _92 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _93) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_93);
        _91 = [move _92];
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = move _89 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_89);
        _83 = Arguments::<'_>::new_v1(move _84, move _88) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_88);
        StorageDead(_84);
        _82 = format(move _83) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_83);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        _81 = move _82;
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = <String as Deref>::deref(move _79) -> [return: bb33, unwind: bb45];
    }

    bb33: {
        _77 = &(*_78);
        StorageDead(_79);
        _76 = solana_program::log::sol_log(move _77) -> [return: bb34, unwind: bb45];
    }

    bb34: {
        StorageDead(_77);
        drop(_81) -> [return: bb35, unwind: bb48];
    }

    bb35: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = const "Market baa above max_base_asset_reserve";
        _96 = &(*_97);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_96);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_98);
        _98 = _75;
        _70 = std::result::Result::<(), error::ErrorCode>::Err(move _98);
        StorageDead(_98);
        StorageDead(_75);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_71);
        _69 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _70) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_70);
        _99 = discriminant(_69);
        switchInt(move _99) -> [0: bb39, 1: bb40, otherwise: bb21];
    }

    bb39: {
        StorageLive(_103);
        _103 = ((_69 as Continue).0: ());
        _68 = _103;
        StorageDead(_103);
        StorageDead(_69);
        StorageDead(_68);
        _63 = const ();
        goto -> bb43;
    }

    bb40: {
        StorageLive(_100);
        _100 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb44;
    }

    bb42: {
        StorageDead(_66);
        StorageDead(_65);
        _63 = const ();
        goto -> bb43;
    }

    bb43: {
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_104);
        _104 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _104);
        StorageDead(_104);
        goto -> bb44;
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        drop(_81) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_40) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_21) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        resume;
    }
}
