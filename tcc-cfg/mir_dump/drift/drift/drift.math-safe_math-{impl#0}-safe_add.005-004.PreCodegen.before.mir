// MIR for `safe_math::<impl at programs/drift/src/math/safe_math.rs:18:9: 18:29>::safe_add` before PreCodegen

fn safe_math::<impl at programs/drift/src/math/safe_math.rs:18:9: 18:29>::safe_add(_1: U256, _2: U256) -> std::result::Result<U256, error::ErrorCode> {
    debug self => _1;
    debug v => _2;
    let mut _0: std::result::Result<math::bn::U256, error::ErrorCode>;
    let mut _3: std::option::Option<math::bn::U256>;
    let mut _4: math::bn::U256;
    let mut _5: math::bn::U256;
    let mut _6: isize;
    let _7: math::bn::U256;
    let mut _8: math::bn::U256;
    let _9: &std::panic::Location<'_>;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 2];
    let _24: &[core::fmt::rt::Argument<'_>; 2];
    let _25: [core::fmt::rt::Argument<'_>; 2];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &&str;
    let _28: &&str;
    let _29: &str;
    let mut _30: &std::panic::Location<'_>;
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &u32;
    let _33: &u32;
    let _34: u32;
    let mut _35: &std::panic::Location<'_>;
    let mut _36: error::ErrorCode;
    scope 1 {
        debug result => _7;
    }
    scope 2 {
        debug caller => _9;
        let _16: std::string::String;
        let mut _37: &[&str; 2];
        scope 3 {
            debug res => _16;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        StorageLive(_5);
        _5 = _2;
        _3 = U256::checked_add(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        StorageLive(_9);
        _9 = Location::<'_>::caller() -> [return: bb5, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_7);
        _7 = ((_3 as Some).0: math::bn::U256);
        StorageLive(_8);
        _8 = _7;
        _0 = std::result::Result::<U256, error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb15;
    }

    bb5: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _37 = const _;
        _20 = &(*_37);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_9);
        _29 = Location::<'_>::file(move _30) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _27) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_27);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(*_9);
        _34 = Location::<'_>::line(move _35) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _32) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_32);
        _25 = [move _26, move _31];
        StorageDead(_31);
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_17);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        StorageDead(_11);
        drop(_15) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_36);
        _36 = error::ErrorCode::MathError;
        _0 = std::result::Result::<U256, error::ErrorCode>::Err(move _36);
        StorageDead(_36);
        StorageDead(_9);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_3);
        return;
    }

    bb16 (cleanup): {
        drop(_15) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}
