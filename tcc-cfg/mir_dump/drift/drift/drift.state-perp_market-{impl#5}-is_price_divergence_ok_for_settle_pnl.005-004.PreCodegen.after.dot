digraph Mir_0_3805 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PerpMarket::is_price_divergence_ok_for_settle_pnl(_1: &amp;ReErased state::perp_market::PerpMarket, _2: i64) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _3: u64;<br align="left"/>let mut _4: i64;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _6: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _7: i64;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _9: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _10: i64;<br align="left"/>let mut _11: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _12: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _13: i64;<br align="left"/>let mut _14: i64;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _19: i64;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _24: i64;<br align="left"/>let mut _25: i64;<br align="left"/>let mut _26: i64;<br align="left"/>let mut _27: i64;<br align="left"/>let mut _28: isize;<br align="left"/>let _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _32: i64;<br align="left"/>let _33: u64;<br align="left"/>let mut _34: isize;<br align="left"/>let mut _35: bool;<br align="left"/>let mut _36: bool;<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: bool;<br align="left"/>let mut _39: bool;<br align="left"/>let mut _40: bool;<br align="left"/>let _41: ();<br align="left"/>let mut _42: bool;<br align="left"/>let mut _43: u64;<br align="left"/>let mut _44: u64;<br align="left"/>let mut _45: !;<br align="left"/>let _46: ();<br align="left"/>let mut _47: &amp;ReErased str;<br align="left"/>let _48: &amp;ReErased str;<br align="left"/>let mut _49: &amp;ReErased std::string::String;<br align="left"/>let _50: &amp;ReErased std::string::String;<br align="left"/>let _51: std::string::String;<br align="left"/>let _52: std::string::String;<br align="left"/>let mut _53: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _54: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _55: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _56: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _57: [&amp;ReErased str; 3_usize];<br align="left"/>let mut _58: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _59: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let _60: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let _61: [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let mut _62: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _63: &amp;ReErased u16;<br align="left"/>let _64: &amp;ReErased u16;<br align="left"/>let mut _65: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _66: &amp;ReErased u64;<br align="left"/>let _67: &amp;ReErased u64;<br align="left"/>let mut _68: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _69: &amp;ReErased u64;<br align="left"/>let _70: &amp;ReErased u64;<br align="left"/>let _71: i64;<br align="left"/>let mut _72: i64;<br align="left"/>let mut _73: i64;<br align="left"/>let _74: u64;<br align="left"/>let mut _75: i64;<br align="left"/>let mut _76: isize;<br align="left"/>let mut _77: i64;<br align="left"/>let mut _78: bool;<br align="left"/>let mut _79: bool;<br align="left"/>let mut _80: bool;<br align="left"/>let mut _81: bool;<br align="left"/>let mut _82: i64;<br align="left"/>let mut _83: bool;<br align="left"/>let mut _84: bool;<br align="left"/>let mut _85: bool;<br align="left"/>let mut _86: bool;<br align="left"/>let mut _87: i64;<br align="left"/>let mut _88: bool;<br align="left"/>let mut _89: bool;<br align="left"/>let mut _90: bool;<br align="left"/>let mut _91: bool;<br align="left"/>let mut _92: i64;<br align="left"/>let mut _93: bool;<br align="left"/>let mut _94: bool;<br align="left"/>let mut _95: bool;<br align="left"/>let mut _96: bool;<br align="left"/>let mut _97: i64;<br align="left"/>let mut _98: bool;<br align="left"/>let mut _99: bool;<br align="left"/>let mut _100: bool;<br align="left"/>let mut _101: bool;<br align="left"/>let mut _102: i64;<br align="left"/>let mut _103: bool;<br align="left"/>let mut _104: bool;<br align="left"/>let mut _105: bool;<br align="left"/>let mut _106: bool;<br align="left"/>let _107: ();<br align="left"/>let mut _108: bool;<br align="left"/>let mut _109: u64;<br align="left"/>let mut _110: u64;<br align="left"/>let mut _111: u64;<br align="left"/>let mut _112: u64;<br align="left"/>let mut _113: !;<br align="left"/>let _114: ();<br align="left"/>let mut _115: &amp;ReErased str;<br align="left"/>let _116: &amp;ReErased str;<br align="left"/>let mut _117: &amp;ReErased std::string::String;<br align="left"/>let _118: &amp;ReErased std::string::String;<br align="left"/>let _119: std::string::String;<br align="left"/>let _120: std::string::String;<br align="left"/>let mut _121: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _122: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _123: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _124: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _125: [&amp;ReErased str; 3_usize];<br align="left"/>let mut _126: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _127: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let _128: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let _129: [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let mut _130: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _131: &amp;ReErased u16;<br align="left"/>let _132: &amp;ReErased u16;<br align="left"/>let mut _133: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _134: &amp;ReErased u64;<br align="left"/>let _135: &amp;ReErased u64;<br align="left"/>let _136: u64;<br align="left"/>let mut _137: u64;<br align="left"/>let mut _138: u64;<br align="left"/>let mut _139: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _140: &amp;ReErased u64;<br align="left"/>let _141: &amp;ReErased u64;<br align="left"/>let mut _142: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let mut _143: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug oracle_price =&gt; _2;<br align="left"/>debug oracle_divergence =&gt; _3;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>debug residual =&gt; _29;<br align="left"/>debug val =&gt; _32;<br align="left"/>debug oracle_divergence_limit =&gt; _33;<br align="left"/>debug res =&gt; _52;<br align="left"/>debug min_price =&gt; _71;<br align="left"/>debug std_limit =&gt; _74;<br align="left"/>debug res =&gt; _120;<br align="left"/>>;
    bb0__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _2<br/>StorageLive(_14)<br/>_14 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64)<br/></td></tr><tr><td align="left">_12 = &lt;i64 as SafeMath&gt;::safe_sub(move _13, move _14)</td></tr></table>>];
    bb1__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _12)</td></tr></table>>];
    bb2__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_15 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb3__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_11 as Continue).0: i64)<br/>_10 = _19<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_9 = &lt;i64 as SafeMath&gt;::safe_mul(move _10, const _)</td></tr></table>>];
    bb4__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_11 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb6__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb8__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_20 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb9__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_8 as Continue).0: i64)<br/>_7 = _24<br/>StorageDead(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64)<br/>StorageLive(_27)<br/>_27 = _2<br/></td></tr><tr><td align="left">_25 = &lt;i64 as Ord&gt;::min(move _26, move _27)</td></tr></table>>];
    bb10__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_23)<br/>_23 = _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb11__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_6 = &lt;i64 as SafeMath&gt;::safe_div(move _7, move _25)</td></tr></table>>];
    bb13__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb14__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_28 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb15__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_5 as Continue).0: i64)<br/>_4 = _32<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_3 = core::num::&lt;impl i64&gt;::unsigned_abs(move _4)</td></tr></table>>];
    bb16__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_31)<br/>_31 = _29<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _31)</td></tr></table>>];
    bb17__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageLive(_33)<br/>_34 = discriminant(((*_1).24: state::perp_market::ContractTier))<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb19__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_40 = Eq(const 40_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _40, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb20__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_35 = Eq(const 200_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _35, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb21__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_33 = Div(const _, const 200_u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_36 = Eq(const 200_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _36, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb23__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_33 = Div(const _, const 200_u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_37 = Eq(const 100_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _37, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb25__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_33 = Div(const _, const 100_u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_38 = Eq(const 40_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _38, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb27__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_33 = Div(const _, const 40_u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_39 = Eq(const 40_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _39, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb29__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_33 = Div(const _, const 40_u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_33 = Div(const _, const 40_u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = _3<br/>StorageLive(_44)<br/>_44 = _33<br/>_42 = Ge(move _43, move _44)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb32__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_43)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_142 = const _<br/>_56 = &amp;(*_142)<br/>_55 = &amp;(*_56)<br/>_54 = move _55 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_55)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = &amp;((*_1).21: u16)<br/>_63 = &amp;(*_64)<br/></td></tr><tr><td align="left">_62 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _63)</td></tr></table>>];
    bb33__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>_67 = &amp;_3<br/>_66 = &amp;(*_67)<br/></td></tr><tr><td align="left">_65 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _66)</td></tr></table>>];
    bb34__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>_70 = &amp;_33<br/>_69 = &amp;(*_70)<br/></td></tr><tr><td align="left">_68 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _69)</td></tr></table>>];
    bb35__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>_61 = [move _62, move _65, move _68]<br/>StorageDead(_68)<br/>StorageDead(_65)<br/>StorageDead(_62)<br/>_60 = &amp;_61<br/>_59 = &amp;(*_60)<br/>_58 = move _59 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">_53 = Arguments::&lt;'_&gt;::new_v1(move _54, move _58)</td></tr></table>>];
    bb36__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = format(move _53)</td></tr></table>>];
    bb37__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_70)<br/>StorageDead(_67)<br/>StorageDead(_64)<br/>StorageDead(_61)<br/>StorageDead(_60)<br/>StorageDead(_56)<br/>_51 = move _52<br/>StorageDead(_52)<br/>_50 = &amp;_51<br/>_49 = &amp;(*_50)<br/></td></tr><tr><td align="left">_48 = &lt;String as Deref&gt;::deref(move _49)</td></tr></table>>];
    bb38__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">_47 = &amp;(*_48)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">_46 = solana_program::log::sol_log(move _47)</td></tr></table>>];
    bb39__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/></td></tr><tr><td align="left">drop(_51)</td></tr></table>>];
    bb40__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_48)<br/>StorageDead(_46)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const false)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_43)<br/>_41 = const ()<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>_72 = _2<br/>StorageLive(_73)<br/>_73 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64)<br/></td></tr><tr><td align="left">_71 = &lt;i64 as Ord&gt;::min(move _72, move _73)</td></tr></table>>];
    bb42__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageDead(_72)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>_76 = discriminant(((*_1).24: state::perp_market::ContractTier))<br/></td></tr><tr><td align="left">switchInt(move _76)</td></tr></table>>];
    bb43__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_102)<br/>_102 = _71<br/>_103 = Eq(const 10_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _103, &quot;attempt to divide `{}` by zero&quot;, _102)</td></tr></table>>];
    bb44__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_77)<br/>_77 = _71<br/>_78 = Eq(const 50_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _78, &quot;attempt to divide `{}` by zero&quot;, _77)</td></tr></table>>];
    bb45__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">_79 = Eq(const 50_i64, const -1_i64)<br/>_80 = Eq(_77, const i64::MIN)<br/>_81 = BitAnd(move _79, move _80)<br/></td></tr><tr><td align="left">assert(!move _81, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _77, const 50_i64)</td></tr></table>>];
    bb46__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">_75 = Div(move _77, const 50_i64)<br/>StorageDead(_77)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = _71<br/>_83 = Eq(const 50_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _83, &quot;attempt to divide `{}` by zero&quot;, _82)</td></tr></table>>];
    bb48__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">_84 = Eq(const 50_i64, const -1_i64)<br/>_85 = Eq(_82, const i64::MIN)<br/>_86 = BitAnd(move _84, move _85)<br/></td></tr><tr><td align="left">assert(!move _86, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _82, const 50_i64)</td></tr></table>>];
    bb49__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_75 = Div(move _82, const 50_i64)<br/>StorageDead(_82)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_87)<br/>_87 = _71<br/>_88 = Eq(const 20_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _88, &quot;attempt to divide `{}` by zero&quot;, _87)</td></tr></table>>];
    bb51__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">_89 = Eq(const 20_i64, const -1_i64)<br/>_90 = Eq(_87, const i64::MIN)<br/>_91 = BitAnd(move _89, move _90)<br/></td></tr><tr><td align="left">assert(!move _91, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _87, const 20_i64)</td></tr></table>>];
    bb52__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">_75 = Div(move _87, const 20_i64)<br/>StorageDead(_87)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_92)<br/>_92 = _71<br/>_93 = Eq(const 10_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _93, &quot;attempt to divide `{}` by zero&quot;, _92)</td></tr></table>>];
    bb54__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">_94 = Eq(const 10_i64, const -1_i64)<br/>_95 = Eq(_92, const i64::MIN)<br/>_96 = BitAnd(move _94, move _95)<br/></td></tr><tr><td align="left">assert(!move _96, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _92, const 10_i64)</td></tr></table>>];
    bb55__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">_75 = Div(move _92, const 10_i64)<br/>StorageDead(_92)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageLive(_97)<br/>_97 = _71<br/>_98 = Eq(const 10_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _98, &quot;attempt to divide `{}` by zero&quot;, _97)</td></tr></table>>];
    bb57__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">_99 = Eq(const 10_i64, const -1_i64)<br/>_100 = Eq(_97, const i64::MIN)<br/>_101 = BitAnd(move _99, move _100)<br/></td></tr><tr><td align="left">assert(!move _101, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _97, const 10_i64)</td></tr></table>>];
    bb58__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">_75 = Div(move _97, const 10_i64)<br/>StorageDead(_97)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">_104 = Eq(const 10_i64, const -1_i64)<br/>_105 = Eq(_102, const i64::MIN)<br/>_106 = BitAnd(move _104, move _105)<br/></td></tr><tr><td align="left">assert(!move _106, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _102, const 10_i64)</td></tr></table>>];
    bb60__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">_75 = Div(move _102, const 10_i64)<br/>StorageDead(_102)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left">_74 = core::num::&lt;impl i64&gt;::unsigned_abs(move _75)</td></tr></table>>];
    bb62__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>_110 = (((*_1).1: state::perp_market::AMM).61: u64)<br/>StorageLive(_111)<br/>_111 = (((*_1).1: state::perp_market::AMM).60: u64)<br/></td></tr><tr><td align="left">_109 = &lt;u64 as Ord&gt;::max(move _110, move _111)</td></tr></table>>];
    bb63__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_110)<br/>StorageLive(_112)<br/>_112 = _74<br/>_108 = Ge(move _109, move _112)<br/></td></tr><tr><td align="left">switchInt(move _108)</td></tr></table>>];
    bb64__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>StorageDead(_109)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>_143 = const _<br/>_124 = &amp;(*_143)<br/>_123 = &amp;(*_124)<br/>_122 = move _123 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_123)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>_132 = &amp;((*_1).21: u16)<br/>_131 = &amp;(*_132)<br/></td></tr><tr><td align="left">_130 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _131)</td></tr></table>>];
    bb65__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_131)<br/>StorageLive(_133)<br/>StorageLive(_134)<br/>StorageLive(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>_137 = (((*_1).1: state::perp_market::AMM).61: u64)<br/>StorageLive(_138)<br/>_138 = (((*_1).1: state::perp_market::AMM).60: u64)<br/></td></tr><tr><td align="left">_136 = &lt;u64 as Ord&gt;::max(move _137, move _138)</td></tr></table>>];
    bb66__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>StorageDead(_137)<br/>_135 = &amp;_136<br/>_134 = &amp;(*_135)<br/></td></tr><tr><td align="left">_133 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _134)</td></tr></table>>];
    bb67__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>_141 = &amp;_74<br/>_140 = &amp;(*_141)<br/></td></tr><tr><td align="left">_139 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _140)</td></tr></table>>];
    bb68__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_140)<br/>_129 = [move _130, move _133, move _139]<br/>StorageDead(_139)<br/>StorageDead(_133)<br/>StorageDead(_130)<br/>_128 = &amp;_129<br/>_127 = &amp;(*_128)<br/>_126 = move _127 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_127)<br/></td></tr><tr><td align="left">_121 = Arguments::&lt;'_&gt;::new_v1(move _122, move _126)</td></tr></table>>];
    bb69__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_126)<br/>StorageDead(_122)<br/></td></tr><tr><td align="left">_120 = format(move _121)</td></tr></table>>];
    bb70__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_141)<br/>StorageDead(_136)<br/>StorageDead(_135)<br/>StorageDead(_132)<br/>StorageDead(_129)<br/>StorageDead(_128)<br/>StorageDead(_124)<br/>_119 = move _120<br/>StorageDead(_120)<br/>_118 = &amp;_119<br/>_117 = &amp;(*_118)<br/></td></tr><tr><td align="left">_116 = &lt;String as Deref&gt;::deref(move _117)</td></tr></table>>];
    bb71__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">_115 = &amp;(*_116)<br/>StorageDead(_117)<br/></td></tr><tr><td align="left">_114 = solana_program::log::sol_log(move _115)</td></tr></table>>];
    bb72__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_115)<br/></td></tr><tr><td align="left">drop(_119)</td></tr></table>>];
    bb73__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_118)<br/>StorageDead(_116)<br/>StorageDead(_114)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const false)<br/>StorageDead(_108)<br/>StorageDead(_107)<br/>StorageDead(_74)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb74__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>StorageDead(_109)<br/>_107 = const ()<br/>StorageDead(_108)<br/>StorageDead(_107)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const true)<br/>StorageDead(_74)<br/>StorageDead(_71)<br/>StorageDead(_33)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb76__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb77__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb78__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb79__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left">return</td></tr></table>>];
    bb80__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">80 (cleanup)</td></tr><tr><td align="left">drop(_119)</td></tr></table>>];
    bb81__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">81 (cleanup)</td></tr><tr><td align="left">drop(_51)</td></tr></table>>];
    bb82__0_3805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">82 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_3805 -> bb1__0_3805 [label="return"];
    bb1__0_3805 -> bb2__0_3805 [label="return"];
    bb2__0_3805 -> bb3__0_3805 [label="0"];
    bb2__0_3805 -> bb5__0_3805 [label="1"];
    bb2__0_3805 -> bb4__0_3805 [label="otherwise"];
    bb3__0_3805 -> bb7__0_3805 [label="return"];
    bb5__0_3805 -> bb6__0_3805 [label="return"];
    bb6__0_3805 -> bb76__0_3805 [label=""];
    bb7__0_3805 -> bb8__0_3805 [label="return"];
    bb8__0_3805 -> bb9__0_3805 [label="0"];
    bb8__0_3805 -> bb10__0_3805 [label="1"];
    bb8__0_3805 -> bb4__0_3805 [label="otherwise"];
    bb9__0_3805 -> bb12__0_3805 [label="return"];
    bb10__0_3805 -> bb11__0_3805 [label="return"];
    bb11__0_3805 -> bb76__0_3805 [label=""];
    bb12__0_3805 -> bb13__0_3805 [label="return"];
    bb13__0_3805 -> bb14__0_3805 [label="return"];
    bb14__0_3805 -> bb15__0_3805 [label="0"];
    bb14__0_3805 -> bb16__0_3805 [label="1"];
    bb14__0_3805 -> bb4__0_3805 [label="otherwise"];
    bb15__0_3805 -> bb18__0_3805 [label="return"];
    bb16__0_3805 -> bb17__0_3805 [label="return"];
    bb17__0_3805 -> bb77__0_3805 [label=""];
    bb18__0_3805 -> bb20__0_3805 [label="0"];
    bb18__0_3805 -> bb22__0_3805 [label="1"];
    bb18__0_3805 -> bb24__0_3805 [label="2"];
    bb18__0_3805 -> bb26__0_3805 [label="3"];
    bb18__0_3805 -> bb28__0_3805 [label="4"];
    bb18__0_3805 -> bb19__0_3805 [label="5"];
    bb18__0_3805 -> bb4__0_3805 [label="otherwise"];
    bb19__0_3805 -> bb30__0_3805 [label="success"];
    bb20__0_3805 -> bb21__0_3805 [label="success"];
    bb21__0_3805 -> bb31__0_3805 [label=""];
    bb22__0_3805 -> bb23__0_3805 [label="success"];
    bb23__0_3805 -> bb31__0_3805 [label=""];
    bb24__0_3805 -> bb25__0_3805 [label="success"];
    bb25__0_3805 -> bb31__0_3805 [label=""];
    bb26__0_3805 -> bb27__0_3805 [label="success"];
    bb27__0_3805 -> bb31__0_3805 [label=""];
    bb28__0_3805 -> bb29__0_3805 [label="success"];
    bb29__0_3805 -> bb31__0_3805 [label=""];
    bb30__0_3805 -> bb31__0_3805 [label=""];
    bb31__0_3805 -> bb41__0_3805 [label="0"];
    bb31__0_3805 -> bb32__0_3805 [label="otherwise"];
    bb32__0_3805 -> bb33__0_3805 [label="return"];
    bb33__0_3805 -> bb34__0_3805 [label="return"];
    bb34__0_3805 -> bb35__0_3805 [label="return"];
    bb35__0_3805 -> bb36__0_3805 [label="return"];
    bb36__0_3805 -> bb37__0_3805 [label="return"];
    bb37__0_3805 -> bb38__0_3805 [label="return"];
    bb37__0_3805 -> bb81__0_3805 [label="unwind"];
    bb38__0_3805 -> bb39__0_3805 [label="return"];
    bb38__0_3805 -> bb81__0_3805 [label="unwind"];
    bb39__0_3805 -> bb40__0_3805 [label="return"];
    bb39__0_3805 -> bb82__0_3805 [label="unwind"];
    bb40__0_3805 -> bb75__0_3805 [label=""];
    bb41__0_3805 -> bb42__0_3805 [label="return"];
    bb42__0_3805 -> bb44__0_3805 [label="0"];
    bb42__0_3805 -> bb47__0_3805 [label="1"];
    bb42__0_3805 -> bb50__0_3805 [label="2"];
    bb42__0_3805 -> bb53__0_3805 [label="3"];
    bb42__0_3805 -> bb56__0_3805 [label="4"];
    bb42__0_3805 -> bb43__0_3805 [label="5"];
    bb42__0_3805 -> bb4__0_3805 [label="otherwise"];
    bb43__0_3805 -> bb59__0_3805 [label="success"];
    bb44__0_3805 -> bb45__0_3805 [label="success"];
    bb45__0_3805 -> bb46__0_3805 [label="success"];
    bb46__0_3805 -> bb61__0_3805 [label=""];
    bb47__0_3805 -> bb48__0_3805 [label="success"];
    bb48__0_3805 -> bb49__0_3805 [label="success"];
    bb49__0_3805 -> bb61__0_3805 [label=""];
    bb50__0_3805 -> bb51__0_3805 [label="success"];
    bb51__0_3805 -> bb52__0_3805 [label="success"];
    bb52__0_3805 -> bb61__0_3805 [label=""];
    bb53__0_3805 -> bb54__0_3805 [label="success"];
    bb54__0_3805 -> bb55__0_3805 [label="success"];
    bb55__0_3805 -> bb61__0_3805 [label=""];
    bb56__0_3805 -> bb57__0_3805 [label="success"];
    bb57__0_3805 -> bb58__0_3805 [label="success"];
    bb58__0_3805 -> bb61__0_3805 [label=""];
    bb59__0_3805 -> bb60__0_3805 [label="success"];
    bb60__0_3805 -> bb61__0_3805 [label=""];
    bb61__0_3805 -> bb62__0_3805 [label="return"];
    bb62__0_3805 -> bb63__0_3805 [label="return"];
    bb63__0_3805 -> bb74__0_3805 [label="0"];
    bb63__0_3805 -> bb64__0_3805 [label="otherwise"];
    bb64__0_3805 -> bb65__0_3805 [label="return"];
    bb65__0_3805 -> bb66__0_3805 [label="return"];
    bb66__0_3805 -> bb67__0_3805 [label="return"];
    bb67__0_3805 -> bb68__0_3805 [label="return"];
    bb68__0_3805 -> bb69__0_3805 [label="return"];
    bb69__0_3805 -> bb70__0_3805 [label="return"];
    bb70__0_3805 -> bb71__0_3805 [label="return"];
    bb70__0_3805 -> bb80__0_3805 [label="unwind"];
    bb71__0_3805 -> bb72__0_3805 [label="return"];
    bb71__0_3805 -> bb80__0_3805 [label="unwind"];
    bb72__0_3805 -> bb73__0_3805 [label="return"];
    bb72__0_3805 -> bb82__0_3805 [label="unwind"];
    bb73__0_3805 -> bb75__0_3805 [label=""];
    bb74__0_3805 -> bb79__0_3805 [label=""];
    bb75__0_3805 -> bb78__0_3805 [label=""];
    bb76__0_3805 -> bb77__0_3805 [label=""];
    bb77__0_3805 -> bb78__0_3805 [label=""];
    bb78__0_3805 -> bb79__0_3805 [label=""];
    bb80__0_3805 -> bb82__0_3805 [label="return"];
    bb81__0_3805 -> bb82__0_3805 [label="return"];
}
