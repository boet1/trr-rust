digraph Mir_0_3813 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PerpMarket::clamp_trigger_price(_1: &amp;ReErased state::perp_market::PerpMarket, _2: u64, _3: u64) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _4: u64;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: isize;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: u64;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: u64;<br align="left"/>let mut _14: u64;<br align="left"/>let mut _15: u64;<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _17: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: u64;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _24: u64;<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _27: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: u64;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug oracle_price =&gt; _2;<br align="left"/>debug median_price =&gt; _3;<br align="left"/>debug max_bps_diff =&gt; _4;<br align="left"/>debug max_oracle_diff =&gt; _9;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>>;
    bb0__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_6 = discriminant(((*_1).24: state::perp_market::ContractTier))<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb1__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb4__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_4 = const 500_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_8 = discriminant(((*_1).24: state::perp_market::ContractTier))<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb6__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_7 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_7 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb9__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_4 = const 100_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_4 = const 40_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _2<br/>StorageLive(_11)<br/>_11 = _4<br/>_12 = Eq(_11, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _12, &quot;attempt to divide `{}` by zero&quot;, _10)</td></tr></table>>];
    bb13__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_9 = Div(move _10, move _11)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _3<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _2<br/>StorageLive(_19)<br/>_19 = _9<br/></td></tr><tr><td align="left">_17 = &lt;u64 as SafeMath&gt;::safe_sub(move _18, move _19)</td></tr></table>>];
    bb14__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb15__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_20 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb16__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_16 as Continue).0: u64)<br/>_15 = _24<br/>StorageDead(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = _2<br/>StorageLive(_29)<br/>_29 = _9<br/></td></tr><tr><td align="left">_27 = &lt;u64 as SafeMath&gt;::safe_add(move _28, move _29)</td></tr></table>>];
    bb17__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb18__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_23)<br/>_23 = _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb19__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb21__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_30 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb22__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_26 as Continue).0: u64)<br/>_25 = _34<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_13 = &lt;u64 as Ord&gt;::clamp(move _14, move _15, move _25)</td></tr></table>>];
    bb23__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb24__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_25)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/>StorageDead(_4)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>_0 = std::result::Result::&lt;u64, error::ErrorCode&gt;::Ok(move _13)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/>StorageDead(_4)<br/>StorageDead(_26)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_3813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3813 -> bb2__0_3813 [label="0"];
    bb0__0_3813 -> bb2__0_3813 [label="1"];
    bb0__0_3813 -> bb1__0_3813 [label="otherwise"];
    bb1__0_3813 -> bb3__0_3813 [label=""];
    bb2__0_3813 -> bb3__0_3813 [label=""];
    bb3__0_3813 -> bb5__0_3813 [label="0"];
    bb3__0_3813 -> bb4__0_3813 [label="otherwise"];
    bb4__0_3813 -> bb12__0_3813 [label=""];
    bb5__0_3813 -> bb7__0_3813 [label="2"];
    bb5__0_3813 -> bb6__0_3813 [label="otherwise"];
    bb6__0_3813 -> bb8__0_3813 [label=""];
    bb7__0_3813 -> bb8__0_3813 [label=""];
    bb8__0_3813 -> bb10__0_3813 [label="0"];
    bb8__0_3813 -> bb9__0_3813 [label="otherwise"];
    bb9__0_3813 -> bb11__0_3813 [label=""];
    bb10__0_3813 -> bb11__0_3813 [label=""];
    bb11__0_3813 -> bb12__0_3813 [label=""];
    bb12__0_3813 -> bb13__0_3813 [label="success"];
    bb13__0_3813 -> bb14__0_3813 [label="return"];
    bb14__0_3813 -> bb15__0_3813 [label="return"];
    bb15__0_3813 -> bb16__0_3813 [label="0"];
    bb15__0_3813 -> bb18__0_3813 [label="1"];
    bb15__0_3813 -> bb17__0_3813 [label="otherwise"];
    bb16__0_3813 -> bb20__0_3813 [label="return"];
    bb18__0_3813 -> bb19__0_3813 [label="return"];
    bb19__0_3813 -> bb26__0_3813 [label=""];
    bb20__0_3813 -> bb21__0_3813 [label="return"];
    bb21__0_3813 -> bb22__0_3813 [label="0"];
    bb21__0_3813 -> bb23__0_3813 [label="1"];
    bb21__0_3813 -> bb17__0_3813 [label="otherwise"];
    bb22__0_3813 -> bb25__0_3813 [label="return"];
    bb23__0_3813 -> bb24__0_3813 [label="return"];
    bb24__0_3813 -> bb26__0_3813 [label=""];
    bb25__0_3813 -> bb27__0_3813 [label=""];
    bb26__0_3813 -> bb27__0_3813 [label=""];
}
