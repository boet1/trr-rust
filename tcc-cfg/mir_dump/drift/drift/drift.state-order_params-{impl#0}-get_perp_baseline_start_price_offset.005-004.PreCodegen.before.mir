// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::get_perp_baseline_start_price_offset` before PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::get_perp_baseline_start_price_offset(_1: &PerpMarket, _2: controller::position::PositionDirection) -> std::result::Result<i64, error::ErrorCode> {
    debug perp_market => _1;
    debug direction => _2;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: i64;
    let mut _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: i64;
    let mut _10: i64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i64;
    let mut _16: bool;
    let mut _17: u64;
    let mut _18: !;
    let _19: i64;
    let mut _20: bool;
    let mut _21: &state::perp_market::ContractTier;
    let mut _22: &state::perp_market::ContractTier;
    let _23: &state::perp_market::ContractTier;
    let _24: state::perp_market::ContractTier;
    let mut _25: i64;
    let mut _26: isize;
    let mut _27: i64;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _29: std::result::Result<i64, error::ErrorCode>;
    let mut _30: u64;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: i64;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: i64;
    let mut _42: i64;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _44: std::result::Result<i64, error::ErrorCode>;
    let mut _45: u64;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: i64;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let _57: i64;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _59: std::result::Result<i64, error::ErrorCode>;
    let mut _60: u64;
    let mut _61: isize;
    let mut _62: isize;
    let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _66: i64;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _69: std::result::Result<i64, error::ErrorCode>;
    let mut _70: i64;
    let mut _71: i64;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _79: std::result::Result<i64, error::ErrorCode>;
    let mut _80: i64;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _82: std::result::Result<i64, error::ErrorCode>;
    let mut _83: u64;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: i64;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _97: std::result::Result<i64, error::ErrorCode>;
    let mut _98: i64;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _100: std::result::Result<i64, error::ErrorCode>;
    let mut _101: i64;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _103: std::result::Result<i64, error::ErrorCode>;
    let mut _104: u32;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: i64;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: i64;
    let mut _117: (i64, bool);
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _125: std::result::Result<i64, error::ErrorCode>;
    let mut _126: i64;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _128: std::result::Result<i64, error::ErrorCode>;
    let mut _129: i64;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _131: std::result::Result<i64, error::ErrorCode>;
    let mut _132: u32;
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _138: i64;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _144: i64;
    let mut _145: (i64, bool);
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _152: isize;
    let mut _153: i64;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _155: std::result::Result<i64, error::ErrorCode>;
    let mut _156: i64;
    let mut _157: i64;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _163: i64;
    let mut _164: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _165: std::result::Result<i64, error::ErrorCode>;
    let mut _166: i64;
    let mut _167: i64;
    let mut _168: isize;
    let mut _170: !;
    let mut _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _173: i64;
    let mut _174: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _175: std::result::Result<i64, error::ErrorCode>;
    let mut _176: i64;
    let mut _177: i64;
    let mut _178: isize;
    let mut _180: !;
    let mut _181: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _183: i64;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _185: std::result::Result<i64, error::ErrorCode>;
    let mut _186: i64;
    let mut _187: i64;
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _193: i64;
    let mut _194: &state::perp_market::ContractTier;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug price_divisor => _19;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: i64;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: i64;
        scope 6 {
            debug residual => _32;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _35;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _47;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _50;
            scope 13 {
            }
        }
    }
    scope 14 {
        debug mark_twap_slow => _57;
        let _67: i64;
        let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _76: i64;
        scope 19 {
            debug baseline_start_price_offset_slow => _67;
            let _77: i64;
            let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _88: i64;
            let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _94: i64;
            scope 24 {
                debug baseline_start_price_offset_fast => _77;
                let _95: i64;
                let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _109: i64;
                let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _115: i64;
                let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _122: i64;
                scope 33 {
                    debug frac_of_long_spread_in_price => _95;
                    let _123: i64;
                    let _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _137: i64;
                    let _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _143: i64;
                    let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _150: i64;
                    scope 46 {
                        debug frac_of_short_spread_in_price => _123;
                        let _151: i64;
                        let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _162: i64;
                        let _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _172: i64;
                        let _179: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _182: i64;
                        let _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _192: i64;
                        scope 59 {
                            debug baseline_start_price_offset => _151;
                        }
                        scope 60 {
                            debug residual => _159;
                            scope 61 {
                            }
                        }
                        scope 62 {
                            debug val => _162;
                            scope 63 {
                            }
                        }
                        scope 64 {
                            debug residual => _169;
                            scope 65 {
                            }
                        }
                        scope 66 {
                            debug val => _172;
                            scope 67 {
                            }
                        }
                        scope 68 {
                            debug residual => _179;
                            scope 69 {
                            }
                        }
                        scope 70 {
                            debug val => _182;
                            scope 71 {
                            }
                        }
                        scope 72 {
                            debug residual => _189;
                            scope 73 {
                            }
                        }
                        scope 74 {
                            debug val => _192;
                            scope 75 {
                            }
                        }
                    }
                    scope 47 {
                        debug residual => _134;
                        scope 48 {
                        }
                    }
                    scope 49 {
                        debug val => _137;
                        scope 50 {
                        }
                    }
                    scope 51 {
                        debug residual => _140;
                        scope 52 {
                        }
                    }
                    scope 53 {
                        debug val => _143;
                        scope 54 {
                        }
                    }
                    scope 55 {
                        debug residual => _147;
                        scope 56 {
                        }
                    }
                    scope 57 {
                        debug val => _150;
                        scope 58 {
                        }
                    }
                }
                scope 34 {
                    debug residual => _106;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug val => _109;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug residual => _112;
                    scope 39 {
                    }
                }
                scope 40 {
                    debug val => _115;
                    scope 41 {
                    }
                }
                scope 42 {
                    debug residual => _119;
                    scope 43 {
                    }
                }
                scope 44 {
                    debug val => _122;
                    scope 45 {
                    }
                }
            }
            scope 25 {
                debug residual => _85;
                scope 26 {
                }
            }
            scope 27 {
                debug val => _88;
                scope 28 {
                }
            }
            scope 29 {
                debug residual => _91;
                scope 30 {
                }
            }
            scope 31 {
                debug val => _94;
                scope 32 {
                }
            }
        }
        scope 20 {
            debug residual => _73;
            scope 21 {
            }
        }
        scope 22 {
            debug val => _76;
            scope 23 {
            }
        }
    }
    scope 15 {
        debug residual => _63;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _66;
        scope 18 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).5: i64);
        StorageLive(_10);
        _10 = (((*_1).1: state::perp_market::AMM).62: i64);
        _8 = <i64 as SafeMath>::safe_sub(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: i64);
        _6 = _15;
        StorageDead(_15);
        _5 = core::num::<impl i64>::abs(move _6) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb129;
    }

    bb7: {
        StorageDead(_6);
        _4 = Ge(move _5, const 60_i64);
        switchInt(move _4) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_7);
        StorageDead(_5);
        StorageLive(_16);
        StorageLive(_17);
        _17 = (((*_1).1: state::perp_market::AMM).56: u64);
        _16 = Le(move _17, const _);
        switchInt(move _16) -> [0: bb33, otherwise: bb10];
    }

    bb10: {
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).24: state::perp_market::ContractTier);
        StorageLive(_22);
        StorageLive(_23);
        _194 = const _;
        _23 = &(*_194);
        _22 = &(*_23);
        _20 = state::perp_market::ContractTier::is_as_safe_as_contract(move _21, move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _20) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        _19 = const 500_i64;
        goto -> bb14;
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        _19 = const 100_i64;
        goto -> bb14;
    }

    bb14: {
        StorageDead(_20);
        StorageLive(_25);
        _26 = discriminant(_2);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = (((*_1).1: state::perp_market::AMM).44: u64);
        _44 = <u64 as Cast>::cast::<i64>(move _45) -> [return: bb24, unwind continue];
    }

    bb16: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = (((*_1).1: state::perp_market::AMM).43: u64);
        _29 = <u64 as Cast>::cast::<i64>(move _30) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_30);
        _28 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _29) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_35);
        _35 = ((_28 as Continue).0: i64);
        _27 = _35;
        StorageDead(_35);
        StorageLive(_36);
        _36 = _19;
        _37 = Eq(_36, const 0_i64);
        assert(!move _37, "attempt to divide `{}` by zero", _27) -> [success: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_32);
        _32 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_28);
        goto -> bb127;
    }

    bb22: {
        _38 = Eq(_36, const -1_i64);
        _39 = Eq(_27, const i64::MIN);
        _40 = BitAnd(move _38, move _39);
        assert(!move _40, "attempt to compute `{} / {}`, which would overflow", _27, _36) -> [success: bb23, unwind continue];
    }

    bb23: {
        _25 = Div(move _27, move _36);
        StorageDead(_36);
        StorageDead(_27);
        StorageDead(_28);
        goto -> bb32;
    }

    bb24: {
        StorageDead(_45);
        _43 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _44) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_44);
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_50);
        _50 = ((_43 as Continue).0: i64);
        _42 = _50;
        StorageDead(_50);
        StorageLive(_51);
        _51 = _19;
        _52 = Eq(_51, const 0_i64);
        assert(!move _52, "attempt to divide `{}` by zero", _42) -> [success: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_47);
        _47 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_43);
        goto -> bb127;
    }

    bb29: {
        _53 = Eq(_51, const -1_i64);
        _54 = Eq(_42, const i64::MIN);
        _55 = BitAnd(move _53, move _54);
        assert(!move _55, "attempt to compute `{} / {}`, which would overflow", _42, _51) -> [success: bb30, unwind continue];
    }

    bb30: {
        _41 = Div(move _42, move _51);
        StorageDead(_51);
        StorageDead(_42);
        _56 = Eq(_41, const i64::MIN);
        assert(!move _56, "attempt to negate `{}`, which would overflow", _41) -> [success: bb31, unwind continue];
    }

    bb31: {
        _25 = Neg(move _41);
        StorageDead(_41);
        StorageDead(_43);
        goto -> bb32;
    }

    bb32: {
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _25);
        StorageDead(_25);
        goto -> bb128;
    }

    bb33: {
        StorageDead(_17);
        _3 = const ();
        StorageDead(_16);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _61 = discriminant(_2);
        switchInt(move _61) -> [0: bb35, 1: bb34, otherwise: bb4];
    }

    bb34: {
        _60 = (((*_1).1: state::perp_market::AMM).44: u64);
        goto -> bb36;
    }

    bb35: {
        _60 = (((*_1).1: state::perp_market::AMM).43: u64);
        goto -> bb36;
    }

    bb36: {
        _59 = <u64 as Cast>::cast::<i64>(move _60) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_60);
        _58 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _59) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_59);
        _62 = discriminant(_58);
        switchInt(move _62) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_66);
        _66 = ((_58 as Continue).0: i64);
        _57 = _66;
        StorageDead(_66);
        StorageDead(_58);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _57;
        StorageLive(_71);
        _71 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        _69 = <i64 as SafeMath>::safe_sub(move _70, move _71) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_63);
        _63 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        goto -> bb126;
    }

    bb42: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _69) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_69);
        _72 = discriminant(_68);
        switchInt(move _72) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_76);
        _76 = ((_68 as Continue).0: i64);
        _67 = _76;
        StorageDead(_76);
        StorageDead(_68);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = (((*_1).1: state::perp_market::AMM).46: u64);
        _82 = <u64 as Cast>::cast::<i64>(move _83) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_73);
        _73 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_68);
        goto -> bb125;
    }

    bb47: {
        StorageDead(_83);
        _81 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _82) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_82);
        _84 = discriminant(_81);
        switchInt(move _84) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_88);
        _88 = ((_81 as Continue).0: i64);
        _80 = _88;
        StorageDead(_88);
        StorageLive(_89);
        _89 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        _79 = <i64 as SafeMath>::safe_sub(move _80, move _89) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_85);
        _85 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb123;
    }

    bb52: {
        StorageDead(_89);
        StorageDead(_80);
        _78 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _79) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_79);
        _90 = discriminant(_78);
        switchInt(move _90) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_94);
        _94 = ((_78 as Continue).0: i64);
        _77 = _94;
        StorageDead(_94);
        StorageDead(_81);
        StorageDead(_78);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = (((*_1).1: state::perp_market::AMM).65: u32);
        _103 = <u32 as Cast>::cast::<i64>(move _104) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_91);
        _91 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_93);
        StorageDead(_91);
        goto -> bb123;
    }

    bb57: {
        StorageDead(_104);
        _102 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _103) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_103);
        _105 = discriminant(_102);
        switchInt(move _105) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_109);
        _109 = ((_102 as Continue).0: i64);
        _101 = _109;
        StorageDead(_109);
        StorageLive(_110);
        _110 = _57;
        _100 = <i64 as SafeMath>::safe_mul(move _101, move _110) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_106);
        _106 = ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb120;
    }

    bb62: {
        StorageDead(_110);
        StorageDead(_101);
        _99 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _100) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_100);
        _111 = discriminant(_99);
        switchInt(move _111) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_115);
        _115 = ((_99 as Continue).0: i64);
        _98 = _115;
        StorageDead(_115);
        StorageLive(_116);
        _117 = CheckedMul(const _, const 10_i64);
        assert(!move (_117.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 10_i64) -> [success: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_112);
        _112 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_114);
        StorageDead(_112);
        goto -> bb120;
    }

    bb67: {
        _116 = move (_117.0: i64);
        _97 = <i64 as SafeMath>::safe_div(move _98, move _116) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_116);
        StorageDead(_98);
        _96 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _97) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_97);
        _118 = discriminant(_96);
        switchInt(move _118) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_122);
        _122 = ((_96 as Continue).0: i64);
        _95 = _122;
        StorageDead(_122);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_96);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = (((*_1).1: state::perp_market::AMM).66: u32);
        _131 = <u32 as Cast>::cast::<i64>(move _132) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_119);
        _119 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_121);
        StorageDead(_119);
        goto -> bb121;
    }

    bb73: {
        StorageDead(_132);
        _130 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _131) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_131);
        _133 = discriminant(_130);
        switchInt(move _133) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_137);
        _137 = ((_130 as Continue).0: i64);
        _129 = _137;
        StorageDead(_137);
        StorageLive(_138);
        _138 = _57;
        _128 = <i64 as SafeMath>::safe_mul(move _129, move _138) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_134);
        _134 = ((_130 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_136);
        _136 = _134;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _136) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb117;
    }

    bb78: {
        StorageDead(_138);
        StorageDead(_129);
        _127 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _128) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_128);
        _139 = discriminant(_127);
        switchInt(move _139) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_143);
        _143 = ((_127 as Continue).0: i64);
        _126 = _143;
        StorageDead(_143);
        StorageLive(_144);
        _145 = CheckedMul(const _, const 10_i64);
        assert(!move (_145.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 10_i64) -> [success: bb83, unwind continue];
    }

    bb81: {
        StorageLive(_140);
        _140 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_142);
        _142 = _140;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _142) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_142);
        StorageDead(_140);
        goto -> bb117;
    }

    bb83: {
        _144 = move (_145.0: i64);
        _125 = <i64 as SafeMath>::safe_div(move _126, move _144) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_144);
        StorageDead(_126);
        _124 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _125) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_125);
        _146 = discriminant(_124);
        switchInt(move _146) -> [0: bb86, 1: bb87, otherwise: bb4];
    }

    bb86: {
        StorageLive(_150);
        _150 = ((_124 as Continue).0: i64);
        _123 = _150;
        StorageDead(_150);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_124);
        StorageLive(_151);
        _152 = discriminant(_2);
        switchInt(move _152) -> [0: bb90, 1: bb89, otherwise: bb4];
    }

    bb87: {
        StorageLive(_147);
        _147 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_149);
        StorageDead(_147);
        goto -> bb118;
    }

    bb89: {
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = _67;
        StorageLive(_177);
        _177 = _123;
        _175 = <i64 as SafeMath>::safe_sub(move _176, move _177) -> [return: bb102, unwind continue];
    }

    bb90: {
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = _67;
        StorageLive(_157);
        _157 = _95;
        _155 = <i64 as SafeMath>::safe_add(move _156, move _157) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_157);
        StorageDead(_156);
        _154 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _155) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_155);
        _158 = discriminant(_154);
        switchInt(move _158) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        StorageLive(_162);
        _162 = ((_154 as Continue).0: i64);
        _153 = _162;
        StorageDead(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = _77;
        StorageLive(_167);
        _167 = _123;
        _165 = <i64 as SafeMath>::safe_sub(move _166, move _167) -> [return: bb96, unwind continue];
    }

    bb94: {
        StorageLive(_159);
        _159 = ((_154 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_161);
        StorageDead(_159);
        goto -> bb115;
    }

    bb96: {
        StorageDead(_167);
        StorageDead(_166);
        _164 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _165) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_165);
        _168 = discriminant(_164);
        switchInt(move _168) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_172);
        _172 = ((_164 as Continue).0: i64);
        _163 = _172;
        StorageDead(_172);
        _151 = <i64 as Ord>::min(move _153, move _163) -> [return: bb101, unwind continue];
    }

    bb99: {
        StorageLive(_169);
        _169 = ((_164 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_171);
        _171 = _169;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _171) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb115;
    }

    bb101: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb113;
    }

    bb102: {
        StorageDead(_177);
        StorageDead(_176);
        _174 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _175) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_175);
        _178 = discriminant(_174);
        switchInt(move _178) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_182);
        _182 = ((_174 as Continue).0: i64);
        _173 = _182;
        StorageDead(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = _77;
        StorageLive(_187);
        _187 = _95;
        _185 = <i64 as SafeMath>::safe_add(move _186, move _187) -> [return: bb107, unwind continue];
    }

    bb105: {
        StorageLive(_179);
        _179 = ((_174 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_181);
        _181 = _179;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _181) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_181);
        StorageDead(_179);
        goto -> bb114;
    }

    bb107: {
        StorageDead(_187);
        StorageDead(_186);
        _184 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _185) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_185);
        _188 = discriminant(_184);
        switchInt(move _188) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        StorageLive(_192);
        _192 = ((_184 as Continue).0: i64);
        _183 = _192;
        StorageDead(_192);
        _151 = <i64 as Ord>::max(move _173, move _183) -> [return: bb112, unwind continue];
    }

    bb110: {
        StorageLive(_189);
        _189 = ((_184 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_191);
        _191 = _189;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _191) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_184);
        StorageDead(_183);
        goto -> bb114;
    }

    bb112: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_173);
        goto -> bb113;
    }

    bb113: {
        StorageLive(_193);
        _193 = _151;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _193);
        StorageDead(_193);
        StorageDead(_151);
        StorageDead(_123);
        StorageDead(_95);
        StorageDead(_77);
        StorageDead(_67);
        StorageDead(_57);
        goto -> bb130;
    }

    bb114: {
        StorageDead(_174);
        StorageDead(_173);
        goto -> bb116;
    }

    bb115: {
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_151);
        goto -> bb119;
    }

    bb117: {
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_124);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_123);
        goto -> bb122;
    }

    bb120: {
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb121;
    }

    bb121: {
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_96);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_95);
        goto -> bb124;
    }

    bb123: {
        StorageDead(_81);
        StorageDead(_78);
        goto -> bb124;
    }

    bb124: {
        StorageDead(_77);
        goto -> bb125;
    }

    bb125: {
        StorageDead(_67);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_57);
        goto -> bb130;
    }

    bb127: {
        StorageDead(_25);
        goto -> bb128;
    }

    bb128: {
        StorageDead(_19);
        StorageDead(_16);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb130;
    }

    bb130: {
        return;
    }
}
