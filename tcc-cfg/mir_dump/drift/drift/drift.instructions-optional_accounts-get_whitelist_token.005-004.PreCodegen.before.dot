digraph Mir_0_1451 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_whitelist_token(_1: &amp;ReErased mut std::iter::Peekable&lt;std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;&gt;) -&gt; std::result::Result&lt;anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;, error::ErrorCode&gt;<br align="left"/>let _2: std::option::Option&lt;&amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _3: &amp;ReErased mut std::iter::Peekable&lt;std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;&gt;;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: &amp;ReErased std::option::Option&lt;&amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _7: !;<br align="left"/>let _8: ();<br align="left"/>let mut _9: &amp;ReErased str;<br align="left"/>let _10: &amp;ReErased str;<br align="left"/>let mut _11: error::ErrorCode;<br align="left"/>let _12: &amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _14: std::result::Result&lt;&amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _15: std::option::Option&lt;&amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: &amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _21: anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;&gt;;<br align="left"/>let mut _23: std::result::Result&lt;anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _24: std::result::Result&lt;anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _25: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _26: Closure(DefId(0:1453 ~ drift[d311]::instructions::optional_accounts::get_whitelist_token::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _27: isize;<br align="left"/>let _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _29: !;<br align="left"/>let mut _30: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _31: anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;;<br align="left"/>let mut _32: anchor_lang::prelude::Account&lt;ReErased, anchor_spl::token::TokenAccount&gt;;<br align="left"/>let mut _33: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>debug account_info_iter =&gt; _1;<br align="left"/>debug token_account_info =&gt; _2;<br align="left"/>debug token_account_info =&gt; _12;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug whitelist_token =&gt; _21;<br align="left"/>debug residual =&gt; _28;<br align="left"/>debug val =&gt; _31;<br align="left"/>>;
    bb0__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>_3 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_2 = Peekable::&lt;std::slice::Iter&lt;'_, anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt;::peek(move _3)</td></tr></table>>];
    bb1__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;_2<br/></td></tr><tr><td align="left">_5 = Option::&lt;&amp;&amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;::is_none(move _6)</td></tr></table>>];
    bb2__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb3__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = const &quot;Could not find whitelist token&quot;<br/>_9 = &amp;(*_10)<br/></td></tr><tr><td align="left">_8 = solana_program::log::sol_log(move _9)</td></tr></table>>];
    bb4__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageLive(_11)<br/>_11 = error::ErrorCode::InvalidWhitelistToken<br/>_0 = std::result::Result::&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;, error::ErrorCode&gt;::Err(move _11)<br/>StorageDead(_11)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = const ()<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = _2<br/></td></tr><tr><td align="left">_14 = &lt;Option&lt;&amp;&amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt; as SafeUnwrap&gt;::safe_unwrap(move _15)</td></tr></table>>];
    bb6__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;&amp;&amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb7__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_16 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb8__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_13 as Continue).0: &amp;&amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_12 = _20<br/>StorageDead(_20)<br/>StorageDead(_13)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_33 = deref_copy (*_12)<br/>_25 = &amp;(*_33)<br/></td></tr><tr><td align="left">_24 = anchor_lang::prelude::Account::&lt;'_, anchor_spl::token::TokenAccount&gt;::try_from(move _25)</td></tr></table>>];
    bb9__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb10__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb11__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageLive(_26)<br/>_26 = {closure@programs/drift/src/instructions/optional_accounts.rs:196:55: 196:58}<br/></td></tr><tr><td align="left">_23 = std::result::Result::&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/instructions/optional_accounts.rs:196:55: 196:58}&gt;(move _24, move _26)</td></tr></table>>];
    bb13__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb14__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_27 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb15__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = move ((_22 as Continue).0: anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;)<br/>_21 = move _31<br/>StorageDead(_31)<br/>StorageDead(_22)<br/>StorageLive(_32)<br/>_32 = move _21<br/>_0 = std::result::Result::&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;, error::ErrorCode&gt;::Ok(move _32)<br/>StorageDead(_32)<br/>StorageDead(_21)<br/>StorageDead(_12)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_30)<br/>_30 = _28<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;anchor_lang::prelude::Account&lt;'_, anchor_spl::token::TokenAccount&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _30)</td></tr></table>>];
    bb17__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left">return</td></tr></table>>];
    bb21__0_1451 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1451 -> bb1__0_1451 [label="return"];
    bb1__0_1451 -> bb2__0_1451 [label="return"];
    bb2__0_1451 -> bb5__0_1451 [label="0"];
    bb2__0_1451 -> bb3__0_1451 [label="otherwise"];
    bb3__0_1451 -> bb4__0_1451 [label="return"];
    bb4__0_1451 -> bb19__0_1451 [label=""];
    bb5__0_1451 -> bb6__0_1451 [label="return"];
    bb6__0_1451 -> bb7__0_1451 [label="return"];
    bb7__0_1451 -> bb8__0_1451 [label="0"];
    bb7__0_1451 -> bb10__0_1451 [label="1"];
    bb7__0_1451 -> bb9__0_1451 [label="otherwise"];
    bb8__0_1451 -> bb12__0_1451 [label="return"];
    bb10__0_1451 -> bb11__0_1451 [label="return"];
    bb11__0_1451 -> bb18__0_1451 [label=""];
    bb12__0_1451 -> bb13__0_1451 [label="return"];
    bb12__0_1451 -> bb21__0_1451 [label="unwind"];
    bb13__0_1451 -> bb14__0_1451 [label="return"];
    bb14__0_1451 -> bb15__0_1451 [label="0"];
    bb14__0_1451 -> bb16__0_1451 [label="1"];
    bb14__0_1451 -> bb9__0_1451 [label="otherwise"];
    bb15__0_1451 -> bb20__0_1451 [label=""];
    bb16__0_1451 -> bb17__0_1451 [label="return"];
    bb17__0_1451 -> bb18__0_1451 [label=""];
    bb18__0_1451 -> bb19__0_1451 [label=""];
    bb19__0_1451 -> bb20__0_1451 [label=""];
}
