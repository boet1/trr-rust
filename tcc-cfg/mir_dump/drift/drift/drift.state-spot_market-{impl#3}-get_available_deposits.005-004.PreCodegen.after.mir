// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_available_deposits` after PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_available_deposits(_1: &SpotMarket) -> std::result::Result<u128, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _2: u128;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _4: std::result::Result<u128, error::ErrorCode>;
    let mut _5: u128;
    let mut _6: &state::spot_market::SpotMarket;
    let mut _7: &state::spot_market::SpotBalanceType;
    let _8: &state::spot_market::SpotBalanceType;
    let _9: state::spot_market::SpotBalanceType;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: u128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _17: std::result::Result<u128, error::ErrorCode>;
    let mut _18: u128;
    let mut _19: &state::spot_market::SpotMarket;
    let mut _20: &state::spot_market::SpotBalanceType;
    let _21: &state::spot_market::SpotBalanceType;
    let _22: state::spot_market::SpotBalanceType;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: u128;
    let mut _29: u128;
    let mut _31: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug deposit_token_amount => _2;
        let _15: u128;
        let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _27: u128;
        let mut _30: &state::spot_market::SpotBalanceType;
        scope 6 {
            debug borrow_token_amount => _15;
        }
        scope 7 {
            debug residual => _24;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _27;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).11: u128);
        StorageLive(_6);
        _6 = &(*_1);
        StorageLive(_7);
        StorageLive(_8);
        _31 = const _;
        _8 = &(*_31);
        _7 = &(*_8);
        _4 = get_token_amount(move _5, move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _3 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        _10 = discriminant(_3);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_3 as Continue).0: u128);
        _2 = _14;
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_3);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_1).12: u128);
        StorageLive(_19);
        _19 = &(*_1);
        StorageLive(_20);
        StorageLive(_21);
        _30 = const _;
        _21 = &(*_30);
        _20 = &(*_21);
        _17 = get_token_amount(move _18, move _19, move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_3);
        goto -> bb13;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        _23 = discriminant(_16);
        switchInt(move _23) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_27);
        _27 = ((_16 as Continue).0: u128);
        _15 = _27;
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_16);
        StorageLive(_28);
        _28 = _2;
        StorageLive(_29);
        _29 = _15;
        _0 = <u128 as SafeMath>::safe_sub(move _28, move _29) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_15);
        StorageDead(_2);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_2);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}
