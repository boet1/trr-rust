digraph Mir_0_4568 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn validate_spot_limit_order(_1: &amp;ReErased state::user::Order, _2: u64, _3: u64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _6: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased state::user::Order;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: ();<br align="left"/>let _16: ();<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: state::user::Order;<br align="left"/>let mut _21: !;<br align="left"/>let _22: ();<br align="left"/>let mut _23: &amp;ReErased str;<br align="left"/>let _24: &amp;ReErased str;<br align="left"/>let mut _25: error::ErrorCode;<br align="left"/>let _26: ();<br align="left"/>let mut _27: bool;<br align="left"/>let mut _28: state::user::Order;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: u64;<br align="left"/>let mut _31: !;<br align="left"/>let _32: ();<br align="left"/>let mut _33: &amp;ReErased str;<br align="left"/>let _34: &amp;ReErased str;<br align="left"/>let mut _35: error::ErrorCode;<br align="left"/>let _36: ();<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: !;<br align="left"/>let _40: ();<br align="left"/>let mut _41: &amp;ReErased str;<br align="left"/>let _42: &amp;ReErased str;<br align="left"/>let mut _43: error::ErrorCode;<br align="left"/>let _44: ();<br align="left"/>let mut _45: bool;<br align="left"/>let _46: ();<br align="left"/>let mut _47: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _48: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _49: bool;<br align="left"/>let mut _50: &amp;ReErased state::user::Order;<br align="left"/>let mut _51: ();<br align="left"/>let _52: error::ErrorCode;<br align="left"/>let _53: ();<br align="left"/>let mut _54: &amp;ReErased str;<br align="left"/>let _55: &amp;ReErased str;<br align="left"/>let mut _56: &amp;ReErased std::string::String;<br align="left"/>let _57: &amp;ReErased std::string::String;<br align="left"/>let _58: std::string::String;<br align="left"/>let _59: std::string::String;<br align="left"/>let mut _60: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _61: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _62: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _63: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _64: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _65: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _66: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _67: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _68: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _69: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _70: &amp;ReErased error::ErrorCode;<br align="left"/>let _71: &amp;ReErased error::ErrorCode;<br align="left"/>let _72: ();<br align="left"/>let mut _73: &amp;ReErased str;<br align="left"/>let _74: &amp;ReErased str;<br align="left"/>let mut _75: error::ErrorCode;<br align="left"/>let mut _76: isize;<br align="left"/>let _77: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _78: !;<br align="left"/>let mut _79: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _80: ();<br align="left"/>let _81: ();<br align="left"/>let mut _82: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _83: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _84: &amp;ReErased state::user::Order;<br align="left"/>let mut _85: isize;<br align="left"/>let _86: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _87: !;<br align="left"/>let mut _88: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _89: ();<br align="left"/>let mut _90: ();<br align="left"/>let mut _91: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>debug order =&gt; _1;<br align="left"/>debug step_size =&gt; _2;<br align="left"/>debug min_order_size =&gt; _3;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug error_code =&gt; _52;<br align="left"/>debug res =&gt; _59;<br align="left"/>debug residual =&gt; _77;<br align="left"/>debug val =&gt; _80;<br align="left"/>debug residual =&gt; _86;<br align="left"/>debug val =&gt; _89;<br align="left"/>>;
    bb0__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/>StorageLive(_8)<br/>_8 = _2<br/>StorageLive(_9)<br/>_9 = _3<br/>StorageLive(_10)<br/>_10 = ((*_1).18: bool)<br/></td></tr><tr><td align="left">_6 = validate_base_asset_amount(move _7, move _8, move _9, move _10)</td></tr></table>>];
    bb1__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_11 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_5 as Continue).0: ())<br/>_4 = _15<br/>StorageDead(_15)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = ((*_1).1: u64)<br/>_17 = Eq(move _18, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb4__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb6__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = (*_1)<br/></td></tr><tr><td align="left">_19 = Order::has_oracle_price_offset(move _20)</td></tr></table>>];
    bb8__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb10__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = const &quot;Limit order price == 0&quot;<br/>_23 = &amp;(*_24)<br/></td></tr><tr><td align="left">_22 = solana_program::log::sol_log(move _23)</td></tr></table>>];
    bb12__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageLive(_25)<br/>_25 = error::ErrorCode::InvalidOrderLimitPrice<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _25)<br/>StorageDead(_25)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_16 = const ()<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = (*_1)<br/></td></tr><tr><td align="left">_27 = Order::has_oracle_price_offset(move _28)</td></tr></table>>];
    bb14__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb15__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = ((*_1).1: u64)<br/>_29 = Ne(move _30, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _29)</td></tr></table>>];
    bb16__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = const &quot;Limit order price must be 0 for taker oracle offset order&quot;<br/>_33 = &amp;(*_34)<br/></td></tr><tr><td align="left">_32 = solana_program::log::sol_log(move _33)</td></tr></table>>];
    bb17__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_34)<br/>StorageDead(_32)<br/>StorageLive(_35)<br/>_35 = error::ErrorCode::InvalidOrderOracleOffset<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _35)<br/>StorageDead(_35)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_26 = const ()<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = ((*_1).5: u64)<br/>_37 = Gt(move _38, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb21__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = const &quot;Limit order should not have trigger price&quot;<br/>_41 = &amp;(*_42)<br/></td></tr><tr><td align="left">_40 = solana_program::log::sol_log(move _41)</td></tr></table>>];
    bb22__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_36 = const ()<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = ((*_1).19: bool)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb23__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_42)<br/>StorageDead(_40)<br/>StorageLive(_43)<br/>_43 = error::ErrorCode::InvalidOrderTrigger<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _43)<br/>StorageDead(_43)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = &amp;(*_1)<br/></td></tr><tr><td align="left">_49 = Order::has_auction(move _50)</td></tr></table>>];
    bb25__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_44 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">switchInt(move _49)</td></tr></table>>];
    bb27__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageLive(_52)<br/>_52 = error::ErrorCode::InvalidOrder<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_91 = const _<br/>_63 = &amp;(*_91)<br/>_62 = &amp;(*_63)<br/>_61 = move _62 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_62)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;_52<br/>_70 = &amp;(*_71)<br/></td></tr><tr><td align="left">_69 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _70)</td></tr></table>>];
    bb28__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageLive(_51)<br/>_51 = ()<br/>_48 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _51)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_68 = [move _69]<br/>StorageDead(_69)<br/>_67 = &amp;_68<br/>_66 = &amp;(*_67)<br/>_65 = move _66 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_60 = Arguments::&lt;'_&gt;::new_v1(move _61, move _65)</td></tr></table>>];
    bb30__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">_59 = format(move _60)</td></tr></table>>];
    bb31__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_71)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageDead(_63)<br/>_58 = move _59<br/>StorageDead(_59)<br/>_57 = &amp;_58<br/>_56 = &amp;(*_57)<br/></td></tr><tr><td align="left">_55 = &lt;String as Deref&gt;::deref(move _56)</td></tr></table>>];
    bb32__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_54 = &amp;(*_55)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">_53 = solana_program::log::sol_log(move _54)</td></tr></table>>];
    bb33__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/></td></tr><tr><td align="left">drop(_58)</td></tr></table>>];
    bb34__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_55)<br/>StorageDead(_53)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = const &quot;post only limit order cant have auction&quot;<br/>_73 = &amp;(*_74)<br/></td></tr><tr><td align="left">_72 = solana_program::log::sol_log(move _73)</td></tr></table>>];
    bb35__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageDead(_74)<br/>StorageDead(_72)<br/>StorageLive(_75)<br/>_75 = _52<br/>_48 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _75)<br/>StorageDead(_75)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/></td></tr><tr><td align="left">_47 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _48)</td></tr></table>>];
    bb37__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_76 = discriminant(_47)<br/></td></tr><tr><td align="left">switchInt(move _76)</td></tr></table>>];
    bb38__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_80)<br/>_80 = ((_47 as Continue).0: ())<br/>_46 = _80<br/>StorageDead(_80)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>_44 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_77)<br/>_77 = ((_47 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_79)<br/>_79 = _77<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _79)</td></tr></table>>];
    bb40__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageDead(_77)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>_84 = &amp;(*_1)<br/></td></tr><tr><td align="left">_83 = validate_limit_order_auction_params(move _84)</td></tr></table>>];
    bb42__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/></td></tr><tr><td align="left">_82 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _83)</td></tr></table>>];
    bb43__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>_85 = discriminant(_82)<br/></td></tr><tr><td align="left">switchInt(move _85)</td></tr></table>>];
    bb44__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_89)<br/>_89 = ((_82 as Continue).0: ())<br/>_81 = _89<br/>StorageDead(_89)<br/>StorageDead(_82)<br/>StorageDead(_81)<br/>StorageLive(_90)<br/>_90 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _90)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_86)<br/>_86 = ((_82 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_88)<br/>_88 = _86<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _88)</td></tr></table>>];
    bb46__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_86)<br/>StorageDead(_82)<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left">return</td></tr></table>>];
    bb48__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">48 (cleanup)</td></tr><tr><td align="left">drop(_58)</td></tr></table>>];
    bb49__0_4568 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">49 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_4568 -> bb1__0_4568 [label="return"];
    bb1__0_4568 -> bb2__0_4568 [label="return"];
    bb2__0_4568 -> bb3__0_4568 [label="0"];
    bb2__0_4568 -> bb5__0_4568 [label="1"];
    bb2__0_4568 -> bb4__0_4568 [label="otherwise"];
    bb3__0_4568 -> bb8__0_4568 [label="0"];
    bb3__0_4568 -> bb7__0_4568 [label="otherwise"];
    bb5__0_4568 -> bb6__0_4568 [label="return"];
    bb6__0_4568 -> bb47__0_4568 [label=""];
    bb7__0_4568 -> bb9__0_4568 [label="return"];
    bb8__0_4568 -> bb13__0_4568 [label=""];
    bb9__0_4568 -> bb11__0_4568 [label="0"];
    bb9__0_4568 -> bb10__0_4568 [label="otherwise"];
    bb10__0_4568 -> bb13__0_4568 [label=""];
    bb11__0_4568 -> bb12__0_4568 [label="return"];
    bb12__0_4568 -> bb47__0_4568 [label=""];
    bb13__0_4568 -> bb14__0_4568 [label="return"];
    bb14__0_4568 -> bb19__0_4568 [label="0"];
    bb14__0_4568 -> bb15__0_4568 [label="otherwise"];
    bb15__0_4568 -> bb18__0_4568 [label="0"];
    bb15__0_4568 -> bb16__0_4568 [label="otherwise"];
    bb16__0_4568 -> bb17__0_4568 [label="return"];
    bb17__0_4568 -> bb47__0_4568 [label=""];
    bb18__0_4568 -> bb20__0_4568 [label=""];
    bb19__0_4568 -> bb20__0_4568 [label=""];
    bb20__0_4568 -> bb22__0_4568 [label="0"];
    bb20__0_4568 -> bb21__0_4568 [label="otherwise"];
    bb21__0_4568 -> bb23__0_4568 [label="return"];
    bb22__0_4568 -> bb25__0_4568 [label="0"];
    bb22__0_4568 -> bb24__0_4568 [label="otherwise"];
    bb23__0_4568 -> bb47__0_4568 [label=""];
    bb24__0_4568 -> bb26__0_4568 [label="return"];
    bb25__0_4568 -> bb41__0_4568 [label=""];
    bb26__0_4568 -> bb28__0_4568 [label="0"];
    bb26__0_4568 -> bb27__0_4568 [label="otherwise"];
    bb27__0_4568 -> bb29__0_4568 [label="return"];
    bb28__0_4568 -> bb36__0_4568 [label=""];
    bb29__0_4568 -> bb30__0_4568 [label="return"];
    bb30__0_4568 -> bb31__0_4568 [label="return"];
    bb31__0_4568 -> bb32__0_4568 [label="return"];
    bb31__0_4568 -> bb48__0_4568 [label="unwind"];
    bb32__0_4568 -> bb33__0_4568 [label="return"];
    bb32__0_4568 -> bb48__0_4568 [label="unwind"];
    bb33__0_4568 -> bb34__0_4568 [label="return"];
    bb33__0_4568 -> bb49__0_4568 [label="unwind"];
    bb34__0_4568 -> bb35__0_4568 [label="return"];
    bb35__0_4568 -> bb36__0_4568 [label=""];
    bb36__0_4568 -> bb37__0_4568 [label="return"];
    bb37__0_4568 -> bb38__0_4568 [label="0"];
    bb37__0_4568 -> bb39__0_4568 [label="1"];
    bb37__0_4568 -> bb4__0_4568 [label="otherwise"];
    bb38__0_4568 -> bb41__0_4568 [label=""];
    bb39__0_4568 -> bb40__0_4568 [label="return"];
    bb40__0_4568 -> bb47__0_4568 [label=""];
    bb41__0_4568 -> bb42__0_4568 [label="return"];
    bb42__0_4568 -> bb43__0_4568 [label="return"];
    bb43__0_4568 -> bb44__0_4568 [label="0"];
    bb43__0_4568 -> bb45__0_4568 [label="1"];
    bb43__0_4568 -> bb4__0_4568 [label="otherwise"];
    bb44__0_4568 -> bb47__0_4568 [label=""];
    bb45__0_4568 -> bb46__0_4568 [label="return"];
    bb46__0_4568 -> bb47__0_4568 [label=""];
    bb48__0_4568 -> bb49__0_4568 [label="return"];
}
