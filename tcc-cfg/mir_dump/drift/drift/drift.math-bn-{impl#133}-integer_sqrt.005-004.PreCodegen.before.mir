// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::integer_sqrt` before PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::integer_sqrt(_1: &U192) -> U192 {
    debug self => _1;
    let mut _0: math::bn::U192;
    let _2: math::bn::U192;
    let _3: ();
    let mut _4: bool;
    let mut _5: &&math::bn::U192;
    let mut _6: &&math::bn::U192;
    let _7: &math::bn::U192;
    let _8: &math::bn::U192;
    let mut _9: !;
    let mut _11: u32;
    let mut _12: u32;
    let mut _13: usize;
    let mut _14: &math::bn::U192;
    let mut _15: (u32, bool);
    let mut _16: bool;
    let mut _18: math::bn::U192;
    let mut _19: u32;
    let mut _20: !;
    let mut _21: ();
    let mut _23: math::bn::U192;
    let mut _24: math::bn::U192;
    let mut _25: math::bn::U192;
    let mut _26: &math::bn::U192;
    let mut _27: math::bn::U192;
    let _28: ();
    let mut _29: bool;
    let mut _30: &math::bn::U192;
    let mut _31: &math::bn::U192;
    let mut _32: !;
    let mut _33: math::bn::U192;
    scope 1 {
        debug one => _2;
        let _10: u32;
        scope 2 {
            debug shift => _10;
            let mut _17: math::bn::U192;
            scope 3 {
                debug x_prev => _17;
                let _22: math::bn::U192;
                scope 4 {
                    debug x => _22;
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = U192::one() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_2;
        _7 = &(*_8);
        _6 = &_7;
        _4 = <&U192 as PartialOrd>::le(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _0 = (*_1);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb16;
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_1);
        _13 = U192::bits(move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_14);
        _12 = move _13 as u32 (IntToInt);
        StorageDead(_13);
        _15 = CheckedAdd(_12, const 1_u32);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, const 1_u32) -> [success: bb6, unwind continue];
    }

    bb6: {
        _11 = move (_15.0: u32);
        StorageDead(_12);
        _16 = Eq(const 2_u32, const 0_u32);
        assert(!move _16, "attempt to divide `{}` by zero", _11) -> [success: bb7, unwind continue];
    }

    bb7: {
        _10 = Div(move _11, const 2_u32);
        StorageDead(_11);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _2;
        StorageLive(_19);
        _19 = _10;
        _17 = <U192 as Shl<u32>>::shl(move _18, move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_20);
        goto -> bb9;
    }

    bb9: {
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _17;
        StorageLive(_25);
        StorageLive(_26);
        _26 = _1;
        StorageLive(_27);
        _27 = _17;
        _25 = <&U192 as Div<U192>>::div(move _26, move _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_27);
        StorageDead(_26);
        _23 = <U192 as Add>::add(move _24, move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = <U192 as Shr<i32>>::shr(move _23, const 1_i32) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_23);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_22;
        StorageLive(_31);
        _31 = &_17;
        _29 = <U192 as PartialOrd>::ge(move _30, move _31) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _29) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_30);
        _0 = _17;
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_10);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = const ();
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_33);
        _33 = _22;
        _17 = move _33;
        StorageDead(_33);
        _21 = const ();
        StorageDead(_22);
        goto -> bb9;
    }

    bb16: {
        StorageDead(_2);
        return;
    }
}
