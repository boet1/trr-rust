digraph Mir_0_2401 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_liquidation_fee(_1: u32, _2: u32, _3: u64, _4: u64) -&gt; std::result::Result&lt;u32, error::ErrorCode&gt;<br align="left"/>let _5: u64;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _7: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _14: u64;<br align="left"/>let _15: ();<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: u64;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: u32;<br align="left"/>let _20: u32;<br align="left"/>let mut _21: u32;<br align="left"/>let mut _22: u32;<br align="left"/>let mut _23: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _26: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _27: u64;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _30: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: u64;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: u64;<br align="left"/>let mut _41: u32;<br align="left"/>let mut _42: u32;<br align="left"/>let mut _43: u32;<br align="left"/>debug base_liquidation_fee =&gt; _1;<br align="left"/>debug max_liquidation_fee =&gt; _2;<br align="left"/>debug last_active_user_slot =&gt; _3;<br align="left"/>debug current_slot =&gt; _4;<br align="left"/>debug slots_elapsed =&gt; _5;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>debug liquidation_fee =&gt; _20;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>>;
    bb0__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _4<br/>StorageLive(_9)<br/>_9 = _3<br/></td></tr><tr><td align="left">_7 = &lt;u64 as SafeMath&gt;::safe_sub(move _8, move _9)</td></tr></table>>];
    bb1__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb2__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_10 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb3__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_6 as Continue).0: u64)<br/>_5 = _14<br/>StorageDead(_14)<br/>StorageDead(_6)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _5<br/>_16 = Lt(move _17, const _)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb4__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_13)<br/>_13 = _11<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb6__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageLive(_19)<br/>_19 = _1<br/>_0 = std::result::Result::&lt;u32, error::ErrorCode&gt;::Ok(move _19)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_15 = const ()<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _1<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _5<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/></td></tr><tr><td align="left">_30 = &lt;u32 as Cast&gt;::cast::&lt;u64&gt;(const _)</td></tr></table>>];
    bb9__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">_29 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _30)</td></tr></table>>];
    bb10__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_31 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb11__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_29 as Continue).0: u64)<br/>_28 = _35<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_26 = &lt;u64 as SafeMath&gt;::safe_mul(move _27, move _28)</td></tr></table>>];
    bb12__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_29 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb13__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">_25 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _26)</td></tr></table>>];
    bb15__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_36 = discriminant(_25)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb16__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_25 as Continue).0: u64)<br/>_24 = _40<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">_23 = &lt;u64 as Cast&gt;::cast::&lt;u32&gt;(move _24)</td></tr></table>>];
    bb17__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_25 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb18__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = std::result::Result::&lt;u32, error::ErrorCode&gt;::unwrap_or(move _23, const _)</td></tr></table>>];
    bb20__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/></td></tr><tr><td align="left">_20 = core::num::&lt;impl u32&gt;::saturating_add(move _21, move _22)</td></tr></table>>];
    bb21__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_29)<br/>StorageDead(_25)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = _20<br/>StorageLive(_43)<br/>_43 = _2<br/></td></tr><tr><td align="left">_41 = &lt;u32 as Ord&gt;::min(move _42, move _43)</td></tr></table>>];
    bb22__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/>_0 = std::result::Result::&lt;u32, error::ErrorCode&gt;::Ok(move _41)<br/>StorageDead(_41)<br/>StorageDead(_20)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_29)<br/>StorageDead(_25)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_2401 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2401 -> bb1__0_2401 [label="return"];
    bb1__0_2401 -> bb2__0_2401 [label="return"];
    bb2__0_2401 -> bb3__0_2401 [label="0"];
    bb2__0_2401 -> bb5__0_2401 [label="1"];
    bb2__0_2401 -> bb4__0_2401 [label="otherwise"];
    bb3__0_2401 -> bb8__0_2401 [label="0"];
    bb3__0_2401 -> bb7__0_2401 [label="otherwise"];
    bb5__0_2401 -> bb6__0_2401 [label="return"];
    bb6__0_2401 -> bb24__0_2401 [label=""];
    bb7__0_2401 -> bb24__0_2401 [label=""];
    bb8__0_2401 -> bb9__0_2401 [label="return"];
    bb9__0_2401 -> bb10__0_2401 [label="return"];
    bb10__0_2401 -> bb11__0_2401 [label="0"];
    bb10__0_2401 -> bb12__0_2401 [label="1"];
    bb10__0_2401 -> bb4__0_2401 [label="otherwise"];
    bb11__0_2401 -> bb14__0_2401 [label="return"];
    bb12__0_2401 -> bb13__0_2401 [label="return"];
    bb13__0_2401 -> bb23__0_2401 [label=""];
    bb14__0_2401 -> bb15__0_2401 [label="return"];
    bb15__0_2401 -> bb16__0_2401 [label="0"];
    bb15__0_2401 -> bb17__0_2401 [label="1"];
    bb15__0_2401 -> bb4__0_2401 [label="otherwise"];
    bb16__0_2401 -> bb19__0_2401 [label="return"];
    bb17__0_2401 -> bb18__0_2401 [label="return"];
    bb18__0_2401 -> bb23__0_2401 [label=""];
    bb19__0_2401 -> bb20__0_2401 [label="return"];
    bb20__0_2401 -> bb21__0_2401 [label="return"];
    bb21__0_2401 -> bb22__0_2401 [label="return"];
    bb22__0_2401 -> bb25__0_2401 [label=""];
    bb23__0_2401 -> bb24__0_2401 [label=""];
    bb24__0_2401 -> bb25__0_2401 [label=""];
}
