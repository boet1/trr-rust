// MIR for `calculate_filler_multiplier_for_matched_orders` before PreCodegen

fn calculate_filler_multiplier_for_matched_orders(_1: u64, _2: controller::position::PositionDirection, _3: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug maker_price => _1;
    debug maker_direction => _2;
    debug oracle_price => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _4: i64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _6: std::result::Result<i64, error::ErrorCode>;
    let mut _7: i128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _9: std::result::Result<i128, error::ErrorCode>;
    let mut _10: i128;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _12: std::result::Result<i128, error::ErrorCode>;
    let mut _13: i128;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _15: std::result::Result<i128, error::ErrorCode>;
    let mut _16: i64;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _18: std::result::Result<i64, error::ErrorCode>;
    let mut _19: i64;
    let mut _20: i64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _22: std::result::Result<i64, error::ErrorCode>;
    let mut _23: u64;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: i64;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: i64;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: i128;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: i128;
    let mut _44: i128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _46: std::result::Result<i128, error::ErrorCode>;
    let mut _47: i64;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: i128;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: i128;
    let mut _58: isize;
    let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _62: i64;
    let mut _64: i64;
    let mut _65: i64;
    let mut _66: isize;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _68: std::result::Result<i64, error::ErrorCode>;
    let mut _69: i64;
    let mut _70: i64;
    let mut _71: bool;
    let mut _72: i64;
    let mut _73: (i64, bool);
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _80: std::result::Result<i64, error::ErrorCode>;
    let mut _81: i64;
    let mut _82: i64;
    let mut _83: (i64, bool);
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: i64;
    let mut _90: (i64, bool);
    let mut _91: i64;
    scope 1 {
        debug price_pct_diff => _4;
        let _63: i64;
        let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _78: i64;
        let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _88: i64;
        scope 30 {
            debug multiplier => _63;
        }
        scope 31 {
            debug residual => _75;
            scope 32 {
            }
        }
        scope 33 {
            debug val => _78;
            scope 34 {
            }
        }
        scope 35 {
            debug residual => _85;
            scope 36 {
            }
        }
        scope 37 {
            debug val => _88;
            scope 38 {
            }
        }
    }
    scope 2 {
        debug residual => _25;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _28;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _30;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _33;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _35;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _38;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _40;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _43;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _49;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _52;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _54;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _57;
        scope 25 {
        }
    }
    scope 26 {
        debug residual => _59;
        scope 27 {
        }
    }
    scope 28 {
        debug val => _62;
        scope 29 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _3;
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _1;
        _22 = <u64 as Cast>::cast::<i64>(move _23) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_23);
        _21 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _22) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_22);
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_28);
        _28 = ((_21 as Continue).0: i64);
        _20 = _28;
        StorageDead(_28);
        _18 = <i64 as SafeMath>::safe_sub(move _19, move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_25);
        _25 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb60;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _29 = discriminant(_17);
        switchInt(move _29) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_33);
        _33 = ((_17 as Continue).0: i64);
        _16 = _33;
        StorageDead(_33);
        _15 = <i64 as Cast>::cast::<i128>(move _16) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_30);
        _30 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_30);
        goto -> bb60;
    }

    bb12: {
        StorageDead(_16);
        _14 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_15);
        _34 = discriminant(_14);
        switchInt(move _34) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_38);
        _38 = ((_14 as Continue).0: i128);
        _13 = _38;
        StorageDead(_38);
        _12 = <i128 as SafeMath>::safe_mul(move _13, const _) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_35);
        _35 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb61;
    }

    bb17: {
        StorageDead(_13);
        _11 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _12) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_12);
        _39 = discriminant(_11);
        switchInt(move _39) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_43);
        _43 = ((_11 as Continue).0: i128);
        _10 = _43;
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _3;
        _46 = <i64 as Cast>::cast::<i128>(move _47) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_40);
        _40 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb62;
    }

    bb22: {
        StorageDead(_47);
        _45 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: i128);
        _44 = _52;
        StorageDead(_52);
        _9 = <i128 as SafeMath>::safe_div(move _10, move _44) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb58;
    }

    bb27: {
        StorageDead(_44);
        StorageDead(_10);
        _8 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_9);
        _53 = discriminant(_8);
        switchInt(move _53) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_57);
        _57 = ((_8 as Continue).0: i128);
        _7 = _57;
        StorageDead(_57);
        _6 = <i128 as Cast>::cast::<i64>(move _7) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_54);
        _54 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb58;
    }

    bb32: {
        StorageDead(_7);
        _5 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_6);
        _58 = discriminant(_5);
        switchInt(move _58) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_62);
        _62 = ((_5 as Continue).0: i64);
        _4 = _62;
        StorageDead(_62);
        StorageDead(_45);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _66 = discriminant(_2);
        switchInt(move _66) -> [0: bb38, 1: bb37, otherwise: bb4];
    }

    bb35: {
        StorageLive(_59);
        _59 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_61);
        StorageDead(_59);
        goto -> bb59;
    }

    bb37: {
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _4;
        StorageLive(_82);
        _83 = CheckedMul(const _, const 2_i64);
        assert(!move (_83.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 2_i64) -> [success: bb46, unwind continue];
    }

    bb38: {
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _4;
        _71 = Eq(_70, const i64::MIN);
        assert(!move _71, "attempt to negate `{}`, which would overflow", _70) -> [success: bb39, unwind continue];
    }

    bb39: {
        _69 = Neg(move _70);
        StorageDead(_70);
        StorageLive(_72);
        _73 = CheckedMul(const _, const 2_i64);
        assert(!move (_73.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 2_i64) -> [success: bb40, unwind continue];
    }

    bb40: {
        _72 = move (_73.0: i64);
        _68 = <i64 as SafeMath>::safe_add(move _69, move _72) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_72);
        StorageDead(_69);
        _67 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _68) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_68);
        _74 = discriminant(_67);
        switchInt(move _74) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_78);
        _78 = ((_67 as Continue).0: i64);
        _65 = _78;
        StorageDead(_78);
        StorageDead(_67);
        goto -> bb52;
    }

    bb44: {
        StorageLive(_75);
        _75 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_67);
        goto -> bb57;
    }

    bb46: {
        _82 = move (_83.0: i64);
        _80 = <i64 as SafeMath>::safe_add(move _81, move _82) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_82);
        StorageDead(_81);
        _79 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _80) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_80);
        _84 = discriminant(_79);
        switchInt(move _84) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_88);
        _88 = ((_79 as Continue).0: i64);
        _65 = _88;
        StorageDead(_88);
        StorageDead(_79);
        goto -> bb52;
    }

    bb50: {
        StorageLive(_85);
        _85 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_79);
        goto -> bb57;
    }

    bb52: {
        _64 = <i64 as Ord>::max(move _65, const _) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_65);
        StorageLive(_89);
        _90 = CheckedMul(const _, const 100_i64);
        assert(!move (_90.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 100_i64) -> [success: bb54, unwind continue];
    }

    bb54: {
        _89 = move (_90.0: i64);
        _63 = <i64 as Ord>::min(move _64, move _89) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_89);
        StorageDead(_64);
        StorageLive(_91);
        _91 = _63;
        _0 = <i64 as Cast>::cast::<u64>(move _91) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_91);
        StorageDead(_63);
        StorageDead(_4);
        goto -> bb65;
    }

    bb57: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb64;
    }

    bb58: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_45);
        goto -> bb63;
    }

    bb60: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_4);
        goto -> bb65;
    }

    bb65: {
        return;
    }
}
