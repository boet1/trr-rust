// MIR for `openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:36:19: 36:28>::eq` after PreCodegen

fn openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:36:19: 36:28>::eq(_1: &OpenbookV2FulfillmentConfig, _2: &OpenbookV2FulfillmentConfig) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let mut _6: bool;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::Pubkey;
    let mut _9: bool;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &anchor_lang::prelude::Pubkey;
    let mut _12: bool;
    let mut _13: &anchor_lang::prelude::Pubkey;
    let mut _14: &anchor_lang::prelude::Pubkey;
    let mut _15: bool;
    let mut _16: &anchor_lang::prelude::Pubkey;
    let mut _17: &anchor_lang::prelude::Pubkey;
    let mut _18: bool;
    let mut _19: &anchor_lang::prelude::Pubkey;
    let mut _20: &anchor_lang::prelude::Pubkey;
    let mut _21: bool;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let mut _23: &anchor_lang::prelude::Pubkey;
    let mut _24: bool;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &anchor_lang::prelude::Pubkey;
    let mut _27: bool;
    let mut _28: &anchor_lang::prelude::Pubkey;
    let mut _29: &anchor_lang::prelude::Pubkey;
    let mut _30: bool;
    let mut _31: u16;
    let mut _32: u16;
    let mut _33: bool;
    let mut _34: &instructions::keeper::SpotFulfillmentType;
    let mut _35: &instructions::keeper::SpotFulfillmentType;
    let mut _36: bool;
    let mut _37: &state::spot_market::SpotFulfillmentConfigStatus;
    let mut _38: &state::spot_market::SpotFulfillmentConfigStatus;
    let mut _39: &[u8; 4];
    let mut _40: &[u8; 4];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        _5 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb35, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: anchor_lang::prelude::Pubkey);
        StorageLive(_8);
        _8 = &((*_2).1: anchor_lang::prelude::Pubkey);
        _6 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb34, otherwise: bb4];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: anchor_lang::prelude::Pubkey);
        StorageLive(_11);
        _11 = &((*_2).2: anchor_lang::prelude::Pubkey);
        _9 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _9) -> [0: bb33, otherwise: bb6];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: anchor_lang::prelude::Pubkey);
        StorageLive(_14);
        _14 = &((*_2).3: anchor_lang::prelude::Pubkey);
        _12 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _13, move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _12) -> [0: bb32, otherwise: bb8];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: anchor_lang::prelude::Pubkey);
        StorageLive(_17);
        _17 = &((*_2).4: anchor_lang::prelude::Pubkey);
        _15 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _16, move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _15) -> [0: bb31, otherwise: bb10];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: anchor_lang::prelude::Pubkey);
        StorageLive(_20);
        _20 = &((*_2).5: anchor_lang::prelude::Pubkey);
        _18 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _19, move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _18) -> [0: bb30, otherwise: bb12];
    }

    bb12: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &((*_1).6: anchor_lang::prelude::Pubkey);
        StorageLive(_23);
        _23 = &((*_2).6: anchor_lang::prelude::Pubkey);
        _21 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _22, move _23) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _21) -> [0: bb29, otherwise: bb14];
    }

    bb14: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &((*_1).7: anchor_lang::prelude::Pubkey);
        StorageLive(_26);
        _26 = &((*_2).7: anchor_lang::prelude::Pubkey);
        _24 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _25, move _26) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _24) -> [0: bb28, otherwise: bb16];
    }

    bb16: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &((*_1).8: anchor_lang::prelude::Pubkey);
        StorageLive(_29);
        _29 = &((*_2).8: anchor_lang::prelude::Pubkey);
        _27 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _28, move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _27) -> [0: bb27, otherwise: bb18];
    }

    bb18: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        _31 = ((*_1).9: u16);
        StorageLive(_32);
        _32 = ((*_2).9: u16);
        _30 = Eq(move _31, move _32);
        switchInt(move _30) -> [0: bb26, otherwise: bb19];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_1).10: instructions::keeper::SpotFulfillmentType);
        StorageLive(_35);
        _35 = &((*_2).10: instructions::keeper::SpotFulfillmentType);
        _33 = <keeper::SpotFulfillmentType as PartialEq>::eq(move _34, move _35) -> [return: bb20, unwind continue];
    }

    bb20: {
        switchInt(move _33) -> [0: bb25, otherwise: bb21];
    }

    bb21: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &((*_1).11: state::spot_market::SpotFulfillmentConfigStatus);
        StorageLive(_38);
        _38 = &((*_2).11: state::spot_market::SpotFulfillmentConfigStatus);
        _36 = <state::spot_market::SpotFulfillmentConfigStatus as PartialEq>::eq(move _37, move _38) -> [return: bb22, unwind continue];
    }

    bb22: {
        switchInt(move _36) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_39);
        _39 = &((*_1).12: [u8; 4]);
        StorageLive(_40);
        _40 = &((*_2).12: [u8; 4]);
        _0 = <[u8; 4] as PartialEq>::eq(move _39, move _40) -> [return: bb37, unwind continue];
    }

    bb24: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb36;
    }

    bb25: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb36;
    }

    bb26: {
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb36;
    }

    bb27: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb36;
    }

    bb28: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb36;
    }

    bb29: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb36;
    }

    bb30: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb36;
    }

    bb31: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb36;
    }

    bb32: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb36;
    }

    bb33: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb36;
    }

    bb34: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb36;
    }

    bb35: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb36;
    }

    bb36: {
        _0 = const false;
        goto -> bb38;
    }

    bb37: {
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
