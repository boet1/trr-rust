// MIR for `state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::is_available` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::is_available(_1: &PerpPosition) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: &state::user::PerpPosition;
    let mut _4: bool;
    let mut _5: &state::user::PerpPosition;
    let mut _6: bool;
    let mut _7: &state::user::PerpPosition;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &(*_1);
        _2 = PerpPosition::is_open_position(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_3);
        goto -> bb7;
    }

    bb3: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = PerpPosition::has_open_order(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_5);
        goto -> bb7;
    }

    bb6: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = PerpPosition::has_unsettled_pnl(move _7) -> [return: bb8, unwind continue];
    }

    bb7: {
        _0 = const false;
        goto -> bb9;
    }

    bb8: {
        StorageDead(_7);
        _0 = Not(move _6);
        StorageDead(_6);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_4);
        StorageDead(_2);
        return;
    }
}
