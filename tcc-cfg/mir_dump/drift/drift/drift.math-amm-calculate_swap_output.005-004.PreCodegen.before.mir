// MIR for `calculate_swap_output` before PreCodegen

fn calculate_swap_output(_1: u128, _2: u128, _3: SwapDirection, _4: u128) -> std::result::Result<(u128, u128), error::ErrorCode> {
    debug swap_amount => _1;
    debug input_asset_reserve => _2;
    debug direction => _3;
    debug invariant_sqrt => _4;
    let mut _0: std::result::Result<(u128, u128), error::ErrorCode>;
    let _5: math::bn::U192;
    let mut _6: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _9: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _10: math::bn::U192;
    let mut _11: math::bn::U192;
    let mut _12: isize;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: ();
    let mut _18: bool;
    let mut _19: &controller::amm::SwapDirection;
    let mut _20: &controller::amm::SwapDirection;
    let _21: controller::amm::SwapDirection;
    let mut _22: bool;
    let mut _23: u128;
    let mut _24: u128;
    let mut _25: !;
    let _26: ();
    let mut _27: &str;
    let _28: &str;
    let mut _29: &std::string::String;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[&str; 2];
    let _36: &[&str; 2];
    let _37: [&str; 2];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let mut _39: &[core::fmt::rt::Argument<'_>; 2];
    let _40: &[core::fmt::rt::Argument<'_>; 2];
    let _41: [core::fmt::rt::Argument<'_>; 2];
    let mut _42: core::fmt::rt::Argument<'_>;
    let mut _43: &u128;
    let _44: &u128;
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &u128;
    let _47: &u128;
    let mut _48: error::ErrorCode;
    let mut _50: isize;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _52: std::result::Result<u128, error::ErrorCode>;
    let mut _53: u128;
    let mut _54: u128;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _61: std::result::Result<u128, error::ErrorCode>;
    let mut _62: u128;
    let mut _63: u128;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: u128;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _73: std::result::Result<u128, error::ErrorCode>;
    let mut _74: math::bn::U192;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _76: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _77: math::bn::U192;
    let mut _78: math::bn::U192;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: (u128, u128);
    let mut _90: u128;
    let mut _91: u128;
    scope 1 {
        debug invariant_sqrt_u192 => _5;
        let _7: math::bn::U192;
        let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _16: math::bn::U192;
        scope 2 {
            debug invariant => _7;
            let _32: std::string::String;
            let _49: u128;
            let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _68: u128;
            let mut _92: &[&str; 2];
            let mut _93: &controller::amm::SwapDirection;
            scope 7 {
                debug res => _32;
            }
            scope 8 {
                debug new_input_asset_reserve => _49;
                let _69: math::bn::U192;
                scope 18 {
                    debug new_input_amount_u192 => _69;
                    let _71: u128;
                    let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _83: math::bn::U192;
                    let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _88: u128;
                    scope 19 {
                        debug new_output_asset_reserve => _71;
                    }
                    scope 20 {
                        debug residual => _80;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug val => _83;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug residual => _85;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _88;
                        scope 27 {
                        }
                    }
                }
            }
            scope 9 {
                let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _59: u128;
                scope 10 {
                    debug residual => _56;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _59;
                    scope 13 {
                    }
                }
            }
            scope 14 {
                debug residual => _65;
                scope 15 {
                }
            }
            scope 16 {
                debug val => _68;
                scope 17 {
                }
            }
        }
        scope 3 {
            debug residual => _13;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _16;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _4;
        _5 = <U192 as From<u128>>::from(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _5;
        StorageLive(_11);
        _11 = _5;
        _9 = <U192 as SafeMath>::safe_mul(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = ((_8 as Continue).0: math::bn::U192);
        _7 = _16;
        StorageDead(_16);
        StorageDead(_8);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_3;
        StorageLive(_20);
        _93 = const _;
        _20 = &(*_93);
        _18 = <SwapDirection as PartialEq>::eq(move _19, move _20) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_8);
        goto -> bb47;
    }

    bb8: {
        switchInt(move _18) -> [0: bb19, otherwise: bb9];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _1;
        StorageLive(_24);
        _24 = _2;
        _22 = Gt(move _23, move _24);
        switchInt(move _22) -> [0: bb18, otherwise: bb10];
    }

    bb10: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _92 = const _;
        _36 = &(*_92);
        _35 = &(*_36);
        _34 = move _35 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_1;
        _43 = &(*_44);
        _42 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _43) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_43);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_2;
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _46) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_46);
        _41 = [move _42, move _45];
        StorageDead(_45);
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = move _39 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_39);
        _33 = Arguments::<'_>::new_v1(move _34, move _38) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_38);
        StorageDead(_34);
        _32 = format(move _33) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_36);
        _31 = move _32;
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = <String as Deref>::deref(move _29) -> [return: bb15, unwind: bb49];
    }

    bb15: {
        _27 = &(*_28);
        StorageDead(_29);
        _26 = solana_program::log::sol_log(move _27) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        StorageDead(_27);
        drop(_31) -> [return: bb17, unwind: bb50];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageLive(_48);
        _48 = error::ErrorCode::TradeSizeTooLarge;
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Err(move _48);
        StorageDead(_48);
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb47;
    }

    bb18: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb20;
    }

    bb20: {
        _17 = const ();
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_49);
        _50 = discriminant(_3);
        switchInt(move _50) -> [0: bb21, otherwise: bb27];
    }

    bb21: {
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _2;
        StorageLive(_54);
        _54 = _1;
        _52 = <u128 as SafeMath>::safe_add(move _53, move _54) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _52) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_52);
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_59);
        _59 = ((_51 as Continue).0: u128);
        _49 = _59;
        StorageDead(_59);
        StorageDead(_51);
        goto -> bb33;
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_51);
        goto -> bb46;
    }

    bb27: {
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _2;
        StorageLive(_63);
        _63 = _1;
        _61 = <u128 as SafeMath>::safe_sub(move _62, move _63) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _61) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_61);
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_68);
        _68 = ((_60 as Continue).0: u128);
        _49 = _68;
        StorageDead(_68);
        StorageDead(_60);
        goto -> bb33;
    }

    bb31: {
        StorageLive(_65);
        _65 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_60);
        goto -> bb46;
    }

    bb33: {
        StorageLive(_69);
        StorageLive(_70);
        _70 = _49;
        _69 = <U192 as From<u128>>::from(move _70) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _7;
        StorageLive(_78);
        _78 = _69;
        _76 = <U192 as SafeMath>::safe_div(move _77, move _78) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_78);
        StorageDead(_77);
        _75 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _76) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_76);
        _79 = discriminant(_75);
        switchInt(move _79) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_83);
        _83 = ((_75 as Continue).0: math::bn::U192);
        _74 = _83;
        StorageDead(_83);
        _73 = U192::try_to_u128(move _74) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_80);
        _80 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb45;
    }

    bb40: {
        StorageDead(_74);
        _72 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _73) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_73);
        _84 = discriminant(_72);
        switchInt(move _84) -> [0: bb42, 1: bb43, otherwise: bb5];
    }

    bb42: {
        StorageLive(_88);
        _88 = ((_72 as Continue).0: u128);
        _71 = _88;
        StorageDead(_88);
        StorageDead(_75);
        StorageDead(_72);
        StorageLive(_89);
        StorageLive(_90);
        _90 = _71;
        StorageLive(_91);
        _91 = _49;
        _89 = (move _90, move _91);
        StorageDead(_91);
        StorageDead(_90);
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Ok(move _89);
        StorageDead(_89);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_49);
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb48;
    }

    bb43: {
        StorageLive(_85);
        _85 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_87);
        StorageDead(_85);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_49);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb48;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_31) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        resume;
    }
}
