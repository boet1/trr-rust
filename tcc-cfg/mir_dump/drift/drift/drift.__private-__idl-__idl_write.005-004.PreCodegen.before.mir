// MIR for `__idl_write` before PreCodegen

fn __idl_write(_1: &anchor_lang::prelude::Pubkey, _2: &mut __idl::IdlAccounts<'_>, _3: Vec<u8>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    debug idl_data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let _7: usize;
    let mut _8: std::result::Result<usize, std::num::TryFromIntError>;
    let mut _9: u32;
    let mut _10: &__private::__idl::IdlAccount;
    let mut _11: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _13: std::option::Option<usize>;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: &std::vec::Vec<u8>;
    let mut _17: u32;
    let mut _18: std::option::Option<u32>;
    let mut _19: u32;
    let mut _20: &__private::__idl::IdlAccount;
    let mut _21: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _22: u32;
    let mut _23: std::result::Result<u32, std::num::TryFromIntError>;
    let mut _24: usize;
    let mut _25: &std::vec::Vec<u8>;
    let mut _26: &mut __private::__idl::IdlAccount;
    let mut _27: &mut anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _29: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _31: &mut [u8];
    let mut _32: &mut [u8];
    let mut _33: &mut [u8];
    let mut _34: &mut std::cell::RefMut<'_, [u8]>;
    let mut _35: std::ops::Range<usize>;
    let mut _36: usize;
    let mut _37: usize;
    let _38: ();
    let mut _39: bool;
    let mut _40: usize;
    let mut _41: &[u8];
    let mut _42: usize;
    let mut _43: &std::vec::Vec<u8>;
    let mut _44: !;
    let mut _45: anchor_lang::error::Error;
    let mut _46: anchor_lang::error::Error;
    let mut _47: anchor_lang::error::AnchorError;
    let mut _48: std::string::String;
    let mut _49: &anchor_lang::error::ErrorCode;
    let _50: anchor_lang::error::ErrorCode;
    let mut _51: u32;
    let mut _52: anchor_lang::error::ErrorCode;
    let mut _53: std::string::String;
    let mut _54: &anchor_lang::error::ErrorCode;
    let _55: anchor_lang::error::ErrorCode;
    let mut _56: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _57: anchor_lang::error::ErrorOrigin;
    let mut _58: anchor_lang::error::Source;
    let mut _59: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _60: (usize, usize);
    let mut _61: usize;
    let mut _62: &[u8];
    let mut _63: usize;
    let mut _64: &std::vec::Vec<u8>;
    let _65: ();
    let mut _66: &mut [u8];
    let mut _67: &[u8];
    let _68: &[u8];
    let _69: &[u8];
    let mut _70: &std::vec::Vec<u8>;
    let mut _71: std::ops::RangeFull;
    let mut _72: ();
    let mut _75: bool;
    scope 1 {
        debug prev_len => _7;
        let _12: usize;
        scope 2 {
            debug new_len => _12;
            let mut _28: std::cell::RefMut<'_, [u8]>;
            scope 3 {
                debug idl_bytes => _28;
                let _30: &mut [u8];
                scope 4 {
                    debug idl_expansion => _30;
                    let mut _73: &anchor_lang::error::ErrorCode;
                    let mut _74: &anchor_lang::error::ErrorCode;
                }
            }
        }
    }

    bb0: {
        _75 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Instruction: IdlWrite";
        _5 = &(*_6);
        _4 = solana_program::log::sol_log(move _5) -> [return: bb1, unwind: bb36];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _10 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as Deref>::deref(move _11) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        StorageDead(_11);
        _9 = ((*_10).1: u32);
        _8 = <u32 as TryInto<usize>>::try_into(move _9) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        StorageDead(_9);
        _7 = std::result::Result::<usize, TryFromIntError>::unwrap(move _8) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _7;
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_3;
        _15 = Vec::<u8>::len(move _16) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        StorageDead(_16);
        _13 = core::num::<impl usize>::checked_add(move _14, move _15) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = Option::<usize>::unwrap(move _13) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        StorageDead(_13);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _20 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as Deref>::deref(move _21) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        StorageDead(_21);
        _19 = ((*_20).1: u32);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_3;
        _24 = Vec::<u8>::len(move _25) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        StorageDead(_25);
        _23 = <usize as TryInto<u32>>::try_into(move _24) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        StorageDead(_24);
        _22 = std::result::Result::<u32, TryFromIntError>::unwrap(move _23) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        StorageDead(_23);
        _18 = core::num::<impl u32>::checked_add(move _19, move _22) -> [return: bb12, unwind: bb36];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_19);
        _17 = Option::<u32>::unwrap(move _18) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        StorageDead(_18);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut ((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _26 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as DerefMut>::deref_mut(move _27) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        StorageDead(_27);
        ((*_26).1: u32) = move _17;
        StorageDead(_17);
        StorageDead(_26);
        StorageDead(_20);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _28 = <&anchor_lang::prelude::Account<'_, __idl::IdlAccount> as IdlTrailingData<'_>>::trailing_data_mut(move _29) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _28;
        _33 = <RefMut<'_, [u8]> as DerefMut>::deref_mut(move _34) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        _32 = &mut (*_33);
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _7;
        StorageLive(_37);
        _37 = _12;
        _35 = std::ops::Range::<usize> { start: move _36, end: move _37 };
        StorageDead(_37);
        StorageDead(_36);
        _31 = <[u8] as IndexMut<std::ops::Range<usize>>>::index_mut(move _32, move _35) -> [return: bb17, unwind: bb35];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_32);
        _30 = &mut (*_31);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_30);
        _40 = core::slice::<impl [u8]>::len(move _41) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_3;
        _42 = Vec::<u8>::len(move _43) -> [return: bb19, unwind: bb35];
    }

    bb19: {
        StorageDead(_43);
        _39 = Ne(move _40, move _42);
        switchInt(move _39) -> [0: bb28, otherwise: bb20];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _74 = const _;
        _49 = &(*_74);
        _48 = anchor_lang::error::ErrorCode::name(move _49) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        _52 = RequireEqViolated;
        _51 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _52) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        _73 = const _;
        _54 = &(*_73);
        _53 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _54) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        StorageDead(_54);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = anchor_lang::error::Source { filename: const "programs/drift/src/lib.rs", line: const 69_u32 };
        _57 = anchor_lang::error::ErrorOrigin::Source(move _58);
        StorageDead(_58);
        _56 = Option::<ErrorOrigin>::Some(move _57);
        StorageDead(_57);
        StorageLive(_59);
        _59 = Option::<ComparedValues>::None;
        _47 = anchor_lang::error::AnchorError { error_name: move _48, error_code_number: move _51, error_msg: move _53, error_origin: move _56, compared_values: move _59 };
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_48);
        _46 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _47) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _75 = const true;
        StorageDead(_47);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &(*_30);
        _61 = core::slice::<impl [u8]>::len(move _62) -> [return: bb25, unwind: bb39];
    }

    bb25: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_3;
        _63 = Vec::<u8>::len(move _64) -> [return: bb26, unwind: bb39];
    }

    bb26: {
        StorageDead(_64);
        _60 = (move _61, move _63);
        StorageDead(_63);
        StorageDead(_61);
        _75 = const false;
        _45 = anchor_lang::error::Error::with_values::<usize, usize>(move _46, move _60) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        StorageDead(_60);
        _75 = const false;
        StorageDead(_46);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _45);
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        drop(_28) -> [return: bb32, unwind: bb36];
    }

    bb28: {
        StorageDead(_42);
        StorageDead(_40);
        _38 = const ();
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut (*_30);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_3;
        StorageLive(_71);
        _71 = RangeFull;
        _69 = <Vec<u8> as Index<RangeFull>>::index(move _70, move _71) -> [return: bb29, unwind: bb35];
    }

    bb29: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = &(*_69);
        _67 = &(*_68);
        _65 = core::slice::<impl [u8]>::copy_from_slice(move _66, move _67) -> [return: bb30, unwind: bb35];
    }

    bb30: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_65);
        StorageLive(_72);
        _72 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _72);
        StorageDead(_72);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        drop(_28) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        StorageDead(_28);
        StorageDead(_12);
        StorageDead(_7);
        drop(_3) -> [return: bb33, unwind: bb37];
    }

    bb32: {
        StorageDead(_28);
        StorageDead(_12);
        StorageDead(_7);
        drop(_3) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_48) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_28) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38 (cleanup): {
        drop(_46) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_75) -> [0: bb35, otherwise: bb38];
    }
}
