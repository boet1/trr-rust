// MIR for `perp_market_map::<impl at programs/drift/src/state/perp_market_map.rs:25:1: 25:27>::load` after PreCodegen

fn perp_market_map::<impl at programs/drift/src/state/perp_market_map.rs:25:1: 25:27>::load(_1: &BTreeSet<u16>, _2: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>) -> std::result::Result<PerpMarketMap<'_>, error::ErrorCode> {
    debug writable_markets => _1;
    debug account_info_iter => _2;
    let mut _0: std::result::Result<state::perp_market_map::PerpMarketMap<'_>, error::ErrorCode>;
    let mut _3: state::perp_market_map::PerpMarketMap<'_>;
    let mut _4: std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let _6: ();
    let mut _7: ();
    let mut _8: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _9: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _10: isize;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _14: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _15: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _18: error::ErrorCode;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: ();
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: &[u8];
    let _29: &&mut [u8];
    let mut _30: &std::cell::Ref<'_, &mut [u8]>;
    let mut _31: usize;
    let mut _32: !;
    let _36: &[u8];
    let mut _37: &[u8];
    let _38: &&mut [u8];
    let mut _39: &std::cell::Ref<'_, &mut [u8]>;
    let mut _40: std::ops::Range<usize>;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: (usize, bool);
    let mut _45: &[u8];
    let _46: ();
    let mut _47: bool;
    let mut _48: &&[u8; 8];
    let mut _49: &&[u8; 8];
    let _50: &[u8; 8];
    let mut _51: !;
    let mut _53: [u8; 2];
    let mut _54: &[u8; 2];
    let _57: &[u8];
    let mut _58: &[u8];
    let _59: &&mut [u8];
    let mut _60: &std::cell::Ref<'_, &mut [u8]>;
    let mut _61: std::ops::Range<usize>;
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: usize;
    let mut _65: (usize, bool);
    let mut _66: &[u8];
    let _67: ();
    let mut _68: bool;
    let mut _69: &std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _70: &u16;
    let _71: &u16;
    let mut _72: !;
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: &std::string::String;
    let _77: &std::string::String;
    let _78: std::string::String;
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str];
    let mut _82: &[&str; 1];
    let _83: &[&str; 1];
    let _84: [&str; 1];
    let mut _85: &[core::fmt::rt::Argument<'_>];
    let mut _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: &[core::fmt::rt::Argument<'_>; 1];
    let _88: [core::fmt::rt::Argument<'_>; 1];
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &u16;
    let _91: &u16;
    let mut _92: error::ErrorCode;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _95: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _96: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _97: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _104: ();
    let mut _105: bool;
    let mut _106: &std::collections::BTreeSet<u16>;
    let mut _107: &u16;
    let _108: &u16;
    let mut _109: bool;
    let mut _110: !;
    let _111: ();
    let mut _112: &str;
    let _113: &str;
    let mut _114: &std::string::String;
    let _115: &std::string::String;
    let _116: std::string::String;
    let mut _118: std::fmt::Arguments<'_>;
    let mut _119: &[&str];
    let mut _120: &[&str; 2];
    let _121: &[&str; 2];
    let _122: [&str; 2];
    let mut _123: &[core::fmt::rt::Argument<'_>];
    let mut _124: &[core::fmt::rt::Argument<'_>; 1];
    let _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: [core::fmt::rt::Argument<'_>; 1];
    let mut _127: core::fmt::rt::Argument<'_>;
    let mut _128: &u16;
    let _129: &u16;
    let mut _130: error::ErrorCode;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _133: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _134: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _135: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _136: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _137: error::ErrorCode;
    let mut _138: isize;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _143: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _144: &mut std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _145: u16;
    let mut _146: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _147: !;
    let _148: ();
    let mut _149: !;
    let mut _150: state::perp_market_map::PerpMarketMap<'_>;
    let mut _153: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _154: &mut [u8];
    let mut _155: &mut [u8];
    let mut _156: &mut [u8];
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    scope 1 {
        debug perp_market_map => _3;
        let _5: [u8; 8];
        scope 2 {
            debug market_discriminator => _5;
            scope 3 {
                debug account_info => _11;
                let _11: &&anchor_lang::prelude::AccountInfo<'_>;
                let _12: std::cell::Ref<'_, &mut [u8]>;
                let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _23: std::cell::Ref<'_, &mut [u8]>;
                scope 4 {
                    debug data => _12;
                    let _24: usize;
                    scope 9 {
                        debug expected_data_len => _24;
                        let _33: &[u8; 8];
                        let _34: usize;
                        scope 10 {
                            debug account_discriminator => _33;
                            let _52: u16;
                            let _55: usize;
                            scope 15 {
                                debug market_index => _52;
                                let _79: std::string::String;
                                let _93: &anchor_lang::prelude::AccountInfo<'_>;
                                let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _102: &anchor_lang::prelude::AccountInfo<'_>;
                                let mut _151: &[&str; 1];
                                scope 20 {
                                    debug res => _79;
                                }
                                scope 21 {
                                    debug account_info => _93;
                                    let _103: bool;
                                    scope 26 {
                                        debug is_writable => _103;
                                        let _117: std::string::String;
                                        let _131: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                                        let _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _142: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                                        let mut _152: &[&str; 2];
                                        scope 27 {
                                            debug res => _117;
                                        }
                                        scope 28 {
                                            debug account_loader => _131;
                                        }
                                        scope 29 {
                                            debug residual => _139;
                                            scope 30 {
                                            }
                                        }
                                        scope 31 {
                                            debug val => _142;
                                            scope 32 {
                                            }
                                        }
                                    }
                                }
                                scope 22 {
                                    debug residual => _99;
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug val => _102;
                                    scope 25 {
                                    }
                                }
                            }
                            scope 16 {
                                debug offset => _55;
                                let _56: &[u8];
                                scope 17 {
                                    debug slice => _56;
                                    scope 18 {
                                        scope 19 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 11 {
                            debug offset => _34;
                            let _35: &[u8];
                            scope 12 {
                                debug slice => _35;
                                scope 13 {
                                    scope 14 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 5 {
                    debug residual => _20;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _23;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = BTreeMap::<u16, anchor_lang::prelude::AccountLoader<'_, PerpMarket>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = PerpMarketMap::<'_>(move _4);
        StorageDead(_4);
        StorageLive(_5);
        _5 = <PerpMarket as anchor_lang::Discriminator>::discriminator() -> [return: bb2, unwind: bb76];
    }

    bb2: {
        StorageLive(_6);
        goto -> bb3;
    }

    bb3: {
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_2);
        _8 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _9) -> [return: bb4, unwind: bb76];
    }

    bb4: {
        StorageDead(_9);
        _10 = discriminant(_8);
        switchInt(move _10) -> [1: bb5, otherwise: bb63];
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_8 as Some).0: &&anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _153 = deref_copy (*_11);
        _16 = &(*_153);
        _15 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _16) -> [return: bb6, unwind: bb76];
    }

    bb6: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = error::ErrorCode::CouldNotLoadMarketData;
        _17 = std::result::Result::<Ref<'_, &mut [u8]>, error::ErrorCode>::Err(move _18);
        StorageDead(_18);
        _14 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::or::<error::ErrorCode>(move _15, move _17) -> [return: bb7, unwind: bb76];
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_15);
        _13 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _14) -> [return: bb8, unwind: bb76];
    }

    bb8: {
        StorageDead(_14);
        _19 = discriminant(_13);
        switchInt(move _19) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_13 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _12 = move _23;
        StorageDead(_23);
        _159 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_24);
        _24 = const _;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_12;
        _29 = <Ref<'_, &mut [u8]> as Deref>::deref(move _30) -> [return: bb13, unwind: bb75];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_20);
        _20 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<PerpMarketMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb12, unwind: bb78];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_20);
        _157 = discriminant(_13);
        StorageDead(_13);
        goto -> bb70;
    }

    bb13: {
        _154 = deref_copy (*_29);
        _28 = &(*_154);
        StorageDead(_30);
        _27 = core::slice::<impl [u8]>::len(move _28) -> [return: bb14, unwind: bb75];
    }

    bb14: {
        StorageDead(_28);
        StorageLive(_31);
        _31 = _24;
        _26 = Lt(move _27, move _31);
        switchInt(move _26) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        _6 = const ();
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb64;
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        _25 = const ();
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_33);
        StorageLive(_34);
        _34 = const 0_usize;
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_12;
        _38 = <Ref<'_, &mut [u8]> as Deref>::deref(move _39) -> [return: bb17, unwind: bb75];
    }

    bb17: {
        _155 = deref_copy (*_38);
        _37 = &(*_155);
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _34;
        StorageLive(_42);
        StorageLive(_43);
        _43 = _34;
        _44 = CheckedAdd(_43, const 8_usize);
        assert(!move (_44.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, const 8_usize) -> [success: bb18, unwind: bb75];
    }

    bb18: {
        _42 = move (_44.0: usize);
        StorageDead(_43);
        _40 = std::ops::Range::<usize> { start: move _41, end: move _42 };
        StorageDead(_42);
        StorageDead(_41);
        _36 = <[u8] as Index<std::ops::Range<usize>>>::index(move _37, move _40) -> [return: bb19, unwind: bb75];
    }

    bb19: {
        StorageDead(_40);
        StorageDead(_37);
        _35 = &(*_36);
        StorageLive(_45);
        _45 = &(*_35);
        _33 = PerpMarketMap::<'a>::load::as_array::<u8>(move _45) -> [return: bb20, unwind: bb75];
    }

    bb20: {
        StorageDead(_45);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &_33;
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_5;
        _49 = &_50;
        _47 = <&[u8; 8] as PartialEq>::ne(move _48, move _49) -> [return: bb21, unwind: bb75];
    }

    bb21: {
        switchInt(move _47) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _6 = const ();
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_33);
        goto -> bb64;
    }

    bb23: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _46 = const ();
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = const 1160_usize;
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &_12;
        _59 = <Ref<'_, &mut [u8]> as Deref>::deref(move _60) -> [return: bb24, unwind: bb75];
    }

    bb24: {
        _156 = deref_copy (*_59);
        _58 = &(*_156);
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _55;
        StorageLive(_63);
        StorageLive(_64);
        _64 = _55;
        _65 = CheckedAdd(_64, const 2_usize);
        assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", move _64, const 2_usize) -> [success: bb25, unwind: bb75];
    }

    bb25: {
        _63 = move (_65.0: usize);
        StorageDead(_64);
        _61 = std::ops::Range::<usize> { start: move _62, end: move _63 };
        StorageDead(_63);
        StorageDead(_62);
        _57 = <[u8] as Index<std::ops::Range<usize>>>::index(move _58, move _61) -> [return: bb26, unwind: bb75];
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_58);
        _56 = &(*_57);
        StorageLive(_66);
        _66 = &(*_56);
        _54 = PerpMarketMap::<'a>::load::as_array::<u8>(move _66) -> [return: bb27, unwind: bb75];
    }

    bb27: {
        StorageDead(_66);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        _53 = (*_54);
        _52 = core::num::<impl u16>::from_le_bytes(move _53) -> [return: bb28, unwind: bb75];
    }

    bb28: {
        StorageDead(_53);
        StorageDead(_54);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(_3.0: std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_52;
        _70 = &(*_71);
        _68 = BTreeMap::<u16, anchor_lang::prelude::AccountLoader<'_, PerpMarket>>::contains_key::<u16>(move _69, move _70) -> [return: bb29, unwind: bb75];
    }

    bb29: {
        switchInt(move _68) -> [0: bb37, otherwise: bb30];
    }

    bb30: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _151 = const _;
        _83 = &(*_151);
        _82 = &(*_83);
        _81 = move _82 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_82);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_52;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _90) -> [return: bb31, unwind: bb75];
    }

    bb31: {
        StorageDead(_90);
        _88 = [move _89];
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = move _86 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        _80 = Arguments::<'_>::new_v1(move _81, move _85) -> [return: bb32, unwind: bb75];
    }

    bb32: {
        StorageDead(_85);
        StorageDead(_81);
        _79 = format(move _80) -> [return: bb33, unwind: bb75];
    }

    bb33: {
        StorageDead(_80);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_83);
        _78 = move _79;
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = <String as Deref>::deref(move _76) -> [return: bb34, unwind: bb74];
    }

    bb34: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb35, unwind: bb74];
    }

    bb35: {
        StorageDead(_74);
        drop(_78) -> [return: bb36, unwind: bb75];
    }

    bb36: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_92);
        _92 = error::ErrorCode::InvalidMarketAccount;
        _0 = std::result::Result::<PerpMarketMap<'_>, error::ErrorCode>::Err(move _92);
        StorageDead(_92);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb69;
    }

    bb37: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        _67 = const ();
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &mut (*_2);
        _96 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _97) -> [return: bb38, unwind: bb75];
    }

    bb38: {
        StorageDead(_97);
        _95 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _96) -> [return: bb39, unwind: bb75];
    }

    bb39: {
        StorageDead(_96);
        _94 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _95) -> [return: bb40, unwind: bb75];
    }

    bb40: {
        StorageDead(_95);
        _98 = discriminant(_94);
        switchInt(move _98) -> [0: bb41, 1: bb42, otherwise: bb10];
    }

    bb41: {
        StorageLive(_102);
        _102 = ((_94 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _93 = _102;
        StorageDead(_102);
        StorageDead(_94);
        StorageLive(_103);
        _103 = ((*_93).6: bool);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_1);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_52;
        _107 = &(*_108);
        _105 = BTreeSet::<u16>::contains::<u16>(move _106, move _107) -> [return: bb44, unwind: bb75];
    }

    bb42: {
        StorageLive(_99);
        _99 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<PerpMarketMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb43, unwind: bb75];
    }

    bb43: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_94);
        goto -> bb68;
    }

    bb44: {
        switchInt(move _105) -> [0: bb53, otherwise: bb45];
    }

    bb45: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_109);
        _109 = _103;
        switchInt(move _109) -> [0: bb46, otherwise: bb54];
    }

    bb46: {
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _152 = const _;
        _121 = &(*_152);
        _120 = &(*_121);
        _119 = move _120 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_52;
        _128 = &(*_129);
        _127 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _128) -> [return: bb47, unwind: bb75];
    }

    bb47: {
        StorageDead(_128);
        _126 = [move _127];
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = move _124 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_124);
        _118 = Arguments::<'_>::new_v1(move _119, move _123) -> [return: bb48, unwind: bb75];
    }

    bb48: {
        StorageDead(_123);
        StorageDead(_119);
        _117 = format(move _118) -> [return: bb49, unwind: bb75];
    }

    bb49: {
        StorageDead(_118);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_121);
        _116 = move _117;
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = <String as Deref>::deref(move _114) -> [return: bb50, unwind: bb73];
    }

    bb50: {
        _112 = &(*_113);
        StorageDead(_114);
        _111 = solana_program::log::sol_log(move _112) -> [return: bb51, unwind: bb73];
    }

    bb51: {
        StorageDead(_112);
        drop(_116) -> [return: bb52, unwind: bb75];
    }

    bb52: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageLive(_130);
        _130 = error::ErrorCode::MarketWrongMutability;
        _0 = std::result::Result::<PerpMarketMap<'_>, error::ErrorCode>::Err(move _130);
        StorageDead(_130);
        StorageDead(_109);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb67;
    }

    bb53: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb54;
    }

    bb54: {
        _104 = const ();
        StorageDead(_109);
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &(*_93);
        _134 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::try_from(move _135) -> [return: bb55, unwind: bb75];
    }

    bb55: {
        StorageDead(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = error::ErrorCode::InvalidMarketAccount;
        _136 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, error::ErrorCode>::Err(move _137);
        StorageDead(_137);
        _133 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _134, move _136) -> [return: bb56, unwind: bb75];
    }

    bb56: {
        StorageDead(_136);
        StorageDead(_134);
        _132 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _133) -> [return: bb57, unwind: bb75];
    }

    bb57: {
        StorageDead(_133);
        _138 = discriminant(_132);
        switchInt(move _138) -> [0: bb58, 1: bb59, otherwise: bb10];
    }

    bb58: {
        StorageLive(_142);
        _142 = move ((_132 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _131 = move _142;
        StorageDead(_142);
        StorageDead(_132);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &mut (_3.0: std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>);
        StorageLive(_145);
        _145 = _52;
        StorageLive(_146);
        _146 = move _131;
        _143 = BTreeMap::<u16, anchor_lang::prelude::AccountLoader<'_, PerpMarket>>::insert(move _144, move _145, move _146) -> [return: bb61, unwind: bb75];
    }

    bb59: {
        StorageLive(_139);
        _139 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_141);
        _141 = _139;
        _0 = <std::result::Result<PerpMarketMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _141) -> [return: bb60, unwind: bb75];
    }

    bb60: {
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb67;
    }

    bb61: {
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_143);
        _7 = const ();
        StorageDead(_131);
        StorageDead(_103);
        StorageDead(_93);
        StorageDead(_52);
        StorageDead(_33);
        StorageDead(_24);
        drop(_12) -> [return: bb62, unwind: bb76];
    }

    bb62: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb3;
    }

    bb63: {
        StorageLive(_148);
        _6 = const ();
        StorageDead(_148);
        goto -> bb66;
    }

    bb64: {
        StorageDead(_24);
        drop(_12) -> [return: bb65, unwind: bb76];
    }

    bb65: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_150);
        _150 = move _3;
        _0 = std::result::Result::<PerpMarketMap<'_>, error::ErrorCode>::Ok(move _150);
        StorageDead(_150);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb72;
    }

    bb67: {
        StorageDead(_103);
        goto -> bb68;
    }

    bb68: {
        StorageDead(_93);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_52);
        StorageDead(_33);
        StorageDead(_24);
        drop(_12) -> [return: bb70, unwind: bb76];
    }

    bb70: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        drop(_3) -> [return: bb71, unwind: bb77];
    }

    bb71: {
        StorageDead(_3);
        goto -> bb72;
    }

    bb72: {
        return;
    }

    bb73 (cleanup): {
        drop(_116) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_78) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_12) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_3) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        resume;
    }

    bb78 (cleanup): {
        _161 = discriminant(_13);
        goto -> bb76;
    }
}
