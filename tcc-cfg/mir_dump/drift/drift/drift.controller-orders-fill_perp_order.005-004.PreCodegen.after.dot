digraph Mir_0_523 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn controller::orders::fill_perp_order(_1: u32, _2: &amp;ReErased state::state::State, _3: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, _4: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;, _5: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _6: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _7: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _8: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, _9: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;, _10: &amp;ReErased state::user_map::UserMap&lt;ReErased&gt;, _11: &amp;ReErased state::user_map::UserStatsMap&lt;ReErased&gt;, _12: std::option::Option&lt;u32&gt;, _13: &amp;ReErased anchor_lang::prelude::Clock, _14: state::fill_mode::FillMode) -&gt; std::result::Result&lt;(u64, u64), error::ErrorCode&gt;<br align="left"/>let _15: i64;<br align="left"/>let _16: u64;<br align="left"/>let _17: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _18: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let _19: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _20: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let _21: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _22: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _23: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _24: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _25: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _26: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _27: Closure(DefId(0:4705 ~ drift[d311]::controller::orders::fill_perp_order::{closure#1}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _28: isize;<br align="left"/>let _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _32: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _33: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _34: std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _35: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let mut _36: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _37: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _38: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _39: Closure(DefId(0:4706 ~ drift[d311]::controller::orders::fill_perp_order::{closure#2}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _40: isize;<br align="left"/>let _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _42: !;<br align="left"/>let mut _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _44: std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let _45: usize;<br align="left"/>let mut _46: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _47: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _48: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _49: &amp;ReErased mut std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _50: std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _51: &amp;ReErased [state::user::Order];<br align="left"/>let mut _52: &amp;ReErased [state::user::Order; 32_usize];<br align="left"/>let _53: &amp;ReErased state::user::User;<br align="left"/>let mut _54: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _55: Closure(DefId(0:524 ~ drift[d311]::controller::orders::fill_perp_order::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased state::user::Order,)) -&gt; bool, []), (&amp;ReErased u32,)]);<br align="left"/>let mut _56: &amp;ReErased u32;<br align="left"/>let mut _57: Closure(DefId(0:4707 ~ drift[d311]::controller::orders::fill_perp_order::{closure#3}), [i32, Binder(extern &quot;RustCall&quot; fn(()) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _58: isize;<br align="left"/>let _59: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _60: !;<br align="left"/>let mut _61: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _62: usize;<br align="left"/>let _63: state::user::OrderStatus;<br align="left"/>let _64: u16;<br align="left"/>let _65: state::user::MarketType;<br align="left"/>let _66: u64;<br align="left"/>let _67: i32;<br align="left"/>let _68: controller::position::PositionDirection;<br align="left"/>let _69: u8;<br align="left"/>let mut _70: (state::user::OrderStatus, u16, state::user::MarketType, u64, i32, controller::position::PositionDirection, u8);<br align="left"/>let mut _71: state::user::OrderStatus;<br align="left"/>let mut _72: &amp;ReErased state::user::User;<br align="left"/>let mut _73: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _74: usize;<br align="left"/>let mut _75: usize;<br align="left"/>let mut _76: bool;<br align="left"/>let mut _77: u16;<br align="left"/>let mut _78: &amp;ReErased state::user::User;<br align="left"/>let mut _79: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _80: usize;<br align="left"/>let mut _81: usize;<br align="left"/>let mut _82: bool;<br align="left"/>let mut _83: state::user::MarketType;<br align="left"/>let mut _84: &amp;ReErased state::user::User;<br align="left"/>let mut _85: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _86: usize;<br align="left"/>let mut _87: usize;<br align="left"/>let mut _88: bool;<br align="left"/>let mut _89: u64;<br align="left"/>let mut _90: &amp;ReErased state::user::User;<br align="left"/>let mut _91: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _92: usize;<br align="left"/>let mut _93: usize;<br align="left"/>let mut _94: bool;<br align="left"/>let mut _95: i32;<br align="left"/>let mut _96: &amp;ReErased state::user::User;<br align="left"/>let mut _97: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _98: usize;<br align="left"/>let mut _99: usize;<br align="left"/>let mut _100: bool;<br align="left"/>let mut _101: controller::position::PositionDirection;<br align="left"/>let mut _102: &amp;ReErased state::user::User;<br align="left"/>let mut _103: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _104: usize;<br align="left"/>let mut _105: usize;<br align="left"/>let mut _106: bool;<br align="left"/>let mut _107: u8;<br align="left"/>let mut _108: &amp;ReErased state::user::User;<br align="left"/>let mut _109: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _110: usize;<br align="left"/>let mut _111: usize;<br align="left"/>let mut _112: bool;<br align="left"/>let _113: ();<br align="left"/>let mut _114: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _115: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _116: bool;<br align="left"/>let mut _117: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _118: &amp;ReErased state::user::MarketType;<br align="left"/>let _119: state::user::MarketType;<br align="left"/>let mut _120: ();<br align="left"/>let _121: error::ErrorCode;<br align="left"/>let _122: ();<br align="left"/>let mut _123: &amp;ReErased str;<br align="left"/>let _124: &amp;ReErased str;<br align="left"/>let mut _125: &amp;ReErased std::string::String;<br align="left"/>let _126: &amp;ReErased std::string::String;<br align="left"/>let _127: std::string::String;<br align="left"/>let _128: std::string::String;<br align="left"/>let mut _129: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _130: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _131: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _132: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _133: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _134: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _135: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _136: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _137: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _138: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _139: &amp;ReErased error::ErrorCode;<br align="left"/>let _140: &amp;ReErased error::ErrorCode;<br align="left"/>let _141: ();<br align="left"/>let mut _142: &amp;ReErased str;<br align="left"/>let _143: &amp;ReErased str;<br align="left"/>let mut _144: error::ErrorCode;<br align="left"/>let mut _145: isize;<br align="left"/>let _146: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _147: !;<br align="left"/>let mut _148: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _149: ();<br align="left"/>let mut _150: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _151: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _152: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _153: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _154: &amp;ReErased u16;<br align="left"/>let _155: &amp;ReErased u16;<br align="left"/>let mut _156: isize;<br align="left"/>let _157: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _158: !;<br align="left"/>let mut _159: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _160: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _161: ();<br align="left"/>let mut _162: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _163: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _164: &amp;ReErased mut state::user::User;<br align="left"/>let mut _165: &amp;ReErased mut state::user::User;<br align="left"/>let mut _166: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _167: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _168: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _169: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _170: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _171: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _172: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _173: i64;<br align="left"/>let mut _174: isize;<br align="left"/>let _175: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _176: !;<br align="left"/>let mut _177: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _178: ();<br align="left"/>let _179: ();<br align="left"/>let mut _180: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _181: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _182: bool;<br align="left"/>let mut _183: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _184: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _185: isize;<br align="left"/>let mut _186: ();<br align="left"/>let _187: error::ErrorCode;<br align="left"/>let _188: ();<br align="left"/>let mut _189: &amp;ReErased str;<br align="left"/>let _190: &amp;ReErased str;<br align="left"/>let mut _191: &amp;ReErased std::string::String;<br align="left"/>let _192: &amp;ReErased std::string::String;<br align="left"/>let _193: std::string::String;<br align="left"/>let _194: std::string::String;<br align="left"/>let mut _195: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _196: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _197: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _198: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _199: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _200: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _201: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _202: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _203: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _204: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _205: &amp;ReErased error::ErrorCode;<br align="left"/>let _206: &amp;ReErased error::ErrorCode;<br align="left"/>let _207: ();<br align="left"/>let mut _208: &amp;ReErased str;<br align="left"/>let _209: &amp;ReErased str;<br align="left"/>let mut _210: &amp;ReErased std::string::String;<br align="left"/>let _211: &amp;ReErased std::string::String;<br align="left"/>let _212: std::string::String;<br align="left"/>let _213: std::string::String;<br align="left"/>let mut _214: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _215: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _216: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _217: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _218: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _219: error::ErrorCode;<br align="left"/>let mut _220: isize;<br align="left"/>let _221: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _222: !;<br align="left"/>let mut _223: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _224: ();<br align="left"/>let _225: ();<br align="left"/>let mut _226: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _227: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _228: bool;<br align="left"/>let mut _229: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _230: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _231: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _232: state::paused_operations::PerpOperation;<br align="left"/>let mut _233: ();<br align="left"/>let _234: error::ErrorCode;<br align="left"/>let _235: ();<br align="left"/>let mut _236: &amp;ReErased str;<br align="left"/>let _237: &amp;ReErased str;<br align="left"/>let mut _238: &amp;ReErased std::string::String;<br align="left"/>let _239: &amp;ReErased std::string::String;<br align="left"/>let _240: std::string::String;<br align="left"/>let _241: std::string::String;<br align="left"/>let mut _242: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _243: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _244: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _245: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _246: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _247: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _248: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _249: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _250: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _251: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _252: &amp;ReErased error::ErrorCode;<br align="left"/>let _253: &amp;ReErased error::ErrorCode;<br align="left"/>let _254: ();<br align="left"/>let mut _255: &amp;ReErased str;<br align="left"/>let _256: &amp;ReErased str;<br align="left"/>let mut _257: &amp;ReErased std::string::String;<br align="left"/>let _258: &amp;ReErased std::string::String;<br align="left"/>let _259: std::string::String;<br align="left"/>let _260: std::string::String;<br align="left"/>let mut _261: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _262: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _263: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _264: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _265: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _266: error::ErrorCode;<br align="left"/>let mut _267: isize;<br align="left"/>let _268: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _269: !;<br align="left"/>let mut _270: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _271: ();<br align="left"/>let _272: ();<br align="left"/>let mut _273: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _274: ();<br align="left"/>let mut _275: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _276: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _277: bool;<br align="left"/>let mut _278: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _279: &amp;ReErased state::user::OrderStatus;<br align="left"/>let _280: state::user::OrderStatus;<br align="left"/>let mut _281: ();<br align="left"/>let _282: error::ErrorCode;<br align="left"/>let _283: ();<br align="left"/>let mut _284: &amp;ReErased str;<br align="left"/>let _285: &amp;ReErased str;<br align="left"/>let mut _286: &amp;ReErased std::string::String;<br align="left"/>let _287: &amp;ReErased std::string::String;<br align="left"/>let _288: std::string::String;<br align="left"/>let _289: std::string::String;<br align="left"/>let mut _290: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _291: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _292: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _293: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _294: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _295: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _296: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _297: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _298: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _299: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _300: &amp;ReErased error::ErrorCode;<br align="left"/>let _301: &amp;ReErased error::ErrorCode;<br align="left"/>let _302: ();<br align="left"/>let mut _303: &amp;ReErased str;<br align="left"/>let _304: &amp;ReErased str;<br align="left"/>let mut _305: error::ErrorCode;<br align="left"/>let mut _306: isize;<br align="left"/>let _307: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _308: !;<br align="left"/>let mut _309: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _310: ();<br align="left"/>let _311: ();<br align="left"/>let mut _312: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _313: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _314: bool;<br align="left"/>let mut _315: &amp;ReErased state::user::Order;<br align="left"/>let _316: &amp;ReErased state::user::User;<br align="left"/>let mut _317: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _318: usize;<br align="left"/>let mut _319: usize;<br align="left"/>let mut _320: bool;<br align="left"/>let mut _321: bool;<br align="left"/>let mut _322: &amp;ReErased state::user::Order;<br align="left"/>let _323: &amp;ReErased state::user::User;<br align="left"/>let mut _324: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _325: usize;<br align="left"/>let mut _326: usize;<br align="left"/>let mut _327: bool;<br align="left"/>let mut _328: ();<br align="left"/>let _329: error::ErrorCode;<br align="left"/>let _330: ();<br align="left"/>let mut _331: &amp;ReErased str;<br align="left"/>let _332: &amp;ReErased str;<br align="left"/>let mut _333: &amp;ReErased std::string::String;<br align="left"/>let _334: &amp;ReErased std::string::String;<br align="left"/>let _335: std::string::String;<br align="left"/>let _336: std::string::String;<br align="left"/>let mut _337: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _338: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _339: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _340: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _341: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _342: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _343: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _344: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _345: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _346: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _347: &amp;ReErased error::ErrorCode;<br align="left"/>let _348: &amp;ReErased error::ErrorCode;<br align="left"/>let _349: ();<br align="left"/>let mut _350: &amp;ReErased str;<br align="left"/>let _351: &amp;ReErased str;<br align="left"/>let mut _352: error::ErrorCode;<br align="left"/>let mut _353: isize;<br align="left"/>let _354: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _355: !;<br align="left"/>let mut _356: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _357: ();<br align="left"/>let _358: ();<br align="left"/>let mut _359: bool;<br align="left"/>let mut _360: &amp;ReErased state::user::User;<br align="left"/>let _361: &amp;ReErased state::user::User;<br align="left"/>let mut _362: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _363: !;<br align="left"/>let _364: ();<br align="left"/>let mut _365: &amp;ReErased str;<br align="left"/>let _366: &amp;ReErased str;<br align="left"/>let mut _367: (u64, u64);<br align="left"/>let _368: ();<br align="left"/>let mut _369: bool;<br align="left"/>let mut _370: &amp;ReErased state::fill_mode::FillMode;<br align="left"/>let mut _371: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _372: &amp;ReErased mut state::user::User;<br align="left"/>let mut _373: &amp;ReErased mut state::user::User;<br align="left"/>let mut _374: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _375: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _376: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _377: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _378: u32;<br align="left"/>let mut _379: isize;<br align="left"/>let mut _380: !;<br align="left"/>let _381: ();<br align="left"/>let mut _382: &amp;ReErased str;<br align="left"/>let _383: &amp;ReErased str;<br align="left"/>let mut _384: (u64, u64);<br align="left"/>let _385: u64;<br align="left"/>let _386: math::oracle::OracleValidity;<br align="left"/>let _387: i64;<br align="left"/>let _388: i64;<br align="left"/>let _389: u16;<br align="left"/>let _390: bool;<br align="left"/>let _391: bool;<br align="left"/>let _392: bool;<br align="left"/>let _393: bool;<br align="left"/>let _394: bool;<br align="left"/>let _395: u8;<br align="left"/>let mut _396: bool;<br align="left"/>let mut _397: bool;<br align="left"/>let mut _398: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _399: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _400: &amp;ReErased state::state::State;<br align="left"/>let mut _401: isize;<br align="left"/>let _402: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _403: !;<br align="left"/>let mut _404: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _405: bool;<br align="left"/>let _406: ();<br align="left"/>let _407: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _408: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _409: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _410: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _411: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _412: &amp;ReErased u16;<br align="left"/>let _413: &amp;ReErased u16;<br align="left"/>let mut _414: isize;<br align="left"/>let _415: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _416: !;<br align="left"/>let mut _417: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _418: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _419: ();<br align="left"/>let mut _420: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _421: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _422: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _423: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _424: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _425: isize;<br align="left"/>let _426: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _427: !;<br align="left"/>let mut _428: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _429: ();<br align="left"/>let _430: ();<br align="left"/>let mut _431: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _432: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _433: bool;<br align="left"/>let mut _434: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _435: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _436: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _437: i64;<br align="left"/>let mut _438: ();<br align="left"/>let _439: error::ErrorCode;<br align="left"/>let _440: ();<br align="left"/>let mut _441: &amp;ReErased str;<br align="left"/>let _442: &amp;ReErased str;<br align="left"/>let mut _443: &amp;ReErased std::string::String;<br align="left"/>let _444: &amp;ReErased std::string::String;<br align="left"/>let _445: std::string::String;<br align="left"/>let _446: std::string::String;<br align="left"/>let mut _447: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _448: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _449: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _450: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _451: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _452: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _453: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _454: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _455: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _456: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _457: &amp;ReErased error::ErrorCode;<br align="left"/>let _458: &amp;ReErased error::ErrorCode;<br align="left"/>let _459: ();<br align="left"/>let mut _460: &amp;ReErased str;<br align="left"/>let _461: &amp;ReErased str;<br align="left"/>let mut _462: &amp;ReErased std::string::String;<br align="left"/>let _463: &amp;ReErased std::string::String;<br align="left"/>let _464: std::string::String;<br align="left"/>let _465: std::string::String;<br align="left"/>let mut _466: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _467: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _468: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _469: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _470: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _471: error::ErrorCode;<br align="left"/>let mut _472: isize;<br align="left"/>let _473: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _474: !;<br align="left"/>let mut _475: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _476: ();<br align="left"/>let _477: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _478: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _479: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _480: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _481: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _482: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _483: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _484: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _485: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _486: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _487: isize;<br align="left"/>let _488: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _489: !;<br align="left"/>let mut _490: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _491: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _492: state::oracle::MMOraclePriceData;<br align="left"/>let mut _493: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::MMOraclePriceData&gt;;<br align="left"/>let mut _494: std::result::Result&lt;state::oracle::MMOraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _495: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _496: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _497: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _498: state::oracle::OraclePriceData;<br align="left"/>let mut _499: u64;<br align="left"/>let mut _500: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let _501: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let mut _502: isize;<br align="left"/>let _503: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _504: !;<br align="left"/>let mut _505: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _506: state::oracle::MMOraclePriceData;<br align="left"/>let _507: state::oracle::OraclePriceData;<br align="left"/>let mut _508: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let mut _509: math::oracle::OracleValidity;<br align="left"/>let mut _510: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::oracle::OracleValidity&gt;;<br align="left"/>let mut _511: std::result::Result&lt;math::oracle::OracleValidity, error::ErrorCode&gt;;<br align="left"/>let mut _512: state::user::MarketType;<br align="left"/>let mut _513: u16;<br align="left"/>let mut _514: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _515: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _516: i64;<br align="left"/>let mut _517: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _518: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _519: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _520: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _521: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let _522: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let mut _523: u64;<br align="left"/>let mut _524: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _525: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _526: state::perp_market::PerpMarket;<br align="left"/>let mut _527: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _528: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _529: isize;<br align="left"/>let _530: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _531: !;<br align="left"/>let mut _532: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _533: u64;<br align="left"/>let mut _534: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _535: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _536: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _537: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _538: math::oracle::LogMode;<br align="left"/>let mut _539: i8;<br align="left"/>let mut _540: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _541: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _542: isize;<br align="left"/>let _543: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _544: !;<br align="left"/>let mut _545: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _546: math::oracle::OracleValidity;<br align="left"/>let mut _547: bool;<br align="left"/>let mut _548: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _549: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _550: math::oracle::OracleValidity;<br align="left"/>let mut _551: std::option::Option&lt;math::oracle::DriftAction&gt;;<br align="left"/>let mut _552: math::oracle::DriftAction;<br align="left"/>let mut _553: isize;<br align="left"/>let _554: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _555: !;<br align="left"/>let mut _556: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _557: bool;<br align="left"/>let mut _558: i64;<br align="left"/>let mut _559: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let mut _560: i64;<br align="left"/>let mut _561: bool;<br align="left"/>let mut _562: bool;<br align="left"/>let mut _563: bool;<br align="left"/>let mut _564: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _565: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _566: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _567: state::paused_operations::PerpOperation;<br align="left"/>let mut _568: bool;<br align="left"/>let mut _569: bool;<br align="left"/>let mut _570: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _571: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _572: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _573: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _574: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _575: isize;<br align="left"/>let _576: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _577: !;<br align="left"/>let mut _578: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _579: bool;<br align="left"/>let _580: bool;<br align="left"/>let mut _581: bool;<br align="left"/>let mut _582: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let mut _583: bool;<br align="left"/>let mut _584: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let _585: bool;<br align="left"/>let mut _586: bool;<br align="left"/>let mut _587: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let mut _588: bool;<br align="left"/>let _589: bool;<br align="left"/>let mut _590: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _591: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _592: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _593: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _594: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _595: controller::position::PositionDirection;<br align="left"/>let mut _596: isize;<br align="left"/>let _597: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _598: !;<br align="left"/>let mut _599: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _600: bool;<br align="left"/>let mut _601: bool;<br align="left"/>let mut _602: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _603: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _604: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _605: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _606: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _607: bool;<br align="left"/>let mut _608: isize;<br align="left"/>let _609: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _610: !;<br align="left"/>let mut _611: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _612: bool;<br align="left"/>let mut _613: bool;<br align="left"/>let mut _614: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _615: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _616: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _617: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _618: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _619: &amp;ReErased state::state::State;<br align="left"/>let _620: &amp;ReErased &amp;ReErased state::state::State;<br align="left"/>let mut _621: bool;<br align="left"/>let mut _622: isize;<br align="left"/>let _623: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _624: !;<br align="left"/>let mut _625: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _626: bool;<br align="left"/>let mut _627: bool;<br align="left"/>let mut _628: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _629: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _630: &amp;ReErased state::user::User;<br align="left"/>let _631: &amp;ReErased state::user::User;<br align="left"/>let mut _632: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _633: &amp;ReErased state::user::UserStats;<br align="left"/>let _634: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _635: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _636: isize;<br align="left"/>let _637: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _638: !;<br align="left"/>let mut _639: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _640: bool;<br align="left"/>let mut _641: u64;<br align="left"/>let mut _642: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _643: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _644: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _645: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _646: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _647: isize;<br align="left"/>let _648: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _649: !;<br align="left"/>let mut _650: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _651: u64;<br align="left"/>let mut _652: i64;<br align="left"/>let mut _653: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let mut _654: i64;<br align="left"/>let mut _655: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _656: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _657: u16;<br align="left"/>let mut _658: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _659: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _660: u8;<br align="left"/>let mut _661: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _662: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _663: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _664: u8;<br align="left"/>let _665: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _666: bool;<br align="left"/>let mut _667: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _668: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _669: math::oracle::OracleValidity;<br align="left"/>let mut _670: std::option::Option&lt;math::oracle::DriftAction&gt;;<br align="left"/>let mut _671: math::oracle::DriftAction;<br align="left"/>let mut _672: isize;<br align="left"/>let _673: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _674: !;<br align="left"/>let mut _675: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _676: bool;<br align="left"/>let mut _677: i64;<br align="left"/>let _678: ();<br align="left"/>let mut _679: &amp;ReErased str;<br align="left"/>let _680: &amp;ReErased str;<br align="left"/>let mut _681: &amp;ReErased std::string::String;<br align="left"/>let _682: &amp;ReErased std::string::String;<br align="left"/>let _683: std::string::String;<br align="left"/>let _684: std::string::String;<br align="left"/>let mut _685: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _686: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _687: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _688: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _689: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _690: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _691: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _692: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _693: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _694: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _695: &amp;ReErased u16;<br align="left"/>let _696: &amp;ReErased u16;<br align="left"/>let _697: bool;<br align="left"/>let mut _698: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _699: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _700: bool;<br align="left"/>let mut _701: &amp;ReErased std::collections::BTreeMap&lt;anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _702: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _703: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _704: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _705: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let mut _706: (std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;, std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;&gt;);<br align="left"/>let mut _707: bool;<br align="left"/>let mut _708: bool;<br align="left"/>let _709: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _710: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _711: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _712: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _713: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _714: Closure(DefId(0:4708 ~ drift[d311]::controller::orders::fill_perp_order::{closure#4}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _715: isize;<br align="left"/>let _716: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _717: !;<br align="left"/>let mut _718: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _719: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _720: ();<br align="left"/>let mut _721: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _722: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _723: bool;<br align="left"/>let mut _724: u8;<br align="left"/>let mut _725: &amp;ReErased state::user::User;<br align="left"/>let mut _726: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _727: ();<br align="left"/>let _728: error::ErrorCode;<br align="left"/>let _729: ();<br align="left"/>let mut _730: &amp;ReErased str;<br align="left"/>let _731: &amp;ReErased str;<br align="left"/>let mut _732: &amp;ReErased std::string::String;<br align="left"/>let _733: &amp;ReErased std::string::String;<br align="left"/>let _734: std::string::String;<br align="left"/>let _735: std::string::String;<br align="left"/>let mut _736: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _737: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _738: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _739: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _740: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _741: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _742: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _743: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _744: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _745: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _746: &amp;ReErased error::ErrorCode;<br align="left"/>let _747: &amp;ReErased error::ErrorCode;<br align="left"/>let _748: ();<br align="left"/>let mut _749: &amp;ReErased str;<br align="left"/>let _750: &amp;ReErased str;<br align="left"/>let mut _751: &amp;ReErased std::string::String;<br align="left"/>let _752: &amp;ReErased std::string::String;<br align="left"/>let _753: std::string::String;<br align="left"/>let _754: std::string::String;<br align="left"/>let mut _755: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _756: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _757: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _758: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _759: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _760: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _761: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _762: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _763: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _764: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _765: &amp;ReErased u8;<br align="left"/>let _766: &amp;ReErased u8;<br align="left"/>let _767: &amp;ReErased state::user::User;<br align="left"/>let mut _768: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _769: error::ErrorCode;<br align="left"/>let mut _770: isize;<br align="left"/>let _771: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _772: !;<br align="left"/>let mut _773: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _774: ();<br align="left"/>let mut _775: bool;<br align="left"/>let mut _776: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _777: &amp;ReErased state::user::User;<br align="left"/>let mut _778: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _779: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _780: &amp;ReErased state::user::User;<br align="left"/>let mut _781: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _782: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _783: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _784: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let mut _785: std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _786: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let mut _787: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _788: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _789: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _790: Closure(DefId(0:4709 ~ drift[d311]::controller::orders::fill_perp_order::{closure#5}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _791: isize;<br align="left"/>let _792: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _793: !;<br align="left"/>let mut _794: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _795: std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _796: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _797: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let mut _798: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _799: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let _800: std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;;<br align="left"/>let mut _801: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;&gt;;<br align="left"/>let mut _802: std::result::Result&lt;std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _803: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _804: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _805: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _806: &amp;ReErased state::user_map::UserMap&lt;ReErased&gt;;<br align="left"/>let mut _807: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _808: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _809: &amp;ReErased state::user::Order;<br align="left"/>let _810: &amp;ReErased state::user::Order;<br align="left"/>let _811: &amp;ReErased state::user::User;<br align="left"/>let mut _812: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _813: usize;<br align="left"/>let mut _814: usize;<br align="left"/>let mut _815: bool;<br align="left"/>let mut _816: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _817: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _818: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _819: &amp;ReErased mut std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _820: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _821: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _822: u64;<br align="left"/>let mut _823: i64;<br align="left"/>let mut _824: std::option::Option&lt;u32&gt;;<br align="left"/>let mut _825: i64;<br align="left"/>let mut _826: u64;<br align="left"/>let mut _827: bool;<br align="left"/>let mut _828: u64;<br align="left"/>let mut _829: u8;<br align="left"/>let mut _830: isize;<br align="left"/>let _831: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _832: !;<br align="left"/>let mut _833: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _834: std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;;<br align="left"/>let _835: std::option::Option&lt;(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)&gt;;<br align="left"/>let mut _836: bool;<br align="left"/>let mut _837: &amp;ReErased state::fill_mode::FillMode;<br align="left"/>let mut _838: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::option::Option&lt;(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)&gt;&gt;;<br align="left"/>let mut _839: std::result::Result&lt;std::option::Option&lt;(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _840: &amp;ReErased state::user::UserStats;<br align="left"/>let _841: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _842: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _843: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _844: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _845: &amp;ReErased state::user_map::UserMap&lt;ReErased&gt;;<br align="left"/>let mut _846: &amp;ReErased state::user_map::UserStatsMap&lt;ReErased&gt;;<br align="left"/>let mut _847: u64;<br align="left"/>let mut _848: isize;<br align="left"/>let _849: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _850: !;<br align="left"/>let mut _851: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _852: std::option::Option&lt;(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)&gt;;<br align="left"/>let _853: bool;<br align="left"/>let mut _854: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _855: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _856: i64;<br align="left"/>let mut _857: i64;<br align="left"/>let mut _858: i64;<br align="left"/>let mut _859: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _860: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _861: u64;<br align="left"/>let mut _862: &amp;ReErased state::state::OracleGuardRails;<br align="left"/>let mut _863: isize;<br align="left"/>let _864: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _865: !;<br align="left"/>let mut _866: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _867: i64;<br align="left"/>let mut _868: isize;<br align="left"/>let _869: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _870: !;<br align="left"/>let mut _871: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _872: bool;<br align="left"/>let _873: ();<br align="left"/>let mut _874: bool;<br align="left"/>let _875: ();<br align="left"/>let mut _876: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _877: &amp;ReErased mut std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _878: isize;<br align="left"/>let _879: &amp;ReErased mut state::user::User;<br align="left"/>let _880: ();<br align="left"/>let mut _881: &amp;ReErased mut state::user::User;<br align="left"/>let mut _882: u64;<br align="left"/>let mut _883: bool;<br align="left"/>let mut _884: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _885: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _886: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _887: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _888: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _889: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _890: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _891: &amp;ReErased u16;<br align="left"/>let _892: &amp;ReErased u16;<br align="left"/>let mut _893: isize;<br align="left"/>let _894: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _895: !;<br align="left"/>let mut _896: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _897: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _898: !;<br align="left"/>let mut _899: (u64, u64);<br align="left"/>let _900: bool;<br align="left"/>let mut _901: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _902: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _903: &amp;ReErased state::user::User;<br align="left"/>let _904: &amp;ReErased state::user::User;<br align="left"/>let mut _905: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _906: usize;<br align="left"/>let mut _907: i64;<br align="left"/>let mut _908: isize;<br align="left"/>let _909: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _910: !;<br align="left"/>let mut _911: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _912: bool;<br align="left"/>let _913: usize;<br align="left"/>let mut _914: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _915: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _916: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _917: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _918: &amp;ReErased state::user::User;<br align="left"/>let mut _919: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _920: u16;<br align="left"/>let mut _921: &amp;ReErased state::user::User;<br align="left"/>let mut _922: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _923: usize;<br align="left"/>let mut _924: usize;<br align="left"/>let mut _925: bool;<br align="left"/>let mut _926: isize;<br align="left"/>let _927: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _928: !;<br align="left"/>let mut _929: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _930: usize;<br align="left"/>let _931: i64;<br align="left"/>let mut _932: &amp;ReErased state::user::User;<br align="left"/>let mut _933: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _934: usize;<br align="left"/>let mut _935: usize;<br align="left"/>let mut _936: bool;<br align="left"/>let _937: bool;<br align="left"/>let mut _938: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _939: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _940: &amp;ReErased state::user::Order;<br align="left"/>let _941: &amp;ReErased state::user::Order;<br align="left"/>let _942: &amp;ReErased state::user::User;<br align="left"/>let mut _943: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _944: usize;<br align="left"/>let mut _945: usize;<br align="left"/>let mut _946: bool;<br align="left"/>let mut _947: i64;<br align="left"/>let mut _948: u64;<br align="left"/>let mut _949: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _950: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _951: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _952: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _953: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _954: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _955: &amp;ReErased u16;<br align="left"/>let _956: &amp;ReErased u16;<br align="left"/>let mut _957: isize;<br align="left"/>let _958: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _959: !;<br align="left"/>let mut _960: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _961: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _962: isize;<br align="left"/>let _963: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _964: !;<br align="left"/>let mut _965: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _966: bool;<br align="left"/>let _967: ();<br align="left"/>let mut _968: bool;<br align="left"/>let mut _969: bool;<br align="left"/>let mut _970: !;<br align="left"/>let _971: u64;<br align="left"/>let mut _972: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _973: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _974: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _975: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _976: &amp;ReErased u16;<br align="left"/>let _977: &amp;ReErased u16;<br align="left"/>let mut _978: isize;<br align="left"/>let _979: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _980: !;<br align="left"/>let mut _981: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _982: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _983: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _984: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _985: &amp;ReErased mut state::user::User;<br align="left"/>let mut _986: &amp;ReErased mut state::user::User;<br align="left"/>let mut _987: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _988: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _989: &amp;ReErased mut std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _990: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _991: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _992: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _993: u64;<br align="left"/>let mut _994: u64;<br align="left"/>let mut _995: isize;<br align="left"/>let _996: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _997: !;<br align="left"/>let mut _998: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _999: u64;<br align="left"/>let _1000: state::events::OrderActionExplanation;<br align="left"/>let mut _1001: bool;<br align="left"/>let _1002: ();<br align="left"/>let mut _1003: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1004: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1005: usize;<br align="left"/>let mut _1006: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1007: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1008: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1009: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _1010: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1011: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1012: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1013: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1014: i64;<br align="left"/>let mut _1015: u64;<br align="left"/>let mut _1016: state::events::OrderActionExplanation;<br align="left"/>let mut _1017: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _1018: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _1019: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1020: u64;<br align="left"/>let mut _1021: isize;<br align="left"/>let _1022: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1023: !;<br align="left"/>let mut _1024: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1025: ();<br align="left"/>let mut _1026: (u64, u64);<br align="left"/>let _1027: state::perp_market::AMMAvailability;<br align="left"/>let mut _1028: bool;<br align="left"/>let mut _1029: bool;<br align="left"/>let mut _1030: bool;<br align="left"/>let _1031: u64;<br align="left"/>let _1032: u64;<br align="left"/>let mut _1033: (u64, u64);<br align="left"/>let mut _1034: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _1035: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _1036: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1037: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1038: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1039: usize;<br align="left"/>let mut _1040: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _1041: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1042: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _1043: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _1044: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _1045: &amp;ReErased state::user_map::UserMap&lt;ReErased&gt;;<br align="left"/>let mut _1046: &amp;ReErased state::user_map::UserStatsMap&lt;ReErased&gt;;<br align="left"/>let mut _1047: &amp;ReErased [(anchor_lang::prelude::Pubkey, usize, u64)];<br align="left"/>let _1048: &amp;ReErased [(anchor_lang::prelude::Pubkey, usize, u64)];<br align="left"/>let mut _1049: &amp;ReErased std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;;<br align="left"/>let _1050: &amp;ReErased std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64), std::alloc::Global&gt;;<br align="left"/>let mut _1051: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _1052: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _1053: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _1054: &amp;ReErased mut std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _1055: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _1056: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1057: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _1058: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _1059: std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _1060: &amp;ReErased mut std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let mut _1061: std::option::Option&lt;(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)&gt;;<br align="left"/>let mut _1062: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1063: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1064: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1065: &amp;ReErased state::state::FeeStructure;<br align="left"/>let _1066: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _1067: u64;<br align="left"/>let mut _1068: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _1069: i64;<br align="left"/>let mut _1070: u64;<br align="left"/>let mut _1071: u8;<br align="left"/>let mut _1072: state::perp_market::AMMAvailability;<br align="left"/>let mut _1073: state::fill_mode::FillMode;<br align="left"/>let mut _1074: bool;<br align="left"/>let mut _1075: isize;<br align="left"/>let _1076: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1077: !;<br align="left"/>let mut _1078: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1079: (u64, u64);<br align="left"/>let _1080: ();<br align="left"/>let mut _1081: bool;<br align="left"/>let mut _1082: u64;<br align="left"/>let _1083: u64;<br align="left"/>let mut _1084: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1085: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1086: u64;<br align="left"/>let mut _1087: u64;<br align="left"/>let mut _1088: isize;<br align="left"/>let _1089: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1090: !;<br align="left"/>let mut _1091: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1092: u64;<br align="left"/>let mut _1093: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1094: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _1095: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1096: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1097: &amp;ReErased u16;<br align="left"/>let _1098: &amp;ReErased u16;<br align="left"/>let mut _1099: isize;<br align="left"/>let _1100: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1101: !;<br align="left"/>let mut _1102: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1103: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1104: ();<br align="left"/>let mut _1105: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1106: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1107: u64;<br align="left"/>let mut _1108: i64;<br align="left"/>let mut _1109: i64;<br align="left"/>let mut _1110: u32;<br align="left"/>let mut _1111: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1112: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1113: u64;<br align="left"/>let mut _1114: &amp;ReErased state::state::OracleGuardRails;<br align="left"/>let mut _1115: bool;<br align="left"/>let mut _1116: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _1117: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1118: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1119: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _1120: isize;<br align="left"/>let _1121: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1122: !;<br align="left"/>let mut _1123: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1124: ();<br align="left"/>let mut _1125: u64;<br align="left"/>let mut _1126: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _1127: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1128: i64;<br align="left"/>let mut _1129: &amp;ReErased state::user::User;<br align="left"/>let mut _1130: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1131: usize;<br align="left"/>let mut _1132: usize;<br align="left"/>let mut _1133: bool;<br align="left"/>let _1134: bool;<br align="left"/>let mut _1135: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _1136: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _1137: &amp;ReErased state::user::Order;<br align="left"/>let _1138: &amp;ReErased state::user::Order;<br align="left"/>let _1139: &amp;ReErased state::user::User;<br align="left"/>let mut _1140: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1141: usize;<br align="left"/>let mut _1142: usize;<br align="left"/>let mut _1143: bool;<br align="left"/>let mut _1144: i64;<br align="left"/>let mut _1145: u64;<br align="left"/>let mut _1146: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1147: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1148: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1149: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _1150: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1151: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1152: &amp;ReErased u16;<br align="left"/>let _1153: &amp;ReErased u16;<br align="left"/>let mut _1154: isize;<br align="left"/>let _1155: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1156: !;<br align="left"/>let mut _1157: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1158: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1159: isize;<br align="left"/>let _1160: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1161: !;<br align="left"/>let mut _1162: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1163: bool;<br align="left"/>let _1164: ();<br align="left"/>let mut _1165: bool;<br align="left"/>let _1166: u64;<br align="left"/>let mut _1167: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1168: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _1169: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1170: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1171: &amp;ReErased u16;<br align="left"/>let _1172: &amp;ReErased u16;<br align="left"/>let mut _1173: isize;<br align="left"/>let _1174: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1175: !;<br align="left"/>let mut _1176: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1177: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1178: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1179: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1180: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1181: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1182: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1183: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _1184: &amp;ReErased mut std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _1185: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _1186: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _1187: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1188: u64;<br align="left"/>let mut _1189: u64;<br align="left"/>let mut _1190: isize;<br align="left"/>let _1191: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1192: !;<br align="left"/>let mut _1193: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1194: u64;<br align="left"/>let _1195: state::events::OrderActionExplanation;<br align="left"/>let mut _1196: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1197: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1198: usize;<br align="left"/>let mut _1199: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1200: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1201: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1202: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _1203: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1204: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1205: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1206: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1207: i64;<br align="left"/>let mut _1208: u64;<br align="left"/>let mut _1209: state::events::OrderActionExplanation;<br align="left"/>let mut _1210: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _1211: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _1212: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1213: u64;<br align="left"/>let mut _1214: isize;<br align="left"/>let _1215: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1216: !;<br align="left"/>let mut _1217: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1218: ();<br align="left"/>let _1219: ();<br align="left"/>let mut _1220: bool;<br align="left"/>let mut _1221: u64;<br align="left"/>let mut _1222: !;<br align="left"/>let mut _1223: (u64, u64);<br align="left"/>let mut _1224: u64;<br align="left"/>let mut _1225: u64;<br align="left"/>let _1226: ();<br align="left"/>let _1227: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1228: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _1229: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1230: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1231: &amp;ReErased u16;<br align="left"/>let _1232: &amp;ReErased u16;<br align="left"/>let mut _1233: isize;<br align="left"/>let _1234: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1235: !;<br align="left"/>let mut _1236: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1237: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1238: u128;<br align="left"/>let mut _1239: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _1240: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1241: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1242: u128;<br align="left"/>let mut _1243: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1244: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1245: ();<br align="left"/>let mut _1246: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1247: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1248: bool;<br align="left"/>let mut _1249: u128;<br align="left"/>let mut _1250: bool;<br align="left"/>let mut _1251: u128;<br align="left"/>let mut _1252: u128;<br align="left"/>let mut _1253: ();<br align="left"/>let _1254: error::ErrorCode;<br align="left"/>let _1255: ();<br align="left"/>let mut _1256: &amp;ReErased str;<br align="left"/>let _1257: &amp;ReErased str;<br align="left"/>let mut _1258: &amp;ReErased std::string::String;<br align="left"/>let _1259: &amp;ReErased std::string::String;<br align="left"/>let _1260: std::string::String;<br align="left"/>let _1261: std::string::String;<br align="left"/>let mut _1262: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _1263: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _1264: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _1265: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _1266: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1267: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _1268: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _1269: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _1270: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _1271: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _1272: &amp;ReErased error::ErrorCode;<br align="left"/>let _1273: &amp;ReErased error::ErrorCode;<br align="left"/>let _1274: ();<br align="left"/>let mut _1275: &amp;ReErased str;<br align="left"/>let _1276: &amp;ReErased str;<br align="left"/>let mut _1277: &amp;ReErased std::string::String;<br align="left"/>let _1278: &amp;ReErased std::string::String;<br align="left"/>let _1279: std::string::String;<br align="left"/>let _1280: std::string::String;<br align="left"/>let mut _1281: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _1282: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _1283: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _1284: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _1285: [&amp;ReErased str; 3_usize];<br align="left"/>let mut _1286: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _1287: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _1288: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _1289: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _1290: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _1291: &amp;ReErased u128;<br align="left"/>let _1292: &amp;ReErased u128;<br align="left"/>let mut _1293: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _1294: &amp;ReErased u128;<br align="left"/>let _1295: &amp;ReErased u128;<br align="left"/>let mut _1296: error::ErrorCode;<br align="left"/>let mut _1297: isize;<br align="left"/>let _1298: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1299: !;<br align="left"/>let mut _1300: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1301: ();<br align="left"/>let _1302: ();<br align="left"/>let _1303: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1304: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1305: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _1306: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1307: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1308: &amp;ReErased u16;<br align="left"/>let _1309: &amp;ReErased u16;<br align="left"/>let mut _1310: isize;<br align="left"/>let _1311: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1312: !;<br align="left"/>let mut _1313: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1314: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1315: bool;<br align="left"/>let mut _1316: bool;<br align="left"/>let mut _1317: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _1318: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _1319: &amp;ReErased state::state::State;<br align="left"/>let mut _1320: isize;<br align="left"/>let _1321: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1322: !;<br align="left"/>let mut _1323: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1324: bool;<br align="left"/>let mut _1325: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _1326: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1327: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1328: state::paused_operations::PerpOperation;<br align="left"/>let _1329: bool;<br align="left"/>let mut _1330: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _1331: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _1332: u16;<br align="left"/>let mut _1333: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _1334: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _1335: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1336: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1337: i64;<br align="left"/>let mut _1338: u64;<br align="left"/>let mut _1339: &amp;ReErased state::state::OracleGuardRails;<br align="left"/>let _1340: &amp;ReErased state::state::OracleGuardRails;<br align="left"/>let mut _1341: bool;<br align="left"/>let mut _1342: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1343: u64;<br align="left"/>let mut _1344: isize;<br align="left"/>let _1345: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1346: !;<br align="left"/>let mut _1347: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1348: bool;<br align="left"/>let _1349: ();<br align="left"/>let mut _1350: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1351: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1352: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1353: u64;<br align="left"/>let mut _1354: (u64, u64);<br align="left"/>let mut _1355: u64;<br align="left"/>let mut _1356: u64;<br align="left"/>let mut _1357: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let mut _1358: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1359: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1360: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1361: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1362: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1363: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1364: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1365: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1366: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _1367: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1368: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1369: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1370: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1371: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1372: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _1373: &amp;ReErased state::state::State;<br align="left"/>let mut _1374: bool;<br align="left"/>let mut _1375: bool;<br align="left"/>let mut _1376: bool;<br align="left"/>let mut _1377: bool;<br align="left"/>let mut _1378: bool;<br align="left"/>let mut _1379: isize;<br align="left"/>let mut _1380: isize;<br align="left"/>let mut _1381: isize;<br align="left"/>let mut _1382: isize;<br align="left"/>let mut _1383: isize;<br align="left"/>let mut _1384: isize;<br align="left"/>let mut _1385: isize;<br align="left"/>let mut _1386: isize;<br align="left"/>let mut _1387: isize;<br align="left"/>let mut _1388: isize;<br align="left"/>let mut _1389: isize;<br align="left"/>let mut _1390: isize;<br align="left"/>let mut _1391: isize;<br align="left"/>let mut _1392: isize;<br align="left"/>let mut _1393: isize;<br align="left"/>let mut _1394: isize;<br align="left"/>let mut _1395: isize;<br align="left"/>let mut _1396: isize;<br align="left"/>let mut _1397: isize;<br align="left"/>let mut _1398: isize;<br align="left"/>let mut _1399: isize;<br align="left"/>let mut _1400: isize;<br align="left"/>let mut _1401: isize;<br align="left"/>let mut _1402: isize;<br align="left"/>let mut _1403: isize;<br align="left"/>let mut _1404: isize;<br align="left"/>let mut _1405: isize;<br align="left"/>let mut _1406: isize;<br align="left"/>let mut _1407: isize;<br align="left"/>let mut _1408: isize;<br align="left"/>let mut _1409: isize;<br align="left"/>let mut _1410: isize;<br align="left"/>let mut _1411: isize;<br align="left"/>let mut _1412: isize;<br align="left"/>let mut _1413: isize;<br align="left"/>let mut _1414: isize;<br align="left"/>let mut _1415: isize;<br align="left"/>let mut _1416: isize;<br align="left"/>let mut _1417: isize;<br align="left"/>let mut _1418: isize;<br align="left"/>let mut _1419: isize;<br align="left"/>let mut _1420: isize;<br align="left"/>let mut _1421: isize;<br align="left"/>let mut _1422: isize;<br align="left"/>let mut _1423: isize;<br align="left"/>let mut _1424: isize;<br align="left"/>let mut _1425: isize;<br align="left"/>let mut _1426: isize;<br align="left"/>let mut _1427: isize;<br align="left"/>let mut _1428: isize;<br align="left"/>let mut _1429: isize;<br align="left"/>let mut _1430: isize;<br align="left"/>let mut _1431: isize;<br align="left"/>let mut _1432: isize;<br align="left"/>let mut _1433: isize;<br align="left"/>let mut _1434: isize;<br align="left"/>let mut _1435: isize;<br align="left"/>let mut _1436: isize;<br align="left"/>let mut _1437: isize;<br align="left"/>let mut _1438: isize;<br align="left"/>let mut _1439: isize;<br align="left"/>let mut _1440: isize;<br align="left"/>let mut _1441: isize;<br align="left"/>let mut _1442: isize;<br align="left"/>let mut _1443: isize;<br align="left"/>let mut _1444: isize;<br align="left"/>let mut _1445: isize;<br align="left"/>let mut _1446: isize;<br align="left"/>let mut _1447: isize;<br align="left"/>let mut _1448: isize;<br align="left"/>let mut _1449: isize;<br align="left"/>let mut _1450: isize;<br align="left"/>let mut _1451: isize;<br align="left"/>let mut _1452: isize;<br align="left"/>let mut _1453: isize;<br align="left"/>let mut _1454: isize;<br align="left"/>let mut _1455: isize;<br align="left"/>debug order_id =&gt; _1;<br align="left"/>debug state =&gt; _2;<br align="left"/>debug user =&gt; _3;<br align="left"/>debug user_stats =&gt; _4;<br align="left"/>debug spot_market_map =&gt; _5;<br align="left"/>debug perp_market_map =&gt; _6;<br align="left"/>debug oracle_map =&gt; _7;<br align="left"/>debug filler =&gt; _8;<br align="left"/>debug filler_stats =&gt; _9;<br align="left"/>debug makers_and_referrer =&gt; _10;<br align="left"/>debug makers_and_referrer_stats =&gt; _11;<br align="left"/>debug jit_maker_order_id =&gt; _12;<br align="left"/>debug clock =&gt; _13;<br align="left"/>debug fill_mode =&gt; _14;<br align="left"/>debug now =&gt; _15;<br align="left"/>debug slot =&gt; _16;<br align="left"/>debug filler_key =&gt; _17;<br align="left"/>debug user_key =&gt; _19;<br align="left"/>debug user =&gt; _21;<br align="left"/>debug residual =&gt; _29;<br align="left"/>debug val =&gt; _32;<br align="left"/>debug user_stats =&gt; _33;<br align="left"/>debug residual =&gt; _41;<br align="left"/>debug val =&gt; _44;<br align="left"/>debug order_index =&gt; _45;<br align="left"/>debug residual =&gt; _59;<br align="left"/>debug val =&gt; _62;<br align="left"/>debug order_status =&gt; _63;<br align="left"/>debug market_index =&gt; _64;<br align="left"/>debug order_market_type =&gt; _65;<br align="left"/>debug order_price =&gt; _66;<br align="left"/>debug order_oracle_price_offset =&gt; _67;<br align="left"/>debug order_direction =&gt; _68;<br align="left"/>debug order_auction_duration =&gt; _69;<br align="left"/>debug error_code =&gt; _121;<br align="left"/>debug res =&gt; _128;<br align="left"/>debug residual =&gt; _146;<br align="left"/>debug val =&gt; _149;<br align="left"/>debug market =&gt; _150;<br align="left"/>debug residual =&gt; _157;<br align="left"/>debug val =&gt; _160;<br align="left"/>debug residual =&gt; _175;<br align="left"/>debug val =&gt; _178;<br align="left"/>debug error_code =&gt; _187;<br align="left"/>debug res =&gt; _194;<br align="left"/>debug res =&gt; _213;<br align="left"/>debug residual =&gt; _221;<br align="left"/>debug val =&gt; _224;<br align="left"/>debug error_code =&gt; _234;<br align="left"/>debug res =&gt; _241;<br align="left"/>debug res =&gt; _260;<br align="left"/>debug residual =&gt; _268;<br align="left"/>debug val =&gt; _271;<br align="left"/>debug error_code =&gt; _282;<br align="left"/>debug res =&gt; _289;<br align="left"/>debug residual =&gt; _307;<br align="left"/>debug val =&gt; _310;<br align="left"/>debug error_code =&gt; _329;<br align="left"/>debug res =&gt; _336;<br align="left"/>debug residual =&gt; _354;<br align="left"/>debug val =&gt; _357;<br align="left"/>debug reserve_price_before =&gt; _385;<br align="left"/>debug safe_oracle_validity =&gt; _386;<br align="left"/>debug oracle_price =&gt; _387;<br align="left"/>debug oracle_twap_5min =&gt; _388;<br align="left"/>debug perp_market_index =&gt; _389;<br align="left"/>debug user_can_skip_duration =&gt; _390;<br align="left"/>debug amm_can_skip_duration =&gt; _391;<br align="left"/>debug amm_has_low_enough_inventory =&gt; _392;<br align="left"/>debug oracle_valid_for_amm_fill =&gt; _393;<br align="left"/>debug oracle_stale_for_margin =&gt; _394;<br align="left"/>debug min_auction_duration =&gt; _395;<br align="left"/>debug amm_is_available =&gt; _396;<br align="left"/>debug residual =&gt; _402;<br align="left"/>debug val =&gt; _405;<br align="left"/>debug market =&gt; _407;<br align="left"/>debug residual =&gt; _415;<br align="left"/>debug val =&gt; _418;<br align="left"/>debug residual =&gt; _426;<br align="left"/>debug val =&gt; _429;<br align="left"/>debug error_code =&gt; _439;<br align="left"/>debug res =&gt; _446;<br align="left"/>debug res =&gt; _465;<br align="left"/>debug residual =&gt; _473;<br align="left"/>debug val =&gt; _476;<br align="left"/>debug oracle_price_data =&gt; _477;<br align="left"/>debug residual =&gt; _488;<br align="left"/>debug val =&gt; _491;<br align="left"/>debug mm_oracle_price_data =&gt; _492;<br align="left"/>debug residual =&gt; _503;<br align="left"/>debug val =&gt; _506;<br align="left"/>debug safe_oracle_price_data =&gt; _507;<br align="left"/>debug residual =&gt; _530;<br align="left"/>debug val =&gt; _533;<br align="left"/>debug residual =&gt; _543;<br align="left"/>debug val =&gt; _546;<br align="left"/>debug residual =&gt; _554;<br align="left"/>debug val =&gt; _557;<br align="left"/>debug residual =&gt; _576;<br align="left"/>debug val =&gt; _579;<br align="left"/>debug amm_available_mm_oracle_recent_but_volatile =&gt; _580;<br align="left"/>debug amm_available =&gt; _585;<br align="left"/>debug amm_wants_to_jit_make =&gt; _589;<br align="left"/>debug residual =&gt; _597;<br align="left"/>debug val =&gt; _600;<br align="left"/>debug residual =&gt; _609;<br align="left"/>debug val =&gt; _612;<br align="left"/>debug residual =&gt; _623;<br align="left"/>debug val =&gt; _626;<br align="left"/>debug residual =&gt; _637;<br align="left"/>debug val =&gt; _640;<br align="left"/>debug residual =&gt; _648;<br align="left"/>debug val =&gt; _651;<br align="left"/>debug valid_oracle_price =&gt; _665;<br align="left"/>debug residual =&gt; _673;<br align="left"/>debug val =&gt; _676;<br align="left"/>debug res =&gt; _684;<br align="left"/>debug is_filler_taker =&gt; _697;<br align="left"/>debug is_filler_maker =&gt; _700;<br align="left"/>debug filler =&gt; _704;<br align="left"/>debug filler_stats =&gt; _705;<br align="left"/>debug filler =&gt; _709;<br align="left"/>debug residual =&gt; _716;<br align="left"/>debug val =&gt; _719;<br align="left"/>debug error_code =&gt; _728;<br align="left"/>debug res =&gt; _735;<br align="left"/>debug res =&gt; _754;<br align="left"/>debug residual =&gt; _771;<br align="left"/>debug val =&gt; _774;<br align="left"/>debug residual =&gt; _792;<br align="left"/>debug val =&gt; _795;<br align="left"/>debug maker_orders_info =&gt; _800;<br align="left"/>debug residual =&gt; _831;<br align="left"/>debug val =&gt; _834;<br align="left"/>debug referrer_info =&gt; _835;<br align="left"/>debug residual =&gt; _849;<br align="left"/>debug val =&gt; _852;<br align="left"/>debug oracle_too_divergent_with_twap_5min =&gt; _853;<br align="left"/>debug residual =&gt; _864;<br align="left"/>debug val =&gt; _867;<br align="left"/>debug residual =&gt; _869;<br align="left"/>debug val =&gt; _872;<br align="left"/>debug filler =&gt; _879;<br align="left"/>debug residual =&gt; _894;<br align="left"/>debug val =&gt; _897;<br align="left"/>debug should_expire_order =&gt; _900;<br align="left"/>debug residual =&gt; _909;<br align="left"/>debug val =&gt; _912;<br align="left"/>debug position_index =&gt; _913;<br align="left"/>debug residual =&gt; _927;<br align="left"/>debug val =&gt; _930;<br align="left"/>debug existing_base_asset_amount =&gt; _931;<br align="left"/>debug should_cancel_reduce_only =&gt; _937;<br align="left"/>debug residual =&gt; _958;<br align="left"/>debug val =&gt; _961;<br align="left"/>debug residual =&gt; _963;<br align="left"/>debug val =&gt; _966;<br align="left"/>debug filler_reward =&gt; _971;<br align="left"/>debug market =&gt; _972;<br align="left"/>debug residual =&gt; _979;<br align="left"/>debug val =&gt; _982;<br align="left"/>debug residual =&gt; _996;<br align="left"/>debug val =&gt; _999;<br align="left"/>debug explanation =&gt; _1000;<br align="left"/>debug residual =&gt; _1022;<br align="left"/>debug val =&gt; _1025;<br align="left"/>debug amm_availability =&gt; _1027;<br align="left"/>debug base_asset_amount =&gt; _1031;<br align="left"/>debug quote_asset_amount =&gt; _1032;<br align="left"/>debug residual =&gt; _1076;<br align="left"/>debug val =&gt; _1079;<br align="left"/>debug fill_price =&gt; _1083;<br align="left"/>debug residual =&gt; _1089;<br align="left"/>debug val =&gt; _1092;<br align="left"/>debug perp_market =&gt; _1093;<br align="left"/>debug residual =&gt; _1100;<br align="left"/>debug val =&gt; _1103;<br align="left"/>debug residual =&gt; _1121;<br align="left"/>debug val =&gt; _1124;<br align="left"/>debug base_asset_amount_after =&gt; _1128;<br align="left"/>debug should_cancel_reduce_only =&gt; _1134;<br align="left"/>debug residual =&gt; _1155;<br align="left"/>debug val =&gt; _1158;<br align="left"/>debug residual =&gt; _1160;<br align="left"/>debug val =&gt; _1163;<br align="left"/>debug filler_reward =&gt; _1166;<br align="left"/>debug market =&gt; _1167;<br align="left"/>debug residual =&gt; _1174;<br align="left"/>debug val =&gt; _1177;<br align="left"/>debug residual =&gt; _1191;<br align="left"/>debug val =&gt; _1194;<br align="left"/>debug explanation =&gt; _1195;<br align="left"/>debug residual =&gt; _1215;<br align="left"/>debug val =&gt; _1218;<br align="left"/>debug market =&gt; _1227;<br align="left"/>debug residual =&gt; _1234;<br align="left"/>debug val =&gt; _1237;<br align="left"/>debug open_interest =&gt; _1238;<br align="left"/>debug max_open_interest =&gt; _1242;<br align="left"/>debug error_code =&gt; _1254;<br align="left"/>debug res =&gt; _1261;<br align="left"/>debug res =&gt; _1280;<br align="left"/>debug residual =&gt; _1298;<br align="left"/>debug val =&gt; _1301;<br align="left"/>debug market =&gt; _1303;<br align="left"/>debug residual =&gt; _1311;<br align="left"/>debug val =&gt; _1314;<br align="left"/>debug funding_paused =&gt; _1315;<br align="left"/>debug residual =&gt; _1321;<br align="left"/>debug val =&gt; _1324;<br align="left"/>debug residual =&gt; _1345;<br align="left"/>debug val =&gt; _1348;<br align="left"/>>;
    bb0__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_1377 = const false<br/>_1374 = const false<br/>_1378 = const false<br/>_1376 = const false<br/>_1375 = const false<br/>StorageLive(_15)<br/>_15 = ((*_13).4: i64)<br/>StorageLive(_16)<br/>_16 = ((*_13).0: u64)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = &amp;(*_8)<br/></td></tr><tr><td align="left">_17 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, User&gt; as anchor_lang::Key&gt;::key(move _18)</td></tr></table>>];
    bb1__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;(*_3)<br/></td></tr><tr><td align="left">_19 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, User&gt; as anchor_lang::Key&gt;::key(move _20)</td></tr></table>>];
    bb2__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = &amp;(*_3)<br/></td></tr><tr><td align="left">_25 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _26)</td></tr></table>>];
    bb3__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageLive(_27)<br/>_27 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_24 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _25, move _27)</td></tr></table>>];
    bb4__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_23 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _24)</td></tr></table>>];
    bb5__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_28 = discriminant(_23)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb6__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = move ((_23 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_22 = move _32<br/>StorageDead(_32)<br/>_21 = &amp;mut _22<br/>_1381 = discriminant(_23)<br/>StorageDead(_23)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = &amp;(*_4)<br/></td></tr><tr><td align="left">_37 = anchor_lang::prelude::AccountLoader::&lt;'_, UserStats&gt;::load_mut(move _38)</td></tr></table>>];
    bb7__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_23 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_31)<br/>_31 = _29<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _31)</td></tr></table>>];
    bb9__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/>_1379 = discriminant(_23)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageLive(_39)<br/>_39 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_36 = std::result::Result::&lt;RefMut&lt;'_, UserStats&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _37, move _39)</td></tr></table>>];
    bb11__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">_35 = &lt;std::result::Result&lt;RefMut&lt;'_, UserStats&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _36)</td></tr></table>>];
    bb12__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_40 = discriminant(_35)<br/></td></tr><tr><td align="left">switchInt(move _40)</td></tr></table>>];
    bb13__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = move ((_35 as Continue).0: std::cell::RefMut&lt;'_, state::user::UserStats&gt;)<br/>_34 = move _44<br/>StorageDead(_44)<br/>_33 = &amp;mut _34<br/>_1385 = discriminant(_35)<br/>StorageDead(_35)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = &amp;(*_21)<br/></td></tr><tr><td align="left">_53 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _54)</td></tr></table>>];
    bb14__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_35 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_43)<br/>_43 = _41<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _43)</td></tr></table>>];
    bb15__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_41)<br/>_1383 = discriminant(_35)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>_52 = &amp;((*_53).5: [state::user::Order; 32])<br/>_51 = move _52 as &amp;[state::user::Order] (PointerCoercion(Unsize))<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">_50 = core::slice::&lt;impl [Order]&gt;::iter(move _51)</td></tr></table>>];
    bb17__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_49 = &amp;mut _50<br/>StorageDead(_51)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_56 = &amp;_1<br/>_55 = {closure@programs/drift/src/controller/orders.rs:985:19: 985:26} { order_id: move _56 }<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">_48 = &lt;std::slice::Iter&lt;'_, Order&gt; as Iterator&gt;::position::&lt;{closure@programs/drift/src/controller/orders.rs:985:19: 985:26}&gt;(move _49, move _55)</td></tr></table>>];
    bb18__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_49)<br/>StorageLive(_57)<br/>_57 = {closure@programs/drift/src/error.rs:647:9: 647:11}<br/></td></tr><tr><td align="left">_47 = Option::&lt;usize&gt;::ok_or_else::&lt;error::ErrorCode, {closure@programs/drift/src/error.rs:647:9: 647:11}&gt;(move _48, move _57)</td></tr></table>>];
    bb19__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">_46 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _47)</td></tr></table>>];
    bb20__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>_58 = discriminant(_46)<br/></td></tr><tr><td align="left">switchInt(move _58)</td></tr></table>>];
    bb21__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = ((_46 as Continue).0: usize)<br/>_45 = _62<br/>StorageDead(_62)<br/>StorageDead(_53)<br/>StorageDead(_50)<br/>StorageDead(_46)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = &amp;(*_21)<br/></td></tr><tr><td align="left">_72 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _73)</td></tr></table>>];
    bb22__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = ((_46 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_61)<br/>_61 = _59<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _61)</td></tr></table>>];
    bb23__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_59)<br/>StorageDead(_53)<br/>StorageDead(_50)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageLive(_74)<br/>_74 = _45<br/>_75 = Len(((*_72).5: [state::user::Order; 32]))<br/>_76 = Lt(_74, _75)<br/></td></tr><tr><td align="left">assert(move _76, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _75, _74)</td></tr></table>>];
    bb25__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_71 = (((*_72).5: [state::user::Order; 32])[_74].12: state::user::OrderStatus)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = &amp;(*_21)<br/></td></tr><tr><td align="left">_78 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _79)</td></tr></table>>];
    bb26__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageLive(_80)<br/>_80 = _45<br/>_81 = Len(((*_78).5: [state::user::Order; 32]))<br/>_82 = Lt(_80, _81)<br/></td></tr><tr><td align="left">assert(move _82, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _81, _80)</td></tr></table>>];
    bb27__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_77 = (((*_78).5: [state::user::Order; 32])[_80].11: u16)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>_85 = &amp;(*_21)<br/></td></tr><tr><td align="left">_84 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _85)</td></tr></table>>];
    bb28__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>StorageLive(_86)<br/>_86 = _45<br/>_87 = Len(((*_84).5: [state::user::Order; 32]))<br/>_88 = Lt(_86, _87)<br/></td></tr><tr><td align="left">assert(move _88, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _87, _86)</td></tr></table>>];
    bb29__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_83 = (((*_84).5: [state::user::Order; 32])[_86].14: state::user::MarketType)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = &amp;(*_21)<br/></td></tr><tr><td align="left">_90 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _91)</td></tr></table>>];
    bb30__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageLive(_92)<br/>_92 = _45<br/>_93 = Len(((*_90).5: [state::user::Order; 32]))<br/>_94 = Lt(_92, _93)<br/></td></tr><tr><td align="left">assert(move _94, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _93, _92)</td></tr></table>>];
    bb31__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_89 = (((*_90).5: [state::user::Order; 32])[_92].1: u64)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>_97 = &amp;(*_21)<br/></td></tr><tr><td align="left">_96 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _97)</td></tr></table>>];
    bb32__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>StorageLive(_98)<br/>_98 = _45<br/>_99 = Len(((*_96).5: [state::user::Order; 32]))<br/>_100 = Lt(_98, _99)<br/></td></tr><tr><td align="left">assert(move _100, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _99, _98)</td></tr></table>>];
    bb33__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_95 = (((*_96).5: [state::user::Order; 32])[_98].9: i32)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_103 = &amp;(*_21)<br/></td></tr><tr><td align="left">_102 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _103)</td></tr></table>>];
    bb34__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>StorageLive(_104)<br/>_104 = _45<br/>_105 = Len(((*_102).5: [state::user::Order; 32]))<br/>_106 = Lt(_104, _105)<br/></td></tr><tr><td align="left">assert(move _106, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _105, _104)</td></tr></table>>];
    bb35__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_101 = (((*_102).5: [state::user::Order; 32])[_104].17: controller::position::PositionDirection)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>_109 = &amp;(*_21)<br/></td></tr><tr><td align="left">_108 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _109)</td></tr></table>>];
    bb36__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/>StorageLive(_110)<br/>_110 = _45<br/>_111 = Len(((*_108).5: [state::user::Order; 32]))<br/>_112 = Lt(_110, _111)<br/></td></tr><tr><td align="left">assert(move _112, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _111, _110)</td></tr></table>>];
    bb37__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_107 = (((*_108).5: [state::user::Order; 32])[_110].22: u8)<br/>_70 = (move _71, move _77, move _83, move _89, move _95, move _101, move _107)<br/>StorageDead(_107)<br/>StorageDead(_101)<br/>StorageDead(_95)<br/>StorageDead(_89)<br/>StorageDead(_83)<br/>StorageDead(_77)<br/>StorageDead(_71)<br/>StorageLive(_63)<br/>_63 = (_70.0: state::user::OrderStatus)<br/>StorageLive(_64)<br/>_64 = (_70.1: u16)<br/>StorageLive(_65)<br/>_65 = (_70.2: state::user::MarketType)<br/>StorageLive(_66)<br/>_66 = (_70.3: u64)<br/>StorageLive(_67)<br/>_67 = (_70.4: i32)<br/>StorageLive(_68)<br/>_68 = (_70.5: controller::position::PositionDirection)<br/>StorageLive(_69)<br/>_69 = (_70.6: u8)<br/>StorageDead(_110)<br/>StorageDead(_108)<br/>StorageDead(_104)<br/>StorageDead(_102)<br/>StorageDead(_98)<br/>StorageDead(_96)<br/>StorageDead(_92)<br/>StorageDead(_90)<br/>StorageDead(_86)<br/>StorageDead(_84)<br/>StorageDead(_80)<br/>StorageDead(_78)<br/>StorageDead(_74)<br/>StorageDead(_72)<br/>StorageDead(_70)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>_117 = &amp;_65<br/>StorageLive(_118)<br/>_1372 = const _<br/>_118 = &amp;(*_1372)<br/></td></tr><tr><td align="left">_116 = &lt;state::user::MarketType as PartialEq&gt;::eq(move _117, move _118)</td></tr></table>>];
    bb38__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">switchInt(move _116)</td></tr></table>>];
    bb39__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>StorageDead(_117)<br/>StorageLive(_120)<br/>_120 = ()<br/>_115 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _120)<br/>StorageDead(_120)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>StorageDead(_117)<br/>StorageLive(_121)<br/>_121 = error::ErrorCode::InvalidOrderMarketType<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>_1371 = const _<br/>_132 = &amp;(*_1371)<br/>_131 = &amp;(*_132)<br/>_130 = move _131 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_131)<br/>StorageLive(_134)<br/>StorageLive(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>_140 = &amp;_121<br/>_139 = &amp;(*_140)<br/></td></tr><tr><td align="left">_138 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _139)</td></tr></table>>];
    bb41__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_139)<br/>_137 = [move _138]<br/>StorageDead(_138)<br/>_136 = &amp;_137<br/>_135 = &amp;(*_136)<br/>_134 = move _135 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_135)<br/></td></tr><tr><td align="left">_129 = Arguments::&lt;'_&gt;::new_v1(move _130, move _134)</td></tr></table>>];
    bb42__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_130)<br/></td></tr><tr><td align="left">_128 = format(move _129)</td></tr></table>>];
    bb43__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>StorageDead(_140)<br/>StorageDead(_137)<br/>StorageDead(_136)<br/>StorageDead(_132)<br/>_127 = move _128<br/>StorageDead(_128)<br/>_126 = &amp;_127<br/>_125 = &amp;(*_126)<br/></td></tr><tr><td align="left">_124 = &lt;String as Deref&gt;::deref(move _125)</td></tr></table>>];
    bb44__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">_123 = &amp;(*_124)<br/>StorageDead(_125)<br/></td></tr><tr><td align="left">_122 = solana_program::log::sol_log(move _123)</td></tr></table>>];
    bb45__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/></td></tr><tr><td align="left">drop(_127)</td></tr></table>>];
    bb46__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_127)<br/>StorageDead(_126)<br/>StorageDead(_124)<br/>StorageDead(_122)<br/>StorageLive(_141)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>_143 = const &quot;must be perp order&quot;<br/>_142 = &amp;(*_143)<br/></td></tr><tr><td align="left">_141 = solana_program::log::sol_log(move _142)</td></tr></table>>];
    bb47__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_142)<br/>StorageDead(_143)<br/>StorageDead(_141)<br/>StorageLive(_144)<br/>_144 = _121<br/>_115 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _144)<br/>StorageDead(_144)<br/>StorageDead(_121)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_116)<br/></td></tr><tr><td align="left">_114 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _115)</td></tr></table>>];
    bb49__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_115)<br/>_145 = discriminant(_114)<br/></td></tr><tr><td align="left">switchInt(move _145)</td></tr></table>>];
    bb50__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_149)<br/>_149 = ((_114 as Continue).0: ())<br/>_113 = _149<br/>StorageDead(_149)<br/>StorageDead(_114)<br/>StorageDead(_113)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>StorageLive(_153)<br/>_153 = &amp;(*_6)<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>_155 = &amp;_64<br/>_154 = &amp;(*_155)<br/></td></tr><tr><td align="left">_152 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _153, move _154)</td></tr></table>>];
    bb51__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageLive(_146)<br/>_146 = ((_114 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_148)<br/>_148 = _146<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _148)</td></tr></table>>];
    bb52__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/>StorageDead(_146)<br/>StorageDead(_114)<br/>StorageDead(_113)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_154)<br/>StorageDead(_153)<br/></td></tr><tr><td align="left">_151 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _152)</td></tr></table>>];
    bb54__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/>_156 = discriminant(_151)<br/></td></tr><tr><td align="left">switchInt(move _156)</td></tr></table>>];
    bb55__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_160)<br/>_160 = move ((_151 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1377 = const true<br/>_150 = move _160<br/>StorageDead(_160)<br/>_1389 = discriminant(_151)<br/>StorageDead(_155)<br/>StorageDead(_151)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>StorageLive(_166)<br/>_166 = &amp;mut (*_21)<br/></td></tr><tr><td align="left">_165 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _166)</td></tr></table>>];
    bb56__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageLive(_157)<br/>_157 = ((_151 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_159)<br/>_159 = _157<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _159)</td></tr></table>>];
    bb57__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>StorageDead(_157)<br/>_1387 = discriminant(_151)<br/>StorageDead(_155)<br/>StorageDead(_151)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">_164 = &amp;mut (*_165)<br/>StorageDead(_166)<br/>StorageLive(_167)<br/>StorageLive(_168)<br/>_168 = &amp;_19<br/>_167 = &amp;(*_168)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>_172 = &amp;mut _150<br/>_171 = &amp;mut (*_172)<br/></td></tr><tr><td align="left">_170 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _171)</td></tr></table>>];
    bb59__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">_169 = &amp;mut (*_170)<br/>StorageDead(_171)<br/>StorageLive(_173)<br/>_173 = _15<br/></td></tr><tr><td align="left">_163 = controller::funding::settle_funding_payment(move _164, move _167, move _169, move _173)</td></tr></table>>];
    bb60__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_173)<br/>StorageDead(_169)<br/>StorageDead(_167)<br/>StorageDead(_164)<br/></td></tr><tr><td align="left">_162 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _163)</td></tr></table>>];
    bb61__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_163)<br/>_174 = discriminant(_162)<br/></td></tr><tr><td align="left">switchInt(move _174)</td></tr></table>>];
    bb62__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageLive(_178)<br/>_178 = ((_162 as Continue).0: ())<br/>_161 = _178<br/>StorageDead(_178)<br/>StorageDead(_172)<br/>StorageDead(_170)<br/>StorageDead(_168)<br/>StorageDead(_165)<br/>StorageDead(_162)<br/>StorageDead(_161)<br/>StorageLive(_179)<br/>StorageLive(_180)<br/>StorageLive(_181)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>StorageLive(_184)<br/>_184 = &amp;_150<br/></td></tr><tr><td align="left">_183 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _184)</td></tr></table>>];
    bb63__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_175)<br/>_175 = ((_162 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_177)<br/>_177 = _175<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _177)</td></tr></table>>];
    bb64__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_177)<br/>StorageDead(_175)<br/>StorageDead(_172)<br/>StorageDead(_170)<br/>StorageDead(_168)<br/>StorageDead(_165)<br/>StorageDead(_162)<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_184)<br/>_185 = discriminant(((*_183).22: state::perp_market::MarketStatus))<br/></td></tr><tr><td align="left">switchInt(move _185)</td></tr></table>>];
    bb66__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">_182 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">_182 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb68__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left">switchInt(move _182)</td></tr></table>>];
    bb69__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_183)<br/>StorageLive(_186)<br/>_186 = ()<br/>_181 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _186)<br/>StorageDead(_186)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_183)<br/>StorageLive(_187)<br/>_187 = error::ErrorCode::MarketFillOrderPaused<br/>StorageLive(_188)<br/>StorageLive(_189)<br/>StorageLive(_190)<br/>StorageLive(_191)<br/>StorageLive(_192)<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>StorageLive(_195)<br/>StorageLive(_196)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>_1370 = const _<br/>_198 = &amp;(*_1370)<br/>_197 = &amp;(*_198)<br/>_196 = move _197 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_197)<br/>StorageLive(_200)<br/>StorageLive(_201)<br/>StorageLive(_202)<br/>StorageLive(_203)<br/>StorageLive(_204)<br/>StorageLive(_205)<br/>StorageLive(_206)<br/>_206 = &amp;_187<br/>_205 = &amp;(*_206)<br/></td></tr><tr><td align="left">_204 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _205)</td></tr></table>>];
    bb71__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_205)<br/>_203 = [move _204]<br/>StorageDead(_204)<br/>_202 = &amp;_203<br/>_201 = &amp;(*_202)<br/>_200 = move _201 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_201)<br/></td></tr><tr><td align="left">_195 = Arguments::&lt;'_&gt;::new_v1(move _196, move _200)</td></tr></table>>];
    bb72__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_200)<br/>StorageDead(_196)<br/></td></tr><tr><td align="left">_194 = format(move _195)</td></tr></table>>];
    bb73__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_195)<br/>StorageDead(_206)<br/>StorageDead(_203)<br/>StorageDead(_202)<br/>StorageDead(_198)<br/>_193 = move _194<br/>StorageDead(_194)<br/>_192 = &amp;_193<br/>_191 = &amp;(*_192)<br/></td></tr><tr><td align="left">_190 = &lt;String as Deref&gt;::deref(move _191)</td></tr></table>>];
    bb74__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">_189 = &amp;(*_190)<br/>StorageDead(_191)<br/></td></tr><tr><td align="left">_188 = solana_program::log::sol_log(move _189)</td></tr></table>>];
    bb75__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_189)<br/></td></tr><tr><td align="left">drop(_193)</td></tr></table>>];
    bb76__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_193)<br/>StorageDead(_192)<br/>StorageDead(_190)<br/>StorageDead(_188)<br/>StorageLive(_207)<br/>StorageLive(_208)<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>StorageLive(_213)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>StorageLive(_216)<br/>StorageLive(_217)<br/>_1369 = const _<br/>_217 = &amp;(*_1369)<br/>_216 = &amp;(*_217)<br/>_215 = move _216 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_216)<br/></td></tr><tr><td align="left">_214 = Arguments::&lt;'_&gt;::new_const(move _215)</td></tr></table>>];
    bb77__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_215)<br/></td></tr><tr><td align="left">_213 = format(move _214)</td></tr></table>>];
    bb78__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_214)<br/>StorageDead(_217)<br/>_212 = move _213<br/>StorageDead(_213)<br/>_211 = &amp;_212<br/>_210 = &amp;(*_211)<br/></td></tr><tr><td align="left">_209 = &lt;String as Deref&gt;::deref(move _210)</td></tr></table>>];
    bb79__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">_208 = &amp;(*_209)<br/>StorageDead(_210)<br/></td></tr><tr><td align="left">_207 = solana_program::log::sol_log(move _208)</td></tr></table>>];
    bb80__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_208)<br/></td></tr><tr><td align="left">drop(_212)</td></tr></table>>];
    bb81__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_212)<br/>StorageDead(_211)<br/>StorageDead(_209)<br/>StorageDead(_207)<br/>StorageLive(_219)<br/>_219 = _187<br/>_181 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _219)<br/>StorageDead(_219)<br/>StorageDead(_187)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb82__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_182)<br/></td></tr><tr><td align="left">_180 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _181)</td></tr></table>>];
    bb83__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_181)<br/>_220 = discriminant(_180)<br/></td></tr><tr><td align="left">switchInt(move _220)</td></tr></table>>];
    bb84__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageLive(_224)<br/>_224 = ((_180 as Continue).0: ())<br/>_179 = _224<br/>StorageDead(_224)<br/>StorageDead(_180)<br/>StorageDead(_179)<br/>StorageLive(_225)<br/>StorageLive(_226)<br/>StorageLive(_227)<br/>StorageLive(_228)<br/>StorageLive(_229)<br/>StorageLive(_230)<br/>StorageLive(_231)<br/>_231 = &amp;_150<br/></td></tr><tr><td align="left">_230 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _231)</td></tr></table>>];
    bb85__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageLive(_221)<br/>_221 = ((_180 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_223)<br/>_223 = _221<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _223)</td></tr></table>>];
    bb86__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_223)<br/>StorageDead(_221)<br/>StorageDead(_180)<br/>StorageDead(_179)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb87__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">_229 = &amp;(*_230)<br/>StorageDead(_231)<br/>StorageLive(_232)<br/>_232 = PerpOperation::Fill<br/></td></tr><tr><td align="left">_228 = PerpMarket::is_operation_paused(move _229, move _232)</td></tr></table>>];
    bb88__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left">switchInt(move _228)</td></tr></table>>];
    bb89__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_232)<br/>StorageDead(_229)<br/>StorageDead(_230)<br/>StorageLive(_234)<br/>_234 = error::ErrorCode::MarketFillOrderPaused<br/>StorageLive(_235)<br/>StorageLive(_236)<br/>StorageLive(_237)<br/>StorageLive(_238)<br/>StorageLive(_239)<br/>StorageLive(_240)<br/>StorageLive(_241)<br/>StorageLive(_242)<br/>StorageLive(_243)<br/>StorageLive(_244)<br/>StorageLive(_245)<br/>_1368 = const _<br/>_245 = &amp;(*_1368)<br/>_244 = &amp;(*_245)<br/>_243 = move _244 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_244)<br/>StorageLive(_247)<br/>StorageLive(_248)<br/>StorageLive(_249)<br/>StorageLive(_250)<br/>StorageLive(_251)<br/>StorageLive(_252)<br/>StorageLive(_253)<br/>_253 = &amp;_234<br/>_252 = &amp;(*_253)<br/></td></tr><tr><td align="left">_251 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _252)</td></tr></table>>];
    bb90__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_232)<br/>StorageDead(_229)<br/>StorageDead(_230)<br/>StorageLive(_233)<br/>_233 = ()<br/>_227 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _233)<br/>StorageDead(_233)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb91__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_252)<br/>_250 = [move _251]<br/>StorageDead(_251)<br/>_249 = &amp;_250<br/>_248 = &amp;(*_249)<br/>_247 = move _248 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_248)<br/></td></tr><tr><td align="left">_242 = Arguments::&lt;'_&gt;::new_v1(move _243, move _247)</td></tr></table>>];
    bb92__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_247)<br/>StorageDead(_243)<br/></td></tr><tr><td align="left">_241 = format(move _242)</td></tr></table>>];
    bb93__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_242)<br/>StorageDead(_253)<br/>StorageDead(_250)<br/>StorageDead(_249)<br/>StorageDead(_245)<br/>_240 = move _241<br/>StorageDead(_241)<br/>_239 = &amp;_240<br/>_238 = &amp;(*_239)<br/></td></tr><tr><td align="left">_237 = &lt;String as Deref&gt;::deref(move _238)</td></tr></table>>];
    bb94__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">_236 = &amp;(*_237)<br/>StorageDead(_238)<br/></td></tr><tr><td align="left">_235 = solana_program::log::sol_log(move _236)</td></tr></table>>];
    bb95__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_236)<br/></td></tr><tr><td align="left">drop(_240)</td></tr></table>>];
    bb96__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_240)<br/>StorageDead(_239)<br/>StorageDead(_237)<br/>StorageDead(_235)<br/>StorageLive(_254)<br/>StorageLive(_255)<br/>StorageLive(_256)<br/>StorageLive(_257)<br/>StorageLive(_258)<br/>StorageLive(_259)<br/>StorageLive(_260)<br/>StorageLive(_261)<br/>StorageLive(_262)<br/>StorageLive(_263)<br/>StorageLive(_264)<br/>_1367 = const _<br/>_264 = &amp;(*_1367)<br/>_263 = &amp;(*_264)<br/>_262 = move _263 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_263)<br/></td></tr><tr><td align="left">_261 = Arguments::&lt;'_&gt;::new_const(move _262)</td></tr></table>>];
    bb97__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_262)<br/></td></tr><tr><td align="left">_260 = format(move _261)</td></tr></table>>];
    bb98__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_261)<br/>StorageDead(_264)<br/>_259 = move _260<br/>StorageDead(_260)<br/>_258 = &amp;_259<br/>_257 = &amp;(*_258)<br/></td></tr><tr><td align="left">_256 = &lt;String as Deref&gt;::deref(move _257)</td></tr></table>>];
    bb99__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">_255 = &amp;(*_256)<br/>StorageDead(_257)<br/></td></tr><tr><td align="left">_254 = solana_program::log::sol_log(move _255)</td></tr></table>>];
    bb100__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_255)<br/></td></tr><tr><td align="left">drop(_259)</td></tr></table>>];
    bb101__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_259)<br/>StorageDead(_258)<br/>StorageDead(_256)<br/>StorageDead(_254)<br/>StorageLive(_266)<br/>_266 = _234<br/>_227 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _266)<br/>StorageDead(_266)<br/>StorageDead(_234)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb102__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_228)<br/></td></tr><tr><td align="left">_226 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _227)</td></tr></table>>];
    bb103__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_227)<br/>_267 = discriminant(_226)<br/></td></tr><tr><td align="left">switchInt(move _267)</td></tr></table>>];
    bb104__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageLive(_271)<br/>_271 = ((_226 as Continue).0: ())<br/>_225 = _271<br/>StorageDead(_271)<br/>StorageDead(_226)<br/>StorageDead(_225)<br/>StorageLive(_272)<br/>StorageLive(_273)<br/>_1377 = const false<br/>_273 = move _150<br/></td></tr><tr><td align="left">_272 = std::mem::drop::&lt;RefMut&lt;'_, PerpMarket&gt;&gt;(move _273)</td></tr></table>>];
    bb105__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageLive(_268)<br/>_268 = ((_226 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_270)<br/>_270 = _268<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _270)</td></tr></table>>];
    bb106__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_270)<br/>StorageDead(_268)<br/>StorageDead(_226)<br/>StorageDead(_225)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb107__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_273)<br/>StorageDead(_272)<br/>StorageLive(_274)<br/>StorageLive(_275)<br/>StorageLive(_276)<br/>StorageLive(_277)<br/>StorageLive(_278)<br/>_278 = &amp;_63<br/>StorageLive(_279)<br/>_1366 = const _<br/>_279 = &amp;(*_1366)<br/></td></tr><tr><td align="left">_277 = &lt;OrderStatus as PartialEq&gt;::eq(move _278, move _279)</td></tr></table>>];
    bb108__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left">switchInt(move _277)</td></tr></table>>];
    bb109__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_279)<br/>StorageDead(_278)<br/>StorageLive(_281)<br/>_281 = ()<br/>_276 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _281)<br/>StorageDead(_281)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb110__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_279)<br/>StorageDead(_278)<br/>StorageLive(_282)<br/>_282 = error::ErrorCode::OrderNotOpen<br/>StorageLive(_283)<br/>StorageLive(_284)<br/>StorageLive(_285)<br/>StorageLive(_286)<br/>StorageLive(_287)<br/>StorageLive(_288)<br/>StorageLive(_289)<br/>StorageLive(_290)<br/>StorageLive(_291)<br/>StorageLive(_292)<br/>StorageLive(_293)<br/>_1365 = const _<br/>_293 = &amp;(*_1365)<br/>_292 = &amp;(*_293)<br/>_291 = move _292 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_292)<br/>StorageLive(_295)<br/>StorageLive(_296)<br/>StorageLive(_297)<br/>StorageLive(_298)<br/>StorageLive(_299)<br/>StorageLive(_300)<br/>StorageLive(_301)<br/>_301 = &amp;_282<br/>_300 = &amp;(*_301)<br/></td></tr><tr><td align="left">_299 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _300)</td></tr></table>>];
    bb111__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_300)<br/>_298 = [move _299]<br/>StorageDead(_299)<br/>_297 = &amp;_298<br/>_296 = &amp;(*_297)<br/>_295 = move _296 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_296)<br/></td></tr><tr><td align="left">_290 = Arguments::&lt;'_&gt;::new_v1(move _291, move _295)</td></tr></table>>];
    bb112__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_295)<br/>StorageDead(_291)<br/></td></tr><tr><td align="left">_289 = format(move _290)</td></tr></table>>];
    bb113__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_290)<br/>StorageDead(_301)<br/>StorageDead(_298)<br/>StorageDead(_297)<br/>StorageDead(_293)<br/>_288 = move _289<br/>StorageDead(_289)<br/>_287 = &amp;_288<br/>_286 = &amp;(*_287)<br/></td></tr><tr><td align="left">_285 = &lt;String as Deref&gt;::deref(move _286)</td></tr></table>>];
    bb114__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">_284 = &amp;(*_285)<br/>StorageDead(_286)<br/></td></tr><tr><td align="left">_283 = solana_program::log::sol_log(move _284)</td></tr></table>>];
    bb115__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_284)<br/></td></tr><tr><td align="left">drop(_288)</td></tr></table>>];
    bb116__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_288)<br/>StorageDead(_287)<br/>StorageDead(_285)<br/>StorageDead(_283)<br/>StorageLive(_302)<br/>StorageLive(_303)<br/>StorageLive(_304)<br/>_304 = const &quot;Order not open&quot;<br/>_303 = &amp;(*_304)<br/></td></tr><tr><td align="left">_302 = solana_program::log::sol_log(move _303)</td></tr></table>>];
    bb117__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_303)<br/>StorageDead(_304)<br/>StorageDead(_302)<br/>StorageLive(_305)<br/>_305 = _282<br/>_276 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _305)<br/>StorageDead(_305)<br/>StorageDead(_282)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb118__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_277)<br/></td></tr><tr><td align="left">_275 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _276)</td></tr></table>>];
    bb119__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_276)<br/>_306 = discriminant(_275)<br/></td></tr><tr><td align="left">switchInt(move _306)</td></tr></table>>];
    bb120__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageLive(_310)<br/>_310 = ((_275 as Continue).0: ())<br/>_274 = _310<br/>StorageDead(_310)<br/>StorageDead(_275)<br/>StorageDead(_274)<br/>StorageLive(_311)<br/>StorageLive(_312)<br/>StorageLive(_313)<br/>StorageLive(_314)<br/>StorageLive(_315)<br/>StorageLive(_316)<br/>StorageLive(_317)<br/>_317 = &amp;(*_21)<br/></td></tr><tr><td align="left">_316 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _317)</td></tr></table>>];
    bb121__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageLive(_307)<br/>_307 = ((_275 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_309)<br/>_309 = _307<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _309)</td></tr></table>>];
    bb122__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_309)<br/>StorageDead(_307)<br/>StorageDead(_275)<br/>StorageDead(_274)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb123__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_317)<br/>StorageLive(_318)<br/>_318 = _45<br/>_319 = Len(((*_316).5: [state::user::Order; 32]))<br/>_320 = Lt(_318, _319)<br/></td></tr><tr><td align="left">assert(move _320, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _319, _318)</td></tr></table>>];
    bb124__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">_315 = &amp;((*_316).5: [state::user::Order; 32])[_318]<br/></td></tr><tr><td align="left">_314 = Order::must_be_triggered(move _315)</td></tr></table>>];
    bb125__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left">switchInt(move _314)</td></tr></table>>];
    bb126__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_315)<br/>StorageDead(_318)<br/>StorageDead(_316)<br/>StorageLive(_321)<br/>StorageLive(_322)<br/>StorageLive(_323)<br/>StorageLive(_324)<br/>_324 = &amp;(*_21)<br/></td></tr><tr><td align="left">_323 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _324)</td></tr></table>>];
    bb127__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_315)<br/>StorageDead(_318)<br/>StorageDead(_316)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb128__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_324)<br/>StorageLive(_325)<br/>_325 = _45<br/>_326 = Len(((*_323).5: [state::user::Order; 32]))<br/>_327 = Lt(_325, _326)<br/></td></tr><tr><td align="left">assert(move _327, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _326, _325)</td></tr></table>>];
    bb129__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">_322 = &amp;((*_323).5: [state::user::Order; 32])[_325]<br/></td></tr><tr><td align="left">_321 = Order::triggered(move _322)</td></tr></table>>];
    bb130__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left">switchInt(move _321)</td></tr></table>>];
    bb131__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_325)<br/>StorageDead(_323)<br/>StorageDead(_322)<br/>StorageLive(_328)<br/>_328 = ()<br/>_313 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _328)<br/>StorageDead(_328)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb132__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_325)<br/>StorageDead(_323)<br/>StorageDead(_322)<br/>StorageLive(_329)<br/>_329 = error::ErrorCode::OrderMustBeTriggeredFirst<br/>StorageLive(_330)<br/>StorageLive(_331)<br/>StorageLive(_332)<br/>StorageLive(_333)<br/>StorageLive(_334)<br/>StorageLive(_335)<br/>StorageLive(_336)<br/>StorageLive(_337)<br/>StorageLive(_338)<br/>StorageLive(_339)<br/>StorageLive(_340)<br/>_1364 = const _<br/>_340 = &amp;(*_1364)<br/>_339 = &amp;(*_340)<br/>_338 = move _339 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_339)<br/>StorageLive(_342)<br/>StorageLive(_343)<br/>StorageLive(_344)<br/>StorageLive(_345)<br/>StorageLive(_346)<br/>StorageLive(_347)<br/>StorageLive(_348)<br/>_348 = &amp;_329<br/>_347 = &amp;(*_348)<br/></td></tr><tr><td align="left">_346 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _347)</td></tr></table>>];
    bb133__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageDead(_347)<br/>_345 = [move _346]<br/>StorageDead(_346)<br/>_344 = &amp;_345<br/>_343 = &amp;(*_344)<br/>_342 = move _343 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_343)<br/></td></tr><tr><td align="left">_337 = Arguments::&lt;'_&gt;::new_v1(move _338, move _342)</td></tr></table>>];
    bb134__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageDead(_342)<br/>StorageDead(_338)<br/></td></tr><tr><td align="left">_336 = format(move _337)</td></tr></table>>];
    bb135__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageDead(_337)<br/>StorageDead(_348)<br/>StorageDead(_345)<br/>StorageDead(_344)<br/>StorageDead(_340)<br/>_335 = move _336<br/>StorageDead(_336)<br/>_334 = &amp;_335<br/>_333 = &amp;(*_334)<br/></td></tr><tr><td align="left">_332 = &lt;String as Deref&gt;::deref(move _333)</td></tr></table>>];
    bb136__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">_331 = &amp;(*_332)<br/>StorageDead(_333)<br/></td></tr><tr><td align="left">_330 = solana_program::log::sol_log(move _331)</td></tr></table>>];
    bb137__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_331)<br/></td></tr><tr><td align="left">drop(_335)</td></tr></table>>];
    bb138__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_335)<br/>StorageDead(_334)<br/>StorageDead(_332)<br/>StorageDead(_330)<br/>StorageLive(_349)<br/>StorageLive(_350)<br/>StorageLive(_351)<br/>_351 = const &quot;Order must be triggered first&quot;<br/>_350 = &amp;(*_351)<br/></td></tr><tr><td align="left">_349 = solana_program::log::sol_log(move _350)</td></tr></table>>];
    bb139__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageDead(_350)<br/>StorageDead(_351)<br/>StorageDead(_349)<br/>StorageLive(_352)<br/>_352 = _329<br/>_313 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _352)<br/>StorageDead(_352)<br/>StorageDead(_329)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb140__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageDead(_321)<br/>StorageDead(_314)<br/></td></tr><tr><td align="left">_312 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _313)</td></tr></table>>];
    bb141__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_313)<br/>_353 = discriminant(_312)<br/></td></tr><tr><td align="left">switchInt(move _353)</td></tr></table>>];
    bb142__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageLive(_357)<br/>_357 = ((_312 as Continue).0: ())<br/>_311 = _357<br/>StorageDead(_357)<br/>StorageDead(_312)<br/>StorageDead(_311)<br/>StorageLive(_358)<br/>StorageLive(_359)<br/>StorageLive(_360)<br/>StorageLive(_361)<br/>StorageLive(_362)<br/>_362 = &amp;(*_21)<br/></td></tr><tr><td align="left">_361 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _362)</td></tr></table>>];
    bb143__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageLive(_354)<br/>_354 = ((_312 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_356)<br/>_356 = _354<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _356)</td></tr></table>>];
    bb144__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_356)<br/>StorageDead(_354)<br/>StorageDead(_312)<br/>StorageDead(_311)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb145__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">_360 = &amp;(*_361)<br/>StorageDead(_362)<br/></td></tr><tr><td align="left">_359 = User::is_bankrupt(move _360)</td></tr></table>>];
    bb146__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left">switchInt(move _359)</td></tr></table>>];
    bb147__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageDead(_361)<br/>StorageDead(_360)<br/>StorageLive(_364)<br/>StorageLive(_365)<br/>StorageLive(_366)<br/>_366 = const &quot;user is bankrupt&quot;<br/>_365 = &amp;(*_366)<br/></td></tr><tr><td align="left">_364 = solana_program::log::sol_log(move _365)</td></tr></table>>];
    bb148__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageDead(_365)<br/>StorageDead(_366)<br/>StorageDead(_364)<br/>StorageLive(_367)<br/>_367 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _367)<br/>StorageDead(_367)<br/>StorageDead(_359)<br/>StorageDead(_358)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb149__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageDead(_361)<br/>StorageDead(_360)<br/>_358 = const ()<br/>StorageDead(_359)<br/>StorageDead(_358)<br/>StorageLive(_368)<br/>StorageLive(_369)<br/>StorageLive(_370)<br/>_370 = &amp;_14<br/></td></tr><tr><td align="left">_369 = FillMode::is_liquidation(move _370)</td></tr></table>>];
    bb150__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left">switchInt(move _369)</td></tr></table>>];
    bb151__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_370)<br/>_368 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb152__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageDead(_370)<br/>StorageLive(_371)<br/>StorageLive(_372)<br/>StorageLive(_373)<br/>StorageLive(_374)<br/>_374 = &amp;mut (*_21)<br/></td></tr><tr><td align="left">_373 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _374)</td></tr></table>>];
    bb153__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">_372 = &amp;mut (*_373)<br/>StorageDead(_374)<br/>StorageLive(_375)<br/>_375 = &amp;(*_6)<br/>StorageLive(_376)<br/>_376 = &amp;(*_5)<br/>StorageLive(_377)<br/>_377 = &amp;mut (*_7)<br/>StorageLive(_378)<br/>_378 = ((*_2).11: u32)<br/></td></tr><tr><td align="left">_371 = validate_user_not_being_liquidated(move _372, move _375, move _376, move _377, move _378)</td></tr></table>>];
    bb154__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageDead(_378)<br/>StorageDead(_377)<br/>StorageDead(_376)<br/>StorageDead(_375)<br/>StorageDead(_372)<br/>_379 = discriminant(_371)<br/></td></tr><tr><td align="left">switchInt(move _379)</td></tr></table>>];
    bb155__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageLive(_381)<br/>StorageLive(_382)<br/>StorageLive(_383)<br/>_383 = const &quot;user is being liquidated&quot;<br/>_382 = &amp;(*_383)<br/></td></tr><tr><td align="left">_381 = solana_program::log::sol_log(move _382)</td></tr></table>>];
    bb156__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">_368 = const ()<br/>StorageDead(_373)<br/>StorageDead(_371)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb157__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_382)<br/>StorageDead(_383)<br/>StorageDead(_381)<br/>StorageLive(_384)<br/>_384 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _384)<br/>StorageDead(_384)<br/>StorageDead(_373)<br/>StorageDead(_371)<br/>StorageDead(_369)<br/>StorageDead(_368)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb158__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageDead(_369)<br/>StorageDead(_368)<br/>StorageLive(_385)<br/>StorageLive(_386)<br/>StorageLive(_387)<br/>StorageLive(_388)<br/>StorageLive(_389)<br/>StorageLive(_390)<br/>StorageLive(_391)<br/>StorageLive(_392)<br/>StorageLive(_393)<br/>StorageLive(_394)<br/>StorageLive(_395)<br/>StorageLive(_396)<br/>StorageLive(_397)<br/>StorageLive(_398)<br/>StorageLive(_399)<br/>StorageLive(_400)<br/>_400 = &amp;(*_2)<br/></td></tr><tr><td align="left">_399 = state::state::State::amm_paused(move _400)</td></tr></table>>];
    bb159__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageDead(_400)<br/></td></tr><tr><td align="left">_398 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _399)</td></tr></table>>];
    bb160__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageDead(_399)<br/>_401 = discriminant(_398)<br/></td></tr><tr><td align="left">switchInt(move _401)</td></tr></table>>];
    bb161__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageLive(_405)<br/>_405 = ((_398 as Continue).0: bool)<br/>_397 = _405<br/>StorageDead(_405)<br/>_396 = Not(move _397)<br/>StorageDead(_397)<br/>StorageDead(_398)<br/>StorageLive(_406)<br/>StorageLive(_407)<br/>StorageLive(_408)<br/>StorageLive(_409)<br/>StorageLive(_410)<br/>StorageLive(_411)<br/>_411 = &amp;(*_6)<br/>StorageLive(_412)<br/>StorageLive(_413)<br/>_413 = &amp;_64<br/>_412 = &amp;(*_413)<br/></td></tr><tr><td align="left">_410 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _411, move _412)</td></tr></table>>];
    bb162__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">StorageLive(_402)<br/>_402 = ((_398 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_404)<br/>_404 = _402<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _404)</td></tr></table>>];
    bb163__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageDead(_404)<br/>StorageDead(_402)<br/>StorageDead(_397)<br/>StorageDead(_398)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb164__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageDead(_412)<br/>StorageDead(_411)<br/></td></tr><tr><td align="left">_409 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _410)</td></tr></table>>];
    bb165__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageDead(_410)<br/>_414 = discriminant(_409)<br/></td></tr><tr><td align="left">switchInt(move _414)</td></tr></table>>];
    bb166__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageLive(_418)<br/>_418 = move ((_409 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_408 = move _418<br/>StorageDead(_418)<br/>_407 = &amp;mut _408<br/>_1393 = discriminant(_409)<br/>StorageDead(_413)<br/>StorageDead(_409)<br/>StorageLive(_419)<br/>StorageLive(_420)<br/>StorageLive(_421)<br/>StorageLive(_422)<br/>StorageLive(_423)<br/>StorageLive(_424)<br/>_424 = &amp;(*_407)<br/></td></tr><tr><td align="left">_423 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _424)</td></tr></table>>];
    bb167__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageLive(_415)<br/>_415 = ((_409 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_417)<br/>_417 = _415<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _417)</td></tr></table>>];
    bb168__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageDead(_417)<br/>StorageDead(_415)<br/>_1391 = discriminant(_409)<br/>StorageDead(_413)<br/>StorageDead(_409)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb169__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">_422 = &amp;(*_423)<br/>StorageDead(_424)<br/></td></tr><tr><td align="left">_421 = validate_perp_market(move _422)</td></tr></table>>];
    bb170__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageDead(_422)<br/></td></tr><tr><td align="left">_420 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _421)</td></tr></table>>];
    bb171__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageDead(_421)<br/>_425 = discriminant(_420)<br/></td></tr><tr><td align="left">switchInt(move _425)</td></tr></table>>];
    bb172__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageLive(_429)<br/>_429 = ((_420 as Continue).0: ())<br/>_419 = _429<br/>StorageDead(_429)<br/>StorageDead(_423)<br/>StorageDead(_420)<br/>StorageDead(_419)<br/>StorageLive(_430)<br/>StorageLive(_431)<br/>StorageLive(_432)<br/>StorageLive(_433)<br/>StorageLive(_434)<br/>StorageLive(_435)<br/>StorageLive(_436)<br/>_436 = &amp;(*_407)<br/></td></tr><tr><td align="left">_435 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _436)</td></tr></table>>];
    bb173__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageLive(_426)<br/>_426 = ((_420 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_428)<br/>_428 = _426<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _428)</td></tr></table>>];
    bb174__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">StorageDead(_428)<br/>StorageDead(_426)<br/>StorageDead(_423)<br/>StorageDead(_420)<br/>StorageDead(_419)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb175__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">_434 = &amp;(*_435)<br/>StorageDead(_436)<br/>StorageLive(_437)<br/>_437 = _15<br/></td></tr><tr><td align="left">_433 = PerpMarket::is_in_settlement(move _434, move _437)</td></tr></table>>];
    bb176__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left">switchInt(move _433)</td></tr></table>>];
    bb177__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">StorageDead(_437)<br/>StorageDead(_434)<br/>StorageDead(_435)<br/>StorageLive(_439)<br/>_439 = error::ErrorCode::MarketFillOrderPaused<br/>StorageLive(_440)<br/>StorageLive(_441)<br/>StorageLive(_442)<br/>StorageLive(_443)<br/>StorageLive(_444)<br/>StorageLive(_445)<br/>StorageLive(_446)<br/>StorageLive(_447)<br/>StorageLive(_448)<br/>StorageLive(_449)<br/>StorageLive(_450)<br/>_1363 = const _<br/>_450 = &amp;(*_1363)<br/>_449 = &amp;(*_450)<br/>_448 = move _449 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_449)<br/>StorageLive(_452)<br/>StorageLive(_453)<br/>StorageLive(_454)<br/>StorageLive(_455)<br/>StorageLive(_456)<br/>StorageLive(_457)<br/>StorageLive(_458)<br/>_458 = &amp;_439<br/>_457 = &amp;(*_458)<br/></td></tr><tr><td align="left">_456 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _457)</td></tr></table>>];
    bb178__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageDead(_437)<br/>StorageDead(_434)<br/>StorageDead(_435)<br/>StorageLive(_438)<br/>_438 = ()<br/>_432 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _438)<br/>StorageDead(_438)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb179__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">StorageDead(_457)<br/>_455 = [move _456]<br/>StorageDead(_456)<br/>_454 = &amp;_455<br/>_453 = &amp;(*_454)<br/>_452 = move _453 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_453)<br/></td></tr><tr><td align="left">_447 = Arguments::&lt;'_&gt;::new_v1(move _448, move _452)</td></tr></table>>];
    bb180__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_452)<br/>StorageDead(_448)<br/></td></tr><tr><td align="left">_446 = format(move _447)</td></tr></table>>];
    bb181__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageDead(_447)<br/>StorageDead(_458)<br/>StorageDead(_455)<br/>StorageDead(_454)<br/>StorageDead(_450)<br/>_445 = move _446<br/>StorageDead(_446)<br/>_444 = &amp;_445<br/>_443 = &amp;(*_444)<br/></td></tr><tr><td align="left">_442 = &lt;String as Deref&gt;::deref(move _443)</td></tr></table>>];
    bb182__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">_441 = &amp;(*_442)<br/>StorageDead(_443)<br/></td></tr><tr><td align="left">_440 = solana_program::log::sol_log(move _441)</td></tr></table>>];
    bb183__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageDead(_441)<br/></td></tr><tr><td align="left">drop(_445)</td></tr></table>>];
    bb184__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageDead(_445)<br/>StorageDead(_444)<br/>StorageDead(_442)<br/>StorageDead(_440)<br/>StorageLive(_459)<br/>StorageLive(_460)<br/>StorageLive(_461)<br/>StorageLive(_462)<br/>StorageLive(_463)<br/>StorageLive(_464)<br/>StorageLive(_465)<br/>StorageLive(_466)<br/>StorageLive(_467)<br/>StorageLive(_468)<br/>StorageLive(_469)<br/>_1362 = const _<br/>_469 = &amp;(*_1362)<br/>_468 = &amp;(*_469)<br/>_467 = move _468 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_468)<br/></td></tr><tr><td align="left">_466 = Arguments::&lt;'_&gt;::new_const(move _467)</td></tr></table>>];
    bb185__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_467)<br/></td></tr><tr><td align="left">_465 = format(move _466)</td></tr></table>>];
    bb186__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageDead(_466)<br/>StorageDead(_469)<br/>_464 = move _465<br/>StorageDead(_465)<br/>_463 = &amp;_464<br/>_462 = &amp;(*_463)<br/></td></tr><tr><td align="left">_461 = &lt;String as Deref&gt;::deref(move _462)</td></tr></table>>];
    bb187__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">_460 = &amp;(*_461)<br/>StorageDead(_462)<br/></td></tr><tr><td align="left">_459 = solana_program::log::sol_log(move _460)</td></tr></table>>];
    bb188__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageDead(_460)<br/></td></tr><tr><td align="left">drop(_464)</td></tr></table>>];
    bb189__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageDead(_464)<br/>StorageDead(_463)<br/>StorageDead(_461)<br/>StorageDead(_459)<br/>StorageLive(_471)<br/>_471 = _439<br/>_432 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _471)<br/>StorageDead(_471)<br/>StorageDead(_439)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb190__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageDead(_433)<br/></td></tr><tr><td align="left">_431 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _432)</td></tr></table>>];
    bb191__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageDead(_432)<br/>_472 = discriminant(_431)<br/></td></tr><tr><td align="left">switchInt(move _472)</td></tr></table>>];
    bb192__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageLive(_476)<br/>_476 = ((_431 as Continue).0: ())<br/>_430 = _476<br/>StorageDead(_476)<br/>StorageDead(_431)<br/>StorageDead(_430)<br/>StorageLive(_477)<br/>StorageLive(_478)<br/>StorageLive(_479)<br/>StorageLive(_480)<br/>_480 = &amp;mut (*_7)<br/>StorageLive(_481)<br/>StorageLive(_482)<br/>StorageLive(_483)<br/>StorageLive(_484)<br/>StorageLive(_485)<br/>StorageLive(_486)<br/>_486 = &amp;(*_407)<br/></td></tr><tr><td align="left">_485 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _486)</td></tr></table>>];
    bb193__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">StorageLive(_473)<br/>_473 = ((_431 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_475)<br/>_475 = _473<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _475)</td></tr></table>>];
    bb194__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageDead(_475)<br/>StorageDead(_473)<br/>StorageDead(_431)<br/>StorageDead(_430)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb195__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">_484 = &amp;(*_485)<br/>StorageDead(_486)<br/></td></tr><tr><td align="left">_483 = PerpMarket::oracle_id(move _484)</td></tr></table>>];
    bb196__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageDead(_484)<br/>_482 = &amp;_483<br/>_481 = &amp;(*_482)<br/></td></tr><tr><td align="left">_479 = OracleMap::&lt;'_&gt;::get_price_data(move _480, move _481)</td></tr></table>>];
    bb197__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageDead(_481)<br/>StorageDead(_480)<br/></td></tr><tr><td align="left">_478 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _479)</td></tr></table>>];
    bb198__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">StorageDead(_479)<br/>_487 = discriminant(_478)<br/></td></tr><tr><td align="left">switchInt(move _487)</td></tr></table>>];
    bb199__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">StorageLive(_491)<br/>_491 = ((_478 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_477 = _491<br/>StorageDead(_491)<br/>StorageDead(_485)<br/>StorageDead(_483)<br/>StorageDead(_482)<br/>StorageDead(_478)<br/>StorageLive(_492)<br/>StorageLive(_493)<br/>StorageLive(_494)<br/>StorageLive(_495)<br/>StorageLive(_496)<br/>StorageLive(_497)<br/>_497 = &amp;(*_407)<br/></td></tr><tr><td align="left">_496 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _497)</td></tr></table>>];
    bb200__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageLive(_488)<br/>_488 = ((_478 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_490)<br/>_490 = _488<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _490)</td></tr></table>>];
    bb201__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">StorageDead(_490)<br/>StorageDead(_488)<br/>StorageDead(_485)<br/>StorageDead(_483)<br/>StorageDead(_482)<br/>StorageDead(_478)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb202__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">_495 = &amp;(*_496)<br/>StorageDead(_497)<br/>StorageLive(_498)<br/>_498 = (*_477)<br/>StorageLive(_499)<br/>_499 = _16<br/>StorageLive(_500)<br/>StorageLive(_501)<br/>_501 = &amp;(((*_2).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails)<br/>_500 = &amp;(*_501)<br/></td></tr><tr><td align="left">_494 = PerpMarket::get_mm_oracle_price_data(move _495, move _498, move _499, move _500)</td></tr></table>>];
    bb203__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageDead(_500)<br/>StorageDead(_499)<br/>StorageDead(_498)<br/>StorageDead(_495)<br/></td></tr><tr><td align="left">_493 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _494)</td></tr></table>>];
    bb204__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageDead(_494)<br/>_502 = discriminant(_493)<br/></td></tr><tr><td align="left">switchInt(move _502)</td></tr></table>>];
    bb205__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageLive(_506)<br/>_506 = ((_493 as Continue).0: state::oracle::MMOraclePriceData)<br/>_492 = _506<br/>StorageDead(_506)<br/>StorageDead(_501)<br/>StorageDead(_496)<br/>StorageDead(_493)<br/>StorageLive(_507)<br/>StorageLive(_508)<br/>_508 = &amp;_492<br/></td></tr><tr><td align="left">_507 = MMOraclePriceData::get_safe_oracle_price_data(move _508)</td></tr></table>>];
    bb206__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageLive(_503)<br/>_503 = ((_493 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_505)<br/>_505 = _503<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _505)</td></tr></table>>];
    bb207__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">StorageDead(_505)<br/>StorageDead(_503)<br/>StorageDead(_501)<br/>StorageDead(_496)<br/>StorageDead(_493)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb208__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageDead(_508)<br/>StorageLive(_509)<br/>StorageLive(_510)<br/>StorageLive(_511)<br/>StorageLive(_512)<br/>_512 = state::user::MarketType::Perp<br/>StorageLive(_513)<br/>StorageLive(_514)<br/>StorageLive(_515)<br/>_515 = &amp;(*_407)<br/></td></tr><tr><td align="left">_514 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _515)</td></tr></table>>];
    bb209__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageDead(_515)<br/>_513 = ((*_514).21: u16)<br/>StorageLive(_516)<br/>StorageLive(_517)<br/>StorageLive(_518)<br/>_518 = &amp;(*_407)<br/></td></tr><tr><td align="left">_517 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _518)</td></tr></table>>];
    bb210__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageDead(_518)<br/>_516 = ((((*_517).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64)<br/>StorageLive(_519)<br/>StorageLive(_520)<br/>_520 = &amp;_507<br/>_519 = &amp;(*_520)<br/>StorageLive(_521)<br/>StorageLive(_522)<br/>_522 = &amp;(((*_2).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails)<br/>_521 = &amp;(*_522)<br/>StorageLive(_523)<br/>StorageLive(_524)<br/>StorageLive(_525)<br/>StorageLive(_526)<br/>StorageLive(_527)<br/>StorageLive(_528)<br/>_528 = &amp;(*_407)<br/></td></tr><tr><td align="left">_527 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _528)</td></tr></table>>];
    bb211__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">_526 = (*_527)<br/>StorageDead(_528)<br/></td></tr><tr><td align="left">_525 = PerpMarket::get_max_confidence_interval_multiplier(move _526)</td></tr></table>>];
    bb212__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_526)<br/></td></tr><tr><td align="left">_524 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _525)</td></tr></table>>];
    bb213__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_525)<br/>_529 = discriminant(_524)<br/></td></tr><tr><td align="left">switchInt(move _529)</td></tr></table>>];
    bb214__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">StorageLive(_533)<br/>_533 = ((_524 as Continue).0: u64)<br/>_523 = _533<br/>StorageDead(_533)<br/>StorageLive(_534)<br/>StorageLive(_535)<br/>StorageLive(_536)<br/>StorageLive(_537)<br/>_537 = &amp;(*_407)<br/></td></tr><tr><td align="left">_536 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _537)</td></tr></table>>];
    bb215__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">StorageLive(_530)<br/>_530 = ((_524 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_532)<br/>_532 = _530<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _532)</td></tr></table>>];
    bb216__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageDead(_532)<br/>StorageDead(_530)<br/>StorageDead(_523)<br/>StorageDead(_521)<br/>StorageDead(_519)<br/>StorageDead(_516)<br/>StorageDead(_513)<br/>StorageDead(_512)<br/>StorageDead(_511)<br/>StorageDead(_509)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb217__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageDead(_537)<br/>_535 = &amp;(((*_536).1: state::perp_market::AMM).72: state::oracle::OracleSource)<br/>_534 = &amp;(*_535)<br/>StorageLive(_538)<br/>_538 = LogMode::SafeMMOracle<br/>StorageLive(_539)<br/>StorageLive(_540)<br/>StorageLive(_541)<br/>_541 = &amp;(*_407)<br/></td></tr><tr><td align="left">_540 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _541)</td></tr></table>>];
    bb218__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">StorageDead(_541)<br/>_539 = (((*_540).1: state::perp_market::AMM).78: i8)<br/></td></tr><tr><td align="left">_511 = oracle_validity(move _512, move _513, move _516, move _519, move _521, move _523, move _534, move _538, move _539)</td></tr></table>>];
    bb219__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageDead(_539)<br/>StorageDead(_538)<br/>StorageDead(_534)<br/>StorageDead(_523)<br/>StorageDead(_521)<br/>StorageDead(_519)<br/>StorageDead(_516)<br/>StorageDead(_513)<br/>StorageDead(_512)<br/></td></tr><tr><td align="left">_510 = &lt;std::result::Result&lt;OracleValidity, error::ErrorCode&gt; as Try&gt;::branch(move _511)</td></tr></table>>];
    bb220__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageDead(_511)<br/>_542 = discriminant(_510)<br/></td></tr><tr><td align="left">switchInt(move _542)</td></tr></table>>];
    bb221__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageLive(_546)<br/>_546 = ((_510 as Continue).0: math::oracle::OracleValidity)<br/>_509 = _546<br/>StorageDead(_546)<br/>_386 = move _509<br/>StorageDead(_509)<br/>StorageDead(_540)<br/>StorageDead(_536)<br/>StorageDead(_535)<br/>StorageDead(_527)<br/>StorageDead(_524)<br/>StorageDead(_522)<br/>StorageDead(_520)<br/>StorageDead(_517)<br/>StorageDead(_514)<br/>StorageDead(_510)<br/>StorageLive(_547)<br/>StorageLive(_548)<br/>StorageLive(_549)<br/>StorageLive(_550)<br/>_550 = _386<br/>StorageLive(_551)<br/>StorageLive(_552)<br/>_552 = DriftAction::FillOrderAmm<br/>_551 = Option::&lt;DriftAction&gt;::Some(move _552)<br/>StorageDead(_552)<br/></td></tr><tr><td align="left">_549 = is_oracle_valid_for_action(move _550, move _551)</td></tr></table>>];
    bb222__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">StorageLive(_543)<br/>_543 = ((_510 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_545)<br/>_545 = _543<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _545)</td></tr></table>>];
    bb223__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">StorageDead(_545)<br/>StorageDead(_543)<br/>StorageDead(_509)<br/>StorageDead(_540)<br/>StorageDead(_536)<br/>StorageDead(_535)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb224__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageDead(_551)<br/>StorageDead(_550)<br/></td></tr><tr><td align="left">_548 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _549)</td></tr></table>>];
    bb225__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">StorageDead(_549)<br/>_553 = discriminant(_548)<br/></td></tr><tr><td align="left">switchInt(move _553)</td></tr></table>>];
    bb226__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageLive(_557)<br/>_557 = ((_548 as Continue).0: bool)<br/>_547 = _557<br/>StorageDead(_557)<br/>_393 = move _547<br/>StorageDead(_547)<br/>StorageDead(_548)<br/>StorageLive(_558)<br/>StorageLive(_559)<br/>_559 = &amp;_492<br/></td></tr><tr><td align="left">_558 = MMOraclePriceData::get_delay(move _559)</td></tr></table>>];
    bb227__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageLive(_554)<br/>_554 = ((_548 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_556)<br/>_556 = _554<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _556)</td></tr></table>>];
    bb228__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageDead(_556)<br/>StorageDead(_554)<br/>StorageDead(_547)<br/>StorageDead(_548)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb229__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageDead(_559)<br/>StorageLive(_560)<br/>_560 = ((((*_2).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails).1: i64)<br/>_394 = Gt(move _558, move _560)<br/>StorageDead(_560)<br/>StorageDead(_558)<br/>StorageLive(_561)<br/>_561 = _393<br/>_396 = BitAnd(_396, move _561)<br/>StorageDead(_561)<br/>StorageLive(_562)<br/>StorageLive(_563)<br/>StorageLive(_564)<br/>StorageLive(_565)<br/>StorageLive(_566)<br/>_566 = &amp;(*_407)<br/></td></tr><tr><td align="left">_565 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _566)</td></tr></table>>];
    bb230__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">_564 = &amp;(*_565)<br/>StorageDead(_566)<br/>StorageLive(_567)<br/>_567 = PerpOperation::AmmFill<br/></td></tr><tr><td align="left">_563 = PerpMarket::is_operation_paused(move _564, move _567)</td></tr></table>>];
    bb231__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">StorageDead(_567)<br/>StorageDead(_564)<br/>_562 = Not(move _563)<br/>StorageDead(_563)<br/>_396 = BitAnd(_396, move _562)<br/>StorageDead(_562)<br/>StorageDead(_565)<br/>StorageLive(_568)<br/>StorageLive(_569)<br/>StorageLive(_570)<br/>StorageLive(_571)<br/>StorageLive(_572)<br/>StorageLive(_573)<br/>StorageLive(_574)<br/>_574 = &amp;(*_407)<br/></td></tr><tr><td align="left">_573 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _574)</td></tr></table>>];
    bb232__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">_572 = &amp;(*_573)<br/>StorageDead(_574)<br/></td></tr><tr><td align="left">_571 = PerpMarket::has_too_much_drawdown(move _572)</td></tr></table>>];
    bb233__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageDead(_572)<br/></td></tr><tr><td align="left">_570 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _571)</td></tr></table>>];
    bb234__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">StorageDead(_571)<br/>_575 = discriminant(_570)<br/></td></tr><tr><td align="left">switchInt(move _575)</td></tr></table>>];
    bb235__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageLive(_579)<br/>_579 = ((_570 as Continue).0: bool)<br/>_569 = _579<br/>StorageDead(_579)<br/>_568 = Not(move _569)<br/>StorageDead(_569)<br/>_396 = BitAnd(_396, move _568)<br/>StorageDead(_568)<br/>StorageDead(_573)<br/>StorageDead(_570)<br/>StorageLive(_580)<br/>StorageLive(_581)<br/>StorageLive(_582)<br/>_582 = &amp;_492<br/></td></tr><tr><td align="left">_581 = MMOraclePriceData::is_enabled(move _582)</td></tr></table>>];
    bb236__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageLive(_576)<br/>_576 = ((_570 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_578)<br/>_578 = _576<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _578)</td></tr></table>>];
    bb237__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">StorageDead(_578)<br/>StorageDead(_576)<br/>StorageDead(_569)<br/>StorageDead(_568)<br/>StorageDead(_573)<br/>StorageDead(_570)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb238__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left">switchInt(move _581)</td></tr></table>>];
    bb239__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageDead(_582)<br/>StorageLive(_583)<br/>StorageLive(_584)<br/>_584 = &amp;_492<br/></td></tr><tr><td align="left">_583 = MMOraclePriceData::is_mm_oracle_as_recent(move _584)</td></tr></table>>];
    bb240__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left">switchInt(move _583)</td></tr></table>>];
    bb241__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageDead(_584)<br/>StorageLive(_585)<br/>StorageLive(_586)<br/>StorageLive(_587)<br/>_587 = &amp;_492<br/></td></tr><tr><td align="left">_586 = MMOraclePriceData::is_mm_exchange_diff_bps_high(move _587)</td></tr></table>>];
    bb242__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">StorageDead(_587)<br/>_585 = Not(move _586)<br/>StorageDead(_586)<br/>_580 = _585<br/>StorageDead(_585)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb243__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageDead(_584)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb244__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left" balign="left">StorageDead(_582)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb245__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">_580 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb246__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">StorageDead(_583)<br/>StorageDead(_581)<br/>StorageLive(_588)<br/>_588 = _580<br/>_396 = BitAnd(_396, move _588)<br/>StorageDead(_588)<br/>StorageLive(_589)<br/>StorageLive(_590)<br/>StorageLive(_591)<br/>StorageLive(_592)<br/>StorageLive(_593)<br/>StorageLive(_594)<br/>_594 = &amp;(*_407)<br/></td></tr><tr><td align="left">_593 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _594)</td></tr></table>>];
    bb247__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">StorageDead(_594)<br/>_592 = &amp;((*_593).1: state::perp_market::AMM)<br/>StorageLive(_595)<br/>_595 = _68<br/></td></tr><tr><td align="left">_591 = AMM::amm_wants_to_jit_make(move _592, move _595)</td></tr></table>>];
    bb248__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">StorageDead(_595)<br/>StorageDead(_592)<br/></td></tr><tr><td align="left">_590 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _591)</td></tr></table>>];
    bb249__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">StorageDead(_591)<br/>_596 = discriminant(_590)<br/></td></tr><tr><td align="left">switchInt(move _596)</td></tr></table>>];
    bb250__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageLive(_600)<br/>_600 = ((_590 as Continue).0: bool)<br/>_589 = _600<br/>StorageDead(_600)<br/>StorageDead(_593)<br/>StorageDead(_590)<br/>StorageLive(_601)<br/>StorageLive(_602)<br/>StorageLive(_603)<br/>StorageLive(_604)<br/>StorageLive(_605)<br/>StorageLive(_606)<br/>_606 = &amp;(*_407)<br/></td></tr><tr><td align="left">_605 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _606)</td></tr></table>>];
    bb251__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">StorageLive(_597)<br/>_597 = ((_590 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_599)<br/>_599 = _597<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _599)</td></tr></table>>];
    bb252__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageDead(_599)<br/>StorageDead(_597)<br/>StorageDead(_593)<br/>StorageDead(_590)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb253__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageDead(_606)<br/>_604 = &amp;((*_605).1: state::perp_market::AMM)<br/>StorageLive(_607)<br/>_607 = _589<br/></td></tr><tr><td align="left">_603 = AMM::amm_has_low_enough_inventory(move _604, move _607)</td></tr></table>>];
    bb254__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageDead(_607)<br/>StorageDead(_604)<br/></td></tr><tr><td align="left">_602 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _603)</td></tr></table>>];
    bb255__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">StorageDead(_603)<br/>_608 = discriminant(_602)<br/></td></tr><tr><td align="left">switchInt(move _608)</td></tr></table>>];
    bb256__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageLive(_612)<br/>_612 = ((_602 as Continue).0: bool)<br/>_601 = _612<br/>StorageDead(_612)<br/>_392 = move _601<br/>StorageDead(_601)<br/>StorageDead(_605)<br/>StorageDead(_602)<br/>StorageLive(_613)<br/>StorageLive(_614)<br/>StorageLive(_615)<br/>StorageLive(_616)<br/>StorageLive(_617)<br/>StorageLive(_618)<br/>_618 = &amp;(*_407)<br/></td></tr><tr><td align="left">_617 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _618)</td></tr></table>>];
    bb257__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">StorageLive(_609)<br/>_609 = ((_602 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_611)<br/>_611 = _609<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _611)</td></tr></table>>];
    bb258__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageDead(_611)<br/>StorageDead(_609)<br/>StorageDead(_601)<br/>StorageDead(_605)<br/>StorageDead(_602)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb259__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">_616 = &amp;(*_617)<br/>StorageDead(_618)<br/>StorageLive(_619)<br/>StorageLive(_620)<br/>_620 = &amp;_2<br/>_1373 = deref_copy (*_620)<br/>_619 = &amp;(*_1373)<br/>StorageLive(_621)<br/>_621 = _392<br/></td></tr><tr><td align="left">_615 = PerpMarket::can_skip_auction_duration(move _616, move _619, move _621)</td></tr></table>>];
    bb260__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left" balign="left">StorageDead(_621)<br/>StorageDead(_619)<br/>StorageDead(_616)<br/></td></tr><tr><td align="left">_614 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _615)</td></tr></table>>];
    bb261__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageDead(_615)<br/>_622 = discriminant(_614)<br/></td></tr><tr><td align="left">switchInt(move _622)</td></tr></table>>];
    bb262__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">StorageLive(_626)<br/>_626 = ((_614 as Continue).0: bool)<br/>_613 = _626<br/>StorageDead(_626)<br/>_391 = move _613<br/>StorageDead(_613)<br/>StorageDead(_620)<br/>StorageDead(_617)<br/>StorageDead(_614)<br/>StorageLive(_627)<br/>StorageLive(_628)<br/>StorageLive(_629)<br/>StorageLive(_630)<br/>StorageLive(_631)<br/>StorageLive(_632)<br/>_632 = &amp;(*_21)<br/></td></tr><tr><td align="left">_631 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _632)</td></tr></table>>];
    bb263__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">StorageLive(_623)<br/>_623 = ((_614 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_625)<br/>_625 = _623<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _625)</td></tr></table>>];
    bb264__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">StorageDead(_625)<br/>StorageDead(_623)<br/>StorageDead(_613)<br/>StorageDead(_620)<br/>StorageDead(_617)<br/>StorageDead(_614)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb265__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">_630 = &amp;(*_631)<br/>StorageDead(_632)<br/>StorageLive(_633)<br/>StorageLive(_634)<br/>StorageLive(_635)<br/>_635 = &amp;(*_33)<br/></td></tr><tr><td align="left">_634 = &lt;RefMut&lt;'_, UserStats&gt; as Deref&gt;::deref(move _635)</td></tr></table>>];
    bb266__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">_633 = &amp;(*_634)<br/>StorageDead(_635)<br/></td></tr><tr><td align="left">_629 = User::can_skip_auction_duration(move _630, move _633)</td></tr></table>>];
    bb267__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left" balign="left">StorageDead(_633)<br/>StorageDead(_630)<br/></td></tr><tr><td align="left">_628 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _629)</td></tr></table>>];
    bb268__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">268</td></tr><tr><td align="left" balign="left">StorageDead(_629)<br/>_636 = discriminant(_628)<br/></td></tr><tr><td align="left">switchInt(move _636)</td></tr></table>>];
    bb269__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">269</td></tr><tr><td align="left" balign="left">StorageLive(_640)<br/>_640 = ((_628 as Continue).0: bool)<br/>_627 = _640<br/>StorageDead(_640)<br/>_390 = move _627<br/>StorageDead(_627)<br/>StorageDead(_634)<br/>StorageDead(_631)<br/>StorageDead(_628)<br/>StorageLive(_641)<br/>StorageLive(_642)<br/>StorageLive(_643)<br/>StorageLive(_644)<br/>StorageLive(_645)<br/>StorageLive(_646)<br/>_646 = &amp;(*_407)<br/></td></tr><tr><td align="left">_645 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _646)</td></tr></table>>];
    bb270__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">270</td></tr><tr><td align="left" balign="left">StorageLive(_637)<br/>_637 = ((_628 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_639)<br/>_639 = _637<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _639)</td></tr></table>>];
    bb271__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">271</td></tr><tr><td align="left" balign="left">StorageDead(_639)<br/>StorageDead(_637)<br/>StorageDead(_627)<br/>StorageDead(_634)<br/>StorageDead(_631)<br/>StorageDead(_628)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb272__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">272</td></tr><tr><td align="left" balign="left">StorageDead(_646)<br/>_644 = &amp;((*_645).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_643 = AMM::reserve_price(move _644)</td></tr></table>>];
    bb273__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">273</td></tr><tr><td align="left" balign="left">StorageDead(_644)<br/></td></tr><tr><td align="left">_642 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _643)</td></tr></table>>];
    bb274__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">274</td></tr><tr><td align="left" balign="left">StorageDead(_643)<br/>_647 = discriminant(_642)<br/></td></tr><tr><td align="left">switchInt(move _647)</td></tr></table>>];
    bb275__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">275</td></tr><tr><td align="left" balign="left">StorageLive(_651)<br/>_651 = ((_642 as Continue).0: u64)<br/>_641 = _651<br/>StorageDead(_651)<br/>_385 = move _641<br/>StorageDead(_641)<br/>StorageDead(_645)<br/>StorageDead(_642)<br/>StorageLive(_652)<br/>StorageLive(_653)<br/>_653 = &amp;_492<br/></td></tr><tr><td align="left">_652 = MMOraclePriceData::get_price(move _653)</td></tr></table>>];
    bb276__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">276</td></tr><tr><td align="left" balign="left">StorageLive(_648)<br/>_648 = ((_642 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_650)<br/>_650 = _648<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _650)</td></tr></table>>];
    bb277__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">277</td></tr><tr><td align="left" balign="left">StorageDead(_650)<br/>StorageDead(_648)<br/>StorageDead(_641)<br/>StorageDead(_645)<br/>StorageDead(_642)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb278__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">278</td></tr><tr><td align="left" balign="left">StorageDead(_653)<br/>_387 = move _652<br/>StorageDead(_652)<br/>StorageLive(_654)<br/>StorageLive(_655)<br/>StorageLive(_656)<br/>_656 = &amp;(*_407)<br/></td></tr><tr><td align="left">_655 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _656)</td></tr></table>>];
    bb279__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">279</td></tr><tr><td align="left" balign="left">StorageDead(_656)<br/>_654 = ((((*_655).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64)<br/>_388 = move _654<br/>StorageDead(_654)<br/>StorageDead(_655)<br/>StorageLive(_657)<br/>StorageLive(_658)<br/>StorageLive(_659)<br/>_659 = &amp;(*_407)<br/></td></tr><tr><td align="left">_658 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _659)</td></tr></table>>];
    bb280__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">280</td></tr><tr><td align="left" balign="left">StorageDead(_659)<br/>_657 = ((*_658).21: u16)<br/>_389 = move _657<br/>StorageDead(_657)<br/>StorageDead(_658)<br/>StorageLive(_660)<br/>StorageLive(_661)<br/>StorageLive(_662)<br/>StorageLive(_663)<br/>_663 = &amp;(*_407)<br/></td></tr><tr><td align="left">_662 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _663)</td></tr></table>>];
    bb281__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">281</td></tr><tr><td align="left" balign="left">_661 = &amp;(*_662)<br/>StorageDead(_663)<br/>StorageLive(_664)<br/>_664 = ((*_2).16: u8)<br/></td></tr><tr><td align="left">_660 = PerpMarket::get_min_perp_auction_duration(move _661, move _664)</td></tr></table>>];
    bb282__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">StorageDead(_664)<br/>StorageDead(_661)<br/>_395 = move _660<br/>StorageDead(_660)<br/>StorageDead(_662)<br/>_406 = const ()<br/>StorageDead(_589)<br/>StorageDead(_580)<br/>StorageDead(_507)<br/>StorageDead(_492)<br/>StorageDead(_477)<br/></td></tr><tr><td align="left">drop(_408)</td></tr></table>>];
    bb283__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">StorageDead(_408)<br/>StorageDead(_407)<br/>StorageDead(_406)<br/>StorageLive(_665)<br/>StorageLive(_666)<br/>StorageLive(_667)<br/>StorageLive(_668)<br/>StorageLive(_669)<br/>_669 = _386<br/>StorageLive(_670)<br/>StorageLive(_671)<br/>_671 = DriftAction::OracleOrderPrice<br/>_670 = Option::&lt;DriftAction&gt;::Some(move _671)<br/>StorageDead(_671)<br/></td></tr><tr><td align="left">_668 = is_oracle_valid_for_action(move _669, move _670)</td></tr></table>>];
    bb284__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">284</td></tr><tr><td align="left" balign="left">StorageDead(_670)<br/>StorageDead(_669)<br/></td></tr><tr><td align="left">_667 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _668)</td></tr></table>>];
    bb285__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">285</td></tr><tr><td align="left" balign="left">StorageDead(_668)<br/>_672 = discriminant(_667)<br/></td></tr><tr><td align="left">switchInt(move _672)</td></tr></table>>];
    bb286__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">286</td></tr><tr><td align="left" balign="left">StorageLive(_676)<br/>_676 = ((_667 as Continue).0: bool)<br/>_666 = _676<br/>StorageDead(_676)<br/></td></tr><tr><td align="left">switchInt(move _666)</td></tr></table>>];
    bb287__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">287</td></tr><tr><td align="left" balign="left">StorageLive(_673)<br/>_673 = ((_667 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_675)<br/>_675 = _673<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _675)</td></tr></table>>];
    bb288__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">288</td></tr><tr><td align="left" balign="left">StorageDead(_675)<br/>StorageDead(_673)<br/>StorageDead(_667)<br/>StorageDead(_666)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb289__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">289</td></tr><tr><td align="left" balign="left">StorageDead(_667)<br/>StorageLive(_677)<br/>_677 = _387<br/>_665 = Option::&lt;i64&gt;::Some(move _677)<br/>StorageDead(_677)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb290__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">290</td></tr><tr><td align="left" balign="left">StorageDead(_667)<br/>StorageLive(_678)<br/>StorageLive(_679)<br/>StorageLive(_680)<br/>StorageLive(_681)<br/>StorageLive(_682)<br/>StorageLive(_683)<br/>StorageLive(_684)<br/>StorageLive(_685)<br/>StorageLive(_686)<br/>StorageLive(_687)<br/>StorageLive(_688)<br/>_1361 = const _<br/>_688 = &amp;(*_1361)<br/>_687 = &amp;(*_688)<br/>_686 = move _687 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_687)<br/>StorageLive(_690)<br/>StorageLive(_691)<br/>StorageLive(_692)<br/>StorageLive(_693)<br/>StorageLive(_694)<br/>StorageLive(_695)<br/>StorageLive(_696)<br/>_696 = &amp;_389<br/>_695 = &amp;(*_696)<br/></td></tr><tr><td align="left">_694 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _695)</td></tr></table>>];
    bb291__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">291</td></tr><tr><td align="left" balign="left">StorageDead(_695)<br/>_693 = [move _694]<br/>StorageDead(_694)<br/>_692 = &amp;_693<br/>_691 = &amp;(*_692)<br/>_690 = move _691 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_691)<br/></td></tr><tr><td align="left">_685 = Arguments::&lt;'_&gt;::new_v1(move _686, move _690)</td></tr></table>>];
    bb292__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">292</td></tr><tr><td align="left" balign="left">StorageDead(_690)<br/>StorageDead(_686)<br/></td></tr><tr><td align="left">_684 = format(move _685)</td></tr></table>>];
    bb293__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">293</td></tr><tr><td align="left" balign="left">StorageDead(_685)<br/>StorageDead(_696)<br/>StorageDead(_693)<br/>StorageDead(_692)<br/>StorageDead(_688)<br/>_683 = move _684<br/>StorageDead(_684)<br/>_682 = &amp;_683<br/>_681 = &amp;(*_682)<br/></td></tr><tr><td align="left">_680 = &lt;String as Deref&gt;::deref(move _681)</td></tr></table>>];
    bb294__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">294</td></tr><tr><td align="left" balign="left">_679 = &amp;(*_680)<br/>StorageDead(_681)<br/></td></tr><tr><td align="left">_678 = solana_program::log::sol_log(move _679)</td></tr></table>>];
    bb295__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">295</td></tr><tr><td align="left" balign="left">StorageDead(_679)<br/></td></tr><tr><td align="left">drop(_683)</td></tr></table>>];
    bb296__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">296</td></tr><tr><td align="left" balign="left">StorageDead(_683)<br/>StorageDead(_682)<br/>StorageDead(_680)<br/>StorageDead(_678)<br/>_665 = Option::&lt;i64&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb297__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">297</td></tr><tr><td align="left" balign="left">StorageDead(_666)<br/>StorageLive(_697)<br/>StorageLive(_698)<br/>_698 = &amp;_19<br/>StorageLive(_699)<br/>_699 = &amp;_17<br/></td></tr><tr><td align="left">_697 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _698, move _699)</td></tr></table>>];
    bb298__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">298</td></tr><tr><td align="left" balign="left">StorageDead(_699)<br/>StorageDead(_698)<br/>StorageLive(_700)<br/>StorageLive(_701)<br/>_701 = &amp;((*_10).0: std::collections::BTreeMap&lt;anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader&lt;'_, state::user::User&gt;&gt;)<br/>StorageLive(_702)<br/>StorageLive(_703)<br/>_703 = &amp;_17<br/>_702 = &amp;(*_703)<br/></td></tr><tr><td align="left">_700 = BTreeMap::&lt;anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader&lt;'_, User&gt;&gt;::contains_key::&lt;anchor_lang::prelude::Pubkey&gt;(move _701, move _702)</td></tr></table>>];
    bb299__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">299</td></tr><tr><td align="left" balign="left">StorageDead(_702)<br/>StorageDead(_701)<br/>StorageDead(_703)<br/>StorageLive(_706)<br/>StorageLive(_707)<br/>_707 = _700<br/></td></tr><tr><td align="left">switchInt(move _707)</td></tr></table>>];
    bb300__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">300</td></tr><tr><td align="left" balign="left">StorageLive(_708)<br/>_708 = _697<br/></td></tr><tr><td align="left">switchInt(move _708)</td></tr></table>>];
    bb301__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">301</td></tr><tr><td align="left" balign="left">StorageLive(_709)<br/>StorageLive(_710)<br/>StorageLive(_711)<br/>StorageLive(_712)<br/>StorageLive(_713)<br/>_713 = &amp;(*_8)<br/></td></tr><tr><td align="left">_712 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _713)</td></tr></table>>];
    bb302__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">302</td></tr><tr><td align="left" balign="left">StorageDead(_713)<br/>StorageLive(_714)<br/>_714 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_711 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _712, move _714)</td></tr></table>>];
    bb303__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">303</td></tr><tr><td align="left" balign="left">StorageDead(_714)<br/>StorageDead(_712)<br/></td></tr><tr><td align="left">_710 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _711)</td></tr></table>>];
    bb304__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">304</td></tr><tr><td align="left" balign="left">StorageDead(_711)<br/>_715 = discriminant(_710)<br/></td></tr><tr><td align="left">switchInt(move _715)</td></tr></table>>];
    bb305__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">305</td></tr><tr><td align="left" balign="left">StorageLive(_719)<br/>_719 = move ((_710 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_1374 = const true<br/>_709 = move _719<br/>StorageDead(_719)<br/>_1397 = discriminant(_710)<br/>StorageDead(_710)<br/>StorageLive(_720)<br/>StorageLive(_721)<br/>StorageLive(_722)<br/>StorageLive(_723)<br/>StorageLive(_724)<br/>StorageLive(_725)<br/>StorageLive(_726)<br/>_726 = &amp;_709<br/></td></tr><tr><td align="left">_725 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _726)</td></tr></table>>];
    bb306__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">306</td></tr><tr><td align="left" balign="left">StorageLive(_716)<br/>_716 = ((_710 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_718)<br/>_718 = _716<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _718)</td></tr></table>>];
    bb307__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">307</td></tr><tr><td align="left" balign="left">StorageDead(_718)<br/>StorageDead(_716)<br/>_1395 = discriminant(_710)<br/>StorageDead(_710)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb308__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">308</td></tr><tr><td align="left" balign="left">StorageDead(_726)<br/>_724 = ((*_725).27: u8)<br/>_723 = Eq(move _724, const 0_u8)<br/></td></tr><tr><td align="left">switchInt(move _723)</td></tr></table>>];
    bb309__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">309</td></tr><tr><td align="left" balign="left">StorageDead(_725)<br/>StorageDead(_724)<br/>StorageLive(_727)<br/>_727 = ()<br/>_722 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _727)<br/>StorageDead(_727)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb310__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">310</td></tr><tr><td align="left" balign="left">StorageDead(_725)<br/>StorageDead(_724)<br/>StorageLive(_728)<br/>_728 = error::ErrorCode::InvalidPoolId<br/>StorageLive(_729)<br/>StorageLive(_730)<br/>StorageLive(_731)<br/>StorageLive(_732)<br/>StorageLive(_733)<br/>StorageLive(_734)<br/>StorageLive(_735)<br/>StorageLive(_736)<br/>StorageLive(_737)<br/>StorageLive(_738)<br/>StorageLive(_739)<br/>_1360 = const _<br/>_739 = &amp;(*_1360)<br/>_738 = &amp;(*_739)<br/>_737 = move _738 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_738)<br/>StorageLive(_741)<br/>StorageLive(_742)<br/>StorageLive(_743)<br/>StorageLive(_744)<br/>StorageLive(_745)<br/>StorageLive(_746)<br/>StorageLive(_747)<br/>_747 = &amp;_728<br/>_746 = &amp;(*_747)<br/></td></tr><tr><td align="left">_745 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _746)</td></tr></table>>];
    bb311__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">311</td></tr><tr><td align="left" balign="left">StorageDead(_746)<br/>_744 = [move _745]<br/>StorageDead(_745)<br/>_743 = &amp;_744<br/>_742 = &amp;(*_743)<br/>_741 = move _742 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_742)<br/></td></tr><tr><td align="left">_736 = Arguments::&lt;'_&gt;::new_v1(move _737, move _741)</td></tr></table>>];
    bb312__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">312</td></tr><tr><td align="left" balign="left">StorageDead(_741)<br/>StorageDead(_737)<br/></td></tr><tr><td align="left">_735 = format(move _736)</td></tr></table>>];
    bb313__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">313</td></tr><tr><td align="left" balign="left">StorageDead(_736)<br/>StorageDead(_747)<br/>StorageDead(_744)<br/>StorageDead(_743)<br/>StorageDead(_739)<br/>_734 = move _735<br/>StorageDead(_735)<br/>_733 = &amp;_734<br/>_732 = &amp;(*_733)<br/></td></tr><tr><td align="left">_731 = &lt;String as Deref&gt;::deref(move _732)</td></tr></table>>];
    bb314__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">314</td></tr><tr><td align="left" balign="left">_730 = &amp;(*_731)<br/>StorageDead(_732)<br/></td></tr><tr><td align="left">_729 = solana_program::log::sol_log(move _730)</td></tr></table>>];
    bb315__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">315</td></tr><tr><td align="left" balign="left">StorageDead(_730)<br/></td></tr><tr><td align="left">drop(_734)</td></tr></table>>];
    bb316__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">316</td></tr><tr><td align="left" balign="left">StorageDead(_734)<br/>StorageDead(_733)<br/>StorageDead(_731)<br/>StorageDead(_729)<br/>StorageLive(_748)<br/>StorageLive(_749)<br/>StorageLive(_750)<br/>StorageLive(_751)<br/>StorageLive(_752)<br/>StorageLive(_753)<br/>StorageLive(_754)<br/>StorageLive(_755)<br/>StorageLive(_756)<br/>StorageLive(_757)<br/>StorageLive(_758)<br/>_1359 = const _<br/>_758 = &amp;(*_1359)<br/>_757 = &amp;(*_758)<br/>_756 = move _757 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_757)<br/>StorageLive(_760)<br/>StorageLive(_761)<br/>StorageLive(_762)<br/>StorageLive(_763)<br/>StorageLive(_764)<br/>StorageLive(_765)<br/>StorageLive(_766)<br/>StorageLive(_767)<br/>StorageLive(_768)<br/>_768 = &amp;_709<br/></td></tr><tr><td align="left">_767 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _768)</td></tr></table>>];
    bb317__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">317</td></tr><tr><td align="left" balign="left">StorageDead(_768)<br/>_766 = &amp;((*_767).27: u8)<br/>_765 = &amp;(*_766)<br/></td></tr><tr><td align="left">_764 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u8&gt;(move _765)</td></tr></table>>];
    bb318__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">318</td></tr><tr><td align="left" balign="left">StorageDead(_765)<br/>_763 = [move _764]<br/>StorageDead(_764)<br/>_762 = &amp;_763<br/>_761 = &amp;(*_762)<br/>_760 = move _761 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_761)<br/></td></tr><tr><td align="left">_755 = Arguments::&lt;'_&gt;::new_v1(move _756, move _760)</td></tr></table>>];
    bb319__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">319</td></tr><tr><td align="left" balign="left">StorageDead(_760)<br/>StorageDead(_756)<br/></td></tr><tr><td align="left">_754 = format(move _755)</td></tr></table>>];
    bb320__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">320</td></tr><tr><td align="left" balign="left">StorageDead(_755)<br/>StorageDead(_767)<br/>StorageDead(_766)<br/>StorageDead(_763)<br/>StorageDead(_762)<br/>StorageDead(_758)<br/>_753 = move _754<br/>StorageDead(_754)<br/>_752 = &amp;_753<br/>_751 = &amp;(*_752)<br/></td></tr><tr><td align="left">_750 = &lt;String as Deref&gt;::deref(move _751)</td></tr></table>>];
    bb321__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">321</td></tr><tr><td align="left" balign="left">_749 = &amp;(*_750)<br/>StorageDead(_751)<br/></td></tr><tr><td align="left">_748 = solana_program::log::sol_log(move _749)</td></tr></table>>];
    bb322__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">322</td></tr><tr><td align="left" balign="left">StorageDead(_749)<br/></td></tr><tr><td align="left">drop(_753)</td></tr></table>>];
    bb323__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">323</td></tr><tr><td align="left" balign="left">StorageDead(_753)<br/>StorageDead(_752)<br/>StorageDead(_750)<br/>StorageDead(_748)<br/>StorageLive(_769)<br/>_769 = _728<br/>_722 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _769)<br/>StorageDead(_769)<br/>StorageDead(_728)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb324__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">324</td></tr><tr><td align="left" balign="left">StorageDead(_723)<br/></td></tr><tr><td align="left">_721 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _722)</td></tr></table>>];
    bb325__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">325</td></tr><tr><td align="left" balign="left">StorageDead(_722)<br/>_770 = discriminant(_721)<br/></td></tr><tr><td align="left">switchInt(move _770)</td></tr></table>>];
    bb326__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">326</td></tr><tr><td align="left" balign="left">StorageLive(_774)<br/>_774 = ((_721 as Continue).0: ())<br/>_720 = _774<br/>StorageDead(_774)<br/>StorageDead(_721)<br/>StorageDead(_720)<br/>StorageLive(_775)<br/>StorageLive(_776)<br/>StorageLive(_777)<br/>StorageLive(_778)<br/>_778 = &amp;_709<br/></td></tr><tr><td align="left">_777 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _778)</td></tr></table>>];
    bb327__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">327</td></tr><tr><td align="left" balign="left">StorageLive(_771)<br/>_771 = ((_721 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_773)<br/>_773 = _771<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _773)</td></tr></table>>];
    bb328__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">328</td></tr><tr><td align="left" balign="left">StorageDead(_773)<br/>StorageDead(_771)<br/>StorageDead(_721)<br/>StorageDead(_720)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb329__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">329</td></tr><tr><td align="left" balign="left">StorageDead(_778)<br/>_776 = &amp;((*_777).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_779)<br/>StorageLive(_780)<br/>StorageLive(_781)<br/>_781 = &amp;(*_21)<br/></td></tr><tr><td align="left">_780 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _781)</td></tr></table>>];
    bb330__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">330</td></tr><tr><td align="left" balign="left">StorageDead(_781)<br/>_779 = &amp;((*_780).0: anchor_lang::prelude::Pubkey)<br/></td></tr><tr><td align="left">_775 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _776, move _779)</td></tr></table>>];
    bb331__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">331</td></tr><tr><td align="left">switchInt(move _775)</td></tr></table>>];
    bb332__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">332</td></tr><tr><td align="left" balign="left">StorageDead(_780)<br/>StorageDead(_779)<br/>StorageDead(_777)<br/>StorageDead(_776)<br/>StorageLive(_782)<br/>StorageLive(_783)<br/>_1374 = const false<br/>_783 = move _709<br/>_782 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::Some(move _783)<br/>StorageDead(_783)<br/>StorageLive(_784)<br/>StorageLive(_785)<br/>StorageLive(_786)<br/>StorageLive(_787)<br/>StorageLive(_788)<br/>StorageLive(_789)<br/>_789 = &amp;(*_9)<br/></td></tr><tr><td align="left">_788 = anchor_lang::prelude::AccountLoader::&lt;'_, UserStats&gt;::load_mut(move _789)</td></tr></table>>];
    bb333__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">333</td></tr><tr><td align="left" balign="left">StorageDead(_789)<br/>StorageLive(_790)<br/>_790 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_787 = std::result::Result::&lt;RefMut&lt;'_, UserStats&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _788, move _790)</td></tr></table>>];
    bb334__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">334</td></tr><tr><td align="left" balign="left">StorageDead(_790)<br/>StorageDead(_788)<br/></td></tr><tr><td align="left">_786 = &lt;std::result::Result&lt;RefMut&lt;'_, UserStats&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _787)</td></tr></table>>];
    bb335__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">335</td></tr><tr><td align="left" balign="left">StorageDead(_787)<br/>_791 = discriminant(_786)<br/></td></tr><tr><td align="left">switchInt(move _791)</td></tr></table>>];
    bb336__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">336</td></tr><tr><td align="left" balign="left">StorageLive(_795)<br/>_795 = move ((_786 as Continue).0: std::cell::RefMut&lt;'_, state::user::UserStats&gt;)<br/>_785 = move _795<br/>StorageDead(_795)<br/>_784 = Option::&lt;RefMut&lt;'_, UserStats&gt;&gt;::Some(move _785)<br/>StorageDead(_785)<br/>_706 = (move _782, move _784)<br/>StorageDead(_784)<br/>StorageDead(_782)<br/>_1399 = discriminant(_786)<br/>StorageDead(_786)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb337__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">337</td></tr><tr><td align="left" balign="left">StorageLive(_792)<br/>_792 = ((_786 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_794)<br/>_794 = _792<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _794)</td></tr></table>>];
    bb338__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">338</td></tr><tr><td align="left" balign="left">StorageDead(_794)<br/>StorageDead(_792)<br/>StorageDead(_785)<br/>StorageDead(_784)<br/></td></tr><tr><td align="left">drop(_782)</td></tr></table>>];
    bb339__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">339</td></tr><tr><td align="left" balign="left">StorageDead(_780)<br/>StorageDead(_779)<br/>StorageDead(_777)<br/>StorageDead(_776)<br/>StorageLive(_796)<br/>_796 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::None<br/>StorageLive(_797)<br/>_797 = Option::&lt;RefMut&lt;'_, UserStats&gt;&gt;::None<br/>_706 = (move _796, move _797)<br/>StorageDead(_797)<br/>StorageDead(_796)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb340__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">340</td></tr><tr><td align="left" balign="left">StorageDead(_775)<br/></td></tr><tr><td align="left">switchInt(_1374)</td></tr></table>>];
    bb341__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">341</td></tr><tr><td align="left" balign="left">_1374 = const false<br/>StorageDead(_709)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb342__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">342</td></tr><tr><td align="left" balign="left">StorageLive(_798)<br/>_798 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::None<br/>StorageLive(_799)<br/>_799 = Option::&lt;RefMut&lt;'_, UserStats&gt;&gt;::None<br/>_706 = (move _798, move _799)<br/>StorageDead(_799)<br/>StorageDead(_798)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb343__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">343</td></tr><tr><td align="left" balign="left">StorageDead(_708)<br/>StorageDead(_707)<br/>StorageLive(_704)<br/>_704 = move (_706.0: std::option::Option&lt;std::cell::RefMut&lt;'_, state::user::User&gt;&gt;)<br/>StorageLive(_705)<br/>_705 = move (_706.1: std::option::Option&lt;std::cell::RefMut&lt;'_, state::user::UserStats&gt;&gt;)<br/>StorageDead(_706)<br/>StorageLive(_800)<br/>StorageLive(_801)<br/>StorageLive(_802)<br/>StorageLive(_803)<br/>_803 = &amp;(*_6)<br/>StorageLive(_804)<br/>_804 = &amp;(*_5)<br/>StorageLive(_805)<br/>_805 = &amp;mut (*_7)<br/>StorageLive(_806)<br/>_806 = &amp;(*_10)<br/>StorageLive(_807)<br/>StorageLive(_808)<br/>_808 = &amp;_19<br/>_807 = &amp;(*_808)<br/>StorageLive(_809)<br/>StorageLive(_810)<br/>StorageLive(_811)<br/>StorageLive(_812)<br/>_812 = &amp;(*_21)<br/></td></tr><tr><td align="left">_811 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _812)</td></tr></table>>];
    bb344__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">344</td></tr><tr><td align="left" balign="left">StorageDead(_812)<br/>StorageLive(_813)<br/>_813 = _45<br/>_814 = Len(((*_811).5: [state::user::Order; 32]))<br/>_815 = Lt(_813, _814)<br/></td></tr><tr><td align="left">assert(move _815, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _814, _813)</td></tr></table>>];
    bb345__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">345</td></tr><tr><td align="left" balign="left">_810 = &amp;((*_811).5: [state::user::Order; 32])[_813]<br/>_809 = &amp;(*_810)<br/>StorageLive(_816)<br/>StorageLive(_817)<br/>StorageLive(_818)<br/>StorageLive(_819)<br/>_819 = &amp;mut _704<br/></td></tr><tr><td align="left">_818 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::as_deref_mut(move _819)</td></tr></table>>];
    bb346__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">346</td></tr><tr><td align="left" balign="left">StorageDead(_819)<br/>_817 = &amp;mut _818<br/>_816 = &amp;mut (*_817)<br/>StorageLive(_820)<br/>StorageLive(_821)<br/>_821 = &amp;_17<br/>_820 = &amp;(*_821)<br/>StorageLive(_822)<br/>_822 = (((*_2).5: state::state::FeeStructure).3: u64)<br/>StorageLive(_823)<br/>_823 = _387<br/>StorageLive(_824)<br/>_824 = _12<br/>StorageLive(_825)<br/>_825 = _15<br/>StorageLive(_826)<br/>_826 = _16<br/>StorageLive(_827)<br/>_827 = _390<br/>StorageLive(_828)<br/>StorageLive(_829)<br/>_829 = ((*_2).16: u8)<br/>_828 = move _829 as u64 (IntToInt)<br/>StorageDead(_829)<br/></td></tr><tr><td align="left">_802 = get_maker_orders_info(move _803, move _804, move _805, move _806, move _807, move _809, move _816, move _820, move _822, move _823, move _824, move _825, move _826, move _827, move _828)</td></tr></table>>];
    bb347__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">347</td></tr><tr><td align="left" balign="left">StorageDead(_828)<br/>StorageDead(_827)<br/>StorageDead(_826)<br/>StorageDead(_825)<br/>StorageDead(_824)<br/>StorageDead(_823)<br/>StorageDead(_822)<br/>StorageDead(_820)<br/>StorageDead(_816)<br/>StorageDead(_809)<br/>StorageDead(_807)<br/>StorageDead(_806)<br/>StorageDead(_805)<br/>StorageDead(_804)<br/>StorageDead(_803)<br/></td></tr><tr><td align="left">_801 = &lt;std::result::Result&lt;Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64)&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _802)</td></tr></table>>];
    bb348__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">348</td></tr><tr><td align="left" balign="left">StorageDead(_802)<br/>_830 = discriminant(_801)<br/></td></tr><tr><td align="left">switchInt(move _830)</td></tr></table>>];
    bb349__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">349</td></tr><tr><td align="left" balign="left">StorageLive(_834)<br/>_834 = move ((_801 as Continue).0: std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64)&gt;)<br/>_800 = move _834<br/>StorageDead(_834)<br/>_1403 = discriminant(_801)<br/>StorageDead(_821)<br/>StorageDead(_818)<br/>StorageDead(_817)<br/>StorageDead(_813)<br/>StorageDead(_811)<br/>StorageDead(_810)<br/>StorageDead(_808)<br/>StorageDead(_801)<br/>StorageLive(_835)<br/>StorageLive(_836)<br/>StorageLive(_837)<br/>_837 = &amp;_14<br/></td></tr><tr><td align="left">_836 = FillMode::is_liquidation(move _837)</td></tr></table>>];
    bb350__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">350</td></tr><tr><td align="left" balign="left">StorageLive(_831)<br/>_831 = ((_801 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_833)<br/>_833 = _831<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _833)</td></tr></table>>];
    bb351__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">351</td></tr><tr><td align="left" balign="left">StorageDead(_833)<br/>StorageDead(_831)<br/>_1401 = discriminant(_801)<br/>StorageDead(_821)<br/>StorageDead(_818)<br/>StorageDead(_817)<br/>StorageDead(_813)<br/>StorageDead(_811)<br/>StorageDead(_810)<br/>StorageDead(_808)<br/>StorageDead(_801)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb352__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">352</td></tr><tr><td align="left">switchInt(move _836)</td></tr></table>>];
    bb353__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">353</td></tr><tr><td align="left" balign="left">StorageDead(_837)<br/>_835 = Option::&lt;(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb354__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">354</td></tr><tr><td align="left" balign="left">StorageDead(_837)<br/>StorageLive(_838)<br/>StorageLive(_839)<br/>StorageLive(_840)<br/>StorageLive(_841)<br/>StorageLive(_842)<br/>_842 = &amp;(*_33)<br/></td></tr><tr><td align="left">_841 = &lt;RefMut&lt;'_, UserStats&gt; as Deref&gt;::deref(move _842)</td></tr></table>>];
    bb355__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">355</td></tr><tr><td align="left" balign="left">_840 = &amp;(*_841)<br/>StorageDead(_842)<br/>StorageLive(_843)<br/>StorageLive(_844)<br/>_844 = &amp;_19<br/>_843 = &amp;(*_844)<br/>StorageLive(_845)<br/>_845 = &amp;(*_10)<br/>StorageLive(_846)<br/>_846 = &amp;(*_11)<br/>StorageLive(_847)<br/>_847 = _16<br/></td></tr><tr><td align="left">_839 = get_referrer_info(move _840, move _843, move _845, move _846, move _847)</td></tr></table>>];
    bb356__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">356</td></tr><tr><td align="left" balign="left">StorageDead(_847)<br/>StorageDead(_846)<br/>StorageDead(_845)<br/>StorageDead(_843)<br/>StorageDead(_840)<br/></td></tr><tr><td align="left">_838 = &lt;std::result::Result&lt;Option&lt;(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _839)</td></tr></table>>];
    bb357__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">357</td></tr><tr><td align="left" balign="left">StorageDead(_839)<br/>_848 = discriminant(_838)<br/></td></tr><tr><td align="left">switchInt(move _848)</td></tr></table>>];
    bb358__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">358</td></tr><tr><td align="left" balign="left">StorageLive(_852)<br/>_852 = ((_838 as Continue).0: std::option::Option&lt;(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)&gt;)<br/>_835 = _852<br/>StorageDead(_852)<br/>StorageDead(_844)<br/>StorageDead(_841)<br/>StorageDead(_838)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb359__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">359</td></tr><tr><td align="left" balign="left">StorageLive(_849)<br/>_849 = ((_838 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_851)<br/>_851 = _849<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _851)</td></tr></table>>];
    bb360__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">360</td></tr><tr><td align="left" balign="left">StorageDead(_851)<br/>StorageDead(_849)<br/>StorageDead(_844)<br/>StorageDead(_841)<br/>StorageDead(_838)<br/>StorageDead(_836)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb361__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">361</td></tr><tr><td align="left" balign="left">StorageDead(_836)<br/>StorageLive(_853)<br/>StorageLive(_854)<br/>StorageLive(_855)<br/>StorageLive(_856)<br/>_856 = _387<br/>StorageLive(_857)<br/>_857 = _388<br/>StorageLive(_858)<br/>StorageLive(_859)<br/>StorageLive(_860)<br/>StorageLive(_861)<br/>StorageLive(_862)<br/>_862 = &amp;((*_2).7: state::state::OracleGuardRails)<br/></td></tr><tr><td align="left">_861 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _862)</td></tr></table>>];
    bb362__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">362</td></tr><tr><td align="left" balign="left">StorageDead(_862)<br/></td></tr><tr><td align="left">_860 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _861)</td></tr></table>>];
    bb363__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">363</td></tr><tr><td align="left" balign="left">StorageDead(_861)<br/></td></tr><tr><td align="left">_859 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _860)</td></tr></table>>];
    bb364__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">364</td></tr><tr><td align="left" balign="left">StorageDead(_860)<br/>_863 = discriminant(_859)<br/></td></tr><tr><td align="left">switchInt(move _863)</td></tr></table>>];
    bb365__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">365</td></tr><tr><td align="left" balign="left">StorageLive(_867)<br/>_867 = ((_859 as Continue).0: i64)<br/>_858 = _867<br/>StorageDead(_867)<br/></td></tr><tr><td align="left">_855 = math::orders::is_oracle_too_divergent_with_twap_5min(move _856, move _857, move _858)</td></tr></table>>];
    bb366__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">366</td></tr><tr><td align="left" balign="left">StorageLive(_864)<br/>_864 = ((_859 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_866)<br/>_866 = _864<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _866)</td></tr></table>>];
    bb367__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">367</td></tr><tr><td align="left" balign="left">StorageDead(_866)<br/>StorageDead(_864)<br/>StorageDead(_858)<br/>StorageDead(_857)<br/>StorageDead(_856)<br/>StorageDead(_855)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb368__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">368</td></tr><tr><td align="left" balign="left">StorageDead(_858)<br/>StorageDead(_857)<br/>StorageDead(_856)<br/></td></tr><tr><td align="left">_854 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _855)</td></tr></table>>];
    bb369__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">369</td></tr><tr><td align="left" balign="left">StorageDead(_855)<br/>_868 = discriminant(_854)<br/></td></tr><tr><td align="left">switchInt(move _868)</td></tr></table>>];
    bb370__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">370</td></tr><tr><td align="left" balign="left">StorageLive(_872)<br/>_872 = ((_854 as Continue).0: bool)<br/>_853 = _872<br/>StorageDead(_872)<br/>StorageDead(_859)<br/>StorageDead(_854)<br/>StorageLive(_873)<br/>StorageLive(_874)<br/>_874 = _853<br/></td></tr><tr><td align="left">switchInt(move _874)</td></tr></table>>];
    bb371__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">371</td></tr><tr><td align="left" balign="left">StorageLive(_869)<br/>_869 = ((_854 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_871)<br/>_871 = _869<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _871)</td></tr></table>>];
    bb372__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">372</td></tr><tr><td align="left" balign="left">StorageDead(_871)<br/>StorageDead(_869)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb373__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">373</td></tr><tr><td align="left" balign="left">StorageLive(_875)<br/>StorageLive(_876)<br/>StorageLive(_877)<br/>_877 = &amp;mut _704<br/></td></tr><tr><td align="left">_876 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::as_deref_mut(move _877)</td></tr></table>>];
    bb374__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">374</td></tr><tr><td align="left" balign="left">_873 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb375__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">375</td></tr><tr><td align="left" balign="left">StorageDead(_877)<br/>_878 = discriminant(_876)<br/></td></tr><tr><td align="left">switchInt(move _878)</td></tr></table>>];
    bb376__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">376</td></tr><tr><td align="left" balign="left">StorageLive(_879)<br/>_879 = move ((_876 as Some).0: &amp;mut state::user::User)<br/>StorageLive(_880)<br/>StorageLive(_881)<br/>_881 = &amp;mut (*_879)<br/>StorageLive(_882)<br/>_882 = _16<br/></td></tr><tr><td align="left">_880 = User::update_last_active_slot(move _881, move _882)</td></tr></table>>];
    bb377__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">377</td></tr><tr><td align="left" balign="left">StorageDead(_882)<br/>StorageDead(_881)<br/>StorageDead(_880)<br/>_875 = const ()<br/>StorageDead(_879)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb378__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">378</td></tr><tr><td align="left" balign="left">_875 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb379__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">379</td></tr><tr><td align="left" balign="left">StorageDead(_876)<br/>StorageDead(_875)<br/>StorageLive(_883)<br/>StorageLive(_884)<br/>StorageLive(_885)<br/>StorageLive(_886)<br/>StorageLive(_887)<br/>StorageLive(_888)<br/>StorageLive(_889)<br/>StorageLive(_890)<br/>_890 = &amp;(*_6)<br/>StorageLive(_891)<br/>StorageLive(_892)<br/>_892 = &amp;_64<br/>_891 = &amp;(*_892)<br/></td></tr><tr><td align="left">_889 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _890, move _891)</td></tr></table>>];
    bb380__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">380</td></tr><tr><td align="left" balign="left">StorageDead(_891)<br/>StorageDead(_890)<br/></td></tr><tr><td align="left">_888 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _889)</td></tr></table>>];
    bb381__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">381</td></tr><tr><td align="left" balign="left">_1378 = const true<br/>StorageDead(_889)<br/>_893 = discriminant(_888)<br/></td></tr><tr><td align="left">switchInt(move _893)</td></tr></table>>];
    bb382__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">382</td></tr><tr><td align="left" balign="left">StorageLive(_897)<br/>_897 = move ((_888 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_887 = move _897<br/>StorageDead(_897)<br/>_886 = &amp;_887<br/></td></tr><tr><td align="left">_885 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _886)</td></tr></table>>];
    bb383__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">383</td></tr><tr><td align="left" balign="left">StorageLive(_894)<br/>_894 = ((_888 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_896)<br/>_896 = _894<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _896)</td></tr></table>>];
    bb384__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">384</td></tr><tr><td align="left" balign="left">StorageDead(_896)<br/>StorageDead(_894)<br/>StorageDead(_886)<br/>StorageDead(_884)<br/>_1405 = discriminant(_888)<br/>StorageDead(_892)<br/>_1378 = const false<br/>StorageDead(_888)<br/>StorageDead(_887)<br/>StorageDead(_885)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb385__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">385</td></tr><tr><td align="left" balign="left">_884 = &amp;(*_885)<br/>StorageDead(_886)<br/></td></tr><tr><td align="left">_883 = PerpMarket::is_prediction_market(move _884)</td></tr></table>>];
    bb386__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">386</td></tr><tr><td align="left">switchInt(move _883)</td></tr></table>>];
    bb387__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">387</td></tr><tr><td align="left" balign="left">StorageDead(_884)<br/></td></tr><tr><td align="left">drop(_887)</td></tr></table>>];
    bb388__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">388</td></tr><tr><td align="left" balign="left">StorageDead(_884)<br/></td></tr><tr><td align="left">drop(_887)</td></tr></table>>];
    bb389__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">389</td></tr><tr><td align="left" balign="left">StorageDead(_874)<br/>StorageDead(_873)<br/>StorageLive(_900)<br/>StorageLive(_901)<br/>StorageLive(_902)<br/>StorageLive(_903)<br/>StorageLive(_904)<br/>StorageLive(_905)<br/>_905 = &amp;(*_21)<br/></td></tr><tr><td align="left">_904 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _905)</td></tr></table>>];
    bb390__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">390</td></tr><tr><td align="left" balign="left">_903 = &amp;(*_904)<br/>StorageDead(_905)<br/>StorageLive(_906)<br/>_906 = _45<br/>StorageLive(_907)<br/>_907 = _15<br/></td></tr><tr><td align="left">_902 = math::orders::should_expire_order_before_fill(move _903, move _906, move _907)</td></tr></table>>];
    bb391__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">391</td></tr><tr><td align="left" balign="left">StorageDead(_907)<br/>StorageDead(_906)<br/>StorageDead(_903)<br/></td></tr><tr><td align="left">_901 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _902)</td></tr></table>>];
    bb392__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">392</td></tr><tr><td align="left" balign="left">StorageDead(_902)<br/>_908 = discriminant(_901)<br/></td></tr><tr><td align="left">switchInt(move _908)</td></tr></table>>];
    bb393__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">393</td></tr><tr><td align="left" balign="left">StorageLive(_912)<br/>_912 = ((_901 as Continue).0: bool)<br/>_900 = _912<br/>StorageDead(_912)<br/>StorageDead(_904)<br/>StorageDead(_901)<br/>StorageLive(_913)<br/>StorageLive(_914)<br/>StorageLive(_915)<br/>StorageLive(_916)<br/>StorageLive(_917)<br/>StorageLive(_918)<br/>StorageLive(_919)<br/>_919 = &amp;(*_21)<br/></td></tr><tr><td align="left">_918 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _919)</td></tr></table>>];
    bb394__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">394</td></tr><tr><td align="left" balign="left">StorageLive(_909)<br/>_909 = ((_901 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_911)<br/>_911 = _909<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _911)</td></tr></table>>];
    bb395__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">395</td></tr><tr><td align="left" balign="left">StorageDead(_911)<br/>StorageDead(_909)<br/>StorageDead(_904)<br/>StorageDead(_901)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb396__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">396</td></tr><tr><td align="left" balign="left">StorageDead(_919)<br/>_917 = &amp;((*_918).4: [state::user::PerpPosition; 8])<br/>_916 = &amp;(*_917)<br/>StorageLive(_920)<br/>StorageLive(_921)<br/>StorageLive(_922)<br/>_922 = &amp;(*_21)<br/></td></tr><tr><td align="left">_921 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _922)</td></tr></table>>];
    bb397__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">397</td></tr><tr><td align="left" balign="left">StorageDead(_922)<br/>StorageLive(_923)<br/>_923 = _45<br/>_924 = Len(((*_921).5: [state::user::Order; 32]))<br/>_925 = Lt(_923, _924)<br/></td></tr><tr><td align="left">assert(move _925, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _924, _923)</td></tr></table>>];
    bb398__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">398</td></tr><tr><td align="left" balign="left">_920 = (((*_921).5: [state::user::Order; 32])[_923].11: u16)<br/></td></tr><tr><td align="left">_915 = get_position_index(move _916, move _920)</td></tr></table>>];
    bb399__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">399</td></tr><tr><td align="left" balign="left">StorageDead(_920)<br/>StorageDead(_916)<br/></td></tr><tr><td align="left">_914 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _915)</td></tr></table>>];
    bb400__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">400</td></tr><tr><td align="left" balign="left">StorageDead(_915)<br/>_926 = discriminant(_914)<br/></td></tr><tr><td align="left">switchInt(move _926)</td></tr></table>>];
    bb401__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">401</td></tr><tr><td align="left" balign="left">StorageLive(_930)<br/>_930 = ((_914 as Continue).0: usize)<br/>_913 = _930<br/>StorageDead(_930)<br/>StorageDead(_923)<br/>StorageDead(_921)<br/>StorageDead(_918)<br/>StorageDead(_917)<br/>StorageDead(_914)<br/>StorageLive(_931)<br/>StorageLive(_932)<br/>StorageLive(_933)<br/>_933 = &amp;(*_21)<br/></td></tr><tr><td align="left">_932 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _933)</td></tr></table>>];
    bb402__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">402</td></tr><tr><td align="left" balign="left">StorageLive(_927)<br/>_927 = ((_914 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_929)<br/>_929 = _927<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _929)</td></tr></table>>];
    bb403__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">403</td></tr><tr><td align="left" balign="left">StorageDead(_929)<br/>StorageDead(_927)<br/>StorageDead(_923)<br/>StorageDead(_921)<br/>StorageDead(_918)<br/>StorageDead(_917)<br/>StorageDead(_914)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb404__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">404</td></tr><tr><td align="left" balign="left">StorageDead(_933)<br/>StorageLive(_934)<br/>_934 = _913<br/>_935 = Len(((*_932).4: [state::user::PerpPosition; 8]))<br/>_936 = Lt(_934, _935)<br/></td></tr><tr><td align="left">assert(move _936, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _935, _934)</td></tr></table>>];
    bb405__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">405</td></tr><tr><td align="left" balign="left">_931 = (((*_932).4: [state::user::PerpPosition; 8])[_934].1: i64)<br/>StorageDead(_934)<br/>StorageDead(_932)<br/>StorageLive(_937)<br/>StorageLive(_938)<br/>StorageLive(_939)<br/>StorageLive(_940)<br/>StorageLive(_941)<br/>StorageLive(_942)<br/>StorageLive(_943)<br/>_943 = &amp;(*_21)<br/></td></tr><tr><td align="left">_942 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _943)</td></tr></table>>];
    bb406__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">406</td></tr><tr><td align="left" balign="left">StorageDead(_943)<br/>StorageLive(_944)<br/>_944 = _45<br/>_945 = Len(((*_942).5: [state::user::Order; 32]))<br/>_946 = Lt(_944, _945)<br/></td></tr><tr><td align="left">assert(move _946, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _945, _944)</td></tr></table>>];
    bb407__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">407</td></tr><tr><td align="left" balign="left">_941 = &amp;((*_942).5: [state::user::Order; 32])[_944]<br/>_940 = &amp;(*_941)<br/>StorageLive(_947)<br/>_947 = _931<br/>StorageLive(_948)<br/>StorageLive(_949)<br/>StorageLive(_950)<br/>StorageLive(_951)<br/>StorageLive(_952)<br/>StorageLive(_953)<br/>StorageLive(_954)<br/>_954 = &amp;(*_6)<br/>StorageLive(_955)<br/>StorageLive(_956)<br/>_956 = &amp;_64<br/>_955 = &amp;(*_956)<br/></td></tr><tr><td align="left">_953 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _954, move _955)</td></tr></table>>];
    bb408__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">408</td></tr><tr><td align="left" balign="left">StorageDead(_955)<br/>StorageDead(_954)<br/></td></tr><tr><td align="left">_952 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _953)</td></tr></table>>];
    bb409__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">409</td></tr><tr><td align="left" balign="left">_1376 = const true<br/>StorageDead(_953)<br/>_957 = discriminant(_952)<br/></td></tr><tr><td align="left">switchInt(move _957)</td></tr></table>>];
    bb410__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">410</td></tr><tr><td align="left" balign="left">StorageLive(_961)<br/>_961 = move ((_952 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_951 = move _961<br/>StorageDead(_961)<br/>_950 = &amp;_951<br/></td></tr><tr><td align="left">_949 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _950)</td></tr></table>>];
    bb411__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">411</td></tr><tr><td align="left" balign="left">StorageLive(_958)<br/>_958 = ((_952 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_960)<br/>_960 = _958<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _960)</td></tr></table>>];
    bb412__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">412</td></tr><tr><td align="left" balign="left">StorageDead(_960)<br/>StorageDead(_958)<br/>StorageDead(_950)<br/>StorageDead(_948)<br/>StorageDead(_947)<br/>StorageDead(_940)<br/>StorageDead(_939)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb413__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">413</td></tr><tr><td align="left" balign="left">StorageDead(_950)<br/>_948 = (((*_949).1: state::perp_market::AMM).52: u64)<br/></td></tr><tr><td align="left">_939 = math::orders::should_cancel_reduce_only_order(move _940, move _947, move _948)</td></tr></table>>];
    bb414__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">414</td></tr><tr><td align="left" balign="left">StorageDead(_948)<br/>StorageDead(_947)<br/>StorageDead(_940)<br/></td></tr><tr><td align="left">_938 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _939)</td></tr></table>>];
    bb415__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">415</td></tr><tr><td align="left" balign="left">StorageDead(_939)<br/>_962 = discriminant(_938)<br/></td></tr><tr><td align="left">switchInt(move _962)</td></tr></table>>];
    bb416__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">416</td></tr><tr><td align="left" balign="left">StorageLive(_966)<br/>_966 = ((_938 as Continue).0: bool)<br/>_937 = _966<br/>StorageDead(_966)<br/></td></tr><tr><td align="left">drop(_951)</td></tr></table>>];
    bb417__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">417</td></tr><tr><td align="left" balign="left">StorageLive(_963)<br/>_963 = ((_938 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_965)<br/>_965 = _963<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _965)</td></tr></table>>];
    bb418__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">418</td></tr><tr><td align="left" balign="left">StorageDead(_965)<br/>StorageDead(_963)<br/></td></tr><tr><td align="left">drop(_951)</td></tr></table>>];
    bb419__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">419</td></tr><tr><td align="left" balign="left">StorageLive(_969)<br/>_969 = _937<br/></td></tr><tr><td align="left">switchInt(move _969)</td></tr></table>>];
    bb420__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">420</td></tr><tr><td align="left" balign="left">StorageLive(_971)<br/>StorageLive(_972)<br/>StorageLive(_973)<br/>StorageLive(_974)<br/>StorageLive(_975)<br/>_975 = &amp;(*_6)<br/>StorageLive(_976)<br/>StorageLive(_977)<br/>_977 = &amp;_64<br/>_976 = &amp;(*_977)<br/></td></tr><tr><td align="left">_974 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _975, move _976)</td></tr></table>>];
    bb421__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">421</td></tr><tr><td align="left" balign="left">StorageDead(_976)<br/>StorageDead(_975)<br/></td></tr><tr><td align="left">_973 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _974)</td></tr></table>>];
    bb422__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">422</td></tr><tr><td align="left" balign="left">StorageDead(_974)<br/>_978 = discriminant(_973)<br/></td></tr><tr><td align="left">switchInt(move _978)</td></tr></table>>];
    bb423__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">423</td></tr><tr><td align="left" balign="left">StorageLive(_982)<br/>_982 = move ((_973 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_972 = move _982<br/>StorageDead(_982)<br/>_1415 = discriminant(_973)<br/>StorageDead(_977)<br/>StorageDead(_973)<br/>StorageLive(_983)<br/>StorageLive(_984)<br/>StorageLive(_985)<br/>StorageLive(_986)<br/>StorageLive(_987)<br/>_987 = &amp;mut (*_21)<br/></td></tr><tr><td align="left">_986 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _987)</td></tr></table>>];
    bb424__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">424</td></tr><tr><td align="left" balign="left">StorageLive(_979)<br/>_979 = ((_973 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_981)<br/>_981 = _979<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _981)</td></tr></table>>];
    bb425__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">425</td></tr><tr><td align="left" balign="left">StorageDead(_981)<br/>StorageDead(_979)<br/>_1413 = discriminant(_973)<br/>StorageDead(_977)<br/>StorageDead(_973)<br/>StorageDead(_972)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb426__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">426</td></tr><tr><td align="left" balign="left">_985 = &amp;mut (*_986)<br/>StorageDead(_987)<br/>StorageLive(_988)<br/>StorageLive(_989)<br/>_989 = &amp;mut _704<br/></td></tr><tr><td align="left">_988 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::as_deref_mut(move _989)</td></tr></table>>];
    bb427__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">427</td></tr><tr><td align="left" balign="left">StorageDead(_989)<br/>StorageLive(_990)<br/>StorageLive(_991)<br/>StorageLive(_992)<br/>_992 = &amp;mut _972<br/></td></tr><tr><td align="left">_991 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _992)</td></tr></table>>];
    bb428__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">428</td></tr><tr><td align="left" balign="left">_990 = &amp;mut (*_991)<br/>StorageDead(_992)<br/>StorageLive(_993)<br/>_993 = (((*_2).5: state::state::FeeStructure).3: u64)<br/>StorageLive(_994)<br/>_994 = _16<br/></td></tr><tr><td align="left">_984 = pay_keeper_flat_reward_for_perps(move _985, move _988, move _990, move _993, move _994)</td></tr></table>>];
    bb429__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">429</td></tr><tr><td align="left" balign="left">StorageDead(_994)<br/>StorageDead(_993)<br/>StorageDead(_990)<br/>StorageDead(_988)<br/>StorageDead(_985)<br/></td></tr><tr><td align="left">_983 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _984)</td></tr></table>>];
    bb430__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">430</td></tr><tr><td align="left" balign="left">StorageDead(_984)<br/>_995 = discriminant(_983)<br/></td></tr><tr><td align="left">switchInt(move _995)</td></tr></table>>];
    bb431__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">431</td></tr><tr><td align="left" balign="left">StorageLive(_999)<br/>_999 = ((_983 as Continue).0: u64)<br/>_971 = _999<br/>StorageDead(_999)<br/></td></tr><tr><td align="left">drop(_972)</td></tr></table>>];
    bb432__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">432</td></tr><tr><td align="left" balign="left">StorageLive(_996)<br/>_996 = ((_983 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_998)<br/>_998 = _996<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _998)</td></tr></table>>];
    bb433__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">433</td></tr><tr><td align="left" balign="left">StorageDead(_998)<br/>StorageDead(_996)<br/></td></tr><tr><td align="left">drop(_972)</td></tr></table>>];
    bb434__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">434</td></tr><tr><td align="left" balign="left">StorageDead(_972)<br/>StorageDead(_991)<br/>StorageDead(_986)<br/>StorageDead(_983)<br/>StorageLive(_1000)<br/>StorageLive(_1001)<br/>_1001 = _900<br/></td></tr><tr><td align="left">switchInt(move _1001)</td></tr></table>>];
    bb435__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">435</td></tr><tr><td align="left" balign="left">_1000 = OrderActionExplanation::OrderExpired<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb436__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">436</td></tr><tr><td align="left" balign="left">_1000 = OrderActionExplanation::ReduceOnlyOrderIncreasedPosition<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb437__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">437</td></tr><tr><td align="left" balign="left">StorageDead(_1001)<br/>StorageLive(_1002)<br/>StorageLive(_1003)<br/>StorageLive(_1004)<br/>StorageLive(_1005)<br/>_1005 = _45<br/>StorageLive(_1006)<br/>StorageLive(_1007)<br/>StorageLive(_1008)<br/>_1008 = &amp;mut (*_21)<br/></td></tr><tr><td align="left">_1007 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1008)</td></tr></table>>];
    bb438__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">438</td></tr><tr><td align="left" balign="left">_1006 = &amp;mut (*_1007)<br/>StorageDead(_1008)<br/>StorageLive(_1009)<br/>StorageLive(_1010)<br/>_1010 = &amp;_19<br/>_1009 = &amp;(*_1010)<br/>StorageLive(_1011)<br/>_1011 = &amp;(*_6)<br/>StorageLive(_1012)<br/>_1012 = &amp;(*_5)<br/>StorageLive(_1013)<br/>_1013 = &amp;mut (*_7)<br/>StorageLive(_1014)<br/>_1014 = _15<br/>StorageLive(_1015)<br/>_1015 = _16<br/>StorageLive(_1016)<br/>_1016 = _1000<br/>StorageLive(_1017)<br/>StorageLive(_1018)<br/>StorageLive(_1019)<br/>_1019 = &amp;_17<br/>_1018 = &amp;(*_1019)<br/>_1017 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::Some(move _1018)<br/>StorageDead(_1018)<br/>StorageLive(_1020)<br/>_1020 = _971<br/></td></tr><tr><td align="left">_1004 = controller::orders::cancel_order(move _1005, move _1006, move _1009, move _1011, move _1012, move _1013, move _1014, move _1015, move _1016, move _1017, move _1020, const false)</td></tr></table>>];
    bb439__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">439</td></tr><tr><td align="left" balign="left">StorageDead(_1020)<br/>StorageDead(_1017)<br/>StorageDead(_1016)<br/>StorageDead(_1015)<br/>StorageDead(_1014)<br/>StorageDead(_1013)<br/>StorageDead(_1012)<br/>StorageDead(_1011)<br/>StorageDead(_1009)<br/>StorageDead(_1006)<br/>StorageDead(_1005)<br/></td></tr><tr><td align="left">_1003 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1004)</td></tr></table>>];
    bb440__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">440</td></tr><tr><td align="left" balign="left">StorageDead(_1004)<br/>_1021 = discriminant(_1003)<br/></td></tr><tr><td align="left">switchInt(move _1021)</td></tr></table>>];
    bb441__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">441</td></tr><tr><td align="left" balign="left">StorageLive(_1025)<br/>_1025 = ((_1003 as Continue).0: ())<br/>_1002 = _1025<br/>StorageDead(_1025)<br/>StorageDead(_1019)<br/>StorageDead(_1010)<br/>StorageDead(_1007)<br/>StorageDead(_1003)<br/>StorageDead(_1002)<br/>StorageLive(_1026)<br/>_1026 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _1026)<br/>StorageDead(_1026)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb442__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">442</td></tr><tr><td align="left" balign="left">StorageLive(_1022)<br/>_1022 = ((_1003 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1024)<br/>_1024 = _1022<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1024)</td></tr></table>>];
    bb443__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">443</td></tr><tr><td align="left" balign="left">StorageDead(_1024)<br/>StorageDead(_1022)<br/>StorageDead(_1019)<br/>StorageDead(_1010)<br/>StorageDead(_1007)<br/>StorageDead(_1003)<br/>StorageDead(_1002)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb444__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">444</td></tr><tr><td align="left" balign="left">_967 = const ()<br/>StorageDead(_969)<br/>StorageDead(_968)<br/>StorageDead(_967)<br/>StorageLive(_1027)<br/>StorageLive(_1028)<br/>_1028 = _396<br/></td></tr><tr><td align="left">switchInt(move _1028)</td></tr></table>>];
    bb445__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">445</td></tr><tr><td align="left" balign="left">StorageLive(_1029)<br/>_1029 = _391<br/></td></tr><tr><td align="left">switchInt(move _1029)</td></tr></table>>];
    bb446__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">446</td></tr><tr><td align="left" balign="left">_1027 = AMMAvailability::Unavailable<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb447__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">447</td></tr><tr><td align="left" balign="left">StorageLive(_1030)<br/>_1030 = _390<br/></td></tr><tr><td align="left">switchInt(move _1030)</td></tr></table>>];
    bb448__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">448</td></tr><tr><td align="left" balign="left">_1027 = AMMAvailability::Immediate<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb449__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">449</td></tr><tr><td align="left" balign="left">_1027 = AMMAvailability::AfterMinDuration<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb450__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">450</td></tr><tr><td align="left" balign="left">StorageDead(_1030)<br/>StorageDead(_1029)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb451__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">451</td></tr><tr><td align="left" balign="left">StorageDead(_1028)<br/>StorageLive(_1033)<br/>StorageLive(_1034)<br/>StorageLive(_1035)<br/>StorageLive(_1036)<br/>StorageLive(_1037)<br/>StorageLive(_1038)<br/>_1038 = &amp;mut (*_21)<br/></td></tr><tr><td align="left">_1037 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1038)</td></tr></table>>];
    bb452__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">452</td></tr><tr><td align="left" balign="left">_1036 = &amp;mut (*_1037)<br/>StorageDead(_1038)<br/>StorageLive(_1039)<br/>_1039 = _45<br/>StorageLive(_1040)<br/>StorageLive(_1041)<br/>_1041 = &amp;_19<br/>_1040 = &amp;(*_1041)<br/>StorageLive(_1042)<br/>StorageLive(_1043)<br/>StorageLive(_1044)<br/>_1044 = &amp;mut (*_33)<br/></td></tr><tr><td align="left">_1043 = &lt;RefMut&lt;'_, UserStats&gt; as DerefMut&gt;::deref_mut(move _1044)</td></tr></table>>];
    bb453__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">453</td></tr><tr><td align="left" balign="left">_1042 = &amp;mut (*_1043)<br/>StorageDead(_1044)<br/>StorageLive(_1045)<br/>_1045 = &amp;(*_10)<br/>StorageLive(_1046)<br/>_1046 = &amp;(*_11)<br/>StorageLive(_1047)<br/>StorageLive(_1048)<br/>StorageLive(_1049)<br/>StorageLive(_1050)<br/>_1050 = &amp;_800<br/>_1049 = &amp;(*_1050)<br/></td></tr><tr><td align="left">_1048 = &lt;Vec&lt;(anchor_lang::prelude::Pubkey, usize, u64)&gt; as Deref&gt;::deref(move _1049)</td></tr></table>>];
    bb454__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">454</td></tr><tr><td align="left" balign="left">_1047 = &amp;(*_1048)<br/>StorageDead(_1049)<br/>StorageLive(_1051)<br/>StorageLive(_1052)<br/>StorageLive(_1053)<br/>StorageLive(_1054)<br/>_1054 = &amp;mut _704<br/></td></tr><tr><td align="left">_1053 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::as_deref_mut(move _1054)</td></tr></table>>];
    bb455__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">455</td></tr><tr><td align="left" balign="left">StorageDead(_1054)<br/>_1052 = &amp;mut _1053<br/>_1051 = &amp;mut (*_1052)<br/>StorageLive(_1055)<br/>StorageLive(_1056)<br/>_1056 = &amp;_17<br/>_1055 = &amp;(*_1056)<br/>StorageLive(_1057)<br/>StorageLive(_1058)<br/>StorageLive(_1059)<br/>StorageLive(_1060)<br/>_1060 = &amp;mut _705<br/></td></tr><tr><td align="left">_1059 = Option::&lt;RefMut&lt;'_, UserStats&gt;&gt;::as_deref_mut(move _1060)</td></tr></table>>];
    bb456__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">456</td></tr><tr><td align="left" balign="left">StorageDead(_1060)<br/>_1058 = &amp;mut _1059<br/>_1057 = &amp;mut (*_1058)<br/>StorageLive(_1061)<br/>_1061 = _835<br/>StorageLive(_1062)<br/>_1062 = &amp;(*_5)<br/>StorageLive(_1063)<br/>_1063 = &amp;(*_6)<br/>StorageLive(_1064)<br/>_1064 = &amp;mut (*_7)<br/>StorageLive(_1065)<br/>StorageLive(_1066)<br/>_1066 = &amp;((*_2).5: state::state::FeeStructure)<br/>_1065 = &amp;(*_1066)<br/>StorageLive(_1067)<br/>_1067 = _385<br/>StorageLive(_1068)<br/>_1068 = _665<br/>StorageLive(_1069)<br/>_1069 = _15<br/>StorageLive(_1070)<br/>_1070 = _16<br/>StorageLive(_1071)<br/>_1071 = _395<br/>StorageLive(_1072)<br/>_1072 = _1027<br/>StorageLive(_1073)<br/>_1073 = _14<br/>StorageLive(_1074)<br/>_1074 = _394<br/></td></tr><tr><td align="left">_1035 = fulfill_perp_order(move _1036, move _1039, move _1040, move _1042, move _1045, move _1046, move _1047, move _1051, move _1055, move _1057, move _1061, move _1062, move _1063, move _1064, move _1065, move _1067, move _1068, move _1069, move _1070, move _1071, move _1072, move _1073, move _1074)</td></tr></table>>];
    bb457__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">457</td></tr><tr><td align="left" balign="left">StorageDead(_1074)<br/>StorageDead(_1073)<br/>StorageDead(_1072)<br/>StorageDead(_1071)<br/>StorageDead(_1070)<br/>StorageDead(_1069)<br/>StorageDead(_1068)<br/>StorageDead(_1067)<br/>StorageDead(_1065)<br/>StorageDead(_1064)<br/>StorageDead(_1063)<br/>StorageDead(_1062)<br/>StorageDead(_1061)<br/>StorageDead(_1057)<br/>StorageDead(_1055)<br/>StorageDead(_1051)<br/>StorageDead(_1047)<br/>StorageDead(_1046)<br/>StorageDead(_1045)<br/>StorageDead(_1042)<br/>StorageDead(_1040)<br/>StorageDead(_1039)<br/>StorageDead(_1036)<br/></td></tr><tr><td align="left">_1034 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _1035)</td></tr></table>>];
    bb458__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">458</td></tr><tr><td align="left" balign="left">StorageDead(_1035)<br/>_1075 = discriminant(_1034)<br/></td></tr><tr><td align="left">switchInt(move _1075)</td></tr></table>>];
    bb459__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">459</td></tr><tr><td align="left" balign="left">StorageLive(_1079)<br/>_1079 = ((_1034 as Continue).0: (u64, u64))<br/>_1033 = _1079<br/>StorageDead(_1079)<br/>StorageLive(_1031)<br/>_1031 = (_1033.0: u64)<br/>StorageLive(_1032)<br/>_1032 = (_1033.1: u64)<br/>StorageDead(_1066)<br/>StorageDead(_1059)<br/>StorageDead(_1058)<br/>StorageDead(_1056)<br/>StorageDead(_1053)<br/>StorageDead(_1052)<br/>StorageDead(_1050)<br/>StorageDead(_1048)<br/>StorageDead(_1043)<br/>StorageDead(_1041)<br/>StorageDead(_1037)<br/>StorageDead(_1034)<br/>StorageDead(_1033)<br/>StorageLive(_1080)<br/>StorageLive(_1081)<br/>StorageLive(_1082)<br/>_1082 = _1031<br/>_1081 = Ne(move _1082, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _1081)</td></tr></table>>];
    bb460__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">460</td></tr><tr><td align="left" balign="left">StorageLive(_1076)<br/>_1076 = ((_1034 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1078)<br/>_1078 = _1076<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1078)</td></tr></table>>];
    bb461__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">461</td></tr><tr><td align="left" balign="left">StorageDead(_1078)<br/>StorageDead(_1076)<br/>StorageDead(_1066)<br/>StorageDead(_1059)<br/>StorageDead(_1058)<br/>StorageDead(_1056)<br/>StorageDead(_1053)<br/>StorageDead(_1052)<br/>StorageDead(_1050)<br/>StorageDead(_1048)<br/>StorageDead(_1043)<br/>StorageDead(_1041)<br/>StorageDead(_1037)<br/>StorageDead(_1034)<br/>StorageDead(_1033)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb462__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">462</td></tr><tr><td align="left" balign="left">StorageDead(_1082)<br/>StorageLive(_1083)<br/>StorageLive(_1084)<br/>StorageLive(_1085)<br/>StorageLive(_1086)<br/>_1086 = _1032<br/>StorageLive(_1087)<br/>_1087 = _1031<br/></td></tr><tr><td align="left">_1085 = math::orders::calculate_fill_price(move _1086, move _1087, const _)</td></tr></table>>];
    bb463__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">463</td></tr><tr><td align="left" balign="left">StorageDead(_1082)<br/>_1080 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb464__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">464</td></tr><tr><td align="left" balign="left">StorageDead(_1087)<br/>StorageDead(_1086)<br/></td></tr><tr><td align="left">_1084 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1085)</td></tr></table>>];
    bb465__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">465</td></tr><tr><td align="left" balign="left">StorageDead(_1085)<br/>_1088 = discriminant(_1084)<br/></td></tr><tr><td align="left">switchInt(move _1088)</td></tr></table>>];
    bb466__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">466</td></tr><tr><td align="left" balign="left">StorageLive(_1092)<br/>_1092 = ((_1084 as Continue).0: u64)<br/>_1083 = _1092<br/>StorageDead(_1092)<br/>StorageDead(_1084)<br/>StorageLive(_1093)<br/>StorageLive(_1094)<br/>StorageLive(_1095)<br/>StorageLive(_1096)<br/>_1096 = &amp;(*_6)<br/>StorageLive(_1097)<br/>StorageLive(_1098)<br/>_1098 = &amp;_64<br/>_1097 = &amp;(*_1098)<br/></td></tr><tr><td align="left">_1095 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _1096, move _1097)</td></tr></table>>];
    bb467__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">467</td></tr><tr><td align="left" balign="left">StorageLive(_1089)<br/>_1089 = ((_1084 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1091)<br/>_1091 = _1089<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1091)</td></tr></table>>];
    bb468__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">468</td></tr><tr><td align="left" balign="left">StorageDead(_1091)<br/>StorageDead(_1089)<br/>StorageDead(_1084)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb469__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">469</td></tr><tr><td align="left" balign="left">StorageDead(_1097)<br/>StorageDead(_1096)<br/></td></tr><tr><td align="left">_1094 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1095)</td></tr></table>>];
    bb470__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">470</td></tr><tr><td align="left" balign="left">StorageDead(_1095)<br/>_1099 = discriminant(_1094)<br/></td></tr><tr><td align="left">switchInt(move _1099)</td></tr></table>>];
    bb471__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">471</td></tr><tr><td align="left" balign="left">StorageLive(_1103)<br/>_1103 = move ((_1094 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1093 = move _1103<br/>StorageDead(_1103)<br/>_1419 = discriminant(_1094)<br/>StorageDead(_1098)<br/>StorageDead(_1094)<br/>StorageLive(_1104)<br/>StorageLive(_1105)<br/>StorageLive(_1106)<br/>StorageLive(_1107)<br/>_1107 = _1083<br/>StorageLive(_1108)<br/>_1108 = _387<br/>StorageLive(_1109)<br/>_1109 = _388<br/>StorageLive(_1110)<br/>StorageLive(_1111)<br/>StorageLive(_1112)<br/>_1112 = &amp;_1093<br/></td></tr><tr><td align="left">_1111 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1112)</td></tr></table>>];
    bb472__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">472</td></tr><tr><td align="left" balign="left">StorageLive(_1100)<br/>_1100 = ((_1094 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1102)<br/>_1102 = _1100<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1102)</td></tr></table>>];
    bb473__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">473</td></tr><tr><td align="left" balign="left">StorageDead(_1102)<br/>StorageDead(_1100)<br/>_1417 = discriminant(_1094)<br/>StorageDead(_1098)<br/>StorageDead(_1094)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb474__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">474</td></tr><tr><td align="left" balign="left">StorageDead(_1112)<br/>_1110 = ((*_1111).15: u32)<br/>StorageLive(_1113)<br/>StorageLive(_1114)<br/>_1114 = &amp;((*_2).7: state::state::OracleGuardRails)<br/></td></tr><tr><td align="left">_1113 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _1114)</td></tr></table>>];
    bb475__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">475</td></tr><tr><td align="left" balign="left">StorageDead(_1114)<br/>StorageLive(_1115)<br/>StorageLive(_1116)<br/>StorageLive(_1117)<br/>StorageLive(_1118)<br/>_1118 = &amp;_1093<br/></td></tr><tr><td align="left">_1117 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1118)</td></tr></table>>];
    bb476__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">476</td></tr><tr><td align="left" balign="left">_1116 = &amp;(*_1117)<br/>StorageDead(_1118)<br/></td></tr><tr><td align="left">_1115 = PerpMarket::is_prediction_market(move _1116)</td></tr></table>>];
    bb477__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">477</td></tr><tr><td align="left" balign="left">StorageDead(_1116)<br/>StorageLive(_1119)<br/>_1119 = Option::&lt;controller::position::PositionDirection&gt;::None<br/></td></tr><tr><td align="left">_1106 = math::orders::validate_fill_price_within_price_bands(move _1107, move _1108, move _1109, move _1110, move _1113, move _1115, move _1119)</td></tr></table>>];
    bb478__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">478</td></tr><tr><td align="left" balign="left">StorageDead(_1119)<br/>StorageDead(_1115)<br/>StorageDead(_1113)<br/>StorageDead(_1110)<br/>StorageDead(_1109)<br/>StorageDead(_1108)<br/>StorageDead(_1107)<br/></td></tr><tr><td align="left">_1105 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1106)</td></tr></table>>];
    bb479__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">479</td></tr><tr><td align="left" balign="left">StorageDead(_1106)<br/>_1120 = discriminant(_1105)<br/></td></tr><tr><td align="left">switchInt(move _1120)</td></tr></table>>];
    bb480__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">480</td></tr><tr><td align="left" balign="left">StorageLive(_1124)<br/>_1124 = ((_1105 as Continue).0: ())<br/>_1104 = _1124<br/>StorageDead(_1124)<br/>StorageDead(_1117)<br/>StorageDead(_1111)<br/>StorageDead(_1105)<br/>StorageDead(_1104)<br/>StorageLive(_1125)<br/>_1125 = _1083<br/>StorageLive(_1126)<br/>StorageLive(_1127)<br/>_1127 = &amp;mut _1093<br/></td></tr><tr><td align="left">_1126 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _1127)</td></tr></table>>];
    bb481__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">481</td></tr><tr><td align="left" balign="left">StorageLive(_1121)<br/>_1121 = ((_1105 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1123)<br/>_1123 = _1121<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1123)</td></tr></table>>];
    bb482__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">482</td></tr><tr><td align="left" balign="left">StorageDead(_1123)<br/>StorageDead(_1121)<br/>StorageDead(_1117)<br/>StorageDead(_1111)<br/>StorageDead(_1105)<br/>StorageDead(_1104)<br/></td></tr><tr><td align="left">drop(_1093)</td></tr></table>>];
    bb483__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">483</td></tr><tr><td align="left" balign="left">StorageDead(_1127)<br/>((*_1126).37: u64) = move _1125<br/>StorageDead(_1125)<br/>StorageDead(_1126)<br/>_1080 = const ()<br/></td></tr><tr><td align="left">drop(_1093)</td></tr></table>>];
    bb484__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">484</td></tr><tr><td align="left" balign="left">StorageDead(_1093)<br/>StorageDead(_1083)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb485__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">485</td></tr><tr><td align="left" balign="left">StorageDead(_1081)<br/>StorageDead(_1080)<br/>StorageLive(_1128)<br/>StorageLive(_1129)<br/>StorageLive(_1130)<br/>_1130 = &amp;(*_21)<br/></td></tr><tr><td align="left">_1129 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _1130)</td></tr></table>>];
    bb486__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">486</td></tr><tr><td align="left" balign="left">StorageDead(_1130)<br/>StorageLive(_1131)<br/>_1131 = _913<br/>_1132 = Len(((*_1129).4: [state::user::PerpPosition; 8]))<br/>_1133 = Lt(_1131, _1132)<br/></td></tr><tr><td align="left">assert(move _1133, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1132, _1131)</td></tr></table>>];
    bb487__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">487</td></tr><tr><td align="left" balign="left">_1128 = (((*_1129).4: [state::user::PerpPosition; 8])[_1131].1: i64)<br/>StorageDead(_1131)<br/>StorageDead(_1129)<br/>StorageLive(_1134)<br/>StorageLive(_1135)<br/>StorageLive(_1136)<br/>StorageLive(_1137)<br/>StorageLive(_1138)<br/>StorageLive(_1139)<br/>StorageLive(_1140)<br/>_1140 = &amp;(*_21)<br/></td></tr><tr><td align="left">_1139 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _1140)</td></tr></table>>];
    bb488__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">488</td></tr><tr><td align="left" balign="left">StorageDead(_1140)<br/>StorageLive(_1141)<br/>_1141 = _45<br/>_1142 = Len(((*_1139).5: [state::user::Order; 32]))<br/>_1143 = Lt(_1141, _1142)<br/></td></tr><tr><td align="left">assert(move _1143, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1142, _1141)</td></tr></table>>];
    bb489__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">489</td></tr><tr><td align="left" balign="left">_1138 = &amp;((*_1139).5: [state::user::Order; 32])[_1141]<br/>_1137 = &amp;(*_1138)<br/>StorageLive(_1144)<br/>_1144 = _1128<br/>StorageLive(_1145)<br/>StorageLive(_1146)<br/>StorageLive(_1147)<br/>StorageLive(_1148)<br/>StorageLive(_1149)<br/>StorageLive(_1150)<br/>StorageLive(_1151)<br/>_1151 = &amp;(*_6)<br/>StorageLive(_1152)<br/>StorageLive(_1153)<br/>_1153 = &amp;_64<br/>_1152 = &amp;(*_1153)<br/></td></tr><tr><td align="left">_1150 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _1151, move _1152)</td></tr></table>>];
    bb490__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">490</td></tr><tr><td align="left" balign="left">StorageDead(_1152)<br/>StorageDead(_1151)<br/></td></tr><tr><td align="left">_1149 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1150)</td></tr></table>>];
    bb491__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">491</td></tr><tr><td align="left" balign="left">_1375 = const true<br/>StorageDead(_1150)<br/>_1154 = discriminant(_1149)<br/></td></tr><tr><td align="left">switchInt(move _1154)</td></tr></table>>];
    bb492__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">492</td></tr><tr><td align="left" balign="left">StorageLive(_1158)<br/>_1158 = move ((_1149 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1148 = move _1158<br/>StorageDead(_1158)<br/>_1147 = &amp;_1148<br/></td></tr><tr><td align="left">_1146 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1147)</td></tr></table>>];
    bb493__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">493</td></tr><tr><td align="left" balign="left">StorageLive(_1155)<br/>_1155 = ((_1149 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1157)<br/>_1157 = _1155<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1157)</td></tr></table>>];
    bb494__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">494</td></tr><tr><td align="left" balign="left">StorageDead(_1157)<br/>StorageDead(_1155)<br/>StorageDead(_1147)<br/>StorageDead(_1145)<br/>StorageDead(_1144)<br/>StorageDead(_1137)<br/>StorageDead(_1136)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb495__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">495</td></tr><tr><td align="left" balign="left">StorageDead(_1147)<br/>_1145 = (((*_1146).1: state::perp_market::AMM).52: u64)<br/></td></tr><tr><td align="left">_1136 = math::orders::should_cancel_reduce_only_order(move _1137, move _1144, move _1145)</td></tr></table>>];
    bb496__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">496</td></tr><tr><td align="left" balign="left">StorageDead(_1145)<br/>StorageDead(_1144)<br/>StorageDead(_1137)<br/></td></tr><tr><td align="left">_1135 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _1136)</td></tr></table>>];
    bb497__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">497</td></tr><tr><td align="left" balign="left">StorageDead(_1136)<br/>_1159 = discriminant(_1135)<br/></td></tr><tr><td align="left">switchInt(move _1159)</td></tr></table>>];
    bb498__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">498</td></tr><tr><td align="left" balign="left">StorageLive(_1163)<br/>_1163 = ((_1135 as Continue).0: bool)<br/>_1134 = _1163<br/>StorageDead(_1163)<br/></td></tr><tr><td align="left">drop(_1148)</td></tr></table>>];
    bb499__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">499</td></tr><tr><td align="left" balign="left">StorageLive(_1160)<br/>_1160 = ((_1135 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1162)<br/>_1162 = _1160<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1162)</td></tr></table>>];
    bb500__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">500</td></tr><tr><td align="left" balign="left">StorageDead(_1162)<br/>StorageDead(_1160)<br/></td></tr><tr><td align="left">drop(_1148)</td></tr></table>>];
    bb501__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">501</td></tr><tr><td align="left" balign="left">StorageLive(_1166)<br/>StorageLive(_1167)<br/>StorageLive(_1168)<br/>StorageLive(_1169)<br/>StorageLive(_1170)<br/>_1170 = &amp;(*_6)<br/>StorageLive(_1171)<br/>StorageLive(_1172)<br/>_1172 = &amp;_64<br/>_1171 = &amp;(*_1172)<br/></td></tr><tr><td align="left">_1169 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _1170, move _1171)</td></tr></table>>];
    bb502__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">502</td></tr><tr><td align="left" balign="left">StorageDead(_1171)<br/>StorageDead(_1170)<br/></td></tr><tr><td align="left">_1168 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1169)</td></tr></table>>];
    bb503__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">503</td></tr><tr><td align="left" balign="left">StorageDead(_1169)<br/>_1173 = discriminant(_1168)<br/></td></tr><tr><td align="left">switchInt(move _1173)</td></tr></table>>];
    bb504__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">504</td></tr><tr><td align="left" balign="left">StorageLive(_1177)<br/>_1177 = move ((_1168 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1167 = move _1177<br/>StorageDead(_1177)<br/>_1425 = discriminant(_1168)<br/>StorageDead(_1172)<br/>StorageDead(_1168)<br/>StorageLive(_1178)<br/>StorageLive(_1179)<br/>StorageLive(_1180)<br/>StorageLive(_1181)<br/>StorageLive(_1182)<br/>_1182 = &amp;mut (*_21)<br/></td></tr><tr><td align="left">_1181 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1182)</td></tr></table>>];
    bb505__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">505</td></tr><tr><td align="left" balign="left">StorageLive(_1174)<br/>_1174 = ((_1168 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1176)<br/>_1176 = _1174<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1176)</td></tr></table>>];
    bb506__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">506</td></tr><tr><td align="left" balign="left">StorageDead(_1176)<br/>StorageDead(_1174)<br/>_1423 = discriminant(_1168)<br/>StorageDead(_1172)<br/>StorageDead(_1168)<br/>StorageDead(_1167)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb507__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">507</td></tr><tr><td align="left" balign="left">_1180 = &amp;mut (*_1181)<br/>StorageDead(_1182)<br/>StorageLive(_1183)<br/>StorageLive(_1184)<br/>_1184 = &amp;mut _704<br/></td></tr><tr><td align="left">_1183 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::as_deref_mut(move _1184)</td></tr></table>>];
    bb508__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">508</td></tr><tr><td align="left" balign="left">StorageDead(_1184)<br/>StorageLive(_1185)<br/>StorageLive(_1186)<br/>StorageLive(_1187)<br/>_1187 = &amp;mut _1167<br/></td></tr><tr><td align="left">_1186 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _1187)</td></tr></table>>];
    bb509__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">509</td></tr><tr><td align="left" balign="left">_1185 = &amp;mut (*_1186)<br/>StorageDead(_1187)<br/>StorageLive(_1188)<br/>_1188 = (((*_2).5: state::state::FeeStructure).3: u64)<br/>StorageLive(_1189)<br/>_1189 = _16<br/></td></tr><tr><td align="left">_1179 = pay_keeper_flat_reward_for_perps(move _1180, move _1183, move _1185, move _1188, move _1189)</td></tr></table>>];
    bb510__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">510</td></tr><tr><td align="left" balign="left">StorageDead(_1189)<br/>StorageDead(_1188)<br/>StorageDead(_1185)<br/>StorageDead(_1183)<br/>StorageDead(_1180)<br/></td></tr><tr><td align="left">_1178 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1179)</td></tr></table>>];
    bb511__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">511</td></tr><tr><td align="left" balign="left">StorageDead(_1179)<br/>_1190 = discriminant(_1178)<br/></td></tr><tr><td align="left">switchInt(move _1190)</td></tr></table>>];
    bb512__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">512</td></tr><tr><td align="left" balign="left">StorageLive(_1194)<br/>_1194 = ((_1178 as Continue).0: u64)<br/>_1166 = _1194<br/>StorageDead(_1194)<br/></td></tr><tr><td align="left">drop(_1167)</td></tr></table>>];
    bb513__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">513</td></tr><tr><td align="left" balign="left">StorageLive(_1191)<br/>_1191 = ((_1178 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1193)<br/>_1193 = _1191<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1193)</td></tr></table>>];
    bb514__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">514</td></tr><tr><td align="left" balign="left">StorageDead(_1193)<br/>StorageDead(_1191)<br/></td></tr><tr><td align="left">drop(_1167)</td></tr></table>>];
    bb515__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">515</td></tr><tr><td align="left" balign="left">StorageDead(_1167)<br/>StorageDead(_1186)<br/>StorageDead(_1181)<br/>StorageDead(_1178)<br/>StorageLive(_1195)<br/>_1195 = OrderActionExplanation::ReduceOnlyOrderIncreasedPosition<br/>StorageLive(_1196)<br/>StorageLive(_1197)<br/>StorageLive(_1198)<br/>_1198 = _45<br/>StorageLive(_1199)<br/>StorageLive(_1200)<br/>StorageLive(_1201)<br/>_1201 = &amp;mut (*_21)<br/></td></tr><tr><td align="left">_1200 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1201)</td></tr></table>>];
    bb516__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">516</td></tr><tr><td align="left" balign="left">_1199 = &amp;mut (*_1200)<br/>StorageDead(_1201)<br/>StorageLive(_1202)<br/>StorageLive(_1203)<br/>_1203 = &amp;_19<br/>_1202 = &amp;(*_1203)<br/>StorageLive(_1204)<br/>_1204 = &amp;(*_6)<br/>StorageLive(_1205)<br/>_1205 = &amp;(*_5)<br/>StorageLive(_1206)<br/>_1206 = &amp;mut (*_7)<br/>StorageLive(_1207)<br/>_1207 = _15<br/>StorageLive(_1208)<br/>_1208 = _16<br/>StorageLive(_1209)<br/>_1209 = _1195<br/>StorageLive(_1210)<br/>StorageLive(_1211)<br/>StorageLive(_1212)<br/>_1212 = &amp;_17<br/>_1211 = &amp;(*_1212)<br/>_1210 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::Some(move _1211)<br/>StorageDead(_1211)<br/>StorageLive(_1213)<br/>_1213 = _1166<br/></td></tr><tr><td align="left">_1197 = controller::orders::cancel_order(move _1198, move _1199, move _1202, move _1204, move _1205, move _1206, move _1207, move _1208, move _1209, move _1210, move _1213, const false)</td></tr></table>>];
    bb517__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">517</td></tr><tr><td align="left" balign="left">StorageDead(_1213)<br/>StorageDead(_1210)<br/>StorageDead(_1209)<br/>StorageDead(_1208)<br/>StorageDead(_1207)<br/>StorageDead(_1206)<br/>StorageDead(_1205)<br/>StorageDead(_1204)<br/>StorageDead(_1202)<br/>StorageDead(_1199)<br/>StorageDead(_1198)<br/></td></tr><tr><td align="left">_1196 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1197)</td></tr></table>>];
    bb518__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">518</td></tr><tr><td align="left" balign="left">StorageDead(_1197)<br/>_1214 = discriminant(_1196)<br/></td></tr><tr><td align="left">switchInt(move _1214)</td></tr></table>>];
    bb519__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">519</td></tr><tr><td align="left" balign="left">StorageLive(_1218)<br/>_1218 = ((_1196 as Continue).0: ())<br/>_1164 = _1218<br/>StorageDead(_1218)<br/>StorageDead(_1195)<br/>StorageDead(_1166)<br/>StorageDead(_1212)<br/>StorageDead(_1203)<br/>StorageDead(_1200)<br/>StorageDead(_1196)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb520__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">520</td></tr><tr><td align="left" balign="left">StorageLive(_1215)<br/>_1215 = ((_1196 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1217)<br/>_1217 = _1215<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1217)</td></tr></table>>];
    bb521__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">521</td></tr><tr><td align="left" balign="left">StorageDead(_1217)<br/>StorageDead(_1215)<br/>StorageDead(_1195)<br/>StorageDead(_1166)<br/>StorageDead(_1212)<br/>StorageDead(_1203)<br/>StorageDead(_1200)<br/>StorageDead(_1196)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb522__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">522</td></tr><tr><td align="left" balign="left">_1164 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb523__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">523</td></tr><tr><td align="left" balign="left">StorageDead(_1165)<br/>StorageDead(_1164)<br/>StorageLive(_1219)<br/>StorageLive(_1220)<br/>StorageLive(_1221)<br/>_1221 = _1031<br/>_1220 = Eq(move _1221, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _1220)</td></tr></table>>];
    bb524__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">524</td></tr><tr><td align="left" balign="left">StorageDead(_1221)<br/>StorageLive(_1223)<br/>StorageLive(_1224)<br/>_1224 = _1031<br/>StorageLive(_1225)<br/>_1225 = _1032<br/>_1223 = (move _1224, move _1225)<br/>StorageDead(_1225)<br/>StorageDead(_1224)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _1223)<br/>StorageDead(_1223)<br/>StorageDead(_1220)<br/>StorageDead(_1219)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb525__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">525</td></tr><tr><td align="left" balign="left">StorageDead(_1221)<br/>_1219 = const ()<br/>StorageDead(_1220)<br/>StorageDead(_1219)<br/>StorageLive(_1226)<br/>StorageLive(_1227)<br/>StorageLive(_1228)<br/>StorageLive(_1229)<br/>StorageLive(_1230)<br/>_1230 = &amp;(*_6)<br/>StorageLive(_1231)<br/>StorageLive(_1232)<br/>_1232 = &amp;_64<br/>_1231 = &amp;(*_1232)<br/></td></tr><tr><td align="left">_1229 = PerpMarketMap::&lt;'_&gt;::get_ref(move _1230, move _1231)</td></tr></table>>];
    bb526__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">526</td></tr><tr><td align="left" balign="left">StorageDead(_1231)<br/>StorageDead(_1230)<br/></td></tr><tr><td align="left">_1228 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1229)</td></tr></table>>];
    bb527__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">527</td></tr><tr><td align="left" balign="left">StorageDead(_1229)<br/>_1233 = discriminant(_1228)<br/></td></tr><tr><td align="left">switchInt(move _1233)</td></tr></table>>];
    bb528__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">528</td></tr><tr><td align="left" balign="left">StorageLive(_1237)<br/>_1237 = move ((_1228 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1227 = move _1237<br/>StorageDead(_1237)<br/>_1429 = discriminant(_1228)<br/>StorageDead(_1232)<br/>StorageDead(_1228)<br/>StorageLive(_1238)<br/>StorageLive(_1239)<br/>StorageLive(_1240)<br/>StorageLive(_1241)<br/>_1241 = &amp;_1227<br/></td></tr><tr><td align="left">_1240 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1241)</td></tr></table>>];
    bb529__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">529</td></tr><tr><td align="left" balign="left">StorageLive(_1234)<br/>_1234 = ((_1228 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1236)<br/>_1236 = _1234<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1236)</td></tr></table>>];
    bb530__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">530</td></tr><tr><td align="left" balign="left">StorageDead(_1236)<br/>StorageDead(_1234)<br/>_1427 = discriminant(_1228)<br/>StorageDead(_1232)<br/>StorageDead(_1228)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb531__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">531</td></tr><tr><td align="left" balign="left">_1239 = &amp;(*_1240)<br/>StorageDead(_1241)<br/></td></tr><tr><td align="left">_1238 = PerpMarket::get_open_interest(move _1239)</td></tr></table>>];
    bb532__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">532</td></tr><tr><td align="left" balign="left">StorageDead(_1239)<br/>StorageDead(_1240)<br/>StorageLive(_1242)<br/>StorageLive(_1243)<br/>StorageLive(_1244)<br/>_1244 = &amp;_1227<br/></td></tr><tr><td align="left">_1243 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1244)</td></tr></table>>];
    bb533__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">533</td></tr><tr><td align="left" balign="left">StorageDead(_1244)<br/>_1242 = (((*_1243).1: state::perp_market::AMM).17: u128)<br/>StorageDead(_1243)<br/>StorageLive(_1245)<br/>StorageLive(_1246)<br/>StorageLive(_1247)<br/>StorageLive(_1248)<br/>StorageLive(_1249)<br/>_1249 = _1242<br/>_1248 = Eq(move _1249, const 0_u128)<br/></td></tr><tr><td align="left">switchInt(move _1248)</td></tr></table>>];
    bb534__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">534</td></tr><tr><td align="left" balign="left">StorageDead(_1249)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb535__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">535</td></tr><tr><td align="left" balign="left">StorageDead(_1249)<br/>StorageLive(_1250)<br/>StorageLive(_1251)<br/>_1251 = _1242<br/>StorageLive(_1252)<br/>_1252 = _1238<br/>_1250 = Gt(move _1251, move _1252)<br/></td></tr><tr><td align="left">switchInt(move _1250)</td></tr></table>>];
    bb536__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">536</td></tr><tr><td align="left" balign="left">StorageDead(_1252)<br/>StorageDead(_1251)<br/>StorageLive(_1253)<br/>_1253 = ()<br/>_1247 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _1253)<br/>StorageDead(_1253)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb537__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">537</td></tr><tr><td align="left" balign="left">StorageDead(_1252)<br/>StorageDead(_1251)<br/>StorageLive(_1254)<br/>_1254 = error::ErrorCode::MaxOpenInterest<br/>StorageLive(_1255)<br/>StorageLive(_1256)<br/>StorageLive(_1257)<br/>StorageLive(_1258)<br/>StorageLive(_1259)<br/>StorageLive(_1260)<br/>StorageLive(_1261)<br/>StorageLive(_1262)<br/>StorageLive(_1263)<br/>StorageLive(_1264)<br/>StorageLive(_1265)<br/>_1358 = const _<br/>_1265 = &amp;(*_1358)<br/>_1264 = &amp;(*_1265)<br/>_1263 = move _1264 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_1264)<br/>StorageLive(_1267)<br/>StorageLive(_1268)<br/>StorageLive(_1269)<br/>StorageLive(_1270)<br/>StorageLive(_1271)<br/>StorageLive(_1272)<br/>StorageLive(_1273)<br/>_1273 = &amp;_1254<br/>_1272 = &amp;(*_1273)<br/></td></tr><tr><td align="left">_1271 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _1272)</td></tr></table>>];
    bb538__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">538</td></tr><tr><td align="left" balign="left">StorageDead(_1272)<br/>_1270 = [move _1271]<br/>StorageDead(_1271)<br/>_1269 = &amp;_1270<br/>_1268 = &amp;(*_1269)<br/>_1267 = move _1268 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_1268)<br/></td></tr><tr><td align="left">_1262 = Arguments::&lt;'_&gt;::new_v1(move _1263, move _1267)</td></tr></table>>];
    bb539__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">539</td></tr><tr><td align="left" balign="left">StorageDead(_1267)<br/>StorageDead(_1263)<br/></td></tr><tr><td align="left">_1261 = format(move _1262)</td></tr></table>>];
    bb540__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">540</td></tr><tr><td align="left" balign="left">StorageDead(_1262)<br/>StorageDead(_1273)<br/>StorageDead(_1270)<br/>StorageDead(_1269)<br/>StorageDead(_1265)<br/>_1260 = move _1261<br/>StorageDead(_1261)<br/>_1259 = &amp;_1260<br/>_1258 = &amp;(*_1259)<br/></td></tr><tr><td align="left">_1257 = &lt;String as Deref&gt;::deref(move _1258)</td></tr></table>>];
    bb541__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">541</td></tr><tr><td align="left" balign="left">_1256 = &amp;(*_1257)<br/>StorageDead(_1258)<br/></td></tr><tr><td align="left">_1255 = solana_program::log::sol_log(move _1256)</td></tr></table>>];
    bb542__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">542</td></tr><tr><td align="left" balign="left">StorageDead(_1256)<br/></td></tr><tr><td align="left">drop(_1260)</td></tr></table>>];
    bb543__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">543</td></tr><tr><td align="left" balign="left">StorageDead(_1260)<br/>StorageDead(_1259)<br/>StorageDead(_1257)<br/>StorageDead(_1255)<br/>StorageLive(_1274)<br/>StorageLive(_1275)<br/>StorageLive(_1276)<br/>StorageLive(_1277)<br/>StorageLive(_1278)<br/>StorageLive(_1279)<br/>StorageLive(_1280)<br/>StorageLive(_1281)<br/>StorageLive(_1282)<br/>StorageLive(_1283)<br/>StorageLive(_1284)<br/>_1357 = const _<br/>_1284 = &amp;(*_1357)<br/>_1283 = &amp;(*_1284)<br/>_1282 = move _1283 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_1283)<br/>StorageLive(_1286)<br/>StorageLive(_1287)<br/>StorageLive(_1288)<br/>StorageLive(_1289)<br/>StorageLive(_1290)<br/>StorageLive(_1291)<br/>StorageLive(_1292)<br/>_1292 = &amp;_1238<br/>_1291 = &amp;(*_1292)<br/></td></tr><tr><td align="left">_1290 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u128&gt;(move _1291)</td></tr></table>>];
    bb544__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">544</td></tr><tr><td align="left" balign="left">StorageDead(_1291)<br/>StorageLive(_1293)<br/>StorageLive(_1294)<br/>StorageLive(_1295)<br/>_1295 = &amp;_1242<br/>_1294 = &amp;(*_1295)<br/></td></tr><tr><td align="left">_1293 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u128&gt;(move _1294)</td></tr></table>>];
    bb545__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">545</td></tr><tr><td align="left" balign="left">StorageDead(_1294)<br/>_1289 = [move _1290, move _1293]<br/>StorageDead(_1293)<br/>StorageDead(_1290)<br/>_1288 = &amp;_1289<br/>_1287 = &amp;(*_1288)<br/>_1286 = move _1287 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_1287)<br/></td></tr><tr><td align="left">_1281 = Arguments::&lt;'_&gt;::new_v1(move _1282, move _1286)</td></tr></table>>];
    bb546__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">546</td></tr><tr><td align="left" balign="left">StorageDead(_1286)<br/>StorageDead(_1282)<br/></td></tr><tr><td align="left">_1280 = format(move _1281)</td></tr></table>>];
    bb547__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">547</td></tr><tr><td align="left" balign="left">StorageDead(_1281)<br/>StorageDead(_1295)<br/>StorageDead(_1292)<br/>StorageDead(_1289)<br/>StorageDead(_1288)<br/>StorageDead(_1284)<br/>_1279 = move _1280<br/>StorageDead(_1280)<br/>_1278 = &amp;_1279<br/>_1277 = &amp;(*_1278)<br/></td></tr><tr><td align="left">_1276 = &lt;String as Deref&gt;::deref(move _1277)</td></tr></table>>];
    bb548__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">548</td></tr><tr><td align="left" balign="left">_1275 = &amp;(*_1276)<br/>StorageDead(_1277)<br/></td></tr><tr><td align="left">_1274 = solana_program::log::sol_log(move _1275)</td></tr></table>>];
    bb549__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">549</td></tr><tr><td align="left" balign="left">StorageDead(_1275)<br/></td></tr><tr><td align="left">drop(_1279)</td></tr></table>>];
    bb550__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">550</td></tr><tr><td align="left" balign="left">StorageDead(_1279)<br/>StorageDead(_1278)<br/>StorageDead(_1276)<br/>StorageDead(_1274)<br/>StorageLive(_1296)<br/>_1296 = _1254<br/>_1247 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _1296)<br/>StorageDead(_1296)<br/>StorageDead(_1254)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb551__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">551</td></tr><tr><td align="left" balign="left">StorageDead(_1250)<br/>StorageDead(_1248)<br/></td></tr><tr><td align="left">_1246 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1247)</td></tr></table>>];
    bb552__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">552</td></tr><tr><td align="left" balign="left">StorageDead(_1247)<br/>_1297 = discriminant(_1246)<br/></td></tr><tr><td align="left">switchInt(move _1297)</td></tr></table>>];
    bb553__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">553</td></tr><tr><td align="left" balign="left">StorageLive(_1301)<br/>_1301 = ((_1246 as Continue).0: ())<br/>_1245 = _1301<br/>StorageDead(_1301)<br/>StorageDead(_1246)<br/>StorageDead(_1245)<br/>_1226 = const ()<br/>StorageDead(_1242)<br/>StorageDead(_1238)<br/></td></tr><tr><td align="left">drop(_1227)</td></tr></table>>];
    bb554__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">554</td></tr><tr><td align="left" balign="left">StorageLive(_1298)<br/>_1298 = ((_1246 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1300)<br/>_1300 = _1298<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1300)</td></tr></table>>];
    bb555__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">555</td></tr><tr><td align="left" balign="left">StorageDead(_1300)<br/>StorageDead(_1298)<br/>StorageDead(_1246)<br/>StorageDead(_1245)<br/>StorageDead(_1242)<br/>StorageDead(_1238)<br/></td></tr><tr><td align="left">drop(_1227)</td></tr></table>>];
    bb556__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">556</td></tr><tr><td align="left" balign="left">StorageDead(_1227)<br/>StorageDead(_1226)<br/>StorageLive(_1302)<br/>StorageLive(_1303)<br/>StorageLive(_1304)<br/>StorageLive(_1305)<br/>StorageLive(_1306)<br/>StorageLive(_1307)<br/>_1307 = &amp;(*_6)<br/>StorageLive(_1308)<br/>StorageLive(_1309)<br/>_1309 = &amp;_64<br/>_1308 = &amp;(*_1309)<br/></td></tr><tr><td align="left">_1306 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _1307, move _1308)</td></tr></table>>];
    bb557__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">557</td></tr><tr><td align="left" balign="left">StorageDead(_1308)<br/>StorageDead(_1307)<br/></td></tr><tr><td align="left">_1305 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1306)</td></tr></table>>];
    bb558__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">558</td></tr><tr><td align="left" balign="left">StorageDead(_1306)<br/>_1310 = discriminant(_1305)<br/></td></tr><tr><td align="left">switchInt(move _1310)</td></tr></table>>];
    bb559__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">559</td></tr><tr><td align="left" balign="left">StorageLive(_1314)<br/>_1314 = move ((_1305 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1304 = move _1314<br/>StorageDead(_1314)<br/>_1303 = &amp;mut _1304<br/>_1433 = discriminant(_1305)<br/>StorageDead(_1309)<br/>StorageDead(_1305)<br/>StorageLive(_1315)<br/>StorageLive(_1316)<br/>StorageLive(_1317)<br/>StorageLive(_1318)<br/>StorageLive(_1319)<br/>_1319 = &amp;(*_2)<br/></td></tr><tr><td align="left">_1318 = state::state::State::funding_paused(move _1319)</td></tr></table>>];
    bb560__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">560</td></tr><tr><td align="left" balign="left">StorageLive(_1311)<br/>_1311 = ((_1305 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1313)<br/>_1313 = _1311<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1313)</td></tr></table>>];
    bb561__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">561</td></tr><tr><td align="left" balign="left">StorageDead(_1313)<br/>StorageDead(_1311)<br/>_1431 = discriminant(_1305)<br/>StorageDead(_1309)<br/>StorageDead(_1305)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb562__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">562</td></tr><tr><td align="left" balign="left">StorageDead(_1319)<br/></td></tr><tr><td align="left">_1317 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _1318)</td></tr></table>>];
    bb563__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">563</td></tr><tr><td align="left" balign="left">StorageDead(_1318)<br/>_1320 = discriminant(_1317)<br/></td></tr><tr><td align="left">switchInt(move _1320)</td></tr></table>>];
    bb564__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">564</td></tr><tr><td align="left" balign="left">StorageLive(_1324)<br/>_1324 = ((_1317 as Continue).0: bool)<br/>_1316 = _1324<br/>StorageDead(_1324)<br/></td></tr><tr><td align="left">switchInt(move _1316)</td></tr></table>>];
    bb565__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">565</td></tr><tr><td align="left" balign="left">StorageLive(_1321)<br/>_1321 = ((_1317 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1323)<br/>_1323 = _1321<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1323)</td></tr></table>>];
    bb566__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">566</td></tr><tr><td align="left" balign="left">StorageDead(_1323)<br/>StorageDead(_1321)<br/>StorageDead(_1317)<br/>StorageDead(_1316)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb567__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">567</td></tr><tr><td align="left" balign="left">StorageDead(_1317)<br/>_1315 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb568__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">568</td></tr><tr><td align="left" balign="left">StorageDead(_1317)<br/>StorageLive(_1325)<br/>StorageLive(_1326)<br/>StorageLive(_1327)<br/>_1327 = &amp;(*_1303)<br/></td></tr><tr><td align="left">_1326 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1327)</td></tr></table>>];
    bb569__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">569</td></tr><tr><td align="left" balign="left">_1325 = &amp;(*_1326)<br/>StorageDead(_1327)<br/>StorageLive(_1328)<br/>_1328 = PerpOperation::UpdateFunding<br/></td></tr><tr><td align="left">_1315 = PerpMarket::is_operation_paused(move _1325, move _1328)</td></tr></table>>];
    bb570__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">570</td></tr><tr><td align="left" balign="left">StorageDead(_1328)<br/>StorageDead(_1326)<br/>StorageDead(_1325)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb571__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">571</td></tr><tr><td align="left" balign="left">StorageDead(_1316)<br/>StorageLive(_1329)<br/>StorageLive(_1330)<br/>StorageLive(_1331)<br/>StorageLive(_1332)<br/>_1332 = _64<br/>StorageLive(_1333)<br/>StorageLive(_1334)<br/>StorageLive(_1335)<br/>_1335 = &amp;mut (*_1303)<br/></td></tr><tr><td align="left">_1334 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _1335)</td></tr></table>>];
    bb572__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">572</td></tr><tr><td align="left" balign="left">_1333 = &amp;mut (*_1334)<br/>StorageDead(_1335)<br/>StorageLive(_1336)<br/>_1336 = &amp;mut (*_7)<br/>StorageLive(_1337)<br/>_1337 = _15<br/>StorageLive(_1338)<br/>_1338 = _16<br/>StorageLive(_1339)<br/>StorageLive(_1340)<br/>_1340 = &amp;((*_2).7: state::state::OracleGuardRails)<br/>_1339 = &amp;(*_1340)<br/>StorageLive(_1341)<br/>_1341 = _1315<br/>StorageLive(_1342)<br/>StorageLive(_1343)<br/>_1343 = _385<br/>_1342 = Option::&lt;u64&gt;::Some(move _1343)<br/>StorageDead(_1343)<br/></td></tr><tr><td align="left">_1331 = controller::funding::update_funding_rate(move _1332, move _1333, move _1336, move _1337, move _1338, move _1339, move _1341, move _1342)</td></tr></table>>];
    bb573__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">573</td></tr><tr><td align="left" balign="left">StorageDead(_1342)<br/>StorageDead(_1341)<br/>StorageDead(_1339)<br/>StorageDead(_1338)<br/>StorageDead(_1337)<br/>StorageDead(_1336)<br/>StorageDead(_1333)<br/>StorageDead(_1332)<br/></td></tr><tr><td align="left">_1330 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _1331)</td></tr></table>>];
    bb574__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">574</td></tr><tr><td align="left" balign="left">StorageDead(_1331)<br/>_1344 = discriminant(_1330)<br/></td></tr><tr><td align="left">switchInt(move _1344)</td></tr></table>>];
    bb575__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">575</td></tr><tr><td align="left" balign="left">StorageLive(_1348)<br/>_1348 = ((_1330 as Continue).0: bool)<br/>_1329 = _1348<br/>StorageDead(_1348)<br/>StorageDead(_1340)<br/>StorageDead(_1334)<br/>StorageDead(_1330)<br/>StorageDead(_1329)<br/>_1302 = const ()<br/>StorageDead(_1315)<br/></td></tr><tr><td align="left">drop(_1304)</td></tr></table>>];
    bb576__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">576</td></tr><tr><td align="left" balign="left">StorageLive(_1345)<br/>_1345 = ((_1330 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1347)<br/>_1347 = _1345<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1347)</td></tr></table>>];
    bb577__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">577</td></tr><tr><td align="left" balign="left">StorageDead(_1347)<br/>StorageDead(_1345)<br/>StorageDead(_1340)<br/>StorageDead(_1334)<br/>StorageDead(_1330)<br/>StorageDead(_1329)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb578__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">578</td></tr><tr><td align="left" balign="left">StorageDead(_1304)<br/>StorageDead(_1303)<br/>StorageDead(_1302)<br/>StorageLive(_1349)<br/>StorageLive(_1350)<br/>StorageLive(_1351)<br/>StorageLive(_1352)<br/>_1352 = &amp;mut (*_21)<br/></td></tr><tr><td align="left">_1351 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1352)</td></tr></table>>];
    bb579__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">579</td></tr><tr><td align="left" balign="left">_1350 = &amp;mut (*_1351)<br/>StorageDead(_1352)<br/>StorageLive(_1353)<br/>_1353 = _16<br/></td></tr><tr><td align="left">_1349 = User::update_last_active_slot(move _1350, move _1353)</td></tr></table>>];
    bb580__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">580</td></tr><tr><td align="left" balign="left">StorageDead(_1353)<br/>StorageDead(_1350)<br/>StorageDead(_1351)<br/>StorageDead(_1349)<br/>StorageLive(_1354)<br/>StorageLive(_1355)<br/>_1355 = _1031<br/>StorageLive(_1356)<br/>_1356 = _1032<br/>_1354 = (move _1355, move _1356)<br/>StorageDead(_1356)<br/>StorageDead(_1355)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _1354)<br/>StorageDead(_1354)<br/>StorageDead(_1134)<br/>StorageDead(_1128)<br/>StorageDead(_1032)<br/>StorageDead(_1031)<br/>StorageDead(_1027)<br/>StorageDead(_937)<br/>StorageDead(_931)<br/>StorageDead(_913)<br/>StorageDead(_900)<br/>StorageDead(_853)<br/>StorageDead(_835)<br/></td></tr><tr><td align="left">drop(_800)</td></tr></table>>];
    bb581__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">581</td></tr><tr><td align="left" balign="left">StorageDead(_800)<br/></td></tr><tr><td align="left">drop(_705)</td></tr></table>>];
    bb582__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">582</td></tr><tr><td align="left" balign="left">StorageDead(_705)<br/></td></tr><tr><td align="left">drop(_704)</td></tr></table>>];
    bb583__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">583</td></tr><tr><td align="left" balign="left">StorageDead(_704)<br/>StorageDead(_700)<br/>StorageDead(_697)<br/>StorageDead(_665)<br/>StorageDead(_396)<br/>StorageDead(_395)<br/>StorageDead(_394)<br/>StorageDead(_393)<br/>StorageDead(_392)<br/>StorageDead(_391)<br/>StorageDead(_390)<br/>StorageDead(_389)<br/>StorageDead(_388)<br/>StorageDead(_387)<br/>StorageDead(_386)<br/>StorageDead(_385)<br/>_1377 = const false<br/>StorageDead(_150)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>StorageDead(_64)<br/>StorageDead(_63)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">drop(_34)</td></tr></table>>];
    bb584__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">584</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">drop(_22)</td></tr></table>>];
    bb585__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">585</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb586__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">586</td></tr><tr><td align="left" balign="left">StorageDead(_1315)<br/></td></tr><tr><td align="left">drop(_1304)</td></tr></table>>];
    bb587__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">587</td></tr><tr><td align="left" balign="left">StorageDead(_1304)<br/>StorageDead(_1303)<br/>StorageDead(_1302)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb588__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">588</td></tr><tr><td align="left" balign="left">StorageDead(_1227)<br/>StorageDead(_1226)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb589__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">589</td></tr><tr><td align="left" balign="left">StorageDead(_1167)<br/>StorageDead(_1186)<br/>StorageDead(_1181)<br/>StorageDead(_1178)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb590__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">590</td></tr><tr><td align="left" balign="left">StorageDead(_1166)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb591__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">591</td></tr><tr><td align="left" balign="left">StorageDead(_1165)<br/>StorageDead(_1164)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb592__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">592</td></tr><tr><td align="left" balign="left">StorageDead(_1134)<br/>StorageDead(_1128)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb593__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">593</td></tr><tr><td align="left" balign="left">StorageDead(_1093)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb594__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">594</td></tr><tr><td align="left" balign="left">StorageDead(_1083)<br/>StorageDead(_1081)<br/>StorageDead(_1080)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb595__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">595</td></tr><tr><td align="left" balign="left">StorageDead(_1032)<br/>StorageDead(_1031)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb596__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">596</td></tr><tr><td align="left" balign="left">StorageDead(_1027)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb597__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">597</td></tr><tr><td align="left" balign="left">StorageDead(_1000)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb598__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">598</td></tr><tr><td align="left" balign="left">StorageDead(_972)<br/>StorageDead(_991)<br/>StorageDead(_986)<br/>StorageDead(_983)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb599__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">599</td></tr><tr><td align="left" balign="left">StorageDead(_971)<br/>StorageDead(_969)<br/>StorageDead(_968)<br/>StorageDead(_967)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb600__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">600</td></tr><tr><td align="left" balign="left">StorageDead(_937)<br/>StorageDead(_931)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb601__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">601</td></tr><tr><td align="left" balign="left">StorageDead(_913)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb602__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">602</td></tr><tr><td align="left" balign="left">StorageDead(_900)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb603__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">603</td></tr><tr><td align="left" balign="left">StorageDead(_883)<br/>StorageDead(_874)<br/>StorageDead(_873)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb604__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">604</td></tr><tr><td align="left" balign="left">StorageDead(_859)<br/>StorageDead(_854)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb605__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">605</td></tr><tr><td align="left" balign="left">StorageDead(_853)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb606__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">606</td></tr><tr><td align="left" balign="left">StorageDead(_835)<br/></td></tr><tr><td align="left">drop(_800)</td></tr></table>>];
    bb607__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">607</td></tr><tr><td align="left" balign="left">StorageDead(_800)<br/></td></tr><tr><td align="left">drop(_705)</td></tr></table>>];
    bb608__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">608</td></tr><tr><td align="left" balign="left">StorageDead(_705)<br/></td></tr><tr><td align="left">drop(_704)</td></tr></table>>];
    bb609__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">609</td></tr><tr><td align="left" balign="left">StorageDead(_704)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb610__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">610</td></tr><tr><td align="left" balign="left">StorageDead(_782)<br/>_1439 = discriminant(_786)<br/>StorageDead(_786)<br/>StorageDead(_775)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb611__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">611</td></tr><tr><td align="left" balign="left">_1374 = const false<br/>StorageDead(_709)<br/>StorageDead(_708)<br/>StorageDead(_707)<br/>StorageDead(_706)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb612__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">612</td></tr><tr><td align="left" balign="left">StorageDead(_700)<br/>StorageDead(_697)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb613__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">613</td></tr><tr><td align="left" balign="left">StorageDead(_665)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb614__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">614</td></tr><tr><td align="left" balign="left">StorageDead(_589)<br/>StorageDead(_580)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb615__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">615</td></tr><tr><td align="left" balign="left">StorageDead(_527)<br/>StorageDead(_524)<br/>StorageDead(_522)<br/>StorageDead(_520)<br/>StorageDead(_517)<br/>StorageDead(_514)<br/>StorageDead(_510)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb616__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">616</td></tr><tr><td align="left" balign="left">StorageDead(_507)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb617__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">617</td></tr><tr><td align="left" balign="left">StorageDead(_492)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb618__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">618</td></tr><tr><td align="left" balign="left">StorageDead(_477)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb619__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">619</td></tr><tr><td align="left">drop(_408)</td></tr></table>>];
    bb620__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">620</td></tr><tr><td align="left" balign="left">StorageDead(_408)<br/>StorageDead(_407)<br/>StorageDead(_406)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb621__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">621</td></tr><tr><td align="left" balign="left">StorageDead(_396)<br/>StorageDead(_395)<br/>StorageDead(_394)<br/>StorageDead(_393)<br/>StorageDead(_392)<br/>StorageDead(_391)<br/>StorageDead(_390)<br/>StorageDead(_389)<br/>StorageDead(_388)<br/>StorageDead(_387)<br/>StorageDead(_386)<br/>StorageDead(_385)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb622__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">622</td></tr><tr><td align="left" balign="left">_1377 = const false<br/>StorageDead(_150)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb623__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">623</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>StorageDead(_64)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb624__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">624</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/></td></tr><tr><td align="left">drop(_34)</td></tr></table>>];
    bb625__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">625</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">drop(_22)</td></tr></table>>];
    bb626__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">626</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb627__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">627</td></tr><tr><td align="left">return</td></tr></table>>];
    bb628__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">628 (cleanup)</td></tr><tr><td align="left">drop(_1304)</td></tr></table>>];
    bb629__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">629 (cleanup)</td></tr><tr><td align="left">drop(_1279)</td></tr></table>>];
    bb630__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">630 (cleanup)</td></tr><tr><td align="left">drop(_1260)</td></tr></table>>];
    bb631__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">631 (cleanup)</td></tr><tr><td align="left">drop(_1227)</td></tr></table>>];
    bb632__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">632 (cleanup)</td></tr><tr><td align="left">drop(_1167)</td></tr></table>>];
    bb633__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">633 (cleanup)</td></tr><tr><td align="left">drop(_1148)</td></tr></table>>];
    bb634__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">634 (cleanup)</td></tr><tr><td align="left">drop(_1093)</td></tr></table>>];
    bb635__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">635 (cleanup)</td></tr><tr><td align="left">drop(_972)</td></tr></table>>];
    bb636__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">636 (cleanup)</td></tr><tr><td align="left">drop(_951)</td></tr></table>>];
    bb637__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">637 (cleanup)</td></tr><tr><td align="left">drop(_887)</td></tr></table>>];
    bb638__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">638 (cleanup)</td></tr><tr><td align="left">drop(_800)</td></tr></table>>];
    bb639__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">639 (cleanup)</td></tr><tr><td align="left">drop(_705)</td></tr></table>>];
    bb640__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">640 (cleanup)</td></tr><tr><td align="left">drop(_704)</td></tr></table>>];
    bb641__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">641 (cleanup)</td></tr><tr><td align="left">drop(_782)</td></tr></table>>];
    bb642__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">642 (cleanup)</td></tr><tr><td align="left">drop(_782)</td></tr></table>>];
    bb643__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">643 (cleanup)</td></tr><tr><td align="left">drop(_753)</td></tr></table>>];
    bb644__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">644 (cleanup)</td></tr><tr><td align="left">drop(_734)</td></tr></table>>];
    bb645__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">645 (cleanup)</td></tr><tr><td align="left">drop(_683)</td></tr></table>>];
    bb646__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">646 (cleanup)</td></tr><tr><td align="left">drop(_464)</td></tr></table>>];
    bb647__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">647 (cleanup)</td></tr><tr><td align="left">drop(_445)</td></tr></table>>];
    bb648__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">648 (cleanup)</td></tr><tr><td align="left">drop(_408)</td></tr></table>>];
    bb649__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">649 (cleanup)</td></tr><tr><td align="left">drop(_335)</td></tr></table>>];
    bb650__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">650 (cleanup)</td></tr><tr><td align="left">drop(_288)</td></tr></table>>];
    bb651__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">651 (cleanup)</td></tr><tr><td align="left">drop(_259)</td></tr></table>>];
    bb652__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">652 (cleanup)</td></tr><tr><td align="left">drop(_240)</td></tr></table>>];
    bb653__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">653 (cleanup)</td></tr><tr><td align="left">drop(_212)</td></tr></table>>];
    bb654__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">654 (cleanup)</td></tr><tr><td align="left">drop(_193)</td></tr></table>>];
    bb655__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">655 (cleanup)</td></tr><tr><td align="left">drop(_127)</td></tr></table>>];
    bb656__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">656 (cleanup)</td></tr><tr><td align="left">drop(_34)</td></tr></table>>];
    bb657__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">657 (cleanup)</td></tr><tr><td align="left">drop(_22)</td></tr></table>>];
    bb658__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">658 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb659__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">659</td></tr><tr><td align="left">drop(_709)</td></tr></table>>];
    bb660__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">660</td></tr><tr><td align="left" balign="left">_1407 = discriminant(_888)<br/>StorageDead(_892)<br/>_1378 = const false<br/>StorageDead(_888)<br/>StorageDead(_887)<br/>StorageDead(_885)<br/>StorageLive(_899)<br/>_899 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _899)<br/>StorageDead(_899)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb661__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">661</td></tr><tr><td align="left" balign="left">_1409 = discriminant(_888)<br/>StorageDead(_892)<br/>_1378 = const false<br/>StorageDead(_888)<br/>StorageDead(_887)<br/>StorageDead(_885)<br/>_873 = const ()<br/>StorageDead(_883)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb662__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">662</td></tr><tr><td align="left" balign="left">_1411 = discriminant(_952)<br/>StorageDead(_956)<br/>_1376 = const false<br/>StorageDead(_952)<br/>StorageDead(_951)<br/>StorageDead(_949)<br/>StorageDead(_944)<br/>StorageDead(_942)<br/>StorageDead(_941)<br/>StorageDead(_938)<br/>StorageLive(_967)<br/>StorageLive(_968)<br/>_968 = _900<br/></td></tr><tr><td align="left">switchInt(move _968)</td></tr></table>>];
    bb663__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">663</td></tr><tr><td align="left" balign="left">_1421 = discriminant(_1149)<br/>StorageDead(_1153)<br/>_1375 = const false<br/>StorageDead(_1149)<br/>StorageDead(_1148)<br/>StorageDead(_1146)<br/>StorageDead(_1141)<br/>StorageDead(_1139)<br/>StorageDead(_1138)<br/>StorageDead(_1135)<br/>StorageLive(_1164)<br/>StorageLive(_1165)<br/>_1165 = _1134<br/></td></tr><tr><td align="left">switchInt(move _1165)</td></tr></table>>];
    bb664__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">664</td></tr><tr><td align="left" balign="left">_1435 = discriminant(_1149)<br/>StorageDead(_1153)<br/>_1375 = const false<br/>StorageDead(_1149)<br/>StorageDead(_1148)<br/>StorageDead(_1146)<br/>StorageDead(_1141)<br/>StorageDead(_1139)<br/>StorageDead(_1138)<br/>StorageDead(_1135)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb665__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">665</td></tr><tr><td align="left" balign="left">_1437 = discriminant(_952)<br/>StorageDead(_956)<br/>_1376 = const false<br/>StorageDead(_952)<br/>StorageDead(_951)<br/>StorageDead(_949)<br/>StorageDead(_944)<br/>StorageDead(_942)<br/>StorageDead(_941)<br/>StorageDead(_938)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb666__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">666</td></tr><tr><td align="left">drop(_709)</td></tr></table>>];
    bb667__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">667</td></tr><tr><td align="left">switchInt(_1374)</td></tr></table>>];
    bb668__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">668</td></tr><tr><td align="left">drop(_150)</td></tr></table>>];
    bb669__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">669</td></tr><tr><td align="left">switchInt(_1377)</td></tr></table>>];
    bb670__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">670 (cleanup)</td></tr><tr><td align="left" balign="left">_1441 = discriminant(_1305)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb671__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">671 (cleanup)</td></tr><tr><td align="left" balign="left">_1442 = discriminant(_1228)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb672__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">672 (cleanup)</td></tr><tr><td align="left" balign="left">_1443 = discriminant(_1168)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb673__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">673 (cleanup)</td></tr><tr><td align="left" balign="left">_1444 = discriminant(_1149)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb674__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">674 (cleanup)</td></tr><tr><td align="left" balign="left">_1445 = discriminant(_1094)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb675__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">675 (cleanup)</td></tr><tr><td align="left" balign="left">_1446 = discriminant(_973)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb676__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">676 (cleanup)</td></tr><tr><td align="left" balign="left">_1447 = discriminant(_952)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb677__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">677 (cleanup)</td></tr><tr><td align="left" balign="left">_1448 = discriminant(_888)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb678__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">678 (cleanup)</td></tr><tr><td align="left" balign="left">_1449 = discriminant(_801)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb679__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">679 (cleanup)</td></tr><tr><td align="left" balign="left">_1450 = discriminant(_786)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb680__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">680 (cleanup)</td></tr><tr><td align="left">drop(_709)</td></tr></table>>];
    bb681__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">681 (cleanup)</td></tr><tr><td align="left">switchInt(_1374)</td></tr></table>>];
    bb682__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">682 (cleanup)</td></tr><tr><td align="left" balign="left">_1451 = discriminant(_710)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb683__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">683 (cleanup)</td></tr><tr><td align="left" balign="left">_1452 = discriminant(_409)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb684__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">684 (cleanup)</td></tr><tr><td align="left">drop(_150)</td></tr></table>>];
    bb685__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">685 (cleanup)</td></tr><tr><td align="left">switchInt(_1377)</td></tr></table>>];
    bb686__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">686 (cleanup)</td></tr><tr><td align="left" balign="left">_1453 = discriminant(_151)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb687__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">687 (cleanup)</td></tr><tr><td align="left" balign="left">_1454 = discriminant(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb688__0_523 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">688 (cleanup)</td></tr><tr><td align="left" balign="left">_1455 = discriminant(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_523 -> bb1__0_523 [label="return"];
    bb1__0_523 -> bb2__0_523 [label="return"];
    bb2__0_523 -> bb3__0_523 [label="return"];
    bb3__0_523 -> bb4__0_523 [label="return"];
    bb3__0_523 -> bb658__0_523 [label="unwind"];
    bb4__0_523 -> bb5__0_523 [label="return"];
    bb4__0_523 -> bb658__0_523 [label="unwind"];
    bb5__0_523 -> bb6__0_523 [label="0"];
    bb5__0_523 -> bb8__0_523 [label="1"];
    bb5__0_523 -> bb7__0_523 [label="otherwise"];
    bb6__0_523 -> bb10__0_523 [label="return"];
    bb6__0_523 -> bb657__0_523 [label="unwind"];
    bb8__0_523 -> bb9__0_523 [label="return"];
    bb8__0_523 -> bb688__0_523 [label="unwind"];
    bb9__0_523 -> bb626__0_523 [label=""];
    bb10__0_523 -> bb11__0_523 [label="return"];
    bb10__0_523 -> bb657__0_523 [label="unwind"];
    bb11__0_523 -> bb12__0_523 [label="return"];
    bb11__0_523 -> bb657__0_523 [label="unwind"];
    bb12__0_523 -> bb13__0_523 [label="0"];
    bb12__0_523 -> bb14__0_523 [label="1"];
    bb12__0_523 -> bb7__0_523 [label="otherwise"];
    bb13__0_523 -> bb16__0_523 [label="return"];
    bb13__0_523 -> bb656__0_523 [label="unwind"];
    bb14__0_523 -> bb15__0_523 [label="return"];
    bb14__0_523 -> bb687__0_523 [label="unwind"];
    bb15__0_523 -> bb625__0_523 [label=""];
    bb16__0_523 -> bb17__0_523 [label="return"];
    bb16__0_523 -> bb656__0_523 [label="unwind"];
    bb17__0_523 -> bb18__0_523 [label="return"];
    bb17__0_523 -> bb656__0_523 [label="unwind"];
    bb18__0_523 -> bb19__0_523 [label="return"];
    bb18__0_523 -> bb656__0_523 [label="unwind"];
    bb19__0_523 -> bb20__0_523 [label="return"];
    bb19__0_523 -> bb656__0_523 [label="unwind"];
    bb20__0_523 -> bb21__0_523 [label="0"];
    bb20__0_523 -> bb22__0_523 [label="1"];
    bb20__0_523 -> bb7__0_523 [label="otherwise"];
    bb21__0_523 -> bb24__0_523 [label="return"];
    bb21__0_523 -> bb656__0_523 [label="unwind"];
    bb22__0_523 -> bb23__0_523 [label="return"];
    bb22__0_523 -> bb656__0_523 [label="unwind"];
    bb23__0_523 -> bb624__0_523 [label=""];
    bb24__0_523 -> bb25__0_523 [label="success"];
    bb24__0_523 -> bb656__0_523 [label="unwind"];
    bb25__0_523 -> bb26__0_523 [label="return"];
    bb25__0_523 -> bb656__0_523 [label="unwind"];
    bb26__0_523 -> bb27__0_523 [label="success"];
    bb26__0_523 -> bb656__0_523 [label="unwind"];
    bb27__0_523 -> bb28__0_523 [label="return"];
    bb27__0_523 -> bb656__0_523 [label="unwind"];
    bb28__0_523 -> bb29__0_523 [label="success"];
    bb28__0_523 -> bb656__0_523 [label="unwind"];
    bb29__0_523 -> bb30__0_523 [label="return"];
    bb29__0_523 -> bb656__0_523 [label="unwind"];
    bb30__0_523 -> bb31__0_523 [label="success"];
    bb30__0_523 -> bb656__0_523 [label="unwind"];
    bb31__0_523 -> bb32__0_523 [label="return"];
    bb31__0_523 -> bb656__0_523 [label="unwind"];
    bb32__0_523 -> bb33__0_523 [label="success"];
    bb32__0_523 -> bb656__0_523 [label="unwind"];
    bb33__0_523 -> bb34__0_523 [label="return"];
    bb33__0_523 -> bb656__0_523 [label="unwind"];
    bb34__0_523 -> bb35__0_523 [label="success"];
    bb34__0_523 -> bb656__0_523 [label="unwind"];
    bb35__0_523 -> bb36__0_523 [label="return"];
    bb35__0_523 -> bb656__0_523 [label="unwind"];
    bb36__0_523 -> bb37__0_523 [label="success"];
    bb36__0_523 -> bb656__0_523 [label="unwind"];
    bb37__0_523 -> bb38__0_523 [label="return"];
    bb37__0_523 -> bb656__0_523 [label="unwind"];
    bb38__0_523 -> bb40__0_523 [label="0"];
    bb38__0_523 -> bb39__0_523 [label="otherwise"];
    bb39__0_523 -> bb48__0_523 [label=""];
    bb40__0_523 -> bb41__0_523 [label="return"];
    bb40__0_523 -> bb656__0_523 [label="unwind"];
    bb41__0_523 -> bb42__0_523 [label="return"];
    bb41__0_523 -> bb656__0_523 [label="unwind"];
    bb42__0_523 -> bb43__0_523 [label="return"];
    bb42__0_523 -> bb656__0_523 [label="unwind"];
    bb43__0_523 -> bb44__0_523 [label="return"];
    bb43__0_523 -> bb655__0_523 [label="unwind"];
    bb44__0_523 -> bb45__0_523 [label="return"];
    bb44__0_523 -> bb655__0_523 [label="unwind"];
    bb45__0_523 -> bb46__0_523 [label="return"];
    bb45__0_523 -> bb656__0_523 [label="unwind"];
    bb46__0_523 -> bb47__0_523 [label="return"];
    bb46__0_523 -> bb656__0_523 [label="unwind"];
    bb47__0_523 -> bb48__0_523 [label=""];
    bb48__0_523 -> bb49__0_523 [label="return"];
    bb48__0_523 -> bb656__0_523 [label="unwind"];
    bb49__0_523 -> bb50__0_523 [label="0"];
    bb49__0_523 -> bb51__0_523 [label="1"];
    bb49__0_523 -> bb7__0_523 [label="otherwise"];
    bb50__0_523 -> bb53__0_523 [label="return"];
    bb50__0_523 -> bb656__0_523 [label="unwind"];
    bb51__0_523 -> bb52__0_523 [label="return"];
    bb51__0_523 -> bb656__0_523 [label="unwind"];
    bb52__0_523 -> bb623__0_523 [label=""];
    bb53__0_523 -> bb54__0_523 [label="return"];
    bb53__0_523 -> bb656__0_523 [label="unwind"];
    bb54__0_523 -> bb55__0_523 [label="0"];
    bb54__0_523 -> bb56__0_523 [label="1"];
    bb54__0_523 -> bb7__0_523 [label="otherwise"];
    bb55__0_523 -> bb58__0_523 [label="return"];
    bb55__0_523 -> bb685__0_523 [label="unwind"];
    bb56__0_523 -> bb57__0_523 [label="return"];
    bb56__0_523 -> bb686__0_523 [label="unwind"];
    bb57__0_523 -> bb622__0_523 [label=""];
    bb58__0_523 -> bb59__0_523 [label="return"];
    bb58__0_523 -> bb685__0_523 [label="unwind"];
    bb59__0_523 -> bb60__0_523 [label="return"];
    bb59__0_523 -> bb685__0_523 [label="unwind"];
    bb60__0_523 -> bb61__0_523 [label="return"];
    bb60__0_523 -> bb685__0_523 [label="unwind"];
    bb61__0_523 -> bb62__0_523 [label="0"];
    bb61__0_523 -> bb63__0_523 [label="1"];
    bb61__0_523 -> bb7__0_523 [label="otherwise"];
    bb62__0_523 -> bb65__0_523 [label="return"];
    bb62__0_523 -> bb685__0_523 [label="unwind"];
    bb63__0_523 -> bb64__0_523 [label="return"];
    bb63__0_523 -> bb685__0_523 [label="unwind"];
    bb64__0_523 -> bb669__0_523 [label=""];
    bb65__0_523 -> bb67__0_523 [label="1"];
    bb65__0_523 -> bb67__0_523 [label="6"];
    bb65__0_523 -> bb66__0_523 [label="otherwise"];
    bb66__0_523 -> bb68__0_523 [label=""];
    bb67__0_523 -> bb68__0_523 [label=""];
    bb68__0_523 -> bb70__0_523 [label="0"];
    bb68__0_523 -> bb69__0_523 [label="otherwise"];
    bb69__0_523 -> bb82__0_523 [label=""];
    bb70__0_523 -> bb71__0_523 [label="return"];
    bb70__0_523 -> bb685__0_523 [label="unwind"];
    bb71__0_523 -> bb72__0_523 [label="return"];
    bb71__0_523 -> bb685__0_523 [label="unwind"];
    bb72__0_523 -> bb73__0_523 [label="return"];
    bb72__0_523 -> bb685__0_523 [label="unwind"];
    bb73__0_523 -> bb74__0_523 [label="return"];
    bb73__0_523 -> bb654__0_523 [label="unwind"];
    bb74__0_523 -> bb75__0_523 [label="return"];
    bb74__0_523 -> bb654__0_523 [label="unwind"];
    bb75__0_523 -> bb76__0_523 [label="return"];
    bb75__0_523 -> bb685__0_523 [label="unwind"];
    bb76__0_523 -> bb77__0_523 [label="return"];
    bb76__0_523 -> bb685__0_523 [label="unwind"];
    bb77__0_523 -> bb78__0_523 [label="return"];
    bb77__0_523 -> bb685__0_523 [label="unwind"];
    bb78__0_523 -> bb79__0_523 [label="return"];
    bb78__0_523 -> bb653__0_523 [label="unwind"];
    bb79__0_523 -> bb80__0_523 [label="return"];
    bb79__0_523 -> bb653__0_523 [label="unwind"];
    bb80__0_523 -> bb81__0_523 [label="return"];
    bb80__0_523 -> bb685__0_523 [label="unwind"];
    bb81__0_523 -> bb82__0_523 [label=""];
    bb82__0_523 -> bb83__0_523 [label="return"];
    bb82__0_523 -> bb685__0_523 [label="unwind"];
    bb83__0_523 -> bb84__0_523 [label="0"];
    bb83__0_523 -> bb85__0_523 [label="1"];
    bb83__0_523 -> bb7__0_523 [label="otherwise"];
    bb84__0_523 -> bb87__0_523 [label="return"];
    bb84__0_523 -> bb685__0_523 [label="unwind"];
    bb85__0_523 -> bb86__0_523 [label="return"];
    bb85__0_523 -> bb685__0_523 [label="unwind"];
    bb86__0_523 -> bb669__0_523 [label=""];
    bb87__0_523 -> bb88__0_523 [label="return"];
    bb87__0_523 -> bb685__0_523 [label="unwind"];
    bb88__0_523 -> bb90__0_523 [label="0"];
    bb88__0_523 -> bb89__0_523 [label="otherwise"];
    bb89__0_523 -> bb91__0_523 [label="return"];
    bb89__0_523 -> bb685__0_523 [label="unwind"];
    bb90__0_523 -> bb102__0_523 [label=""];
    bb91__0_523 -> bb92__0_523 [label="return"];
    bb91__0_523 -> bb685__0_523 [label="unwind"];
    bb92__0_523 -> bb93__0_523 [label="return"];
    bb92__0_523 -> bb685__0_523 [label="unwind"];
    bb93__0_523 -> bb94__0_523 [label="return"];
    bb93__0_523 -> bb652__0_523 [label="unwind"];
    bb94__0_523 -> bb95__0_523 [label="return"];
    bb94__0_523 -> bb652__0_523 [label="unwind"];
    bb95__0_523 -> bb96__0_523 [label="return"];
    bb95__0_523 -> bb685__0_523 [label="unwind"];
    bb96__0_523 -> bb97__0_523 [label="return"];
    bb96__0_523 -> bb685__0_523 [label="unwind"];
    bb97__0_523 -> bb98__0_523 [label="return"];
    bb97__0_523 -> bb685__0_523 [label="unwind"];
    bb98__0_523 -> bb99__0_523 [label="return"];
    bb98__0_523 -> bb651__0_523 [label="unwind"];
    bb99__0_523 -> bb100__0_523 [label="return"];
    bb99__0_523 -> bb651__0_523 [label="unwind"];
    bb100__0_523 -> bb101__0_523 [label="return"];
    bb100__0_523 -> bb685__0_523 [label="unwind"];
    bb101__0_523 -> bb102__0_523 [label=""];
    bb102__0_523 -> bb103__0_523 [label="return"];
    bb102__0_523 -> bb685__0_523 [label="unwind"];
    bb103__0_523 -> bb104__0_523 [label="0"];
    bb103__0_523 -> bb105__0_523 [label="1"];
    bb103__0_523 -> bb7__0_523 [label="otherwise"];
    bb104__0_523 -> bb107__0_523 [label="return"];
    bb104__0_523 -> bb685__0_523 [label="unwind"];
    bb105__0_523 -> bb106__0_523 [label="return"];
    bb105__0_523 -> bb685__0_523 [label="unwind"];
    bb106__0_523 -> bb669__0_523 [label=""];
    bb107__0_523 -> bb108__0_523 [label="return"];
    bb107__0_523 -> bb685__0_523 [label="unwind"];
    bb108__0_523 -> bb110__0_523 [label="0"];
    bb108__0_523 -> bb109__0_523 [label="otherwise"];
    bb109__0_523 -> bb118__0_523 [label=""];
    bb110__0_523 -> bb111__0_523 [label="return"];
    bb110__0_523 -> bb685__0_523 [label="unwind"];
    bb111__0_523 -> bb112__0_523 [label="return"];
    bb111__0_523 -> bb685__0_523 [label="unwind"];
    bb112__0_523 -> bb113__0_523 [label="return"];
    bb112__0_523 -> bb685__0_523 [label="unwind"];
    bb113__0_523 -> bb114__0_523 [label="return"];
    bb113__0_523 -> bb650__0_523 [label="unwind"];
    bb114__0_523 -> bb115__0_523 [label="return"];
    bb114__0_523 -> bb650__0_523 [label="unwind"];
    bb115__0_523 -> bb116__0_523 [label="return"];
    bb115__0_523 -> bb685__0_523 [label="unwind"];
    bb116__0_523 -> bb117__0_523 [label="return"];
    bb116__0_523 -> bb685__0_523 [label="unwind"];
    bb117__0_523 -> bb118__0_523 [label=""];
    bb118__0_523 -> bb119__0_523 [label="return"];
    bb118__0_523 -> bb685__0_523 [label="unwind"];
    bb119__0_523 -> bb120__0_523 [label="0"];
    bb119__0_523 -> bb121__0_523 [label="1"];
    bb119__0_523 -> bb7__0_523 [label="otherwise"];
    bb120__0_523 -> bb123__0_523 [label="return"];
    bb120__0_523 -> bb685__0_523 [label="unwind"];
    bb121__0_523 -> bb122__0_523 [label="return"];
    bb121__0_523 -> bb685__0_523 [label="unwind"];
    bb122__0_523 -> bb669__0_523 [label=""];
    bb123__0_523 -> bb124__0_523 [label="success"];
    bb123__0_523 -> bb685__0_523 [label="unwind"];
    bb124__0_523 -> bb125__0_523 [label="return"];
    bb124__0_523 -> bb685__0_523 [label="unwind"];
    bb125__0_523 -> bb127__0_523 [label="0"];
    bb125__0_523 -> bb126__0_523 [label="otherwise"];
    bb126__0_523 -> bb128__0_523 [label="return"];
    bb126__0_523 -> bb685__0_523 [label="unwind"];
    bb127__0_523 -> bb131__0_523 [label=""];
    bb128__0_523 -> bb129__0_523 [label="success"];
    bb128__0_523 -> bb685__0_523 [label="unwind"];
    bb129__0_523 -> bb130__0_523 [label="return"];
    bb129__0_523 -> bb685__0_523 [label="unwind"];
    bb130__0_523 -> bb132__0_523 [label="0"];
    bb130__0_523 -> bb131__0_523 [label="otherwise"];
    bb131__0_523 -> bb140__0_523 [label=""];
    bb132__0_523 -> bb133__0_523 [label="return"];
    bb132__0_523 -> bb685__0_523 [label="unwind"];
    bb133__0_523 -> bb134__0_523 [label="return"];
    bb133__0_523 -> bb685__0_523 [label="unwind"];
    bb134__0_523 -> bb135__0_523 [label="return"];
    bb134__0_523 -> bb685__0_523 [label="unwind"];
    bb135__0_523 -> bb136__0_523 [label="return"];
    bb135__0_523 -> bb649__0_523 [label="unwind"];
    bb136__0_523 -> bb137__0_523 [label="return"];
    bb136__0_523 -> bb649__0_523 [label="unwind"];
    bb137__0_523 -> bb138__0_523 [label="return"];
    bb137__0_523 -> bb685__0_523 [label="unwind"];
    bb138__0_523 -> bb139__0_523 [label="return"];
    bb138__0_523 -> bb685__0_523 [label="unwind"];
    bb139__0_523 -> bb140__0_523 [label=""];
    bb140__0_523 -> bb141__0_523 [label="return"];
    bb140__0_523 -> bb685__0_523 [label="unwind"];
    bb141__0_523 -> bb142__0_523 [label="0"];
    bb141__0_523 -> bb143__0_523 [label="1"];
    bb141__0_523 -> bb7__0_523 [label="otherwise"];
    bb142__0_523 -> bb145__0_523 [label="return"];
    bb142__0_523 -> bb685__0_523 [label="unwind"];
    bb143__0_523 -> bb144__0_523 [label="return"];
    bb143__0_523 -> bb685__0_523 [label="unwind"];
    bb144__0_523 -> bb669__0_523 [label=""];
    bb145__0_523 -> bb146__0_523 [label="return"];
    bb145__0_523 -> bb685__0_523 [label="unwind"];
    bb146__0_523 -> bb149__0_523 [label="0"];
    bb146__0_523 -> bb147__0_523 [label="otherwise"];
    bb147__0_523 -> bb148__0_523 [label="return"];
    bb147__0_523 -> bb685__0_523 [label="unwind"];
    bb148__0_523 -> bb669__0_523 [label=""];
    bb149__0_523 -> bb150__0_523 [label="return"];
    bb149__0_523 -> bb685__0_523 [label="unwind"];
    bb150__0_523 -> bb152__0_523 [label="0"];
    bb150__0_523 -> bb151__0_523 [label="otherwise"];
    bb151__0_523 -> bb158__0_523 [label=""];
    bb152__0_523 -> bb153__0_523 [label="return"];
    bb152__0_523 -> bb685__0_523 [label="unwind"];
    bb153__0_523 -> bb154__0_523 [label="return"];
    bb153__0_523 -> bb685__0_523 [label="unwind"];
    bb154__0_523 -> bb156__0_523 [label="0"];
    bb154__0_523 -> bb155__0_523 [label="1"];
    bb154__0_523 -> bb7__0_523 [label="otherwise"];
    bb155__0_523 -> bb157__0_523 [label="return"];
    bb155__0_523 -> bb685__0_523 [label="unwind"];
    bb156__0_523 -> bb158__0_523 [label=""];
    bb157__0_523 -> bb669__0_523 [label=""];
    bb158__0_523 -> bb159__0_523 [label="return"];
    bb158__0_523 -> bb685__0_523 [label="unwind"];
    bb159__0_523 -> bb160__0_523 [label="return"];
    bb159__0_523 -> bb685__0_523 [label="unwind"];
    bb160__0_523 -> bb161__0_523 [label="0"];
    bb160__0_523 -> bb162__0_523 [label="1"];
    bb160__0_523 -> bb7__0_523 [label="otherwise"];
    bb161__0_523 -> bb164__0_523 [label="return"];
    bb161__0_523 -> bb685__0_523 [label="unwind"];
    bb162__0_523 -> bb163__0_523 [label="return"];
    bb162__0_523 -> bb685__0_523 [label="unwind"];
    bb163__0_523 -> bb621__0_523 [label=""];
    bb164__0_523 -> bb165__0_523 [label="return"];
    bb164__0_523 -> bb685__0_523 [label="unwind"];
    bb165__0_523 -> bb166__0_523 [label="0"];
    bb165__0_523 -> bb167__0_523 [label="1"];
    bb165__0_523 -> bb7__0_523 [label="otherwise"];
    bb166__0_523 -> bb169__0_523 [label="return"];
    bb166__0_523 -> bb648__0_523 [label="unwind"];
    bb167__0_523 -> bb168__0_523 [label="return"];
    bb167__0_523 -> bb683__0_523 [label="unwind"];
    bb168__0_523 -> bb620__0_523 [label=""];
    bb169__0_523 -> bb170__0_523 [label="return"];
    bb169__0_523 -> bb648__0_523 [label="unwind"];
    bb170__0_523 -> bb171__0_523 [label="return"];
    bb170__0_523 -> bb648__0_523 [label="unwind"];
    bb171__0_523 -> bb172__0_523 [label="0"];
    bb171__0_523 -> bb173__0_523 [label="1"];
    bb171__0_523 -> bb7__0_523 [label="otherwise"];
    bb172__0_523 -> bb175__0_523 [label="return"];
    bb172__0_523 -> bb648__0_523 [label="unwind"];
    bb173__0_523 -> bb174__0_523 [label="return"];
    bb173__0_523 -> bb648__0_523 [label="unwind"];
    bb174__0_523 -> bb619__0_523 [label=""];
    bb175__0_523 -> bb176__0_523 [label="return"];
    bb175__0_523 -> bb648__0_523 [label="unwind"];
    bb176__0_523 -> bb178__0_523 [label="0"];
    bb176__0_523 -> bb177__0_523 [label="otherwise"];
    bb177__0_523 -> bb179__0_523 [label="return"];
    bb177__0_523 -> bb648__0_523 [label="unwind"];
    bb178__0_523 -> bb190__0_523 [label=""];
    bb179__0_523 -> bb180__0_523 [label="return"];
    bb179__0_523 -> bb648__0_523 [label="unwind"];
    bb180__0_523 -> bb181__0_523 [label="return"];
    bb180__0_523 -> bb648__0_523 [label="unwind"];
    bb181__0_523 -> bb182__0_523 [label="return"];
    bb181__0_523 -> bb647__0_523 [label="unwind"];
    bb182__0_523 -> bb183__0_523 [label="return"];
    bb182__0_523 -> bb647__0_523 [label="unwind"];
    bb183__0_523 -> bb184__0_523 [label="return"];
    bb183__0_523 -> bb648__0_523 [label="unwind"];
    bb184__0_523 -> bb185__0_523 [label="return"];
    bb184__0_523 -> bb648__0_523 [label="unwind"];
    bb185__0_523 -> bb186__0_523 [label="return"];
    bb185__0_523 -> bb648__0_523 [label="unwind"];
    bb186__0_523 -> bb187__0_523 [label="return"];
    bb186__0_523 -> bb646__0_523 [label="unwind"];
    bb187__0_523 -> bb188__0_523 [label="return"];
    bb187__0_523 -> bb646__0_523 [label="unwind"];
    bb188__0_523 -> bb189__0_523 [label="return"];
    bb188__0_523 -> bb648__0_523 [label="unwind"];
    bb189__0_523 -> bb190__0_523 [label=""];
    bb190__0_523 -> bb191__0_523 [label="return"];
    bb190__0_523 -> bb648__0_523 [label="unwind"];
    bb191__0_523 -> bb192__0_523 [label="0"];
    bb191__0_523 -> bb193__0_523 [label="1"];
    bb191__0_523 -> bb7__0_523 [label="otherwise"];
    bb192__0_523 -> bb195__0_523 [label="return"];
    bb192__0_523 -> bb648__0_523 [label="unwind"];
    bb193__0_523 -> bb194__0_523 [label="return"];
    bb193__0_523 -> bb648__0_523 [label="unwind"];
    bb194__0_523 -> bb619__0_523 [label=""];
    bb195__0_523 -> bb196__0_523 [label="return"];
    bb195__0_523 -> bb648__0_523 [label="unwind"];
    bb196__0_523 -> bb197__0_523 [label="return"];
    bb196__0_523 -> bb648__0_523 [label="unwind"];
    bb197__0_523 -> bb198__0_523 [label="return"];
    bb197__0_523 -> bb648__0_523 [label="unwind"];
    bb198__0_523 -> bb199__0_523 [label="0"];
    bb198__0_523 -> bb200__0_523 [label="1"];
    bb198__0_523 -> bb7__0_523 [label="otherwise"];
    bb199__0_523 -> bb202__0_523 [label="return"];
    bb199__0_523 -> bb648__0_523 [label="unwind"];
    bb200__0_523 -> bb201__0_523 [label="return"];
    bb200__0_523 -> bb648__0_523 [label="unwind"];
    bb201__0_523 -> bb618__0_523 [label=""];
    bb202__0_523 -> bb203__0_523 [label="return"];
    bb202__0_523 -> bb648__0_523 [label="unwind"];
    bb203__0_523 -> bb204__0_523 [label="return"];
    bb203__0_523 -> bb648__0_523 [label="unwind"];
    bb204__0_523 -> bb205__0_523 [label="0"];
    bb204__0_523 -> bb206__0_523 [label="1"];
    bb204__0_523 -> bb7__0_523 [label="otherwise"];
    bb205__0_523 -> bb208__0_523 [label="return"];
    bb205__0_523 -> bb648__0_523 [label="unwind"];
    bb206__0_523 -> bb207__0_523 [label="return"];
    bb206__0_523 -> bb648__0_523 [label="unwind"];
    bb207__0_523 -> bb617__0_523 [label=""];
    bb208__0_523 -> bb209__0_523 [label="return"];
    bb208__0_523 -> bb648__0_523 [label="unwind"];
    bb209__0_523 -> bb210__0_523 [label="return"];
    bb209__0_523 -> bb648__0_523 [label="unwind"];
    bb210__0_523 -> bb211__0_523 [label="return"];
    bb210__0_523 -> bb648__0_523 [label="unwind"];
    bb211__0_523 -> bb212__0_523 [label="return"];
    bb211__0_523 -> bb648__0_523 [label="unwind"];
    bb212__0_523 -> bb213__0_523 [label="return"];
    bb212__0_523 -> bb648__0_523 [label="unwind"];
    bb213__0_523 -> bb214__0_523 [label="0"];
    bb213__0_523 -> bb215__0_523 [label="1"];
    bb213__0_523 -> bb7__0_523 [label="otherwise"];
    bb214__0_523 -> bb217__0_523 [label="return"];
    bb214__0_523 -> bb648__0_523 [label="unwind"];
    bb215__0_523 -> bb216__0_523 [label="return"];
    bb215__0_523 -> bb648__0_523 [label="unwind"];
    bb216__0_523 -> bb615__0_523 [label=""];
    bb217__0_523 -> bb218__0_523 [label="return"];
    bb217__0_523 -> bb648__0_523 [label="unwind"];
    bb218__0_523 -> bb219__0_523 [label="return"];
    bb218__0_523 -> bb648__0_523 [label="unwind"];
    bb219__0_523 -> bb220__0_523 [label="return"];
    bb219__0_523 -> bb648__0_523 [label="unwind"];
    bb220__0_523 -> bb221__0_523 [label="0"];
    bb220__0_523 -> bb222__0_523 [label="1"];
    bb220__0_523 -> bb7__0_523 [label="otherwise"];
    bb221__0_523 -> bb224__0_523 [label="return"];
    bb221__0_523 -> bb648__0_523 [label="unwind"];
    bb222__0_523 -> bb223__0_523 [label="return"];
    bb222__0_523 -> bb648__0_523 [label="unwind"];
    bb223__0_523 -> bb615__0_523 [label=""];
    bb224__0_523 -> bb225__0_523 [label="return"];
    bb224__0_523 -> bb648__0_523 [label="unwind"];
    bb225__0_523 -> bb226__0_523 [label="0"];
    bb225__0_523 -> bb227__0_523 [label="1"];
    bb225__0_523 -> bb7__0_523 [label="otherwise"];
    bb226__0_523 -> bb229__0_523 [label="return"];
    bb226__0_523 -> bb648__0_523 [label="unwind"];
    bb227__0_523 -> bb228__0_523 [label="return"];
    bb227__0_523 -> bb648__0_523 [label="unwind"];
    bb228__0_523 -> bb616__0_523 [label=""];
    bb229__0_523 -> bb230__0_523 [label="return"];
    bb229__0_523 -> bb648__0_523 [label="unwind"];
    bb230__0_523 -> bb231__0_523 [label="return"];
    bb230__0_523 -> bb648__0_523 [label="unwind"];
    bb231__0_523 -> bb232__0_523 [label="return"];
    bb231__0_523 -> bb648__0_523 [label="unwind"];
    bb232__0_523 -> bb233__0_523 [label="return"];
    bb232__0_523 -> bb648__0_523 [label="unwind"];
    bb233__0_523 -> bb234__0_523 [label="return"];
    bb233__0_523 -> bb648__0_523 [label="unwind"];
    bb234__0_523 -> bb235__0_523 [label="0"];
    bb234__0_523 -> bb236__0_523 [label="1"];
    bb234__0_523 -> bb7__0_523 [label="otherwise"];
    bb235__0_523 -> bb238__0_523 [label="return"];
    bb235__0_523 -> bb648__0_523 [label="unwind"];
    bb236__0_523 -> bb237__0_523 [label="return"];
    bb236__0_523 -> bb648__0_523 [label="unwind"];
    bb237__0_523 -> bb616__0_523 [label=""];
    bb238__0_523 -> bb244__0_523 [label="0"];
    bb238__0_523 -> bb239__0_523 [label="otherwise"];
    bb239__0_523 -> bb240__0_523 [label="return"];
    bb239__0_523 -> bb648__0_523 [label="unwind"];
    bb240__0_523 -> bb243__0_523 [label="0"];
    bb240__0_523 -> bb241__0_523 [label="otherwise"];
    bb241__0_523 -> bb242__0_523 [label="return"];
    bb241__0_523 -> bb648__0_523 [label="unwind"];
    bb242__0_523 -> bb246__0_523 [label=""];
    bb243__0_523 -> bb245__0_523 [label=""];
    bb244__0_523 -> bb245__0_523 [label=""];
    bb245__0_523 -> bb246__0_523 [label=""];
    bb246__0_523 -> bb247__0_523 [label="return"];
    bb246__0_523 -> bb648__0_523 [label="unwind"];
    bb247__0_523 -> bb248__0_523 [label="return"];
    bb247__0_523 -> bb648__0_523 [label="unwind"];
    bb248__0_523 -> bb249__0_523 [label="return"];
    bb248__0_523 -> bb648__0_523 [label="unwind"];
    bb249__0_523 -> bb250__0_523 [label="0"];
    bb249__0_523 -> bb251__0_523 [label="1"];
    bb249__0_523 -> bb7__0_523 [label="otherwise"];
    bb250__0_523 -> bb253__0_523 [label="return"];
    bb250__0_523 -> bb648__0_523 [label="unwind"];
    bb251__0_523 -> bb252__0_523 [label="return"];
    bb251__0_523 -> bb648__0_523 [label="unwind"];
    bb252__0_523 -> bb614__0_523 [label=""];
    bb253__0_523 -> bb254__0_523 [label="return"];
    bb253__0_523 -> bb648__0_523 [label="unwind"];
    bb254__0_523 -> bb255__0_523 [label="return"];
    bb254__0_523 -> bb648__0_523 [label="unwind"];
    bb255__0_523 -> bb256__0_523 [label="0"];
    bb255__0_523 -> bb257__0_523 [label="1"];
    bb255__0_523 -> bb7__0_523 [label="otherwise"];
    bb256__0_523 -> bb259__0_523 [label="return"];
    bb256__0_523 -> bb648__0_523 [label="unwind"];
    bb257__0_523 -> bb258__0_523 [label="return"];
    bb257__0_523 -> bb648__0_523 [label="unwind"];
    bb258__0_523 -> bb614__0_523 [label=""];
    bb259__0_523 -> bb260__0_523 [label="return"];
    bb259__0_523 -> bb648__0_523 [label="unwind"];
    bb260__0_523 -> bb261__0_523 [label="return"];
    bb260__0_523 -> bb648__0_523 [label="unwind"];
    bb261__0_523 -> bb262__0_523 [label="0"];
    bb261__0_523 -> bb263__0_523 [label="1"];
    bb261__0_523 -> bb7__0_523 [label="otherwise"];
    bb262__0_523 -> bb265__0_523 [label="return"];
    bb262__0_523 -> bb648__0_523 [label="unwind"];
    bb263__0_523 -> bb264__0_523 [label="return"];
    bb263__0_523 -> bb648__0_523 [label="unwind"];
    bb264__0_523 -> bb614__0_523 [label=""];
    bb265__0_523 -> bb266__0_523 [label="return"];
    bb265__0_523 -> bb648__0_523 [label="unwind"];
    bb266__0_523 -> bb267__0_523 [label="return"];
    bb266__0_523 -> bb648__0_523 [label="unwind"];
    bb267__0_523 -> bb268__0_523 [label="return"];
    bb267__0_523 -> bb648__0_523 [label="unwind"];
    bb268__0_523 -> bb269__0_523 [label="0"];
    bb268__0_523 -> bb270__0_523 [label="1"];
    bb268__0_523 -> bb7__0_523 [label="otherwise"];
    bb269__0_523 -> bb272__0_523 [label="return"];
    bb269__0_523 -> bb648__0_523 [label="unwind"];
    bb270__0_523 -> bb271__0_523 [label="return"];
    bb270__0_523 -> bb648__0_523 [label="unwind"];
    bb271__0_523 -> bb614__0_523 [label=""];
    bb272__0_523 -> bb273__0_523 [label="return"];
    bb272__0_523 -> bb648__0_523 [label="unwind"];
    bb273__0_523 -> bb274__0_523 [label="return"];
    bb273__0_523 -> bb648__0_523 [label="unwind"];
    bb274__0_523 -> bb275__0_523 [label="0"];
    bb274__0_523 -> bb276__0_523 [label="1"];
    bb274__0_523 -> bb7__0_523 [label="otherwise"];
    bb275__0_523 -> bb278__0_523 [label="return"];
    bb275__0_523 -> bb648__0_523 [label="unwind"];
    bb276__0_523 -> bb277__0_523 [label="return"];
    bb276__0_523 -> bb648__0_523 [label="unwind"];
    bb277__0_523 -> bb614__0_523 [label=""];
    bb278__0_523 -> bb279__0_523 [label="return"];
    bb278__0_523 -> bb648__0_523 [label="unwind"];
    bb279__0_523 -> bb280__0_523 [label="return"];
    bb279__0_523 -> bb648__0_523 [label="unwind"];
    bb280__0_523 -> bb281__0_523 [label="return"];
    bb280__0_523 -> bb648__0_523 [label="unwind"];
    bb281__0_523 -> bb282__0_523 [label="return"];
    bb281__0_523 -> bb648__0_523 [label="unwind"];
    bb282__0_523 -> bb283__0_523 [label="return"];
    bb282__0_523 -> bb685__0_523 [label="unwind"];
    bb283__0_523 -> bb284__0_523 [label="return"];
    bb283__0_523 -> bb685__0_523 [label="unwind"];
    bb284__0_523 -> bb285__0_523 [label="return"];
    bb284__0_523 -> bb685__0_523 [label="unwind"];
    bb285__0_523 -> bb286__0_523 [label="0"];
    bb285__0_523 -> bb287__0_523 [label="1"];
    bb285__0_523 -> bb7__0_523 [label="otherwise"];
    bb286__0_523 -> bb290__0_523 [label="0"];
    bb286__0_523 -> bb289__0_523 [label="otherwise"];
    bb287__0_523 -> bb288__0_523 [label="return"];
    bb287__0_523 -> bb685__0_523 [label="unwind"];
    bb288__0_523 -> bb613__0_523 [label=""];
    bb289__0_523 -> bb297__0_523 [label=""];
    bb290__0_523 -> bb291__0_523 [label="return"];
    bb290__0_523 -> bb685__0_523 [label="unwind"];
    bb291__0_523 -> bb292__0_523 [label="return"];
    bb291__0_523 -> bb685__0_523 [label="unwind"];
    bb292__0_523 -> bb293__0_523 [label="return"];
    bb292__0_523 -> bb685__0_523 [label="unwind"];
    bb293__0_523 -> bb294__0_523 [label="return"];
    bb293__0_523 -> bb645__0_523 [label="unwind"];
    bb294__0_523 -> bb295__0_523 [label="return"];
    bb294__0_523 -> bb645__0_523 [label="unwind"];
    bb295__0_523 -> bb296__0_523 [label="return"];
    bb295__0_523 -> bb685__0_523 [label="unwind"];
    bb296__0_523 -> bb297__0_523 [label=""];
    bb297__0_523 -> bb298__0_523 [label="return"];
    bb297__0_523 -> bb685__0_523 [label="unwind"];
    bb298__0_523 -> bb299__0_523 [label="return"];
    bb298__0_523 -> bb685__0_523 [label="unwind"];
    bb299__0_523 -> bb300__0_523 [label="0"];
    bb299__0_523 -> bb342__0_523 [label="otherwise"];
    bb300__0_523 -> bb301__0_523 [label="0"];
    bb300__0_523 -> bb342__0_523 [label="otherwise"];
    bb301__0_523 -> bb302__0_523 [label="return"];
    bb301__0_523 -> bb685__0_523 [label="unwind"];
    bb302__0_523 -> bb303__0_523 [label="return"];
    bb302__0_523 -> bb685__0_523 [label="unwind"];
    bb303__0_523 -> bb304__0_523 [label="return"];
    bb303__0_523 -> bb685__0_523 [label="unwind"];
    bb304__0_523 -> bb305__0_523 [label="0"];
    bb304__0_523 -> bb306__0_523 [label="1"];
    bb304__0_523 -> bb7__0_523 [label="otherwise"];
    bb305__0_523 -> bb308__0_523 [label="return"];
    bb305__0_523 -> bb681__0_523 [label="unwind"];
    bb306__0_523 -> bb307__0_523 [label="return"];
    bb306__0_523 -> bb682__0_523 [label="unwind"];
    bb307__0_523 -> bb611__0_523 [label=""];
    bb308__0_523 -> bb310__0_523 [label="0"];
    bb308__0_523 -> bb309__0_523 [label="otherwise"];
    bb309__0_523 -> bb324__0_523 [label=""];
    bb310__0_523 -> bb311__0_523 [label="return"];
    bb310__0_523 -> bb681__0_523 [label="unwind"];
    bb311__0_523 -> bb312__0_523 [label="return"];
    bb311__0_523 -> bb681__0_523 [label="unwind"];
    bb312__0_523 -> bb313__0_523 [label="return"];
    bb312__0_523 -> bb681__0_523 [label="unwind"];
    bb313__0_523 -> bb314__0_523 [label="return"];
    bb313__0_523 -> bb644__0_523 [label="unwind"];
    bb314__0_523 -> bb315__0_523 [label="return"];
    bb314__0_523 -> bb644__0_523 [label="unwind"];
    bb315__0_523 -> bb316__0_523 [label="return"];
    bb315__0_523 -> bb681__0_523 [label="unwind"];
    bb316__0_523 -> bb317__0_523 [label="return"];
    bb316__0_523 -> bb681__0_523 [label="unwind"];
    bb317__0_523 -> bb318__0_523 [label="return"];
    bb317__0_523 -> bb681__0_523 [label="unwind"];
    bb318__0_523 -> bb319__0_523 [label="return"];
    bb318__0_523 -> bb681__0_523 [label="unwind"];
    bb319__0_523 -> bb320__0_523 [label="return"];
    bb319__0_523 -> bb681__0_523 [label="unwind"];
    bb320__0_523 -> bb321__0_523 [label="return"];
    bb320__0_523 -> bb643__0_523 [label="unwind"];
    bb321__0_523 -> bb322__0_523 [label="return"];
    bb321__0_523 -> bb643__0_523 [label="unwind"];
    bb322__0_523 -> bb323__0_523 [label="return"];
    bb322__0_523 -> bb681__0_523 [label="unwind"];
    bb323__0_523 -> bb324__0_523 [label=""];
    bb324__0_523 -> bb325__0_523 [label="return"];
    bb324__0_523 -> bb681__0_523 [label="unwind"];
    bb325__0_523 -> bb326__0_523 [label="0"];
    bb325__0_523 -> bb327__0_523 [label="1"];
    bb325__0_523 -> bb7__0_523 [label="otherwise"];
    bb326__0_523 -> bb329__0_523 [label="return"];
    bb326__0_523 -> bb681__0_523 [label="unwind"];
    bb327__0_523 -> bb328__0_523 [label="return"];
    bb327__0_523 -> bb681__0_523 [label="unwind"];
    bb328__0_523 -> bb667__0_523 [label=""];
    bb329__0_523 -> bb330__0_523 [label="return"];
    bb329__0_523 -> bb681__0_523 [label="unwind"];
    bb330__0_523 -> bb331__0_523 [label="return"];
    bb330__0_523 -> bb681__0_523 [label="unwind"];
    bb331__0_523 -> bb339__0_523 [label="0"];
    bb331__0_523 -> bb332__0_523 [label="otherwise"];
    bb332__0_523 -> bb333__0_523 [label="return"];
    bb332__0_523 -> bb642__0_523 [label="unwind"];
    bb333__0_523 -> bb334__0_523 [label="return"];
    bb333__0_523 -> bb642__0_523 [label="unwind"];
    bb334__0_523 -> bb335__0_523 [label="return"];
    bb334__0_523 -> bb642__0_523 [label="unwind"];
    bb335__0_523 -> bb336__0_523 [label="0"];
    bb335__0_523 -> bb337__0_523 [label="1"];
    bb335__0_523 -> bb7__0_523 [label="otherwise"];
    bb336__0_523 -> bb340__0_523 [label=""];
    bb337__0_523 -> bb338__0_523 [label="return"];
    bb337__0_523 -> bb641__0_523 [label="unwind"];
    bb338__0_523 -> bb610__0_523 [label="return"];
    bb338__0_523 -> bb679__0_523 [label="unwind"];
    bb339__0_523 -> bb340__0_523 [label=""];
    bb340__0_523 -> bb341__0_523 [label="0"];
    bb340__0_523 -> bb659__0_523 [label="otherwise"];
    bb341__0_523 -> bb343__0_523 [label=""];
    bb342__0_523 -> bb343__0_523 [label=""];
    bb343__0_523 -> bb344__0_523 [label="return"];
    bb343__0_523 -> bb639__0_523 [label="unwind"];
    bb344__0_523 -> bb345__0_523 [label="success"];
    bb344__0_523 -> bb639__0_523 [label="unwind"];
    bb345__0_523 -> bb346__0_523 [label="return"];
    bb345__0_523 -> bb639__0_523 [label="unwind"];
    bb346__0_523 -> bb347__0_523 [label="return"];
    bb346__0_523 -> bb639__0_523 [label="unwind"];
    bb347__0_523 -> bb348__0_523 [label="return"];
    bb347__0_523 -> bb639__0_523 [label="unwind"];
    bb348__0_523 -> bb349__0_523 [label="0"];
    bb348__0_523 -> bb350__0_523 [label="1"];
    bb348__0_523 -> bb7__0_523 [label="otherwise"];
    bb349__0_523 -> bb352__0_523 [label="return"];
    bb349__0_523 -> bb638__0_523 [label="unwind"];
    bb350__0_523 -> bb351__0_523 [label="return"];
    bb350__0_523 -> bb678__0_523 [label="unwind"];
    bb351__0_523 -> bb607__0_523 [label=""];
    bb352__0_523 -> bb354__0_523 [label="0"];
    bb352__0_523 -> bb353__0_523 [label="otherwise"];
    bb353__0_523 -> bb361__0_523 [label=""];
    bb354__0_523 -> bb355__0_523 [label="return"];
    bb354__0_523 -> bb638__0_523 [label="unwind"];
    bb355__0_523 -> bb356__0_523 [label="return"];
    bb355__0_523 -> bb638__0_523 [label="unwind"];
    bb356__0_523 -> bb357__0_523 [label="return"];
    bb356__0_523 -> bb638__0_523 [label="unwind"];
    bb357__0_523 -> bb358__0_523 [label="0"];
    bb357__0_523 -> bb359__0_523 [label="1"];
    bb357__0_523 -> bb7__0_523 [label="otherwise"];
    bb358__0_523 -> bb361__0_523 [label=""];
    bb359__0_523 -> bb360__0_523 [label="return"];
    bb359__0_523 -> bb638__0_523 [label="unwind"];
    bb360__0_523 -> bb606__0_523 [label=""];
    bb361__0_523 -> bb362__0_523 [label="return"];
    bb361__0_523 -> bb638__0_523 [label="unwind"];
    bb362__0_523 -> bb363__0_523 [label="return"];
    bb362__0_523 -> bb638__0_523 [label="unwind"];
    bb363__0_523 -> bb364__0_523 [label="return"];
    bb363__0_523 -> bb638__0_523 [label="unwind"];
    bb364__0_523 -> bb365__0_523 [label="0"];
    bb364__0_523 -> bb366__0_523 [label="1"];
    bb364__0_523 -> bb7__0_523 [label="otherwise"];
    bb365__0_523 -> bb368__0_523 [label="return"];
    bb365__0_523 -> bb638__0_523 [label="unwind"];
    bb366__0_523 -> bb367__0_523 [label="return"];
    bb366__0_523 -> bb638__0_523 [label="unwind"];
    bb367__0_523 -> bb604__0_523 [label=""];
    bb368__0_523 -> bb369__0_523 [label="return"];
    bb368__0_523 -> bb638__0_523 [label="unwind"];
    bb369__0_523 -> bb370__0_523 [label="0"];
    bb369__0_523 -> bb371__0_523 [label="1"];
    bb369__0_523 -> bb7__0_523 [label="otherwise"];
    bb370__0_523 -> bb374__0_523 [label="0"];
    bb370__0_523 -> bb373__0_523 [label="otherwise"];
    bb371__0_523 -> bb372__0_523 [label="return"];
    bb371__0_523 -> bb638__0_523 [label="unwind"];
    bb372__0_523 -> bb604__0_523 [label=""];
    bb373__0_523 -> bb375__0_523 [label="return"];
    bb373__0_523 -> bb638__0_523 [label="unwind"];
    bb374__0_523 -> bb389__0_523 [label=""];
    bb375__0_523 -> bb376__0_523 [label="1"];
    bb375__0_523 -> bb378__0_523 [label="otherwise"];
    bb376__0_523 -> bb377__0_523 [label="return"];
    bb376__0_523 -> bb638__0_523 [label="unwind"];
    bb377__0_523 -> bb379__0_523 [label=""];
    bb378__0_523 -> bb379__0_523 [label=""];
    bb379__0_523 -> bb380__0_523 [label="return"];
    bb379__0_523 -> bb638__0_523 [label="unwind"];
    bb380__0_523 -> bb381__0_523 [label="return"];
    bb380__0_523 -> bb638__0_523 [label="unwind"];
    bb381__0_523 -> bb382__0_523 [label="0"];
    bb381__0_523 -> bb383__0_523 [label="1"];
    bb381__0_523 -> bb7__0_523 [label="otherwise"];
    bb382__0_523 -> bb385__0_523 [label="return"];
    bb382__0_523 -> bb637__0_523 [label="unwind"];
    bb383__0_523 -> bb384__0_523 [label="return"];
    bb383__0_523 -> bb677__0_523 [label="unwind"];
    bb384__0_523 -> bb603__0_523 [label=""];
    bb385__0_523 -> bb386__0_523 [label="return"];
    bb385__0_523 -> bb637__0_523 [label="unwind"];
    bb386__0_523 -> bb388__0_523 [label="0"];
    bb386__0_523 -> bb387__0_523 [label="otherwise"];
    bb387__0_523 -> bb661__0_523 [label="return"];
    bb387__0_523 -> bb677__0_523 [label="unwind"];
    bb388__0_523 -> bb660__0_523 [label="return"];
    bb388__0_523 -> bb677__0_523 [label="unwind"];
    bb389__0_523 -> bb390__0_523 [label="return"];
    bb389__0_523 -> bb638__0_523 [label="unwind"];
    bb390__0_523 -> bb391__0_523 [label="return"];
    bb390__0_523 -> bb638__0_523 [label="unwind"];
    bb391__0_523 -> bb392__0_523 [label="return"];
    bb391__0_523 -> bb638__0_523 [label="unwind"];
    bb392__0_523 -> bb393__0_523 [label="0"];
    bb392__0_523 -> bb394__0_523 [label="1"];
    bb392__0_523 -> bb7__0_523 [label="otherwise"];
    bb393__0_523 -> bb396__0_523 [label="return"];
    bb393__0_523 -> bb638__0_523 [label="unwind"];
    bb394__0_523 -> bb395__0_523 [label="return"];
    bb394__0_523 -> bb638__0_523 [label="unwind"];
    bb395__0_523 -> bb602__0_523 [label=""];
    bb396__0_523 -> bb397__0_523 [label="return"];
    bb396__0_523 -> bb638__0_523 [label="unwind"];
    bb397__0_523 -> bb398__0_523 [label="success"];
    bb397__0_523 -> bb638__0_523 [label="unwind"];
    bb398__0_523 -> bb399__0_523 [label="return"];
    bb398__0_523 -> bb638__0_523 [label="unwind"];
    bb399__0_523 -> bb400__0_523 [label="return"];
    bb399__0_523 -> bb638__0_523 [label="unwind"];
    bb400__0_523 -> bb401__0_523 [label="0"];
    bb400__0_523 -> bb402__0_523 [label="1"];
    bb400__0_523 -> bb7__0_523 [label="otherwise"];
    bb401__0_523 -> bb404__0_523 [label="return"];
    bb401__0_523 -> bb638__0_523 [label="unwind"];
    bb402__0_523 -> bb403__0_523 [label="return"];
    bb402__0_523 -> bb638__0_523 [label="unwind"];
    bb403__0_523 -> bb601__0_523 [label=""];
    bb404__0_523 -> bb405__0_523 [label="success"];
    bb404__0_523 -> bb638__0_523 [label="unwind"];
    bb405__0_523 -> bb406__0_523 [label="return"];
    bb405__0_523 -> bb638__0_523 [label="unwind"];
    bb406__0_523 -> bb407__0_523 [label="success"];
    bb406__0_523 -> bb638__0_523 [label="unwind"];
    bb407__0_523 -> bb408__0_523 [label="return"];
    bb407__0_523 -> bb638__0_523 [label="unwind"];
    bb408__0_523 -> bb409__0_523 [label="return"];
    bb408__0_523 -> bb638__0_523 [label="unwind"];
    bb409__0_523 -> bb410__0_523 [label="0"];
    bb409__0_523 -> bb411__0_523 [label="1"];
    bb409__0_523 -> bb7__0_523 [label="otherwise"];
    bb410__0_523 -> bb413__0_523 [label="return"];
    bb410__0_523 -> bb636__0_523 [label="unwind"];
    bb411__0_523 -> bb412__0_523 [label="return"];
    bb411__0_523 -> bb676__0_523 [label="unwind"];
    bb412__0_523 -> bb665__0_523 [label=""];
    bb413__0_523 -> bb414__0_523 [label="return"];
    bb413__0_523 -> bb636__0_523 [label="unwind"];
    bb414__0_523 -> bb415__0_523 [label="return"];
    bb414__0_523 -> bb636__0_523 [label="unwind"];
    bb415__0_523 -> bb416__0_523 [label="0"];
    bb415__0_523 -> bb417__0_523 [label="1"];
    bb415__0_523 -> bb7__0_523 [label="otherwise"];
    bb416__0_523 -> bb662__0_523 [label="return"];
    bb416__0_523 -> bb676__0_523 [label="unwind"];
    bb417__0_523 -> bb418__0_523 [label="return"];
    bb417__0_523 -> bb636__0_523 [label="unwind"];
    bb418__0_523 -> bb665__0_523 [label="return"];
    bb418__0_523 -> bb676__0_523 [label="unwind"];
    bb419__0_523 -> bb444__0_523 [label="0"];
    bb419__0_523 -> bb420__0_523 [label="otherwise"];
    bb420__0_523 -> bb421__0_523 [label="return"];
    bb420__0_523 -> bb638__0_523 [label="unwind"];
    bb421__0_523 -> bb422__0_523 [label="return"];
    bb421__0_523 -> bb638__0_523 [label="unwind"];
    bb422__0_523 -> bb423__0_523 [label="0"];
    bb422__0_523 -> bb424__0_523 [label="1"];
    bb422__0_523 -> bb7__0_523 [label="otherwise"];
    bb423__0_523 -> bb426__0_523 [label="return"];
    bb423__0_523 -> bb635__0_523 [label="unwind"];
    bb424__0_523 -> bb425__0_523 [label="return"];
    bb424__0_523 -> bb675__0_523 [label="unwind"];
    bb425__0_523 -> bb599__0_523 [label=""];
    bb426__0_523 -> bb427__0_523 [label="return"];
    bb426__0_523 -> bb635__0_523 [label="unwind"];
    bb427__0_523 -> bb428__0_523 [label="return"];
    bb427__0_523 -> bb635__0_523 [label="unwind"];
    bb428__0_523 -> bb429__0_523 [label="return"];
    bb428__0_523 -> bb635__0_523 [label="unwind"];
    bb429__0_523 -> bb430__0_523 [label="return"];
    bb429__0_523 -> bb635__0_523 [label="unwind"];
    bb430__0_523 -> bb431__0_523 [label="0"];
    bb430__0_523 -> bb432__0_523 [label="1"];
    bb430__0_523 -> bb7__0_523 [label="otherwise"];
    bb431__0_523 -> bb434__0_523 [label="return"];
    bb431__0_523 -> bb638__0_523 [label="unwind"];
    bb432__0_523 -> bb433__0_523 [label="return"];
    bb432__0_523 -> bb635__0_523 [label="unwind"];
    bb433__0_523 -> bb598__0_523 [label="return"];
    bb433__0_523 -> bb638__0_523 [label="unwind"];
    bb434__0_523 -> bb436__0_523 [label="0"];
    bb434__0_523 -> bb435__0_523 [label="otherwise"];
    bb435__0_523 -> bb437__0_523 [label=""];
    bb436__0_523 -> bb437__0_523 [label=""];
    bb437__0_523 -> bb438__0_523 [label="return"];
    bb437__0_523 -> bb638__0_523 [label="unwind"];
    bb438__0_523 -> bb439__0_523 [label="return"];
    bb438__0_523 -> bb638__0_523 [label="unwind"];
    bb439__0_523 -> bb440__0_523 [label="return"];
    bb439__0_523 -> bb638__0_523 [label="unwind"];
    bb440__0_523 -> bb441__0_523 [label="0"];
    bb440__0_523 -> bb442__0_523 [label="1"];
    bb440__0_523 -> bb7__0_523 [label="otherwise"];
    bb441__0_523 -> bb597__0_523 [label=""];
    bb442__0_523 -> bb443__0_523 [label="return"];
    bb442__0_523 -> bb638__0_523 [label="unwind"];
    bb443__0_523 -> bb597__0_523 [label=""];
    bb444__0_523 -> bb446__0_523 [label="0"];
    bb444__0_523 -> bb445__0_523 [label="otherwise"];
    bb445__0_523 -> bb449__0_523 [label="0"];
    bb445__0_523 -> bb447__0_523 [label="otherwise"];
    bb446__0_523 -> bb451__0_523 [label=""];
    bb447__0_523 -> bb449__0_523 [label="0"];
    bb447__0_523 -> bb448__0_523 [label="otherwise"];
    bb448__0_523 -> bb450__0_523 [label=""];
    bb449__0_523 -> bb450__0_523 [label=""];
    bb450__0_523 -> bb451__0_523 [label=""];
    bb451__0_523 -> bb452__0_523 [label="return"];
    bb451__0_523 -> bb638__0_523 [label="unwind"];
    bb452__0_523 -> bb453__0_523 [label="return"];
    bb452__0_523 -> bb638__0_523 [label="unwind"];
    bb453__0_523 -> bb454__0_523 [label="return"];
    bb453__0_523 -> bb638__0_523 [label="unwind"];
    bb454__0_523 -> bb455__0_523 [label="return"];
    bb454__0_523 -> bb638__0_523 [label="unwind"];
    bb455__0_523 -> bb456__0_523 [label="return"];
    bb455__0_523 -> bb638__0_523 [label="unwind"];
    bb456__0_523 -> bb457__0_523 [label="return"];
    bb456__0_523 -> bb638__0_523 [label="unwind"];
    bb457__0_523 -> bb458__0_523 [label="return"];
    bb457__0_523 -> bb638__0_523 [label="unwind"];
    bb458__0_523 -> bb459__0_523 [label="0"];
    bb458__0_523 -> bb460__0_523 [label="1"];
    bb458__0_523 -> bb7__0_523 [label="otherwise"];
    bb459__0_523 -> bb463__0_523 [label="0"];
    bb459__0_523 -> bb462__0_523 [label="otherwise"];
    bb460__0_523 -> bb461__0_523 [label="return"];
    bb460__0_523 -> bb638__0_523 [label="unwind"];
    bb461__0_523 -> bb596__0_523 [label=""];
    bb462__0_523 -> bb464__0_523 [label="return"];
    bb462__0_523 -> bb638__0_523 [label="unwind"];
    bb463__0_523 -> bb485__0_523 [label=""];
    bb464__0_523 -> bb465__0_523 [label="return"];
    bb464__0_523 -> bb638__0_523 [label="unwind"];
    bb465__0_523 -> bb466__0_523 [label="0"];
    bb465__0_523 -> bb467__0_523 [label="1"];
    bb465__0_523 -> bb7__0_523 [label="otherwise"];
    bb466__0_523 -> bb469__0_523 [label="return"];
    bb466__0_523 -> bb638__0_523 [label="unwind"];
    bb467__0_523 -> bb468__0_523 [label="return"];
    bb467__0_523 -> bb638__0_523 [label="unwind"];
    bb468__0_523 -> bb594__0_523 [label=""];
    bb469__0_523 -> bb470__0_523 [label="return"];
    bb469__0_523 -> bb638__0_523 [label="unwind"];
    bb470__0_523 -> bb471__0_523 [label="0"];
    bb470__0_523 -> bb472__0_523 [label="1"];
    bb470__0_523 -> bb7__0_523 [label="otherwise"];
    bb471__0_523 -> bb474__0_523 [label="return"];
    bb471__0_523 -> bb634__0_523 [label="unwind"];
    bb472__0_523 -> bb473__0_523 [label="return"];
    bb472__0_523 -> bb674__0_523 [label="unwind"];
    bb473__0_523 -> bb593__0_523 [label=""];
    bb474__0_523 -> bb475__0_523 [label="return"];
    bb474__0_523 -> bb634__0_523 [label="unwind"];
    bb475__0_523 -> bb476__0_523 [label="return"];
    bb475__0_523 -> bb634__0_523 [label="unwind"];
    bb476__0_523 -> bb477__0_523 [label="return"];
    bb476__0_523 -> bb634__0_523 [label="unwind"];
    bb477__0_523 -> bb478__0_523 [label="return"];
    bb477__0_523 -> bb634__0_523 [label="unwind"];
    bb478__0_523 -> bb479__0_523 [label="return"];
    bb478__0_523 -> bb634__0_523 [label="unwind"];
    bb479__0_523 -> bb480__0_523 [label="0"];
    bb479__0_523 -> bb481__0_523 [label="1"];
    bb479__0_523 -> bb7__0_523 [label="otherwise"];
    bb480__0_523 -> bb483__0_523 [label="return"];
    bb480__0_523 -> bb634__0_523 [label="unwind"];
    bb481__0_523 -> bb482__0_523 [label="return"];
    bb481__0_523 -> bb634__0_523 [label="unwind"];
    bb482__0_523 -> bb593__0_523 [label="return"];
    bb482__0_523 -> bb638__0_523 [label="unwind"];
    bb483__0_523 -> bb484__0_523 [label="return"];
    bb483__0_523 -> bb638__0_523 [label="unwind"];
    bb484__0_523 -> bb485__0_523 [label=""];
    bb485__0_523 -> bb486__0_523 [label="return"];
    bb485__0_523 -> bb638__0_523 [label="unwind"];
    bb486__0_523 -> bb487__0_523 [label="success"];
    bb486__0_523 -> bb638__0_523 [label="unwind"];
    bb487__0_523 -> bb488__0_523 [label="return"];
    bb487__0_523 -> bb638__0_523 [label="unwind"];
    bb488__0_523 -> bb489__0_523 [label="success"];
    bb488__0_523 -> bb638__0_523 [label="unwind"];
    bb489__0_523 -> bb490__0_523 [label="return"];
    bb489__0_523 -> bb638__0_523 [label="unwind"];
    bb490__0_523 -> bb491__0_523 [label="return"];
    bb490__0_523 -> bb638__0_523 [label="unwind"];
    bb491__0_523 -> bb492__0_523 [label="0"];
    bb491__0_523 -> bb493__0_523 [label="1"];
    bb491__0_523 -> bb7__0_523 [label="otherwise"];
    bb492__0_523 -> bb495__0_523 [label="return"];
    bb492__0_523 -> bb633__0_523 [label="unwind"];
    bb493__0_523 -> bb494__0_523 [label="return"];
    bb493__0_523 -> bb673__0_523 [label="unwind"];
    bb494__0_523 -> bb664__0_523 [label=""];
    bb495__0_523 -> bb496__0_523 [label="return"];
    bb495__0_523 -> bb633__0_523 [label="unwind"];
    bb496__0_523 -> bb497__0_523 [label="return"];
    bb496__0_523 -> bb633__0_523 [label="unwind"];
    bb497__0_523 -> bb498__0_523 [label="0"];
    bb497__0_523 -> bb499__0_523 [label="1"];
    bb497__0_523 -> bb7__0_523 [label="otherwise"];
    bb498__0_523 -> bb663__0_523 [label="return"];
    bb498__0_523 -> bb673__0_523 [label="unwind"];
    bb499__0_523 -> bb500__0_523 [label="return"];
    bb499__0_523 -> bb633__0_523 [label="unwind"];
    bb500__0_523 -> bb664__0_523 [label="return"];
    bb500__0_523 -> bb673__0_523 [label="unwind"];
    bb501__0_523 -> bb502__0_523 [label="return"];
    bb501__0_523 -> bb638__0_523 [label="unwind"];
    bb502__0_523 -> bb503__0_523 [label="return"];
    bb502__0_523 -> bb638__0_523 [label="unwind"];
    bb503__0_523 -> bb504__0_523 [label="0"];
    bb503__0_523 -> bb505__0_523 [label="1"];
    bb503__0_523 -> bb7__0_523 [label="otherwise"];
    bb504__0_523 -> bb507__0_523 [label="return"];
    bb504__0_523 -> bb632__0_523 [label="unwind"];
    bb505__0_523 -> bb506__0_523 [label="return"];
    bb505__0_523 -> bb672__0_523 [label="unwind"];
    bb506__0_523 -> bb590__0_523 [label=""];
    bb507__0_523 -> bb508__0_523 [label="return"];
    bb507__0_523 -> bb632__0_523 [label="unwind"];
    bb508__0_523 -> bb509__0_523 [label="return"];
    bb508__0_523 -> bb632__0_523 [label="unwind"];
    bb509__0_523 -> bb510__0_523 [label="return"];
    bb509__0_523 -> bb632__0_523 [label="unwind"];
    bb510__0_523 -> bb511__0_523 [label="return"];
    bb510__0_523 -> bb632__0_523 [label="unwind"];
    bb511__0_523 -> bb512__0_523 [label="0"];
    bb511__0_523 -> bb513__0_523 [label="1"];
    bb511__0_523 -> bb7__0_523 [label="otherwise"];
    bb512__0_523 -> bb515__0_523 [label="return"];
    bb512__0_523 -> bb638__0_523 [label="unwind"];
    bb513__0_523 -> bb514__0_523 [label="return"];
    bb513__0_523 -> bb632__0_523 [label="unwind"];
    bb514__0_523 -> bb589__0_523 [label="return"];
    bb514__0_523 -> bb638__0_523 [label="unwind"];
    bb515__0_523 -> bb516__0_523 [label="return"];
    bb515__0_523 -> bb638__0_523 [label="unwind"];
    bb516__0_523 -> bb517__0_523 [label="return"];
    bb516__0_523 -> bb638__0_523 [label="unwind"];
    bb517__0_523 -> bb518__0_523 [label="return"];
    bb517__0_523 -> bb638__0_523 [label="unwind"];
    bb518__0_523 -> bb519__0_523 [label="0"];
    bb518__0_523 -> bb520__0_523 [label="1"];
    bb518__0_523 -> bb7__0_523 [label="otherwise"];
    bb519__0_523 -> bb523__0_523 [label=""];
    bb520__0_523 -> bb521__0_523 [label="return"];
    bb520__0_523 -> bb638__0_523 [label="unwind"];
    bb521__0_523 -> bb591__0_523 [label=""];
    bb522__0_523 -> bb523__0_523 [label=""];
    bb523__0_523 -> bb525__0_523 [label="0"];
    bb523__0_523 -> bb524__0_523 [label="otherwise"];
    bb524__0_523 -> bb592__0_523 [label=""];
    bb525__0_523 -> bb526__0_523 [label="return"];
    bb525__0_523 -> bb638__0_523 [label="unwind"];
    bb526__0_523 -> bb527__0_523 [label="return"];
    bb526__0_523 -> bb638__0_523 [label="unwind"];
    bb527__0_523 -> bb528__0_523 [label="0"];
    bb527__0_523 -> bb529__0_523 [label="1"];
    bb527__0_523 -> bb7__0_523 [label="otherwise"];
    bb528__0_523 -> bb531__0_523 [label="return"];
    bb528__0_523 -> bb631__0_523 [label="unwind"];
    bb529__0_523 -> bb530__0_523 [label="return"];
    bb529__0_523 -> bb671__0_523 [label="unwind"];
    bb530__0_523 -> bb588__0_523 [label=""];
    bb531__0_523 -> bb532__0_523 [label="return"];
    bb531__0_523 -> bb631__0_523 [label="unwind"];
    bb532__0_523 -> bb533__0_523 [label="return"];
    bb532__0_523 -> bb631__0_523 [label="unwind"];
    bb533__0_523 -> bb535__0_523 [label="0"];
    bb533__0_523 -> bb534__0_523 [label="otherwise"];
    bb534__0_523 -> bb536__0_523 [label=""];
    bb535__0_523 -> bb537__0_523 [label="0"];
    bb535__0_523 -> bb536__0_523 [label="otherwise"];
    bb536__0_523 -> bb551__0_523 [label=""];
    bb537__0_523 -> bb538__0_523 [label="return"];
    bb537__0_523 -> bb631__0_523 [label="unwind"];
    bb538__0_523 -> bb539__0_523 [label="return"];
    bb538__0_523 -> bb631__0_523 [label="unwind"];
    bb539__0_523 -> bb540__0_523 [label="return"];
    bb539__0_523 -> bb631__0_523 [label="unwind"];
    bb540__0_523 -> bb541__0_523 [label="return"];
    bb540__0_523 -> bb630__0_523 [label="unwind"];
    bb541__0_523 -> bb542__0_523 [label="return"];
    bb541__0_523 -> bb630__0_523 [label="unwind"];
    bb542__0_523 -> bb543__0_523 [label="return"];
    bb542__0_523 -> bb631__0_523 [label="unwind"];
    bb543__0_523 -> bb544__0_523 [label="return"];
    bb543__0_523 -> bb631__0_523 [label="unwind"];
    bb544__0_523 -> bb545__0_523 [label="return"];
    bb544__0_523 -> bb631__0_523 [label="unwind"];
    bb545__0_523 -> bb546__0_523 [label="return"];
    bb545__0_523 -> bb631__0_523 [label="unwind"];
    bb546__0_523 -> bb547__0_523 [label="return"];
    bb546__0_523 -> bb631__0_523 [label="unwind"];
    bb547__0_523 -> bb548__0_523 [label="return"];
    bb547__0_523 -> bb629__0_523 [label="unwind"];
    bb548__0_523 -> bb549__0_523 [label="return"];
    bb548__0_523 -> bb629__0_523 [label="unwind"];
    bb549__0_523 -> bb550__0_523 [label="return"];
    bb549__0_523 -> bb631__0_523 [label="unwind"];
    bb550__0_523 -> bb551__0_523 [label=""];
    bb551__0_523 -> bb552__0_523 [label="return"];
    bb551__0_523 -> bb631__0_523 [label="unwind"];
    bb552__0_523 -> bb553__0_523 [label="0"];
    bb552__0_523 -> bb554__0_523 [label="1"];
    bb552__0_523 -> bb7__0_523 [label="otherwise"];
    bb553__0_523 -> bb556__0_523 [label="return"];
    bb553__0_523 -> bb638__0_523 [label="unwind"];
    bb554__0_523 -> bb555__0_523 [label="return"];
    bb554__0_523 -> bb631__0_523 [label="unwind"];
    bb555__0_523 -> bb588__0_523 [label="return"];
    bb555__0_523 -> bb638__0_523 [label="unwind"];
    bb556__0_523 -> bb557__0_523 [label="return"];
    bb556__0_523 -> bb638__0_523 [label="unwind"];
    bb557__0_523 -> bb558__0_523 [label="return"];
    bb557__0_523 -> bb638__0_523 [label="unwind"];
    bb558__0_523 -> bb559__0_523 [label="0"];
    bb558__0_523 -> bb560__0_523 [label="1"];
    bb558__0_523 -> bb7__0_523 [label="otherwise"];
    bb559__0_523 -> bb562__0_523 [label="return"];
    bb559__0_523 -> bb628__0_523 [label="unwind"];
    bb560__0_523 -> bb561__0_523 [label="return"];
    bb560__0_523 -> bb670__0_523 [label="unwind"];
    bb561__0_523 -> bb587__0_523 [label=""];
    bb562__0_523 -> bb563__0_523 [label="return"];
    bb562__0_523 -> bb628__0_523 [label="unwind"];
    bb563__0_523 -> bb564__0_523 [label="0"];
    bb563__0_523 -> bb565__0_523 [label="1"];
    bb563__0_523 -> bb7__0_523 [label="otherwise"];
    bb564__0_523 -> bb568__0_523 [label="0"];
    bb564__0_523 -> bb567__0_523 [label="otherwise"];
    bb565__0_523 -> bb566__0_523 [label="return"];
    bb565__0_523 -> bb628__0_523 [label="unwind"];
    bb566__0_523 -> bb586__0_523 [label=""];
    bb567__0_523 -> bb571__0_523 [label=""];
    bb568__0_523 -> bb569__0_523 [label="return"];
    bb568__0_523 -> bb628__0_523 [label="unwind"];
    bb569__0_523 -> bb570__0_523 [label="return"];
    bb569__0_523 -> bb628__0_523 [label="unwind"];
    bb570__0_523 -> bb571__0_523 [label=""];
    bb571__0_523 -> bb572__0_523 [label="return"];
    bb571__0_523 -> bb628__0_523 [label="unwind"];
    bb572__0_523 -> bb573__0_523 [label="return"];
    bb572__0_523 -> bb628__0_523 [label="unwind"];
    bb573__0_523 -> bb574__0_523 [label="return"];
    bb573__0_523 -> bb628__0_523 [label="unwind"];
    bb574__0_523 -> bb575__0_523 [label="0"];
    bb574__0_523 -> bb576__0_523 [label="1"];
    bb574__0_523 -> bb7__0_523 [label="otherwise"];
    bb575__0_523 -> bb578__0_523 [label="return"];
    bb575__0_523 -> bb638__0_523 [label="unwind"];
    bb576__0_523 -> bb577__0_523 [label="return"];
    bb576__0_523 -> bb628__0_523 [label="unwind"];
    bb577__0_523 -> bb586__0_523 [label=""];
    bb578__0_523 -> bb579__0_523 [label="return"];
    bb578__0_523 -> bb638__0_523 [label="unwind"];
    bb579__0_523 -> bb580__0_523 [label="return"];
    bb579__0_523 -> bb638__0_523 [label="unwind"];
    bb580__0_523 -> bb581__0_523 [label="return"];
    bb580__0_523 -> bb639__0_523 [label="unwind"];
    bb581__0_523 -> bb582__0_523 [label="return"];
    bb581__0_523 -> bb640__0_523 [label="unwind"];
    bb582__0_523 -> bb583__0_523 [label="return"];
    bb582__0_523 -> bb685__0_523 [label="unwind"];
    bb583__0_523 -> bb584__0_523 [label="return"];
    bb583__0_523 -> bb657__0_523 [label="unwind"];
    bb584__0_523 -> bb585__0_523 [label="return"];
    bb584__0_523 -> bb658__0_523 [label="unwind"];
    bb585__0_523 -> bb627__0_523 [label=""];
    bb586__0_523 -> bb587__0_523 [label="return"];
    bb586__0_523 -> bb638__0_523 [label="unwind"];
    bb587__0_523 -> bb592__0_523 [label=""];
    bb588__0_523 -> bb592__0_523 [label=""];
    bb589__0_523 -> bb590__0_523 [label=""];
    bb590__0_523 -> bb591__0_523 [label=""];
    bb591__0_523 -> bb592__0_523 [label=""];
    bb592__0_523 -> bb595__0_523 [label=""];
    bb593__0_523 -> bb594__0_523 [label=""];
    bb594__0_523 -> bb595__0_523 [label=""];
    bb595__0_523 -> bb596__0_523 [label=""];
    bb596__0_523 -> bb600__0_523 [label=""];
    bb597__0_523 -> bb599__0_523 [label=""];
    bb598__0_523 -> bb599__0_523 [label=""];
    bb599__0_523 -> bb600__0_523 [label=""];
    bb600__0_523 -> bb601__0_523 [label=""];
    bb601__0_523 -> bb602__0_523 [label=""];
    bb602__0_523 -> bb605__0_523 [label=""];
    bb603__0_523 -> bb605__0_523 [label=""];
    bb604__0_523 -> bb605__0_523 [label=""];
    bb605__0_523 -> bb606__0_523 [label=""];
    bb606__0_523 -> bb607__0_523 [label="return"];
    bb606__0_523 -> bb639__0_523 [label="unwind"];
    bb607__0_523 -> bb608__0_523 [label="return"];
    bb607__0_523 -> bb640__0_523 [label="unwind"];
    bb608__0_523 -> bb609__0_523 [label="return"];
    bb608__0_523 -> bb685__0_523 [label="unwind"];
    bb609__0_523 -> bb612__0_523 [label=""];
    bb610__0_523 -> bb667__0_523 [label=""];
    bb611__0_523 -> bb612__0_523 [label=""];
    bb612__0_523 -> bb613__0_523 [label=""];
    bb613__0_523 -> bb621__0_523 [label=""];
    bb614__0_523 -> bb616__0_523 [label=""];
    bb615__0_523 -> bb616__0_523 [label=""];
    bb616__0_523 -> bb617__0_523 [label=""];
    bb617__0_523 -> bb618__0_523 [label=""];
    bb618__0_523 -> bb619__0_523 [label=""];
    bb619__0_523 -> bb620__0_523 [label="return"];
    bb619__0_523 -> bb685__0_523 [label="unwind"];
    bb620__0_523 -> bb621__0_523 [label=""];
    bb621__0_523 -> bb669__0_523 [label=""];
    bb622__0_523 -> bb623__0_523 [label=""];
    bb623__0_523 -> bb624__0_523 [label=""];
    bb624__0_523 -> bb625__0_523 [label="return"];
    bb624__0_523 -> bb657__0_523 [label="unwind"];
    bb625__0_523 -> bb626__0_523 [label="return"];
    bb625__0_523 -> bb658__0_523 [label="unwind"];
    bb626__0_523 -> bb627__0_523 [label=""];
    bb628__0_523 -> bb638__0_523 [label="return"];
    bb629__0_523 -> bb631__0_523 [label="return"];
    bb630__0_523 -> bb631__0_523 [label="return"];
    bb631__0_523 -> bb638__0_523 [label="return"];
    bb632__0_523 -> bb638__0_523 [label="return"];
    bb633__0_523 -> bb673__0_523 [label="return"];
    bb634__0_523 -> bb638__0_523 [label="return"];
    bb635__0_523 -> bb638__0_523 [label="return"];
    bb636__0_523 -> bb676__0_523 [label="return"];
    bb637__0_523 -> bb677__0_523 [label="return"];
    bb638__0_523 -> bb639__0_523 [label="return"];
    bb639__0_523 -> bb640__0_523 [label="return"];
    bb640__0_523 -> bb685__0_523 [label="return"];
    bb641__0_523 -> bb679__0_523 [label="return"];
    bb642__0_523 -> bb681__0_523 [label="return"];
    bb643__0_523 -> bb681__0_523 [label="return"];
    bb644__0_523 -> bb681__0_523 [label="return"];
    bb645__0_523 -> bb685__0_523 [label="return"];
    bb646__0_523 -> bb648__0_523 [label="return"];
    bb647__0_523 -> bb648__0_523 [label="return"];
    bb648__0_523 -> bb685__0_523 [label="return"];
    bb649__0_523 -> bb685__0_523 [label="return"];
    bb650__0_523 -> bb685__0_523 [label="return"];
    bb651__0_523 -> bb685__0_523 [label="return"];
    bb652__0_523 -> bb685__0_523 [label="return"];
    bb653__0_523 -> bb685__0_523 [label="return"];
    bb654__0_523 -> bb685__0_523 [label="return"];
    bb655__0_523 -> bb656__0_523 [label="return"];
    bb656__0_523 -> bb657__0_523 [label="return"];
    bb657__0_523 -> bb658__0_523 [label="return"];
    bb659__0_523 -> bb341__0_523 [label="return"];
    bb659__0_523 -> bb685__0_523 [label="unwind"];
    bb660__0_523 -> bb603__0_523 [label=""];
    bb661__0_523 -> bb389__0_523 [label=""];
    bb662__0_523 -> bb419__0_523 [label="0"];
    bb662__0_523 -> bb420__0_523 [label="otherwise"];
    bb663__0_523 -> bb522__0_523 [label="0"];
    bb663__0_523 -> bb501__0_523 [label="otherwise"];
    bb664__0_523 -> bb592__0_523 [label=""];
    bb665__0_523 -> bb600__0_523 [label=""];
    bb666__0_523 -> bb611__0_523 [label="return"];
    bb666__0_523 -> bb685__0_523 [label="unwind"];
    bb667__0_523 -> bb611__0_523 [label="0"];
    bb667__0_523 -> bb666__0_523 [label="otherwise"];
    bb668__0_523 -> bb622__0_523 [label="return"];
    bb668__0_523 -> bb656__0_523 [label="unwind"];
    bb669__0_523 -> bb622__0_523 [label="0"];
    bb669__0_523 -> bb668__0_523 [label="otherwise"];
    bb670__0_523 -> bb638__0_523 [label=""];
    bb671__0_523 -> bb638__0_523 [label=""];
    bb672__0_523 -> bb638__0_523 [label=""];
    bb673__0_523 -> bb638__0_523 [label=""];
    bb674__0_523 -> bb638__0_523 [label=""];
    bb675__0_523 -> bb638__0_523 [label=""];
    bb676__0_523 -> bb638__0_523 [label=""];
    bb677__0_523 -> bb638__0_523 [label=""];
    bb678__0_523 -> bb639__0_523 [label=""];
    bb679__0_523 -> bb681__0_523 [label=""];
    bb680__0_523 -> bb685__0_523 [label="return"];
    bb681__0_523 -> bb685__0_523 [label="0"];
    bb681__0_523 -> bb680__0_523 [label="otherwise"];
    bb682__0_523 -> bb685__0_523 [label=""];
    bb683__0_523 -> bb685__0_523 [label=""];
    bb684__0_523 -> bb656__0_523 [label="return"];
    bb685__0_523 -> bb656__0_523 [label="0"];
    bb685__0_523 -> bb684__0_523 [label="otherwise"];
    bb686__0_523 -> bb656__0_523 [label=""];
    bb687__0_523 -> bb657__0_523 [label=""];
    bb688__0_523 -> bb658__0_523 [label=""];
}
