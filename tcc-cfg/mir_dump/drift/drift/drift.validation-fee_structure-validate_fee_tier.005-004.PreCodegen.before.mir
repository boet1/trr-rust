// MIR for `validate_fee_tier` before PreCodegen

fn validate_fee_tier(_1: usize, _2: &state::state::FeeTier, _3: u32) -> std::result::Result<(), error::ErrorCode> {
    debug fee_tier_index => _1;
    debug fee_tier => _2;
    debug filler_reward_numerator => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: bool;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let _8: ();
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _10: std::result::Result<(), error::ErrorCode>;
    let mut _11: bool;
    let mut _12: ();
    let _14: ();
    let mut _15: &str;
    let _16: &str;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let _19: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[&str; 2];
    let _24: &[&str; 2];
    let _25: [&str; 2];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let mut _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &error::ErrorCode;
    let _32: &error::ErrorCode;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: &std::string::String;
    let _37: &std::string::String;
    let _38: std::string::String;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[&str; 3];
    let _43: &[&str; 3];
    let _44: [&str; 3];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let mut _46: &[core::fmt::rt::Argument<'_>; 2];
    let _47: &[core::fmt::rt::Argument<'_>; 2];
    let _48: [core::fmt::rt::Argument<'_>; 2];
    let mut _49: core::fmt::rt::Argument<'_>;
    let mut _50: &u32;
    let _51: &u32;
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &u32;
    let _54: &u32;
    let mut _55: error::ErrorCode;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: bool;
    let mut _63: u32;
    let mut _64: u32;
    let _65: ();
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _67: std::result::Result<(), error::ErrorCode>;
    let mut _68: bool;
    let mut _69: ();
    let _71: ();
    let mut _72: &str;
    let _73: &str;
    let mut _74: &std::string::String;
    let _75: &std::string::String;
    let _76: std::string::String;
    let mut _78: std::fmt::Arguments<'_>;
    let mut _79: &[&str];
    let mut _80: &[&str; 2];
    let _81: &[&str; 2];
    let _82: [&str; 2];
    let mut _83: &[core::fmt::rt::Argument<'_>];
    let mut _84: &[core::fmt::rt::Argument<'_>; 1];
    let _85: &[core::fmt::rt::Argument<'_>; 1];
    let _86: [core::fmt::rt::Argument<'_>; 1];
    let mut _87: core::fmt::rt::Argument<'_>;
    let mut _88: &error::ErrorCode;
    let _89: &error::ErrorCode;
    let _90: ();
    let mut _91: &str;
    let _92: &str;
    let mut _93: &std::string::String;
    let _94: &std::string::String;
    let _95: std::string::String;
    let mut _97: std::fmt::Arguments<'_>;
    let mut _98: &[&str];
    let mut _99: &[&str; 3];
    let _100: &[&str; 3];
    let _101: [&str; 3];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let mut _103: &[core::fmt::rt::Argument<'_>; 2];
    let _104: &[core::fmt::rt::Argument<'_>; 2];
    let _105: [core::fmt::rt::Argument<'_>; 2];
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &u32;
    let _108: &u32;
    let mut _109: core::fmt::rt::Argument<'_>;
    let mut _110: &u32;
    let _111: &u32;
    let mut _112: error::ErrorCode;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _119: bool;
    let mut _120: u32;
    let mut _121: u32;
    let _122: ();
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _124: std::result::Result<(), error::ErrorCode>;
    let mut _125: bool;
    let mut _126: ();
    let _128: ();
    let mut _129: &str;
    let _130: &str;
    let mut _131: &std::string::String;
    let _132: &std::string::String;
    let _133: std::string::String;
    let mut _135: std::fmt::Arguments<'_>;
    let mut _136: &[&str];
    let mut _137: &[&str; 2];
    let _138: &[&str; 2];
    let _139: [&str; 2];
    let mut _140: &[core::fmt::rt::Argument<'_>];
    let mut _141: &[core::fmt::rt::Argument<'_>; 1];
    let _142: &[core::fmt::rt::Argument<'_>; 1];
    let _143: [core::fmt::rt::Argument<'_>; 1];
    let mut _144: core::fmt::rt::Argument<'_>;
    let mut _145: &error::ErrorCode;
    let _146: &error::ErrorCode;
    let _147: ();
    let mut _148: &str;
    let _149: &str;
    let mut _150: &std::string::String;
    let _151: &std::string::String;
    let _152: std::string::String;
    let mut _154: std::fmt::Arguments<'_>;
    let mut _155: &[&str];
    let mut _156: &[&str; 3];
    let _157: &[&str; 3];
    let _158: [&str; 3];
    let mut _159: &[core::fmt::rt::Argument<'_>];
    let mut _160: &[core::fmt::rt::Argument<'_>; 2];
    let _161: &[core::fmt::rt::Argument<'_>; 2];
    let _162: [core::fmt::rt::Argument<'_>; 2];
    let mut _163: core::fmt::rt::Argument<'_>;
    let mut _164: &u32;
    let _165: &u32;
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &u32;
    let _168: &u32;
    let mut _169: error::ErrorCode;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _176: bool;
    let mut _177: u32;
    let mut _178: u32;
    let _179: ();
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _181: std::result::Result<(), error::ErrorCode>;
    let mut _182: bool;
    let mut _183: ();
    let _185: ();
    let mut _186: &str;
    let _187: &str;
    let mut _188: &std::string::String;
    let _189: &std::string::String;
    let _190: std::string::String;
    let mut _192: std::fmt::Arguments<'_>;
    let mut _193: &[&str];
    let mut _194: &[&str; 2];
    let _195: &[&str; 2];
    let _196: [&str; 2];
    let mut _197: &[core::fmt::rt::Argument<'_>];
    let mut _198: &[core::fmt::rt::Argument<'_>; 1];
    let _199: &[core::fmt::rt::Argument<'_>; 1];
    let _200: [core::fmt::rt::Argument<'_>; 1];
    let mut _201: core::fmt::rt::Argument<'_>;
    let mut _202: &error::ErrorCode;
    let _203: &error::ErrorCode;
    let _204: ();
    let mut _205: &str;
    let _206: &str;
    let mut _207: &std::string::String;
    let _208: &std::string::String;
    let _209: std::string::String;
    let mut _211: std::fmt::Arguments<'_>;
    let mut _212: &[&str];
    let mut _213: &[&str; 3];
    let _214: &[&str; 3];
    let _215: [&str; 3];
    let mut _216: &[core::fmt::rt::Argument<'_>];
    let mut _217: &[core::fmt::rt::Argument<'_>; 2];
    let _218: &[core::fmt::rt::Argument<'_>; 2];
    let _219: [core::fmt::rt::Argument<'_>; 2];
    let mut _220: core::fmt::rt::Argument<'_>;
    let mut _221: &u32;
    let _222: &u32;
    let mut _223: core::fmt::rt::Argument<'_>;
    let mut _224: &u32;
    let _225: &u32;
    let mut _226: error::ErrorCode;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _233: u32;
    let mut _234: u32;
    let mut _235: u32;
    let mut _236: u32;
    let mut _237: (u32, bool);
    let mut _238: (u32, bool);
    let mut _239: bool;
    let mut _241: u32;
    let mut _242: u32;
    let mut _243: u32;
    let mut _244: u32;
    let mut _245: u32;
    let mut _246: u32;
    let mut _247: u32;
    let mut _248: (u32, bool);
    let mut _249: (u32, bool);
    let mut _250: bool;
    let mut _251: (u32, bool);
    let _252: ();
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _254: std::result::Result<(), error::ErrorCode>;
    let mut _255: bool;
    let mut _256: u32;
    let mut _257: u32;
    let mut _258: ();
    let _260: ();
    let mut _261: &str;
    let _262: &str;
    let mut _263: &std::string::String;
    let _264: &std::string::String;
    let _265: std::string::String;
    let mut _267: std::fmt::Arguments<'_>;
    let mut _268: &[&str];
    let mut _269: &[&str; 2];
    let _270: &[&str; 2];
    let _271: [&str; 2];
    let mut _272: &[core::fmt::rt::Argument<'_>];
    let mut _273: &[core::fmt::rt::Argument<'_>; 1];
    let _274: &[core::fmt::rt::Argument<'_>; 1];
    let _275: [core::fmt::rt::Argument<'_>; 1];
    let mut _276: core::fmt::rt::Argument<'_>;
    let mut _277: &error::ErrorCode;
    let _278: &error::ErrorCode;
    let _279: ();
    let mut _280: &str;
    let _281: &str;
    let mut _282: &std::string::String;
    let _283: &std::string::String;
    let _284: std::string::String;
    let mut _286: std::fmt::Arguments<'_>;
    let mut _287: &[&str];
    let mut _288: &[&str; 3];
    let _289: &[&str; 3];
    let _290: [&str; 3];
    let mut _291: &[core::fmt::rt::Argument<'_>];
    let mut _292: &[core::fmt::rt::Argument<'_>; 2];
    let _293: &[core::fmt::rt::Argument<'_>; 2];
    let _294: [core::fmt::rt::Argument<'_>; 2];
    let mut _295: core::fmt::rt::Argument<'_>;
    let mut _296: &u32;
    let _297: &u32;
    let mut _298: core::fmt::rt::Argument<'_>;
    let mut _299: &usize;
    let _300: &usize;
    let mut _301: error::ErrorCode;
    let mut _302: isize;
    let mut _304: !;
    let mut _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _308: u128;
    let mut _309: u128;
    let mut _310: u128;
    let mut _311: u32;
    let mut _312: (u128, bool);
    let mut _313: u128;
    let mut _314: u32;
    let mut _315: bool;
    let mut _316: u128;
    let mut _317: u128;
    let mut _318: u128;
    let mut _319: u32;
    let mut _320: (u128, bool);
    let mut _321: u128;
    let mut _322: u32;
    let mut _323: bool;
    let _324: ();
    let mut _325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _326: std::result::Result<(), error::ErrorCode>;
    let mut _327: bool;
    let mut _328: ();
    let _330: ();
    let mut _331: &str;
    let _332: &str;
    let mut _333: &std::string::String;
    let _334: &std::string::String;
    let _335: std::string::String;
    let mut _337: std::fmt::Arguments<'_>;
    let mut _338: &[&str];
    let mut _339: &[&str; 2];
    let _340: &[&str; 2];
    let _341: [&str; 2];
    let mut _342: &[core::fmt::rt::Argument<'_>];
    let mut _343: &[core::fmt::rt::Argument<'_>; 1];
    let _344: &[core::fmt::rt::Argument<'_>; 1];
    let _345: [core::fmt::rt::Argument<'_>; 1];
    let mut _346: core::fmt::rt::Argument<'_>;
    let mut _347: &error::ErrorCode;
    let _348: &error::ErrorCode;
    let _349: ();
    let mut _350: &str;
    let _351: &str;
    let mut _352: &std::string::String;
    let _353: &std::string::String;
    let _354: std::string::String;
    let mut _356: std::fmt::Arguments<'_>;
    let mut _357: &[&str];
    let mut _358: &[&str; 3];
    let _359: &[&str; 3];
    let _360: [&str; 3];
    let mut _361: &[core::fmt::rt::Argument<'_>];
    let mut _362: &[core::fmt::rt::Argument<'_>; 2];
    let _363: &[core::fmt::rt::Argument<'_>; 2];
    let _364: [core::fmt::rt::Argument<'_>; 2];
    let mut _365: core::fmt::rt::Argument<'_>;
    let mut _366: &u32;
    let _367: &u32;
    let mut _368: core::fmt::rt::Argument<'_>;
    let mut _369: &usize;
    let _370: &usize;
    let mut _371: error::ErrorCode;
    let mut _372: isize;
    let mut _374: !;
    let mut _375: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _377: ();
    scope 1 {
        debug fee_valid => _4;
        let _13: error::ErrorCode;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: ();
        let _61: bool;
        scope 2 {
            debug error_code => _13;
            let _20: std::string::String;
            let _39: std::string::String;
            let mut _388: &[&str; 3];
            let mut _389: &[&str; 2];
            scope 3 {
                debug res => _20;
            }
            scope 4 {
                debug res => _39;
            }
        }
        scope 5 {
            debug residual => _57;
            scope 6 {
            }
        }
        scope 7 {
            debug val => _60;
            scope 8 {
            }
        }
        scope 9 {
            debug maker_rebate_valid => _61;
            let _70: error::ErrorCode;
            let _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _117: ();
            let _118: bool;
            scope 10 {
                debug error_code => _70;
                let _77: std::string::String;
                let _96: std::string::String;
                let mut _386: &[&str; 3];
                let mut _387: &[&str; 2];
                scope 11 {
                    debug res => _77;
                }
                scope 12 {
                    debug res => _96;
                }
            }
            scope 13 {
                debug residual => _114;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _117;
                scope 16 {
                }
            }
            scope 17 {
                debug referee_discount_valid => _118;
                let _127: error::ErrorCode;
                let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _174: ();
                let _175: bool;
                scope 18 {
                    debug error_code => _127;
                    let _134: std::string::String;
                    let _153: std::string::String;
                    let mut _384: &[&str; 3];
                    let mut _385: &[&str; 2];
                    scope 19 {
                        debug res => _134;
                    }
                    scope 20 {
                        debug res => _153;
                    }
                }
                scope 21 {
                    debug residual => _171;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _174;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug referrer_reward_valid => _175;
                    let _184: error::ErrorCode;
                    let _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _231: ();
                    let _232: u32;
                    scope 26 {
                        debug error_code => _184;
                        let _191: std::string::String;
                        let _210: std::string::String;
                        let mut _382: &[&str; 3];
                        let mut _383: &[&str; 2];
                        scope 27 {
                            debug res => _191;
                        }
                        scope 28 {
                            debug res => _210;
                        }
                    }
                    scope 29 {
                        debug residual => _228;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _231;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug taker_fee => _232;
                        let _240: u32;
                        scope 34 {
                            debug fee_to_market_pre_maker => _240;
                            let _259: error::ErrorCode;
                            let _303: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _306: ();
                            let _307: bool;
                            scope 35 {
                                debug error_code => _259;
                                let _266: std::string::String;
                                let _285: std::string::String;
                                let mut _380: &[&str; 3];
                                let mut _381: &[&str; 2];
                                scope 36 {
                                    debug res => _266;
                                }
                                scope 37 {
                                    debug res => _285;
                                }
                            }
                            scope 38 {
                                debug residual => _303;
                                scope 39 {
                                }
                            }
                            scope 40 {
                                debug val => _306;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug has_fee_for_market => _307;
                                let _329: error::ErrorCode;
                                let _373: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _376: ();
                                scope 43 {
                                    debug error_code => _329;
                                    let _336: std::string::String;
                                    let _355: std::string::String;
                                    let mut _378: &[&str; 3];
                                    let mut _379: &[&str; 2];
                                    scope 44 {
                                        debug res => _336;
                                    }
                                    scope 45 {
                                        debug res => _355;
                                    }
                                }
                                scope 46 {
                                    debug residual => _373;
                                    scope 47 {
                                    }
                                }
                                scope 48 {
                                    debug val => _376;
                                    scope 49 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_2).0: u32);
        _5 = Le(move _6, const 300_u32);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = ((*_2).1: u32);
        _4 = Ge(move _7, const _);
        StorageDead(_7);
        goto -> bb3;
    }

    bb2: {
        StorageDead(_6);
        _4 = const false;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _4;
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageLive(_12);
        _12 = ();
        _10 = std::result::Result::<(), error::ErrorCode>::Ok(move _12);
        StorageDead(_12);
        goto -> bb19;
    }

    bb5: {
        StorageLive(_13);
        _13 = error::ErrorCode::InvalidFeeStructure;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _389 = const _;
        _24 = &(*_389);
        _23 = &(*_24);
        _22 = move _23 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_13;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _31) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_31);
        _29 = [move _30];
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_27);
        _21 = Arguments::<'_>::new_v1(move _22, move _26) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = format(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_24);
        _19 = move _20;
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = <String as Deref>::deref(move _17) -> [return: bb9, unwind: bb162];
    }

    bb9: {
        _15 = &(*_16);
        StorageDead(_17);
        _14 = solana_program::log::sol_log(move _15) -> [return: bb10, unwind: bb162];
    }

    bb10: {
        StorageDead(_15);
        drop(_19) -> [return: bb11, unwind: bb163];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _388 = const _;
        _43 = &(*_388);
        _42 = &(*_43);
        _41 = move _42 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_2).0: u32);
        _50 = &(*_51);
        _49 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _50) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &((*_2).1: u32);
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _53) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_53);
        _48 = [move _49, move _52];
        StorageDead(_52);
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = move _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_46);
        _40 = Arguments::<'_>::new_v1(move _41, move _45) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_45);
        StorageDead(_41);
        _39 = format(move _40) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_40);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_43);
        _38 = move _39;
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = <String as Deref>::deref(move _36) -> [return: bb16, unwind: bb161];
    }

    bb16: {
        _34 = &(*_35);
        StorageDead(_36);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb17, unwind: bb161];
    }

    bb17: {
        StorageDead(_34);
        drop(_38) -> [return: bb18, unwind: bb163];
    }

    bb18: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_55);
        _55 = _13;
        _10 = std::result::Result::<(), error::ErrorCode>::Err(move _55);
        StorageDead(_55);
        StorageDead(_13);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_11);
        _9 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _10) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_10);
        _56 = discriminant(_9);
        switchInt(move _56) -> [0: bb21, 1: bb23, otherwise: bb22];
    }

    bb21: {
        StorageLive(_60);
        _60 = ((_9 as Continue).0: ());
        _8 = _60;
        StorageDead(_60);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = ((*_2).2: u32);
        _62 = Le(move _63, const 30_u32);
        switchInt(move _62) -> [0: bb26, otherwise: bb25];
    }

    bb22: {
        unreachable;
    }

    bb23: {
        StorageLive(_57);
        _57 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb149;
    }

    bb25: {
        StorageDead(_63);
        StorageLive(_64);
        _64 = ((*_2).3: u32);
        _61 = Ge(move _64, const _);
        StorageDead(_64);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_63);
        _61 = const false;
        goto -> bb27;
    }

    bb27: {
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _61;
        switchInt(move _68) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        StorageLive(_69);
        _69 = ();
        _67 = std::result::Result::<(), error::ErrorCode>::Ok(move _69);
        StorageDead(_69);
        goto -> bb43;
    }

    bb29: {
        StorageLive(_70);
        _70 = error::ErrorCode::InvalidFeeStructure;
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _387 = const _;
        _81 = &(*_387);
        _80 = &(*_81);
        _79 = move _80 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_80);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_70;
        _88 = &(*_89);
        _87 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _88) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_88);
        _86 = [move _87];
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = move _84 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_84);
        _78 = Arguments::<'_>::new_v1(move _79, move _83) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_83);
        StorageDead(_79);
        _77 = format(move _78) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_78);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_81);
        _76 = move _77;
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = <String as Deref>::deref(move _74) -> [return: bb33, unwind: bb160];
    }

    bb33: {
        _72 = &(*_73);
        StorageDead(_74);
        _71 = solana_program::log::sol_log(move _72) -> [return: bb34, unwind: bb160];
    }

    bb34: {
        StorageDead(_72);
        drop(_76) -> [return: bb35, unwind: bb163];
    }

    bb35: {
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_71);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _386 = const _;
        _100 = &(*_386);
        _99 = &(*_100);
        _98 = move _99 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &((*_2).2: u32);
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _107) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_107);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &((*_2).3: u32);
        _110 = &(*_111);
        _109 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _110) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_110);
        _105 = [move _106, move _109];
        StorageDead(_109);
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = move _103 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_103);
        _97 = Arguments::<'_>::new_v1(move _98, move _102) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_102);
        StorageDead(_98);
        _96 = format(move _97) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_97);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        _95 = move _96;
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = <String as Deref>::deref(move _93) -> [return: bb40, unwind: bb159];
    }

    bb40: {
        _91 = &(*_92);
        StorageDead(_93);
        _90 = solana_program::log::sol_log(move _91) -> [return: bb41, unwind: bb159];
    }

    bb41: {
        StorageDead(_91);
        drop(_95) -> [return: bb42, unwind: bb163];
    }

    bb42: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_112);
        _112 = _70;
        _67 = std::result::Result::<(), error::ErrorCode>::Err(move _112);
        StorageDead(_112);
        StorageDead(_70);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_68);
        _66 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _67) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_67);
        _113 = discriminant(_66);
        switchInt(move _113) -> [0: bb45, 1: bb46, otherwise: bb22];
    }

    bb45: {
        StorageLive(_117);
        _117 = ((_66 as Continue).0: ());
        _65 = _117;
        StorageDead(_117);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = ((*_2).6: u32);
        _119 = Le(move _120, const _);
        switchInt(move _119) -> [0: bb49, otherwise: bb48];
    }

    bb46: {
        StorageLive(_114);
        _114 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_116);
        _116 = _114;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _116) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb148;
    }

    bb48: {
        StorageDead(_120);
        StorageLive(_121);
        _121 = ((*_2).7: u32);
        _118 = Eq(move _121, const _);
        StorageDead(_121);
        goto -> bb50;
    }

    bb49: {
        StorageDead(_120);
        _118 = const false;
        goto -> bb50;
    }

    bb50: {
        StorageDead(_119);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = _118;
        switchInt(move _125) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        StorageLive(_126);
        _126 = ();
        _124 = std::result::Result::<(), error::ErrorCode>::Ok(move _126);
        StorageDead(_126);
        goto -> bb66;
    }

    bb52: {
        StorageLive(_127);
        _127 = error::ErrorCode::InvalidFeeStructure;
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _385 = const _;
        _138 = &(*_385);
        _137 = &(*_138);
        _136 = move _137 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_137);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &_127;
        _145 = &(*_146);
        _144 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _145) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_145);
        _143 = [move _144];
        StorageDead(_144);
        _142 = &_143;
        _141 = &(*_142);
        _140 = move _141 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_141);
        _135 = Arguments::<'_>::new_v1(move _136, move _140) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_140);
        StorageDead(_136);
        _134 = format(move _135) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_135);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_138);
        _133 = move _134;
        StorageDead(_134);
        _132 = &_133;
        _131 = &(*_132);
        _130 = <String as Deref>::deref(move _131) -> [return: bb56, unwind: bb158];
    }

    bb56: {
        _129 = &(*_130);
        StorageDead(_131);
        _128 = solana_program::log::sol_log(move _129) -> [return: bb57, unwind: bb158];
    }

    bb57: {
        StorageDead(_129);
        drop(_133) -> [return: bb58, unwind: bb163];
    }

    bb58: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_128);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _384 = const _;
        _157 = &(*_384);
        _156 = &(*_157);
        _155 = move _156 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_156);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &((*_2).6: u32);
        _164 = &(*_165);
        _163 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _164) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_164);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &((*_2).7: u32);
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _167) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_167);
        _162 = [move _163, move _166];
        StorageDead(_166);
        StorageDead(_163);
        _161 = &_162;
        _160 = &(*_161);
        _159 = move _160 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_160);
        _154 = Arguments::<'_>::new_v1(move _155, move _159) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_159);
        StorageDead(_155);
        _153 = format(move _154) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_154);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_157);
        _152 = move _153;
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = <String as Deref>::deref(move _150) -> [return: bb63, unwind: bb157];
    }

    bb63: {
        _148 = &(*_149);
        StorageDead(_150);
        _147 = solana_program::log::sol_log(move _148) -> [return: bb64, unwind: bb157];
    }

    bb64: {
        StorageDead(_148);
        drop(_152) -> [return: bb65, unwind: bb163];
    }

    bb65: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_147);
        StorageLive(_169);
        _169 = _127;
        _124 = std::result::Result::<(), error::ErrorCode>::Err(move _169);
        StorageDead(_169);
        StorageDead(_127);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_125);
        _123 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _124) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_124);
        _170 = discriminant(_123);
        switchInt(move _170) -> [0: bb68, 1: bb69, otherwise: bb22];
    }

    bb68: {
        StorageLive(_174);
        _174 = ((_123 as Continue).0: ());
        _122 = _174;
        StorageDead(_174);
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = ((*_2).4: u32);
        _176 = Le(move _177, const _);
        switchInt(move _176) -> [0: bb72, otherwise: bb71];
    }

    bb69: {
        StorageLive(_171);
        _171 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb147;
    }

    bb71: {
        StorageDead(_177);
        StorageLive(_178);
        _178 = ((*_2).5: u32);
        _175 = Eq(move _178, const _);
        StorageDead(_178);
        goto -> bb73;
    }

    bb72: {
        StorageDead(_177);
        _175 = const false;
        goto -> bb73;
    }

    bb73: {
        StorageDead(_176);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _175;
        switchInt(move _182) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        StorageLive(_183);
        _183 = ();
        _181 = std::result::Result::<(), error::ErrorCode>::Ok(move _183);
        StorageDead(_183);
        goto -> bb89;
    }

    bb75: {
        StorageLive(_184);
        _184 = error::ErrorCode::InvalidFeeStructure;
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _383 = const _;
        _195 = &(*_383);
        _194 = &(*_195);
        _193 = move _194 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_194);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = &_184;
        _202 = &(*_203);
        _201 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _202) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_202);
        _200 = [move _201];
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = move _198 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_198);
        _192 = Arguments::<'_>::new_v1(move _193, move _197) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_197);
        StorageDead(_193);
        _191 = format(move _192) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_192);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_195);
        _190 = move _191;
        StorageDead(_191);
        _189 = &_190;
        _188 = &(*_189);
        _187 = <String as Deref>::deref(move _188) -> [return: bb79, unwind: bb156];
    }

    bb79: {
        _186 = &(*_187);
        StorageDead(_188);
        _185 = solana_program::log::sol_log(move _186) -> [return: bb80, unwind: bb156];
    }

    bb80: {
        StorageDead(_186);
        drop(_190) -> [return: bb81, unwind: bb163];
    }

    bb81: {
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_185);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _382 = const _;
        _214 = &(*_382);
        _213 = &(*_214);
        _212 = move _213 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_213);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &((*_2).4: u32);
        _221 = &(*_222);
        _220 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _221) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_221);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &((*_2).5: u32);
        _224 = &(*_225);
        _223 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _224) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_224);
        _219 = [move _220, move _223];
        StorageDead(_223);
        StorageDead(_220);
        _218 = &_219;
        _217 = &(*_218);
        _216 = move _217 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_217);
        _211 = Arguments::<'_>::new_v1(move _212, move _216) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_216);
        StorageDead(_212);
        _210 = format(move _211) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_211);
        StorageDead(_225);
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_214);
        _209 = move _210;
        StorageDead(_210);
        _208 = &_209;
        _207 = &(*_208);
        _206 = <String as Deref>::deref(move _207) -> [return: bb86, unwind: bb155];
    }

    bb86: {
        _205 = &(*_206);
        StorageDead(_207);
        _204 = solana_program::log::sol_log(move _205) -> [return: bb87, unwind: bb155];
    }

    bb87: {
        StorageDead(_205);
        drop(_209) -> [return: bb88, unwind: bb163];
    }

    bb88: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_204);
        StorageLive(_226);
        _226 = _184;
        _181 = std::result::Result::<(), error::ErrorCode>::Err(move _226);
        StorageDead(_226);
        StorageDead(_184);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_182);
        _180 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _181) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_181);
        _227 = discriminant(_180);
        switchInt(move _227) -> [0: bb91, 1: bb92, otherwise: bb22];
    }

    bb91: {
        StorageLive(_231);
        _231 = ((_180 as Continue).0: ());
        _179 = _231;
        StorageDead(_231);
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = ((*_2).0: u32);
        StorageLive(_235);
        StorageLive(_236);
        _236 = ((*_2).6: u32);
        _237 = CheckedSub(const 100_u32, _236);
        assert(!move (_237.1: bool), "attempt to compute `{} - {}`, which would overflow", const 100_u32, move _236) -> [success: bb94, unwind continue];
    }

    bb92: {
        StorageLive(_228);
        _228 = ((_180 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_230);
        _230 = _228;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _230) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb146;
    }

    bb94: {
        _235 = move (_237.0: u32);
        StorageDead(_236);
        _238 = CheckedMul(_234, _235);
        assert(!move (_238.1: bool), "attempt to compute `{} * {}`, which would overflow", move _234, move _235) -> [success: bb95, unwind continue];
    }

    bb95: {
        _233 = move (_238.0: u32);
        StorageDead(_235);
        StorageDead(_234);
        _239 = Eq(const 100_u32, const 0_u32);
        assert(!move _239, "attempt to divide `{}` by zero", _233) -> [success: bb96, unwind continue];
    }

    bb96: {
        _232 = Div(move _233, const 100_u32);
        StorageDead(_233);
        StorageLive(_240);
        StorageLive(_241);
        _241 = _232;
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = _232;
        StorageLive(_245);
        StorageLive(_246);
        _246 = ((*_2).4: u32);
        StorageLive(_247);
        _247 = _3;
        _248 = CheckedAdd(_246, _247);
        assert(!move (_248.1: bool), "attempt to compute `{} + {}`, which would overflow", move _246, move _247) -> [success: bb97, unwind continue];
    }

    bb97: {
        _245 = move (_248.0: u32);
        StorageDead(_247);
        StorageDead(_246);
        _249 = CheckedMul(_244, _245);
        assert(!move (_249.1: bool), "attempt to compute `{} * {}`, which would overflow", move _244, move _245) -> [success: bb98, unwind continue];
    }

    bb98: {
        _243 = move (_249.0: u32);
        StorageDead(_245);
        StorageDead(_244);
        _250 = Eq(const 100_u32, const 0_u32);
        assert(!move _250, "attempt to divide `{}` by zero", _243) -> [success: bb99, unwind continue];
    }

    bb99: {
        _242 = Div(move _243, const 100_u32);
        StorageDead(_243);
        _251 = CheckedSub(_241, _242);
        assert(!move (_251.1: bool), "attempt to compute `{} - {}`, which would overflow", move _241, move _242) -> [success: bb100, unwind continue];
    }

    bb100: {
        _240 = move (_251.0: u32);
        StorageDead(_242);
        StorageDead(_241);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = _240;
        StorageLive(_257);
        _257 = ((*_2).0: u32);
        _255 = Le(move _256, move _257);
        switchInt(move _255) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_258);
        _258 = ();
        _254 = std::result::Result::<(), error::ErrorCode>::Ok(move _258);
        StorageDead(_258);
        goto -> bb116;
    }

    bb102: {
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_259);
        _259 = error::ErrorCode::InvalidFeeStructure;
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _381 = const _;
        _270 = &(*_381);
        _269 = &(*_270);
        _268 = move _269 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_269);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &_259;
        _277 = &(*_278);
        _276 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _277) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_277);
        _275 = [move _276];
        StorageDead(_276);
        _274 = &_275;
        _273 = &(*_274);
        _272 = move _273 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_273);
        _267 = Arguments::<'_>::new_v1(move _268, move _272) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_272);
        StorageDead(_268);
        _266 = format(move _267) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_267);
        StorageDead(_278);
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_270);
        _265 = move _266;
        StorageDead(_266);
        _264 = &_265;
        _263 = &(*_264);
        _262 = <String as Deref>::deref(move _263) -> [return: bb106, unwind: bb154];
    }

    bb106: {
        _261 = &(*_262);
        StorageDead(_263);
        _260 = solana_program::log::sol_log(move _261) -> [return: bb107, unwind: bb154];
    }

    bb107: {
        StorageDead(_261);
        drop(_265) -> [return: bb108, unwind: bb163];
    }

    bb108: {
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_260);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _380 = const _;
        _289 = &(*_380);
        _288 = &(*_289);
        _287 = move _288 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_288);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &((*_2).4: u32);
        _296 = &(*_297);
        _295 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _296) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_296);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = &_1;
        _299 = &(*_300);
        _298 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _299) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_299);
        _294 = [move _295, move _298];
        StorageDead(_298);
        StorageDead(_295);
        _293 = &_294;
        _292 = &(*_293);
        _291 = move _292 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_292);
        _286 = Arguments::<'_>::new_v1(move _287, move _291) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_291);
        StorageDead(_287);
        _285 = format(move _286) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_286);
        StorageDead(_300);
        StorageDead(_297);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_289);
        _284 = move _285;
        StorageDead(_285);
        _283 = &_284;
        _282 = &(*_283);
        _281 = <String as Deref>::deref(move _282) -> [return: bb113, unwind: bb153];
    }

    bb113: {
        _280 = &(*_281);
        StorageDead(_282);
        _279 = solana_program::log::sol_log(move _280) -> [return: bb114, unwind: bb153];
    }

    bb114: {
        StorageDead(_280);
        drop(_284) -> [return: bb115, unwind: bb163];
    }

    bb115: {
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_279);
        StorageLive(_301);
        _301 = _259;
        _254 = std::result::Result::<(), error::ErrorCode>::Err(move _301);
        StorageDead(_301);
        StorageDead(_259);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_255);
        _253 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _254) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_254);
        _302 = discriminant(_253);
        switchInt(move _302) -> [0: bb118, 1: bb119, otherwise: bb22];
    }

    bb118: {
        StorageLive(_306);
        _306 = ((_253 as Continue).0: ());
        _252 = _306;
        StorageDead(_306);
        StorageDead(_253);
        StorageDead(_252);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = _240;
        _310 = move _311 as u128 (IntToInt);
        StorageDead(_311);
        _312 = CheckedMul(_310, const _);
        assert(!move (_312.1: bool), "attempt to compute `{} * {}`, which would overflow", move _310, const _) -> [success: bb121, unwind continue];
    }

    bb119: {
        StorageLive(_303);
        _303 = ((_253 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_305);
        _305 = _303;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _305) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb145;
    }

    bb121: {
        _309 = move (_312.0: u128);
        StorageDead(_310);
        StorageLive(_313);
        StorageLive(_314);
        _314 = ((*_2).1: u32);
        _313 = move _314 as u128 (IntToInt);
        StorageDead(_314);
        _315 = Eq(_313, const 0_u128);
        assert(!move _315, "attempt to divide `{}` by zero", _309) -> [success: bb122, unwind continue];
    }

    bb122: {
        _308 = Div(move _309, move _313);
        StorageDead(_313);
        StorageDead(_309);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = ((*_2).2: u32);
        _318 = move _319 as u128 (IntToInt);
        StorageDead(_319);
        _320 = CheckedMul(_318, const _);
        assert(!move (_320.1: bool), "attempt to compute `{} * {}`, which would overflow", move _318, const _) -> [success: bb123, unwind continue];
    }

    bb123: {
        _317 = move (_320.0: u128);
        StorageDead(_318);
        StorageLive(_321);
        StorageLive(_322);
        _322 = ((*_2).3: u32);
        _321 = move _322 as u128 (IntToInt);
        StorageDead(_322);
        _323 = Eq(_321, const 0_u128);
        assert(!move _323, "attempt to divide `{}` by zero", _317) -> [success: bb124, unwind continue];
    }

    bb124: {
        _316 = Div(move _317, move _321);
        StorageDead(_321);
        StorageDead(_317);
        _307 = Ge(move _308, move _316);
        StorageDead(_316);
        StorageDead(_308);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = _307;
        switchInt(move _327) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        StorageLive(_328);
        _328 = ();
        _326 = std::result::Result::<(), error::ErrorCode>::Ok(move _328);
        StorageDead(_328);
        goto -> bb140;
    }

    bb126: {
        StorageLive(_329);
        _329 = error::ErrorCode::InvalidFeeStructure;
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _379 = const _;
        _340 = &(*_379);
        _339 = &(*_340);
        _338 = move _339 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_339);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _348 = &_329;
        _347 = &(*_348);
        _346 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _347) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_347);
        _345 = [move _346];
        StorageDead(_346);
        _344 = &_345;
        _343 = &(*_344);
        _342 = move _343 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_343);
        _337 = Arguments::<'_>::new_v1(move _338, move _342) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_342);
        StorageDead(_338);
        _336 = format(move _337) -> [return: bb129, unwind continue];
    }

    bb129: {
        StorageDead(_337);
        StorageDead(_348);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_340);
        _335 = move _336;
        StorageDead(_336);
        _334 = &_335;
        _333 = &(*_334);
        _332 = <String as Deref>::deref(move _333) -> [return: bb130, unwind: bb152];
    }

    bb130: {
        _331 = &(*_332);
        StorageDead(_333);
        _330 = solana_program::log::sol_log(move _331) -> [return: bb131, unwind: bb152];
    }

    bb131: {
        StorageDead(_331);
        drop(_335) -> [return: bb132, unwind: bb163];
    }

    bb132: {
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_330);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _378 = const _;
        _359 = &(*_378);
        _358 = &(*_359);
        _357 = move _358 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_358);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _367 = &((*_2).4: u32);
        _366 = &(*_367);
        _365 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _366) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_366);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &_1;
        _369 = &(*_370);
        _368 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _369) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_369);
        _364 = [move _365, move _368];
        StorageDead(_368);
        StorageDead(_365);
        _363 = &_364;
        _362 = &(*_363);
        _361 = move _362 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_362);
        _356 = Arguments::<'_>::new_v1(move _357, move _361) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_361);
        StorageDead(_357);
        _355 = format(move _356) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_356);
        StorageDead(_370);
        StorageDead(_367);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_359);
        _354 = move _355;
        StorageDead(_355);
        _353 = &_354;
        _352 = &(*_353);
        _351 = <String as Deref>::deref(move _352) -> [return: bb137, unwind: bb151];
    }

    bb137: {
        _350 = &(*_351);
        StorageDead(_352);
        _349 = solana_program::log::sol_log(move _350) -> [return: bb138, unwind: bb151];
    }

    bb138: {
        StorageDead(_350);
        drop(_354) -> [return: bb139, unwind: bb163];
    }

    bb139: {
        StorageDead(_354);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_349);
        StorageLive(_371);
        _371 = _329;
        _326 = std::result::Result::<(), error::ErrorCode>::Err(move _371);
        StorageDead(_371);
        StorageDead(_329);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_327);
        _325 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _326) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_326);
        _372 = discriminant(_325);
        switchInt(move _372) -> [0: bb142, 1: bb143, otherwise: bb22];
    }

    bb142: {
        StorageLive(_376);
        _376 = ((_325 as Continue).0: ());
        _324 = _376;
        StorageDead(_376);
        StorageDead(_325);
        StorageDead(_324);
        StorageLive(_377);
        _377 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _377);
        StorageDead(_377);
        StorageDead(_307);
        StorageDead(_240);
        StorageDead(_232);
        StorageDead(_175);
        StorageDead(_118);
        StorageDead(_61);
        StorageDead(_4);
        goto -> bb150;
    }

    bb143: {
        StorageLive(_373);
        _373 = ((_325 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_375);
        _375 = _373;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _375) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_325);
        StorageDead(_324);
        StorageDead(_307);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_240);
        StorageDead(_232);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_175);
        goto -> bb147;
    }

    bb147: {
        StorageDead(_118);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_61);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_4);
        goto -> bb150;
    }

    bb150: {
        return;
    }

    bb151 (cleanup): {
        drop(_354) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_335) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_284) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_265) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_209) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_190) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_152) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_133) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_95) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        drop(_76) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_38) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        drop(_19) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        resume;
    }
}
