digraph Mir_0_2619 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_free_collateral_delta_for_spot(_1: &amp;ReErased state::spot_market::SpotMarket, _2: u128, _3: &amp;ReErased state::oracle::StrictOraclePrice, _4: controller::position::PositionDirection, _5: u32, _6: u32) -&gt; std::result::Result&lt;u32, error::ErrorCode&gt;<br align="left"/>let mut _7: u32;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _10: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _11: controller::position::PositionDirection;<br align="left"/>let mut _12: u32;<br align="left"/>let mut _13: u32;<br align="left"/>let mut _14: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _15: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _16: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: i64;<br align="left"/>let mut _19: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let _20: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let _21: math::margin::MarginRequirementType;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: u32;<br align="left"/>let mut _27: u32;<br align="left"/>let mut _28: u32;<br align="left"/>let mut _29: u32;<br align="left"/>let mut _30: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _31: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _32: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _33: u128;<br align="left"/>let mut _34: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let _35: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let _36: math::margin::MarginRequirementType;<br align="left"/>let mut _37: isize;<br align="left"/>let _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _39: !;<br align="left"/>let mut _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _41: u32;<br align="left"/>let mut _42: u32;<br align="left"/>let mut _43: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let mut _44: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let mut _45: &amp;ReErased controller::position::PositionDirection;<br align="left"/>debug spot_market =&gt; _1;<br align="left"/>debug worst_case_token_amount =&gt; _2;<br align="left"/>debug strict_oracle_price =&gt; _3;<br align="left"/>debug order_direction =&gt; _4;<br align="left"/>debug user_custom_liability_weight =&gt; _5;<br align="left"/>debug user_custom_asset_weight =&gt; _6;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>debug residual =&gt; _38;<br align="left"/>debug val =&gt; _41;<br align="left"/>>;
    bb0__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;_4<br/>StorageLive(_10)<br/>_45 = const _<br/>_10 = &amp;(*_45)<br/></td></tr><tr><td align="left">_8 = &lt;controller::position::PositionDirection as PartialEq&gt;::eq(move _9, move _10)</td></tr></table>>];
    bb1__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb2__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;(*_1)<br/>StorageLive(_17)<br/>_17 = _2<br/>StorageLive(_18)<br/>_18 = ((*_3).0: i64)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_43 = const _<br/>_20 = &amp;(*_43)<br/>_19 = &amp;(*_20)<br/></td></tr><tr><td align="left">_15 = SpotMarket::get_asset_weight(move _16, move _17, move _18, move _19)</td></tr></table>>];
    bb3__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _15)</td></tr></table>>];
    bb4__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_22 = discriminant(_14)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb5__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_14 as Continue).0: u32)<br/>_13 = _26<br/>StorageDead(_26)<br/>StorageLive(_27)<br/>_27 = _6<br/></td></tr><tr><td align="left">_12 = &lt;u32 as Ord&gt;::min(move _13, move _27)</td></tr></table>>];
    bb6__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_14 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb8__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_20)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_7 = &lt;u32 as Sub&gt;::sub(const _, move _12)</td></tr></table>>];
    bb10__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_20)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;(*_1)<br/>StorageLive(_33)<br/>_33 = _2<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_44 = const _<br/>_35 = &amp;(*_44)<br/>_34 = &amp;(*_35)<br/></td></tr><tr><td align="left">_31 = SpotMarket::get_liability_weight(move _32, move _33, move _34)</td></tr></table>>];
    bb12__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_30 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _31)</td></tr></table>>];
    bb13__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>_37 = discriminant(_30)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb14__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_30 as Continue).0: u32)<br/>_29 = _41<br/>StorageDead(_41)<br/>StorageLive(_42)<br/>_42 = _5<br/></td></tr><tr><td align="left">_28 = &lt;u32 as Ord&gt;::max(move _29, move _42)</td></tr></table>>];
    bb15__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_30 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_40)<br/>_40 = _38<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _40)</td></tr></table>>];
    bb16__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_38)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_35)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_7 = &lt;u32 as Sub&gt;::sub(move _28, const _)</td></tr></table>>];
    bb18__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_35)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_0 = std::result::Result::&lt;u32, error::ErrorCode&gt;::Ok(move _7)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_2619 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2619 -> bb1__0_2619 [label="return"];
    bb1__0_2619 -> bb11__0_2619 [label="0"];
    bb1__0_2619 -> bb2__0_2619 [label="otherwise"];
    bb2__0_2619 -> bb3__0_2619 [label="return"];
    bb3__0_2619 -> bb4__0_2619 [label="return"];
    bb4__0_2619 -> bb5__0_2619 [label="0"];
    bb4__0_2619 -> bb7__0_2619 [label="1"];
    bb4__0_2619 -> bb6__0_2619 [label="otherwise"];
    bb5__0_2619 -> bb9__0_2619 [label="return"];
    bb7__0_2619 -> bb8__0_2619 [label="return"];
    bb8__0_2619 -> bb20__0_2619 [label=""];
    bb9__0_2619 -> bb10__0_2619 [label="return"];
    bb10__0_2619 -> bb19__0_2619 [label=""];
    bb11__0_2619 -> bb12__0_2619 [label="return"];
    bb12__0_2619 -> bb13__0_2619 [label="return"];
    bb13__0_2619 -> bb14__0_2619 [label="0"];
    bb13__0_2619 -> bb15__0_2619 [label="1"];
    bb13__0_2619 -> bb6__0_2619 [label="otherwise"];
    bb14__0_2619 -> bb17__0_2619 [label="return"];
    bb15__0_2619 -> bb16__0_2619 [label="return"];
    bb16__0_2619 -> bb20__0_2619 [label=""];
    bb17__0_2619 -> bb18__0_2619 [label="return"];
    bb18__0_2619 -> bb19__0_2619 [label=""];
    bb19__0_2619 -> bb21__0_2619 [label=""];
    bb20__0_2619 -> bb21__0_2619 [label=""];
}
