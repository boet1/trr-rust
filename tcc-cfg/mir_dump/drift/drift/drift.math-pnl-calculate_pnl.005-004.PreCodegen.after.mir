// MIR for `calculate_pnl` after PreCodegen

fn calculate_pnl(_1: u128, _2: u128, _3: SwapDirection) -> std::result::Result<i128, error::ErrorCode> {
    debug exit_value => _1;
    debug entry_value => _2;
    debug swap_direction_to_close => _3;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let mut _4: isize;
    let mut _5: i128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _7: std::result::Result<i128, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: i128;
    let mut _14: i128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _16: std::result::Result<i128, error::ErrorCode>;
    let mut _17: u128;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: i128;
    let mut _23: i128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _25: std::result::Result<i128, error::ErrorCode>;
    let mut _26: u128;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _31: i128;
    let mut _32: i128;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _34: std::result::Result<i128, error::ErrorCode>;
    let mut _35: u128;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: i128;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _19;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _22;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _28;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _31;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _37;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _40;
        scope 16 {
        }
    }

    bb0: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _2;
        _25 = <u128 as Cast>::cast::<i128>(move _26) -> [return: bb15, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        _7 = <u128 as Cast>::cast::<i128>(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        _6 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: i128);
        _5 = _13;
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _2;
        _16 = <u128 as Cast>::cast::<i128>(move _17) -> [return: bb9, unwind continue];
    }

    bb7: {
        StorageLive(_10);
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_12);
        StorageDead(_10);
        goto -> bb27;
    }

    bb9: {
        StorageDead(_17);
        _15 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb2];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: i128);
        _14 = _22;
        StorageDead(_22);
        _0 = <i128 as SafeMath>::safe_sub(move _5, move _14) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_19);
        _19 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb27;
    }

    bb14: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb28;
    }

    bb15: {
        StorageDead(_26);
        _24 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb2];
    }

    bb17: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: i128);
        _23 = _31;
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _1;
        _34 = <u128 as Cast>::cast::<i128>(move _35) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_28);
        _28 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_30);
        StorageDead(_28);
        goto -> bb26;
    }

    bb20: {
        StorageDead(_35);
        _33 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_34);
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb22, 1: bb23, otherwise: bb2];
    }

    bb22: {
        StorageLive(_40);
        _40 = ((_33 as Continue).0: i128);
        _32 = _40;
        StorageDead(_40);
        _0 = <i128 as SafeMath>::safe_sub(move _23, move _32) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_37);
        _37 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb28;
    }

    bb26: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb28;
    }

    bb27: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb28;
    }

    bb28: {
        return;
    }
}
