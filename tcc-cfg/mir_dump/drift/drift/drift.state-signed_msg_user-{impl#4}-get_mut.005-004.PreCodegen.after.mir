// MIR for `signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:112:1: 112:44>::get_mut` after PreCodegen

fn signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:112:1: 112:44>::get_mut(_1: &mut SignedMsgUserOrdersZeroCopyMut<'_>, _2: u32) -> &mut SignedMsgOrderId {
    debug self => _1;
    debug index => _2;
    let mut _0: &mut state::signed_msg_user::SignedMsgOrderId;
    let mut _3: &mut state::signed_msg_user::SignedMsgOrderId;
    let _4: usize;
    let mut _6: usize;
    let mut _7: u32;
    let mut _8: usize;
    let mut _9: (usize, bool);
    let mut _10: &mut state::signed_msg_user::SignedMsgOrderId;
    let mut _11: &mut [u8];
    let mut _12: &mut [u8];
    let mut _13: &mut [u8];
    let mut _14: &mut [u8];
    let mut _15: &mut [u8];
    let mut _16: &mut std::cell::RefMut<'_, [u8]>;
    let mut _17: std::ops::Range<usize>;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: (usize, bool);
    scope 1 {
        debug size => _4;
        let _5: usize;
        scope 2 {
            debug start => _5;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = std::mem::size_of::<SignedMsgOrderId>() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = move _7 as usize (IntToInt);
        StorageDead(_7);
        StorageLive(_8);
        _8 = _4;
        _9 = CheckedMul(_6, _8);
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _6, move _8) -> [success: bb2, unwind continue];
    }

    bb2: {
        _5 = move (_9.0: usize);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut ((*_1).1: std::cell::RefMut<'_, [u8]>);
        _15 = <RefMut<'_, [u8]> as DerefMut>::deref_mut(move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        _14 = &mut (*_15);
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _5;
        StorageLive(_19);
        StorageLive(_20);
        _20 = _5;
        StorageLive(_21);
        _21 = _4;
        _22 = CheckedAdd(_20, _21);
        assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _20, move _21) -> [success: bb4, unwind continue];
    }

    bb4: {
        _19 = move (_22.0: usize);
        StorageDead(_21);
        StorageDead(_20);
        _17 = std::ops::Range::<usize> { start: move _18, end: move _19 };
        StorageDead(_19);
        StorageDead(_18);
        _13 = <[u8] as IndexMut<std::ops::Range<usize>>>::index_mut(move _14, move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_14);
        _12 = &mut (*_13);
        _11 = &mut (*_12);
        _10 = bytemuck::from_bytes_mut::<SignedMsgOrderId>(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _3 = &mut (*_10);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_4);
        _0 = &mut (*_3);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_3);
        return;
    }
}
