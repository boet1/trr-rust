// MIR for `validate_fee_structure` before PreCodegen

fn validate_fee_structure(_1: &state::state::FeeStructure) -> std::result::Result<(), error::ErrorCode> {
    debug fee_structure => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: std::iter::Enumerate<std::slice::Iter<'_, state::state::FeeTier>>;
    let mut _4: std::iter::Enumerate<std::slice::Iter<'_, state::state::FeeTier>>;
    let mut _5: std::slice::Iter<'_, state::state::FeeTier>;
    let mut _6: &[state::state::FeeTier];
    let mut _7: &[state::state::FeeTier; 10];
    let mut _8: std::iter::Enumerate<std::slice::Iter<'_, state::state::FeeTier>>;
    let mut _9: ();
    let _10: ();
    let mut _11: std::option::Option<(usize, &state::state::FeeTier)>;
    let mut _12: &mut std::iter::Enumerate<std::slice::Iter<'_, state::state::FeeTier>>;
    let mut _13: &mut std::iter::Enumerate<std::slice::Iter<'_, state::state::FeeTier>>;
    let mut _14: isize;
    let mut _15: !;
    let _18: ();
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _20: std::result::Result<(), error::ErrorCode>;
    let mut _21: usize;
    let mut _22: &state::state::FeeTier;
    let mut _23: u32;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: bool;
    let mut _30: bool;
    let mut _31: u32;
    let mut _32: u32;
    let _33: ();
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _35: std::result::Result<(), error::ErrorCode>;
    let mut _36: bool;
    let mut _37: ();
    let _39: ();
    let mut _40: &str;
    let _41: &str;
    let mut _42: &std::string::String;
    let _43: &std::string::String;
    let _44: std::string::String;
    let mut _46: std::fmt::Arguments<'_>;
    let mut _47: &[&str];
    let mut _48: &[&str; 2];
    let _49: &[&str; 2];
    let _50: [&str; 2];
    let mut _51: &[core::fmt::rt::Argument<'_>];
    let mut _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: &[core::fmt::rt::Argument<'_>; 1];
    let _54: [core::fmt::rt::Argument<'_>; 1];
    let mut _55: core::fmt::rt::Argument<'_>;
    let mut _56: &error::ErrorCode;
    let _57: &error::ErrorCode;
    let _58: ();
    let mut _59: &str;
    let _60: &str;
    let mut _61: &std::string::String;
    let _62: &std::string::String;
    let _63: std::string::String;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[&str; 3];
    let _68: &[&str; 3];
    let _69: [&str; 3];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let mut _71: &[core::fmt::rt::Argument<'_>; 2];
    let _72: &[core::fmt::rt::Argument<'_>; 2];
    let _73: [core::fmt::rt::Argument<'_>; 2];
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &u32;
    let _76: &u32;
    let mut _77: core::fmt::rt::Argument<'_>;
    let mut _78: &u32;
    let _79: &u32;
    let mut _80: error::ErrorCode;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _86: ();
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _88: std::result::Result<(), error::ErrorCode>;
    let mut _89: bool;
    let mut _90: u64;
    let mut _91: u64;
    let mut _92: u64;
    let mut _93: bool;
    let mut _94: ();
    let _96: ();
    let mut _97: &str;
    let _98: &str;
    let mut _99: &std::string::String;
    let _100: &std::string::String;
    let _101: std::string::String;
    let mut _103: std::fmt::Arguments<'_>;
    let mut _104: &[&str];
    let mut _105: &[&str; 2];
    let _106: &[&str; 2];
    let _107: [&str; 2];
    let mut _108: &[core::fmt::rt::Argument<'_>];
    let mut _109: &[core::fmt::rt::Argument<'_>; 1];
    let _110: &[core::fmt::rt::Argument<'_>; 1];
    let _111: [core::fmt::rt::Argument<'_>; 1];
    let mut _112: core::fmt::rt::Argument<'_>;
    let mut _113: &error::ErrorCode;
    let _114: &error::ErrorCode;
    let _115: ();
    let mut _116: &str;
    let _117: &str;
    let mut _118: &std::string::String;
    let _119: &std::string::String;
    let _120: std::string::String;
    let mut _122: std::fmt::Arguments<'_>;
    let mut _123: &[&str];
    let mut _124: &[&str; 1];
    let _125: &[&str; 1];
    let _126: [&str; 1];
    let mut _127: &[core::fmt::rt::Argument<'_>];
    let mut _128: &[core::fmt::rt::Argument<'_>; 1];
    let _129: &[core::fmt::rt::Argument<'_>; 1];
    let _130: [core::fmt::rt::Argument<'_>; 1];
    let mut _131: core::fmt::rt::Argument<'_>;
    let mut _132: &u64;
    let _133: &u64;
    let mut _134: error::ErrorCode;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: ();
    scope 1 {
        debug iter => _8;
        let _16: usize;
        let _17: &state::state::FeeTier;
        scope 2 {
            debug i => _16;
            debug fee_tier => _17;
            let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _28: ();
            scope 3 {
                debug residual => _25;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _28;
                scope 6 {
                }
            }
        }
    }
    scope 7 {
        debug is_filler_reward_valid => _29;
        let _38: error::ErrorCode;
        let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _85: ();
        let _95: error::ErrorCode;
        let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _139: ();
        scope 8 {
            debug error_code => _38;
            let _45: std::string::String;
            let _64: std::string::String;
            let mut _143: &[&str; 3];
            let mut _144: &[&str; 2];
            scope 9 {
                debug res => _45;
            }
            scope 10 {
                debug res => _64;
            }
        }
        scope 11 {
            debug residual => _82;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _85;
            scope 14 {
            }
        }
        scope 15 {
            debug error_code => _95;
            let _102: std::string::String;
            let _121: std::string::String;
            let mut _141: &[&str; 1];
            let mut _142: &[&str; 2];
            scope 16 {
                debug res => _102;
            }
            scope 17 {
                debug res => _121;
            }
        }
        scope 18 {
            debug residual => _136;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _139;
            scope 21 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: [state::state::FeeTier; 10]);
        _6 = move _7 as &[state::state::FeeTier] (PointerCoercion(Unsize));
        StorageDead(_7);
        _5 = core::slice::<impl [state::state::FeeTier]>::iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::slice::Iter<'_, state::state::FeeTier> as Iterator>::enumerate(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _3 = <Enumerate<std::slice::Iter<'_, state::state::FeeTier>> as IntoIterator>::into_iter(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_4);
        StorageLive(_8);
        _8 = move _3;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _8;
        _12 = &mut (*_13);
        _11 = <Enumerate<std::slice::Iter<'_, state::state::FeeTier>> as Iterator>::next(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_12);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        StorageLive(_16);
        _16 = (((_11 as Some).0: (usize, &state::state::FeeTier)).0: usize);
        StorageLive(_17);
        _17 = (((_11 as Some).0: (usize, &state::state::FeeTier)).1: &state::state::FeeTier);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _16;
        StorageLive(_22);
        _22 = &(*_17);
        StorageLive(_23);
        _23 = (((*_1).1: state::state::OrderFillerRewardStructure).0: u32);
        _20 = validate_fee_tier(move _21, move _22, move _23) -> [return: bb9, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _2 = const ();
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = (((*_1).1: state::state::OrderFillerRewardStructure).0: u32);
        _30 = Le(move _31, const 20_u32);
        switchInt(move _30) -> [0: bb15, otherwise: bb14];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        _19 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_20);
        _24 = discriminant(_19);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb7];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_19 as Continue).0: ());
        _18 = _28;
        StorageDead(_28);
        StorageDead(_19);
        StorageDead(_18);
        _10 = const ();
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        _9 = const ();
        goto -> bb4;
    }

    bb12: {
        StorageLive(_25);
        _25 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb58;
    }

    bb14: {
        StorageDead(_31);
        StorageLive(_32);
        _32 = (((*_1).1: state::state::OrderFillerRewardStructure).1: u32);
        _29 = Eq(move _32, const _);
        StorageDead(_32);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_31);
        _29 = const false;
        goto -> bb16;
    }

    bb16: {
        StorageDead(_30);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _29;
        switchInt(move _36) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageLive(_37);
        _37 = ();
        _35 = std::result::Result::<(), error::ErrorCode>::Ok(move _37);
        StorageDead(_37);
        goto -> bb32;
    }

    bb18: {
        StorageLive(_38);
        _38 = error::ErrorCode::InvalidFeeStructure;
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _144 = const _;
        _49 = &(*_144);
        _48 = &(*_49);
        _47 = move _48 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_48);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_38;
        _56 = &(*_57);
        _55 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _56) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_56);
        _54 = [move _55];
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        _51 = move _52 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_52);
        _46 = Arguments::<'_>::new_v1(move _47, move _51) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_51);
        StorageDead(_47);
        _45 = format(move _46) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_49);
        _44 = move _45;
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = <String as Deref>::deref(move _42) -> [return: bb22, unwind: bb62];
    }

    bb22: {
        _40 = &(*_41);
        StorageDead(_42);
        _39 = solana_program::log::sol_log(move _40) -> [return: bb23, unwind: bb62];
    }

    bb23: {
        StorageDead(_40);
        drop(_44) -> [return: bb24, unwind: bb63];
    }

    bb24: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _143 = const _;
        _68 = &(*_143);
        _67 = &(*_68);
        _66 = move _67 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_67);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(((*_1).1: state::state::OrderFillerRewardStructure).0: u32);
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _75) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &(((*_1).1: state::state::OrderFillerRewardStructure).1: u32);
        _78 = &(*_79);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _78) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_78);
        _73 = [move _74, move _77];
        StorageDead(_77);
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = move _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_71);
        _65 = Arguments::<'_>::new_v1(move _66, move _70) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_70);
        StorageDead(_66);
        _64 = format(move _65) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_68);
        _63 = move _64;
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = <String as Deref>::deref(move _61) -> [return: bb29, unwind: bb61];
    }

    bb29: {
        _59 = &(*_60);
        StorageDead(_61);
        _58 = solana_program::log::sol_log(move _59) -> [return: bb30, unwind: bb61];
    }

    bb30: {
        StorageDead(_59);
        drop(_63) -> [return: bb31, unwind: bb63];
    }

    bb31: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageLive(_80);
        _80 = _38;
        _35 = std::result::Result::<(), error::ErrorCode>::Err(move _80);
        StorageDead(_80);
        StorageDead(_38);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_36);
        _34 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _35) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_35);
        _81 = discriminant(_34);
        switchInt(move _81) -> [0: bb34, 1: bb35, otherwise: bb7];
    }

    bb34: {
        StorageLive(_85);
        _85 = ((_34 as Continue).0: ());
        _33 = _85;
        StorageDead(_85);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = ((*_1).3: u64);
        StorageLive(_91);
        StorageLive(_92);
        _92 = const _ as u64 (IntToInt);
        _93 = Eq(const 2_u64, const 0_u64);
        assert(!move _93, "attempt to divide `{}` by zero", _92) -> [success: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_82);
        _82 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb57;
    }

    bb37: {
        _91 = Div(move _92, const 2_u64);
        StorageDead(_92);
        _89 = Lt(move _90, move _91);
        switchInt(move _89) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_94);
        _94 = ();
        _88 = std::result::Result::<(), error::ErrorCode>::Ok(move _94);
        StorageDead(_94);
        goto -> bb52;
    }

    bb39: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_95);
        _95 = error::ErrorCode::InvalidFeeStructure;
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _142 = const _;
        _106 = &(*_142);
        _105 = &(*_106);
        _104 = move _105 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_105);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_95;
        _113 = &(*_114);
        _112 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _113) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_113);
        _111 = [move _112];
        StorageDead(_112);
        _110 = &_111;
        _109 = &(*_110);
        _108 = move _109 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_109);
        _103 = Arguments::<'_>::new_v1(move _104, move _108) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_108);
        StorageDead(_104);
        _102 = format(move _103) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_103);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_106);
        _101 = move _102;
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = <String as Deref>::deref(move _99) -> [return: bb43, unwind: bb60];
    }

    bb43: {
        _97 = &(*_98);
        StorageDead(_99);
        _96 = solana_program::log::sol_log(move _97) -> [return: bb44, unwind: bb60];
    }

    bb44: {
        StorageDead(_97);
        drop(_101) -> [return: bb45, unwind: bb63];
    }

    bb45: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _141 = const _;
        _125 = &(*_141);
        _124 = &(*_125);
        _123 = move _124 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &((*_1).3: u64);
        _132 = &(*_133);
        _131 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _132) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_132);
        _130 = [move _131];
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = move _128 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_128);
        _122 = Arguments::<'_>::new_v1(move _123, move _127) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_127);
        StorageDead(_123);
        _121 = format(move _122) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_122);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        _120 = move _121;
        StorageDead(_121);
        _119 = &_120;
        _118 = &(*_119);
        _117 = <String as Deref>::deref(move _118) -> [return: bb49, unwind: bb59];
    }

    bb49: {
        _116 = &(*_117);
        StorageDead(_118);
        _115 = solana_program::log::sol_log(move _116) -> [return: bb50, unwind: bb59];
    }

    bb50: {
        StorageDead(_116);
        drop(_120) -> [return: bb51, unwind: bb63];
    }

    bb51: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageLive(_134);
        _134 = _95;
        _88 = std::result::Result::<(), error::ErrorCode>::Err(move _134);
        StorageDead(_134);
        StorageDead(_95);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_89);
        _87 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _88) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_88);
        _135 = discriminant(_87);
        switchInt(move _135) -> [0: bb54, 1: bb55, otherwise: bb7];
    }

    bb54: {
        StorageLive(_139);
        _139 = ((_87 as Continue).0: ());
        _86 = _139;
        StorageDead(_139);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_140);
        _140 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _140);
        StorageDead(_140);
        StorageDead(_29);
        goto -> bb58;
    }

    bb55: {
        StorageLive(_136);
        _136 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_29);
        goto -> bb58;
    }

    bb58: {
        return;
    }

    bb59 (cleanup): {
        drop(_120) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_101) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_63) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_44) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }
}
