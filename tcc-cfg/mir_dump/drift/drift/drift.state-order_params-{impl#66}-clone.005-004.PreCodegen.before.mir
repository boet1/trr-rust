// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:946:10: 946:15>::clone` before PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:946:10: 946:15>::clone(_1: &PlaceOrderOptions) -> PlaceOrderOptions {
    debug self => _1;
    let mut _0: state::order_params::PlaceOrderOptions;
    let mut _2: std::option::Option<u64>;
    let mut _3: &std::option::Option<u64>;
    let _4: &std::option::Option<u64>;
    let mut _5: bool;
    let mut _6: &bool;
    let _7: &bool;
    let mut _8: bool;
    let mut _9: &bool;
    let _10: &bool;
    let mut _11: bool;
    let mut _12: &bool;
    let _13: &bool;
    let mut _14: state::events::OrderActionExplanation;
    let mut _15: &state::events::OrderActionExplanation;
    let _16: &state::events::OrderActionExplanation;
    let mut _17: std::option::Option<controller::position::PositionDirection>;
    let mut _18: &std::option::Option<controller::position::PositionDirection>;
    let _19: &std::option::Option<controller::position::PositionDirection>;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: std::option::Option<u64>);
        _3 = &(*_4);
        _2 = <Option<u64> as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: bool);
        _6 = &(*_7);
        _5 = <bool as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: bool);
        _9 = &(*_10);
        _8 = <bool as Clone>::clone(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: bool);
        _12 = &(*_13);
        _11 = <bool as Clone>::clone(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: state::events::OrderActionExplanation);
        _15 = &(*_16);
        _14 = <OrderActionExplanation as Clone>::clone(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: std::option::Option<controller::position::PositionDirection>);
        _18 = &(*_19);
        _17 = <Option<controller::position::PositionDirection> as Clone>::clone(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        _0 = PlaceOrderOptions { signed_msg_taker_order_slot: move _2, try_expire_orders: move _5, enforce_margin_check: move _8, risk_increasing: move _11, explanation: move _14, existing_position_direction_override: move _17 };
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }
}
