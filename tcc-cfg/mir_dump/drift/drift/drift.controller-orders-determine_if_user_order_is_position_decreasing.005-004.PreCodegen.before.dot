digraph Mir_0_535 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn determine_if_user_order_is_position_decreasing(_1: &amp;ReErased state::user::User, _2: u16, _3: usize) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _4: usize;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _6: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _8: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _9: u16;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _14: usize;<br align="left"/>let _15: controller::position::PositionDirection;<br align="left"/>let _16: usize;<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: bool;<br align="left"/>let _19: i64;<br align="left"/>let _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _24: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _27: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _28: &amp;ReErased state::user::Order;<br align="left"/>let _29: usize;<br align="left"/>let mut _30: usize;<br align="left"/>let mut _31: bool;<br align="left"/>let mut _32: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _33: i64;<br align="left"/>let mut _34: isize;<br align="left"/>let _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _36: !;<br align="left"/>let mut _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _38: u64;<br align="left"/>let mut _39: i64;<br align="left"/>let mut _40: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _41: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _42: i64;<br align="left"/>let mut _43: isize;<br align="left"/>let _44: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _45: !;<br align="left"/>let mut _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _47: i64;<br align="left"/>debug user =&gt; _1;<br align="left"/>debug market_index =&gt; _2;<br align="left"/>debug order_index =&gt; _3;<br align="left"/>debug position_index =&gt; _4;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>debug order_direction =&gt; _15;<br align="left"/>debug position_base_asset_amount_before =&gt; _19;<br align="left"/>debug residual =&gt; _35;<br align="left"/>debug val =&gt; _38;<br align="left"/>debug residual =&gt; _44;<br align="left"/>debug val =&gt; _47;<br align="left"/>>;
    bb0__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;((*_1).4: [state::user::PerpPosition; 8])<br/>_7 = &amp;(*_8)<br/>StorageLive(_9)<br/>_9 = _2<br/></td></tr><tr><td align="left">_6 = get_position_index(move _7, move _9)</td></tr></table>>];
    bb1__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_10 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb3__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_5 as Continue).0: usize)<br/>_4 = _14<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _3<br/>_17 = Len(((*_1).5: [state::user::Order; 32]))<br/>_18 = Lt(_16, _17)<br/></td></tr><tr><td align="left">assert(move _18, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _17, _16)</td></tr></table>>];
    bb4__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_13)<br/>_13 = _11<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb6__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_15 = (((*_1).5: [state::user::Order; 32])[_16].17: controller::position::PositionDirection)<br/>StorageDead(_16)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _4<br/>_21 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_22 = Lt(_20, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _20)</td></tr></table>>];
    bb8__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_19 = (((*_1).4: [state::user::PerpPosition; 8])[_20].1: i64)<br/>StorageDead(_20)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;_15<br/>_23 = &amp;(*_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _3<br/>_30 = Len(((*_1).5: [state::user::Order; 32]))<br/>_31 = Lt(_29, _30)<br/></td></tr><tr><td align="left">assert(move _31, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _30, _29)</td></tr></table>>];
    bb9__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_28 = &amp;((*_1).5: [state::user::Order; 32])[_29]<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _19<br/>_32 = Option::&lt;i64&gt;::Some(move _33)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">_27 = Order::get_base_asset_amount_unfilled(move _28, move _32)</td></tr></table>>];
    bb10__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb11__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_34 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb12__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_26 as Continue).0: u64)<br/>_25 = _38<br/>StorageDead(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = _19<br/></td></tr><tr><td align="left">_41 = &lt;i64 as Cast&gt;::cast::&lt;i64&gt;(move _42)</td></tr></table>>];
    bb13__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_37)<br/>_37 = _35<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _37)</td></tr></table>>];
    bb14__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_35)<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_19)<br/>StorageDead(_15)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/></td></tr><tr><td align="left">_40 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _41)</td></tr></table>>];
    bb16__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>_43 = discriminant(_40)<br/></td></tr><tr><td align="left">switchInt(move _43)</td></tr></table>>];
    bb17__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_40 as Continue).0: i64)<br/>_39 = _47<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">_0 = math::orders::is_order_position_reducing(move _23, move _25, move _39)</td></tr></table>>];
    bb18__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_40 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_46)<br/>_46 = _44<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _46)</td></tr></table>>];
    bb19__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_44)<br/>StorageDead(_39)<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_19)<br/>StorageDead(_15)<br/>StorageDead(_4)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_19)<br/>StorageDead(_15)<br/>StorageDead(_4)<br/>StorageDead(_40)<br/>StorageDead(_29)<br/>StorageDead(_26)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_26)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_535 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_535 -> bb1__0_535 [label="return"];
    bb1__0_535 -> bb2__0_535 [label="return"];
    bb2__0_535 -> bb3__0_535 [label="0"];
    bb2__0_535 -> bb5__0_535 [label="1"];
    bb2__0_535 -> bb4__0_535 [label="otherwise"];
    bb3__0_535 -> bb7__0_535 [label="success"];
    bb5__0_535 -> bb6__0_535 [label="return"];
    bb6__0_535 -> bb22__0_535 [label=""];
    bb7__0_535 -> bb8__0_535 [label="success"];
    bb8__0_535 -> bb9__0_535 [label="success"];
    bb9__0_535 -> bb10__0_535 [label="return"];
    bb10__0_535 -> bb11__0_535 [label="return"];
    bb11__0_535 -> bb12__0_535 [label="0"];
    bb11__0_535 -> bb13__0_535 [label="1"];
    bb11__0_535 -> bb4__0_535 [label="otherwise"];
    bb12__0_535 -> bb15__0_535 [label="return"];
    bb13__0_535 -> bb14__0_535 [label="return"];
    bb14__0_535 -> bb21__0_535 [label=""];
    bb15__0_535 -> bb16__0_535 [label="return"];
    bb16__0_535 -> bb17__0_535 [label="0"];
    bb16__0_535 -> bb18__0_535 [label="1"];
    bb16__0_535 -> bb4__0_535 [label="otherwise"];
    bb17__0_535 -> bb20__0_535 [label="return"];
    bb18__0_535 -> bb19__0_535 [label="return"];
    bb19__0_535 -> bb21__0_535 [label=""];
    bb20__0_535 -> bb22__0_535 [label=""];
    bb21__0_535 -> bb22__0_535 [label=""];
}
