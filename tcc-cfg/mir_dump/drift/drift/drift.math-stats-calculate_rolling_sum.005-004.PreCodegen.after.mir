// MIR for `calculate_rolling_sum` after PreCodegen

fn calculate_rolling_sum(_1: u64, _2: u64, _3: i64, _4: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug data1 => _1;
    debug data2 => _2;
    debug weight1_numer => _3;
    debug weight1_denom => _4;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u64;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: u128;
    let mut _20: u128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: i64;
    let mut _24: i64;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _26: std::result::Result<i64, error::ErrorCode>;
    let mut _27: i64;
    let mut _28: i64;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: i64;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: u128;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: u128;
    let mut _44: u128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: i64;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: u128;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: u128;
    let mut _58: u64;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _60: std::result::Result<u64, error::ErrorCode>;
    let mut _61: u128;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: u64;
    scope 1 {
        debug prev_twap_99 => _5;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: u64;
        scope 26 {
            debug residual => _63;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _66;
            scope 29 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _30;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _33;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _35;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _38;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _40;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _43;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _49;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _52;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _54;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _57;
        scope 25 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _1;
        _13 = <u64 as Cast>::cast::<u128>(move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = ((_12 as Continue).0: u128);
        _11 = _19;
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _4;
        StorageLive(_28);
        _28 = _3;
        _26 = <i64 as SafeMath>::safe_sub(move _27, move _28) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb43;
    }

    bb7: {
        StorageDead(_28);
        StorageDead(_27);
        _25 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        _29 = discriminant(_25);
        switchInt(move _29) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_33);
        _33 = ((_25 as Continue).0: i64);
        _24 = _33;
        StorageDead(_33);
        _23 = std::cmp::max::<i64>(const 0_i64, move _24) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_30);
        _30 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb40;
    }

    bb12: {
        StorageDead(_24);
        _22 = <i64 as Cast>::cast::<u128>(move _23) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_22);
        _34 = discriminant(_21);
        switchInt(move _34) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_38);
        _38 = ((_21 as Continue).0: u128);
        _20 = _38;
        StorageDead(_38);
        _10 = <u128 as SafeMath>::safe_mul(move _11, move _20) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_35);
        _35 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb40;
    }

    bb18: {
        StorageDead(_20);
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_10);
        _39 = discriminant(_9);
        switchInt(move _39) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_43);
        _43 = ((_9 as Continue).0: u128);
        _8 = _43;
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _4;
        _46 = <i64 as Cast>::cast::<u128>(move _47) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_40);
        _40 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb41;
    }

    bb23: {
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: u128);
        _44 = _52;
        StorageDead(_52);
        _7 = <u128 as SafeMath>::safe_div(move _8, move _44) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb39;
    }

    bb28: {
        StorageDead(_44);
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_7);
        _53 = discriminant(_6);
        switchInt(move _53) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_57);
        _57 = ((_6 as Continue).0: u128);
        _5 = _57;
        StorageDead(_57);
        StorageDead(_45);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _5;
        _60 = <u128 as Cast>::cast::<u64>(move _61) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_54);
        _54 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb39;
    }

    bb33: {
        StorageDead(_61);
        _59 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _60) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_60);
        _62 = discriminant(_59);
        switchInt(move _62) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_66);
        _66 = ((_59 as Continue).0: u64);
        _58 = _66;
        StorageDead(_66);
        StorageLive(_67);
        _67 = _2;
        _0 = <u64 as SafeMath>::safe_add(move _58, move _67) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_63);
        _63 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        StorageDead(_5);
        StorageDead(_59);
        goto -> bb44;
    }

    bb38: {
        StorageDead(_67);
        StorageDead(_58);
        StorageDead(_5);
        StorageDead(_59);
        goto -> bb44;
    }

    bb39: {
        StorageDead(_45);
        goto -> bb42;
    }

    bb40: {
        StorageDead(_20);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_25);
        StorageDead(_21);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb44;
    }

    bb44: {
        return;
    }
}
