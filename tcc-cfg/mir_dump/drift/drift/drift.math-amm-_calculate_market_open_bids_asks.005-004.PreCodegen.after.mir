// MIR for `_calculate_market_open_bids_asks` after PreCodegen

fn _calculate_market_open_bids_asks(_1: u128, _2: u128, _3: u128) -> std::result::Result<(i128, i128), error::ErrorCode> {
    debug base_asset_reserve => _1;
    debug min_base_asset_reserve => _2;
    debug max_base_asset_reserve => _3;
    let mut _0: std::result::Result<(i128, i128), error::ErrorCode>;
    let _4: i128;
    let mut _5: bool;
    let mut _6: u128;
    let mut _7: u128;
    let mut _8: i128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _10: std::result::Result<i128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: u128;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: u128;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: i128;
    let mut _26: bool;
    let mut _28: bool;
    let mut _29: u128;
    let mut _30: u128;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _32: std::result::Result<i128, error::ErrorCode>;
    let mut _33: u128;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _35: std::result::Result<u128, error::ErrorCode>;
    let mut _36: u128;
    let mut _37: u128;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: (i128, i128);
    let mut _49: i128;
    let mut _50: i128;
    scope 1 {
        debug max_asks => _4;
        let _27: i128;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: u128;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: i128;
        scope 10 {
            debug max_bids => _27;
        }
        scope 11 {
            debug residual => _39;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _42;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _44;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _47;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _22;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        StorageLive(_7);
        _7 = _3;
        _5 = Lt(move _6, move _7);
        switchInt(move _5) -> [0: bb14, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        _15 = _1;
        _13 = <u128 as SafeMath>::safe_sub(move _14, move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = ((_12 as Continue).0: u128);
        _11 = _20;
        StorageDead(_20);
        _10 = <u128 as Cast>::cast::<i128>(move _11) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb30;
    }

    bb8: {
        StorageDead(_11);
        _9 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_10);
        _21 = discriminant(_9);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_25);
        _25 = ((_9 as Continue).0: i128);
        _8 = _25;
        StorageDead(_25);
        _26 = Eq(_8, const i128::MIN);
        assert(!move _26, "attempt to negate `{}`, which would overflow", _8) -> [success: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        goto -> bb30;
    }

    bb13: {
        _4 = Neg(move _8);
        StorageDead(_8);
        StorageDead(_12);
        StorageDead(_9);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = const 0_i128;
        goto -> bb15;
    }

    bb15: {
        StorageDead(_5);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _1;
        StorageLive(_30);
        _30 = _2;
        _28 = Gt(move _29, move _30);
        switchInt(move _28) -> [0: bb27, otherwise: bb16];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _1;
        StorageLive(_37);
        _37 = _2;
        _35 = <u128 as SafeMath>::safe_sub(move _36, move _37) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _35) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_35);
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_34 as Continue).0: u128);
        _33 = _42;
        StorageDead(_42);
        _32 = <u128 as Cast>::cast::<i128>(move _33) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_39);
        _39 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_33);
        _31 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_32);
        _43 = discriminant(_31);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_31 as Continue).0: i128);
        _27 = _47;
        StorageDead(_47);
        StorageDead(_34);
        StorageDead(_31);
        goto -> bb28;
    }

    bb25: {
        StorageLive(_44);
        _44 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb29;
    }

    bb27: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = const 0_i128;
        goto -> bb28;
    }

    bb28: {
        StorageDead(_28);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _27;
        StorageLive(_50);
        _50 = _4;
        _48 = (move _49, move _50);
        StorageDead(_50);
        StorageDead(_49);
        _0 = std::result::Result::<(i128, i128), error::ErrorCode>::Ok(move _48);
        StorageDead(_48);
        StorageDead(_27);
        StorageDead(_4);
        goto -> bb32;
    }

    bb29: {
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb31;
    }

    bb30: {
        StorageDead(_8);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_5);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_4);
        goto -> bb32;
    }

    bb32: {
        return;
    }
}
