// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_oracle_twap` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_oracle_twap(_1: &AMM, _2: &anchor_lang::prelude::AccountInfo<'_>, _3: u64) -> std::result::Result<Option<i64>, error::ErrorCode> {
    debug self => _1;
    debug price_oracle => _2;
    debug slot => _3;
    let mut _0: std::result::Result<std::option::Option<i64>, error::ErrorCode>;
    let mut _4: isize;
    let mut _5: std::option::Option<i64>;
    let mut _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: &state::perp_market::AMM;
    let mut _10: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _11: &state::oracle::OracleSource;
    let _12: &state::oracle::OracleSource;
    let _13: state::oracle::OracleSource;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: i64;
    let mut _19: std::option::Option<i64>;
    let mut _20: i64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _22: std::result::Result<i64, error::ErrorCode>;
    let mut _23: &state::perp_market::AMM;
    let mut _24: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _25: &state::oracle::OracleSource;
    let _26: &state::oracle::OracleSource;
    let _27: state::oracle::OracleSource;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: i64;
    let mut _33: std::option::Option<i64>;
    let mut _34: i64;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _36: std::result::Result<i64, error::ErrorCode>;
    let mut _37: &state::perp_market::AMM;
    let mut _38: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _39: &state::oracle::OracleSource;
    let _40: &state::oracle::OracleSource;
    let _41: state::oracle::OracleSource;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: i64;
    let mut _47: std::option::Option<i64>;
    let mut _48: i64;
    let mut _49: state::oracle::OraclePriceData;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _51: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _52: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _53: u64;
    let mut _54: isize;
    let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _58: state::oracle::OraclePriceData;
    let mut _59: std::option::Option<i64>;
    let mut _60: i64;
    let mut _61: state::oracle::OraclePriceData;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _63: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _64: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _65: u64;
    let mut _66: isize;
    let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _70: state::oracle::OraclePriceData;
    let _71: ();
    let mut _72: &str;
    let _73: &str;
    let mut _74: error::ErrorCode;
    let mut _75: std::option::Option<i64>;
    let mut _76: i64;
    let mut _77: state::oracle::OraclePriceData;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _79: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _80: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _81: u64;
    let mut _82: isize;
    let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _86: state::oracle::OraclePriceData;
    let mut _87: std::option::Option<i64>;
    let mut _88: i64;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _90: std::result::Result<i64, error::ErrorCode>;
    let mut _91: &state::perp_market::AMM;
    let mut _92: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _93: &state::oracle::OracleSource;
    let _94: &state::oracle::OracleSource;
    let _95: state::oracle::OracleSource;
    let mut _96: isize;
    let _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _100: i64;
    let mut _101: std::option::Option<i64>;
    let mut _102: i64;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _104: std::result::Result<i64, error::ErrorCode>;
    let mut _105: &state::perp_market::AMM;
    let mut _106: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _107: &state::oracle::OracleSource;
    let _108: &state::oracle::OracleSource;
    let _109: state::oracle::OracleSource;
    let mut _110: isize;
    let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _114: i64;
    let mut _115: std::option::Option<i64>;
    let mut _116: i64;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _118: std::result::Result<i64, error::ErrorCode>;
    let mut _119: &state::perp_market::AMM;
    let mut _120: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _121: &state::oracle::OracleSource;
    let _122: &state::oracle::OracleSource;
    let _123: state::oracle::OracleSource;
    let mut _124: isize;
    let _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _128: i64;
    let mut _129: std::option::Option<i64>;
    let mut _130: i64;
    let mut _131: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _132: std::result::Result<i64, error::ErrorCode>;
    let mut _133: &state::perp_market::AMM;
    let mut _134: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _135: &state::oracle::OracleSource;
    let _136: &state::oracle::OracleSource;
    let _137: state::oracle::OracleSource;
    let mut _138: isize;
    let _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _142: i64;
    let mut _143: std::option::Option<i64>;
    let mut _144: i64;
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _146: std::result::Result<i64, error::ErrorCode>;
    let mut _147: &state::perp_market::AMM;
    let mut _148: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _149: &state::oracle::OracleSource;
    let _150: &state::oracle::OracleSource;
    let _151: state::oracle::OracleSource;
    let mut _152: isize;
    let _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _156: i64;
    let mut _157: std::option::Option<i64>;
    let mut _158: i64;
    let mut _159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _160: std::result::Result<i64, error::ErrorCode>;
    let mut _161: &state::perp_market::AMM;
    let mut _162: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _163: &state::oracle::OracleSource;
    let _164: &state::oracle::OracleSource;
    let _165: state::oracle::OracleSource;
    let mut _166: isize;
    let _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _170: i64;
    let mut _171: std::option::Option<i64>;
    let mut _172: i64;
    let mut _173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _174: std::result::Result<i64, error::ErrorCode>;
    let mut _175: &state::perp_market::AMM;
    let mut _176: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _177: &state::oracle::OracleSource;
    let _178: &state::oracle::OracleSource;
    let _179: state::oracle::OracleSource;
    let mut _180: isize;
    let _181: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _182: !;
    let mut _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _184: i64;
    let mut _185: &state::oracle::OracleSource;
    let mut _186: &state::oracle::OracleSource;
    let mut _187: &state::oracle::OracleSource;
    let mut _188: &state::oracle::OracleSource;
    let mut _189: &state::oracle::OracleSource;
    let mut _190: &state::oracle::OracleSource;
    let mut _191: &state::oracle::OracleSource;
    let mut _192: &state::oracle::OracleSource;
    let mut _193: &state::oracle::OracleSource;
    let mut _194: &state::oracle::OracleSource;
    scope 1 {
        debug residual => _15;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _29;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _32;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _43;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _46;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _55;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _58;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _67;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _70;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _83;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _86;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _97;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _100;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _111;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _114;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _125;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _128;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _139;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _142;
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _153;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _156;
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _167;
        scope 46 {
        }
    }
    scope 47 {
        debug val => _170;
        scope 48 {
        }
    }
    scope 49 {
        debug residual => _181;
        scope 50 {
        }
    }
    scope 51 {
        debug val => _184;
        scope 52 {
        }
    }

    bb0: {
        _4 = discriminant(((*_1).72: state::oracle::OracleSource));
        switchInt(move _4) -> [0: bb3, 1: bb21, 2: bb33, 3: bb9, 4: bb15, 5: bb3, 6: bb35, 7: bb41, 8: bb47, 9: bb53, 10: bb41, 11: bb27, 12: bb59, 13: bb65, 14: bb71, 15: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_1);
        StorageLive(_176);
        _176 = &(*_2);
        StorageLive(_177);
        StorageLive(_178);
        _185 = const _;
        _178 = &(*_185);
        _177 = &(*_178);
        _174 = AMM::get_pyth_twap(move _175, move _176, move _177) -> [return: bb77, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = &(*_2);
        StorageLive(_11);
        StorageLive(_12);
        _194 = const _;
        _12 = &(*_194);
        _11 = &(*_12);
        _8 = AMM::get_pyth_twap(move _9, move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_8);
        _14 = discriminant(_7);
        switchInt(move _14) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_18);
        _18 = ((_7 as Continue).0: i64);
        _6 = _18;
        StorageDead(_18);
        _5 = Option::<i64>::Some(move _6);
        StorageDead(_6);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _5);
        StorageDead(_5);
        StorageDead(_12);
        StorageDead(_7);
        goto -> bb82;
    }

    bb7: {
        StorageLive(_15);
        _15 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_12);
        StorageDead(_7);
        goto -> bb82;
    }

    bb9: {
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = &(*_2);
        StorageLive(_25);
        StorageLive(_26);
        _193 = const _;
        _26 = &(*_193);
        _25 = &(*_26);
        _22 = AMM::get_pyth_twap(move _23, move _24, move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        _28 = discriminant(_21);
        switchInt(move _28) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        StorageLive(_32);
        _32 = ((_21 as Continue).0: i64);
        _20 = _32;
        StorageDead(_32);
        _19 = Option::<i64>::Some(move _20);
        StorageDead(_20);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _19);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb82;
    }

    bb13: {
        StorageLive(_29);
        _29 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_20);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb82;
    }

    bb15: {
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_1);
        StorageLive(_38);
        _38 = &(*_2);
        StorageLive(_39);
        StorageLive(_40);
        _192 = const _;
        _40 = &(*_192);
        _39 = &(*_40);
        _36 = AMM::get_pyth_twap(move _37, move _38, move _39) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _36) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_36);
        _42 = discriminant(_35);
        switchInt(move _42) -> [0: bb18, 1: bb19, otherwise: bb2];
    }

    bb18: {
        StorageLive(_46);
        _46 = ((_35 as Continue).0: i64);
        _34 = _46;
        StorageDead(_46);
        _33 = Option::<i64>::Some(move _34);
        StorageDead(_34);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _33);
        StorageDead(_40);
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb82;
    }

    bb19: {
        StorageLive(_43);
        _43 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_40);
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb82;
    }

    bb21: {
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &(*_2);
        StorageLive(_53);
        _53 = _3;
        _51 = get_switchboard_price(move _52, move _53) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_53);
        StorageDead(_52);
        _50 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _51) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_51);
        _54 = discriminant(_50);
        switchInt(move _54) -> [0: bb24, 1: bb25, otherwise: bb2];
    }

    bb24: {
        StorageLive(_58);
        _58 = ((_50 as Continue).0: state::oracle::OraclePriceData);
        _49 = _58;
        StorageDead(_58);
        _48 = (_49.0: i64);
        _47 = Option::<i64>::Some(move _48);
        StorageDead(_48);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _47);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb82;
    }

    bb25: {
        StorageLive(_55);
        _55 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_48);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb82;
    }

    bb27: {
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &(*_2);
        StorageLive(_65);
        _65 = _3;
        _63 = get_sb_on_demand_price(move _64, move _65) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_64);
        _62 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _63) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_63);
        _66 = discriminant(_62);
        switchInt(move _66) -> [0: bb30, 1: bb31, otherwise: bb2];
    }

    bb30: {
        StorageLive(_70);
        _70 = ((_62 as Continue).0: state::oracle::OraclePriceData);
        _61 = _70;
        StorageDead(_70);
        _60 = (_61.0: i64);
        _59 = Option::<i64>::Some(move _60);
        StorageDead(_60);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _59);
        StorageDead(_59);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb82;
    }

    bb31: {
        StorageLive(_67);
        _67 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb82;
    }

    bb33: {
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = const "Can't get oracle twap for quote asset";
        _72 = &(*_73);
        _71 = solana_program::log::sol_log(move _72) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_72);
        StorageDead(_73);
        StorageDead(_71);
        StorageLive(_74);
        _74 = error::ErrorCode::DefaultError;
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Err(move _74);
        StorageDead(_74);
        goto -> bb82;
    }

    bb35: {
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &(*_2);
        StorageLive(_81);
        _81 = _3;
        _79 = get_prelaunch_price(move _80, move _81) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_81);
        StorageDead(_80);
        _78 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _79) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_79);
        _82 = discriminant(_78);
        switchInt(move _82) -> [0: bb38, 1: bb39, otherwise: bb2];
    }

    bb38: {
        StorageLive(_86);
        _86 = ((_78 as Continue).0: state::oracle::OraclePriceData);
        _77 = _86;
        StorageDead(_86);
        _76 = (_77.0: i64);
        _75 = Option::<i64>::Some(move _76);
        StorageDead(_76);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _75);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        goto -> bb82;
    }

    bb39: {
        StorageLive(_83);
        _83 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_76);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        goto -> bb82;
    }

    bb41: {
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_1);
        StorageLive(_92);
        _92 = &(*_2);
        StorageLive(_93);
        StorageLive(_94);
        _191 = const _;
        _94 = &(*_191);
        _93 = &(*_94);
        _90 = AMM::get_pyth_twap(move _91, move _92, move _93) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        _89 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _90) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_90);
        _96 = discriminant(_89);
        switchInt(move _96) -> [0: bb44, 1: bb45, otherwise: bb2];
    }

    bb44: {
        StorageLive(_100);
        _100 = ((_89 as Continue).0: i64);
        _88 = _100;
        StorageDead(_100);
        _87 = Option::<i64>::Some(move _88);
        StorageDead(_88);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _87);
        StorageDead(_94);
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb82;
    }

    bb45: {
        StorageLive(_97);
        _97 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_99);
        _99 = _97;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _99) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_88);
        StorageDead(_94);
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb82;
    }

    bb47: {
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &(*_1);
        StorageLive(_106);
        _106 = &(*_2);
        StorageLive(_107);
        StorageLive(_108);
        _190 = const _;
        _108 = &(*_190);
        _107 = &(*_108);
        _104 = AMM::get_pyth_twap(move _105, move _106, move _107) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        _103 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _104) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_104);
        _110 = discriminant(_103);
        switchInt(move _110) -> [0: bb50, 1: bb51, otherwise: bb2];
    }

    bb50: {
        StorageLive(_114);
        _114 = ((_103 as Continue).0: i64);
        _102 = _114;
        StorageDead(_114);
        _101 = Option::<i64>::Some(move _102);
        StorageDead(_102);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _101);
        StorageDead(_108);
        StorageDead(_103);
        StorageDead(_101);
        goto -> bb82;
    }

    bb51: {
        StorageLive(_111);
        _111 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_108);
        StorageDead(_103);
        StorageDead(_101);
        goto -> bb82;
    }

    bb53: {
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_1);
        StorageLive(_120);
        _120 = &(*_2);
        StorageLive(_121);
        StorageLive(_122);
        _189 = const _;
        _122 = &(*_189);
        _121 = &(*_122);
        _118 = AMM::get_pyth_twap(move _119, move _120, move _121) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_119);
        _117 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _118) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_118);
        _124 = discriminant(_117);
        switchInt(move _124) -> [0: bb56, 1: bb57, otherwise: bb2];
    }

    bb56: {
        StorageLive(_128);
        _128 = ((_117 as Continue).0: i64);
        _116 = _128;
        StorageDead(_128);
        _115 = Option::<i64>::Some(move _116);
        StorageDead(_116);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _115);
        StorageDead(_122);
        StorageDead(_117);
        StorageDead(_115);
        goto -> bb82;
    }

    bb57: {
        StorageLive(_125);
        _125 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_127);
        _127 = _125;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _127) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_116);
        StorageDead(_122);
        StorageDead(_117);
        StorageDead(_115);
        goto -> bb82;
    }

    bb59: {
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &(*_1);
        StorageLive(_134);
        _134 = &(*_2);
        StorageLive(_135);
        StorageLive(_136);
        _188 = const _;
        _136 = &(*_188);
        _135 = &(*_136);
        _132 = AMM::get_pyth_twap(move _133, move _134, move _135) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        _131 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _132) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_132);
        _138 = discriminant(_131);
        switchInt(move _138) -> [0: bb62, 1: bb63, otherwise: bb2];
    }

    bb62: {
        StorageLive(_142);
        _142 = ((_131 as Continue).0: i64);
        _130 = _142;
        StorageDead(_142);
        _129 = Option::<i64>::Some(move _130);
        StorageDead(_130);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _129);
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_129);
        goto -> bb82;
    }

    bb63: {
        StorageLive(_139);
        _139 = ((_131 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_141);
        _141 = _139;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _141) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_130);
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_129);
        goto -> bb82;
    }

    bb65: {
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &(*_1);
        StorageLive(_148);
        _148 = &(*_2);
        StorageLive(_149);
        StorageLive(_150);
        _187 = const _;
        _150 = &(*_187);
        _149 = &(*_150);
        _146 = AMM::get_pyth_twap(move _147, move _148, move _149) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        _145 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _146) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_146);
        _152 = discriminant(_145);
        switchInt(move _152) -> [0: bb68, 1: bb69, otherwise: bb2];
    }

    bb68: {
        StorageLive(_156);
        _156 = ((_145 as Continue).0: i64);
        _144 = _156;
        StorageDead(_156);
        _143 = Option::<i64>::Some(move _144);
        StorageDead(_144);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _143);
        StorageDead(_150);
        StorageDead(_145);
        StorageDead(_143);
        goto -> bb82;
    }

    bb69: {
        StorageLive(_153);
        _153 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_155);
        _155 = _153;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _155) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_144);
        StorageDead(_150);
        StorageDead(_145);
        StorageDead(_143);
        goto -> bb82;
    }

    bb71: {
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &(*_1);
        StorageLive(_162);
        _162 = &(*_2);
        StorageLive(_163);
        StorageLive(_164);
        _186 = const _;
        _164 = &(*_186);
        _163 = &(*_164);
        _160 = AMM::get_pyth_twap(move _161, move _162, move _163) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        _159 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _160) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_160);
        _166 = discriminant(_159);
        switchInt(move _166) -> [0: bb74, 1: bb75, otherwise: bb2];
    }

    bb74: {
        StorageLive(_170);
        _170 = ((_159 as Continue).0: i64);
        _158 = _170;
        StorageDead(_170);
        _157 = Option::<i64>::Some(move _158);
        StorageDead(_158);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _157);
        StorageDead(_164);
        StorageDead(_159);
        StorageDead(_157);
        goto -> bb82;
    }

    bb75: {
        StorageLive(_167);
        _167 = ((_159 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_169);
        _169 = _167;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _169) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_158);
        StorageDead(_164);
        StorageDead(_159);
        StorageDead(_157);
        goto -> bb82;
    }

    bb77: {
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        _173 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _174) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_174);
        _180 = discriminant(_173);
        switchInt(move _180) -> [0: bb79, 1: bb80, otherwise: bb2];
    }

    bb79: {
        StorageLive(_184);
        _184 = ((_173 as Continue).0: i64);
        _172 = _184;
        StorageDead(_184);
        _171 = Option::<i64>::Some(move _172);
        StorageDead(_172);
        _0 = std::result::Result::<Option<i64>, error::ErrorCode>::Ok(move _171);
        StorageDead(_178);
        StorageDead(_173);
        StorageDead(_171);
        goto -> bb82;
    }

    bb80: {
        StorageLive(_181);
        _181 = ((_173 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_183);
        _183 = _181;
        _0 = <std::result::Result<Option<i64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _183) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_172);
        StorageDead(_178);
        StorageDead(_173);
        StorageDead(_171);
        goto -> bb82;
    }

    bb82: {
        return;
    }
}
