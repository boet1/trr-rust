// MIR for `get_maker_and_maker_stats` before PreCodegen

fn get_maker_and_maker_stats(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>) -> std::result::Result<(anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::prelude::AccountLoader<'_, UserStats>), error::ErrorCode> {
    debug account_info_iter => _1;
    let mut _0: std::result::Result<(anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>), error::ErrorCode>;
    let _2: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _4: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _5: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError>;
    let mut _6: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _7: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _8: error::ErrorCode;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: &anchor_lang::prelude::AccountInfo<'_>;
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: bool;
    let mut _18: ();
    let _20: ();
    let mut _21: &str;
    let _22: &str;
    let mut _23: &std::string::String;
    let _24: &std::string::String;
    let _25: std::string::String;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[&str; 2];
    let _30: &[&str; 2];
    let _31: [&str; 2];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let mut _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let mut _37: &error::ErrorCode;
    let _38: &error::ErrorCode;
    let mut _39: error::ErrorCode;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _47: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, error::ErrorCode>;
    let mut _48: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _49: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _50: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, error::ErrorCode>;
    let mut _51: error::ErrorCode;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _59: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _60: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError>;
    let mut _61: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _62: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _63: error::ErrorCode;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _69: ();
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _71: std::result::Result<(), error::ErrorCode>;
    let mut _72: bool;
    let mut _73: ();
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: &std::string::String;
    let _79: &std::string::String;
    let _80: std::string::String;
    let mut _82: std::fmt::Arguments<'_>;
    let mut _83: &[&str];
    let mut _84: &[&str; 2];
    let _85: &[&str; 2];
    let _86: [&str; 2];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let mut _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: &[core::fmt::rt::Argument<'_>; 1];
    let _90: [core::fmt::rt::Argument<'_>; 1];
    let mut _91: core::fmt::rt::Argument<'_>;
    let mut _92: &error::ErrorCode;
    let _93: &error::ErrorCode;
    let mut _94: error::ErrorCode;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _102: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _103: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _104: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _105: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _106: error::ErrorCode;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: (anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
    let mut _113: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _114: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    scope 1 {
        debug maker_account_info => _2;
        let _19: error::ErrorCode;
        let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _44: ();
        let _45: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
        let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _56: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
        scope 6 {
            debug error_code => _19;
            let _26: std::string::String;
            let mut _116: &[&str; 2];
            scope 7 {
                debug res => _26;
            }
        }
        scope 8 {
            debug residual => _41;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _44;
            scope 11 {
            }
        }
        scope 12 {
            debug maker => _45;
            let _57: &anchor_lang::prelude::AccountInfo<'_>;
            let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _68: &anchor_lang::prelude::AccountInfo<'_>;
            scope 17 {
                debug maker_stats_account_info => _57;
                let _74: error::ErrorCode;
                let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _99: ();
                let _100: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _111: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                scope 22 {
                    debug error_code => _74;
                    let _81: std::string::String;
                    let mut _115: &[&str; 2];
                    scope 23 {
                        debug res => _81;
                    }
                }
                scope 24 {
                    debug residual => _96;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _99;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug maker_stats => _100;
                }
                scope 29 {
                    debug residual => _108;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _111;
                    scope 32 {
                    }
                }
            }
            scope 18 {
                debug residual => _65;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _68;
                scope 21 {
                }
            }
        }
        scope 13 {
            debug residual => _53;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _56;
            scope 16 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = next_account_info::<'_, '_, Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = error::ErrorCode::MakerNotFound;
        _7 = std::result::Result::<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>::Err(move _8);
        StorageDead(_8);
        _4 = std::result::Result::<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError>::or::<error::ErrorCode>(move _5, move _7) -> [return: bb2, unwind: bb58];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_5);
        _3 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_4);
        _9 = discriminant(_3);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = ((_3 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _2 = _13;
        StorageDead(_13);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = ((*_2).6: bool);
        switchInt(move _17) -> [0: bb9, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::prelude::AccountLoader<'_, UserStats>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_3);
        goto -> bb54;
    }

    bb8: {
        StorageLive(_18);
        _18 = ();
        _16 = std::result::Result::<(), error::ErrorCode>::Ok(move _18);
        StorageDead(_18);
        goto -> bb16;
    }

    bb9: {
        StorageLive(_19);
        _19 = error::ErrorCode::MakerMustBeWritable;
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _116 = const _;
        _30 = &(*_116);
        _29 = &(*_30);
        _28 = move _29 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &_19;
        _37 = &(*_38);
        _36 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _37) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_37);
        _35 = [move _36];
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = move _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_33);
        _27 = Arguments::<'_>::new_v1(move _28, move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_28);
        _26 = format(move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_30);
        _25 = move _26;
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = <String as Deref>::deref(move _23) -> [return: bb13, unwind: bb57];
    }

    bb13: {
        _21 = &(*_22);
        StorageDead(_23);
        _20 = solana_program::log::sol_log(move _21) -> [return: bb14, unwind: bb57];
    }

    bb14: {
        StorageDead(_21);
        drop(_25) -> [return: bb15, unwind: bb58];
    }

    bb15: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_39);
        _39 = _19;
        _16 = std::result::Result::<(), error::ErrorCode>::Err(move _39);
        StorageDead(_39);
        StorageDead(_19);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_16);
        _40 = discriminant(_15);
        switchInt(move _40) -> [0: bb18, 1: bb19, otherwise: bb5];
    }

    bb18: {
        StorageLive(_44);
        _44 = ((_15 as Continue).0: ());
        _14 = _44;
        StorageDead(_44);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_2);
        _48 = anchor_lang::prelude::AccountLoader::<'_, User>::try_from(move _49) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_41);
        _41 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::prelude::AccountLoader<'_, UserStats>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb54;
    }

    bb21: {
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = error::ErrorCode::CouldNotDeserializeMaker;
        _50 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, error::ErrorCode>::Err(move _51);
        StorageDead(_51);
        _47 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _48, move _50) -> [return: bb22, unwind: bb58];
    }

    bb22: {
        StorageDead(_50);
        StorageDead(_48);
        _46 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, error::ErrorCode> as Try>::branch(move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_47);
        _52 = discriminant(_46);
        switchInt(move _52) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_56);
        _56 = move ((_46 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _45 = move _56;
        StorageDead(_56);
        StorageDead(_46);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut (*_1);
        _60 = next_account_info::<'_, '_, Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _61) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_53);
        _53 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::prelude::AccountLoader<'_, UserStats>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_46);
        goto -> bb53;
    }

    bb27: {
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = error::ErrorCode::MakerStatsNotFound;
        _62 = std::result::Result::<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>::Err(move _63);
        StorageDead(_63);
        _59 = std::result::Result::<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError>::or::<error::ErrorCode>(move _60, move _62) -> [return: bb28, unwind: bb58];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_60);
        _58 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _59) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_59);
        _64 = discriminant(_58);
        switchInt(move _64) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_68);
        _68 = ((_58 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _57 = _68;
        StorageDead(_68);
        StorageDead(_58);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = ((*_57).6: bool);
        switchInt(move _72) -> [0: bb34, otherwise: bb33];
    }

    bb31: {
        StorageLive(_65);
        _65 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::prelude::AccountLoader<'_, UserStats>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_58);
        goto -> bb52;
    }

    bb33: {
        StorageLive(_73);
        _73 = ();
        _71 = std::result::Result::<(), error::ErrorCode>::Ok(move _73);
        StorageDead(_73);
        goto -> bb41;
    }

    bb34: {
        StorageLive(_74);
        _74 = error::ErrorCode::MakerStatsMustBeWritable;
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _115 = const _;
        _85 = &(*_115);
        _84 = &(*_85);
        _83 = move _84 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_74;
        _92 = &(*_93);
        _91 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _92) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_92);
        _90 = [move _91];
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = move _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_88);
        _82 = Arguments::<'_>::new_v1(move _83, move _87) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_87);
        StorageDead(_83);
        _81 = format(move _82) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_82);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_85);
        _80 = move _81;
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = <String as Deref>::deref(move _78) -> [return: bb38, unwind: bb56];
    }

    bb38: {
        _76 = &(*_77);
        StorageDead(_78);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb39, unwind: bb56];
    }

    bb39: {
        StorageDead(_76);
        drop(_80) -> [return: bb40, unwind: bb58];
    }

    bb40: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_94);
        _94 = _74;
        _71 = std::result::Result::<(), error::ErrorCode>::Err(move _94);
        StorageDead(_94);
        StorageDead(_74);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_72);
        _70 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _71) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_71);
        _95 = discriminant(_70);
        switchInt(move _95) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_99);
        _99 = ((_70 as Continue).0: ());
        _69 = _99;
        StorageDead(_99);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &(*_57);
        _103 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::try_from(move _104) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_96);
        _96 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::prelude::AccountLoader<'_, UserStats>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb52;
    }

    bb46: {
        StorageDead(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = error::ErrorCode::CouldNotDeserializeMakerStats;
        _105 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, error::ErrorCode>::Err(move _106);
        StorageDead(_106);
        _102 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _103, move _105) -> [return: bb47, unwind: bb58];
    }

    bb47: {
        StorageDead(_105);
        StorageDead(_103);
        _101 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, error::ErrorCode> as Try>::branch(move _102) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_102);
        _107 = discriminant(_101);
        switchInt(move _107) -> [0: bb49, 1: bb50, otherwise: bb5];
    }

    bb49: {
        StorageLive(_111);
        _111 = move ((_101 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _100 = move _111;
        StorageDead(_111);
        StorageDead(_101);
        StorageLive(_112);
        StorageLive(_113);
        _113 = move _45;
        StorageLive(_114);
        _114 = move _100;
        _112 = (move _113, move _114);
        StorageDead(_114);
        StorageDead(_113);
        _0 = std::result::Result::<(anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::prelude::AccountLoader<'_, UserStats>), error::ErrorCode>::Ok(move _112);
        StorageDead(_112);
        StorageDead(_100);
        StorageDead(_57);
        StorageDead(_45);
        StorageDead(_2);
        goto -> bb55;
    }

    bb50: {
        StorageLive(_108);
        _108 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::prelude::AccountLoader<'_, UserStats>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_57);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_45);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_2);
        goto -> bb55;
    }

    bb55: {
        return;
    }

    bb56 (cleanup): {
        drop(_80) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_25) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        resume;
    }
}
