// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::validate_num_spot_liabilities` after PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::validate_num_spot_liabilities(_1: &MarginCalculation) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: bool;
    let mut _4: u8;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _7: std::result::Result<(), error::ErrorCode>;
    let mut _8: bool;
    let mut _9: u128;
    let mut _10: ();
    let _11: error::ErrorCode;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 2];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &error::ErrorCode;
    let _30: &error::ErrorCode;
    let _31: ();
    let mut _32: &str;
    let _33: &str;
    let mut _34: &std::string::String;
    let _35: &std::string::String;
    let _36: std::string::String;
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[&str; 2];
    let _41: &[&str; 2];
    let _42: [&str; 2];
    let mut _43: &[core::fmt::rt::Argument<'_>];
    let mut _44: &[core::fmt::rt::Argument<'_>; 1];
    let _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: [core::fmt::rt::Argument<'_>; 1];
    let mut _47: core::fmt::rt::Argument<'_>;
    let mut _48: &u8;
    let _49: &u8;
    let mut _50: error::ErrorCode;
    let mut _51: isize;
    let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _55: ();
    let mut _56: ();
    scope 1 {
        debug error_code => _11;
        let _18: std::string::String;
        let _37: std::string::String;
        let mut _57: &[&str; 2];
        let mut _58: &[&str; 2];
        scope 2 {
            debug res => _18;
        }
        scope 3 {
            debug res => _37;
        }
    }
    scope 4 {
        debug residual => _52;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _55;
        scope 7 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).5: u8);
        _3 = Gt(move _4, const 0_u8);
        switchInt(move _3) -> [0: bb22, otherwise: bb1];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).3: u128);
        _8 = Gt(move _9, const 0_u128);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = ();
        _7 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        goto -> bb16;
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_11);
        _11 = error::ErrorCode::InvalidMarginRatio;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _58 = const _;
        _22 = &(*_58);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_11;
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _29) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_29);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb8, unwind: bb26];
    }

    bb8: {
        StorageDead(_13);
        drop(_17) -> [return: bb9, unwind: bb27];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _57 = const _;
        _41 = &(*_57);
        _40 = &(*_41);
        _39 = move _40 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &((*_1).5: u8);
        _48 = &(*_49);
        _47 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _48) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_48);
        _46 = [move _47];
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = move _44 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_44);
        _38 = Arguments::<'_>::new_v1(move _39, move _43) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_43);
        StorageDead(_39);
        _37 = format(move _38) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_38);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        _36 = move _37;
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        _33 = <String as Deref>::deref(move _34) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = solana_program::log::sol_log(move _32) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        StorageDead(_32);
        drop(_36) -> [return: bb15, unwind: bb27];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_50);
        _50 = _11;
        _7 = std::result::Result::<(), error::ErrorCode>::Err(move _50);
        StorageDead(_50);
        StorageDead(_11);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_8);
        _6 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _7) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_7);
        _51 = discriminant(_6);
        switchInt(move _51) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_55);
        _55 = ((_6 as Continue).0: ());
        _5 = _55;
        StorageDead(_55);
        StorageDead(_6);
        StorageDead(_5);
        _2 = const ();
        goto -> bb23;
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_52);
        _52 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb24;
    }

    bb22: {
        StorageDead(_4);
        _2 = const ();
        goto -> bb23;
    }

    bb23: {
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_56);
        _56 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _56);
        StorageDead(_56);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_36) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_17) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}
