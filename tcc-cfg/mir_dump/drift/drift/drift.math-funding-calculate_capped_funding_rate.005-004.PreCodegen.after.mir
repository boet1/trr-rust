// MIR for `calculate_capped_funding_rate` after PreCodegen

fn calculate_capped_funding_rate(_1: &PerpMarket, _2: i128, _3: i128) -> std::result::Result<(i128, i128), error::ErrorCode> {
    debug market => _1;
    debug uncapped_funding_pnl => _2;
    debug funding_rate => _3;
    let mut _0: std::result::Result<(i128, i128), error::ErrorCode>;
    let _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: &state::perp_market::PerpMarket;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: u128;
    let mut _14: i128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _16: std::result::Result<i128, error::ErrorCode>;
    let mut _17: i128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _19: std::result::Result<i128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: bool;
    let mut _33: i128;
    let mut _34: i128;
    let mut _36: bool;
    let mut _37: i128;
    let mut _38: i128;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _41: std::result::Result<i128, error::ErrorCode>;
    let mut _42: i128;
    let mut _43: i128;
    let mut _44: bool;
    let mut _45: i128;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _53: std::result::Result<i128, error::ErrorCode>;
    let mut _54: i128;
    let mut _55: i128;
    let mut _56: i128;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: bool;
    let mut _63: i128;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _65: std::result::Result<i128, error::ErrorCode>;
    let mut _66: i128;
    let mut _67: i128;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _74: std::result::Result<i128, error::ErrorCode>;
    let mut _75: i128;
    let mut _76: i128;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: (i128, i128);
    let mut _83: i128;
    let mut _84: i128;
    scope 1 {
        debug fee_pool => _4;
        let _13: i128;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: i128;
        let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _30: i128;
        scope 6 {
            debug funding_rate_pnl_limit => _13;
            let _32: i128;
            scope 15 {
                debug capped_funding_pnl => _32;
                let _35: i128;
                let _39: i128;
                let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _50: i128;
                scope 16 {
                    debug capped_funding_rate => _35;
                }
                scope 17 {
                    debug funding_payment_from_users => _39;
                    let _51: i128;
                    let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _61: i128;
                    scope 22 {
                        debug funding_rate_pnl_limit => _51;
                        let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _72: i128;
                        let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _81: i128;
                        scope 27 {
                            debug residual => _69;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _72;
                            scope 30 {
                            }
                        }
                        scope 31 {
                            debug residual => _78;
                            scope 32 {
                            }
                        }
                        scope 33 {
                            debug val => _81;
                            scope 34 {
                            }
                        }
                    }
                    scope 23 {
                        debug residual => _58;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => _61;
                        scope 26 {
                        }
                    }
                }
                scope 18 {
                    debug residual => _47;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _50;
                    scope 21 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _22;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _25;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _27;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _30;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = calculate_fee_pool(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: u128);
        _4 = _12;
        StorageDead(_12);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _4;
        _19 = <u128 as Cast>::cast::<i128>(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_5);
        goto -> bb54;
    }

    bb7: {
        StorageDead(_20);
        _18 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_18 as Continue).0: i128);
        _17 = _25;
        StorageDead(_25);
        _16 = <i128 as SafeMath>::safe_div(move _17, const 3_i128) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb52;
    }

    bb12: {
        StorageDead(_17);
        _15 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_16);
        _26 = discriminant(_15);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_30);
        _30 = ((_15 as Continue).0: i128);
        _14 = _30;
        StorageDead(_30);
        _31 = Eq(_14, const i128::MIN);
        assert(!move _31, "attempt to negate `{}`, which would overflow", _14) -> [success: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_27);
        _27 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        goto -> bb52;
    }

    bb17: {
        _13 = Neg(move _14);
        StorageDead(_14);
        StorageDead(_18);
        StorageDead(_15);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _2;
        StorageLive(_34);
        _34 = _13;
        _32 = std::cmp::max::<i128>(move _33, move _34) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _2;
        StorageLive(_38);
        _38 = _13;
        _36 = Lt(move _37, move _38);
        switchInt(move _36) -> [0: bb47, otherwise: bb19];
    }

    bb19: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _3;
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _3;
        _44 = Gt(move _45, const 0_i128);
        switchInt(move _44) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_45);
        _43 = (((*_1).1: state::perp_market::AMM).13: i128);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_45);
        _43 = (((*_1).1: state::perp_market::AMM).14: i128);
        goto -> bb22;
    }

    bb22: {
        StorageDead(_44);
        _41 = calculate_funding_payment_in_quote_precision(move _42, move _43) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _41) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_41);
        _46 = discriminant(_40);
        switchInt(move _46) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_50);
        _50 = ((_40 as Continue).0: i128);
        _39 = _50;
        StorageDead(_50);
        StorageDead(_40);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _13;
        StorageLive(_55);
        StorageLive(_56);
        _56 = _39;
        _55 = core::num::<impl i128>::abs(move _56) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_47);
        _47 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_40);
        goto -> bb51;
    }

    bb28: {
        StorageDead(_56);
        _53 = <i128 as SafeMath>::safe_sub(move _54, move _55) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_55);
        StorageDead(_54);
        _52 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _53) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_53);
        _57 = discriminant(_52);
        switchInt(move _57) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_61);
        _61 = ((_52 as Continue).0: i128);
        _51 = _61;
        StorageDead(_61);
        StorageDead(_52);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _3;
        _62 = Lt(move _63, const 0_i128);
        switchInt(move _62) -> [0: bb35, otherwise: bb34];
    }

    bb32: {
        StorageLive(_58);
        _58 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_52);
        goto -> bb50;
    }

    bb34: {
        StorageDead(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _51;
        StorageLive(_67);
        _67 = (((*_1).1: state::perp_market::AMM).13: i128);
        _65 = calculate_funding_rate_from_pnl_limit(move _66, move _67) -> [return: bb36, unwind continue];
    }

    bb35: {
        StorageDead(_63);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _51;
        StorageLive(_76);
        _76 = (((*_1).1: state::perp_market::AMM).14: i128);
        _74 = calculate_funding_rate_from_pnl_limit(move _75, move _76) -> [return: bb41, unwind continue];
    }

    bb36: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _65) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_65);
        _68 = discriminant(_64);
        switchInt(move _68) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_72);
        _72 = ((_64 as Continue).0: i128);
        _35 = _72;
        StorageDead(_72);
        StorageDead(_64);
        goto -> bb46;
    }

    bb39: {
        StorageLive(_69);
        _69 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_64);
        goto -> bb49;
    }

    bb41: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _74) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_74);
        _77 = discriminant(_73);
        switchInt(move _77) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_81);
        _81 = ((_73 as Continue).0: i128);
        _35 = _81;
        StorageDead(_81);
        StorageDead(_73);
        goto -> bb46;
    }

    bb44: {
        StorageLive(_78);
        _78 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_73);
        goto -> bb49;
    }

    bb46: {
        StorageDead(_62);
        StorageDead(_51);
        StorageDead(_39);
        goto -> bb48;
    }

    bb47: {
        StorageDead(_38);
        StorageDead(_37);
        _35 = _3;
        goto -> bb48;
    }

    bb48: {
        StorageDead(_36);
        StorageLive(_82);
        StorageLive(_83);
        _83 = _35;
        StorageLive(_84);
        _84 = _32;
        _82 = (move _83, move _84);
        StorageDead(_84);
        StorageDead(_83);
        _0 = std::result::Result::<(i128, i128), error::ErrorCode>::Ok(move _82);
        StorageDead(_82);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_13);
        StorageDead(_4);
        goto -> bb55;
    }

    bb49: {
        StorageDead(_62);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_51);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_32);
        goto -> bb53;
    }

    bb52: {
        StorageDead(_14);
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_13);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_4);
        goto -> bb55;
    }

    bb55: {
        return;
    }
}
