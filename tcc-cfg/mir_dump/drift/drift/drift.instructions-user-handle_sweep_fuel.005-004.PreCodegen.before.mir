// MIR for `instructions::user::handle_sweep_fuel` before PreCodegen

fn instructions::user::handle_sweep_fuel(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::SweepFuel<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _4: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _8: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: std::cell::RefMut<'_, state::user::UserStats>;
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: bool;
    let mut _18: &state::user::UserStats;
    let _19: &state::user::UserStats;
    let mut _20: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _21: ();
    let _23: ();
    let mut _24: &str;
    let _25: &str;
    let mut _26: &std::string::String;
    let _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[&str; 2];
    let _33: &[&str; 2];
    let _34: [&str; 2];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let mut _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: &error::ErrorCode;
    let _41: &error::ErrorCode;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: error::ErrorCode;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::FuelOverflow>>;
    let mut _53: std::result::Result<std::cell::RefMut<'_, state::user::FuelOverflow>, error::ErrorCode>;
    let mut _54: std::result::Result<std::cell::RefMut<'_, state::user::FuelOverflow>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let _56: &anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let mut _57: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _65: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _71: ();
    let _72: ();
    let mut _73: &[&[u8]];
    let mut _74: &[&[u8]; 1];
    let _75: &[&[u8]; 1];
    let _76: [&[u8]; 1];
    let mut _77: &[u8];
    let _78: &[u8];
    let mut _79: &std::vec::Vec<u8>;
    let _80: &std::vec::Vec<u8>;
    let _81: std::vec::Vec<u8>;
    let mut _82: &state::events::FuelSweepRecord;
    let _83: &state::events::FuelSweepRecord;
    let _84: state::events::FuelSweepRecord;
    let mut _85: i64;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _87: std::result::Result<i64, error::ErrorCode>;
    let mut _88: i64;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _94: anchor_lang::prelude::Pubkey;
    let mut _95: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _96: u32;
    let mut _97: &state::user::UserStats;
    let mut _98: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _99: u32;
    let mut _100: &state::user::UserStats;
    let mut _101: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _102: u32;
    let mut _103: &state::user::UserStats;
    let mut _104: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _105: u32;
    let mut _106: &state::user::UserStats;
    let mut _107: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _108: u32;
    let mut _109: &state::user::UserStats;
    let mut _110: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _111: u32;
    let mut _112: &state::user::UserStats;
    let mut _113: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _114: u128;
    let mut _115: &state::user::FuelOverflow;
    let mut _116: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _117: u128;
    let mut _118: &state::user::FuelOverflow;
    let mut _119: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _120: u128;
    let mut _121: &state::user::FuelOverflow;
    let mut _122: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _123: u128;
    let mut _124: &state::user::FuelOverflow;
    let mut _125: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _126: u128;
    let mut _127: &state::user::FuelOverflow;
    let mut _128: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _129: u128;
    let mut _130: &state::user::FuelOverflow;
    let mut _131: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let _132: ();
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _134: std::result::Result<(), error::ErrorCode>;
    let mut _135: &mut state::user::FuelOverflow;
    let mut _136: &mut state::user::FuelOverflow;
    let mut _137: &mut std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _138: &state::user::UserStats;
    let _139: &state::user::UserStats;
    let mut _140: &std::cell::RefMut<'_, state::user::UserStats>;
    let _141: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _142: u32;
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _144: std::result::Result<u32, error::ErrorCode>;
    let mut _145: i64;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _156: ();
    let mut _157: &mut state::user::UserStats;
    let mut _158: &mut state::user::UserStats;
    let mut _159: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _160: ();
    let mut _162: &mut instructions::user::SweepFuel<'_>;
    let mut _163: &mut instructions::user::SweepFuel<'_>;
    let mut _164: &mut instructions::user::SweepFuel<'_>;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    scope 1 {
        debug user_stats => _2;
        let _22: error::ErrorCode;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: ();
        let mut _51: std::cell::RefMut<'_, state::user::FuelOverflow>;
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: std::cell::RefMut<'_, state::user::FuelOverflow>;
        scope 6 {
            debug error_code => _22;
            let _29: std::string::String;
            let mut _161: &[&str; 2];
            scope 7 {
                debug res => _29;
            }
        }
        scope 8 {
            debug residual => _47;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _50;
            scope 11 {
            }
        }
        scope 12 {
            debug fuel_overflow => _51;
            let _63: anchor_lang::prelude::Clock;
            let _67: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _70: anchor_lang::prelude::Clock;
            scope 17 {
                debug clock => _63;
                let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _93: i64;
                let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _150: u32;
                let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _155: ();
                scope 22 {
                    debug residual => _90;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _93;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug residual => _147;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug val => _150;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug residual => _152;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug val => _155;
                    scope 33 {
                    }
                }
            }
            scope 18 {
                debug residual => _67;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _70;
                scope 21 {
                }
            }
        }
        scope 13 {
            debug residual => _59;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _62;
            scope 16 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _162 = deref_copy (_1.1: &mut instructions::user::SweepFuel<'_>);
        _7 = &((*_162).1: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _6 = &(*_7);
        _5 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _4 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _5, move _8) -> [return: bb2, unwind: bb83];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_5);
        _3 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _4) -> [return: bb3, unwind: bb83];
    }

    bb3: {
        StorageDead(_4);
        _9 = discriminant(_3);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = move ((_3 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _2 = move _13;
        StorageDead(_13);
        _167 = discriminant(_3);
        StorageDead(_7);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_2;
        _19 = <RefMut<'_, UserStats> as Deref>::deref(move _20) -> [return: bb8, unwind: bb82];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind: bb86];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        _165 = discriminant(_3);
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb77;
    }

    bb8: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = UserStats::can_sweep_fuel(move _18) -> [return: bb9, unwind: bb82];
    }

    bb9: {
        switchInt(move _17) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_21);
        _21 = ();
        _16 = std::result::Result::<(), error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        goto -> bb19;
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        _22 = error::ErrorCode::UserFuelOverflowThresholdNotMet;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _161 = const _;
        _33 = &(*_161);
        _32 = &(*_33);
        _31 = move _32 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_22;
        _40 = &(*_41);
        _39 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _40) -> [return: bb12, unwind: bb82];
    }

    bb12: {
        StorageDead(_40);
        _38 = [move _39];
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = move _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_36);
        _30 = Arguments::<'_>::new_v1(move _31, move _35) -> [return: bb13, unwind: bb82];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_31);
        _29 = format(move _30) -> [return: bb14, unwind: bb82];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        _28 = move _29;
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = <String as Deref>::deref(move _26) -> [return: bb15, unwind: bb81];
    }

    bb15: {
        _24 = &(*_25);
        StorageDead(_26);
        _23 = solana_program::log::sol_log(move _24) -> [return: bb16, unwind: bb81];
    }

    bb16: {
        StorageDead(_24);
        drop(_28) -> [return: bb17, unwind: bb82];
    }

    bb17: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = const "User fuel sweep threshold not met";
        _43 = &(*_44);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb18, unwind: bb82];
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_45);
        _45 = _22;
        _16 = std::result::Result::<(), error::ErrorCode>::Err(move _45);
        StorageDead(_45);
        StorageDead(_22);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb20, unwind: bb82];
    }

    bb20: {
        StorageDead(_16);
        _46 = discriminant(_15);
        switchInt(move _46) -> [0: bb21, 1: bb22, otherwise: bb5];
    }

    bb21: {
        StorageLive(_50);
        _50 = ((_15 as Continue).0: ());
        _14 = _50;
        StorageDead(_50);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _163 = deref_copy (_1.1: &mut instructions::user::SweepFuel<'_>);
        _56 = &((*_163).0: anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>);
        _55 = &(*_56);
        _54 = anchor_lang::prelude::AccountLoader::<'_, FuelOverflow>::load_mut(move _55) -> [return: bb24, unwind: bb82];
    }

    bb22: {
        StorageLive(_47);
        _47 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb23, unwind: bb82];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb76;
    }

    bb24: {
        StorageDead(_55);
        StorageLive(_57);
        _57 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _53 = std::result::Result::<RefMut<'_, FuelOverflow>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _54, move _57) -> [return: bb25, unwind: bb82];
    }

    bb25: {
        StorageDead(_57);
        StorageDead(_54);
        _52 = <std::result::Result<RefMut<'_, FuelOverflow>, error::ErrorCode> as Try>::branch(move _53) -> [return: bb26, unwind: bb82];
    }

    bb26: {
        StorageDead(_53);
        _58 = discriminant(_52);
        switchInt(move _58) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_62);
        _62 = move ((_52 as Continue).0: std::cell::RefMut<'_, state::user::FuelOverflow>);
        _51 = move _62;
        StorageDead(_62);
        _171 = discriminant(_52);
        StorageDead(_56);
        StorageDead(_52);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb30, unwind: bb80];
    }

    bb28: {
        StorageLive(_59);
        _59 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb29, unwind: bb85];
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_59);
        _169 = discriminant(_52);
        StorageDead(_56);
        StorageDead(_52);
        goto -> bb75;
    }

    bb30: {
        _64 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _65) -> [return: bb31, unwind: bb80];
    }

    bb31: {
        StorageDead(_65);
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb32, 1: bb33, otherwise: bb5];
    }

    bb32: {
        StorageLive(_70);
        _70 = move ((_64 as Continue).0: anchor_lang::prelude::Clock);
        _63 = move _70;
        StorageDead(_70);
        _173 = discriminant(_64);
        StorageDead(_64);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = (_63.4: i64);
        _87 = <i64 as Cast>::cast::<i64>(move _88) -> [return: bb35, unwind: bb80];
    }

    bb33: {
        StorageLive(_67);
        _67 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_69);
        _69 = move _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _69) -> [return: bb34, unwind: bb84];
    }

    bb34: {
        StorageDead(_69);
        StorageDead(_67);
        _175 = discriminant(_64);
        StorageDead(_64);
        goto -> bb74;
    }

    bb35: {
        StorageDead(_88);
        _86 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _87) -> [return: bb36, unwind: bb80];
    }

    bb36: {
        StorageDead(_87);
        _89 = discriminant(_86);
        switchInt(move _89) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_93);
        _93 = ((_86 as Continue).0: i64);
        _85 = _93;
        StorageDead(_93);
        StorageLive(_94);
        StorageLive(_95);
        _164 = deref_copy (_1.1: &mut instructions::user::SweepFuel<'_>);
        _95 = &((*_164).2: anchor_lang::prelude::AccountInfo<'_>);
        _94 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _95) -> [return: bb40, unwind: bb80];
    }

    bb38: {
        StorageLive(_90);
        _90 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb39, unwind: bb80];
    }

    bb39: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb74;
    }

    bb40: {
        StorageDead(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_2;
        _97 = <RefMut<'_, UserStats> as Deref>::deref(move _98) -> [return: bb41, unwind: bb80];
    }

    bb41: {
        StorageDead(_98);
        _96 = ((*_97).17: u32);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_2;
        _100 = <RefMut<'_, UserStats> as Deref>::deref(move _101) -> [return: bb42, unwind: bb80];
    }

    bb42: {
        StorageDead(_101);
        _99 = ((*_100).18: u32);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_2;
        _103 = <RefMut<'_, UserStats> as Deref>::deref(move _104) -> [return: bb43, unwind: bb80];
    }

    bb43: {
        StorageDead(_104);
        _102 = ((*_103).19: u32);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_2;
        _106 = <RefMut<'_, UserStats> as Deref>::deref(move _107) -> [return: bb44, unwind: bb80];
    }

    bb44: {
        StorageDead(_107);
        _105 = ((*_106).20: u32);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_2;
        _109 = <RefMut<'_, UserStats> as Deref>::deref(move _110) -> [return: bb45, unwind: bb80];
    }

    bb45: {
        StorageDead(_110);
        _108 = ((*_109).21: u32);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_2;
        _112 = <RefMut<'_, UserStats> as Deref>::deref(move _113) -> [return: bb46, unwind: bb80];
    }

    bb46: {
        StorageDead(_113);
        _111 = ((*_112).22: u32);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &_51;
        _115 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _116) -> [return: bb47, unwind: bb80];
    }

    bb47: {
        StorageDead(_116);
        _114 = ((*_115).1: u128);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_51;
        _118 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _119) -> [return: bb48, unwind: bb80];
    }

    bb48: {
        StorageDead(_119);
        _117 = ((*_118).2: u128);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &_51;
        _121 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _122) -> [return: bb49, unwind: bb80];
    }

    bb49: {
        StorageDead(_122);
        _120 = ((*_121).3: u128);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_51;
        _124 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _125) -> [return: bb50, unwind: bb80];
    }

    bb50: {
        StorageDead(_125);
        _123 = ((*_124).4: u128);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &_51;
        _127 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _128) -> [return: bb51, unwind: bb80];
    }

    bb51: {
        StorageDead(_128);
        _126 = ((*_127).5: u128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_51;
        _130 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _131) -> [return: bb52, unwind: bb80];
    }

    bb52: {
        StorageDead(_131);
        _129 = ((*_130).6: u128);
        _84 = FuelSweepRecord { ts: move _85, authority: move _94, user_stats_fuel_insurance: move _96, user_stats_fuel_deposits: move _99, user_stats_fuel_borrows: move _102, user_stats_fuel_positions: move _105, user_stats_fuel_taker: move _108, user_stats_fuel_maker: move _111, fuel_overflow_fuel_insurance: move _114, fuel_overflow_fuel_deposits: move _117, fuel_overflow_fuel_borrows: move _120, fuel_overflow_fuel_positions: move _123, fuel_overflow_fuel_taker: move _126, fuel_overflow_fuel_maker: move _129 };
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_85);
        _83 = &_84;
        _82 = &(*_83);
        _81 = <FuelSweepRecord as anchor_lang::Event>::data(move _82) -> [return: bb53, unwind: bb80];
    }

    bb53: {
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = <Vec<u8> as Deref>::deref(move _79) -> [return: bb54, unwind: bb79];
    }

    bb54: {
        _77 = &(*_78);
        StorageDead(_79);
        _76 = [move _77];
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = move _74 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_74);
        _72 = solana_program::log::sol_log_data(move _73) -> [return: bb55, unwind: bb79];
    }

    bb55: {
        StorageDead(_73);
        drop(_81) -> [return: bb56, unwind: bb80];
    }

    bb56: {
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_72);
        _71 = const ();
        StorageDead(_71);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &mut _51;
        _136 = <RefMut<'_, FuelOverflow> as DerefMut>::deref_mut(move _137) -> [return: bb57, unwind: bb80];
    }

    bb57: {
        _135 = &mut (*_136);
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_2;
        _140 = &(*_141);
        _139 = <RefMut<'_, UserStats> as Deref>::deref(move _140) -> [return: bb58, unwind: bb80];
    }

    bb58: {
        _138 = &(*_139);
        StorageDead(_140);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = (_63.4: i64);
        _144 = <i64 as Cast>::cast::<u32>(move _145) -> [return: bb59, unwind: bb80];
    }

    bb59: {
        StorageDead(_145);
        _143 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _144) -> [return: bb60, unwind: bb80];
    }

    bb60: {
        StorageDead(_144);
        _146 = discriminant(_143);
        switchInt(move _146) -> [0: bb61, 1: bb62, otherwise: bb5];
    }

    bb61: {
        StorageLive(_150);
        _150 = ((_143 as Continue).0: u32);
        _142 = _150;
        StorageDead(_150);
        _134 = FuelOverflow::update_from_user_stats(move _135, move _138, move _142) -> [return: bb64, unwind: bb80];
    }

    bb62: {
        StorageLive(_147);
        _147 = ((_143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb63, unwind: bb80];
    }

    bb63: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_142);
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb73;
    }

    bb64: {
        StorageDead(_142);
        StorageDead(_138);
        StorageDead(_135);
        _133 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _134) -> [return: bb65, unwind: bb80];
    }

    bb65: {
        StorageDead(_134);
        _151 = discriminant(_133);
        switchInt(move _151) -> [0: bb66, 1: bb67, otherwise: bb5];
    }

    bb66: {
        StorageLive(_155);
        _155 = ((_133 as Continue).0: ());
        _132 = _155;
        StorageDead(_155);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &mut _2;
        _158 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _159) -> [return: bb69, unwind: bb80];
    }

    bb67: {
        StorageLive(_152);
        _152 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb68, unwind: bb80];
    }

    bb68: {
        StorageDead(_154);
        StorageDead(_152);
        goto -> bb73;
    }

    bb69: {
        _157 = &mut (*_158);
        StorageDead(_159);
        _156 = UserStats::reset_fuel(move _157) -> [return: bb70, unwind: bb80];
    }

    bb70: {
        StorageDead(_157);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_160);
        _160 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _160);
        StorageDead(_160);
        StorageDead(_63);
        drop(_51) -> [return: bb71, unwind: bb82];
    }

    bb71: {
        StorageDead(_51);
        drop(_2) -> [return: bb72, unwind: bb83];
    }

    bb72: {
        StorageDead(_2);
        goto -> bb78;
    }

    bb73: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_63);
        drop(_51) -> [return: bb75, unwind: bb82];
    }

    bb75: {
        StorageDead(_51);
        goto -> bb76;
    }

    bb76: {
        drop(_2) -> [return: bb77, unwind: bb83];
    }

    bb77: {
        StorageDead(_2);
        goto -> bb78;
    }

    bb78: {
        return;
    }

    bb79 (cleanup): {
        drop(_81) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_51) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_28) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_2) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        resume;
    }

    bb84 (cleanup): {
        _177 = discriminant(_64);
        goto -> bb80;
    }

    bb85 (cleanup): {
        _178 = discriminant(_52);
        goto -> bb82;
    }

    bb86 (cleanup): {
        _179 = discriminant(_3);
        goto -> bb83;
    }
}
