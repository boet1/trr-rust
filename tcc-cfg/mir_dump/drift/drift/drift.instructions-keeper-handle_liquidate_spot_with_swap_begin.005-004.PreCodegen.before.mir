// MIR for `keeper::handle_liquidate_spot_with_swap_begin` before PreCodegen

fn keeper::handle_liquidate_spot_with_swap_begin(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::LiquidateSpotWithSwap<'_>>, _2: u16, _3: u16, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug asset_market_index => _2;
    debug liability_market_index => _3;
    debug swap_amount => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _9: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _18: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _28: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _29: ();
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _31: std::result::Result<(), error::ErrorCode>;
    let mut _32: bool;
    let mut _33: &anchor_lang::prelude::Pubkey;
    let mut _34: &anchor_lang::prelude::Pubkey;
    let mut _35: ();
    let _37: ();
    let mut _38: &str;
    let _39: &str;
    let mut _40: &std::string::String;
    let _41: &std::string::String;
    let _42: std::string::String;
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[&str; 2];
    let _47: &[&str; 2];
    let _48: [&str; 2];
    let mut _49: &[core::fmt::rt::Argument<'_>];
    let mut _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: &[core::fmt::rt::Argument<'_>; 1];
    let _52: [core::fmt::rt::Argument<'_>; 1];
    let mut _53: core::fmt::rt::Argument<'_>;
    let mut _54: &error::ErrorCode;
    let _55: &error::ErrorCode;
    let mut _56: error::ErrorCode;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: std::cell::RefMut<'_, state::user::User>;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _65: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _66: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _67: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _68: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _77: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _78: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _79: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _80: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: std::cell::RefMut<'_, state::user::User>;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _89: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _90: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _91: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _92: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _101: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _102: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _103: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _104: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _112: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _113: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: instructions::optional_accounts::AccountMaps<'_>;
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _119: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _120: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _121: &std::collections::BTreeSet<u16>;
    let _122: &std::collections::BTreeSet<u16>;
    let _123: std::collections::BTreeSet<u16>;
    let mut _124: &std::collections::BTreeSet<u16>;
    let _125: &std::collections::BTreeSet<u16>;
    let _126: std::collections::BTreeSet<u16>;
    let mut _127: std::vec::Vec<u16>;
    let mut _128: std::boxed::Box<[u16]>;
    let mut _129: std::boxed::Box<[u16; 2]>;
    let mut _130: usize;
    let mut _131: usize;
    let mut _132: *mut u8;
    let mut _133: std::boxed::Box<[u16; 2]>;
    let mut _134: u16;
    let mut _135: u16;
    let mut _136: u64;
    let mut _137: std::option::Option<state::state::OracleGuardRails>;
    let mut _138: state::state::OracleGuardRails;
    let mut _139: &state::state::State;
    let mut _140: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>>;
    let mut _148: std::result::Result<std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>, error::ErrorCode>;
    let mut _149: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _156: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _157: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _158: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _166: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _167: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _168: &u16;
    let _169: &u16;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _175: ();
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _177: std::result::Result<(), error::ErrorCode>;
    let mut _178: bool;
    let mut _179: u64;
    let mut _180: &state::spot_market::SpotMarket;
    let mut _181: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _182: bool;
    let mut _183: u64;
    let mut _184: &state::spot_market::SpotMarket;
    let mut _185: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _186: ();
    let _188: ();
    let mut _189: &str;
    let _190: &str;
    let mut _191: &std::string::String;
    let _192: &std::string::String;
    let _193: std::string::String;
    let mut _195: std::fmt::Arguments<'_>;
    let mut _196: &[&str];
    let mut _197: &[&str; 2];
    let _198: &[&str; 2];
    let _199: [&str; 2];
    let mut _200: &[core::fmt::rt::Argument<'_>];
    let mut _201: &[core::fmt::rt::Argument<'_>; 1];
    let _202: &[core::fmt::rt::Argument<'_>; 1];
    let _203: [core::fmt::rt::Argument<'_>; 1];
    let mut _204: core::fmt::rt::Argument<'_>;
    let mut _205: &error::ErrorCode;
    let _206: &error::ErrorCode;
    let _207: ();
    let mut _208: &str;
    let _209: &str;
    let mut _210: error::ErrorCode;
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _218: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _219: &mut state::oracle_map::OracleMap<'_>;
    let mut _220: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _221: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _222: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _223: &state::spot_market::SpotMarket;
    let _224: &state::spot_market::SpotMarket;
    let mut _225: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _226: isize;
    let mut _228: !;
    let mut _229: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _231: ();
    let mut _232: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _233: std::result::Result<(), error::ErrorCode>;
    let mut _234: &mut state::spot_market::SpotMarket;
    let mut _235: &mut state::spot_market::SpotMarket;
    let mut _236: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _237: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _238: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _239: &state::oracle::OraclePriceData;
    let mut _240: i64;
    let mut _241: isize;
    let mut _243: !;
    let mut _244: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _247: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _248: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _249: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _250: &u16;
    let _251: &u16;
    let mut _252: isize;
    let mut _254: !;
    let mut _255: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _257: ();
    let mut _258: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _259: std::result::Result<(), error::ErrorCode>;
    let mut _260: bool;
    let mut _261: u64;
    let mut _262: &state::spot_market::SpotMarket;
    let mut _263: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _264: bool;
    let mut _265: u64;
    let mut _266: &state::spot_market::SpotMarket;
    let mut _267: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _268: ();
    let _270: ();
    let mut _271: &str;
    let _272: &str;
    let mut _273: &std::string::String;
    let _274: &std::string::String;
    let _275: std::string::String;
    let mut _277: std::fmt::Arguments<'_>;
    let mut _278: &[&str];
    let mut _279: &[&str; 2];
    let _280: &[&str; 2];
    let _281: [&str; 2];
    let mut _282: &[core::fmt::rt::Argument<'_>];
    let mut _283: &[core::fmt::rt::Argument<'_>; 1];
    let _284: &[core::fmt::rt::Argument<'_>; 1];
    let _285: [core::fmt::rt::Argument<'_>; 1];
    let mut _286: core::fmt::rt::Argument<'_>;
    let mut _287: &error::ErrorCode;
    let _288: &error::ErrorCode;
    let _289: ();
    let mut _290: &str;
    let _291: &str;
    let mut _292: error::ErrorCode;
    let mut _293: isize;
    let mut _295: !;
    let mut _296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _299: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _300: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _301: &mut state::oracle_map::OracleMap<'_>;
    let mut _302: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _303: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _304: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _305: &state::spot_market::SpotMarket;
    let _306: &state::spot_market::SpotMarket;
    let mut _307: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _308: isize;
    let mut _310: !;
    let mut _311: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _313: ();
    let mut _314: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _315: std::result::Result<(), error::ErrorCode>;
    let mut _316: &mut state::spot_market::SpotMarket;
    let mut _317: &mut state::spot_market::SpotMarket;
    let mut _318: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _319: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _320: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _321: &state::oracle::OraclePriceData;
    let mut _322: i64;
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _328: ();
    let mut _329: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _330: ();
    let mut _331: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _332: ();
    let mut _333: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _334: std::result::Result<(), error::ErrorCode>;
    let mut _335: bool;
    let mut _336: u16;
    let mut _337: u16;
    let mut _338: ();
    let _340: ();
    let mut _341: &str;
    let _342: &str;
    let mut _343: &std::string::String;
    let _344: &std::string::String;
    let _345: std::string::String;
    let mut _347: std::fmt::Arguments<'_>;
    let mut _348: &[&str];
    let mut _349: &[&str; 2];
    let _350: &[&str; 2];
    let _351: [&str; 2];
    let mut _352: &[core::fmt::rt::Argument<'_>];
    let mut _353: &[core::fmt::rt::Argument<'_>; 1];
    let _354: &[core::fmt::rt::Argument<'_>; 1];
    let _355: [core::fmt::rt::Argument<'_>; 1];
    let mut _356: core::fmt::rt::Argument<'_>;
    let mut _357: &error::ErrorCode;
    let _358: &error::ErrorCode;
    let _359: ();
    let mut _360: &str;
    let _361: &str;
    let mut _362: error::ErrorCode;
    let mut _363: isize;
    let mut _365: !;
    let mut _366: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _368: ();
    let mut _369: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _370: std::result::Result<(), error::ErrorCode>;
    let mut _371: bool;
    let mut _372: u64;
    let mut _373: ();
    let _375: ();
    let mut _376: &str;
    let _377: &str;
    let mut _378: &std::string::String;
    let _379: &std::string::String;
    let _380: std::string::String;
    let mut _382: std::fmt::Arguments<'_>;
    let mut _383: &[&str];
    let mut _384: &[&str; 2];
    let _385: &[&str; 2];
    let _386: [&str; 2];
    let mut _387: &[core::fmt::rt::Argument<'_>];
    let mut _388: &[core::fmt::rt::Argument<'_>; 1];
    let _389: &[core::fmt::rt::Argument<'_>; 1];
    let _390: [core::fmt::rt::Argument<'_>; 1];
    let mut _391: core::fmt::rt::Argument<'_>;
    let mut _392: &error::ErrorCode;
    let _393: &error::ErrorCode;
    let _394: ();
    let mut _395: &str;
    let _396: &str;
    let mut _397: error::ErrorCode;
    let mut _398: isize;
    let mut _400: !;
    let mut _401: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _403: ();
    let mut _404: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _405: std::result::Result<(), error::ErrorCode>;
    let mut _406: u16;
    let mut _407: u16;
    let mut _408: u64;
    let mut _409: &mut state::user::User;
    let mut _410: &mut state::user::User;
    let mut _411: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _412: &anchor_lang::prelude::Pubkey;
    let _413: &anchor_lang::prelude::Pubkey;
    let mut _414: &mut state::user::UserStats;
    let mut _415: &mut state::user::UserStats;
    let mut _416: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _417: &mut state::user::User;
    let mut _418: &mut state::user::User;
    let mut _419: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _420: &anchor_lang::prelude::Pubkey;
    let _421: &anchor_lang::prelude::Pubkey;
    let mut _422: &mut state::user::UserStats;
    let mut _423: &mut state::user::UserStats;
    let mut _424: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _425: &state::perp_market_map::PerpMarketMap<'_>;
    let _426: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _427: &state::spot_market_map::SpotMarketMap<'_>;
    let _428: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _429: &mut state::oracle_map::OracleMap<'_>;
    let mut _430: &mut state::oracle_map::OracleMap<'_>;
    let mut _431: i64;
    let mut _432: u64;
    let mut _433: &state::state::State;
    let _434: &state::state::State;
    let mut _435: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _436: isize;
    let mut _438: !;
    let mut _439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _442: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _443: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _444: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _445: &u16;
    let _446: &u16;
    let mut _447: isize;
    let mut _449: !;
    let mut _450: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _453: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _454: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _455: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _456: &u16;
    let _457: &u16;
    let mut _458: isize;
    let mut _460: !;
    let mut _461: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _465: u64;
    let mut _466: &mut state::spot_market::SpotMarket;
    let mut _467: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _468: u64;
    let mut _469: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _470: &anchor_spl::token_interface::TokenAccount;
    let _471: &anchor_spl::token_interface::TokenAccount;
    let mut _472: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _473: &mut state::spot_market::SpotMarket;
    let mut _474: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _476: u64;
    let mut _477: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _478: &anchor_spl::token_interface::TokenAccount;
    let _479: &anchor_spl::token_interface::TokenAccount;
    let mut _480: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _481: &mut state::spot_market::SpotMarket;
    let mut _482: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _484: &state::spot_market::SpotMarket;
    let _485: &state::spot_market::SpotMarket;
    let mut _486: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _488: &state::spot_market::SpotMarket;
    let _489: &state::spot_market::SpotMarket;
    let mut _490: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _491: ();
    let mut _492: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _493: std::result::Result<(), error::ErrorCode>;
    let mut _494: bool;
    let mut _495: bool;
    let mut _496: ();
    let _498: ();
    let mut _499: &str;
    let _500: &str;
    let mut _501: &std::string::String;
    let _502: &std::string::String;
    let _503: std::string::String;
    let mut _505: std::fmt::Arguments<'_>;
    let mut _506: &[&str];
    let mut _507: &[&str; 2];
    let _508: &[&str; 2];
    let _509: [&str; 2];
    let mut _510: &[core::fmt::rt::Argument<'_>];
    let mut _511: &[core::fmt::rt::Argument<'_>; 1];
    let _512: &[core::fmt::rt::Argument<'_>; 1];
    let _513: [core::fmt::rt::Argument<'_>; 1];
    let mut _514: core::fmt::rt::Argument<'_>;
    let mut _515: &error::ErrorCode;
    let _516: &error::ErrorCode;
    let _517: ();
    let mut _518: &str;
    let _519: &str;
    let mut _520: error::ErrorCode;
    let mut _521: isize;
    let mut _523: !;
    let mut _524: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _526: ();
    let mut _527: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _528: std::result::Result<(), anchor_lang::error::Error>;
    let mut _529: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _530: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _531: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _532: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _533: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _534: &anchor_lang::prelude::AccountInfo<'_>;
    let _535: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _536: u8;
    let mut _537: &state::state::State;
    let mut _538: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _539: u64;
    let mut _540: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _541: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _542: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _543: bool;
    let mut _544: &state::spot_market::SpotMarket;
    let _545: &state::spot_market::SpotMarket;
    let mut _546: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _547: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _548: isize;
    let mut _550: !;
    let mut _551: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _554: &anchor_lang::prelude::UncheckedAccount<'_>;
    let mut _556: u16;
    let mut _557: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u16>;
    let mut _558: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _559: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _560: isize;
    let mut _562: !;
    let mut _563: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _566: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _567: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _568: usize;
    let mut _569: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _570: isize;
    let mut _572: !;
    let mut _573: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _575: ();
    let mut _576: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _577: std::result::Result<(), error::ErrorCode>;
    let mut _578: bool;
    let mut _579: &anchor_lang::prelude::Pubkey;
    let mut _580: &anchor_lang::prelude::Pubkey;
    let mut _581: ();
    let _583: ();
    let mut _584: &str;
    let _585: &str;
    let mut _586: &std::string::String;
    let _587: &std::string::String;
    let _588: std::string::String;
    let mut _590: std::fmt::Arguments<'_>;
    let mut _591: &[&str];
    let mut _592: &[&str; 2];
    let _593: &[&str; 2];
    let _594: [&str; 2];
    let mut _595: &[core::fmt::rt::Argument<'_>];
    let mut _596: &[core::fmt::rt::Argument<'_>; 1];
    let _597: &[core::fmt::rt::Argument<'_>; 1];
    let _598: [core::fmt::rt::Argument<'_>; 1];
    let mut _599: core::fmt::rt::Argument<'_>;
    let mut _600: &error::ErrorCode;
    let _601: &error::ErrorCode;
    let _602: ();
    let mut _603: &str;
    let _604: &str;
    let mut _605: error::ErrorCode;
    let mut _606: isize;
    let mut _608: !;
    let mut _609: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _612: usize;
    let mut _613: (usize, bool);
    let _615: ();
    let mut _616: ();
    let mut _618: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _619: usize;
    let mut _620: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _621: isize;
    let mut _622: isize;
    let mut _624: !;
    let mut _626: !;
    let mut _627: anchor_lang::error::Error;
    let mut _628: anchor_lang::prelude::ProgramError;
    let _629: ();
    let mut _630: bool;
    let mut _631: &anchor_lang::prelude::Pubkey;
    let mut _632: &anchor_lang::prelude::Pubkey;
    let _633: anchor_lang::prelude::Pubkey;
    let _634: ();
    let mut _635: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _636: std::result::Result<(), error::ErrorCode>;
    let mut _637: bool;
    let mut _638: ();
    let _640: ();
    let mut _641: &str;
    let _642: &str;
    let mut _643: &std::string::String;
    let _644: &std::string::String;
    let _645: std::string::String;
    let mut _647: std::fmt::Arguments<'_>;
    let mut _648: &[&str];
    let mut _649: &[&str; 2];
    let _650: &[&str; 2];
    let _651: [&str; 2];
    let mut _652: &[core::fmt::rt::Argument<'_>];
    let mut _653: &[core::fmt::rt::Argument<'_>; 1];
    let _654: &[core::fmt::rt::Argument<'_>; 1];
    let _655: [core::fmt::rt::Argument<'_>; 1];
    let mut _656: core::fmt::rt::Argument<'_>;
    let mut _657: &error::ErrorCode;
    let _658: &error::ErrorCode;
    let _659: ();
    let mut _660: &str;
    let _661: &str;
    let mut _662: error::ErrorCode;
    let mut _663: isize;
    let mut _665: !;
    let mut _666: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _669: ();
    let mut _670: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _671: std::result::Result<(), error::ErrorCode>;
    let mut _672: bool;
    let mut _673: &[u8];
    let _674: &[u8];
    let mut _675: &std::vec::Vec<u8>;
    let mut _676: std::ops::Range<usize>;
    let mut _677: &[u8; 8];
    let mut _678: ();
    let _680: ();
    let mut _681: &str;
    let _682: &str;
    let mut _683: &std::string::String;
    let _684: &std::string::String;
    let _685: std::string::String;
    let mut _687: std::fmt::Arguments<'_>;
    let mut _688: &[&str];
    let mut _689: &[&str; 2];
    let _690: &[&str; 2];
    let _691: [&str; 2];
    let mut _692: &[core::fmt::rt::Argument<'_>];
    let mut _693: &[core::fmt::rt::Argument<'_>; 1];
    let _694: &[core::fmt::rt::Argument<'_>; 1];
    let _695: [core::fmt::rt::Argument<'_>; 1];
    let mut _696: core::fmt::rt::Argument<'_>;
    let mut _697: &error::ErrorCode;
    let _698: &error::ErrorCode;
    let _699: ();
    let mut _700: &str;
    let _701: &str;
    let mut _702: error::ErrorCode;
    let mut _703: isize;
    let mut _705: !;
    let mut _706: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _708: ();
    let mut _709: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _710: std::result::Result<(), error::ErrorCode>;
    let mut _711: bool;
    let mut _712: &anchor_lang::prelude::Pubkey;
    let _713: anchor_lang::prelude::Pubkey;
    let mut _714: &anchor_lang::prelude::Signer<'_>;
    let mut _715: &anchor_lang::prelude::Pubkey;
    let _716: &anchor_lang::prelude::AccountMeta;
    let mut _717: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _718: ();
    let _720: ();
    let mut _721: &str;
    let _722: &str;
    let mut _723: &std::string::String;
    let _724: &std::string::String;
    let _725: std::string::String;
    let mut _727: std::fmt::Arguments<'_>;
    let mut _728: &[&str];
    let mut _729: &[&str; 2];
    let _730: &[&str; 2];
    let _731: [&str; 2];
    let mut _732: &[core::fmt::rt::Argument<'_>];
    let mut _733: &[core::fmt::rt::Argument<'_>; 1];
    let _734: &[core::fmt::rt::Argument<'_>; 1];
    let _735: [core::fmt::rt::Argument<'_>; 1];
    let mut _736: core::fmt::rt::Argument<'_>;
    let mut _737: &error::ErrorCode;
    let _738: &error::ErrorCode;
    let _739: ();
    let mut _740: &str;
    let _741: &str;
    let mut _742: error::ErrorCode;
    let mut _743: isize;
    let mut _745: !;
    let mut _746: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _748: ();
    let mut _749: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _750: std::result::Result<(), error::ErrorCode>;
    let mut _751: bool;
    let mut _752: &anchor_lang::prelude::Pubkey;
    let _753: anchor_lang::prelude::Pubkey;
    let mut _754: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _755: &anchor_lang::prelude::Pubkey;
    let _756: &anchor_lang::prelude::AccountMeta;
    let mut _757: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _758: ();
    let _760: ();
    let mut _761: &str;
    let _762: &str;
    let mut _763: &std::string::String;
    let _764: &std::string::String;
    let _765: std::string::String;
    let mut _767: std::fmt::Arguments<'_>;
    let mut _768: &[&str];
    let mut _769: &[&str; 2];
    let _770: &[&str; 2];
    let _771: [&str; 2];
    let mut _772: &[core::fmt::rt::Argument<'_>];
    let mut _773: &[core::fmt::rt::Argument<'_>; 1];
    let _774: &[core::fmt::rt::Argument<'_>; 1];
    let _775: [core::fmt::rt::Argument<'_>; 1];
    let mut _776: core::fmt::rt::Argument<'_>;
    let mut _777: &error::ErrorCode;
    let _778: &error::ErrorCode;
    let _779: ();
    let mut _780: &str;
    let _781: &str;
    let mut _782: error::ErrorCode;
    let mut _783: isize;
    let mut _785: !;
    let mut _786: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _788: ();
    let mut _789: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _790: std::result::Result<(), error::ErrorCode>;
    let mut _791: bool;
    let mut _792: &anchor_lang::prelude::Pubkey;
    let _793: anchor_lang::prelude::Pubkey;
    let mut _794: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _795: &anchor_lang::prelude::Pubkey;
    let _796: &anchor_lang::prelude::AccountMeta;
    let mut _797: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _798: ();
    let _800: ();
    let mut _801: &str;
    let _802: &str;
    let mut _803: &std::string::String;
    let _804: &std::string::String;
    let _805: std::string::String;
    let mut _807: std::fmt::Arguments<'_>;
    let mut _808: &[&str];
    let mut _809: &[&str; 2];
    let _810: &[&str; 2];
    let _811: [&str; 2];
    let mut _812: &[core::fmt::rt::Argument<'_>];
    let mut _813: &[core::fmt::rt::Argument<'_>; 1];
    let _814: &[core::fmt::rt::Argument<'_>; 1];
    let _815: [core::fmt::rt::Argument<'_>; 1];
    let mut _816: core::fmt::rt::Argument<'_>;
    let mut _817: &error::ErrorCode;
    let _818: &error::ErrorCode;
    let _819: ();
    let mut _820: &str;
    let _821: &str;
    let mut _822: error::ErrorCode;
    let mut _823: isize;
    let mut _825: !;
    let mut _826: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _828: ();
    let mut _829: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _830: std::result::Result<(), error::ErrorCode>;
    let mut _831: bool;
    let mut _832: &anchor_lang::prelude::Pubkey;
    let _833: anchor_lang::prelude::Pubkey;
    let mut _834: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _835: &anchor_lang::prelude::Pubkey;
    let _836: &anchor_lang::prelude::AccountMeta;
    let mut _837: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _838: ();
    let _840: ();
    let mut _841: &str;
    let _842: &str;
    let mut _843: &std::string::String;
    let _844: &std::string::String;
    let _845: std::string::String;
    let mut _847: std::fmt::Arguments<'_>;
    let mut _848: &[&str];
    let mut _849: &[&str; 2];
    let _850: &[&str; 2];
    let _851: [&str; 2];
    let mut _852: &[core::fmt::rt::Argument<'_>];
    let mut _853: &[core::fmt::rt::Argument<'_>; 1];
    let _854: &[core::fmt::rt::Argument<'_>; 1];
    let _855: [core::fmt::rt::Argument<'_>; 1];
    let mut _856: core::fmt::rt::Argument<'_>;
    let mut _857: &error::ErrorCode;
    let _858: &error::ErrorCode;
    let _859: ();
    let mut _860: &str;
    let _861: &str;
    let mut _862: error::ErrorCode;
    let mut _863: isize;
    let mut _865: !;
    let mut _866: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _868: ();
    let mut _869: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _870: std::result::Result<(), error::ErrorCode>;
    let mut _871: bool;
    let mut _872: &anchor_lang::prelude::Pubkey;
    let _873: anchor_lang::prelude::Pubkey;
    let mut _874: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _875: &anchor_lang::prelude::Pubkey;
    let _876: &anchor_lang::prelude::AccountMeta;
    let mut _877: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _878: ();
    let _880: ();
    let mut _881: &str;
    let _882: &str;
    let mut _883: &std::string::String;
    let _884: &std::string::String;
    let _885: std::string::String;
    let mut _887: std::fmt::Arguments<'_>;
    let mut _888: &[&str];
    let mut _889: &[&str; 2];
    let _890: &[&str; 2];
    let _891: [&str; 2];
    let mut _892: &[core::fmt::rt::Argument<'_>];
    let mut _893: &[core::fmt::rt::Argument<'_>; 1];
    let _894: &[core::fmt::rt::Argument<'_>; 1];
    let _895: [core::fmt::rt::Argument<'_>; 1];
    let mut _896: core::fmt::rt::Argument<'_>;
    let mut _897: &error::ErrorCode;
    let _898: &error::ErrorCode;
    let _899: ();
    let mut _900: &str;
    let _901: &str;
    let mut _902: error::ErrorCode;
    let mut _903: isize;
    let mut _905: !;
    let mut _906: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _908: ();
    let mut _909: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _910: std::result::Result<(), error::ErrorCode>;
    let mut _911: bool;
    let mut _912: &anchor_lang::prelude::Pubkey;
    let _913: anchor_lang::prelude::Pubkey;
    let mut _914: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _915: &anchor_lang::prelude::Pubkey;
    let _916: &anchor_lang::prelude::AccountMeta;
    let mut _917: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _918: ();
    let _920: ();
    let mut _921: &str;
    let _922: &str;
    let mut _923: &std::string::String;
    let _924: &std::string::String;
    let _925: std::string::String;
    let mut _927: std::fmt::Arguments<'_>;
    let mut _928: &[&str];
    let mut _929: &[&str; 2];
    let _930: &[&str; 2];
    let _931: [&str; 2];
    let mut _932: &[core::fmt::rt::Argument<'_>];
    let mut _933: &[core::fmt::rt::Argument<'_>; 1];
    let _934: &[core::fmt::rt::Argument<'_>; 1];
    let _935: [core::fmt::rt::Argument<'_>; 1];
    let mut _936: core::fmt::rt::Argument<'_>;
    let mut _937: &error::ErrorCode;
    let _938: &error::ErrorCode;
    let _939: ();
    let mut _940: &str;
    let _941: &str;
    let mut _942: error::ErrorCode;
    let mut _943: isize;
    let mut _945: !;
    let mut _946: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _948: ();
    let mut _949: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _950: std::result::Result<(), error::ErrorCode>;
    let mut _951: bool;
    let mut _952: &anchor_lang::prelude::Pubkey;
    let _953: anchor_lang::prelude::Pubkey;
    let mut _954: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _955: &anchor_lang::prelude::Pubkey;
    let _956: &anchor_lang::prelude::AccountMeta;
    let mut _957: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _958: ();
    let _960: ();
    let mut _961: &str;
    let _962: &str;
    let mut _963: &std::string::String;
    let _964: &std::string::String;
    let _965: std::string::String;
    let mut _967: std::fmt::Arguments<'_>;
    let mut _968: &[&str];
    let mut _969: &[&str; 2];
    let _970: &[&str; 2];
    let _971: [&str; 2];
    let mut _972: &[core::fmt::rt::Argument<'_>];
    let mut _973: &[core::fmt::rt::Argument<'_>; 1];
    let _974: &[core::fmt::rt::Argument<'_>; 1];
    let _975: [core::fmt::rt::Argument<'_>; 1];
    let mut _976: core::fmt::rt::Argument<'_>;
    let mut _977: &error::ErrorCode;
    let _978: &error::ErrorCode;
    let _979: ();
    let mut _980: &str;
    let _981: &str;
    let mut _982: error::ErrorCode;
    let mut _983: isize;
    let mut _985: !;
    let mut _986: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _988: ();
    let mut _989: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _990: std::result::Result<(), error::ErrorCode>;
    let mut _991: bool;
    let mut _992: usize;
    let mut _993: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _994: usize;
    let mut _995: usize;
    let mut _996: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _997: (usize, bool);
    let mut _998: ();
    let _1000: ();
    let mut _1001: &str;
    let _1002: &str;
    let mut _1003: &std::string::String;
    let _1004: &std::string::String;
    let _1005: std::string::String;
    let mut _1007: std::fmt::Arguments<'_>;
    let mut _1008: &[&str];
    let mut _1009: &[&str; 2];
    let _1010: &[&str; 2];
    let _1011: [&str; 2];
    let mut _1012: &[core::fmt::rt::Argument<'_>];
    let mut _1013: &[core::fmt::rt::Argument<'_>; 1];
    let _1014: &[core::fmt::rt::Argument<'_>; 1];
    let _1015: [core::fmt::rt::Argument<'_>; 1];
    let mut _1016: core::fmt::rt::Argument<'_>;
    let mut _1017: &error::ErrorCode;
    let _1018: &error::ErrorCode;
    let _1019: ();
    let mut _1020: &str;
    let _1021: &str;
    let mut _1022: error::ErrorCode;
    let mut _1023: isize;
    let mut _1025: !;
    let mut _1026: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1028: std::ops::Range<usize>;
    let mut _1029: std::ops::Range<usize>;
    let mut _1030: usize;
    let mut _1031: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _1033: ();
    let mut _1034: std::option::Option<usize>;
    let mut _1035: &mut std::ops::Range<usize>;
    let mut _1036: &mut std::ops::Range<usize>;
    let mut _1037: isize;
    let mut _1038: !;
    let _1040: ();
    let mut _1041: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1042: std::result::Result<(), error::ErrorCode>;
    let mut _1043: bool;
    let mut _1044: &anchor_lang::prelude::Pubkey;
    let _1045: usize;
    let mut _1046: usize;
    let mut _1047: (usize, bool);
    let mut _1048: usize;
    let mut _1049: bool;
    let mut _1050: &anchor_lang::prelude::Pubkey;
    let _1051: &anchor_lang::prelude::AccountMeta;
    let mut _1052: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _1053: usize;
    let mut _1054: ();
    let _1056: ();
    let mut _1057: &str;
    let _1058: &str;
    let mut _1059: &std::string::String;
    let _1060: &std::string::String;
    let _1061: std::string::String;
    let mut _1063: std::fmt::Arguments<'_>;
    let mut _1064: &[&str];
    let mut _1065: &[&str; 2];
    let _1066: &[&str; 2];
    let _1067: [&str; 2];
    let mut _1068: &[core::fmt::rt::Argument<'_>];
    let mut _1069: &[core::fmt::rt::Argument<'_>; 1];
    let _1070: &[core::fmt::rt::Argument<'_>; 1];
    let _1071: [core::fmt::rt::Argument<'_>; 1];
    let mut _1072: core::fmt::rt::Argument<'_>;
    let mut _1073: &error::ErrorCode;
    let _1074: &error::ErrorCode;
    let _1075: ();
    let mut _1076: &str;
    let _1077: &str;
    let mut _1078: &std::string::String;
    let _1079: &std::string::String;
    let _1080: std::string::String;
    let mut _1082: std::fmt::Arguments<'_>;
    let mut _1083: &[&str];
    let mut _1084: &[&str; 3];
    let _1085: &[&str; 3];
    let _1086: [&str; 3];
    let mut _1087: &[core::fmt::rt::Argument<'_>];
    let mut _1088: &[core::fmt::rt::Argument<'_>; 3];
    let _1089: &[core::fmt::rt::Argument<'_>; 3];
    let _1090: [core::fmt::rt::Argument<'_>; 3];
    let mut _1091: core::fmt::rt::Argument<'_>;
    let mut _1092: &usize;
    let _1093: &usize;
    let mut _1094: core::fmt::rt::Argument<'_>;
    let mut _1095: &&anchor_lang::prelude::Pubkey;
    let _1096: &&anchor_lang::prelude::Pubkey;
    let _1097: usize;
    let mut _1098: usize;
    let mut _1099: (usize, bool);
    let mut _1100: usize;
    let mut _1101: bool;
    let mut _1102: core::fmt::rt::Argument<'_>;
    let mut _1103: &anchor_lang::prelude::Pubkey;
    let _1104: &anchor_lang::prelude::Pubkey;
    let _1105: &anchor_lang::prelude::AccountMeta;
    let mut _1106: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _1107: usize;
    let mut _1108: error::ErrorCode;
    let mut _1109: isize;
    let mut _1111: !;
    let mut _1112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1114: bool;
    let mut _1115: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1116: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1117: &[anchor_lang::prelude::AccountMeta];
    let _1118: &[anchor_lang::prelude::AccountMeta];
    let mut _1119: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _1121: ();
    let mut _1122: std::option::Option<&anchor_lang::prelude::AccountMeta>;
    let mut _1123: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1124: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1125: isize;
    let mut _1126: !;
    let _1128: ();
    let mut _1129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1130: std::result::Result<(), error::ErrorCode>;
    let mut _1131: bool;
    let mut _1132: bool;
    let mut _1133: ();
    let _1135: ();
    let mut _1136: &str;
    let _1137: &str;
    let mut _1138: &std::string::String;
    let _1139: &std::string::String;
    let _1140: std::string::String;
    let mut _1142: std::fmt::Arguments<'_>;
    let mut _1143: &[&str];
    let mut _1144: &[&str; 2];
    let _1145: &[&str; 2];
    let _1146: [&str; 2];
    let mut _1147: &[core::fmt::rt::Argument<'_>];
    let mut _1148: &[core::fmt::rt::Argument<'_>; 1];
    let _1149: &[core::fmt::rt::Argument<'_>; 1];
    let _1150: [core::fmt::rt::Argument<'_>; 1];
    let mut _1151: core::fmt::rt::Argument<'_>;
    let mut _1152: &error::ErrorCode;
    let _1153: &error::ErrorCode;
    let _1154: ();
    let mut _1155: &str;
    let _1156: &str;
    let mut _1157: error::ErrorCode;
    let mut _1158: isize;
    let mut _1160: !;
    let mut _1161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1164: std::boxed::Box<[anchor_lang::prelude::Pubkey]>;
    let mut _1165: std::boxed::Box<[anchor_lang::prelude::Pubkey; 5]>;
    let mut _1166: usize;
    let mut _1167: usize;
    let mut _1168: *mut u8;
    let mut _1169: std::boxed::Box<[anchor_lang::prelude::Pubkey; 5]>;
    let mut _1170: anchor_lang::prelude::Pubkey;
    let mut _1171: anchor_lang::prelude::Pubkey;
    let _1172: ();
    let mut _1173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1174: std::result::Result<(), error::ErrorCode>;
    let mut _1175: bool;
    let mut _1176: &[anchor_lang::prelude::Pubkey];
    let _1177: &[anchor_lang::prelude::Pubkey];
    let mut _1178: &std::vec::Vec<anchor_lang::prelude::Pubkey>;
    let mut _1179: &anchor_lang::prelude::Pubkey;
    let _1180: &anchor_lang::prelude::Pubkey;
    let mut _1181: ();
    let _1183: ();
    let mut _1184: &str;
    let _1185: &str;
    let mut _1186: &std::string::String;
    let _1187: &std::string::String;
    let _1188: std::string::String;
    let mut _1190: std::fmt::Arguments<'_>;
    let mut _1191: &[&str];
    let mut _1192: &[&str; 2];
    let _1193: &[&str; 2];
    let _1194: [&str; 2];
    let mut _1195: &[core::fmt::rt::Argument<'_>];
    let mut _1196: &[core::fmt::rt::Argument<'_>; 1];
    let _1197: &[core::fmt::rt::Argument<'_>; 1];
    let _1198: [core::fmt::rt::Argument<'_>; 1];
    let mut _1199: core::fmt::rt::Argument<'_>;
    let mut _1200: &error::ErrorCode;
    let _1201: &error::ErrorCode;
    let _1202: ();
    let mut _1203: &str;
    let _1204: &str;
    let mut _1205: error::ErrorCode;
    let mut _1206: isize;
    let mut _1208: !;
    let mut _1209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1211: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1212: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1213: &[anchor_lang::prelude::AccountMeta];
    let _1214: &[anchor_lang::prelude::AccountMeta];
    let mut _1215: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _1217: ();
    let mut _1218: std::option::Option<&anchor_lang::prelude::AccountMeta>;
    let mut _1219: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1220: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1221: isize;
    let mut _1222: !;
    let _1224: ();
    let mut _1225: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1226: std::result::Result<(), error::ErrorCode>;
    let mut _1227: bool;
    let mut _1228: &anchor_lang::prelude::Pubkey;
    let mut _1229: &anchor_lang::prelude::Pubkey;
    let _1230: anchor_lang::prelude::Pubkey;
    let mut _1231: ();
    let _1233: ();
    let mut _1234: &str;
    let _1235: &str;
    let mut _1236: &std::string::String;
    let _1237: &std::string::String;
    let _1238: std::string::String;
    let mut _1240: std::fmt::Arguments<'_>;
    let mut _1241: &[&str];
    let mut _1242: &[&str; 2];
    let _1243: &[&str; 2];
    let _1244: [&str; 2];
    let mut _1245: &[core::fmt::rt::Argument<'_>];
    let mut _1246: &[core::fmt::rt::Argument<'_>; 1];
    let _1247: &[core::fmt::rt::Argument<'_>; 1];
    let _1248: [core::fmt::rt::Argument<'_>; 1];
    let mut _1249: core::fmt::rt::Argument<'_>;
    let mut _1250: &error::ErrorCode;
    let _1251: &error::ErrorCode;
    let _1252: ();
    let mut _1253: &str;
    let _1254: &str;
    let mut _1255: error::ErrorCode;
    let mut _1256: isize;
    let mut _1258: !;
    let mut _1259: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1261: (usize, bool);
    let _1262: ();
    let mut _1263: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1264: std::result::Result<(), error::ErrorCode>;
    let mut _1265: bool;
    let mut _1266: ();
    let _1268: ();
    let mut _1269: &str;
    let _1270: &str;
    let mut _1271: &std::string::String;
    let _1272: &std::string::String;
    let _1273: std::string::String;
    let mut _1275: std::fmt::Arguments<'_>;
    let mut _1276: &[&str];
    let mut _1277: &[&str; 2];
    let _1278: &[&str; 2];
    let _1279: [&str; 2];
    let mut _1280: &[core::fmt::rt::Argument<'_>];
    let mut _1281: &[core::fmt::rt::Argument<'_>; 1];
    let _1282: &[core::fmt::rt::Argument<'_>; 1];
    let _1283: [core::fmt::rt::Argument<'_>; 1];
    let mut _1284: core::fmt::rt::Argument<'_>;
    let mut _1285: &error::ErrorCode;
    let _1286: &error::ErrorCode;
    let _1287: ();
    let mut _1288: &str;
    let _1289: &str;
    let mut _1290: error::ErrorCode;
    let mut _1291: isize;
    let mut _1293: !;
    let mut _1294: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1296: ();
    let mut _1320: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1321: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1322: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1323: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1324: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1325: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1326: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1327: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1328: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1329: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1330: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1331: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1332: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1333: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1334: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1335: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1336: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1337: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1338: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1339: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1340: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1341: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1342: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1343: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1344: &anchor_lang::prelude::Pubkey;
    let mut _1345: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1346: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1347: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1348: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1349: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1350: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1351: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1352: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1353: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1354: &mut instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _1355: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1356: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1357: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1358: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1359: &anchor_lang::prelude::Pubkey;
    let mut _1360: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1361: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1362: bool;
    let mut _1363: bool;
    let mut _1364: isize;
    let mut _1365: isize;
    let mut _1366: isize;
    let mut _1367: isize;
    let mut _1368: isize;
    let mut _1369: isize;
    let mut _1370: isize;
    let mut _1371: isize;
    let mut _1372: isize;
    let mut _1373: isize;
    let mut _1374: isize;
    let mut _1375: isize;
    let mut _1376: isize;
    let mut _1377: isize;
    let mut _1378: isize;
    let mut _1379: isize;
    let mut _1380: isize;
    let mut _1381: isize;
    let mut _1382: isize;
    let mut _1383: isize;
    let mut _1384: isize;
    let mut _1385: isize;
    let mut _1386: isize;
    let mut _1387: isize;
    let mut _1388: isize;
    let mut _1389: isize;
    let mut _1390: isize;
    let mut _1391: isize;
    let mut _1392: isize;
    let mut _1393: isize;
    let mut _1394: isize;
    let mut _1395: isize;
    let mut _1396: isize;
    let mut _1397: isize;
    let mut _1398: isize;
    let mut _1399: isize;
    let mut _1400: isize;
    let mut _1401: isize;
    let mut _1402: isize;
    let mut _1403: isize;
    let mut _1404: isize;
    let mut _1405: isize;
    let mut _1406: isize;
    let mut _1407: isize;
    let mut _1408: isize;
    let mut _1409: isize;
    let mut _1410: isize;
    let mut _1411: isize;
    let mut _1412: isize;
    let mut _1413: isize;
    let mut _1414: isize;
    let mut _1415: isize;
    let mut _1416: isize;
    let mut _1417: isize;
    let mut _1418: isize;
    let mut _1419: isize;
    let mut _1420: isize;
    let mut _1421: isize;
    let mut _1422: isize;
    let mut _1423: isize;
    let mut _1424: isize;
    let mut _1425: isize;
    let mut _1426: isize;
    let mut _1427: isize;
    let mut _1428: isize;
    let mut _1429: isize;
    let mut _1430: isize;
    let mut _1431: isize;
    let mut _1432: isize;
    let mut _1433: isize;
    let mut _1434: isize;
    let mut _1435: isize;
    let mut _1436: isize;
    let mut _1437: isize;
    let mut _1438: isize;
    let mut _1439: isize;
    let mut _1440: isize;
    let mut _1441: isize;
    let mut _1442: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1443: *const [u16; 2];
    let mut _1444: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1445: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1446: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1447: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1448: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1449: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1450: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1451: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1452: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1453: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1454: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1455: *const [anchor_lang::prelude::Pubkey; 5];
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug state => _15;
        let _16: anchor_lang::prelude::Clock;
        let _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _23: anchor_lang::prelude::Clock;
        scope 6 {
            debug clock => _16;
            let _24: i64;
            scope 11 {
                debug now => _24;
                let _25: anchor_lang::prelude::Pubkey;
                scope 12 {
                    debug user_key => _25;
                    let _27: anchor_lang::prelude::Pubkey;
                    scope 13 {
                        debug liquidator_key => _27;
                        let _36: error::ErrorCode;
                        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _61: ();
                        let _62: &mut std::cell::RefMut<'_, state::user::User>;
                        let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _73: std::cell::RefMut<'_, state::user::User>;
                        scope 14 {
                            debug error_code => _36;
                            let _43: std::string::String;
                            let mut _1319: &[&str; 2];
                            scope 15 {
                                debug res => _43;
                            }
                        }
                        scope 16 {
                            debug residual => _58;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _61;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug user => _62;
                            let _74: &mut std::cell::RefMut<'_, state::user::UserStats>;
                            let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _85: std::cell::RefMut<'_, state::user::UserStats>;
                            scope 25 {
                                debug user_stats => _74;
                                let _86: &mut std::cell::RefMut<'_, state::user::User>;
                                let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _97: std::cell::RefMut<'_, state::user::User>;
                                scope 30 {
                                    debug liquidator => _86;
                                    let _98: &mut std::cell::RefMut<'_, state::user::UserStats>;
                                    let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _109: std::cell::RefMut<'_, state::user::UserStats>;
                                    scope 35 {
                                        debug liquidator_stats => _98;
                                        let _110: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                                        scope 40 {
                                            debug remaining_accounts_iter => _110;
                                            let _114: state::perp_market_map::PerpMarketMap<'_>;
                                            let _115: state::spot_market_map::SpotMarketMap<'_>;
                                            let mut _116: state::oracle_map::OracleMap<'_>;
                                            let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _145: instructions::optional_accounts::AccountMaps<'_>;
                                            let mut _1462: *const ();
                                            let mut _1463: usize;
                                            let mut _1464: usize;
                                            let mut _1465: usize;
                                            let mut _1466: usize;
                                            let mut _1467: bool;
                                            scope 41 {
                                                debug perp_market_map => _114;
                                                debug spot_market_map => _115;
                                                debug oracle_map => _116;
                                                let _146: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
                                                let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _154: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
                                                scope 47 {
                                                    debug _token_interface => _146;
                                                    let _155: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                                    let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _163: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                                    scope 52 {
                                                        debug mint => _155;
                                                        let mut _164: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _174: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        scope 57 {
                                                            debug asset_spot_market => _164;
                                                            let _187: error::ErrorCode;
                                                            let _212: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _215: ();
                                                            let _216: &state::oracle::OraclePriceData;
                                                            let _227: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _230: &state::oracle::OraclePriceData;
                                                            scope 62 {
                                                                debug error_code => _187;
                                                                let _194: std::string::String;
                                                                let mut _1318: &[&str; 2];
                                                                scope 63 {
                                                                    debug res => _194;
                                                                }
                                                            }
                                                            scope 64 {
                                                                debug residual => _212;
                                                                scope 65 {
                                                                }
                                                            }
                                                            scope 66 {
                                                                debug val => _215;
                                                                scope 67 {
                                                                }
                                                            }
                                                            scope 68 {
                                                                debug asset_oracle_data => _216;
                                                                let _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _245: ();
                                                                let mut _246: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                let _253: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _256: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                scope 73 {
                                                                    debug residual => _242;
                                                                    scope 74 {
                                                                    }
                                                                }
                                                                scope 75 {
                                                                    debug val => _245;
                                                                    scope 76 {
                                                                    }
                                                                }
                                                                scope 77 {
                                                                    debug liability_spot_market => _246;
                                                                    let _269: error::ErrorCode;
                                                                    let _294: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _297: ();
                                                                    let _298: &state::oracle::OraclePriceData;
                                                                    let _309: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _312: &state::oracle::OraclePriceData;
                                                                    scope 82 {
                                                                        debug error_code => _269;
                                                                        let _276: std::string::String;
                                                                        let mut _1317: &[&str; 2];
                                                                        scope 83 {
                                                                            debug res => _276;
                                                                        }
                                                                    }
                                                                    scope 84 {
                                                                        debug residual => _294;
                                                                        scope 85 {
                                                                        }
                                                                    }
                                                                    scope 86 {
                                                                        debug val => _297;
                                                                        scope 87 {
                                                                        }
                                                                    }
                                                                    scope 88 {
                                                                        debug liability_oracle_data => _298;
                                                                        let _324: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _327: ();
                                                                        let _339: error::ErrorCode;
                                                                        let _364: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _367: ();
                                                                        let _374: error::ErrorCode;
                                                                        let _399: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _402: ();
                                                                        let _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _440: ();
                                                                        let mut _441: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                        let _448: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _451: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                        scope 93 {
                                                                            debug residual => _324;
                                                                            scope 94 {
                                                                            }
                                                                        }
                                                                        scope 95 {
                                                                            debug val => _327;
                                                                            scope 96 {
                                                                            }
                                                                        }
                                                                        scope 97 {
                                                                            debug error_code => _339;
                                                                            let _346: std::string::String;
                                                                            let mut _1316: &[&str; 2];
                                                                            scope 98 {
                                                                                debug res => _346;
                                                                            }
                                                                        }
                                                                        scope 99 {
                                                                            debug residual => _364;
                                                                            scope 100 {
                                                                            }
                                                                        }
                                                                        scope 101 {
                                                                            debug val => _367;
                                                                            scope 102 {
                                                                            }
                                                                        }
                                                                        scope 103 {
                                                                            debug error_code => _374;
                                                                            let _381: std::string::String;
                                                                            let mut _1315: &[&str; 2];
                                                                            scope 104 {
                                                                                debug res => _381;
                                                                            }
                                                                        }
                                                                        scope 105 {
                                                                            debug residual => _399;
                                                                            scope 106 {
                                                                            }
                                                                        }
                                                                        scope 107 {
                                                                            debug val => _402;
                                                                            scope 108 {
                                                                            }
                                                                        }
                                                                        scope 109 {
                                                                            debug residual => _437;
                                                                            scope 110 {
                                                                            }
                                                                        }
                                                                        scope 111 {
                                                                            debug val => _440;
                                                                            scope 112 {
                                                                            }
                                                                        }
                                                                        scope 113 {
                                                                            debug asset_spot_market => _441;
                                                                            let mut _452: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                            let _459: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _462: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                            scope 118 {
                                                                                debug liability_spot_market => _452;
                                                                                let _463: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                scope 123 {
                                                                                    debug asset_vault => _463;
                                                                                    let _464: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                    scope 124 {
                                                                                        debug asset_token_account => _464;
                                                                                        let _475: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                        scope 125 {
                                                                                            debug liability_token_account => _475;
                                                                                            let _483: bool;
                                                                                            scope 126 {
                                                                                                debug asset_spot_has_transfer_hook => _483;
                                                                                                let _487: bool;
                                                                                                scope 127 {
                                                                                                    debug liability_spot_has_transfer_hook => _487;
                                                                                                    let _497: error::ErrorCode;
                                                                                                    let _522: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _525: ();
                                                                                                    let _549: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                    let _552: ();
                                                                                                    let _553: &anchor_lang::prelude::AccountInfo<'_>;
                                                                                                    scope 128 {
                                                                                                        debug error_code => _497;
                                                                                                        let _504: std::string::String;
                                                                                                        let mut _1314: &[&str; 2];
                                                                                                        scope 129 {
                                                                                                            debug res => _504;
                                                                                                        }
                                                                                                    }
                                                                                                    scope 130 {
                                                                                                        debug residual => _522;
                                                                                                        scope 131 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 132 {
                                                                                                        debug val => _525;
                                                                                                        scope 133 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 134 {
                                                                                                        debug residual => _549;
                                                                                                        scope 135 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 136 {
                                                                                                        debug val => _552;
                                                                                                        scope 137 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 138 {
                                                                                                        debug ixs => _553;
                                                                                                        let _555: usize;
                                                                                                        let _561: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                        let _564: u16;
                                                                                                        scope 139 {
                                                                                                            debug current_index => _555;
                                                                                                            let _565: solana_program::instruction::Instruction;
                                                                                                            let _571: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _574: solana_program::instruction::Instruction;
                                                                                                            scope 144 {
                                                                                                                debug current_ix => _565;
                                                                                                                let _582: error::ErrorCode;
                                                                                                                let _607: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _610: ();
                                                                                                                let mut _611: usize;
                                                                                                                scope 149 {
                                                                                                                    debug error_code => _582;
                                                                                                                    let _589: std::string::String;
                                                                                                                    let mut _1313: &[&str; 2];
                                                                                                                    scope 150 {
                                                                                                                        debug res => _589;
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 151 {
                                                                                                                    debug residual => _607;
                                                                                                                    scope 152 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 153 {
                                                                                                                    debug val => _610;
                                                                                                                    scope 154 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 155 {
                                                                                                                    debug index => _611;
                                                                                                                    let mut _614: bool;
                                                                                                                    scope 156 {
                                                                                                                        debug found_end => _614;
                                                                                                                        let _617: solana_program::instruction::Instruction;
                                                                                                                        let _623: solana_program::instruction::Instruction;
                                                                                                                        let _625: anchor_lang::prelude::ProgramError;
                                                                                                                        let _1267: error::ErrorCode;
                                                                                                                        let _1292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _1295: ();
                                                                                                                        scope 157 {
                                                                                                                            debug ix => _617;
                                                                                                                            let _639: error::ErrorCode;
                                                                                                                            let _664: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _667: ();
                                                                                                                            let _668: [u8; 8];
                                                                                                                            let mut _1120: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
                                                                                                                            let _1163: std::vec::Vec<anchor_lang::prelude::Pubkey>;
                                                                                                                            let mut _1456: *const ();
                                                                                                                            let mut _1457: usize;
                                                                                                                            let mut _1458: usize;
                                                                                                                            let mut _1459: usize;
                                                                                                                            let mut _1460: usize;
                                                                                                                            let mut _1461: bool;
                                                                                                                            scope 160 {
                                                                                                                                debug error_code => _639;
                                                                                                                                let _646: std::string::String;
                                                                                                                                let mut _1309: &[&str; 2];
                                                                                                                                scope 161 {
                                                                                                                                    debug res => _646;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 162 {
                                                                                                                                debug residual => _664;
                                                                                                                                scope 163 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 164 {
                                                                                                                                debug val => _667;
                                                                                                                                scope 165 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 166 {
                                                                                                                                debug discriminator => _668;
                                                                                                                                let _679: error::ErrorCode;
                                                                                                                                let _704: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _707: ();
                                                                                                                                let _719: error::ErrorCode;
                                                                                                                                let _744: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _747: ();
                                                                                                                                let _759: error::ErrorCode;
                                                                                                                                let _784: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _787: ();
                                                                                                                                let _799: error::ErrorCode;
                                                                                                                                let _824: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _827: ();
                                                                                                                                let _839: error::ErrorCode;
                                                                                                                                let _864: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _867: ();
                                                                                                                                let _879: error::ErrorCode;
                                                                                                                                let _904: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _907: ();
                                                                                                                                let _919: error::ErrorCode;
                                                                                                                                let _944: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _947: ();
                                                                                                                                let _959: error::ErrorCode;
                                                                                                                                let _984: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _987: ();
                                                                                                                                let _999: error::ErrorCode;
                                                                                                                                let _1024: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1027: ();
                                                                                                                                let mut _1032: std::ops::Range<usize>;
                                                                                                                                scope 167 {
                                                                                                                                    debug error_code => _679;
                                                                                                                                    let _686: std::string::String;
                                                                                                                                    let mut _1308: &[&str; 2];
                                                                                                                                    scope 168 {
                                                                                                                                        debug res => _686;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 169 {
                                                                                                                                    debug residual => _704;
                                                                                                                                    scope 170 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 171 {
                                                                                                                                    debug val => _707;
                                                                                                                                    scope 172 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 173 {
                                                                                                                                    debug error_code => _719;
                                                                                                                                    let _726: std::string::String;
                                                                                                                                    let mut _1307: &[&str; 2];
                                                                                                                                    scope 174 {
                                                                                                                                        debug res => _726;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 175 {
                                                                                                                                    debug residual => _744;
                                                                                                                                    scope 176 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 177 {
                                                                                                                                    debug val => _747;
                                                                                                                                    scope 178 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 179 {
                                                                                                                                    debug error_code => _759;
                                                                                                                                    let _766: std::string::String;
                                                                                                                                    let mut _1306: &[&str; 2];
                                                                                                                                    scope 180 {
                                                                                                                                        debug res => _766;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 181 {
                                                                                                                                    debug residual => _784;
                                                                                                                                    scope 182 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 183 {
                                                                                                                                    debug val => _787;
                                                                                                                                    scope 184 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 185 {
                                                                                                                                    debug error_code => _799;
                                                                                                                                    let _806: std::string::String;
                                                                                                                                    let mut _1305: &[&str; 2];
                                                                                                                                    scope 186 {
                                                                                                                                        debug res => _806;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 187 {
                                                                                                                                    debug residual => _824;
                                                                                                                                    scope 188 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 189 {
                                                                                                                                    debug val => _827;
                                                                                                                                    scope 190 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 191 {
                                                                                                                                    debug error_code => _839;
                                                                                                                                    let _846: std::string::String;
                                                                                                                                    let mut _1304: &[&str; 2];
                                                                                                                                    scope 192 {
                                                                                                                                        debug res => _846;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 193 {
                                                                                                                                    debug residual => _864;
                                                                                                                                    scope 194 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 195 {
                                                                                                                                    debug val => _867;
                                                                                                                                    scope 196 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 197 {
                                                                                                                                    debug error_code => _879;
                                                                                                                                    let _886: std::string::String;
                                                                                                                                    let mut _1303: &[&str; 2];
                                                                                                                                    scope 198 {
                                                                                                                                        debug res => _886;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 199 {
                                                                                                                                    debug residual => _904;
                                                                                                                                    scope 200 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 201 {
                                                                                                                                    debug val => _907;
                                                                                                                                    scope 202 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 203 {
                                                                                                                                    debug error_code => _919;
                                                                                                                                    let _926: std::string::String;
                                                                                                                                    let mut _1302: &[&str; 2];
                                                                                                                                    scope 204 {
                                                                                                                                        debug res => _926;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 205 {
                                                                                                                                    debug residual => _944;
                                                                                                                                    scope 206 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 207 {
                                                                                                                                    debug val => _947;
                                                                                                                                    scope 208 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 209 {
                                                                                                                                    debug error_code => _959;
                                                                                                                                    let _966: std::string::String;
                                                                                                                                    let mut _1301: &[&str; 2];
                                                                                                                                    scope 210 {
                                                                                                                                        debug res => _966;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 211 {
                                                                                                                                    debug residual => _984;
                                                                                                                                    scope 212 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 213 {
                                                                                                                                    debug val => _987;
                                                                                                                                    scope 214 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 215 {
                                                                                                                                    debug error_code => _999;
                                                                                                                                    let _1006: std::string::String;
                                                                                                                                    let mut _1300: &[&str; 2];
                                                                                                                                    scope 216 {
                                                                                                                                        debug res => _1006;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 217 {
                                                                                                                                    debug residual => _1024;
                                                                                                                                    scope 218 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 219 {
                                                                                                                                    debug val => _1027;
                                                                                                                                    scope 220 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 221 {
                                                                                                                                    debug iter => _1032;
                                                                                                                                    let _1039: usize;
                                                                                                                                    scope 222 {
                                                                                                                                        debug i => _1039;
                                                                                                                                        let _1055: error::ErrorCode;
                                                                                                                                        let _1110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1113: ();
                                                                                                                                        scope 223 {
                                                                                                                                            debug error_code => _1055;
                                                                                                                                            let _1062: std::string::String;
                                                                                                                                            let _1081: std::string::String;
                                                                                                                                            let mut _1298: &[&str; 3];
                                                                                                                                            let mut _1299: &[&str; 2];
                                                                                                                                            scope 224 {
                                                                                                                                                debug res => _1062;
                                                                                                                                            }
                                                                                                                                            scope 225 {
                                                                                                                                                debug res => _1081;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 226 {
                                                                                                                                            debug residual => _1110;
                                                                                                                                            scope 227 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 228 {
                                                                                                                                            debug val => _1113;
                                                                                                                                            scope 229 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 230 {
                                                                                                                                debug iter => _1120;
                                                                                                                                let _1127: &anchor_lang::prelude::AccountMeta;
                                                                                                                                scope 231 {
                                                                                                                                    debug meta => _1127;
                                                                                                                                    let _1134: error::ErrorCode;
                                                                                                                                    let _1159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1162: ();
                                                                                                                                    scope 232 {
                                                                                                                                        debug error_code => _1134;
                                                                                                                                        let _1141: std::string::String;
                                                                                                                                        let mut _1310: &[&str; 2];
                                                                                                                                        scope 233 {
                                                                                                                                            debug res => _1141;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 234 {
                                                                                                                                        debug residual => _1159;
                                                                                                                                        scope 235 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 236 {
                                                                                                                                        debug val => _1162;
                                                                                                                                        scope 237 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 238 {
                                                                                                                                debug whitelisted_programs => _1163;
                                                                                                                                let _1182: error::ErrorCode;
                                                                                                                                let _1207: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1210: ();
                                                                                                                                let mut _1216: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
                                                                                                                                scope 240 {
                                                                                                                                    debug error_code => _1182;
                                                                                                                                    let _1189: std::string::String;
                                                                                                                                    let mut _1312: &[&str; 2];
                                                                                                                                    scope 241 {
                                                                                                                                        debug res => _1189;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 242 {
                                                                                                                                    debug residual => _1207;
                                                                                                                                    scope 243 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 244 {
                                                                                                                                    debug val => _1210;
                                                                                                                                    scope 245 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 246 {
                                                                                                                                    debug iter => _1216;
                                                                                                                                    let _1223: &anchor_lang::prelude::AccountMeta;
                                                                                                                                    scope 247 {
                                                                                                                                        debug meta => _1223;
                                                                                                                                        let _1232: error::ErrorCode;
                                                                                                                                        let _1257: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1260: ();
                                                                                                                                        scope 248 {
                                                                                                                                            debug error_code => _1232;
                                                                                                                                            let _1239: std::string::String;
                                                                                                                                            let mut _1311: &[&str; 2];
                                                                                                                                            scope 249 {
                                                                                                                                                debug res => _1239;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 250 {
                                                                                                                                            debug residual => _1257;
                                                                                                                                            scope 251 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 252 {
                                                                                                                                            debug val => _1260;
                                                                                                                                            scope 253 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 239 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 158 {
                                                                                                                            debug ix => _623;
                                                                                                                        }
                                                                                                                        scope 159 {
                                                                                                                            debug e => _625;
                                                                                                                        }
                                                                                                                        scope 254 {
                                                                                                                            debug error_code => _1267;
                                                                                                                            let _1274: std::string::String;
                                                                                                                            let mut _1297: &[&str; 2];
                                                                                                                            scope 255 {
                                                                                                                                debug res => _1274;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 256 {
                                                                                                                            debug residual => _1292;
                                                                                                                            scope 257 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 258 {
                                                                                                                            debug val => _1295;
                                                                                                                            scope 259 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 145 {
                                                                                                                debug residual => _571;
                                                                                                                scope 146 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 147 {
                                                                                                                debug val => _574;
                                                                                                                scope 148 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 140 {
                                                                                                            debug residual => _561;
                                                                                                            scope 141 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 142 {
                                                                                                            debug val => _564;
                                                                                                            scope 143 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 119 {
                                                                                debug residual => _459;
                                                                                scope 120 {
                                                                                }
                                                                            }
                                                                            scope 121 {
                                                                                debug val => _462;
                                                                                scope 122 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 114 {
                                                                            debug residual => _448;
                                                                            scope 115 {
                                                                            }
                                                                        }
                                                                        scope 116 {
                                                                            debug val => _451;
                                                                            scope 117 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 89 {
                                                                        debug residual => _309;
                                                                        scope 90 {
                                                                        }
                                                                    }
                                                                    scope 91 {
                                                                        debug val => _312;
                                                                        scope 92 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 78 {
                                                                    debug residual => _253;
                                                                    scope 79 {
                                                                    }
                                                                }
                                                                scope 80 {
                                                                    debug val => _256;
                                                                    scope 81 {
                                                                    }
                                                                }
                                                            }
                                                            scope 69 {
                                                                debug residual => _227;
                                                                scope 70 {
                                                                }
                                                            }
                                                            scope 71 {
                                                                debug val => _230;
                                                                scope 72 {
                                                                }
                                                            }
                                                        }
                                                        scope 58 {
                                                            debug residual => _171;
                                                            scope 59 {
                                                            }
                                                        }
                                                        scope 60 {
                                                            debug val => _174;
                                                            scope 61 {
                                                            }
                                                        }
                                                    }
                                                    scope 53 {
                                                        debug residual => _160;
                                                        scope 54 {
                                                        }
                                                    }
                                                    scope 55 {
                                                        debug val => _163;
                                                        scope 56 {
                                                        }
                                                    }
                                                }
                                                scope 48 {
                                                    debug residual => _151;
                                                    scope 49 {
                                                    }
                                                }
                                                scope 50 {
                                                    debug val => _154;
                                                    scope 51 {
                                                    }
                                                }
                                            }
                                            scope 42 {
                                            }
                                            scope 43 {
                                                debug residual => _142;
                                                scope 44 {
                                                }
                                            }
                                            scope 45 {
                                                debug val => _145;
                                                scope 46 {
                                                }
                                            }
                                        }
                                    }
                                    scope 36 {
                                        debug residual => _106;
                                        scope 37 {
                                        }
                                    }
                                    scope 38 {
                                        debug val => _109;
                                        scope 39 {
                                        }
                                    }
                                }
                                scope 31 {
                                    debug residual => _94;
                                    scope 32 {
                                    }
                                }
                                scope 33 {
                                    debug val => _97;
                                    scope 34 {
                                    }
                                }
                            }
                            scope 26 {
                                debug residual => _82;
                                scope 27 {
                                }
                            }
                            scope 28 {
                                debug val => _85;
                                scope 29 {
                                }
                            }
                        }
                        scope 21 {
                            debug residual => _70;
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug val => _73;
                            scope 24 {
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }

    bb0: {
        _1363 = const false;
        _1362 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _1320 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _9 = &((*_1320).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _1321 = deref_copy (*_9);
        _1442 = (((_1321.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _8 = &(*_1442);
        _7 = constraints::liq_not_paused(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb642];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _1364 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        _1322 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _15 = &((*_1322).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb667];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _1424 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb602;
    }

    bb7: {
        _17 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _18) -> [return: bb8, unwind: bb642];
    }

    bb8: {
        StorageDead(_18);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_17 as Continue).0: anchor_lang::prelude::Clock);
        _16 = move _23;
        StorageDead(_23);
        _1366 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_24);
        _24 = (_16.4: i64);
        StorageLive(_25);
        StorageLive(_26);
        _1323 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _26 = &((*_1323).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _25 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _26) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _22) -> [return: bb11, unwind: bb666];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _1422 = discriminant(_17);
        StorageDead(_17);
        goto -> bb601;
    }

    bb12: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _1324 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _28 = &((*_1324).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _27 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_25;
        StorageLive(_34);
        _34 = &_27;
        _32 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _33, move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _32) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_35);
        _35 = ();
        _31 = std::result::Result::<(), error::ErrorCode>::Ok(move _35);
        StorageDead(_35);
        goto -> bb23;
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_36);
        _36 = error::ErrorCode::UserCantLiquidateThemself;
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _1319 = const _;
        _47 = &(*_1319);
        _46 = &(*_47);
        _45 = move _46 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_36;
        _54 = &(*_55);
        _53 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _54) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_54);
        _52 = [move _53];
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = move _50 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_50);
        _44 = Arguments::<'_>::new_v1(move _45, move _49) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_49);
        StorageDead(_45);
        _43 = format(move _44) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_44);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_47);
        _42 = move _43;
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = <String as Deref>::deref(move _40) -> [return: bb20, unwind: bb641];
    }

    bb20: {
        _38 = &(*_39);
        StorageDead(_40);
        _37 = solana_program::log::sol_log(move _38) -> [return: bb21, unwind: bb641];
    }

    bb21: {
        StorageDead(_38);
        drop(_42) -> [return: bb22, unwind: bb642];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_37);
        StorageLive(_56);
        _56 = _36;
        _31 = std::result::Result::<(), error::ErrorCode>::Err(move _56);
        StorageDead(_56);
        StorageDead(_36);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_32);
        _30 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _31) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_31);
        _57 = discriminant(_30);
        switchInt(move _57) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_61);
        _61 = ((_30 as Continue).0: ());
        _29 = _61;
        StorageDead(_61);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _1325 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _67 = &((*_1325).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _66 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _67) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_58);
        _58 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb600;
    }

    bb28: {
        StorageDead(_67);
        StorageLive(_68);
        _68 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _65 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _66, move _68) -> [return: bb29, unwind: bb642];
    }

    bb29: {
        StorageDead(_68);
        StorageDead(_66);
        _64 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _65) -> [return: bb30, unwind: bb642];
    }

    bb30: {
        StorageDead(_65);
        _69 = discriminant(_64);
        switchInt(move _69) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_73);
        _73 = move ((_64 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _63 = move _73;
        StorageDead(_73);
        _62 = &mut _63;
        _1370 = discriminant(_64);
        StorageDead(_64);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _1326 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _79 = &((*_1326).5: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _78 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _79) -> [return: bb34, unwind: bb640];
    }

    bb32: {
        StorageLive(_70);
        _70 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb33, unwind: bb665];
    }

    bb33: {
        StorageDead(_72);
        StorageDead(_70);
        _1368 = discriminant(_64);
        StorageDead(_64);
        goto -> bb599;
    }

    bb34: {
        StorageDead(_79);
        StorageLive(_80);
        _80 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _77 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _78, move _80) -> [return: bb35, unwind: bb640];
    }

    bb35: {
        StorageDead(_80);
        StorageDead(_78);
        _76 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _77) -> [return: bb36, unwind: bb640];
    }

    bb36: {
        StorageDead(_77);
        _81 = discriminant(_76);
        switchInt(move _81) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_85);
        _85 = move ((_76 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _75 = move _85;
        StorageDead(_85);
        _74 = &mut _75;
        _1374 = discriminant(_76);
        StorageDead(_76);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _1327 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _91 = &((*_1327).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _90 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _91) -> [return: bb40, unwind: bb639];
    }

    bb38: {
        StorageLive(_82);
        _82 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb39, unwind: bb664];
    }

    bb39: {
        StorageDead(_84);
        StorageDead(_82);
        _1372 = discriminant(_76);
        StorageDead(_76);
        goto -> bb598;
    }

    bb40: {
        StorageDead(_91);
        StorageLive(_92);
        _92 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _89 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _90, move _92) -> [return: bb41, unwind: bb639];
    }

    bb41: {
        StorageDead(_92);
        StorageDead(_90);
        _88 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _89) -> [return: bb42, unwind: bb639];
    }

    bb42: {
        StorageDead(_89);
        _93 = discriminant(_88);
        switchInt(move _93) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_97);
        _97 = move ((_88 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _87 = move _97;
        StorageDead(_97);
        _86 = &mut _87;
        _1378 = discriminant(_88);
        StorageDead(_88);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _1328 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _103 = &((*_1328).3: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _102 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _103) -> [return: bb46, unwind: bb638];
    }

    bb44: {
        StorageLive(_94);
        _94 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb45, unwind: bb663];
    }

    bb45: {
        StorageDead(_96);
        StorageDead(_94);
        _1376 = discriminant(_88);
        StorageDead(_88);
        goto -> bb597;
    }

    bb46: {
        StorageDead(_103);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _101 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _102, move _104) -> [return: bb47, unwind: bb638];
    }

    bb47: {
        StorageDead(_104);
        StorageDead(_102);
        _100 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _101) -> [return: bb48, unwind: bb638];
    }

    bb48: {
        StorageDead(_101);
        _105 = discriminant(_100);
        switchInt(move _105) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_109);
        _109 = move ((_100 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _99 = move _109;
        StorageDead(_109);
        _98 = &mut _99;
        _1382 = discriminant(_100);
        StorageDead(_100);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _1329 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _113 = &(*_1329);
        _112 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _113) -> [return: bb52, unwind: bb637];
    }

    bb50: {
        StorageLive(_106);
        _106 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb51, unwind: bb662];
    }

    bb51: {
        StorageDead(_108);
        StorageDead(_106);
        _1380 = discriminant(_100);
        StorageDead(_100);
        goto -> bb596;
    }

    bb52: {
        StorageDead(_113);
        _111 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _112) -> [return: bb53, unwind: bb637];
    }

    bb53: {
        StorageDead(_112);
        _110 = &mut _111;
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &mut (*_110);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = BTreeSet::<u16>::new() -> [return: bb54, unwind: bb637];
    }

    bb54: {
        _122 = &_123;
        _121 = &(*_122);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _130 = SizeOf([u16; 2]);
        _131 = AlignOf([u16; 2]);
        _132 = alloc::alloc::exchange_malloc(move _130, move _131) -> [return: bb55, unwind: bb636];
    }

    bb55: {
        StorageLive(_133);
        _133 = ShallowInitBox(move _132, [u16; 2]);
        StorageLive(_134);
        _134 = _2;
        StorageLive(_135);
        _135 = _3;
        _1443 = (((_133.0: std::ptr::Unique<[u16; 2]>).0: std::ptr::NonNull<[u16; 2]>).0: *const [u16; 2]);
        _1462 = _1443 as *const () (PtrToPtr);
        _1463 = _1462 as usize (Transmute);
        _1464 = AlignOf([u16; 2]);
        _1465 = Sub(_1464, const 1_usize);
        _1466 = BitAnd(_1463, _1465);
        _1467 = Eq(_1466, const 0_usize);
        assert(_1467, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1464, _1463) -> [success: bb669, unwind unreachable];
    }

    bb56: {
        StorageDead(_128);
        _126 = get_writable_spot_market_set_from_many(move _127) -> [return: bb57, unwind: bb636];
    }

    bb57: {
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        StorageLive(_136);
        _136 = (_16.0: u64);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _1330 = deref_copy (*_15);
        _1444 = (((_1330.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _140 = &(*_1444);
        _139 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _140) -> [return: bb58, unwind: bb635];
    }

    bb58: {
        StorageDead(_140);
        _138 = ((*_139).7: state::state::OracleGuardRails);
        _137 = Option::<state::state::OracleGuardRails>::Some(move _138);
        StorageDead(_138);
        _119 = load_maps(move _120, move _121, move _124, move _136, move _137) -> [return: bb59, unwind: bb635];
    }

    bb59: {
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_120);
        _118 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _119) -> [return: bb60, unwind: bb635];
    }

    bb60: {
        StorageDead(_119);
        _141 = discriminant(_118);
        switchInt(move _141) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        StorageLive(_145);
        _145 = move ((_118 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _117 = move _145;
        StorageDead(_145);
        StorageLive(_114);
        _114 = move (_117.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_115);
        _115 = move (_117.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_116);
        _116 = move (_117.2: state::oracle_map::OracleMap<'_>);
        _1386 = discriminant(_118);
        StorageDead(_139);
        drop(_126) -> [return: bb64, unwind: bb631];
    }

    bb62: {
        StorageLive(_142);
        _142 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb63, unwind: bb661];
    }

    bb63: {
        StorageDead(_144);
        StorageDead(_142);
        _1384 = discriminant(_118);
        StorageDead(_139);
        drop(_126) -> [return: bb593, unwind: bb636];
    }

    bb64: {
        StorageDead(_126);
        StorageDead(_125);
        drop(_123) -> [return: bb65, unwind: bb632];
    }

    bb65: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &mut (*_110);
        _148 = get_token_interface(move _149) -> [return: bb66, unwind: bb632];
    }

    bb66: {
        StorageDead(_149);
        _147 = <std::result::Result<Option<anchor_lang::prelude::Interface<'_, TokenInterface>>, error::ErrorCode> as Try>::branch(move _148) -> [return: bb67, unwind: bb632];
    }

    bb67: {
        StorageDead(_148);
        _150 = discriminant(_147);
        switchInt(move _150) -> [0: bb68, 1: bb69, otherwise: bb4];
    }

    bb68: {
        StorageLive(_154);
        _154 = move ((_147 as Continue).0: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>);
        _146 = move _154;
        StorageDead(_154);
        StorageDead(_147);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &mut (*_110);
        _157 = get_token_mint(move _158) -> [return: bb71, unwind: bb632];
    }

    bb69: {
        StorageLive(_151);
        _151 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb70, unwind: bb632];
    }

    bb70: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_147);
        goto -> bb589;
    }

    bb71: {
        StorageDead(_158);
        _156 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _157) -> [return: bb72, unwind: bb632];
    }

    bb72: {
        StorageDead(_157);
        _159 = discriminant(_156);
        switchInt(move _159) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_163);
        _163 = move ((_156 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _155 = move _163;
        StorageDead(_163);
        StorageDead(_156);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_115;
        StorageLive(_168);
        StorageLive(_169);
        _169 = &_2;
        _168 = &(*_169);
        _166 = SpotMarketMap::<'_>::get_ref_mut(move _167, move _168) -> [return: bb76, unwind: bb632];
    }

    bb74: {
        StorageLive(_160);
        _160 = ((_156 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb75, unwind: bb632];
    }

    bb75: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_156);
        goto -> bb588;
    }

    bb76: {
        StorageDead(_168);
        StorageDead(_167);
        _165 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _166) -> [return: bb77, unwind: bb632];
    }

    bb77: {
        StorageDead(_166);
        _170 = discriminant(_165);
        switchInt(move _170) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_174);
        _174 = move ((_165 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1363 = const true;
        _164 = move _174;
        StorageDead(_174);
        _1390 = discriminant(_165);
        StorageDead(_169);
        StorageDead(_165);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &_164;
        _180 = <RefMut<'_, SpotMarket> as Deref>::deref(move _181) -> [return: bb81, unwind: bb659];
    }

    bb79: {
        StorageLive(_171);
        _171 = ((_165 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb80, unwind: bb660];
    }

    bb80: {
        StorageDead(_173);
        StorageDead(_171);
        _1388 = discriminant(_165);
        StorageDead(_169);
        StorageDead(_165);
        goto -> bb587;
    }

    bb81: {
        StorageDead(_181);
        _179 = ((*_180).52: u64);
        _178 = Eq(move _179, const 0_u64);
        switchInt(move _178) -> [0: bb86, otherwise: bb82];
    }

    bb82: {
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_164;
        _184 = <RefMut<'_, SpotMarket> as Deref>::deref(move _185) -> [return: bb83, unwind: bb659];
    }

    bb83: {
        StorageDead(_185);
        _183 = ((*_184).51: u64);
        _182 = Eq(move _183, const 0_u64);
        switchInt(move _182) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        StorageDead(_184);
        StorageDead(_183);
        StorageLive(_186);
        _186 = ();
        _177 = std::result::Result::<(), error::ErrorCode>::Ok(move _186);
        StorageDead(_186);
        goto -> bb95;
    }

    bb85: {
        StorageDead(_184);
        StorageDead(_183);
        goto -> bb87;
    }

    bb86: {
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb87;
    }

    bb87: {
        StorageLive(_187);
        _187 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _1318 = const _;
        _198 = &(*_1318);
        _197 = &(*_198);
        _196 = move _197 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_197);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &_187;
        _205 = &(*_206);
        _204 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _205) -> [return: bb88, unwind: bb659];
    }

    bb88: {
        StorageDead(_205);
        _203 = [move _204];
        StorageDead(_204);
        _202 = &_203;
        _201 = &(*_202);
        _200 = move _201 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_201);
        _195 = Arguments::<'_>::new_v1(move _196, move _200) -> [return: bb89, unwind: bb659];
    }

    bb89: {
        StorageDead(_200);
        StorageDead(_196);
        _194 = format(move _195) -> [return: bb90, unwind: bb659];
    }

    bb90: {
        StorageDead(_195);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_198);
        _193 = move _194;
        StorageDead(_194);
        _192 = &_193;
        _191 = &(*_192);
        _190 = <String as Deref>::deref(move _191) -> [return: bb91, unwind: bb630];
    }

    bb91: {
        _189 = &(*_190);
        StorageDead(_191);
        _188 = solana_program::log::sol_log(move _189) -> [return: bb92, unwind: bb630];
    }

    bb92: {
        StorageDead(_189);
        drop(_193) -> [return: bb93, unwind: bb659];
    }

    bb93: {
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = const "begin_swap ended in invalid state";
        _208 = &(*_209);
        _207 = solana_program::log::sol_log(move _208) -> [return: bb94, unwind: bb659];
    }

    bb94: {
        StorageDead(_208);
        StorageDead(_209);
        StorageDead(_207);
        StorageLive(_210);
        _210 = _187;
        _177 = std::result::Result::<(), error::ErrorCode>::Err(move _210);
        StorageDead(_210);
        StorageDead(_187);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_182);
        StorageDead(_178);
        _176 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _177) -> [return: bb96, unwind: bb659];
    }

    bb96: {
        StorageDead(_177);
        _211 = discriminant(_176);
        switchInt(move _211) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        StorageLive(_215);
        _215 = ((_176 as Continue).0: ());
        _175 = _215;
        StorageDead(_215);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &mut _116;
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &_164;
        _224 = <RefMut<'_, SpotMarket> as Deref>::deref(move _225) -> [return: bb100, unwind: bb659];
    }

    bb98: {
        StorageLive(_212);
        _212 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_214);
        _214 = _212;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _214) -> [return: bb99, unwind: bb659];
    }

    bb99: {
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb648;
    }

    bb100: {
        _223 = &(*_224);
        StorageDead(_225);
        _222 = SpotMarket::oracle_id(move _223) -> [return: bb101, unwind: bb659];
    }

    bb101: {
        StorageDead(_223);
        _221 = &_222;
        _220 = &(*_221);
        _218 = OracleMap::<'_>::get_price_data(move _219, move _220) -> [return: bb102, unwind: bb659];
    }

    bb102: {
        StorageDead(_220);
        StorageDead(_219);
        _217 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _218) -> [return: bb103, unwind: bb659];
    }

    bb103: {
        StorageDead(_218);
        _226 = discriminant(_217);
        switchInt(move _226) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_230);
        _230 = ((_217 as Continue).0: &state::oracle::OraclePriceData);
        _216 = _230;
        StorageDead(_230);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_217);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &mut _164;
        _236 = &mut (*_237);
        _235 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _236) -> [return: bb107, unwind: bb659];
    }

    bb105: {
        StorageLive(_227);
        _227 = ((_217 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_229);
        _229 = _227;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _229) -> [return: bb106, unwind: bb659];
    }

    bb106: {
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_217);
        goto -> bb586;
    }

    bb107: {
        _234 = &mut (*_235);
        StorageDead(_236);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &(*_216);
        _238 = Option::<&OraclePriceData>::Some(move _239);
        StorageDead(_239);
        StorageLive(_240);
        _240 = _24;
        _233 = controller::spot_balance::update_spot_market_cumulative_interest(move _234, move _238, move _240) -> [return: bb108, unwind: bb659];
    }

    bb108: {
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_234);
        _232 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _233) -> [return: bb109, unwind: bb659];
    }

    bb109: {
        StorageDead(_233);
        _241 = discriminant(_232);
        switchInt(move _241) -> [0: bb110, 1: bb111, otherwise: bb4];
    }

    bb110: {
        StorageLive(_245);
        _245 = ((_232 as Continue).0: ());
        _231 = _245;
        StorageDead(_245);
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &_115;
        StorageLive(_250);
        StorageLive(_251);
        _251 = &_3;
        _250 = &(*_251);
        _248 = SpotMarketMap::<'_>::get_ref_mut(move _249, move _250) -> [return: bb113, unwind: bb659];
    }

    bb111: {
        StorageLive(_242);
        _242 = ((_232 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_244);
        _244 = _242;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _244) -> [return: bb112, unwind: bb659];
    }

    bb112: {
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb586;
    }

    bb113: {
        StorageDead(_250);
        StorageDead(_249);
        _247 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _248) -> [return: bb114, unwind: bb659];
    }

    bb114: {
        StorageDead(_248);
        _252 = discriminant(_247);
        switchInt(move _252) -> [0: bb115, 1: bb116, otherwise: bb4];
    }

    bb115: {
        StorageLive(_256);
        _256 = move ((_247 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1362 = const true;
        _246 = move _256;
        StorageDead(_256);
        _1394 = discriminant(_247);
        StorageDead(_251);
        StorageDead(_247);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &_246;
        _262 = <RefMut<'_, SpotMarket> as Deref>::deref(move _263) -> [return: bb118, unwind: bb656];
    }

    bb116: {
        StorageLive(_253);
        _253 = ((_247 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_255);
        _255 = _253;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _255) -> [return: bb117, unwind: bb657];
    }

    bb117: {
        StorageDead(_255);
        StorageDead(_253);
        _1392 = discriminant(_247);
        StorageDead(_251);
        StorageDead(_247);
        goto -> bb585;
    }

    bb118: {
        StorageDead(_263);
        _261 = ((*_262).52: u64);
        _260 = Eq(move _261, const 0_u64);
        switchInt(move _260) -> [0: bb123, otherwise: bb119];
    }

    bb119: {
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_246;
        _266 = <RefMut<'_, SpotMarket> as Deref>::deref(move _267) -> [return: bb120, unwind: bb656];
    }

    bb120: {
        StorageDead(_267);
        _265 = ((*_266).51: u64);
        _264 = Eq(move _265, const 0_u64);
        switchInt(move _264) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        StorageDead(_266);
        StorageDead(_265);
        StorageLive(_268);
        _268 = ();
        _259 = std::result::Result::<(), error::ErrorCode>::Ok(move _268);
        StorageDead(_268);
        goto -> bb132;
    }

    bb122: {
        StorageDead(_266);
        StorageDead(_265);
        goto -> bb124;
    }

    bb123: {
        StorageDead(_262);
        StorageDead(_261);
        goto -> bb124;
    }

    bb124: {
        StorageLive(_269);
        _269 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _1317 = const _;
        _280 = &(*_1317);
        _279 = &(*_280);
        _278 = move _279 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_279);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &_269;
        _287 = &(*_288);
        _286 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _287) -> [return: bb125, unwind: bb656];
    }

    bb125: {
        StorageDead(_287);
        _285 = [move _286];
        StorageDead(_286);
        _284 = &_285;
        _283 = &(*_284);
        _282 = move _283 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_283);
        _277 = Arguments::<'_>::new_v1(move _278, move _282) -> [return: bb126, unwind: bb656];
    }

    bb126: {
        StorageDead(_282);
        StorageDead(_278);
        _276 = format(move _277) -> [return: bb127, unwind: bb656];
    }

    bb127: {
        StorageDead(_277);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_280);
        _275 = move _276;
        StorageDead(_276);
        _274 = &_275;
        _273 = &(*_274);
        _272 = <String as Deref>::deref(move _273) -> [return: bb128, unwind: bb629];
    }

    bb128: {
        _271 = &(*_272);
        StorageDead(_273);
        _270 = solana_program::log::sol_log(move _271) -> [return: bb129, unwind: bb629];
    }

    bb129: {
        StorageDead(_271);
        drop(_275) -> [return: bb130, unwind: bb656];
    }

    bb130: {
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_270);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = const "begin_swap ended in invalid state";
        _290 = &(*_291);
        _289 = solana_program::log::sol_log(move _290) -> [return: bb131, unwind: bb656];
    }

    bb131: {
        StorageDead(_290);
        StorageDead(_291);
        StorageDead(_289);
        StorageLive(_292);
        _292 = _269;
        _259 = std::result::Result::<(), error::ErrorCode>::Err(move _292);
        StorageDead(_292);
        StorageDead(_269);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_264);
        StorageDead(_260);
        _258 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _259) -> [return: bb133, unwind: bb656];
    }

    bb133: {
        StorageDead(_259);
        _293 = discriminant(_258);
        switchInt(move _293) -> [0: bb134, 1: bb135, otherwise: bb4];
    }

    bb134: {
        StorageLive(_297);
        _297 = ((_258 as Continue).0: ());
        _257 = _297;
        StorageDead(_297);
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &mut _116;
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &_246;
        _306 = <RefMut<'_, SpotMarket> as Deref>::deref(move _307) -> [return: bb137, unwind: bb656];
    }

    bb135: {
        StorageLive(_294);
        _294 = ((_258 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_296);
        _296 = _294;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _296) -> [return: bb136, unwind: bb656];
    }

    bb136: {
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_258);
        StorageDead(_257);
        goto -> bb646;
    }

    bb137: {
        _305 = &(*_306);
        StorageDead(_307);
        _304 = SpotMarket::oracle_id(move _305) -> [return: bb138, unwind: bb656];
    }

    bb138: {
        StorageDead(_305);
        _303 = &_304;
        _302 = &(*_303);
        _300 = OracleMap::<'_>::get_price_data(move _301, move _302) -> [return: bb139, unwind: bb656];
    }

    bb139: {
        StorageDead(_302);
        StorageDead(_301);
        _299 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _300) -> [return: bb140, unwind: bb656];
    }

    bb140: {
        StorageDead(_300);
        _308 = discriminant(_299);
        switchInt(move _308) -> [0: bb141, 1: bb142, otherwise: bb4];
    }

    bb141: {
        StorageLive(_312);
        _312 = ((_299 as Continue).0: &state::oracle::OraclePriceData);
        _298 = _312;
        StorageDead(_312);
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_299);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &mut _246;
        _318 = &mut (*_319);
        _317 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _318) -> [return: bb144, unwind: bb656];
    }

    bb142: {
        StorageLive(_309);
        _309 = ((_299 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_311);
        _311 = _309;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _311) -> [return: bb143, unwind: bb656];
    }

    bb143: {
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_299);
        goto -> bb584;
    }

    bb144: {
        _316 = &mut (*_317);
        StorageDead(_318);
        StorageLive(_320);
        StorageLive(_321);
        _321 = &(*_298);
        _320 = Option::<&OraclePriceData>::Some(move _321);
        StorageDead(_321);
        StorageLive(_322);
        _322 = _24;
        _315 = controller::spot_balance::update_spot_market_cumulative_interest(move _316, move _320, move _322) -> [return: bb145, unwind: bb656];
    }

    bb145: {
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_316);
        _314 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _315) -> [return: bb146, unwind: bb656];
    }

    bb146: {
        StorageDead(_315);
        _323 = discriminant(_314);
        switchInt(move _323) -> [0: bb147, 1: bb148, otherwise: bb4];
    }

    bb147: {
        StorageLive(_327);
        _327 = ((_314 as Continue).0: ());
        _313 = _327;
        StorageDead(_327);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_313);
        StorageLive(_328);
        StorageLive(_329);
        _1362 = const false;
        _329 = move _246;
        _328 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _329) -> [return: bb150, unwind: bb656];
    }

    bb148: {
        StorageLive(_324);
        _324 = ((_314 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_326);
        _326 = _324;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _326) -> [return: bb149, unwind: bb656];
    }

    bb149: {
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_313);
        goto -> bb584;
    }

    bb150: {
        StorageDead(_329);
        StorageDead(_328);
        StorageLive(_330);
        StorageLive(_331);
        _1363 = const false;
        _331 = move _164;
        _330 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _331) -> [return: bb151, unwind: bb656];
    }

    bb151: {
        StorageDead(_331);
        StorageDead(_330);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = _2;
        StorageLive(_337);
        _337 = _3;
        _335 = Ne(move _336, move _337);
        switchInt(move _335) -> [0: bb153, otherwise: bb152];
    }

    bb152: {
        StorageDead(_337);
        StorageDead(_336);
        StorageLive(_338);
        _338 = ();
        _334 = std::result::Result::<(), error::ErrorCode>::Ok(move _338);
        StorageDead(_338);
        goto -> bb161;
    }

    bb153: {
        StorageDead(_337);
        StorageDead(_336);
        StorageLive(_339);
        _339 = error::ErrorCode::InvalidSwap;
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _1316 = const _;
        _350 = &(*_1316);
        _349 = &(*_350);
        _348 = move _349 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_349);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &_339;
        _357 = &(*_358);
        _356 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _357) -> [return: bb154, unwind: bb656];
    }

    bb154: {
        StorageDead(_357);
        _355 = [move _356];
        StorageDead(_356);
        _354 = &_355;
        _353 = &(*_354);
        _352 = move _353 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_353);
        _347 = Arguments::<'_>::new_v1(move _348, move _352) -> [return: bb155, unwind: bb656];
    }

    bb155: {
        StorageDead(_352);
        StorageDead(_348);
        _346 = format(move _347) -> [return: bb156, unwind: bb656];
    }

    bb156: {
        StorageDead(_347);
        StorageDead(_358);
        StorageDead(_355);
        StorageDead(_354);
        StorageDead(_350);
        _345 = move _346;
        StorageDead(_346);
        _344 = &_345;
        _343 = &(*_344);
        _342 = <String as Deref>::deref(move _343) -> [return: bb157, unwind: bb628];
    }

    bb157: {
        _341 = &(*_342);
        StorageDead(_343);
        _340 = solana_program::log::sol_log(move _341) -> [return: bb158, unwind: bb628];
    }

    bb158: {
        StorageDead(_341);
        drop(_345) -> [return: bb159, unwind: bb656];
    }

    bb159: {
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_342);
        StorageDead(_340);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = const "asset and liability market the same";
        _360 = &(*_361);
        _359 = solana_program::log::sol_log(move _360) -> [return: bb160, unwind: bb656];
    }

    bb160: {
        StorageDead(_360);
        StorageDead(_361);
        StorageDead(_359);
        StorageLive(_362);
        _362 = _339;
        _334 = std::result::Result::<(), error::ErrorCode>::Err(move _362);
        StorageDead(_362);
        StorageDead(_339);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_335);
        _333 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _334) -> [return: bb162, unwind: bb656];
    }

    bb162: {
        StorageDead(_334);
        _363 = discriminant(_333);
        switchInt(move _363) -> [0: bb163, 1: bb164, otherwise: bb4];
    }

    bb163: {
        StorageLive(_367);
        _367 = ((_333 as Continue).0: ());
        _332 = _367;
        StorageDead(_367);
        StorageDead(_333);
        StorageDead(_332);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = _4;
        _371 = Ne(move _372, const 0_u64);
        switchInt(move _371) -> [0: bb167, otherwise: bb166];
    }

    bb164: {
        StorageLive(_364);
        _364 = ((_333 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_366);
        _366 = _364;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _366) -> [return: bb165, unwind: bb656];
    }

    bb165: {
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_333);
        StorageDead(_332);
        goto -> bb584;
    }

    bb166: {
        StorageDead(_372);
        StorageLive(_373);
        _373 = ();
        _370 = std::result::Result::<(), error::ErrorCode>::Ok(move _373);
        StorageDead(_373);
        goto -> bb175;
    }

    bb167: {
        StorageDead(_372);
        StorageLive(_374);
        _374 = error::ErrorCode::InvalidSwap;
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        _1315 = const _;
        _385 = &(*_1315);
        _384 = &(*_385);
        _383 = move _384 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_384);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = &_374;
        _392 = &(*_393);
        _391 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _392) -> [return: bb168, unwind: bb656];
    }

    bb168: {
        StorageDead(_392);
        _390 = [move _391];
        StorageDead(_391);
        _389 = &_390;
        _388 = &(*_389);
        _387 = move _388 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_388);
        _382 = Arguments::<'_>::new_v1(move _383, move _387) -> [return: bb169, unwind: bb656];
    }

    bb169: {
        StorageDead(_387);
        StorageDead(_383);
        _381 = format(move _382) -> [return: bb170, unwind: bb656];
    }

    bb170: {
        StorageDead(_382);
        StorageDead(_393);
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_385);
        _380 = move _381;
        StorageDead(_381);
        _379 = &_380;
        _378 = &(*_379);
        _377 = <String as Deref>::deref(move _378) -> [return: bb171, unwind: bb627];
    }

    bb171: {
        _376 = &(*_377);
        StorageDead(_378);
        _375 = solana_program::log::sol_log(move _376) -> [return: bb172, unwind: bb627];
    }

    bb172: {
        StorageDead(_376);
        drop(_380) -> [return: bb173, unwind: bb656];
    }

    bb173: {
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_377);
        StorageDead(_375);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = const "swap_amount cannot be zero";
        _395 = &(*_396);
        _394 = solana_program::log::sol_log(move _395) -> [return: bb174, unwind: bb656];
    }

    bb174: {
        StorageDead(_395);
        StorageDead(_396);
        StorageDead(_394);
        StorageLive(_397);
        _397 = _374;
        _370 = std::result::Result::<(), error::ErrorCode>::Err(move _397);
        StorageDead(_397);
        StorageDead(_374);
        goto -> bb175;
    }

    bb175: {
        StorageDead(_371);
        _369 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _370) -> [return: bb176, unwind: bb656];
    }

    bb176: {
        StorageDead(_370);
        _398 = discriminant(_369);
        switchInt(move _398) -> [0: bb177, 1: bb178, otherwise: bb4];
    }

    bb177: {
        StorageLive(_402);
        _402 = ((_369 as Continue).0: ());
        _368 = _402;
        StorageDead(_402);
        StorageDead(_369);
        StorageDead(_368);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = _2;
        StorageLive(_407);
        _407 = _3;
        StorageLive(_408);
        _408 = _4;
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = &mut (*_62);
        _410 = <RefMut<'_, User> as DerefMut>::deref_mut(move _411) -> [return: bb180, unwind: bb656];
    }

    bb178: {
        StorageLive(_399);
        _399 = ((_369 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_401);
        _401 = _399;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _401) -> [return: bb179, unwind: bb656];
    }

    bb179: {
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_369);
        StorageDead(_368);
        goto -> bb584;
    }

    bb180: {
        _409 = &mut (*_410);
        StorageDead(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &_25;
        _412 = &(*_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _416 = &mut (*_74);
        _415 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _416) -> [return: bb181, unwind: bb656];
    }

    bb181: {
        _414 = &mut (*_415);
        StorageDead(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = &mut (*_86);
        _418 = <RefMut<'_, User> as DerefMut>::deref_mut(move _419) -> [return: bb182, unwind: bb656];
    }

    bb182: {
        _417 = &mut (*_418);
        StorageDead(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &_27;
        _420 = &(*_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _424 = &mut (*_98);
        _423 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _424) -> [return: bb183, unwind: bb656];
    }

    bb183: {
        _422 = &mut (*_423);
        StorageDead(_424);
        StorageLive(_425);
        StorageLive(_426);
        _426 = &_114;
        _425 = &(*_426);
        StorageLive(_427);
        StorageLive(_428);
        _428 = &_115;
        _427 = &(*_428);
        StorageLive(_429);
        StorageLive(_430);
        _430 = &mut _116;
        _429 = &mut (*_430);
        StorageLive(_431);
        _431 = _24;
        StorageLive(_432);
        _432 = (_16.0: u64);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _1331 = deref_copy (*_15);
        _1445 = (((_1331.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _435 = &(*_1445);
        _434 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _435) -> [return: bb184, unwind: bb656];
    }

    bb184: {
        _433 = &(*_434);
        StorageDead(_435);
        _405 = controller::liquidation::liquidate_spot_with_swap_begin(move _406, move _407, move _408, move _409, move _412, move _414, move _417, move _420, move _422, move _425, move _427, move _429, move _431, move _432, move _433) -> [return: bb185, unwind: bb656];
    }

    bb185: {
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_431);
        StorageDead(_429);
        StorageDead(_427);
        StorageDead(_425);
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_417);
        StorageDead(_414);
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_408);
        StorageDead(_407);
        StorageDead(_406);
        _404 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _405) -> [return: bb186, unwind: bb656];
    }

    bb186: {
        StorageDead(_405);
        _436 = discriminant(_404);
        switchInt(move _436) -> [0: bb187, 1: bb188, otherwise: bb4];
    }

    bb187: {
        StorageLive(_440);
        _440 = ((_404 as Continue).0: ());
        _403 = _440;
        StorageDead(_440);
        StorageDead(_434);
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_426);
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_413);
        StorageDead(_410);
        StorageDead(_404);
        StorageDead(_403);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = &_115;
        StorageLive(_445);
        StorageLive(_446);
        _446 = &_2;
        _445 = &(*_446);
        _443 = SpotMarketMap::<'_>::get_ref_mut(move _444, move _445) -> [return: bb190, unwind: bb656];
    }

    bb188: {
        StorageLive(_437);
        _437 = ((_404 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_439);
        _439 = _437;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _439) -> [return: bb189, unwind: bb656];
    }

    bb189: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_434);
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_426);
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_413);
        StorageDead(_410);
        StorageDead(_404);
        StorageDead(_403);
        goto -> bb584;
    }

    bb190: {
        StorageDead(_445);
        StorageDead(_444);
        _442 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _443) -> [return: bb191, unwind: bb656];
    }

    bb191: {
        StorageDead(_443);
        _447 = discriminant(_442);
        switchInt(move _447) -> [0: bb192, 1: bb193, otherwise: bb4];
    }

    bb192: {
        StorageLive(_451);
        _451 = move ((_442 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _441 = move _451;
        StorageDead(_451);
        _1398 = discriminant(_442);
        StorageDead(_446);
        StorageDead(_442);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        _455 = &_115;
        StorageLive(_456);
        StorageLive(_457);
        _457 = &_3;
        _456 = &(*_457);
        _454 = SpotMarketMap::<'_>::get_ref_mut(move _455, move _456) -> [return: bb195, unwind: bb626];
    }

    bb193: {
        StorageLive(_448);
        _448 = ((_442 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_450);
        _450 = _448;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _450) -> [return: bb194, unwind: bb654];
    }

    bb194: {
        StorageDead(_450);
        StorageDead(_448);
        _1396 = discriminant(_442);
        StorageDead(_446);
        StorageDead(_442);
        goto -> bb583;
    }

    bb195: {
        StorageDead(_456);
        StorageDead(_455);
        _453 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _454) -> [return: bb196, unwind: bb626];
    }

    bb196: {
        StorageDead(_454);
        _458 = discriminant(_453);
        switchInt(move _458) -> [0: bb197, 1: bb198, otherwise: bb4];
    }

    bb197: {
        StorageLive(_462);
        _462 = move ((_453 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _452 = move _462;
        StorageDead(_462);
        _1402 = discriminant(_453);
        StorageDead(_457);
        StorageDead(_453);
        StorageLive(_463);
        _1332 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _463 = &((*_1332).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_464);
        _1333 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _464 = &((*_1333).9: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_465);
        _465 = _4;
        StorageLive(_466);
        StorageLive(_467);
        _467 = &mut _441;
        _466 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _467) -> [return: bb200, unwind: bb625];
    }

    bb198: {
        StorageLive(_459);
        _459 = ((_453 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_461);
        _461 = _459;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _461) -> [return: bb199, unwind: bb653];
    }

    bb199: {
        StorageDead(_461);
        StorageDead(_459);
        _1400 = discriminant(_453);
        StorageDead(_457);
        StorageDead(_453);
        goto -> bb582;
    }

    bb200: {
        StorageDead(_467);
        ((*_466).51: u64) = move _465;
        StorageDead(_465);
        StorageDead(_466);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        _1334 = deref_copy (*_464);
        _1446 = (((_1334.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _472 = &(*_1446);
        _471 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _472) -> [return: bb201, unwind: bb625];
    }

    bb201: {
        _470 = &(*_471);
        _469 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _470) -> [return: bb202, unwind: bb625];
    }

    bb202: {
        StorageDead(_472);
        StorageDead(_470);
        _468 = ((*_469).2: u64);
        StorageLive(_473);
        StorageLive(_474);
        _474 = &mut _441;
        _473 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _474) -> [return: bb203, unwind: bb625];
    }

    bb203: {
        StorageDead(_474);
        ((*_473).52: u64) = move _468;
        StorageDead(_468);
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_469);
        StorageLive(_475);
        _1335 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _475 = &((*_1335).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _1336 = deref_copy (*_475);
        _1447 = (((_1336.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _480 = &(*_1447);
        _479 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _480) -> [return: bb204, unwind: bb625];
    }

    bb204: {
        _478 = &(*_479);
        _477 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _478) -> [return: bb205, unwind: bb625];
    }

    bb205: {
        StorageDead(_480);
        StorageDead(_478);
        _476 = ((*_477).2: u64);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &mut _452;
        _481 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _482) -> [return: bb206, unwind: bb625];
    }

    bb206: {
        StorageDead(_482);
        ((*_481).52: u64) = move _476;
        StorageDead(_476);
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_477);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &_441;
        _485 = <RefMut<'_, SpotMarket> as Deref>::deref(move _486) -> [return: bb207, unwind: bb625];
    }

    bb207: {
        _484 = &(*_485);
        StorageDead(_486);
        _483 = SpotMarket::has_transfer_hook(move _484) -> [return: bb208, unwind: bb625];
    }

    bb208: {
        StorageDead(_484);
        StorageDead(_485);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        _490 = &_452;
        _489 = <RefMut<'_, SpotMarket> as Deref>::deref(move _490) -> [return: bb209, unwind: bb625];
    }

    bb209: {
        _488 = &(*_489);
        StorageDead(_490);
        _487 = SpotMarket::has_transfer_hook(move _488) -> [return: bb210, unwind: bb625];
    }

    bb210: {
        StorageDead(_488);
        StorageDead(_489);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        _494 = _483;
        switchInt(move _494) -> [0: bb212, otherwise: bb211];
    }

    bb211: {
        StorageLive(_495);
        _495 = _487;
        switchInt(move _495) -> [0: bb212, otherwise: bb213];
    }

    bb212: {
        StorageLive(_496);
        _496 = ();
        _493 = std::result::Result::<(), error::ErrorCode>::Ok(move _496);
        StorageDead(_496);
        goto -> bb221;
    }

    bb213: {
        StorageLive(_497);
        _497 = error::ErrorCode::InvalidSwap;
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _1314 = const _;
        _508 = &(*_1314);
        _507 = &(*_508);
        _506 = move _507 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_507);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        _516 = &_497;
        _515 = &(*_516);
        _514 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _515) -> [return: bb214, unwind: bb625];
    }

    bb214: {
        StorageDead(_515);
        _513 = [move _514];
        StorageDead(_514);
        _512 = &_513;
        _511 = &(*_512);
        _510 = move _511 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_511);
        _505 = Arguments::<'_>::new_v1(move _506, move _510) -> [return: bb215, unwind: bb625];
    }

    bb215: {
        StorageDead(_510);
        StorageDead(_506);
        _504 = format(move _505) -> [return: bb216, unwind: bb625];
    }

    bb216: {
        StorageDead(_505);
        StorageDead(_516);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_508);
        _503 = move _504;
        StorageDead(_504);
        _502 = &_503;
        _501 = &(*_502);
        _500 = <String as Deref>::deref(move _501) -> [return: bb217, unwind: bb624];
    }

    bb217: {
        _499 = &(*_500);
        StorageDead(_501);
        _498 = solana_program::log::sol_log(move _499) -> [return: bb218, unwind: bb624];
    }

    bb218: {
        StorageDead(_499);
        drop(_503) -> [return: bb219, unwind: bb625];
    }

    bb219: {
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_500);
        StorageDead(_498);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        _519 = const "both asset and liability spot markets cannot both have transfer hooks";
        _518 = &(*_519);
        _517 = solana_program::log::sol_log(move _518) -> [return: bb220, unwind: bb625];
    }

    bb220: {
        StorageDead(_518);
        StorageDead(_519);
        StorageDead(_517);
        StorageLive(_520);
        _520 = _497;
        _493 = std::result::Result::<(), error::ErrorCode>::Err(move _520);
        StorageDead(_520);
        StorageDead(_497);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_495);
        StorageDead(_494);
        _492 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _493) -> [return: bb222, unwind: bb625];
    }

    bb222: {
        StorageDead(_493);
        _521 = discriminant(_492);
        switchInt(move _521) -> [0: bb223, 1: bb224, otherwise: bb4];
    }

    bb223: {
        StorageLive(_525);
        _525 = ((_492 as Continue).0: ());
        _491 = _525;
        StorageDead(_525);
        StorageDead(_492);
        StorageDead(_491);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _1337 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _530 = &((*_1337).10: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _529 = &(*_530);
        StorageLive(_531);
        _1338 = deref_copy (*_463);
        _1448 = (((_1338.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _531 = &(*_1448);
        StorageLive(_532);
        StorageLive(_533);
        _1339 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _533 = &((*_1339).9: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1340 = deref_copy (*_533);
        _1449 = (((_1340.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _532 = &(*_1449);
        StorageLive(_534);
        StorageLive(_535);
        _1341 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _535 = &((*_1341).11: anchor_lang::prelude::AccountInfo<'_>);
        _534 = &(*_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        _1342 = deref_copy (*_15);
        _1450 = (((_1342.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _538 = &(*_1450);
        _537 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _538) -> [return: bb226, unwind: bb625];
    }

    bb224: {
        StorageLive(_522);
        _522 = ((_492 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_524);
        _524 = _522;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _524) -> [return: bb225, unwind: bb625];
    }

    bb225: {
        StorageDead(_524);
        StorageDead(_522);
        StorageDead(_492);
        StorageDead(_491);
        goto -> bb581;
    }

    bb226: {
        StorageDead(_538);
        _536 = ((*_537).15: u8);
        StorageLive(_539);
        _539 = _4;
        StorageLive(_540);
        StorageLive(_541);
        _541 = &_155;
        _540 = &(*_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        _546 = &_441;
        _545 = <RefMut<'_, SpotMarket> as Deref>::deref(move _546) -> [return: bb227, unwind: bb625];
    }

    bb227: {
        _544 = &(*_545);
        StorageDead(_546);
        _543 = SpotMarket::has_transfer_hook(move _544) -> [return: bb228, unwind: bb625];
    }

    bb228: {
        switchInt(move _543) -> [0: bb230, otherwise: bb229];
    }

    bb229: {
        StorageDead(_545);
        StorageDead(_544);
        StorageLive(_547);
        _547 = &mut (*_110);
        _542 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _547);
        StorageDead(_547);
        goto -> bb231;
    }

    bb230: {
        StorageDead(_545);
        StorageDead(_544);
        _542 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb231;
    }

    bb231: {
        StorageDead(_543);
        _528 = send_from_program_vault(move _529, move _531, move _532, move _534, move _536, move _539, move _540, move _542) -> [return: bb232, unwind: bb625];
    }

    bb232: {
        StorageDead(_542);
        StorageDead(_540);
        StorageDead(_539);
        StorageDead(_536);
        StorageDead(_534);
        StorageDead(_532);
        StorageDead(_531);
        StorageDead(_529);
        _527 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _528) -> [return: bb233, unwind: bb625];
    }

    bb233: {
        StorageDead(_528);
        _548 = discriminant(_527);
        switchInt(move _548) -> [0: bb234, 1: bb235, otherwise: bb4];
    }

    bb234: {
        StorageLive(_552);
        _552 = ((_527 as Continue).0: ());
        _526 = _552;
        StorageDead(_552);
        _1404 = discriminant(_527);
        StorageDead(_541);
        StorageDead(_537);
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_530);
        StorageDead(_527);
        StorageDead(_526);
        StorageLive(_553);
        StorageLive(_554);
        _1343 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _554 = &((*_1343).12: anchor_lang::prelude::UncheckedAccount<'_>);
        _553 = <anchor_lang::prelude::UncheckedAccount<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _554) -> [return: bb237, unwind: bb625];
    }

    bb235: {
        StorageLive(_549);
        _549 = move ((_527 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_551);
        _551 = move _549;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _551) -> [return: bb236, unwind: bb652];
    }

    bb236: {
        StorageDead(_551);
        StorageDead(_549);
        _1420 = discriminant(_527);
        StorageDead(_541);
        StorageDead(_537);
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_530);
        StorageDead(_527);
        StorageDead(_526);
        goto -> bb581;
    }

    bb237: {
        StorageDead(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _559 = &(*_553);
        _558 = load_current_index_checked(move _559) -> [return: bb238, unwind: bb625];
    }

    bb238: {
        StorageDead(_559);
        _557 = <std::result::Result<u16, anchor_lang::prelude::ProgramError> as Try>::branch(move _558) -> [return: bb239, unwind: bb625];
    }

    bb239: {
        StorageDead(_558);
        _560 = discriminant(_557);
        switchInt(move _560) -> [0: bb240, 1: bb241, otherwise: bb4];
    }

    bb240: {
        StorageLive(_564);
        _564 = ((_557 as Continue).0: u16);
        _556 = _564;
        StorageDead(_564);
        _555 = move _556 as usize (IntToInt);
        StorageDead(_556);
        _1406 = discriminant(_557);
        StorageDead(_557);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _568 = _555;
        StorageLive(_569);
        _569 = &(*_553);
        _567 = load_instruction_at_checked(move _568, move _569) -> [return: bb243, unwind: bb625];
    }

    bb241: {
        StorageLive(_561);
        _561 = move ((_557 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_563);
        _563 = move _561;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _563) -> [return: bb242, unwind: bb651];
    }

    bb242: {
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_556);
        _1418 = discriminant(_557);
        StorageDead(_557);
        goto -> bb580;
    }

    bb243: {
        StorageDead(_569);
        StorageDead(_568);
        _566 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _567) -> [return: bb244, unwind: bb625];
    }

    bb244: {
        StorageDead(_567);
        _570 = discriminant(_566);
        switchInt(move _570) -> [0: bb245, 1: bb246, otherwise: bb4];
    }

    bb245: {
        StorageLive(_574);
        _574 = move ((_566 as Continue).0: solana_program::instruction::Instruction);
        _565 = move _574;
        StorageDead(_574);
        _1408 = discriminant(_566);
        StorageDead(_566);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        _579 = &(_565.0: anchor_lang::prelude::Pubkey);
        StorageLive(_580);
        _1344 = deref_copy (_1.0: &anchor_lang::prelude::Pubkey);
        _580 = &(*_1344);
        _578 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _579, move _580) -> [return: bb248, unwind: bb623];
    }

    bb246: {
        StorageLive(_571);
        _571 = move ((_566 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_573);
        _573 = move _571;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _573) -> [return: bb247, unwind: bb650];
    }

    bb247: {
        StorageDead(_573);
        StorageDead(_571);
        _1416 = discriminant(_566);
        StorageDead(_566);
        goto -> bb579;
    }

    bb248: {
        switchInt(move _578) -> [0: bb250, otherwise: bb249];
    }

    bb249: {
        StorageDead(_580);
        StorageDead(_579);
        StorageLive(_581);
        _581 = ();
        _577 = std::result::Result::<(), error::ErrorCode>::Ok(move _581);
        StorageDead(_581);
        goto -> bb258;
    }

    bb250: {
        StorageDead(_580);
        StorageDead(_579);
        StorageLive(_582);
        _582 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        _1313 = const _;
        _593 = &(*_1313);
        _592 = &(*_593);
        _591 = move _592 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_592);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        _601 = &_582;
        _600 = &(*_601);
        _599 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _600) -> [return: bb251, unwind: bb623];
    }

    bb251: {
        StorageDead(_600);
        _598 = [move _599];
        StorageDead(_599);
        _597 = &_598;
        _596 = &(*_597);
        _595 = move _596 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_596);
        _590 = Arguments::<'_>::new_v1(move _591, move _595) -> [return: bb252, unwind: bb623];
    }

    bb252: {
        StorageDead(_595);
        StorageDead(_591);
        _589 = format(move _590) -> [return: bb253, unwind: bb623];
    }

    bb253: {
        StorageDead(_590);
        StorageDead(_601);
        StorageDead(_598);
        StorageDead(_597);
        StorageDead(_593);
        _588 = move _589;
        StorageDead(_589);
        _587 = &_588;
        _586 = &(*_587);
        _585 = <String as Deref>::deref(move _586) -> [return: bb254, unwind: bb622];
    }

    bb254: {
        _584 = &(*_585);
        StorageDead(_586);
        _583 = solana_program::log::sol_log(move _584) -> [return: bb255, unwind: bb622];
    }

    bb255: {
        StorageDead(_584);
        drop(_588) -> [return: bb256, unwind: bb623];
    }

    bb256: {
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_585);
        StorageDead(_583);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = const "LiquidateSpotWithSwapBegin must be a top-level instruction (cant be cpi)";
        _603 = &(*_604);
        _602 = solana_program::log::sol_log(move _603) -> [return: bb257, unwind: bb623];
    }

    bb257: {
        StorageDead(_603);
        StorageDead(_604);
        StorageDead(_602);
        StorageLive(_605);
        _605 = _582;
        _577 = std::result::Result::<(), error::ErrorCode>::Err(move _605);
        StorageDead(_605);
        StorageDead(_582);
        goto -> bb258;
    }

    bb258: {
        StorageDead(_578);
        _576 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _577) -> [return: bb259, unwind: bb623];
    }

    bb259: {
        StorageDead(_577);
        _606 = discriminant(_576);
        switchInt(move _606) -> [0: bb260, 1: bb261, otherwise: bb4];
    }

    bb260: {
        StorageLive(_610);
        _610 = ((_576 as Continue).0: ());
        _575 = _610;
        StorageDead(_610);
        StorageDead(_576);
        StorageDead(_575);
        StorageLive(_611);
        StorageLive(_612);
        _612 = _555;
        _613 = CheckedAdd(_612, const 1_usize);
        assert(!move (_613.1: bool), "attempt to compute `{} + {}`, which would overflow", move _612, const 1_usize) -> [success: bb263, unwind: bb623];
    }

    bb261: {
        StorageLive(_607);
        _607 = ((_576 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_609);
        _609 = _607;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _609) -> [return: bb262, unwind: bb623];
    }

    bb262: {
        StorageDead(_609);
        StorageDead(_607);
        StorageDead(_576);
        StorageDead(_575);
        goto -> bb578;
    }

    bb263: {
        _611 = move (_613.0: usize);
        StorageDead(_612);
        StorageLive(_614);
        _614 = const false;
        StorageLive(_615);
        goto -> bb264;
    }

    bb264: {
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        _619 = _611;
        StorageLive(_620);
        _620 = &(*_553);
        _618 = load_instruction_at_checked(move _619, move _620) -> [return: bb265, unwind: bb623];
    }

    bb265: {
        StorageDead(_620);
        StorageDead(_619);
        _622 = discriminant(_618);
        switchInt(move _622) -> [0: bb268, 1: bb266, otherwise: bb4];
    }

    bb266: {
        _621 = discriminant(((_618 as Err).0: anchor_lang::prelude::ProgramError));
        switchInt(move _621) -> [1: bb269, otherwise: bb267];
    }

    bb267: {
        StorageLive(_625);
        _625 = move ((_618 as Err).0: anchor_lang::prelude::ProgramError);
        StorageLive(_627);
        StorageLive(_628);
        _628 = move _625;
        _627 = <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into(move _628) -> [return: bb270, unwind: bb649];
    }

    bb268: {
        StorageLive(_623);
        _623 = move ((_618 as Ok).0: solana_program::instruction::Instruction);
        _617 = move _623;
        StorageDead(_623);
        _1410 = discriminant(_618);
        StorageDead(_618);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        _631 = &(_617.0: anchor_lang::prelude::Pubkey);
        StorageLive(_632);
        StorageLive(_633);
        _633 = id() -> [return: bb271, unwind: bb621];
    }

    bb269: {
        _615 = const ();
        _1412 = discriminant(_618);
        switchInt(move _1412) -> [0: bb643, otherwise: bb644];
    }

    bb270: {
        StorageDead(_628);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _627);
        StorageDead(_627);
        StorageDead(_625);
        _1414 = discriminant(_618);
        StorageDead(_618);
        goto -> bb576;
    }

    bb271: {
        _632 = &_633;
        _630 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _631, move _632) -> [return: bb272, unwind: bb621];
    }

    bb272: {
        switchInt(move _630) -> [0: bb475, otherwise: bb273];
    }

    bb273: {
        StorageDead(_633);
        StorageDead(_632);
        StorageDead(_631);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        _637 = _614;
        switchInt(move _637) -> [0: bb274, otherwise: bb275];
    }

    bb274: {
        StorageLive(_638);
        _638 = ();
        _636 = std::result::Result::<(), error::ErrorCode>::Ok(move _638);
        StorageDead(_638);
        goto -> bb283;
    }

    bb275: {
        StorageLive(_639);
        _639 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        _1309 = const _;
        _650 = &(*_1309);
        _649 = &(*_650);
        _648 = move _649 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_649);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        _658 = &_639;
        _657 = &(*_658);
        _656 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _657) -> [return: bb276, unwind: bb621];
    }

    bb276: {
        StorageDead(_657);
        _655 = [move _656];
        StorageDead(_656);
        _654 = &_655;
        _653 = &(*_654);
        _652 = move _653 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_653);
        _647 = Arguments::<'_>::new_v1(move _648, move _652) -> [return: bb277, unwind: bb621];
    }

    bb277: {
        StorageDead(_652);
        StorageDead(_648);
        _646 = format(move _647) -> [return: bb278, unwind: bb621];
    }

    bb278: {
        StorageDead(_647);
        StorageDead(_658);
        StorageDead(_655);
        StorageDead(_654);
        StorageDead(_650);
        _645 = move _646;
        StorageDead(_646);
        _644 = &_645;
        _643 = &(*_644);
        _642 = <String as Deref>::deref(move _643) -> [return: bb279, unwind: bb620];
    }

    bb279: {
        _641 = &(*_642);
        StorageDead(_643);
        _640 = solana_program::log::sol_log(move _641) -> [return: bb280, unwind: bb620];
    }

    bb280: {
        StorageDead(_641);
        drop(_645) -> [return: bb281, unwind: bb621];
    }

    bb281: {
        StorageDead(_645);
        StorageDead(_644);
        StorageDead(_642);
        StorageDead(_640);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        _661 = const "the transaction must not contain a Drift instruction after FlashLoanEnd";
        _660 = &(*_661);
        _659 = solana_program::log::sol_log(move _660) -> [return: bb282, unwind: bb621];
    }

    bb282: {
        StorageDead(_660);
        StorageDead(_661);
        StorageDead(_659);
        StorageLive(_662);
        _662 = _639;
        _636 = std::result::Result::<(), error::ErrorCode>::Err(move _662);
        StorageDead(_662);
        StorageDead(_639);
        goto -> bb283;
    }

    bb283: {
        StorageDead(_637);
        _635 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _636) -> [return: bb284, unwind: bb621];
    }

    bb284: {
        StorageDead(_636);
        _663 = discriminant(_635);
        switchInt(move _663) -> [0: bb285, 1: bb286, otherwise: bb4];
    }

    bb285: {
        StorageLive(_667);
        _667 = ((_635 as Continue).0: ());
        _634 = _667;
        StorageDead(_667);
        StorageDead(_635);
        StorageDead(_634);
        _614 = const true;
        StorageLive(_668);
        _668 = <LiquidateSpotWithSwapEnd as anchor_lang::Discriminator>::discriminator() -> [return: bb288, unwind: bb621];
    }

    bb286: {
        StorageLive(_664);
        _664 = ((_635 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_666);
        _666 = _664;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _666) -> [return: bb287, unwind: bb621];
    }

    bb287: {
        StorageDead(_666);
        StorageDead(_664);
        StorageDead(_635);
        StorageDead(_634);
        goto -> bb575;
    }

    bb288: {
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        _675 = &(_617.2: std::vec::Vec<u8>);
        StorageLive(_676);
        _676 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _674 = <Vec<u8> as Index<std::ops::Range<usize>>>::index(move _675, move _676) -> [return: bb289, unwind: bb621];
    }

    bb289: {
        _673 = &(*_674);
        StorageDead(_676);
        StorageDead(_675);
        StorageLive(_677);
        _677 = &_668;
        _672 = <[u8] as PartialEq<[u8; 8]>>::eq(move _673, move _677) -> [return: bb290, unwind: bb621];
    }

    bb290: {
        switchInt(move _672) -> [0: bb292, otherwise: bb291];
    }

    bb291: {
        StorageDead(_677);
        StorageDead(_674);
        StorageDead(_673);
        StorageLive(_678);
        _678 = ();
        _671 = std::result::Result::<(), error::ErrorCode>::Ok(move _678);
        StorageDead(_678);
        goto -> bb300;
    }

    bb292: {
        StorageDead(_677);
        StorageDead(_674);
        StorageDead(_673);
        StorageLive(_679);
        _679 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        _1308 = const _;
        _690 = &(*_1308);
        _689 = &(*_690);
        _688 = move _689 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_689);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        _698 = &_679;
        _697 = &(*_698);
        _696 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _697) -> [return: bb293, unwind: bb621];
    }

    bb293: {
        StorageDead(_697);
        _695 = [move _696];
        StorageDead(_696);
        _694 = &_695;
        _693 = &(*_694);
        _692 = move _693 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_693);
        _687 = Arguments::<'_>::new_v1(move _688, move _692) -> [return: bb294, unwind: bb621];
    }

    bb294: {
        StorageDead(_692);
        StorageDead(_688);
        _686 = format(move _687) -> [return: bb295, unwind: bb621];
    }

    bb295: {
        StorageDead(_687);
        StorageDead(_698);
        StorageDead(_695);
        StorageDead(_694);
        StorageDead(_690);
        _685 = move _686;
        StorageDead(_686);
        _684 = &_685;
        _683 = &(*_684);
        _682 = <String as Deref>::deref(move _683) -> [return: bb296, unwind: bb619];
    }

    bb296: {
        _681 = &(*_682);
        StorageDead(_683);
        _680 = solana_program::log::sol_log(move _681) -> [return: bb297, unwind: bb619];
    }

    bb297: {
        StorageDead(_681);
        drop(_685) -> [return: bb298, unwind: bb621];
    }

    bb298: {
        StorageDead(_685);
        StorageDead(_684);
        StorageDead(_682);
        StorageDead(_680);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        _701 = const "last drift ix must be end of swap";
        _700 = &(*_701);
        _699 = solana_program::log::sol_log(move _700) -> [return: bb299, unwind: bb621];
    }

    bb299: {
        StorageDead(_700);
        StorageDead(_701);
        StorageDead(_699);
        StorageLive(_702);
        _702 = _679;
        _671 = std::result::Result::<(), error::ErrorCode>::Err(move _702);
        StorageDead(_702);
        StorageDead(_679);
        goto -> bb300;
    }

    bb300: {
        StorageDead(_672);
        _670 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _671) -> [return: bb301, unwind: bb621];
    }

    bb301: {
        StorageDead(_671);
        _703 = discriminant(_670);
        switchInt(move _703) -> [0: bb302, 1: bb303, otherwise: bb4];
    }

    bb302: {
        StorageLive(_707);
        _707 = ((_670 as Continue).0: ());
        _669 = _707;
        StorageDead(_707);
        StorageDead(_670);
        StorageDead(_669);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        _1345 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _714 = &((*_1345).1: anchor_lang::prelude::Signer<'_>);
        _713 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _714) -> [return: bb305, unwind: bb621];
    }

    bb303: {
        StorageLive(_704);
        _704 = ((_670 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_706);
        _706 = _704;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _706) -> [return: bb304, unwind: bb621];
    }

    bb304: {
        StorageDead(_706);
        StorageDead(_704);
        StorageDead(_670);
        StorageDead(_669);
        goto -> bb574;
    }

    bb305: {
        _712 = &_713;
        StorageDead(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        _717 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _716 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _717, const 1_usize) -> [return: bb306, unwind: bb621];
    }

    bb306: {
        StorageDead(_717);
        _715 = &((*_716).0: anchor_lang::prelude::Pubkey);
        _711 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _712, move _715) -> [return: bb307, unwind: bb621];
    }

    bb307: {
        switchInt(move _711) -> [0: bb309, otherwise: bb308];
    }

    bb308: {
        StorageDead(_716);
        StorageDead(_715);
        StorageDead(_713);
        StorageDead(_712);
        StorageLive(_718);
        _718 = ();
        _710 = std::result::Result::<(), error::ErrorCode>::Ok(move _718);
        StorageDead(_718);
        goto -> bb317;
    }

    bb309: {
        StorageDead(_716);
        StorageDead(_715);
        StorageDead(_713);
        StorageDead(_712);
        StorageLive(_719);
        _719 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        _1307 = const _;
        _730 = &(*_1307);
        _729 = &(*_730);
        _728 = move _729 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_729);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        _738 = &_719;
        _737 = &(*_738);
        _736 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _737) -> [return: bb310, unwind: bb621];
    }

    bb310: {
        StorageDead(_737);
        _735 = [move _736];
        StorageDead(_736);
        _734 = &_735;
        _733 = &(*_734);
        _732 = move _733 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_733);
        _727 = Arguments::<'_>::new_v1(move _728, move _732) -> [return: bb311, unwind: bb621];
    }

    bb311: {
        StorageDead(_732);
        StorageDead(_728);
        _726 = format(move _727) -> [return: bb312, unwind: bb621];
    }

    bb312: {
        StorageDead(_727);
        StorageDead(_738);
        StorageDead(_735);
        StorageDead(_734);
        StorageDead(_730);
        _725 = move _726;
        StorageDead(_726);
        _724 = &_725;
        _723 = &(*_724);
        _722 = <String as Deref>::deref(move _723) -> [return: bb313, unwind: bb618];
    }

    bb313: {
        _721 = &(*_722);
        StorageDead(_723);
        _720 = solana_program::log::sol_log(move _721) -> [return: bb314, unwind: bb618];
    }

    bb314: {
        StorageDead(_721);
        drop(_725) -> [return: bb315, unwind: bb621];
    }

    bb315: {
        StorageDead(_725);
        StorageDead(_724);
        StorageDead(_722);
        StorageDead(_720);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        _741 = const "the authority passed to SwapBegin and End must match";
        _740 = &(*_741);
        _739 = solana_program::log::sol_log(move _740) -> [return: bb316, unwind: bb621];
    }

    bb316: {
        StorageDead(_740);
        StorageDead(_741);
        StorageDead(_739);
        StorageLive(_742);
        _742 = _719;
        _710 = std::result::Result::<(), error::ErrorCode>::Err(move _742);
        StorageDead(_742);
        StorageDead(_719);
        goto -> bb317;
    }

    bb317: {
        StorageDead(_711);
        _709 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _710) -> [return: bb318, unwind: bb621];
    }

    bb318: {
        StorageDead(_710);
        _743 = discriminant(_709);
        switchInt(move _743) -> [0: bb319, 1: bb320, otherwise: bb4];
    }

    bb319: {
        StorageLive(_747);
        _747 = ((_709 as Continue).0: ());
        _708 = _747;
        StorageDead(_747);
        StorageDead(_709);
        StorageDead(_708);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        _1346 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _754 = &((*_1346).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _753 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _754) -> [return: bb322, unwind: bb621];
    }

    bb320: {
        StorageLive(_744);
        _744 = ((_709 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_746);
        _746 = _744;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _746) -> [return: bb321, unwind: bb621];
    }

    bb321: {
        StorageDead(_746);
        StorageDead(_744);
        StorageDead(_709);
        StorageDead(_708);
        goto -> bb574;
    }

    bb322: {
        _752 = &_753;
        StorageDead(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        _757 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _756 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _757, const 2_usize) -> [return: bb323, unwind: bb621];
    }

    bb323: {
        StorageDead(_757);
        _755 = &((*_756).0: anchor_lang::prelude::Pubkey);
        _751 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _752, move _755) -> [return: bb324, unwind: bb621];
    }

    bb324: {
        switchInt(move _751) -> [0: bb326, otherwise: bb325];
    }

    bb325: {
        StorageDead(_756);
        StorageDead(_755);
        StorageDead(_753);
        StorageDead(_752);
        StorageLive(_758);
        _758 = ();
        _750 = std::result::Result::<(), error::ErrorCode>::Ok(move _758);
        StorageDead(_758);
        goto -> bb334;
    }

    bb326: {
        StorageDead(_756);
        StorageDead(_755);
        StorageDead(_753);
        StorageDead(_752);
        StorageLive(_759);
        _759 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        _1306 = const _;
        _770 = &(*_1306);
        _769 = &(*_770);
        _768 = move _769 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_769);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        _778 = &_759;
        _777 = &(*_778);
        _776 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _777) -> [return: bb327, unwind: bb621];
    }

    bb327: {
        StorageDead(_777);
        _775 = [move _776];
        StorageDead(_776);
        _774 = &_775;
        _773 = &(*_774);
        _772 = move _773 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_773);
        _767 = Arguments::<'_>::new_v1(move _768, move _772) -> [return: bb328, unwind: bb621];
    }

    bb328: {
        StorageDead(_772);
        StorageDead(_768);
        _766 = format(move _767) -> [return: bb329, unwind: bb621];
    }

    bb329: {
        StorageDead(_767);
        StorageDead(_778);
        StorageDead(_775);
        StorageDead(_774);
        StorageDead(_770);
        _765 = move _766;
        StorageDead(_766);
        _764 = &_765;
        _763 = &(*_764);
        _762 = <String as Deref>::deref(move _763) -> [return: bb330, unwind: bb617];
    }

    bb330: {
        _761 = &(*_762);
        StorageDead(_763);
        _760 = solana_program::log::sol_log(move _761) -> [return: bb331, unwind: bb617];
    }

    bb331: {
        StorageDead(_761);
        drop(_765) -> [return: bb332, unwind: bb621];
    }

    bb332: {
        StorageDead(_765);
        StorageDead(_764);
        StorageDead(_762);
        StorageDead(_760);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        _781 = const "the liquidator passed to SwapBegin and End must match";
        _780 = &(*_781);
        _779 = solana_program::log::sol_log(move _780) -> [return: bb333, unwind: bb621];
    }

    bb333: {
        StorageDead(_780);
        StorageDead(_781);
        StorageDead(_779);
        StorageLive(_782);
        _782 = _759;
        _750 = std::result::Result::<(), error::ErrorCode>::Err(move _782);
        StorageDead(_782);
        StorageDead(_759);
        goto -> bb334;
    }

    bb334: {
        StorageDead(_751);
        _749 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _750) -> [return: bb335, unwind: bb621];
    }

    bb335: {
        StorageDead(_750);
        _783 = discriminant(_749);
        switchInt(move _783) -> [0: bb336, 1: bb337, otherwise: bb4];
    }

    bb336: {
        StorageLive(_787);
        _787 = ((_749 as Continue).0: ());
        _748 = _787;
        StorageDead(_787);
        StorageDead(_749);
        StorageDead(_748);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        _1347 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _794 = &((*_1347).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _793 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _794) -> [return: bb339, unwind: bb621];
    }

    bb337: {
        StorageLive(_784);
        _784 = ((_749 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_786);
        _786 = _784;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _786) -> [return: bb338, unwind: bb621];
    }

    bb338: {
        StorageDead(_786);
        StorageDead(_784);
        StorageDead(_749);
        StorageDead(_748);
        goto -> bb574;
    }

    bb339: {
        _792 = &_793;
        StorageDead(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        _797 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _796 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _797, const 4_usize) -> [return: bb340, unwind: bb621];
    }

    bb340: {
        StorageDead(_797);
        _795 = &((*_796).0: anchor_lang::prelude::Pubkey);
        _791 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _792, move _795) -> [return: bb341, unwind: bb621];
    }

    bb341: {
        switchInt(move _791) -> [0: bb343, otherwise: bb342];
    }

    bb342: {
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_793);
        StorageDead(_792);
        StorageLive(_798);
        _798 = ();
        _790 = std::result::Result::<(), error::ErrorCode>::Ok(move _798);
        StorageDead(_798);
        goto -> bb351;
    }

    bb343: {
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_793);
        StorageDead(_792);
        StorageLive(_799);
        _799 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        _1305 = const _;
        _810 = &(*_1305);
        _809 = &(*_810);
        _808 = move _809 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_809);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        StorageLive(_818);
        _818 = &_799;
        _817 = &(*_818);
        _816 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _817) -> [return: bb344, unwind: bb621];
    }

    bb344: {
        StorageDead(_817);
        _815 = [move _816];
        StorageDead(_816);
        _814 = &_815;
        _813 = &(*_814);
        _812 = move _813 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_813);
        _807 = Arguments::<'_>::new_v1(move _808, move _812) -> [return: bb345, unwind: bb621];
    }

    bb345: {
        StorageDead(_812);
        StorageDead(_808);
        _806 = format(move _807) -> [return: bb346, unwind: bb621];
    }

    bb346: {
        StorageDead(_807);
        StorageDead(_818);
        StorageDead(_815);
        StorageDead(_814);
        StorageDead(_810);
        _805 = move _806;
        StorageDead(_806);
        _804 = &_805;
        _803 = &(*_804);
        _802 = <String as Deref>::deref(move _803) -> [return: bb347, unwind: bb616];
    }

    bb347: {
        _801 = &(*_802);
        StorageDead(_803);
        _800 = solana_program::log::sol_log(move _801) -> [return: bb348, unwind: bb616];
    }

    bb348: {
        StorageDead(_801);
        drop(_805) -> [return: bb349, unwind: bb621];
    }

    bb349: {
        StorageDead(_805);
        StorageDead(_804);
        StorageDead(_802);
        StorageDead(_800);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        _821 = const "the user passed to SwapBegin and End must match";
        _820 = &(*_821);
        _819 = solana_program::log::sol_log(move _820) -> [return: bb350, unwind: bb621];
    }

    bb350: {
        StorageDead(_820);
        StorageDead(_821);
        StorageDead(_819);
        StorageLive(_822);
        _822 = _799;
        _790 = std::result::Result::<(), error::ErrorCode>::Err(move _822);
        StorageDead(_822);
        StorageDead(_799);
        goto -> bb351;
    }

    bb351: {
        StorageDead(_791);
        _789 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _790) -> [return: bb352, unwind: bb621];
    }

    bb352: {
        StorageDead(_790);
        _823 = discriminant(_789);
        switchInt(move _823) -> [0: bb353, 1: bb354, otherwise: bb4];
    }

    bb353: {
        StorageLive(_827);
        _827 = ((_789 as Continue).0: ());
        _788 = _827;
        StorageDead(_827);
        StorageDead(_789);
        StorageDead(_788);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        StorageLive(_832);
        StorageLive(_833);
        StorageLive(_834);
        _1348 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _1349 = deref_copy ((*_1348).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1451 = (((_1349.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _834 = &(*_1451);
        _833 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _834) -> [return: bb356, unwind: bb621];
    }

    bb354: {
        StorageLive(_824);
        _824 = ((_789 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_826);
        _826 = _824;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _826) -> [return: bb355, unwind: bb621];
    }

    bb355: {
        StorageDead(_826);
        StorageDead(_824);
        StorageDead(_789);
        StorageDead(_788);
        goto -> bb574;
    }

    bb356: {
        _832 = &_833;
        StorageDead(_834);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        _837 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _836 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _837, const 6_usize) -> [return: bb357, unwind: bb621];
    }

    bb357: {
        StorageDead(_837);
        _835 = &((*_836).0: anchor_lang::prelude::Pubkey);
        _831 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _832, move _835) -> [return: bb358, unwind: bb621];
    }

    bb358: {
        switchInt(move _831) -> [0: bb360, otherwise: bb359];
    }

    bb359: {
        StorageDead(_836);
        StorageDead(_835);
        StorageDead(_833);
        StorageDead(_832);
        StorageLive(_838);
        _838 = ();
        _830 = std::result::Result::<(), error::ErrorCode>::Ok(move _838);
        StorageDead(_838);
        goto -> bb368;
    }

    bb360: {
        StorageDead(_836);
        StorageDead(_835);
        StorageDead(_833);
        StorageDead(_832);
        StorageLive(_839);
        _839 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        _1304 = const _;
        _850 = &(*_1304);
        _849 = &(*_850);
        _848 = move _849 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_849);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        StorageLive(_858);
        _858 = &_839;
        _857 = &(*_858);
        _856 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _857) -> [return: bb361, unwind: bb621];
    }

    bb361: {
        StorageDead(_857);
        _855 = [move _856];
        StorageDead(_856);
        _854 = &_855;
        _853 = &(*_854);
        _852 = move _853 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_853);
        _847 = Arguments::<'_>::new_v1(move _848, move _852) -> [return: bb362, unwind: bb621];
    }

    bb362: {
        StorageDead(_852);
        StorageDead(_848);
        _846 = format(move _847) -> [return: bb363, unwind: bb621];
    }

    bb363: {
        StorageDead(_847);
        StorageDead(_858);
        StorageDead(_855);
        StorageDead(_854);
        StorageDead(_850);
        _845 = move _846;
        StorageDead(_846);
        _844 = &_845;
        _843 = &(*_844);
        _842 = <String as Deref>::deref(move _843) -> [return: bb364, unwind: bb615];
    }

    bb364: {
        _841 = &(*_842);
        StorageDead(_843);
        _840 = solana_program::log::sol_log(move _841) -> [return: bb365, unwind: bb615];
    }

    bb365: {
        StorageDead(_841);
        drop(_845) -> [return: bb366, unwind: bb621];
    }

    bb366: {
        StorageDead(_845);
        StorageDead(_844);
        StorageDead(_842);
        StorageDead(_840);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        _861 = const "the liability_spot_market_vault passed to SwapBegin and End must match";
        _860 = &(*_861);
        _859 = solana_program::log::sol_log(move _860) -> [return: bb367, unwind: bb621];
    }

    bb367: {
        StorageDead(_860);
        StorageDead(_861);
        StorageDead(_859);
        StorageLive(_862);
        _862 = _839;
        _830 = std::result::Result::<(), error::ErrorCode>::Err(move _862);
        StorageDead(_862);
        StorageDead(_839);
        goto -> bb368;
    }

    bb368: {
        StorageDead(_831);
        _829 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _830) -> [return: bb369, unwind: bb621];
    }

    bb369: {
        StorageDead(_830);
        _863 = discriminant(_829);
        switchInt(move _863) -> [0: bb370, 1: bb371, otherwise: bb4];
    }

    bb370: {
        StorageLive(_867);
        _867 = ((_829 as Continue).0: ());
        _828 = _867;
        StorageDead(_867);
        StorageDead(_829);
        StorageDead(_828);
        StorageLive(_868);
        StorageLive(_869);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        _1350 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _1351 = deref_copy ((*_1350).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1452 = (((_1351.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _874 = &(*_1452);
        _873 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _874) -> [return: bb373, unwind: bb621];
    }

    bb371: {
        StorageLive(_864);
        _864 = ((_829 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_866);
        _866 = _864;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _866) -> [return: bb372, unwind: bb621];
    }

    bb372: {
        StorageDead(_866);
        StorageDead(_864);
        StorageDead(_829);
        StorageDead(_828);
        goto -> bb574;
    }

    bb373: {
        _872 = &_873;
        StorageDead(_874);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        _877 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _876 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _877, const 7_usize) -> [return: bb374, unwind: bb621];
    }

    bb374: {
        StorageDead(_877);
        _875 = &((*_876).0: anchor_lang::prelude::Pubkey);
        _871 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _872, move _875) -> [return: bb375, unwind: bb621];
    }

    bb375: {
        switchInt(move _871) -> [0: bb377, otherwise: bb376];
    }

    bb376: {
        StorageDead(_876);
        StorageDead(_875);
        StorageDead(_873);
        StorageDead(_872);
        StorageLive(_878);
        _878 = ();
        _870 = std::result::Result::<(), error::ErrorCode>::Ok(move _878);
        StorageDead(_878);
        goto -> bb385;
    }

    bb377: {
        StorageDead(_876);
        StorageDead(_875);
        StorageDead(_873);
        StorageDead(_872);
        StorageLive(_879);
        _879 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        _1303 = const _;
        _890 = &(*_1303);
        _889 = &(*_890);
        _888 = move _889 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_889);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        _898 = &_879;
        _897 = &(*_898);
        _896 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _897) -> [return: bb378, unwind: bb621];
    }

    bb378: {
        StorageDead(_897);
        _895 = [move _896];
        StorageDead(_896);
        _894 = &_895;
        _893 = &(*_894);
        _892 = move _893 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_893);
        _887 = Arguments::<'_>::new_v1(move _888, move _892) -> [return: bb379, unwind: bb621];
    }

    bb379: {
        StorageDead(_892);
        StorageDead(_888);
        _886 = format(move _887) -> [return: bb380, unwind: bb621];
    }

    bb380: {
        StorageDead(_887);
        StorageDead(_898);
        StorageDead(_895);
        StorageDead(_894);
        StorageDead(_890);
        _885 = move _886;
        StorageDead(_886);
        _884 = &_885;
        _883 = &(*_884);
        _882 = <String as Deref>::deref(move _883) -> [return: bb381, unwind: bb614];
    }

    bb381: {
        _881 = &(*_882);
        StorageDead(_883);
        _880 = solana_program::log::sol_log(move _881) -> [return: bb382, unwind: bb614];
    }

    bb382: {
        StorageDead(_881);
        drop(_885) -> [return: bb383, unwind: bb621];
    }

    bb383: {
        StorageDead(_885);
        StorageDead(_884);
        StorageDead(_882);
        StorageDead(_880);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        _901 = const "the asset_spot_market_vault passed to SwapBegin and End must match";
        _900 = &(*_901);
        _899 = solana_program::log::sol_log(move _900) -> [return: bb384, unwind: bb621];
    }

    bb384: {
        StorageDead(_900);
        StorageDead(_901);
        StorageDead(_899);
        StorageLive(_902);
        _902 = _879;
        _870 = std::result::Result::<(), error::ErrorCode>::Err(move _902);
        StorageDead(_902);
        StorageDead(_879);
        goto -> bb385;
    }

    bb385: {
        StorageDead(_871);
        _869 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _870) -> [return: bb386, unwind: bb621];
    }

    bb386: {
        StorageDead(_870);
        _903 = discriminant(_869);
        switchInt(move _903) -> [0: bb387, 1: bb388, otherwise: bb4];
    }

    bb387: {
        StorageLive(_907);
        _907 = ((_869 as Continue).0: ());
        _868 = _907;
        StorageDead(_907);
        StorageDead(_869);
        StorageDead(_868);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        _1352 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _1353 = deref_copy ((*_1352).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1453 = (((_1353.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _914 = &(*_1453);
        _913 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _914) -> [return: bb390, unwind: bb621];
    }

    bb388: {
        StorageLive(_904);
        _904 = ((_869 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_906);
        _906 = _904;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _906) -> [return: bb389, unwind: bb621];
    }

    bb389: {
        StorageDead(_906);
        StorageDead(_904);
        StorageDead(_869);
        StorageDead(_868);
        goto -> bb574;
    }

    bb390: {
        _912 = &_913;
        StorageDead(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        _917 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _916 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _917, const 8_usize) -> [return: bb391, unwind: bb621];
    }

    bb391: {
        StorageDead(_917);
        _915 = &((*_916).0: anchor_lang::prelude::Pubkey);
        _911 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _912, move _915) -> [return: bb392, unwind: bb621];
    }

    bb392: {
        switchInt(move _911) -> [0: bb394, otherwise: bb393];
    }

    bb393: {
        StorageDead(_916);
        StorageDead(_915);
        StorageDead(_913);
        StorageDead(_912);
        StorageLive(_918);
        _918 = ();
        _910 = std::result::Result::<(), error::ErrorCode>::Ok(move _918);
        StorageDead(_918);
        goto -> bb402;
    }

    bb394: {
        StorageDead(_916);
        StorageDead(_915);
        StorageDead(_913);
        StorageDead(_912);
        StorageLive(_919);
        _919 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        _1302 = const _;
        _930 = &(*_1302);
        _929 = &(*_930);
        _928 = move _929 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_929);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        StorageLive(_936);
        StorageLive(_937);
        StorageLive(_938);
        _938 = &_919;
        _937 = &(*_938);
        _936 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _937) -> [return: bb395, unwind: bb621];
    }

    bb395: {
        StorageDead(_937);
        _935 = [move _936];
        StorageDead(_936);
        _934 = &_935;
        _933 = &(*_934);
        _932 = move _933 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_933);
        _927 = Arguments::<'_>::new_v1(move _928, move _932) -> [return: bb396, unwind: bb621];
    }

    bb396: {
        StorageDead(_932);
        StorageDead(_928);
        _926 = format(move _927) -> [return: bb397, unwind: bb621];
    }

    bb397: {
        StorageDead(_927);
        StorageDead(_938);
        StorageDead(_935);
        StorageDead(_934);
        StorageDead(_930);
        _925 = move _926;
        StorageDead(_926);
        _924 = &_925;
        _923 = &(*_924);
        _922 = <String as Deref>::deref(move _923) -> [return: bb398, unwind: bb613];
    }

    bb398: {
        _921 = &(*_922);
        StorageDead(_923);
        _920 = solana_program::log::sol_log(move _921) -> [return: bb399, unwind: bb613];
    }

    bb399: {
        StorageDead(_921);
        drop(_925) -> [return: bb400, unwind: bb621];
    }

    bb400: {
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_922);
        StorageDead(_920);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        _941 = const "the liability_token_account passed to SwapBegin and End must match";
        _940 = &(*_941);
        _939 = solana_program::log::sol_log(move _940) -> [return: bb401, unwind: bb621];
    }

    bb401: {
        StorageDead(_940);
        StorageDead(_941);
        StorageDead(_939);
        StorageLive(_942);
        _942 = _919;
        _910 = std::result::Result::<(), error::ErrorCode>::Err(move _942);
        StorageDead(_942);
        StorageDead(_919);
        goto -> bb402;
    }

    bb402: {
        StorageDead(_911);
        _909 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _910) -> [return: bb403, unwind: bb621];
    }

    bb403: {
        StorageDead(_910);
        _943 = discriminant(_909);
        switchInt(move _943) -> [0: bb404, 1: bb405, otherwise: bb4];
    }

    bb404: {
        StorageLive(_947);
        _947 = ((_909 as Continue).0: ());
        _908 = _947;
        StorageDead(_947);
        StorageDead(_909);
        StorageDead(_908);
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        _1354 = deref_copy (_1.1: &mut instructions::keeper::LiquidateSpotWithSwap<'_>);
        _1355 = deref_copy ((*_1354).9: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1454 = (((_1355.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _954 = &(*_1454);
        _953 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _954) -> [return: bb407, unwind: bb621];
    }

    bb405: {
        StorageLive(_944);
        _944 = ((_909 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_946);
        _946 = _944;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _946) -> [return: bb406, unwind: bb621];
    }

    bb406: {
        StorageDead(_946);
        StorageDead(_944);
        StorageDead(_909);
        StorageDead(_908);
        goto -> bb574;
    }

    bb407: {
        _952 = &_953;
        StorageDead(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        _957 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _956 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _957, const 9_usize) -> [return: bb408, unwind: bb621];
    }

    bb408: {
        StorageDead(_957);
        _955 = &((*_956).0: anchor_lang::prelude::Pubkey);
        _951 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _952, move _955) -> [return: bb409, unwind: bb621];
    }

    bb409: {
        switchInt(move _951) -> [0: bb411, otherwise: bb410];
    }

    bb410: {
        StorageDead(_956);
        StorageDead(_955);
        StorageDead(_953);
        StorageDead(_952);
        StorageLive(_958);
        _958 = ();
        _950 = std::result::Result::<(), error::ErrorCode>::Ok(move _958);
        StorageDead(_958);
        goto -> bb419;
    }

    bb411: {
        StorageDead(_956);
        StorageDead(_955);
        StorageDead(_953);
        StorageDead(_952);
        StorageLive(_959);
        _959 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        StorageLive(_964);
        StorageLive(_965);
        StorageLive(_966);
        StorageLive(_967);
        StorageLive(_968);
        StorageLive(_969);
        StorageLive(_970);
        _1301 = const _;
        _970 = &(*_1301);
        _969 = &(*_970);
        _968 = move _969 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_969);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        StorageLive(_975);
        StorageLive(_976);
        StorageLive(_977);
        StorageLive(_978);
        _978 = &_959;
        _977 = &(*_978);
        _976 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _977) -> [return: bb412, unwind: bb621];
    }

    bb412: {
        StorageDead(_977);
        _975 = [move _976];
        StorageDead(_976);
        _974 = &_975;
        _973 = &(*_974);
        _972 = move _973 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_973);
        _967 = Arguments::<'_>::new_v1(move _968, move _972) -> [return: bb413, unwind: bb621];
    }

    bb413: {
        StorageDead(_972);
        StorageDead(_968);
        _966 = format(move _967) -> [return: bb414, unwind: bb621];
    }

    bb414: {
        StorageDead(_967);
        StorageDead(_978);
        StorageDead(_975);
        StorageDead(_974);
        StorageDead(_970);
        _965 = move _966;
        StorageDead(_966);
        _964 = &_965;
        _963 = &(*_964);
        _962 = <String as Deref>::deref(move _963) -> [return: bb415, unwind: bb612];
    }

    bb415: {
        _961 = &(*_962);
        StorageDead(_963);
        _960 = solana_program::log::sol_log(move _961) -> [return: bb416, unwind: bb612];
    }

    bb416: {
        StorageDead(_961);
        drop(_965) -> [return: bb417, unwind: bb621];
    }

    bb417: {
        StorageDead(_965);
        StorageDead(_964);
        StorageDead(_962);
        StorageDead(_960);
        StorageLive(_979);
        StorageLive(_980);
        StorageLive(_981);
        _981 = const "the asset_token_account passed to SwapBegin and End must match";
        _980 = &(*_981);
        _979 = solana_program::log::sol_log(move _980) -> [return: bb418, unwind: bb621];
    }

    bb418: {
        StorageDead(_980);
        StorageDead(_981);
        StorageDead(_979);
        StorageLive(_982);
        _982 = _959;
        _950 = std::result::Result::<(), error::ErrorCode>::Err(move _982);
        StorageDead(_982);
        StorageDead(_959);
        goto -> bb419;
    }

    bb419: {
        StorageDead(_951);
        _949 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _950) -> [return: bb420, unwind: bb621];
    }

    bb420: {
        StorageDead(_950);
        _983 = discriminant(_949);
        switchInt(move _983) -> [0: bb421, 1: bb422, otherwise: bb4];
    }

    bb421: {
        StorageLive(_987);
        _987 = ((_949 as Continue).0: ());
        _948 = _987;
        StorageDead(_987);
        StorageDead(_949);
        StorageDead(_948);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        _1356 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _993 = &(*_1356);
        _992 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::len(move _993) -> [return: bb424, unwind: bb621];
    }

    bb422: {
        StorageLive(_984);
        _984 = ((_949 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_986);
        _986 = _984;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _986) -> [return: bb423, unwind: bb621];
    }

    bb423: {
        StorageDead(_986);
        StorageDead(_984);
        StorageDead(_949);
        StorageDead(_948);
        goto -> bb574;
    }

    bb424: {
        StorageDead(_993);
        StorageLive(_994);
        StorageLive(_995);
        StorageLive(_996);
        _996 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _995 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _996) -> [return: bb425, unwind: bb621];
    }

    bb425: {
        StorageDead(_996);
        _997 = CheckedSub(_995, const 13_usize);
        assert(!move (_997.1: bool), "attempt to compute `{} - {}`, which would overflow", move _995, const 13_usize) -> [success: bb426, unwind: bb621];
    }

    bb426: {
        _994 = move (_997.0: usize);
        StorageDead(_995);
        _991 = Eq(move _992, move _994);
        switchInt(move _991) -> [0: bb428, otherwise: bb427];
    }

    bb427: {
        StorageDead(_994);
        StorageDead(_992);
        StorageLive(_998);
        _998 = ();
        _990 = std::result::Result::<(), error::ErrorCode>::Ok(move _998);
        StorageDead(_998);
        goto -> bb436;
    }

    bb428: {
        StorageDead(_994);
        StorageDead(_992);
        StorageLive(_999);
        _999 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        _1300 = const _;
        _1010 = &(*_1300);
        _1009 = &(*_1010);
        _1008 = move _1009 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1009);
        StorageLive(_1012);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        StorageLive(_1017);
        StorageLive(_1018);
        _1018 = &_999;
        _1017 = &(*_1018);
        _1016 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1017) -> [return: bb429, unwind: bb621];
    }

    bb429: {
        StorageDead(_1017);
        _1015 = [move _1016];
        StorageDead(_1016);
        _1014 = &_1015;
        _1013 = &(*_1014);
        _1012 = move _1013 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1013);
        _1007 = Arguments::<'_>::new_v1(move _1008, move _1012) -> [return: bb430, unwind: bb621];
    }

    bb430: {
        StorageDead(_1012);
        StorageDead(_1008);
        _1006 = format(move _1007) -> [return: bb431, unwind: bb621];
    }

    bb431: {
        StorageDead(_1007);
        StorageDead(_1018);
        StorageDead(_1015);
        StorageDead(_1014);
        StorageDead(_1010);
        _1005 = move _1006;
        StorageDead(_1006);
        _1004 = &_1005;
        _1003 = &(*_1004);
        _1002 = <String as Deref>::deref(move _1003) -> [return: bb432, unwind: bb611];
    }

    bb432: {
        _1001 = &(*_1002);
        StorageDead(_1003);
        _1000 = solana_program::log::sol_log(move _1001) -> [return: bb433, unwind: bb611];
    }

    bb433: {
        StorageDead(_1001);
        drop(_1005) -> [return: bb434, unwind: bb621];
    }

    bb434: {
        StorageDead(_1005);
        StorageDead(_1004);
        StorageDead(_1002);
        StorageDead(_1000);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        _1021 = const "begin and end ix must have the same number of accounts";
        _1020 = &(*_1021);
        _1019 = solana_program::log::sol_log(move _1020) -> [return: bb435, unwind: bb621];
    }

    bb435: {
        StorageDead(_1020);
        StorageDead(_1021);
        StorageDead(_1019);
        StorageLive(_1022);
        _1022 = _999;
        _990 = std::result::Result::<(), error::ErrorCode>::Err(move _1022);
        StorageDead(_1022);
        StorageDead(_999);
        goto -> bb436;
    }

    bb436: {
        StorageDead(_991);
        _989 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _990) -> [return: bb437, unwind: bb621];
    }

    bb437: {
        StorageDead(_990);
        _1023 = discriminant(_989);
        switchInt(move _1023) -> [0: bb438, 1: bb439, otherwise: bb4];
    }

    bb438: {
        StorageLive(_1027);
        _1027 = ((_989 as Continue).0: ());
        _988 = _1027;
        StorageDead(_1027);
        StorageDead(_989);
        StorageDead(_988);
        StorageLive(_1028);
        StorageLive(_1029);
        StorageLive(_1030);
        StorageLive(_1031);
        _1031 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _1030 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _1031) -> [return: bb441, unwind: bb621];
    }

    bb439: {
        StorageLive(_1024);
        _1024 = ((_989 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1026);
        _1026 = _1024;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1026) -> [return: bb440, unwind: bb621];
    }

    bb440: {
        StorageDead(_1026);
        StorageDead(_1024);
        StorageDead(_989);
        StorageDead(_988);
        goto -> bb574;
    }

    bb441: {
        StorageDead(_1031);
        _1029 = std::ops::Range::<usize> { start: const 13_usize, end: move _1030 };
        StorageDead(_1030);
        _1028 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _1029) -> [return: bb442, unwind: bb621];
    }

    bb442: {
        StorageDead(_1029);
        StorageLive(_1032);
        _1032 = move _1028;
        goto -> bb443;
    }

    bb443: {
        StorageLive(_1033);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        _1036 = &mut _1032;
        _1035 = &mut (*_1036);
        _1034 = <std::ops::Range<usize> as Iterator>::next(move _1035) -> [return: bb444, unwind: bb621];
    }

    bb444: {
        StorageDead(_1035);
        _1037 = discriminant(_1034);
        switchInt(move _1037) -> [0: bb446, 1: bb445, otherwise: bb4];
    }

    bb445: {
        StorageLive(_1039);
        _1039 = ((_1034 as Some).0: usize);
        StorageLive(_1040);
        StorageLive(_1041);
        StorageLive(_1042);
        StorageLive(_1043);
        StorageLive(_1044);
        StorageLive(_1045);
        StorageLive(_1046);
        _1046 = _1039;
        _1047 = CheckedSub(_1046, const 13_usize);
        assert(!move (_1047.1: bool), "attempt to compute `{} - {}`, which would overflow", move _1046, const 13_usize) -> [success: bb447, unwind: bb621];
    }

    bb446: {
        _629 = const ();
        StorageDead(_1036);
        StorageDead(_1034);
        StorageDead(_1033);
        StorageDead(_1032);
        StorageDead(_1028);
        StorageDead(_668);
        goto -> bb544;
    }

    bb447: {
        _1045 = move (_1047.0: usize);
        StorageDead(_1046);
        _1357 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1048 = Len((*_1357));
        _1049 = Lt(_1045, _1048);
        assert(move _1049, "index out of bounds: the length is {} but the index is {}", move _1048, _1045) -> [success: bb448, unwind: bb621];
    }

    bb448: {
        _1358 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1359 = deref_copy ((*_1358)[_1045].0: &anchor_lang::prelude::Pubkey);
        _1044 = &(*_1359);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        _1052 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        StorageLive(_1053);
        _1053 = _1039;
        _1051 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _1052, move _1053) -> [return: bb449, unwind: bb621];
    }

    bb449: {
        StorageDead(_1053);
        StorageDead(_1052);
        _1050 = &((*_1051).0: anchor_lang::prelude::Pubkey);
        _1043 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1044, move _1050) -> [return: bb450, unwind: bb621];
    }

    bb450: {
        switchInt(move _1043) -> [0: bb452, otherwise: bb451];
    }

    bb451: {
        StorageDead(_1051);
        StorageDead(_1050);
        StorageDead(_1045);
        StorageDead(_1044);
        StorageLive(_1054);
        _1054 = ();
        _1042 = std::result::Result::<(), error::ErrorCode>::Ok(move _1054);
        StorageDead(_1054);
        goto -> bb470;
    }

    bb452: {
        StorageDead(_1051);
        StorageDead(_1050);
        StorageDead(_1045);
        StorageDead(_1044);
        StorageLive(_1055);
        _1055 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_1056);
        StorageLive(_1057);
        StorageLive(_1058);
        StorageLive(_1059);
        StorageLive(_1060);
        StorageLive(_1061);
        StorageLive(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        StorageLive(_1066);
        _1299 = const _;
        _1066 = &(*_1299);
        _1065 = &(*_1066);
        _1064 = move _1065 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1065);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        _1074 = &_1055;
        _1073 = &(*_1074);
        _1072 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1073) -> [return: bb453, unwind: bb621];
    }

    bb453: {
        StorageDead(_1073);
        _1071 = [move _1072];
        StorageDead(_1072);
        _1070 = &_1071;
        _1069 = &(*_1070);
        _1068 = move _1069 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1069);
        _1063 = Arguments::<'_>::new_v1(move _1064, move _1068) -> [return: bb454, unwind: bb621];
    }

    bb454: {
        StorageDead(_1068);
        StorageDead(_1064);
        _1062 = format(move _1063) -> [return: bb455, unwind: bb621];
    }

    bb455: {
        StorageDead(_1063);
        StorageDead(_1074);
        StorageDead(_1071);
        StorageDead(_1070);
        StorageDead(_1066);
        _1061 = move _1062;
        StorageDead(_1062);
        _1060 = &_1061;
        _1059 = &(*_1060);
        _1058 = <String as Deref>::deref(move _1059) -> [return: bb456, unwind: bb610];
    }

    bb456: {
        _1057 = &(*_1058);
        StorageDead(_1059);
        _1056 = solana_program::log::sol_log(move _1057) -> [return: bb457, unwind: bb610];
    }

    bb457: {
        StorageDead(_1057);
        drop(_1061) -> [return: bb458, unwind: bb621];
    }

    bb458: {
        StorageDead(_1061);
        StorageDead(_1060);
        StorageDead(_1058);
        StorageDead(_1056);
        StorageLive(_1075);
        StorageLive(_1076);
        StorageLive(_1077);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        _1298 = const _;
        _1085 = &(*_1298);
        _1084 = &(*_1085);
        _1083 = move _1084 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1084);
        StorageLive(_1087);
        StorageLive(_1088);
        StorageLive(_1089);
        StorageLive(_1090);
        StorageLive(_1091);
        StorageLive(_1092);
        StorageLive(_1093);
        _1093 = &_1039;
        _1092 = &(*_1093);
        _1091 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _1092) -> [return: bb459, unwind: bb621];
    }

    bb459: {
        StorageDead(_1092);
        StorageLive(_1094);
        StorageLive(_1095);
        StorageLive(_1096);
        StorageLive(_1097);
        StorageLive(_1098);
        _1098 = _1039;
        _1099 = CheckedSub(_1098, const 13_usize);
        assert(!move (_1099.1: bool), "attempt to compute `{} - {}`, which would overflow", move _1098, const 13_usize) -> [success: bb460, unwind: bb621];
    }

    bb460: {
        _1097 = move (_1099.0: usize);
        StorageDead(_1098);
        _1360 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1100 = Len((*_1360));
        _1101 = Lt(_1097, _1100);
        assert(move _1101, "index out of bounds: the length is {} but the index is {}", move _1100, _1097) -> [success: bb461, unwind: bb621];
    }

    bb461: {
        _1361 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1096 = &((*_1361)[_1097].0: &anchor_lang::prelude::Pubkey);
        _1095 = &(*_1096);
        _1094 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _1095) -> [return: bb462, unwind: bb621];
    }

    bb462: {
        StorageDead(_1095);
        StorageLive(_1102);
        StorageLive(_1103);
        StorageLive(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        _1106 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        StorageLive(_1107);
        _1107 = _1039;
        _1105 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _1106, move _1107) -> [return: bb463, unwind: bb621];
    }

    bb463: {
        StorageDead(_1107);
        StorageDead(_1106);
        _1104 = &((*_1105).0: anchor_lang::prelude::Pubkey);
        _1103 = &(*_1104);
        _1102 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _1103) -> [return: bb464, unwind: bb621];
    }

    bb464: {
        StorageDead(_1103);
        _1090 = [move _1091, move _1094, move _1102];
        StorageDead(_1102);
        StorageDead(_1094);
        StorageDead(_1091);
        _1089 = &_1090;
        _1088 = &(*_1089);
        _1087 = move _1088 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1088);
        _1082 = Arguments::<'_>::new_v1(move _1083, move _1087) -> [return: bb465, unwind: bb621];
    }

    bb465: {
        StorageDead(_1087);
        StorageDead(_1083);
        _1081 = format(move _1082) -> [return: bb466, unwind: bb621];
    }

    bb466: {
        StorageDead(_1082);
        StorageDead(_1105);
        StorageDead(_1104);
        StorageDead(_1097);
        StorageDead(_1096);
        StorageDead(_1093);
        StorageDead(_1090);
        StorageDead(_1089);
        StorageDead(_1085);
        _1080 = move _1081;
        StorageDead(_1081);
        _1079 = &_1080;
        _1078 = &(*_1079);
        _1077 = <String as Deref>::deref(move _1078) -> [return: bb467, unwind: bb609];
    }

    bb467: {
        _1076 = &(*_1077);
        StorageDead(_1078);
        _1075 = solana_program::log::sol_log(move _1076) -> [return: bb468, unwind: bb609];
    }

    bb468: {
        StorageDead(_1076);
        drop(_1080) -> [return: bb469, unwind: bb621];
    }

    bb469: {
        StorageDead(_1080);
        StorageDead(_1079);
        StorageDead(_1077);
        StorageDead(_1075);
        StorageLive(_1108);
        _1108 = _1055;
        _1042 = std::result::Result::<(), error::ErrorCode>::Err(move _1108);
        StorageDead(_1108);
        StorageDead(_1055);
        goto -> bb470;
    }

    bb470: {
        StorageDead(_1043);
        _1041 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1042) -> [return: bb471, unwind: bb621];
    }

    bb471: {
        StorageDead(_1042);
        _1109 = discriminant(_1041);
        switchInt(move _1109) -> [0: bb472, 1: bb473, otherwise: bb4];
    }

    bb472: {
        StorageLive(_1113);
        _1113 = ((_1041 as Continue).0: ());
        _1040 = _1113;
        StorageDead(_1113);
        StorageDead(_1041);
        StorageDead(_1040);
        _1033 = const ();
        StorageDead(_1039);
        StorageDead(_1036);
        StorageDead(_1034);
        StorageDead(_1033);
        _616 = const ();
        goto -> bb443;
    }

    bb473: {
        StorageLive(_1110);
        _1110 = ((_1041 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1112);
        _1112 = _1110;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1112) -> [return: bb474, unwind: bb621];
    }

    bb474: {
        StorageDead(_1112);
        StorageDead(_1110);
        StorageDead(_1041);
        StorageDead(_1040);
        StorageDead(_1039);
        StorageDead(_1036);
        StorageDead(_1034);
        StorageDead(_1033);
        StorageDead(_1032);
        StorageDead(_1028);
        goto -> bb574;
    }

    bb475: {
        StorageDead(_633);
        StorageDead(_632);
        StorageDead(_631);
        StorageLive(_1114);
        _1114 = _614;
        switchInt(move _1114) -> [0: bb498, otherwise: bb476];
    }

    bb476: {
        StorageLive(_1115);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        StorageLive(_1119);
        _1119 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _1118 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _1119) -> [return: bb477, unwind: bb621];
    }

    bb477: {
        _1117 = &(*_1118);
        StorageDead(_1119);
        _1116 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::iter(move _1117) -> [return: bb478, unwind: bb621];
    }

    bb478: {
        StorageDead(_1117);
        _1115 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as IntoIterator>::into_iter(move _1116) -> [return: bb479, unwind: bb621];
    }

    bb479: {
        StorageDead(_1116);
        StorageLive(_1120);
        _1120 = move _1115;
        goto -> bb480;
    }

    bb480: {
        StorageLive(_1121);
        StorageLive(_1122);
        StorageLive(_1123);
        StorageLive(_1124);
        _1124 = &mut _1120;
        _1123 = &mut (*_1124);
        _1122 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as Iterator>::next(move _1123) -> [return: bb481, unwind: bb621];
    }

    bb481: {
        StorageDead(_1123);
        _1125 = discriminant(_1122);
        switchInt(move _1125) -> [0: bb483, 1: bb482, otherwise: bb4];
    }

    bb482: {
        StorageLive(_1127);
        _1127 = ((_1122 as Some).0: &anchor_lang::prelude::AccountMeta);
        StorageLive(_1128);
        StorageLive(_1129);
        StorageLive(_1130);
        StorageLive(_1131);
        StorageLive(_1132);
        _1132 = ((*_1127).2: bool);
        _1131 = Eq(move _1132, const false);
        switchInt(move _1131) -> [0: bb485, otherwise: bb484];
    }

    bb483: {
        _629 = const ();
        StorageDead(_1124);
        StorageDead(_1122);
        StorageDead(_1121);
        StorageDead(_1120);
        StorageDead(_1118);
        StorageDead(_1115);
        goto -> bb543;
    }

    bb484: {
        StorageDead(_1132);
        StorageLive(_1133);
        _1133 = ();
        _1130 = std::result::Result::<(), error::ErrorCode>::Ok(move _1133);
        StorageDead(_1133);
        goto -> bb493;
    }

    bb485: {
        StorageDead(_1132);
        StorageLive(_1134);
        _1134 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_1135);
        StorageLive(_1136);
        StorageLive(_1137);
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        StorageLive(_1141);
        StorageLive(_1142);
        StorageLive(_1143);
        StorageLive(_1144);
        StorageLive(_1145);
        _1310 = const _;
        _1145 = &(*_1310);
        _1144 = &(*_1145);
        _1143 = move _1144 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1144);
        StorageLive(_1147);
        StorageLive(_1148);
        StorageLive(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        StorageLive(_1152);
        StorageLive(_1153);
        _1153 = &_1134;
        _1152 = &(*_1153);
        _1151 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1152) -> [return: bb486, unwind: bb621];
    }

    bb486: {
        StorageDead(_1152);
        _1150 = [move _1151];
        StorageDead(_1151);
        _1149 = &_1150;
        _1148 = &(*_1149);
        _1147 = move _1148 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1148);
        _1142 = Arguments::<'_>::new_v1(move _1143, move _1147) -> [return: bb487, unwind: bb621];
    }

    bb487: {
        StorageDead(_1147);
        StorageDead(_1143);
        _1141 = format(move _1142) -> [return: bb488, unwind: bb621];
    }

    bb488: {
        StorageDead(_1142);
        StorageDead(_1153);
        StorageDead(_1150);
        StorageDead(_1149);
        StorageDead(_1145);
        _1140 = move _1141;
        StorageDead(_1141);
        _1139 = &_1140;
        _1138 = &(*_1139);
        _1137 = <String as Deref>::deref(move _1138) -> [return: bb489, unwind: bb608];
    }

    bb489: {
        _1136 = &(*_1137);
        StorageDead(_1138);
        _1135 = solana_program::log::sol_log(move _1136) -> [return: bb490, unwind: bb608];
    }

    bb490: {
        StorageDead(_1136);
        drop(_1140) -> [return: bb491, unwind: bb621];
    }

    bb491: {
        StorageDead(_1140);
        StorageDead(_1139);
        StorageDead(_1137);
        StorageDead(_1135);
        StorageLive(_1154);
        StorageLive(_1155);
        StorageLive(_1156);
        _1156 = const "instructions after swap end must not have writable accounts";
        _1155 = &(*_1156);
        _1154 = solana_program::log::sol_log(move _1155) -> [return: bb492, unwind: bb621];
    }

    bb492: {
        StorageDead(_1155);
        StorageDead(_1156);
        StorageDead(_1154);
        StorageLive(_1157);
        _1157 = _1134;
        _1130 = std::result::Result::<(), error::ErrorCode>::Err(move _1157);
        StorageDead(_1157);
        StorageDead(_1134);
        goto -> bb493;
    }

    bb493: {
        StorageDead(_1131);
        _1129 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1130) -> [return: bb494, unwind: bb621];
    }

    bb494: {
        StorageDead(_1130);
        _1158 = discriminant(_1129);
        switchInt(move _1158) -> [0: bb495, 1: bb496, otherwise: bb4];
    }

    bb495: {
        StorageLive(_1162);
        _1162 = ((_1129 as Continue).0: ());
        _1128 = _1162;
        StorageDead(_1162);
        StorageDead(_1129);
        StorageDead(_1128);
        _1121 = const ();
        StorageDead(_1127);
        StorageDead(_1124);
        StorageDead(_1122);
        StorageDead(_1121);
        _616 = const ();
        goto -> bb480;
    }

    bb496: {
        StorageLive(_1159);
        _1159 = ((_1129 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1161);
        _1161 = _1159;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1161) -> [return: bb497, unwind: bb621];
    }

    bb497: {
        StorageDead(_1161);
        StorageDead(_1159);
        StorageDead(_1129);
        StorageDead(_1128);
        StorageDead(_1127);
        StorageDead(_1124);
        StorageDead(_1122);
        StorageDead(_1121);
        StorageDead(_1120);
        StorageDead(_1118);
        StorageDead(_1115);
        goto -> bb573;
    }

    bb498: {
        StorageLive(_1163);
        StorageLive(_1164);
        StorageLive(_1165);
        _1166 = SizeOf([anchor_lang::prelude::Pubkey; 5]);
        _1167 = AlignOf([anchor_lang::prelude::Pubkey; 5]);
        _1168 = alloc::alloc::exchange_malloc(move _1166, move _1167) -> [return: bb499, unwind: bb621];
    }

    bb499: {
        StorageLive(_1169);
        _1169 = ShallowInitBox(move _1168, [anchor_lang::prelude::Pubkey; 5]);
        StorageLive(_1170);
        _1170 = serum_program::id() -> [return: bb500, unwind: bb607];
    }

    bb500: {
        StorageLive(_1171);
        _1171 = <AssociatedToken as anchor_lang::Id>::id() -> [return: bb501, unwind: bb607];
    }

    bb501: {
        _1455 = (((_1169.0: std::ptr::Unique<[anchor_lang::prelude::Pubkey; 5]>).0: std::ptr::NonNull<[anchor_lang::prelude::Pubkey; 5]>).0: *const [anchor_lang::prelude::Pubkey; 5]);
        _1456 = _1455 as *const () (PtrToPtr);
        _1457 = _1456 as usize (Transmute);
        _1458 = AlignOf([anchor_lang::prelude::Pubkey; 5]);
        _1459 = Sub(_1458, const 1_usize);
        _1460 = BitAnd(_1457, _1459);
        _1461 = Eq(_1460, const 0_usize);
        assert(_1461, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1458, _1457) -> [success: bb668, unwind unreachable];
    }

    bb502: {
        StorageDead(_1164);
        StorageLive(_1172);
        StorageLive(_1173);
        StorageLive(_1174);
        StorageLive(_1175);
        StorageLive(_1176);
        StorageLive(_1177);
        StorageLive(_1178);
        _1178 = &_1163;
        _1177 = <Vec<anchor_lang::prelude::Pubkey> as Deref>::deref(move _1178) -> [return: bb503, unwind: bb606];
    }

    bb503: {
        _1176 = &(*_1177);
        StorageDead(_1178);
        StorageLive(_1179);
        StorageLive(_1180);
        _1180 = &(_617.0: anchor_lang::prelude::Pubkey);
        _1179 = &(*_1180);
        _1175 = core::slice::<impl [anchor_lang::prelude::Pubkey]>::contains(move _1176, move _1179) -> [return: bb504, unwind: bb606];
    }

    bb504: {
        switchInt(move _1175) -> [0: bb506, otherwise: bb505];
    }

    bb505: {
        StorageDead(_1180);
        StorageDead(_1179);
        StorageDead(_1177);
        StorageDead(_1176);
        StorageLive(_1181);
        _1181 = ();
        _1174 = std::result::Result::<(), error::ErrorCode>::Ok(move _1181);
        StorageDead(_1181);
        goto -> bb514;
    }

    bb506: {
        StorageDead(_1180);
        StorageDead(_1179);
        StorageDead(_1177);
        StorageDead(_1176);
        StorageLive(_1182);
        _1182 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_1183);
        StorageLive(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        StorageLive(_1187);
        StorageLive(_1188);
        StorageLive(_1189);
        StorageLive(_1190);
        StorageLive(_1191);
        StorageLive(_1192);
        StorageLive(_1193);
        _1312 = const _;
        _1193 = &(*_1312);
        _1192 = &(*_1193);
        _1191 = move _1192 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1192);
        StorageLive(_1195);
        StorageLive(_1196);
        StorageLive(_1197);
        StorageLive(_1198);
        StorageLive(_1199);
        StorageLive(_1200);
        StorageLive(_1201);
        _1201 = &_1182;
        _1200 = &(*_1201);
        _1199 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1200) -> [return: bb507, unwind: bb606];
    }

    bb507: {
        StorageDead(_1200);
        _1198 = [move _1199];
        StorageDead(_1199);
        _1197 = &_1198;
        _1196 = &(*_1197);
        _1195 = move _1196 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1196);
        _1190 = Arguments::<'_>::new_v1(move _1191, move _1195) -> [return: bb508, unwind: bb606];
    }

    bb508: {
        StorageDead(_1195);
        StorageDead(_1191);
        _1189 = format(move _1190) -> [return: bb509, unwind: bb606];
    }

    bb509: {
        StorageDead(_1190);
        StorageDead(_1201);
        StorageDead(_1198);
        StorageDead(_1197);
        StorageDead(_1193);
        _1188 = move _1189;
        StorageDead(_1189);
        _1187 = &_1188;
        _1186 = &(*_1187);
        _1185 = <String as Deref>::deref(move _1186) -> [return: bb510, unwind: bb605];
    }

    bb510: {
        _1184 = &(*_1185);
        StorageDead(_1186);
        _1183 = solana_program::log::sol_log(move _1184) -> [return: bb511, unwind: bb605];
    }

    bb511: {
        StorageDead(_1184);
        drop(_1188) -> [return: bb512, unwind: bb606];
    }

    bb512: {
        StorageDead(_1188);
        StorageDead(_1187);
        StorageDead(_1185);
        StorageDead(_1183);
        StorageLive(_1202);
        StorageLive(_1203);
        StorageLive(_1204);
        _1204 = const "only allowed to pass in ixs to token, openbook, and Jupiter v3/v4/v6 programs";
        _1203 = &(*_1204);
        _1202 = solana_program::log::sol_log(move _1203) -> [return: bb513, unwind: bb606];
    }

    bb513: {
        StorageDead(_1203);
        StorageDead(_1204);
        StorageDead(_1202);
        StorageLive(_1205);
        _1205 = _1182;
        _1174 = std::result::Result::<(), error::ErrorCode>::Err(move _1205);
        StorageDead(_1205);
        StorageDead(_1182);
        goto -> bb514;
    }

    bb514: {
        StorageDead(_1175);
        _1173 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1174) -> [return: bb515, unwind: bb606];
    }

    bb515: {
        StorageDead(_1174);
        _1206 = discriminant(_1173);
        switchInt(move _1206) -> [0: bb516, 1: bb517, otherwise: bb4];
    }

    bb516: {
        StorageLive(_1210);
        _1210 = ((_1173 as Continue).0: ());
        _1172 = _1210;
        StorageDead(_1210);
        StorageDead(_1173);
        StorageDead(_1172);
        StorageLive(_1211);
        StorageLive(_1212);
        StorageLive(_1213);
        StorageLive(_1214);
        StorageLive(_1215);
        _1215 = &(_617.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _1214 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _1215) -> [return: bb519, unwind: bb606];
    }

    bb517: {
        StorageLive(_1207);
        _1207 = ((_1173 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1209);
        _1209 = _1207;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1209) -> [return: bb518, unwind: bb606];
    }

    bb518: {
        StorageDead(_1209);
        StorageDead(_1207);
        StorageDead(_1173);
        StorageDead(_1172);
        goto -> bb571;
    }

    bb519: {
        _1213 = &(*_1214);
        StorageDead(_1215);
        _1212 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::iter(move _1213) -> [return: bb520, unwind: bb606];
    }

    bb520: {
        StorageDead(_1213);
        _1211 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as IntoIterator>::into_iter(move _1212) -> [return: bb521, unwind: bb606];
    }

    bb521: {
        StorageDead(_1212);
        StorageLive(_1216);
        _1216 = move _1211;
        goto -> bb522;
    }

    bb522: {
        StorageLive(_1217);
        StorageLive(_1218);
        StorageLive(_1219);
        StorageLive(_1220);
        _1220 = &mut _1216;
        _1219 = &mut (*_1220);
        _1218 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as Iterator>::next(move _1219) -> [return: bb523, unwind: bb606];
    }

    bb523: {
        StorageDead(_1219);
        _1221 = discriminant(_1218);
        switchInt(move _1221) -> [0: bb525, 1: bb524, otherwise: bb4];
    }

    bb524: {
        StorageLive(_1223);
        _1223 = ((_1218 as Some).0: &anchor_lang::prelude::AccountMeta);
        StorageLive(_1224);
        StorageLive(_1225);
        StorageLive(_1226);
        StorageLive(_1227);
        StorageLive(_1228);
        _1228 = &((*_1223).0: anchor_lang::prelude::Pubkey);
        StorageLive(_1229);
        StorageLive(_1230);
        _1230 = id() -> [return: bb526, unwind: bb606];
    }

    bb525: {
        _629 = const ();
        StorageDead(_1220);
        StorageDead(_1218);
        StorageDead(_1217);
        StorageDead(_1216);
        StorageDead(_1214);
        StorageDead(_1211);
        drop(_1163) -> [return: bb542, unwind: bb621];
    }

    bb526: {
        _1229 = &_1230;
        _1227 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1228, move _1229) -> [return: bb527, unwind: bb606];
    }

    bb527: {
        switchInt(move _1227) -> [0: bb529, otherwise: bb528];
    }

    bb528: {
        StorageDead(_1230);
        StorageDead(_1229);
        StorageDead(_1228);
        StorageLive(_1231);
        _1231 = ();
        _1226 = std::result::Result::<(), error::ErrorCode>::Ok(move _1231);
        StorageDead(_1231);
        goto -> bb537;
    }

    bb529: {
        StorageDead(_1230);
        StorageDead(_1229);
        StorageDead(_1228);
        StorageLive(_1232);
        _1232 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_1233);
        StorageLive(_1234);
        StorageLive(_1235);
        StorageLive(_1236);
        StorageLive(_1237);
        StorageLive(_1238);
        StorageLive(_1239);
        StorageLive(_1240);
        StorageLive(_1241);
        StorageLive(_1242);
        StorageLive(_1243);
        _1311 = const _;
        _1243 = &(*_1311);
        _1242 = &(*_1243);
        _1241 = move _1242 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1242);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        StorageLive(_1248);
        StorageLive(_1249);
        StorageLive(_1250);
        StorageLive(_1251);
        _1251 = &_1232;
        _1250 = &(*_1251);
        _1249 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1250) -> [return: bb530, unwind: bb606];
    }

    bb530: {
        StorageDead(_1250);
        _1248 = [move _1249];
        StorageDead(_1249);
        _1247 = &_1248;
        _1246 = &(*_1247);
        _1245 = move _1246 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1246);
        _1240 = Arguments::<'_>::new_v1(move _1241, move _1245) -> [return: bb531, unwind: bb606];
    }

    bb531: {
        StorageDead(_1245);
        StorageDead(_1241);
        _1239 = format(move _1240) -> [return: bb532, unwind: bb606];
    }

    bb532: {
        StorageDead(_1240);
        StorageDead(_1251);
        StorageDead(_1248);
        StorageDead(_1247);
        StorageDead(_1243);
        _1238 = move _1239;
        StorageDead(_1239);
        _1237 = &_1238;
        _1236 = &(*_1237);
        _1235 = <String as Deref>::deref(move _1236) -> [return: bb533, unwind: bb604];
    }

    bb533: {
        _1234 = &(*_1235);
        StorageDead(_1236);
        _1233 = solana_program::log::sol_log(move _1234) -> [return: bb534, unwind: bb604];
    }

    bb534: {
        StorageDead(_1234);
        drop(_1238) -> [return: bb535, unwind: bb606];
    }

    bb535: {
        StorageDead(_1238);
        StorageDead(_1237);
        StorageDead(_1235);
        StorageDead(_1233);
        StorageLive(_1252);
        StorageLive(_1253);
        StorageLive(_1254);
        _1254 = const "instructions between begin and end must not be drift instructions";
        _1253 = &(*_1254);
        _1252 = solana_program::log::sol_log(move _1253) -> [return: bb536, unwind: bb606];
    }

    bb536: {
        StorageDead(_1253);
        StorageDead(_1254);
        StorageDead(_1252);
        StorageLive(_1255);
        _1255 = _1232;
        _1226 = std::result::Result::<(), error::ErrorCode>::Err(move _1255);
        StorageDead(_1255);
        StorageDead(_1232);
        goto -> bb537;
    }

    bb537: {
        StorageDead(_1227);
        _1225 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1226) -> [return: bb538, unwind: bb606];
    }

    bb538: {
        StorageDead(_1226);
        _1256 = discriminant(_1225);
        switchInt(move _1256) -> [0: bb539, 1: bb540, otherwise: bb4];
    }

    bb539: {
        StorageLive(_1260);
        _1260 = ((_1225 as Continue).0: ());
        _1224 = _1260;
        StorageDead(_1260);
        StorageDead(_1225);
        StorageDead(_1224);
        _1217 = const ();
        StorageDead(_1223);
        StorageDead(_1220);
        StorageDead(_1218);
        StorageDead(_1217);
        _616 = const ();
        goto -> bb522;
    }

    bb540: {
        StorageLive(_1257);
        _1257 = ((_1225 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1259);
        _1259 = _1257;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1259) -> [return: bb541, unwind: bb606];
    }

    bb541: {
        StorageDead(_1259);
        StorageDead(_1257);
        StorageDead(_1225);
        StorageDead(_1224);
        StorageDead(_1223);
        StorageDead(_1220);
        StorageDead(_1218);
        StorageDead(_1217);
        StorageDead(_1216);
        StorageDead(_1214);
        StorageDead(_1211);
        goto -> bb571;
    }

    bb542: {
        StorageDead(_1163);
        goto -> bb543;
    }

    bb543: {
        StorageDead(_1114);
        goto -> bb544;
    }

    bb544: {
        StorageDead(_630);
        StorageDead(_629);
        _1261 = CheckedAdd(_611, const 1_usize);
        assert(!move (_1261.1: bool), "attempt to compute `{} + {}`, which would overflow", _611, const 1_usize) -> [success: bb545, unwind: bb621];
    }

    bb545: {
        _611 = move (_1261.0: usize);
        _616 = const ();
        drop(_617) -> [return: bb546, unwind: bb623];
    }

    bb546: {
        StorageDead(_617);
        goto -> bb264;
    }

    bb547: {
        StorageLive(_1266);
        _1266 = ();
        _1264 = std::result::Result::<(), error::ErrorCode>::Ok(move _1266);
        StorageDead(_1266);
        goto -> bb556;
    }

    bb548: {
        StorageLive(_1267);
        _1267 = error::ErrorCode::InvalidLiquidateSpotWithSwap;
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        StorageLive(_1273);
        StorageLive(_1274);
        StorageLive(_1275);
        StorageLive(_1276);
        StorageLive(_1277);
        StorageLive(_1278);
        _1297 = const _;
        _1278 = &(*_1297);
        _1277 = &(*_1278);
        _1276 = move _1277 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1277);
        StorageLive(_1280);
        StorageLive(_1281);
        StorageLive(_1282);
        StorageLive(_1283);
        StorageLive(_1284);
        StorageLive(_1285);
        StorageLive(_1286);
        _1286 = &_1267;
        _1285 = &(*_1286);
        _1284 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1285) -> [return: bb549, unwind: bb623];
    }

    bb549: {
        StorageDead(_1285);
        _1283 = [move _1284];
        StorageDead(_1284);
        _1282 = &_1283;
        _1281 = &(*_1282);
        _1280 = move _1281 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1281);
        _1275 = Arguments::<'_>::new_v1(move _1276, move _1280) -> [return: bb550, unwind: bb623];
    }

    bb550: {
        StorageDead(_1280);
        StorageDead(_1276);
        _1274 = format(move _1275) -> [return: bb551, unwind: bb623];
    }

    bb551: {
        StorageDead(_1275);
        StorageDead(_1286);
        StorageDead(_1283);
        StorageDead(_1282);
        StorageDead(_1278);
        _1273 = move _1274;
        StorageDead(_1274);
        _1272 = &_1273;
        _1271 = &(*_1272);
        _1270 = <String as Deref>::deref(move _1271) -> [return: bb552, unwind: bb603];
    }

    bb552: {
        _1269 = &(*_1270);
        StorageDead(_1271);
        _1268 = solana_program::log::sol_log(move _1269) -> [return: bb553, unwind: bb603];
    }

    bb553: {
        StorageDead(_1269);
        drop(_1273) -> [return: bb554, unwind: bb623];
    }

    bb554: {
        StorageDead(_1273);
        StorageDead(_1272);
        StorageDead(_1270);
        StorageDead(_1268);
        StorageLive(_1287);
        StorageLive(_1288);
        StorageLive(_1289);
        _1289 = const "found no LiquidateSpotWithSwapEnd instruction in transaction";
        _1288 = &(*_1289);
        _1287 = solana_program::log::sol_log(move _1288) -> [return: bb555, unwind: bb623];
    }

    bb555: {
        StorageDead(_1288);
        StorageDead(_1289);
        StorageDead(_1287);
        StorageLive(_1290);
        _1290 = _1267;
        _1264 = std::result::Result::<(), error::ErrorCode>::Err(move _1290);
        StorageDead(_1290);
        StorageDead(_1267);
        goto -> bb556;
    }

    bb556: {
        StorageDead(_1265);
        _1263 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1264) -> [return: bb557, unwind: bb623];
    }

    bb557: {
        StorageDead(_1264);
        _1291 = discriminant(_1263);
        switchInt(move _1291) -> [0: bb558, 1: bb559, otherwise: bb4];
    }

    bb558: {
        StorageLive(_1295);
        _1295 = ((_1263 as Continue).0: ());
        _1262 = _1295;
        StorageDead(_1295);
        StorageDead(_1263);
        StorageDead(_1262);
        StorageLive(_1296);
        _1296 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _1296);
        StorageDead(_1296);
        StorageDead(_614);
        StorageDead(_611);
        drop(_565) -> [return: bb561, unwind: bb625];
    }

    bb559: {
        StorageLive(_1292);
        _1292 = ((_1263 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1294);
        _1294 = _1292;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1294) -> [return: bb560, unwind: bb623];
    }

    bb560: {
        StorageDead(_1294);
        StorageDead(_1292);
        StorageDead(_1263);
        StorageDead(_1262);
        goto -> bb577;
    }

    bb561: {
        StorageDead(_565);
        StorageDead(_555);
        StorageDead(_553);
        StorageDead(_487);
        StorageDead(_483);
        StorageDead(_475);
        StorageDead(_464);
        StorageDead(_463);
        drop(_452) -> [return: bb562, unwind: bb626];
    }

    bb562: {
        StorageDead(_452);
        drop(_441) -> [return: bb563, unwind: bb656];
    }

    bb563: {
        StorageDead(_441);
        StorageDead(_298);
        _1362 = const false;
        StorageDead(_246);
        StorageDead(_216);
        _1363 = const false;
        StorageDead(_164);
        StorageDead(_155);
        StorageDead(_146);
        drop(_116) -> [return: bb564, unwind: bb633];
    }

    bb564: {
        StorageDead(_116);
        drop(_115) -> [return: bb565, unwind: bb634];
    }

    bb565: {
        StorageDead(_115);
        drop(_114) -> [return: bb566, unwind: bb637];
    }

    bb566: {
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        drop(_99) -> [return: bb567, unwind: bb638];
    }

    bb567: {
        StorageDead(_99);
        StorageDead(_98);
        drop(_87) -> [return: bb568, unwind: bb639];
    }

    bb568: {
        StorageDead(_87);
        StorageDead(_86);
        drop(_75) -> [return: bb569, unwind: bb640];
    }

    bb569: {
        StorageDead(_75);
        StorageDead(_74);
        drop(_63) -> [return: bb570, unwind: bb642];
    }

    bb570: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb602;
    }

    bb571: {
        drop(_1163) -> [return: bb572, unwind: bb621];
    }

    bb572: {
        StorageDead(_1163);
        goto -> bb573;
    }

    bb573: {
        StorageDead(_1114);
        goto -> bb575;
    }

    bb574: {
        StorageDead(_668);
        goto -> bb575;
    }

    bb575: {
        StorageDead(_630);
        StorageDead(_629);
        drop(_617) -> [return: bb576, unwind: bb623];
    }

    bb576: {
        StorageDead(_617);
        StorageDead(_615);
        goto -> bb577;
    }

    bb577: {
        StorageDead(_614);
        StorageDead(_611);
        goto -> bb578;
    }

    bb578: {
        drop(_565) -> [return: bb579, unwind: bb625];
    }

    bb579: {
        StorageDead(_565);
        goto -> bb580;
    }

    bb580: {
        StorageDead(_555);
        StorageDead(_553);
        goto -> bb581;
    }

    bb581: {
        StorageDead(_487);
        StorageDead(_483);
        StorageDead(_475);
        StorageDead(_464);
        StorageDead(_463);
        drop(_452) -> [return: bb582, unwind: bb626];
    }

    bb582: {
        StorageDead(_452);
        drop(_441) -> [return: bb583, unwind: bb656];
    }

    bb583: {
        StorageDead(_441);
        goto -> bb584;
    }

    bb584: {
        StorageDead(_298);
        goto -> bb646;
    }

    bb585: {
        _1362 = const false;
        StorageDead(_246);
        goto -> bb586;
    }

    bb586: {
        StorageDead(_216);
        goto -> bb648;
    }

    bb587: {
        _1363 = const false;
        StorageDead(_164);
        goto -> bb588;
    }

    bb588: {
        StorageDead(_155);
        goto -> bb589;
    }

    bb589: {
        StorageDead(_146);
        drop(_116) -> [return: bb590, unwind: bb633];
    }

    bb590: {
        StorageDead(_116);
        drop(_115) -> [return: bb591, unwind: bb634];
    }

    bb591: {
        StorageDead(_115);
        drop(_114) -> [return: bb592, unwind: bb637];
    }

    bb592: {
        StorageDead(_114);
        goto -> bb595;
    }

    bb593: {
        StorageDead(_126);
        StorageDead(_125);
        drop(_123) -> [return: bb594, unwind: bb637];
    }

    bb594: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb595;
    }

    bb595: {
        StorageDead(_111);
        StorageDead(_110);
        drop(_99) -> [return: bb596, unwind: bb638];
    }

    bb596: {
        StorageDead(_99);
        StorageDead(_98);
        drop(_87) -> [return: bb597, unwind: bb639];
    }

    bb597: {
        StorageDead(_87);
        StorageDead(_86);
        drop(_75) -> [return: bb598, unwind: bb640];
    }

    bb598: {
        StorageDead(_75);
        StorageDead(_74);
        drop(_63) -> [return: bb599, unwind: bb642];
    }

    bb599: {
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb600;
    }

    bb600: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb601;
    }

    bb601: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb602;
    }

    bb602: {
        return;
    }

    bb603 (cleanup): {
        drop(_1273) -> [return: bb623, unwind terminate(cleanup)];
    }

    bb604 (cleanup): {
        drop(_1238) -> [return: bb606, unwind terminate(cleanup)];
    }

    bb605 (cleanup): {
        drop(_1188) -> [return: bb606, unwind terminate(cleanup)];
    }

    bb606 (cleanup): {
        drop(_1163) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb607 (cleanup): {
        drop(_1169) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb608 (cleanup): {
        drop(_1140) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb609 (cleanup): {
        drop(_1080) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb610 (cleanup): {
        drop(_1061) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb611 (cleanup): {
        drop(_1005) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb612 (cleanup): {
        drop(_965) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb613 (cleanup): {
        drop(_925) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb614 (cleanup): {
        drop(_885) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb615 (cleanup): {
        drop(_845) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb616 (cleanup): {
        drop(_805) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb617 (cleanup): {
        drop(_765) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb618 (cleanup): {
        drop(_725) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb619 (cleanup): {
        drop(_685) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb620 (cleanup): {
        drop(_645) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb621 (cleanup): {
        drop(_617) -> [return: bb623, unwind terminate(cleanup)];
    }

    bb622 (cleanup): {
        drop(_588) -> [return: bb623, unwind terminate(cleanup)];
    }

    bb623 (cleanup): {
        drop(_565) -> [return: bb625, unwind terminate(cleanup)];
    }

    bb624 (cleanup): {
        drop(_503) -> [return: bb625, unwind terminate(cleanup)];
    }

    bb625 (cleanup): {
        drop(_452) -> [return: bb626, unwind terminate(cleanup)];
    }

    bb626 (cleanup): {
        drop(_441) -> [return: bb656, unwind terminate(cleanup)];
    }

    bb627 (cleanup): {
        drop(_380) -> [return: bb656, unwind terminate(cleanup)];
    }

    bb628 (cleanup): {
        drop(_345) -> [return: bb656, unwind terminate(cleanup)];
    }

    bb629 (cleanup): {
        drop(_275) -> [return: bb656, unwind terminate(cleanup)];
    }

    bb630 (cleanup): {
        drop(_193) -> [return: bb659, unwind terminate(cleanup)];
    }

    bb631 (cleanup): {
        drop(_123) -> [return: bb632, unwind terminate(cleanup)];
    }

    bb632 (cleanup): {
        drop(_116) -> [return: bb633, unwind terminate(cleanup)];
    }

    bb633 (cleanup): {
        drop(_115) -> [return: bb634, unwind terminate(cleanup)];
    }

    bb634 (cleanup): {
        drop(_114) -> [return: bb637, unwind terminate(cleanup)];
    }

    bb635 (cleanup): {
        drop(_126) -> [return: bb636, unwind terminate(cleanup)];
    }

    bb636 (cleanup): {
        drop(_123) -> [return: bb637, unwind terminate(cleanup)];
    }

    bb637 (cleanup): {
        drop(_99) -> [return: bb638, unwind terminate(cleanup)];
    }

    bb638 (cleanup): {
        drop(_87) -> [return: bb639, unwind terminate(cleanup)];
    }

    bb639 (cleanup): {
        drop(_75) -> [return: bb640, unwind terminate(cleanup)];
    }

    bb640 (cleanup): {
        drop(_63) -> [return: bb642, unwind terminate(cleanup)];
    }

    bb641 (cleanup): {
        drop(_42) -> [return: bb642, unwind terminate(cleanup)];
    }

    bb642 (cleanup): {
        resume;
    }

    bb643: {
        StorageDead(_618);
        StorageDead(_617);
        StorageDead(_615);
        StorageLive(_1262);
        StorageLive(_1263);
        StorageLive(_1264);
        StorageLive(_1265);
        _1265 = _614;
        switchInt(move _1265) -> [0: bb548, otherwise: bb547];
    }

    bb644: {
        drop(((_618 as Err).0: anchor_lang::prelude::ProgramError)) -> [return: bb643, unwind: bb623];
    }

    bb645: {
        drop(_246) -> [return: bb585, unwind: bb659];
    }

    bb646: {
        switchInt(_1362) -> [0: bb585, otherwise: bb645];
    }

    bb647: {
        drop(_164) -> [return: bb587, unwind: bb632];
    }

    bb648: {
        switchInt(_1363) -> [0: bb587, otherwise: bb647];
    }

    bb649 (cleanup): {
        _1426 = discriminant(_618);
        goto -> bb623;
    }

    bb650 (cleanup): {
        _1427 = discriminant(_566);
        goto -> bb625;
    }

    bb651 (cleanup): {
        _1428 = discriminant(_557);
        goto -> bb625;
    }

    bb652 (cleanup): {
        _1429 = discriminant(_527);
        goto -> bb625;
    }

    bb653 (cleanup): {
        _1430 = discriminant(_453);
        goto -> bb626;
    }

    bb654 (cleanup): {
        _1431 = discriminant(_442);
        goto -> bb656;
    }

    bb655 (cleanup): {
        drop(_246) -> [return: bb659, unwind terminate(cleanup)];
    }

    bb656 (cleanup): {
        switchInt(_1362) -> [0: bb659, otherwise: bb655];
    }

    bb657 (cleanup): {
        _1432 = discriminant(_247);
        goto -> bb659;
    }

    bb658 (cleanup): {
        drop(_164) -> [return: bb632, unwind terminate(cleanup)];
    }

    bb659 (cleanup): {
        switchInt(_1363) -> [0: bb632, otherwise: bb658];
    }

    bb660 (cleanup): {
        _1433 = discriminant(_165);
        goto -> bb632;
    }

    bb661 (cleanup): {
        _1435 = discriminant(_118);
        goto -> bb635;
    }

    bb662 (cleanup): {
        _1436 = discriminant(_100);
        goto -> bb638;
    }

    bb663 (cleanup): {
        _1437 = discriminant(_88);
        goto -> bb639;
    }

    bb664 (cleanup): {
        _1438 = discriminant(_76);
        goto -> bb640;
    }

    bb665 (cleanup): {
        _1439 = discriminant(_64);
        goto -> bb642;
    }

    bb666 (cleanup): {
        _1440 = discriminant(_17);
        goto -> bb642;
    }

    bb667 (cleanup): {
        _1441 = discriminant(_6);
        goto -> bb642;
    }

    bb668: {
        (*_1455) = [move _1170, move _1171, const _, const _, const _];
        StorageDead(_1171);
        StorageDead(_1170);
        _1165 = move _1169;
        _1164 = move _1165 as std::boxed::Box<[anchor_lang::prelude::Pubkey]> (PointerCoercion(Unsize));
        StorageDead(_1169);
        StorageDead(_1165);
        _1163 = std::slice::<impl [anchor_lang::prelude::Pubkey]>::into_vec::<std::alloc::Global>(move _1164) -> [return: bb502, unwind: bb621];
    }

    bb669: {
        (*_1443) = [move _134, move _135];
        StorageDead(_135);
        StorageDead(_134);
        _129 = move _133;
        _128 = move _129 as std::boxed::Box<[u16]> (PointerCoercion(Unsize));
        StorageDead(_133);
        StorageDead(_129);
        _127 = std::slice::<impl [u16]>::into_vec::<std::alloc::Global>(move _128) -> [return: bb56, unwind: bb636];
    }
}
