digraph Mir_0_2709 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_peg_from_target_price(_1: u128, _2: u128, _3: u64) -&gt; std::result::Result&lt;u128, error::ErrorCode&gt;<br align="left"/>let _4: u128;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _7: math::bn::U192;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _9: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _10: math::bn::U192;<br align="left"/>let mut _11: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _12: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _13: math::bn::U192;<br align="left"/>let mut _14: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _15: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _16: math::bn::U192;<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _18: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _19: math::bn::U192;<br align="left"/>let mut _20: u64;<br align="left"/>let mut _21: math::bn::U192;<br align="left"/>let mut _22: u128;<br align="left"/>let mut _23: isize;<br align="left"/>let _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _25: !;<br align="left"/>let mut _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _27: math::bn::U192;<br align="left"/>let mut _28: math::bn::U192;<br align="left"/>let mut _29: u128;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: math::bn::U192;<br align="left"/>let mut _35: math::bn::U192;<br align="left"/>let mut _36: u128;<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: isize;<br align="left"/>let _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _42: math::bn::U192;<br align="left"/>let mut _43: math::bn::U192;<br align="left"/>let mut _44: isize;<br align="left"/>let _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _46: !;<br align="left"/>let mut _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _48: math::bn::U192;<br align="left"/>let mut _49: isize;<br align="left"/>let _50: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _51: !;<br align="left"/>let mut _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _53: u128;<br align="left"/>let mut _54: u128;<br align="left"/>let mut _55: u128;<br align="left"/>debug quote_asset_reserve =&gt; _1;<br align="left"/>debug base_asset_reserve =&gt; _2;<br align="left"/>debug target_price =&gt; _3;<br align="left"/>debug new_peg =&gt; _4;<br align="left"/>debug residual =&gt; _24;<br align="left"/>debug val =&gt; _27;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug residual =&gt; _39;<br align="left"/>debug val =&gt; _42;<br align="left"/>debug residual =&gt; _45;<br align="left"/>debug val =&gt; _48;<br align="left"/>debug residual =&gt; _50;<br align="left"/>debug val =&gt; _53;<br align="left"/>>;
    bb0__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _3<br/></td></tr><tr><td align="left">_19 = &lt;U192 as From&lt;u64&gt;&gt;::from(move _20)</td></tr></table>>];
    bb1__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _2<br/></td></tr><tr><td align="left">_21 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _22)</td></tr></table>>];
    bb2__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/></td></tr><tr><td align="left">_18 = &lt;U192 as SafeMath&gt;::safe_mul(move _19, move _21)</td></tr></table>>];
    bb3__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb4__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_23 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb5__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_17 as Continue).0: math::bn::U192)<br/>_16 = _27<br/>StorageDead(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _1<br/></td></tr><tr><td align="left">_28 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _29)</td></tr></table>>];
    bb6__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_26)<br/>_26 = _24<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _26)</td></tr></table>>];
    bb8__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">_15 = &lt;U192 as SafeMath&gt;::safe_div(move _16, move _28)</td></tr></table>>];
    bb10__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _15)</td></tr></table>>];
    bb11__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_30 = discriminant(_14)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb12__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_14 as Continue).0: math::bn::U192)<br/>_13 = _34<br/>StorageDead(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_37 = Eq(const 2_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _37, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb13__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_14 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb14__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_36 = Div(const _, const 2_u128)<br/></td></tr><tr><td align="left">_35 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _36)</td></tr></table>>];
    bb16__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/></td></tr><tr><td align="left">_12 = &lt;U192 as SafeMath&gt;::safe_add(move _13, move _35)</td></tr></table>>];
    bb17__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _12)</td></tr></table>>];
    bb18__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_38 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb19__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_11 as Continue).0: math::bn::U192)<br/>_10 = _42<br/>StorageDead(_42)<br/>StorageLive(_43)<br/></td></tr><tr><td align="left">_43 = &lt;U192 as From&lt;u128&gt;&gt;::from(const _)</td></tr></table>>];
    bb20__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_11 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_41)<br/>_41 = _39<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _41)</td></tr></table>>];
    bb21__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">_9 = &lt;U192 as SafeMath&gt;::safe_div(move _10, move _43)</td></tr></table>>];
    bb23__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb24__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_44 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _44)</td></tr></table>>];
    bb25__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = ((_8 as Continue).0: math::bn::U192)<br/>_7 = _48<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">_6 = U192::try_to_u128(move _7)</td></tr></table>>];
    bb26__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_47)<br/>_47 = _45<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _47)</td></tr></table>>];
    bb27__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb29__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_49 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _49)</td></tr></table>>];
    bb30__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_5 as Continue).0: u128)<br/>_4 = _53<br/>StorageDead(_53)<br/>StorageDead(_17)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = _4<br/></td></tr><tr><td align="left">_54 = &lt;u128 as Ord&gt;::max(move _55, const 1_u128)</td></tr></table>>];
    bb31__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_52)<br/>_52 = _50<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _52)</td></tr></table>>];
    bb32__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>_0 = std::result::Result::&lt;u128, error::ErrorCode&gt;::Ok(move _54)<br/>StorageDead(_54)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_2709 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2709 -> bb1__0_2709 [label="return"];
    bb1__0_2709 -> bb2__0_2709 [label="return"];
    bb2__0_2709 -> bb3__0_2709 [label="return"];
    bb3__0_2709 -> bb4__0_2709 [label="return"];
    bb4__0_2709 -> bb5__0_2709 [label="0"];
    bb4__0_2709 -> bb7__0_2709 [label="1"];
    bb4__0_2709 -> bb6__0_2709 [label="otherwise"];
    bb5__0_2709 -> bb9__0_2709 [label="return"];
    bb7__0_2709 -> bb8__0_2709 [label="return"];
    bb8__0_2709 -> bb34__0_2709 [label=""];
    bb9__0_2709 -> bb10__0_2709 [label="return"];
    bb10__0_2709 -> bb11__0_2709 [label="return"];
    bb11__0_2709 -> bb12__0_2709 [label="0"];
    bb11__0_2709 -> bb13__0_2709 [label="1"];
    bb11__0_2709 -> bb6__0_2709 [label="otherwise"];
    bb12__0_2709 -> bb15__0_2709 [label="success"];
    bb13__0_2709 -> bb14__0_2709 [label="return"];
    bb14__0_2709 -> bb34__0_2709 [label=""];
    bb15__0_2709 -> bb16__0_2709 [label="return"];
    bb16__0_2709 -> bb17__0_2709 [label="return"];
    bb17__0_2709 -> bb18__0_2709 [label="return"];
    bb18__0_2709 -> bb19__0_2709 [label="0"];
    bb18__0_2709 -> bb20__0_2709 [label="1"];
    bb18__0_2709 -> bb6__0_2709 [label="otherwise"];
    bb19__0_2709 -> bb22__0_2709 [label="return"];
    bb20__0_2709 -> bb21__0_2709 [label="return"];
    bb21__0_2709 -> bb35__0_2709 [label=""];
    bb22__0_2709 -> bb23__0_2709 [label="return"];
    bb23__0_2709 -> bb24__0_2709 [label="return"];
    bb24__0_2709 -> bb25__0_2709 [label="0"];
    bb24__0_2709 -> bb26__0_2709 [label="1"];
    bb24__0_2709 -> bb6__0_2709 [label="otherwise"];
    bb25__0_2709 -> bb28__0_2709 [label="return"];
    bb26__0_2709 -> bb27__0_2709 [label="return"];
    bb27__0_2709 -> bb36__0_2709 [label=""];
    bb28__0_2709 -> bb29__0_2709 [label="return"];
    bb29__0_2709 -> bb30__0_2709 [label="0"];
    bb29__0_2709 -> bb31__0_2709 [label="1"];
    bb29__0_2709 -> bb6__0_2709 [label="otherwise"];
    bb30__0_2709 -> bb33__0_2709 [label="return"];
    bb31__0_2709 -> bb32__0_2709 [label="return"];
    bb32__0_2709 -> bb37__0_2709 [label=""];
    bb33__0_2709 -> bb38__0_2709 [label=""];
    bb34__0_2709 -> bb35__0_2709 [label=""];
    bb35__0_2709 -> bb36__0_2709 [label=""];
    bb36__0_2709 -> bb37__0_2709 [label=""];
    bb37__0_2709 -> bb38__0_2709 [label=""];
}
