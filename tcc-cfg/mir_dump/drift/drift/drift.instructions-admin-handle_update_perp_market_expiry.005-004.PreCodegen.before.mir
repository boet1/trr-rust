// MIR for `admin::handle_update_perp_market_expiry` before PreCodegen

fn admin::handle_update_perp_market_expiry(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: i64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug expiry_ts => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: anchor_lang::prelude::Clock;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _15: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _20: anchor_lang::prelude::Clock;
    let mut _22: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _24: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _25: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _27: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: &std::string::String;
    let _37: &std::string::String;
    let _38: std::string::String;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[&str; 2];
    let _43: &[&str; 2];
    let _44: [&str; 2];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let mut _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let mut _50: &u16;
    let _51: &u16;
    let _52: &state::perp_market::PerpMarket;
    let mut _53: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _54: ();
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _56: std::result::Result<(), error::ErrorCode>;
    let mut _57: bool;
    let mut _58: i64;
    let mut _59: i64;
    let mut _60: ();
    let _62: ();
    let mut _63: &str;
    let _64: &str;
    let mut _65: &std::string::String;
    let _66: &std::string::String;
    let _67: std::string::String;
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let mut _71: &[&str; 2];
    let _72: &[&str; 2];
    let _73: [&str; 2];
    let mut _74: &[core::fmt::rt::Argument<'_>];
    let mut _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: [core::fmt::rt::Argument<'_>; 1];
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &error::ErrorCode;
    let _80: &error::ErrorCode;
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: error::ErrorCode;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _90: ();
    let mut _91: &str;
    let _92: &str;
    let mut _93: &std::string::String;
    let _94: &std::string::String;
    let _95: std::string::String;
    let mut _97: std::fmt::Arguments<'_>;
    let mut _98: &[&str];
    let mut _99: &[&str; 2];
    let _100: &[&str; 2];
    let _101: [&str; 2];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let mut _103: &[core::fmt::rt::Argument<'_>; 2];
    let _104: &[core::fmt::rt::Argument<'_>; 2];
    let _105: [core::fmt::rt::Argument<'_>; 2];
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &state::perp_market::MarketStatus;
    let _108: &state::perp_market::MarketStatus;
    let _109: &state::perp_market::PerpMarket;
    let mut _110: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &state::perp_market::MarketStatus;
    let _113: &state::perp_market::MarketStatus;
    let _114: state::perp_market::MarketStatus;
    let _115: ();
    let mut _116: &str;
    let _117: &str;
    let mut _118: &std::string::String;
    let _119: &std::string::String;
    let _120: std::string::String;
    let mut _122: std::fmt::Arguments<'_>;
    let mut _123: &[&str];
    let mut _124: &[&str; 2];
    let _125: &[&str; 2];
    let _126: [&str; 2];
    let mut _127: &[core::fmt::rt::Argument<'_>];
    let mut _128: &[core::fmt::rt::Argument<'_>; 2];
    let _129: &[core::fmt::rt::Argument<'_>; 2];
    let _130: [core::fmt::rt::Argument<'_>; 2];
    let mut _131: core::fmt::rt::Argument<'_>;
    let mut _132: &i64;
    let _133: &i64;
    let _134: &state::perp_market::PerpMarket;
    let mut _135: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _136: core::fmt::rt::Argument<'_>;
    let mut _137: &i64;
    let _138: &i64;
    let mut _139: state::perp_market::MarketStatus;
    let mut _140: &mut state::perp_market::PerpMarket;
    let mut _141: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _142: i64;
    let mut _143: &mut state::perp_market::PerpMarket;
    let mut _144: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _145: ();
    let mut _151: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _152: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _13;
        let _21: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
        scope 10 {
            debug perp_market => _21;
            let _39: std::string::String;
            let _61: error::ErrorCode;
            let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _89: ();
            let _96: std::string::String;
            let _121: std::string::String;
            let mut _146: &[&str; 2];
            let mut _147: &state::perp_market::MarketStatus;
            let mut _148: &[&str; 2];
            let mut _150: &[&str; 2];
            scope 15 {
                debug res => _39;
            }
            scope 16 {
                debug error_code => _61;
                let _68: std::string::String;
                let mut _149: &[&str; 2];
                scope 17 {
                    debug res => _68;
                }
            }
            scope 18 {
                debug residual => _86;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _89;
                scope 21 {
                }
            }
            scope 22 {
                debug res => _96;
            }
            scope 23 {
                debug res => _121;
            }
        }
        scope 11 {
            debug residual => _29;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _32;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _17;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _20;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _151 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _7 = &((*_151).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb66];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _153 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb69];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _163 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb60;
    }

    bb7: {
        _14 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _15) -> [return: bb8, unwind: bb66];
    }

    bb8: {
        StorageDead(_15);
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_14 as Continue).0: anchor_lang::prelude::Clock);
        _13 = move _20;
        StorageDead(_20);
        _155 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _152 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _26 = &((*_152).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _25 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _26) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _19) -> [return: bb11, unwind: bb68];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        _161 = discriminant(_14);
        StorageDead(_14);
        goto -> bb59;
    }

    bb12: {
        StorageDead(_26);
        StorageLive(_27);
        _27 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _24 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _25, move _27) -> [return: bb13, unwind: bb66];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        _23 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _24) -> [return: bb14, unwind: bb66];
    }

    bb14: {
        StorageDead(_24);
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_32);
        _32 = move ((_23 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _22 = move _32;
        StorageDead(_32);
        _21 = &mut _22;
        _159 = discriminant(_23);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _150 = const _;
        _43 = &(*_150);
        _42 = &(*_43);
        _41 = move _42 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_21);
        _52 = <RefMut<'_, PerpMarket> as Deref>::deref(move _53) -> [return: bb18, unwind: bb65];
    }

    bb16: {
        StorageLive(_29);
        _29 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb17, unwind: bb67];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        _157 = discriminant(_23);
        StorageDead(_23);
        goto -> bb58;
    }

    bb18: {
        StorageDead(_53);
        _51 = &((*_52).21: u16);
        _50 = &(*_51);
        _49 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _50) -> [return: bb19, unwind: bb65];
    }

    bb19: {
        StorageDead(_50);
        _48 = [move _49];
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = move _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_46);
        _40 = Arguments::<'_>::new_v1(move _41, move _45) -> [return: bb20, unwind: bb65];
    }

    bb20: {
        StorageDead(_45);
        StorageDead(_41);
        _39 = format(move _40) -> [return: bb21, unwind: bb65];
    }

    bb21: {
        StorageDead(_40);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_43);
        _38 = move _39;
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = <String as Deref>::deref(move _36) -> [return: bb22, unwind: bb64];
    }

    bb22: {
        _34 = &(*_35);
        StorageDead(_36);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb23, unwind: bb64];
    }

    bb23: {
        StorageDead(_34);
        drop(_38) -> [return: bb24, unwind: bb65];
    }

    bb24: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = (_13.4: i64);
        StorageLive(_59);
        _59 = _2;
        _57 = Lt(move _58, move _59);
        switchInt(move _57) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_60);
        _60 = ();
        _56 = std::result::Result::<(), error::ErrorCode>::Ok(move _60);
        StorageDead(_60);
        goto -> bb34;
    }

    bb26: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_61);
        _61 = error::ErrorCode::DefaultError;
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _149 = const _;
        _72 = &(*_149);
        _71 = &(*_72);
        _70 = move _71 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_71);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_61;
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _79) -> [return: bb27, unwind: bb65];
    }

    bb27: {
        StorageDead(_79);
        _77 = [move _78];
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = move _75 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_75);
        _69 = Arguments::<'_>::new_v1(move _70, move _74) -> [return: bb28, unwind: bb65];
    }

    bb28: {
        StorageDead(_74);
        StorageDead(_70);
        _68 = format(move _69) -> [return: bb29, unwind: bb65];
    }

    bb29: {
        StorageDead(_69);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_72);
        _67 = move _68;
        StorageDead(_68);
        _66 = &_67;
        _65 = &(*_66);
        _64 = <String as Deref>::deref(move _65) -> [return: bb30, unwind: bb63];
    }

    bb30: {
        _63 = &(*_64);
        StorageDead(_65);
        _62 = solana_program::log::sol_log(move _63) -> [return: bb31, unwind: bb63];
    }

    bb31: {
        StorageDead(_63);
        drop(_67) -> [return: bb32, unwind: bb65];
    }

    bb32: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = const "Market expiry ts must later than current clock timestamp";
        _82 = &(*_83);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb33, unwind: bb65];
    }

    bb33: {
        StorageDead(_82);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_84);
        _84 = _61;
        _56 = std::result::Result::<(), error::ErrorCode>::Err(move _84);
        StorageDead(_84);
        StorageDead(_61);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_57);
        _55 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _56) -> [return: bb35, unwind: bb65];
    }

    bb35: {
        StorageDead(_56);
        _85 = discriminant(_55);
        switchInt(move _85) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_89);
        _89 = ((_55 as Continue).0: ());
        _54 = _89;
        StorageDead(_89);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _148 = const _;
        _100 = &(*_148);
        _99 = &(*_100);
        _98 = move _99 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &(*_21);
        _109 = <RefMut<'_, PerpMarket> as Deref>::deref(move _110) -> [return: bb39, unwind: bb65];
    }

    bb37: {
        StorageLive(_86);
        _86 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb38, unwind: bb65];
    }

    bb38: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_55);
        StorageDead(_54);
        drop(_22) -> [return: bb58, unwind: bb66];
    }

    bb39: {
        StorageDead(_110);
        _108 = &((*_109).22: state::perp_market::MarketStatus);
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::MarketStatus>(move _107) -> [return: bb40, unwind: bb65];
    }

    bb40: {
        StorageDead(_107);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _147 = const _;
        _113 = &(*_147);
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::MarketStatus>(move _112) -> [return: bb41, unwind: bb65];
    }

    bb41: {
        StorageDead(_112);
        _105 = [move _106, move _111];
        StorageDead(_111);
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = move _103 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_103);
        _97 = Arguments::<'_>::new_v1(move _98, move _102) -> [return: bb42, unwind: bb65];
    }

    bb42: {
        StorageDead(_102);
        StorageDead(_98);
        _96 = format(move _97) -> [return: bb43, unwind: bb65];
    }

    bb43: {
        StorageDead(_97);
        StorageDead(_113);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        _95 = move _96;
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = <String as Deref>::deref(move _93) -> [return: bb44, unwind: bb62];
    }

    bb44: {
        _91 = &(*_92);
        StorageDead(_93);
        _90 = solana_program::log::sol_log(move _91) -> [return: bb45, unwind: bb62];
    }

    bb45: {
        StorageDead(_91);
        drop(_95) -> [return: bb46, unwind: bb65];
    }

    bb46: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _146 = const _;
        _125 = &(*_146);
        _124 = &(*_125);
        _123 = move _124 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &(*_21);
        _134 = <RefMut<'_, PerpMarket> as Deref>::deref(move _135) -> [return: bb47, unwind: bb65];
    }

    bb47: {
        StorageDead(_135);
        _133 = &((*_134).6: i64);
        _132 = &(*_133);
        _131 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _132) -> [return: bb48, unwind: bb65];
    }

    bb48: {
        StorageDead(_132);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_2;
        _137 = &(*_138);
        _136 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _137) -> [return: bb49, unwind: bb65];
    }

    bb49: {
        StorageDead(_137);
        _130 = [move _131, move _136];
        StorageDead(_136);
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = move _128 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_128);
        _122 = Arguments::<'_>::new_v1(move _123, move _127) -> [return: bb50, unwind: bb65];
    }

    bb50: {
        StorageDead(_127);
        StorageDead(_123);
        _121 = format(move _122) -> [return: bb51, unwind: bb65];
    }

    bb51: {
        StorageDead(_122);
        StorageDead(_138);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        _120 = move _121;
        StorageDead(_121);
        _119 = &_120;
        _118 = &(*_119);
        _117 = <String as Deref>::deref(move _118) -> [return: bb52, unwind: bb61];
    }

    bb52: {
        _116 = &(*_117);
        StorageDead(_118);
        _115 = solana_program::log::sol_log(move _116) -> [return: bb53, unwind: bb61];
    }

    bb53: {
        StorageDead(_116);
        drop(_120) -> [return: bb54, unwind: bb65];
    }

    bb54: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageLive(_139);
        _139 = state::perp_market::MarketStatus::ReduceOnly;
        StorageLive(_140);
        StorageLive(_141);
        _141 = &mut (*_21);
        _140 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _141) -> [return: bb55, unwind: bb65];
    }

    bb55: {
        StorageDead(_141);
        ((*_140).22: state::perp_market::MarketStatus) = move _139;
        StorageDead(_139);
        StorageDead(_140);
        StorageLive(_142);
        _142 = _2;
        StorageLive(_143);
        StorageLive(_144);
        _144 = &mut (*_21);
        _143 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _144) -> [return: bb56, unwind: bb65];
    }

    bb56: {
        StorageDead(_144);
        ((*_143).6: i64) = move _142;
        StorageDead(_142);
        StorageDead(_143);
        StorageLive(_145);
        _145 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _145);
        StorageDead(_145);
        drop(_22) -> [return: bb57, unwind: bb66];
    }

    bb57: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_13);
        goto -> bb60;
    }

    bb58: {
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_13);
        goto -> bb60;
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        drop(_120) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_95) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_67) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_38) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_22) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }

    bb67 (cleanup): {
        _165 = discriminant(_23);
        goto -> bb66;
    }

    bb68 (cleanup): {
        _166 = discriminant(_14);
        goto -> bb66;
    }

    bb69 (cleanup): {
        _167 = discriminant(_4);
        goto -> bb66;
    }
}
