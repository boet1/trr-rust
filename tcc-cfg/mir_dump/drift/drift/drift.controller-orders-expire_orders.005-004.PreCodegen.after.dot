digraph Mir_0_569 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn expire_orders(_1: &amp;ReErased mut state::user::User, _2: &amp;ReErased anchor_lang::prelude::Pubkey, _3: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _4: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _5: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _6: i64, _7: u64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _8: ();<br align="left"/>let mut _9: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _10: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _11: usize;<br align="left"/>let mut _12: &amp;ReErased [state::user::Order];<br align="left"/>let mut _13: &amp;ReErased [state::user::Order; 32_usize];<br align="left"/>let mut _14: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _15: ();<br align="left"/>let _16: ();<br align="left"/>let mut _17: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _18: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _19: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: !;<br align="left"/>let _22: usize;<br align="left"/>let _23: ();<br align="left"/>let mut _24: bool;<br align="left"/>let mut _25: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _26: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _27: &amp;ReErased state::user::User;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: i64;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: bool;<br align="left"/>let mut _35: !;<br align="left"/>let _36: ();<br align="left"/>let mut _37: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _38: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _39: usize;<br align="left"/>let mut _40: &amp;ReErased mut state::user::User;<br align="left"/>let mut _41: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _42: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _43: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _44: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _45: i64;<br align="left"/>let mut _46: u64;<br align="left"/>let mut _47: state::events::OrderActionExplanation;<br align="left"/>let mut _48: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _49: isize;<br align="left"/>let _50: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _51: !;<br align="left"/>let mut _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _53: ();<br align="left"/>let mut _54: ();<br align="left"/>debug user =&gt; _1;<br align="left"/>debug user_key =&gt; _2;<br align="left"/>debug perp_market_map =&gt; _3;<br align="left"/>debug spot_market_map =&gt; _4;<br align="left"/>debug oracle_map =&gt; _5;<br align="left"/>debug now =&gt; _6;<br align="left"/>debug slot =&gt; _7;<br align="left"/>debug iter =&gt; _14;<br align="left"/>debug order_index =&gt; _22;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug residual =&gt; _50;<br align="left"/>debug val =&gt; _53;<br align="left"/>>;
    bb0__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;((*_1).5: [state::user::Order; 32])<br/>_12 = move _13 as &amp;[state::user::Order] (PointerCoercion(Unsize))<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = core::slice::&lt;impl [Order]&gt;::len(move _12)</td></tr></table>>];
    bb1__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_10 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: move _11 }<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _10)</td></tr></table>>];
    bb2__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageLive(_14)<br/>_14 = move _9<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;mut _14<br/>_18 = &amp;mut (*_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _18)</td></tr></table>>];
    bb4__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_20 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb5__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_17 as Some).0: usize)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = &amp;(*_1)<br/>StorageLive(_28)<br/>_28 = _22<br/>StorageLive(_29)<br/>_29 = _6<br/></td></tr><tr><td align="left">_26 = math::orders::should_expire_order(move _27, move _28, move _29)</td></tr></table>>];
    bb6__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_8 = const ()<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_54)<br/>_54 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _54)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">_25 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _26)</td></tr></table>>];
    bb9__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_30 = discriminant(_25)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb10__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_25 as Continue).0: bool)<br/>_24 = _34<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb11__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_25 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb12__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_23 = const ()<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = _22<br/>StorageLive(_40)<br/>_40 = &amp;mut (*_1)<br/>StorageLive(_41)<br/>_41 = &amp;(*_2)<br/>StorageLive(_42)<br/>_42 = &amp;(*_3)<br/>StorageLive(_43)<br/>_43 = &amp;(*_4)<br/>StorageLive(_44)<br/>_44 = &amp;mut (*_5)<br/>StorageLive(_45)<br/>_45 = _6<br/>StorageLive(_46)<br/>_46 = _7<br/>StorageLive(_47)<br/>_47 = OrderActionExplanation::OrderExpired<br/>StorageLive(_48)<br/>_48 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::None<br/></td></tr><tr><td align="left">_38 = controller::orders::cancel_order(move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48, const 0_u64, const false)</td></tr></table>>];
    bb14__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">_37 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _38)</td></tr></table>>];
    bb16__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_49 = discriminant(_37)<br/></td></tr><tr><td align="left">switchInt(move _49)</td></tr></table>>];
    bb17__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_37 as Continue).0: ())<br/>_36 = _53<br/>StorageDead(_53)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>_16 = const ()<br/>StorageDead(_22)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>_15 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_37 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_52)<br/>_52 = _50<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _52)</td></tr></table>>];
    bb19__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_50)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_569 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_569 -> bb1__0_569 [label="return"];
    bb1__0_569 -> bb2__0_569 [label="return"];
    bb2__0_569 -> bb3__0_569 [label=""];
    bb3__0_569 -> bb4__0_569 [label="return"];
    bb4__0_569 -> bb7__0_569 [label="0"];
    bb4__0_569 -> bb5__0_569 [label="1"];
    bb4__0_569 -> bb6__0_569 [label="otherwise"];
    bb5__0_569 -> bb8__0_569 [label="return"];
    bb7__0_569 -> bb21__0_569 [label=""];
    bb8__0_569 -> bb9__0_569 [label="return"];
    bb9__0_569 -> bb10__0_569 [label="0"];
    bb9__0_569 -> bb11__0_569 [label="1"];
    bb9__0_569 -> bb6__0_569 [label="otherwise"];
    bb10__0_569 -> bb14__0_569 [label="0"];
    bb10__0_569 -> bb13__0_569 [label="otherwise"];
    bb11__0_569 -> bb12__0_569 [label="return"];
    bb12__0_569 -> bb20__0_569 [label=""];
    bb13__0_569 -> bb15__0_569 [label="return"];
    bb14__0_569 -> bb3__0_569 [label=""];
    bb15__0_569 -> bb16__0_569 [label="return"];
    bb16__0_569 -> bb17__0_569 [label="0"];
    bb16__0_569 -> bb18__0_569 [label="1"];
    bb16__0_569 -> bb6__0_569 [label="otherwise"];
    bb17__0_569 -> bb3__0_569 [label=""];
    bb18__0_569 -> bb19__0_569 [label="return"];
    bb19__0_569 -> bb20__0_569 [label=""];
    bb20__0_569 -> bb21__0_569 [label=""];
}
