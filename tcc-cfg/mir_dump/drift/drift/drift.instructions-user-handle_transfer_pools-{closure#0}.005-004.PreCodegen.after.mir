// MIR for `instructions::user::handle_transfer_pools::{closure#0}` after PreCodegen

fn instructions::user::handle_transfer_pools::{closure#0}(_1: &mut {closure@programs/drift/src/instructions/user.rs:1474:19: 1474:24}, _2: &&anchor_lang::prelude::AccountInfo<'_>) -> bool {
    debug acc => _2;
    debug token_program_pubkey => (*((*_1).0: &anchor_lang::prelude::Pubkey));
    let mut _0: bool;
    let mut _3: &anchor_lang::prelude::Pubkey;
    let _4: anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _7 = deref_copy (*_2);
        _5 = &(*_7);
        _4 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        StorageDead(_5);
        StorageLive(_6);
        _8 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _6 = &(*_8);
        _0 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _3, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
