// MIR for `state::oracle::<impl at programs/drift/src/state/oracle.rs:680:1: 680:21>::update` before PreCodegen

fn state::oracle::<impl at programs/drift/src/state/oracle.rs:680:1: 680:21>::update(_1: &mut PrelaunchOracle, _2: &PerpMarket, _3: u64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug perp_market => _2;
    debug slot => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: i64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _6: std::result::Result<i64, error::ErrorCode>;
    let mut _7: u64;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: i64;
    let mut _14: bool;
    let mut _15: i64;
    let mut _16: i64;
    let _17: ();
    let mut _18: &str;
    let _19: &str;
    let mut _20: &std::string::String;
    let _21: &std::string::String;
    let _22: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[&str; 3];
    let _27: &[&str; 3];
    let _28: [&str; 3];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let mut _30: &[core::fmt::rt::Argument<'_>; 2];
    let _31: &[core::fmt::rt::Argument<'_>; 2];
    let _32: [core::fmt::rt::Argument<'_>; 2];
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &i64;
    let _35: &i64;
    let mut _36: core::fmt::rt::Argument<'_>;
    let mut _37: &i64;
    let _38: &i64;
    let mut _39: i64;
    let mut _41: i64;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _43: std::result::Result<i64, error::ErrorCode>;
    let mut _44: i64;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _46: std::result::Result<i64, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: i64;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _55: std::result::Result<i64, error::ErrorCode>;
    let mut _56: u64;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: u64;
    let mut _69: u64;
    let mut _70: u64;
    let mut _71: u64;
    let mut _72: u64;
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: &std::string::String;
    let _77: &std::string::String;
    let _78: std::string::String;
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str];
    let mut _82: &[&str; 2];
    let _83: &[&str; 2];
    let _84: [&str; 2];
    let mut _85: &[core::fmt::rt::Argument<'_>];
    let mut _86: &[core::fmt::rt::Argument<'_>; 2];
    let _87: &[core::fmt::rt::Argument<'_>; 2];
    let _88: [core::fmt::rt::Argument<'_>; 2];
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &i64;
    let _91: &i64;
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: &u64;
    let _94: &u64;
    let mut _95: ();
    scope 1 {
        debug last_twap => _4;
        let _13: i64;
        let _23: std::string::String;
        let mut _97: &[&str; 3];
        scope 6 {
            debug new_price => _13;
            let _40: u64;
            let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _52: i64;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: i64;
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: i64;
            scope 8 {
                debug spread_twap => _40;
                let _67: u64;
                scope 21 {
                    debug mark_std => _67;
                    let _79: std::string::String;
                    let mut _96: &[&str; 2];
                    scope 22 {
                        debug res => _79;
                    }
                }
            }
            scope 9 {
                debug residual => _49;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _52;
                scope 12 {
                }
            }
            scope 13 {
                debug residual => _58;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _61;
                scope 16 {
                }
            }
            scope 17 {
                debug residual => _63;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _66;
                scope 20 {
                }
            }
        }
        scope 7 {
            debug res => _23;
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = (((*_2).1: state::perp_market::AMM).45: u64);
        _6 = <u64 as Cast>::cast::<i64>(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: i64);
        _4 = _12;
        StorageDead(_12);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).1: i64);
        StorageLive(_16);
        _16 = _4;
        _14 = Le(move _15, move _16);
        switchInt(move _14) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_5);
        goto -> bb43;
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _97 = const _;
        _27 = &(*_97);
        _26 = &(*_27);
        _25 = move _26 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_4;
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _34) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = _4;
        goto -> bb16;
    }

    bb9: {
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &((*_1).1: i64);
        _37 = &(*_38);
        _36 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _37) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_37);
        _32 = [move _33, move _36];
        StorageDead(_36);
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_30);
        _24 = Arguments::<'_>::new_v1(move _25, move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_25);
        _23 = format(move _24) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        _22 = move _23;
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = <String as Deref>::deref(move _20) -> [return: bb13, unwind: bb46];
    }

    bb13: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = solana_program::log::sol_log(move _18) -> [return: bb14, unwind: bb46];
    }

    bb14: {
        StorageDead(_18);
        drop(_22) -> [return: bb15, unwind: bb47];
    }

    bb15: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        _13 = ((*_1).1: i64);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_14);
        StorageLive(_39);
        _39 = _13;
        ((*_1).0: i64) = move _39;
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = (((*_2).1: state::perp_market::AMM).44: u64);
        _46 = <u64 as Cast>::cast::<i64>(move _47) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_47);
        _45 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: i64);
        _44 = _52;
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = (((*_2).1: state::perp_market::AMM).43: u64);
        _55 = <u64 as Cast>::cast::<i64>(move _56) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        goto -> bb42;
    }

    bb22: {
        StorageDead(_56);
        _54 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _55) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: i64);
        _53 = _61;
        StorageDead(_61);
        _43 = <i64 as SafeMath>::safe_sub(move _44, move _53) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb41;
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_44);
        _42 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _43) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_43);
        _62 = discriminant(_42);
        switchInt(move _62) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_66);
        _66 = ((_42 as Continue).0: i64);
        _41 = _66;
        StorageDead(_66);
        _40 = core::num::<impl i64>::unsigned_abs(move _41) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_63);
        _63 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb41;
    }

    bb32: {
        StorageDead(_41);
        StorageDead(_54);
        StorageDead(_45);
        StorageDead(_42);
        StorageLive(_67);
        _67 = (((*_2).1: state::perp_market::AMM).60: u64);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _40;
        StorageLive(_70);
        _70 = _67;
        _68 = <u64 as Ord>::max(move _69, move _70) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_69);
        ((*_1).2: u64) = move _68;
        StorageDead(_68);
        StorageLive(_71);
        _71 = (((*_2).1: state::perp_market::AMM).47: u64);
        ((*_1).4: u64) = move _71;
        StorageDead(_71);
        StorageLive(_72);
        _72 = _3;
        ((*_1).3: u64) = move _72;
        StorageDead(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _96 = const _;
        _83 = &(*_96);
        _82 = &(*_83);
        _81 = move _82 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_82);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &((*_1).0: i64);
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _90) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_90);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &((*_1).2: u64);
        _93 = &(*_94);
        _92 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _93) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_93);
        _88 = [move _89, move _92];
        StorageDead(_92);
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = move _86 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        _80 = Arguments::<'_>::new_v1(move _81, move _85) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_85);
        StorageDead(_81);
        _79 = format(move _80) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_80);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_83);
        _78 = move _79;
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = <String as Deref>::deref(move _76) -> [return: bb38, unwind: bb45];
    }

    bb38: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb39, unwind: bb45];
    }

    bb39: {
        StorageDead(_74);
        drop(_78) -> [return: bb40, unwind: bb47];
    }

    bb40: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_95);
        _95 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _95);
        StorageDead(_95);
        StorageDead(_67);
        StorageDead(_40);
        StorageDead(_13);
        StorageDead(_4);
        goto -> bb44;
    }

    bb41: {
        StorageDead(_41);
        StorageDead(_54);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_13);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_4);
        goto -> bb44;
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        drop(_78) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_22) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }
}
