// MIR for `update_spot_balances` before PreCodegen

fn update_spot_balances(_1: u128, _2: &SpotBalanceType, _3: &mut SpotMarket, _4: &mut dyn SpotBalance, _5: bool) -> std::result::Result<(), error::ErrorCode> {
    debug token_amount => _1;
    debug update_direction => _2;
    debug spot_market => _3;
    debug spot_balance => _4;
    debug is_leaving_drift => _5;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _6: bool;
    let mut _7: &&state::spot_market::SpotBalanceType;
    let mut _8: &&state::spot_market::SpotBalanceType;
    let _9: &state::spot_market::SpotBalanceType;
    let mut _10: &dyn state::spot_market::SpotBalance;
    let _11: ();
    let mut _12: bool;
    let mut _14: &&state::spot_market::SpotBalanceType;
    let _15: &state::spot_market::SpotBalanceType;
    let mut _16: &dyn state::spot_market::SpotBalance;
    let mut _17: &&state::spot_market::SpotBalanceType;
    let _18: &state::spot_market::SpotBalanceType;
    let _19: state::spot_market::SpotBalanceType;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: u128;
    let mut _24: &state::spot_market::SpotMarket;
    let mut _25: &state::spot_market::SpotBalanceType;
    let mut _26: bool;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: ();
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _34: std::result::Result<(), error::ErrorCode>;
    let mut _35: &mut dyn state::spot_market::SpotBalance;
    let mut _36: u128;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: ();
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _44: std::result::Result<(), error::ErrorCode>;
    let mut _45: u128;
    let mut _46: &mut state::spot_market::SpotMarket;
    let mut _47: &state::spot_market::SpotBalanceType;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _55: std::result::Result<u128, error::ErrorCode>;
    let mut _56: u128;
    let mut _57: &dyn state::spot_market::SpotBalance;
    let mut _58: &state::spot_market::SpotMarket;
    let mut _59: &state::spot_market::SpotBalanceType;
    let _60: &state::spot_market::SpotBalanceType;
    let mut _61: &dyn state::spot_market::SpotBalance;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: u128;
    let _69: ();
    let mut _70: bool;
    let mut _73: (u128, u128);
    let mut _74: bool;
    let mut _75: u128;
    let mut _76: u128;
    let mut _78: bool;
    let mut _79: &&state::spot_market::SpotBalanceType;
    let _80: &state::spot_market::SpotBalanceType;
    let mut _81: &dyn state::spot_market::SpotBalance;
    let mut _82: &&state::spot_market::SpotBalanceType;
    let _83: &state::spot_market::SpotBalanceType;
    let _84: state::spot_market::SpotBalanceType;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _87: std::result::Result<u128, error::ErrorCode>;
    let mut _88: u128;
    let mut _89: &state::spot_market::SpotMarket;
    let mut _90: &state::spot_market::SpotBalanceType;
    let _91: &state::spot_market::SpotBalanceType;
    let mut _92: &dyn state::spot_market::SpotBalance;
    let mut _93: bool;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: u128;
    let mut _100: u128;
    let mut _101: u128;
    let mut _102: u128;
    let mut _103: &dyn state::spot_market::SpotBalance;
    let _104: ();
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _106: std::result::Result<(), error::ErrorCode>;
    let mut _107: u128;
    let mut _108: &mut state::spot_market::SpotMarket;
    let mut _109: &state::spot_market::SpotBalanceType;
    let _110: &state::spot_market::SpotBalanceType;
    let mut _111: &dyn state::spot_market::SpotBalance;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _117: ();
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _119: std::result::Result<(), error::ErrorCode>;
    let mut _120: &mut dyn state::spot_market::SpotBalance;
    let mut _121: u128;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: u128;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _129: std::result::Result<u128, error::ErrorCode>;
    let mut _130: u128;
    let mut _131: u128;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _137: bool;
    let mut _138: u128;
    let _139: ();
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _141: std::result::Result<(), error::ErrorCode>;
    let mut _142: &mut dyn state::spot_market::SpotBalance;
    let mut _143: state::spot_market::SpotBalanceType;
    let mut _144: isize;
    let mut _146: !;
    let mut _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _150: &&state::spot_market::SpotBalanceType;
    let mut _151: &&state::spot_market::SpotBalanceType;
    let _152: &state::spot_market::SpotBalanceType;
    let _153: state::spot_market::SpotBalanceType;
    let mut _155: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _156: std::result::Result<u128, error::ErrorCode>;
    let mut _157: u128;
    let mut _158: &state::spot_market::SpotMarket;
    let mut _159: &state::spot_market::SpotBalanceType;
    let mut _160: bool;
    let mut _161: isize;
    let mut _163: !;
    let mut _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _166: ();
    let mut _167: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _168: std::result::Result<(), error::ErrorCode>;
    let mut _169: &mut dyn state::spot_market::SpotBalance;
    let mut _170: u128;
    let mut _171: isize;
    let mut _173: !;
    let mut _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _176: ();
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _178: std::result::Result<(), error::ErrorCode>;
    let mut _179: u128;
    let mut _180: &mut state::spot_market::SpotMarket;
    let mut _181: &state::spot_market::SpotBalanceType;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _187: ();
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: &&state::spot_market::SpotBalanceType;
    let mut _191: &&state::spot_market::SpotBalanceType;
    let _192: &state::spot_market::SpotBalanceType;
    let _193: state::spot_market::SpotBalanceType;
    let mut _195: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _196: std::result::Result<u128, error::ErrorCode>;
    let mut _197: u128;
    let mut _198: &state::spot_market::SpotMarket;
    let mut _199: &state::spot_market::SpotBalanceType;
    let _200: &state::spot_market::SpotBalanceType;
    let _201: state::spot_market::SpotBalanceType;
    let mut _202: isize;
    let mut _204: !;
    let mut _205: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _208: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _209: std::result::Result<u128, error::ErrorCode>;
    let mut _210: u128;
    let mut _211: &state::spot_market::SpotMarket;
    let mut _212: &state::spot_market::SpotBalanceType;
    let _213: &state::spot_market::SpotBalanceType;
    let _214: state::spot_market::SpotBalanceType;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _220: ();
    let mut _221: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _222: std::result::Result<(), error::ErrorCode>;
    let mut _223: bool;
    let mut _224: u128;
    let mut _225: u128;
    let mut _226: ();
    let _228: ();
    let mut _229: &str;
    let _230: &str;
    let mut _231: &std::string::String;
    let _232: &std::string::String;
    let _233: std::string::String;
    let mut _235: std::fmt::Arguments<'_>;
    let mut _236: &[&str];
    let mut _237: &[&str; 2];
    let _238: &[&str; 2];
    let _239: [&str; 2];
    let mut _240: &[core::fmt::rt::Argument<'_>];
    let mut _241: &[core::fmt::rt::Argument<'_>; 1];
    let _242: &[core::fmt::rt::Argument<'_>; 1];
    let _243: [core::fmt::rt::Argument<'_>; 1];
    let mut _244: core::fmt::rt::Argument<'_>;
    let mut _245: &error::ErrorCode;
    let _246: &error::ErrorCode;
    let _247: ();
    let mut _248: &str;
    let _249: &str;
    let mut _250: &std::string::String;
    let _251: &std::string::String;
    let _252: std::string::String;
    let mut _254: std::fmt::Arguments<'_>;
    let mut _255: &[&str];
    let mut _256: &[&str; 3];
    let _257: &[&str; 3];
    let _258: [&str; 3];
    let mut _259: &[core::fmt::rt::Argument<'_>];
    let mut _260: &[core::fmt::rt::Argument<'_>; 2];
    let _261: &[core::fmt::rt::Argument<'_>; 2];
    let _262: [core::fmt::rt::Argument<'_>; 2];
    let mut _263: core::fmt::rt::Argument<'_>;
    let mut _264: &u128;
    let _265: &u128;
    let mut _266: core::fmt::rt::Argument<'_>;
    let mut _267: &u128;
    let _268: &u128;
    let mut _269: error::ErrorCode;
    let mut _270: isize;
    let mut _272: !;
    let mut _273: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _275: ();
    scope 1 {
        debug increase_user_existing_balance => _6;
        let _13: bool;
        let _53: u128;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: u128;
        let _194: u128;
        let _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _206: u128;
        let mut _279: &state::spot_market::SpotBalanceType;
        let mut _280: &&state::spot_market::SpotBalanceType;
        let mut _281: &&state::spot_market::SpotBalanceType;
        scope 2 {
            debug round_up => _13;
            let _20: u128;
            let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _31: u128;
            scope 3 {
                debug balance_delta => _20;
                let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _41: ();
                let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _52: ();
                scope 8 {
                    debug residual => _38;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _41;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug residual => _49;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => _52;
                    scope 15 {
                    }
                }
            }
            scope 4 {
                debug residual => _28;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _31;
                scope 7 {
                }
            }
        }
        scope 16 {
            debug current_token_amount => _53;
            let _67: bool;
            scope 21 {
                debug reduce_user_existing_balance => _67;
                let _71: u128;
                let _72: u128;
                let _77: bool;
                let _145: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _148: ();
                let _149: bool;
                let mut _282: &&state::spot_market::SpotBalanceType;
                let mut _283: &&state::spot_market::SpotBalanceType;
                scope 22 {
                    debug token_delta => _71;
                    debug balance_delta => _72;
                    let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _116: ();
                    let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _126: ();
                    let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _136: u128;
                    scope 29 {
                        debug residual => _113;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _116;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug residual => _123;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _126;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug residual => _133;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug val => _136;
                        scope 40 {
                        }
                    }
                }
                scope 23 {
                    debug round_up => _77;
                    let _85: u128;
                    let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _98: u128;
                    scope 24 {
                        debug balance_delta => _85;
                    }
                    scope 25 {
                        debug residual => _95;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _98;
                        scope 28 {
                        }
                    }
                }
                scope 41 {
                    debug residual => _145;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug val => _148;
                    scope 44 {
                    }
                }
                scope 45 {
                    debug round_up => _149;
                    let _154: u128;
                    let _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _165: u128;
                    scope 46 {
                        debug balance_delta => _154;
                        let _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _175: ();
                        let _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _186: ();
                        scope 51 {
                            debug residual => _172;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug val => _175;
                            scope 54 {
                            }
                        }
                        scope 55 {
                            debug residual => _183;
                            scope 56 {
                            }
                        }
                        scope 57 {
                            debug val => _186;
                            scope 58 {
                            }
                        }
                    }
                    scope 47 {
                        debug residual => _162;
                        scope 48 {
                        }
                    }
                    scope 49 {
                        debug val => _165;
                        scope 50 {
                        }
                    }
                }
            }
        }
        scope 17 {
            debug residual => _63;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _66;
            scope 20 {
            }
        }
        scope 59 {
            debug deposit_token_amount => _194;
            let _207: u128;
            let _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _219: u128;
            let mut _278: &state::spot_market::SpotBalanceType;
            scope 64 {
                debug borrow_token_amount => _207;
                let _227: error::ErrorCode;
                let _271: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _274: ();
                scope 69 {
                    debug error_code => _227;
                    let _234: std::string::String;
                    let _253: std::string::String;
                    let mut _276: &[&str; 3];
                    let mut _277: &[&str; 2];
                    scope 70 {
                        debug res => _234;
                    }
                    scope 71 {
                        debug res => _253;
                    }
                }
                scope 72 {
                    debug residual => _271;
                    scope 73 {
                    }
                }
                scope 74 {
                    debug val => _274;
                    scope 75 {
                    }
                }
            }
            scope 65 {
                debug residual => _216;
                scope 66 {
                }
            }
            scope 67 {
                debug val => _219;
                scope 68 {
                }
            }
        }
        scope 60 {
            debug residual => _203;
            scope 61 {
            }
        }
        scope 62 {
            debug val => _206;
            scope 63 {
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_2;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_4);
        _9 = <dyn SpotBalance as SpotBalance>::balance_type(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        StorageDead(_10);
        _6 = <&SpotBalanceType as PartialEq>::eq(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _6;
        switchInt(move _12) -> [0: bb22, otherwise: bb3];
    }

    bb3: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_4);
        _15 = <dyn SpotBalance as SpotBalance>::balance_type(move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        StorageDead(_16);
        StorageLive(_17);
        _281 = const _;
        _17 = &(*_281);
        _13 = <&SpotBalanceType as PartialEq>::eq(move _14, move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_15);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _1;
        StorageLive(_24);
        _24 = &(*_3);
        StorageLive(_25);
        _25 = &(*_2);
        StorageLive(_26);
        _26 = _13;
        _22 = get_spot_balance(move _23, move _24, move _25, move _26) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_22);
        _27 = discriminant(_21);
        switchInt(move _27) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_31);
        _31 = ((_21 as Continue).0: u128);
        _20 = _31;
        StorageDead(_31);
        StorageDead(_21);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &mut (*_4);
        StorageLive(_36);
        _36 = _20;
        _34 = <dyn SpotBalance as SpotBalance>::increase_balance(move _35, move _36) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_28);
        _28 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_21);
        goto -> bb133;
    }

    bb12: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_34);
        _37 = discriminant(_33);
        switchInt(move _37) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_41);
        _41 = ((_33 as Continue).0: ());
        _32 = _41;
        StorageDead(_41);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _20;
        StorageLive(_46);
        _46 = &mut (*_3);
        StorageLive(_47);
        _47 = &(*_2);
        _44 = increase_spot_balance(move _45, move _46, move _47) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_38);
        _38 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb133;
    }

    bb17: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        _43 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _44) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_44);
        _48 = discriminant(_43);
        switchInt(move _48) -> [0: bb19, 1: bb20, otherwise: bb9];
    }

    bb19: {
        StorageLive(_52);
        _52 = ((_43 as Continue).0: ());
        _42 = _52;
        StorageDead(_52);
        StorageDead(_43);
        StorageDead(_42);
        _11 = const ();
        StorageDead(_20);
        StorageDead(_13);
        goto -> bb88;
    }

    bb20: {
        StorageLive(_49);
        _49 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb133;
    }

    bb22: {
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_4);
        _56 = <dyn SpotBalance as SpotBalance>::balance(move _57) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_57);
        StorageLive(_58);
        _58 = &(*_3);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_4);
        _60 = <dyn SpotBalance as SpotBalance>::balance_type(move _61) -> [return: bb24, unwind continue];
    }

    bb24: {
        _59 = &(*_60);
        StorageDead(_61);
        _55 = get_token_amount(move _56, move _58, move _59) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_56);
        _54 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_55);
        _62 = discriminant(_54);
        switchInt(move _62) -> [0: bb27, 1: bb28, otherwise: bb9];
    }

    bb27: {
        StorageLive(_66);
        _66 = ((_54 as Continue).0: u128);
        _53 = _66;
        StorageDead(_66);
        StorageDead(_60);
        StorageDead(_54);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _53;
        _67 = Ne(move _68, const 0_u128);
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _67;
        switchInt(move _70) -> [0: bb31, otherwise: bb30];
    }

    bb28: {
        StorageLive(_63);
        _63 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_54);
        goto -> bb132;
    }

    bb30: {
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _53;
        StorageLive(_76);
        _76 = _1;
        _74 = Gt(move _75, move _76);
        switchInt(move _74) -> [0: bb44, otherwise: bb32];
    }

    bb31: {
        _69 = const ();
        goto -> bb63;
    }

    bb32: {
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _5;
        switchInt(move _78) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _77 = const true;
        goto -> bb37;
    }

    bb34: {
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(*_4);
        _80 = <dyn SpotBalance as SpotBalance>::balance_type(move _81) -> [return: bb35, unwind continue];
    }

    bb35: {
        _79 = &_80;
        StorageDead(_81);
        StorageLive(_82);
        _283 = const _;
        _82 = &(*_283);
        _77 = <&SpotBalanceType as PartialEq>::eq(move _79, move _82) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_78);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _1;
        StorageLive(_89);
        _89 = &(*_3);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_4);
        _91 = <dyn SpotBalance as SpotBalance>::balance_type(move _92) -> [return: bb38, unwind continue];
    }

    bb38: {
        _90 = &(*_91);
        StorageDead(_92);
        StorageLive(_93);
        _93 = _77;
        _87 = get_spot_balance(move _88, move _89, move _90, move _93) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        _86 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _87) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_87);
        _94 = discriminant(_86);
        switchInt(move _94) -> [0: bb41, 1: bb42, otherwise: bb9];
    }

    bb41: {
        StorageLive(_98);
        _98 = ((_86 as Continue).0: u128);
        _85 = _98;
        StorageDead(_98);
        StorageDead(_91);
        StorageDead(_86);
        StorageLive(_99);
        _99 = _1;
        StorageLive(_100);
        _100 = _85;
        _73 = (move _99, move _100);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_85);
        StorageDead(_77);
        goto -> bb46;
    }

    bb42: {
        StorageLive(_95);
        _95 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb130;
    }

    bb44: {
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_101);
        _101 = _53;
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(*_4);
        _102 = <dyn SpotBalance as SpotBalance>::balance(move _103) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_103);
        _73 = (move _101, move _102);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_74);
        StorageLive(_71);
        _71 = (_73.0: u128);
        StorageLive(_72);
        _72 = (_73.1: u128);
        StorageDead(_73);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = _72;
        StorageLive(_108);
        _108 = &mut (*_3);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &(*_4);
        _110 = <dyn SpotBalance as SpotBalance>::balance_type(move _111) -> [return: bb47, unwind continue];
    }

    bb47: {
        _109 = &(*_110);
        StorageDead(_111);
        _106 = decrease_spot_balance(move _107, move _108, move _109) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        _105 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _106) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_106);
        _112 = discriminant(_105);
        switchInt(move _112) -> [0: bb50, 1: bb51, otherwise: bb9];
    }

    bb50: {
        StorageLive(_116);
        _116 = ((_105 as Continue).0: ());
        _104 = _116;
        StorageDead(_116);
        StorageDead(_110);
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &mut (*_4);
        StorageLive(_121);
        _121 = _72;
        _119 = <dyn SpotBalance as SpotBalance>::decrease_balance(move _120, move _121) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_113);
        _113 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb129;
    }

    bb53: {
        StorageDead(_121);
        StorageDead(_120);
        _118 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _119) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_119);
        _122 = discriminant(_118);
        switchInt(move _122) -> [0: bb55, 1: bb56, otherwise: bb9];
    }

    bb55: {
        StorageLive(_126);
        _126 = ((_118 as Continue).0: ());
        _117 = _126;
        StorageDead(_126);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = _1;
        StorageLive(_131);
        _131 = _71;
        _129 = <u128 as SafeMath>::safe_sub(move _130, move _131) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_123);
        _123 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb129;
    }

    bb58: {
        StorageDead(_131);
        StorageDead(_130);
        _128 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _129) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_129);
        _132 = discriminant(_128);
        switchInt(move _132) -> [0: bb60, 1: bb61, otherwise: bb9];
    }

    bb60: {
        StorageLive(_136);
        _136 = ((_128 as Continue).0: u128);
        _127 = _136;
        StorageDead(_136);
        _1 = move _127;
        StorageDead(_127);
        StorageDead(_128);
        _69 = const ();
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb63;
    }

    bb61: {
        StorageLive(_133);
        _133 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_127);
        StorageDead(_128);
        goto -> bb129;
    }

    bb63: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_137);
        StorageLive(_138);
        _138 = _1;
        _137 = Gt(move _138, const 0_u128);
        switchInt(move _137) -> [0: bb86, otherwise: bb64];
    }

    bb64: {
        StorageDead(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &mut (*_4);
        StorageLive(_143);
        _143 = (*_2);
        _141 = <dyn SpotBalance as SpotBalance>::update_balance_type(move _142, move _143) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_143);
        StorageDead(_142);
        _140 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _141) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_141);
        _144 = discriminant(_140);
        switchInt(move _144) -> [0: bb67, 1: bb68, otherwise: bb9];
    }

    bb67: {
        StorageLive(_148);
        _148 = ((_140 as Continue).0: ());
        _139 = _148;
        StorageDead(_148);
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_2;
        StorageLive(_151);
        _282 = const _;
        _151 = &(*_282);
        _149 = <&SpotBalanceType as PartialEq>::eq(move _150, move _151) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_145);
        _145 = ((_140 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_147);
        _147 = _145;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _147) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb128;
    }

    bb70: {
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = _1;
        StorageLive(_158);
        _158 = &(*_3);
        StorageLive(_159);
        _159 = &(*_2);
        StorageLive(_160);
        _160 = _149;
        _156 = get_spot_balance(move _157, move _158, move _159, move _160) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_157);
        _155 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _156) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_156);
        _161 = discriminant(_155);
        switchInt(move _161) -> [0: bb73, 1: bb74, otherwise: bb9];
    }

    bb73: {
        StorageLive(_165);
        _165 = ((_155 as Continue).0: u128);
        _154 = _165;
        StorageDead(_165);
        StorageDead(_155);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &mut (*_4);
        StorageLive(_170);
        _170 = _154;
        _168 = <dyn SpotBalance as SpotBalance>::increase_balance(move _169, move _170) -> [return: bb76, unwind continue];
    }

    bb74: {
        StorageLive(_162);
        _162 = ((_155 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_164);
        _164 = _162;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _164) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_155);
        goto -> bb127;
    }

    bb76: {
        StorageDead(_170);
        StorageDead(_169);
        _167 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _168) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_168);
        _171 = discriminant(_167);
        switchInt(move _171) -> [0: bb78, 1: bb79, otherwise: bb9];
    }

    bb78: {
        StorageLive(_175);
        _175 = ((_167 as Continue).0: ());
        _166 = _175;
        StorageDead(_175);
        StorageDead(_167);
        StorageDead(_166);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = _154;
        StorageLive(_180);
        _180 = &mut (*_3);
        StorageLive(_181);
        _181 = &(*_2);
        _178 = increase_spot_balance(move _179, move _180, move _181) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_172);
        _172 = ((_167 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_174);
        _174 = _172;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _174) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_167);
        StorageDead(_166);
        goto -> bb127;
    }

    bb81: {
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        _177 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _178) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_178);
        _182 = discriminant(_177);
        switchInt(move _182) -> [0: bb83, 1: bb84, otherwise: bb9];
    }

    bb83: {
        StorageLive(_186);
        _186 = ((_177 as Continue).0: ());
        _176 = _186;
        StorageDead(_186);
        StorageDead(_177);
        StorageDead(_176);
        _11 = const ();
        StorageDead(_154);
        StorageDead(_149);
        goto -> bb87;
    }

    bb84: {
        StorageLive(_183);
        _183 = ((_177 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_185);
        _185 = _183;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _185) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_177);
        StorageDead(_176);
        goto -> bb127;
    }

    bb86: {
        StorageDead(_138);
        _11 = const ();
        goto -> bb87;
    }

    bb87: {
        StorageDead(_137);
        StorageDead(_67);
        StorageDead(_53);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_187);
        StorageLive(_188);
        _188 = _5;
        switchInt(move _188) -> [0: bb123, otherwise: bb89];
    }

    bb89: {
        StorageLive(_189);
        StorageLive(_190);
        _190 = &_2;
        StorageLive(_191);
        _280 = const _;
        _191 = &(*_280);
        _189 = <&SpotBalanceType as PartialEq>::eq(move _190, move _191) -> [return: bb90, unwind continue];
    }

    bb90: {
        switchInt(move _189) -> [0: bb122, otherwise: bb91];
    }

    bb91: {
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = ((*_3).11: u128);
        StorageLive(_198);
        _198 = &(*_3);
        StorageLive(_199);
        StorageLive(_200);
        _279 = const _;
        _200 = &(*_279);
        _199 = &(*_200);
        _196 = get_token_amount(move _197, move _198, move _199) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        _195 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _196) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_196);
        _202 = discriminant(_195);
        switchInt(move _202) -> [0: bb94, 1: bb95, otherwise: bb9];
    }

    bb94: {
        StorageLive(_206);
        _206 = ((_195 as Continue).0: u128);
        _194 = _206;
        StorageDead(_206);
        StorageDead(_200);
        StorageDead(_195);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = ((*_3).12: u128);
        StorageLive(_211);
        _211 = &(*_3);
        StorageLive(_212);
        StorageLive(_213);
        _278 = const _;
        _213 = &(*_278);
        _212 = &(*_213);
        _209 = get_token_amount(move _210, move _211, move _212) -> [return: bb97, unwind continue];
    }

    bb95: {
        StorageLive(_203);
        _203 = ((_195 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_205);
        _205 = _203;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _205) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_195);
        goto -> bb126;
    }

    bb97: {
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_210);
        _208 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _209) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_209);
        _215 = discriminant(_208);
        switchInt(move _215) -> [0: bb99, 1: bb100, otherwise: bb9];
    }

    bb99: {
        StorageLive(_219);
        _219 = ((_208 as Continue).0: u128);
        _207 = _219;
        StorageDead(_219);
        StorageDead(_213);
        StorageDead(_208);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = _194;
        StorageLive(_225);
        _225 = _207;
        _223 = Ge(move _224, move _225);
        switchInt(move _223) -> [0: bb103, otherwise: bb102];
    }

    bb100: {
        StorageLive(_216);
        _216 = ((_208 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_218);
        _218 = _216;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _218) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_208);
        goto -> bb125;
    }

    bb102: {
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_226);
        _226 = ();
        _222 = std::result::Result::<(), error::ErrorCode>::Ok(move _226);
        StorageDead(_226);
        goto -> bb117;
    }

    bb103: {
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_227);
        _227 = error::ErrorCode::SpotMarketInsufficientDeposits;
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _277 = const _;
        _238 = &(*_277);
        _237 = &(*_238);
        _236 = move _237 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_237);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &_227;
        _245 = &(*_246);
        _244 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _245) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_245);
        _243 = [move _244];
        StorageDead(_244);
        _242 = &_243;
        _241 = &(*_242);
        _240 = move _241 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_241);
        _235 = Arguments::<'_>::new_v1(move _236, move _240) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_240);
        StorageDead(_236);
        _234 = format(move _235) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_235);
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_238);
        _233 = move _234;
        StorageDead(_234);
        _232 = &_233;
        _231 = &(*_232);
        _230 = <String as Deref>::deref(move _231) -> [return: bb107, unwind: bb138];
    }

    bb107: {
        _229 = &(*_230);
        StorageDead(_231);
        _228 = solana_program::log::sol_log(move _229) -> [return: bb108, unwind: bb138];
    }

    bb108: {
        StorageDead(_229);
        drop(_233) -> [return: bb109, unwind: bb139];
    }

    bb109: {
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_228);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _276 = const _;
        _257 = &(*_276);
        _256 = &(*_257);
        _255 = move _256 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_256);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &_194;
        _264 = &(*_265);
        _263 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _264) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_264);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_207;
        _267 = &(*_268);
        _266 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _267) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_267);
        _262 = [move _263, move _266];
        StorageDead(_266);
        StorageDead(_263);
        _261 = &_262;
        _260 = &(*_261);
        _259 = move _260 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_260);
        _254 = Arguments::<'_>::new_v1(move _255, move _259) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_259);
        StorageDead(_255);
        _253 = format(move _254) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_254);
        StorageDead(_268);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_257);
        _252 = move _253;
        StorageDead(_253);
        _251 = &_252;
        _250 = &(*_251);
        _249 = <String as Deref>::deref(move _250) -> [return: bb114, unwind: bb137];
    }

    bb114: {
        _248 = &(*_249);
        StorageDead(_250);
        _247 = solana_program::log::sol_log(move _248) -> [return: bb115, unwind: bb137];
    }

    bb115: {
        StorageDead(_248);
        drop(_252) -> [return: bb116, unwind: bb139];
    }

    bb116: {
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_247);
        StorageLive(_269);
        _269 = _227;
        _222 = std::result::Result::<(), error::ErrorCode>::Err(move _269);
        StorageDead(_269);
        StorageDead(_227);
        goto -> bb117;
    }

    bb117: {
        StorageDead(_223);
        _221 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _222) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_222);
        _270 = discriminant(_221);
        switchInt(move _270) -> [0: bb119, 1: bb120, otherwise: bb9];
    }

    bb119: {
        StorageLive(_274);
        _274 = ((_221 as Continue).0: ());
        _220 = _274;
        StorageDead(_274);
        StorageDead(_221);
        StorageDead(_220);
        _187 = const ();
        StorageDead(_207);
        StorageDead(_194);
        goto -> bb124;
    }

    bb120: {
        StorageLive(_271);
        _271 = ((_221 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_273);
        _273 = _271;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _273) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb125;
    }

    bb122: {
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb123;
    }

    bb123: {
        _187 = const ();
        goto -> bb124;
    }

    bb124: {
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_275);
        _275 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _275);
        StorageDead(_275);
        StorageDead(_6);
        goto -> bb136;
    }

    bb125: {
        StorageDead(_207);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_194);
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_187);
        goto -> bb135;
    }

    bb127: {
        StorageDead(_154);
        StorageDead(_149);
        goto -> bb128;
    }

    bb128: {
        StorageDead(_137);
        goto -> bb131;
    }

    bb129: {
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb131;
    }

    bb131: {
        StorageDead(_67);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_53);
        goto -> bb134;
    }

    bb133: {
        StorageDead(_20);
        StorageDead(_13);
        goto -> bb134;
    }

    bb134: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb135;
    }

    bb135: {
        StorageDead(_6);
        goto -> bb136;
    }

    bb136: {
        return;
    }

    bb137 (cleanup): {
        drop(_252) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_233) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        resume;
    }
}
