// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_max_liquidation_fee` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_max_liquidation_fee(_1: &PerpMarket) -> std::result::Result<u32, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _2: u32;
    let mut _3: u32;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _5: std::result::Result<u32, error::ErrorCode>;
    let mut _6: u32;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _11: u32;
    let mut _12: u32;
    let mut _13: std::result::Result<u32, error::ErrorCode>;
    let mut _14: u32;
    let mut _15: u32;
    let mut _16: bool;
    let mut _17: u32;
    scope 1 {
        debug max_liquidation_fee => _2;
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).13: u32);
        _5 = <u32 as SafeMath>::safe_mul(move _6, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: u32);
        _3 = _11;
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = ((*_1).16: u32);
        StorageLive(_15);
        _16 = Eq(const _, const 0_u32);
        assert(!move _16, "attempt to divide `{}` by zero", const _) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_10);
        _10 = _8;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb11;
    }

    bb7: {
        _15 = Div(const _, const _);
        _13 = <u32 as SafeMath>::safe_mul(move _14, move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = std::result::Result::<u32, error::ErrorCode>::unwrap_or(move _13, const _) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_13);
        _2 = <u32 as Ord>::min(move _3, move _12) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_17);
        _17 = _2;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _17);
        StorageDead(_17);
        StorageDead(_2);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}
