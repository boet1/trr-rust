// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:324:1: 324:44>::invoke_new_order` before PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:324:1: 324:44>::invoke_new_order(_1: &SerumFulfillmentParams<'_, '_>, _2: controller::position::PositionDirection, _3: NewOrderInstructionV3) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug taker_direction => _2;
    debug order => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: anchor_lang::prelude::AccountInfo<'_>;
    let mut _5: isize;
    let mut _6: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _7: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _9: &serum_dex::instruction::MarketInstruction;
    let _10: serum_dex::instruction::MarketInstruction;
    let mut _11: serum_dex::instruction::NewOrderInstructionV3;
    let mut _13: anchor_lang::prelude::Pubkey;
    let mut _14: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _15: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _16: std::vec::Vec<u8>;
    let mut _17: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _18: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _19: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 12]>;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: *mut u8;
    let mut _23: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 12]>;
    let mut _24: anchor_lang::prelude::AccountMeta;
    let mut _25: anchor_lang::prelude::Pubkey;
    let mut _26: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _27: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _28: anchor_lang::prelude::AccountMeta;
    let mut _29: anchor_lang::prelude::Pubkey;
    let mut _30: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _31: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _32: anchor_lang::prelude::AccountMeta;
    let mut _33: anchor_lang::prelude::Pubkey;
    let mut _34: anchor_lang::prelude::AccountMeta;
    let mut _35: anchor_lang::prelude::Pubkey;
    let mut _36: anchor_lang::prelude::AccountMeta;
    let mut _37: anchor_lang::prelude::Pubkey;
    let mut _38: anchor_lang::prelude::AccountMeta;
    let mut _39: anchor_lang::prelude::Pubkey;
    let mut _40: anchor_lang::prelude::AccountMeta;
    let mut _41: anchor_lang::prelude::Pubkey;
    let mut _42: anchor_lang::prelude::AccountMeta;
    let mut _43: anchor_lang::prelude::Pubkey;
    let mut _44: anchor_lang::prelude::AccountMeta;
    let mut _45: anchor_lang::prelude::Pubkey;
    let mut _46: anchor_lang::prelude::AccountMeta;
    let mut _47: anchor_lang::prelude::Pubkey;
    let mut _48: anchor_lang::prelude::AccountMeta;
    let mut _49: anchor_lang::prelude::Pubkey;
    let mut _50: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _51: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _52: anchor_lang::prelude::AccountMeta;
    let mut _53: anchor_lang::prelude::Pubkey;
    let mut _54: bool;
    let mut _55: &&anchor_lang::prelude::Pubkey;
    let mut _56: &&anchor_lang::prelude::Pubkey;
    let _57: &anchor_lang::prelude::Pubkey;
    let _58: anchor_lang::prelude::Pubkey;
    let _59: ();
    let mut _60: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _61: anchor_lang::prelude::AccountMeta;
    let mut _62: anchor_lang::prelude::Pubkey;
    let mut _64: anchor_lang::prelude::AccountInfo<'_>;
    let mut _65: &anchor_lang::prelude::AccountInfo<'_>;
    let _66: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _67: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _68: anchor_lang::prelude::AccountInfo<'_>;
    let mut _69: &anchor_lang::prelude::AccountInfo<'_>;
    let _70: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _71: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _72: anchor_lang::prelude::AccountInfo<'_>;
    let mut _73: &anchor_lang::prelude::AccountInfo<'_>;
    let _74: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _75: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _76: anchor_lang::prelude::AccountInfo<'_>;
    let mut _77: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _78: anchor_lang::prelude::AccountInfo<'_>;
    let mut _79: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _80: anchor_lang::prelude::AccountInfo<'_>;
    let mut _81: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _82: anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _84: anchor_lang::prelude::AccountInfo<'_>;
    let mut _85: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _86: anchor_lang::prelude::AccountInfo<'_>;
    let mut _87: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _88: anchor_lang::prelude::AccountInfo<'_>;
    let mut _89: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _90: anchor_lang::prelude::AccountInfo<'_>;
    let mut _91: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _92: anchor_lang::prelude::AccountInfo<'_>;
    let mut _93: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _94: anchor_lang::prelude::AccountInfo<'_>;
    let mut _95: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _97: &u8;
    let _98: &u8;
    let _100: [&[&[u8]]; 1];
    let mut _101: &[&[u8]];
    let _102: &[&[u8]];
    let mut _103: &[&[u8]; 2];
    let mut _104: std::ops::RangeFull;
    let mut _105: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _106: &solana_program::instruction::Instruction;
    let _107: &solana_program::instruction::Instruction;
    let mut _108: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _109: &[anchor_lang::prelude::AccountInfo<'_>; 13];
    let _110: &[anchor_lang::prelude::AccountInfo<'_>; 13];
    let mut _111: &[&[&[u8]]];
    let mut _112: &[&[&[u8]]; 1];
    let mut _113: {closure@programs/drift/src/state/fulfillment_params/serum.rs:384:22: 384:25};
    let mut _115: anchor_lang::prelude::AccountInfo<'_>;
    let mut _116: &anchor_lang::prelude::AccountInfo<'_>;
    let _117: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _118: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _119: anchor_lang::prelude::AccountInfo<'_>;
    let mut _120: &anchor_lang::prelude::AccountInfo<'_>;
    let _121: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _122: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _123: anchor_lang::prelude::AccountInfo<'_>;
    let mut _124: &anchor_lang::prelude::AccountInfo<'_>;
    let _125: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _126: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _127: anchor_lang::prelude::AccountInfo<'_>;
    let mut _128: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _129: anchor_lang::prelude::AccountInfo<'_>;
    let mut _130: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _131: anchor_lang::prelude::AccountInfo<'_>;
    let mut _132: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _133: anchor_lang::prelude::AccountInfo<'_>;
    let mut _134: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _135: anchor_lang::prelude::AccountInfo<'_>;
    let mut _136: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _137: anchor_lang::prelude::AccountInfo<'_>;
    let mut _138: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _139: anchor_lang::prelude::AccountInfo<'_>;
    let mut _140: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _141: anchor_lang::prelude::AccountInfo<'_>;
    let mut _142: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _143: anchor_lang::prelude::AccountInfo<'_>;
    let mut _144: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _146: &u8;
    let _147: &u8;
    let _149: [&[&[u8]]; 1];
    let mut _150: &[&[u8]];
    let _151: &[&[u8]];
    let mut _152: &[&[u8]; 2];
    let mut _153: std::ops::RangeFull;
    let mut _154: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _155: &solana_program::instruction::Instruction;
    let _156: &solana_program::instruction::Instruction;
    let mut _157: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _158: &[anchor_lang::prelude::AccountInfo<'_>; 12];
    let _159: &[anchor_lang::prelude::AccountInfo<'_>; 12];
    let mut _160: &[&[&[u8]]];
    let mut _161: &[&[&[u8]]; 1];
    let mut _162: {closure@programs/drift/src/state/fulfillment_params/serum.rs:412:22: 412:25};
    let mut _163: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _164: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _165: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _166: &anchor_lang::prelude::Pubkey;
    let mut _167: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _168: &anchor_lang::prelude::Pubkey;
    let mut _169: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _170: &anchor_lang::prelude::Pubkey;
    let mut _171: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _172: &anchor_lang::prelude::Pubkey;
    let mut _173: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _174: &anchor_lang::prelude::Pubkey;
    let mut _175: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _176: &anchor_lang::prelude::Pubkey;
    let mut _177: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _178: &anchor_lang::prelude::Pubkey;
    let mut _179: &anchor_lang::prelude::Pubkey;
    let mut _180: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _181: &anchor_lang::prelude::Pubkey;
    let mut _182: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _183: &anchor_lang::prelude::Pubkey;
    let mut _184: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _185: &anchor_lang::prelude::Pubkey;
    let mut _186: &anchor_lang::prelude::Pubkey;
    let mut _187: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _188: &anchor_lang::prelude::Pubkey;
    let mut _189: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _190: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _191: &anchor_lang::prelude::Pubkey;
    let mut _192: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _193: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _194: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _195: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _196: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _197: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _198: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _199: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _200: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _201: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _202: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _203: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _204: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _205: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _206: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _207: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _208: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _209: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _210: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _211: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _212: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _213: bool;
    let mut _214: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _215: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _216: *const [anchor_lang::prelude::AccountMeta; 12];
    scope 1 {
        debug drift_vault => _4;
        let _8: std::vec::Vec<u8>;
        scope 2 {
            debug data => _8;
            let mut _12: solana_program::instruction::Instruction;
            let mut _217: *const ();
            let mut _218: usize;
            let mut _219: usize;
            let mut _220: usize;
            let mut _221: usize;
            let mut _222: bool;
            scope 3 {
                debug instruction => _12;
                let _63: [anchor_lang::prelude::AccountInfo<'_>; 13];
                let _114: [anchor_lang::prelude::AccountInfo<'_>; 12];
                scope 5 {
                    debug account_infos => _63;
                    let _96: [&[u8]; 2];
                    scope 6 {
                        debug signer_seeds => _96;
                        let _99: &[&[&[u8]]; 1];
                        scope 7 {
                            debug signers_seeds => _99;
                        }
                    }
                }
                scope 8 {
                    debug account_infos => _114;
                    let _145: [&[u8]; 2];
                    scope 9 {
                        debug signer_seeds => _145;
                        let _148: &[&[&[u8]]; 1];
                        scope 10 {
                            debug signers_seeds => _148;
                        }
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _213 = const false;
        StorageLive(_4);
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_7);
        _163 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _214 = (((_163.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _7 = &(*_214);
        _4 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _7) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_6);
        _164 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _215 = (((_164.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _6 = &(*_215);
        _4 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_6);
        goto -> bb6;
    }

    bb5: {
        StorageDead(_7);
        goto -> bb6;
    }

    bb6: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = move _3;
        _10 = NewOrderV3(move _11);
        _9 = &_10;
        StorageDead(_11);
        _8 = MarketInstruction::pack(move _9) -> [return: bb7, unwind: bb105];
    }

    bb7: {
        _213 = const true;
        StorageDead(_9);
        drop(_10) -> [return: bb8, unwind: bb109];
    }

    bb8: {
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_1);
        _14 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _15) -> [return: bb9, unwind: bb109];
    }

    bb9: {
        StorageDead(_15);
        _165 = deref_copy ((*_14).0: &anchor_lang::prelude::AccountInfo<'_>);
        _166 = deref_copy ((*_165).0: &anchor_lang::prelude::Pubkey);
        _13 = (*_166);
        StorageLive(_16);
        _213 = const false;
        _16 = move _8;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _20 = SizeOf([anchor_lang::prelude::AccountMeta; 12]);
        _21 = AlignOf([anchor_lang::prelude::AccountMeta; 12]);
        _22 = alloc::alloc::exchange_malloc(move _20, move _21) -> [return: bb10, unwind: bb104];
    }

    bb10: {
        StorageLive(_23);
        _23 = ShallowInitBox(move _22, [anchor_lang::prelude::AccountMeta; 12]);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_1);
        _26 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _27) -> [return: bb11, unwind: bb103];
    }

    bb11: {
        StorageDead(_27);
        _167 = deref_copy ((*_26).1: &anchor_lang::prelude::AccountInfo<'_>);
        _168 = deref_copy ((*_167).0: &anchor_lang::prelude::Pubkey);
        _25 = (*_168);
        _24 = anchor_lang::prelude::AccountMeta::new(move _25, const false) -> [return: bb12, unwind: bb103];
    }

    bb12: {
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_1);
        _30 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _31) -> [return: bb13, unwind: bb103];
    }

    bb13: {
        StorageDead(_31);
        _169 = deref_copy ((*_30).2: &anchor_lang::prelude::AccountInfo<'_>);
        _170 = deref_copy ((*_169).0: &anchor_lang::prelude::Pubkey);
        _29 = (*_170);
        _28 = anchor_lang::prelude::AccountMeta::new(move _29, const false) -> [return: bb14, unwind: bb103];
    }

    bb14: {
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        _171 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _172 = deref_copy ((*_171).0: &anchor_lang::prelude::Pubkey);
        _33 = (*_172);
        _32 = anchor_lang::prelude::AccountMeta::new(move _33, const false) -> [return: bb15, unwind: bb103];
    }

    bb15: {
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        _173 = deref_copy ((*_1).3: &anchor_lang::prelude::AccountInfo<'_>);
        _174 = deref_copy ((*_173).0: &anchor_lang::prelude::Pubkey);
        _35 = (*_174);
        _34 = anchor_lang::prelude::AccountMeta::new(move _35, const false) -> [return: bb16, unwind: bb103];
    }

    bb16: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _175 = deref_copy ((*_1).4: &anchor_lang::prelude::AccountInfo<'_>);
        _176 = deref_copy ((*_175).0: &anchor_lang::prelude::Pubkey);
        _37 = (*_176);
        _36 = anchor_lang::prelude::AccountMeta::new(move _37, const false) -> [return: bb17, unwind: bb103];
    }

    bb17: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        _177 = deref_copy ((*_1).5: &anchor_lang::prelude::AccountInfo<'_>);
        _178 = deref_copy ((*_177).0: &anchor_lang::prelude::Pubkey);
        _39 = (*_178);
        _38 = anchor_lang::prelude::AccountMeta::new(move _39, const false) -> [return: bb18, unwind: bb103];
    }

    bb18: {
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        _179 = deref_copy (_4.0: &anchor_lang::prelude::Pubkey);
        _41 = (*_179);
        _40 = anchor_lang::prelude::AccountMeta::new(move _41, const false) -> [return: bb19, unwind: bb103];
    }

    bb19: {
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _180 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _181 = deref_copy ((*_180).0: &anchor_lang::prelude::Pubkey);
        _43 = (*_181);
        _42 = anchor_lang::prelude::AccountMeta::new_readonly(move _43, const true) -> [return: bb20, unwind: bb103];
    }

    bb20: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        _182 = deref_copy ((*_1).6: &anchor_lang::prelude::AccountInfo<'_>);
        _183 = deref_copy ((*_182).0: &anchor_lang::prelude::Pubkey);
        _45 = (*_183);
        _44 = anchor_lang::prelude::AccountMeta::new(move _45, const false) -> [return: bb21, unwind: bb103];
    }

    bb21: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _184 = deref_copy ((*_1).7: &anchor_lang::prelude::AccountInfo<'_>);
        _185 = deref_copy ((*_184).0: &anchor_lang::prelude::Pubkey);
        _47 = (*_185);
        _46 = anchor_lang::prelude::AccountMeta::new(move _47, const false) -> [return: bb22, unwind: bb103];
    }

    bb22: {
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_1).8: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _50 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _51) -> [return: bb23, unwind: bb103];
    }

    bb23: {
        StorageDead(_51);
        _186 = deref_copy ((*_50).0: &anchor_lang::prelude::Pubkey);
        _49 = (*_186);
        _48 = anchor_lang::prelude::AccountMeta::new_readonly(move _49, const false) -> [return: bb24, unwind: bb103];
    }

    bb24: {
        StorageDead(_49);
        StorageLive(_52);
        StorageLive(_53);
        _187 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _188 = deref_copy ((*_187).0: &anchor_lang::prelude::Pubkey);
        _53 = (*_188);
        _52 = anchor_lang::prelude::AccountMeta::new_readonly(move _53, const false) -> [return: bb25, unwind: bb103];
    }

    bb25: {
        StorageDead(_53);
        _216 = (((_23.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 12]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 12]>).0: *const [anchor_lang::prelude::AccountMeta; 12]);
        _217 = _216 as *const () (PtrToPtr);
        _218 = _217 as usize (Transmute);
        _219 = AlignOf([anchor_lang::prelude::AccountMeta; 12]);
        _220 = Sub(_219, const 1_usize);
        _221 = BitAnd(_218, _220);
        _222 = Eq(_221, const 0_usize);
        assert(_222, "misaligned pointer dereference: address must be a multiple of {} but is {}", _219, _218) -> [success: bb110, unwind unreachable];
    }

    bb26: {
        StorageDead(_18);
        _12 = Instruction { program_id: move _13, accounts: move _17, data: move _16 };
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_50);
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_14);
        StorageLive(_54);
        StorageLive(_55);
        _189 = deref_copy ((*_1).11: &anchor_lang::prelude::AccountInfo<'_>);
        _55 = &((*_189).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb27, unwind: bb102];
    }

    bb27: {
        _57 = &_58;
        _56 = &_57;
        _54 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _55, move _56) -> [return: bb28, unwind: bb102];
    }

    bb28: {
        switchInt(move _54) -> [0: bb53, otherwise: bb29];
    }

    bb29: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut (_12.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        StorageLive(_61);
        StorageLive(_62);
        _190 = deref_copy ((*_1).11: &anchor_lang::prelude::AccountInfo<'_>);
        _191 = deref_copy ((*_190).0: &anchor_lang::prelude::Pubkey);
        _62 = (*_191);
        _61 = anchor_lang::prelude::AccountMeta::new_readonly(move _62, const false) -> [return: bb30, unwind: bb102];
    }

    bb30: {
        StorageDead(_62);
        _59 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _60, move _61) -> [return: bb31, unwind: bb102];
    }

    bb31: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &(*_1);
        _66 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _67) -> [return: bb32, unwind: bb102];
    }

    bb32: {
        StorageDead(_67);
        _192 = deref_copy ((*_66).0: &anchor_lang::prelude::AccountInfo<'_>);
        _65 = &(*_192);
        _64 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _65) -> [return: bb33, unwind: bb102];
    }

    bb33: {
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_1);
        _70 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _71) -> [return: bb34, unwind: bb101];
    }

    bb34: {
        StorageDead(_71);
        _193 = deref_copy ((*_70).1: &anchor_lang::prelude::AccountInfo<'_>);
        _69 = &(*_193);
        _68 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _69) -> [return: bb35, unwind: bb101];
    }

    bb35: {
        StorageDead(_69);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &(*_1);
        _74 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _75) -> [return: bb36, unwind: bb100];
    }

    bb36: {
        StorageDead(_75);
        _194 = deref_copy ((*_74).2: &anchor_lang::prelude::AccountInfo<'_>);
        _73 = &(*_194);
        _72 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _73) -> [return: bb37, unwind: bb100];
    }

    bb37: {
        StorageDead(_73);
        StorageLive(_76);
        StorageLive(_77);
        _195 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _77 = &(*_195);
        _76 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _77) -> [return: bb38, unwind: bb99];
    }

    bb38: {
        StorageDead(_77);
        StorageLive(_78);
        StorageLive(_79);
        _196 = deref_copy ((*_1).3: &anchor_lang::prelude::AccountInfo<'_>);
        _79 = &(*_196);
        _78 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _79) -> [return: bb39, unwind: bb98];
    }

    bb39: {
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        _197 = deref_copy ((*_1).4: &anchor_lang::prelude::AccountInfo<'_>);
        _81 = &(*_197);
        _80 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _81) -> [return: bb40, unwind: bb97];
    }

    bb40: {
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        _198 = deref_copy ((*_1).5: &anchor_lang::prelude::AccountInfo<'_>);
        _83 = &(*_198);
        _82 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _83) -> [return: bb41, unwind: bb96];
    }

    bb41: {
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_4;
        _84 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _85) -> [return: bb42, unwind: bb95];
    }

    bb42: {
        StorageDead(_85);
        StorageLive(_86);
        StorageLive(_87);
        _199 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _87 = &(*_199);
        _86 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _87) -> [return: bb43, unwind: bb94];
    }

    bb43: {
        StorageDead(_87);
        StorageLive(_88);
        StorageLive(_89);
        _200 = deref_copy ((*_1).6: &anchor_lang::prelude::AccountInfo<'_>);
        _89 = &(*_200);
        _88 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _89) -> [return: bb44, unwind: bb93];
    }

    bb44: {
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        _201 = deref_copy ((*_1).7: &anchor_lang::prelude::AccountInfo<'_>);
        _91 = &(*_201);
        _90 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _91) -> [return: bb45, unwind: bb92];
    }

    bb45: {
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &((*_1).8: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _92 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _93) -> [return: bb46, unwind: bb91];
    }

    bb46: {
        StorageDead(_93);
        StorageLive(_94);
        StorageLive(_95);
        _202 = deref_copy ((*_1).11: &anchor_lang::prelude::AccountInfo<'_>);
        _95 = &(*_202);
        _94 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _95) -> [return: bb47, unwind: bb90];
    }

    bb47: {
        StorageDead(_95);
        _63 = [move _64, move _68, move _72, move _76, move _78, move _80, move _82, move _84, move _86, move _88, move _90, move _92, move _94];
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_74);
        StorageDead(_70);
        StorageDead(_66);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &((*_1).13: u8);
        _97 = &(*_98);
        _96 = get_signer_seeds(move _97) -> [return: bb48, unwind: bb89];
    }

    bb48: {
        StorageDead(_97);
        StorageDead(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &_96;
        StorageLive(_104);
        _104 = RangeFull;
        _102 = <[&[u8]; 2] as Index<RangeFull>>::index(move _103, move _104) -> [return: bb49, unwind: bb89];
    }

    bb49: {
        StorageDead(_104);
        StorageDead(_103);
        _101 = &(*_102);
        _100 = [move _101];
        StorageDead(_101);
        _99 = &_100;
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_12;
        _106 = &(*_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_63;
        _109 = &(*_110);
        _108 = move _109 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_99);
        _111 = move _112 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_112);
        _105 = invoke_signed_unchecked(move _106, move _108, move _111) -> [return: bb50, unwind: bb89];
    }

    bb50: {
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_106);
        StorageLive(_113);
        _113 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:384:22: 384:25};
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:384:22: 384:25}>(move _105, move _113) -> [return: bb51, unwind: bb89];
    }

    bb51: {
        StorageDead(_113);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        drop(_63) -> [return: bb52, unwind: bb102];
    }

    bb52: {
        StorageDead(_63);
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb74;
    }

    bb53: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &(*_1);
        _117 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _118) -> [return: bb54, unwind: bb102];
    }

    bb54: {
        StorageDead(_118);
        _203 = deref_copy ((*_117).0: &anchor_lang::prelude::AccountInfo<'_>);
        _116 = &(*_203);
        _115 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _116) -> [return: bb55, unwind: bb102];
    }

    bb55: {
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_1);
        _121 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _122) -> [return: bb56, unwind: bb88];
    }

    bb56: {
        StorageDead(_122);
        _204 = deref_copy ((*_121).1: &anchor_lang::prelude::AccountInfo<'_>);
        _120 = &(*_204);
        _119 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _120) -> [return: bb57, unwind: bb88];
    }

    bb57: {
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &(*_1);
        _125 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _126) -> [return: bb58, unwind: bb87];
    }

    bb58: {
        StorageDead(_126);
        _205 = deref_copy ((*_125).2: &anchor_lang::prelude::AccountInfo<'_>);
        _124 = &(*_205);
        _123 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _124) -> [return: bb59, unwind: bb87];
    }

    bb59: {
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        _206 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _128 = &(*_206);
        _127 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _128) -> [return: bb60, unwind: bb86];
    }

    bb60: {
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _207 = deref_copy ((*_1).3: &anchor_lang::prelude::AccountInfo<'_>);
        _130 = &(*_207);
        _129 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _130) -> [return: bb61, unwind: bb85];
    }

    bb61: {
        StorageDead(_130);
        StorageLive(_131);
        StorageLive(_132);
        _208 = deref_copy ((*_1).4: &anchor_lang::prelude::AccountInfo<'_>);
        _132 = &(*_208);
        _131 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _132) -> [return: bb62, unwind: bb84];
    }

    bb62: {
        StorageDead(_132);
        StorageLive(_133);
        StorageLive(_134);
        _209 = deref_copy ((*_1).5: &anchor_lang::prelude::AccountInfo<'_>);
        _134 = &(*_209);
        _133 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _134) -> [return: bb63, unwind: bb83];
    }

    bb63: {
        StorageDead(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_4;
        _135 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _136) -> [return: bb64, unwind: bb82];
    }

    bb64: {
        StorageDead(_136);
        StorageLive(_137);
        StorageLive(_138);
        _210 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _138 = &(*_210);
        _137 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _138) -> [return: bb65, unwind: bb81];
    }

    bb65: {
        StorageDead(_138);
        StorageLive(_139);
        StorageLive(_140);
        _211 = deref_copy ((*_1).6: &anchor_lang::prelude::AccountInfo<'_>);
        _140 = &(*_211);
        _139 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _140) -> [return: bb66, unwind: bb80];
    }

    bb66: {
        StorageDead(_140);
        StorageLive(_141);
        StorageLive(_142);
        _212 = deref_copy ((*_1).7: &anchor_lang::prelude::AccountInfo<'_>);
        _142 = &(*_212);
        _141 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _142) -> [return: bb67, unwind: bb79];
    }

    bb67: {
        StorageDead(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &((*_1).8: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _143 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _144) -> [return: bb68, unwind: bb78];
    }

    bb68: {
        StorageDead(_144);
        _114 = [move _115, move _119, move _123, move _127, move _129, move _131, move _133, move _135, move _137, move _139, move _141, move _143];
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_115);
        StorageDead(_125);
        StorageDead(_121);
        StorageDead(_117);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &((*_1).13: u8);
        _146 = &(*_147);
        _145 = get_signer_seeds(move _146) -> [return: bb69, unwind: bb77];
    }

    bb69: {
        StorageDead(_146);
        StorageDead(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_145;
        StorageLive(_153);
        _153 = RangeFull;
        _151 = <[&[u8]; 2] as Index<RangeFull>>::index(move _152, move _153) -> [return: bb70, unwind: bb77];
    }

    bb70: {
        StorageDead(_153);
        StorageDead(_152);
        _150 = &(*_151);
        _149 = [move _150];
        StorageDead(_150);
        _148 = &_149;
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &_12;
        _155 = &(*_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &_114;
        _158 = &(*_159);
        _157 = move _158 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_158);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &(*_148);
        _160 = move _161 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_161);
        _154 = invoke_signed_unchecked(move _155, move _157, move _160) -> [return: bb71, unwind: bb77];
    }

    bb71: {
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_155);
        StorageLive(_162);
        _162 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:412:22: 412:25};
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:412:22: 412:25}>(move _154, move _162) -> [return: bb72, unwind: bb77];
    }

    bb72: {
        StorageDead(_162);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_145);
        drop(_114) -> [return: bb73, unwind: bb102];
    }

    bb73: {
        StorageDead(_114);
        StorageDead(_159);
        StorageDead(_156);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_54);
        drop(_12) -> [return: bb75, unwind: bb109];
    }

    bb75: {
        StorageDead(_12);
        _213 = const false;
        StorageDead(_8);
        drop(_4) -> [return: bb76, unwind: bb107];
    }

    bb76: {
        StorageDead(_4);
        return;
    }

    bb77 (cleanup): {
        drop(_114) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_141) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_139) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_137) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_135) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_133) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_131) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_129) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_127) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_123) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_119) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_115) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_63) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_92) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_90) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_88) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_86) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_84) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_82) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_80) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_78) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_76) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_72) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_68) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_64) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_12) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_23) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_16) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_10) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_4) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        resume;
    }

    bb108 (cleanup): {
        drop(_8) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_213) -> [0: bb106, otherwise: bb108];
    }

    bb110: {
        (*_216) = [move _24, move _28, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _52];
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_24);
        _19 = move _23;
        _18 = move _19 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_23);
        StorageDead(_19);
        _17 = std::slice::<impl [anchor_lang::prelude::AccountMeta]>::into_vec::<std::alloc::Global>(move _18) -> [return: bb26, unwind: bb104];
    }
}
