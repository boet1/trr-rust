// MIR for `if_staker::handle_transfer_protocol_if_shares_to_revenue_pool` after PreCodegen

fn if_staker::handle_transfer_protocol_if_shares_to_revenue_pool(_1: anchor_lang::context::Context<'_, '_, '_, '_, if_staker::TransferProtocolIfSharesToRevenuePool<'_>>, _2: u16, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _7: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _8: isize;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _15: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _16: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _17: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _19: instructions::optional_accounts::AccountMaps<'_>;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _21: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _22: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _23: &std::collections::BTreeSet<u16>;
    let _24: &std::collections::BTreeSet<u16>;
    let _25: std::collections::BTreeSet<u16>;
    let mut _26: &std::collections::BTreeSet<u16>;
    let _27: &std::collections::BTreeSet<u16>;
    let _28: std::collections::BTreeSet<u16>;
    let mut _29: std::vec::Vec<u16>;
    let mut _30: std::boxed::Box<[u16]>;
    let mut _31: std::boxed::Box<[u16; 1]>;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: *mut u8;
    let mut _35: std::boxed::Box<[u16; 1]>;
    let mut _36: u16;
    let mut _37: u64;
    let mut _38: std::option::Option<state::state::OracleGuardRails>;
    let mut _39: state::state::OracleGuardRails;
    let mut _40: &state::state::State;
    let mut _41: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _49: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _50: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _58: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _59: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _60: &u16;
    let _61: &u16;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _69: &anchor_spl::token_interface::TokenAccount;
    let _70: &anchor_spl::token_interface::TokenAccount;
    let mut _71: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>>;
    let mut _74: std::result::Result<std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>, anchor_lang::error::Error>;
    let mut _75: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _83: std::result::Result<(), error::ErrorCode>;
    let mut _84: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _85: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _86: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _87: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _88: &mut state::spot_market::SpotMarket;
    let mut _89: &mut state::spot_market::SpotMarket;
    let mut _90: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _91: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _92: u64;
    let mut _93: u64;
    let mut _94: i64;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _100: ();
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _102: std::result::Result<(), anchor_lang::error::Error>;
    let mut _103: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _104: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _105: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _106: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _107: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _108: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let _109: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _110: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _111: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _112: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let _113: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _114: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _115: &anchor_lang::prelude::AccountInfo<'_>;
    let _116: &anchor_lang::prelude::AccountInfo<'_>;
    let _117: anchor_lang::prelude::AccountInfo<'_>;
    let mut _118: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _119: u8;
    let mut _120: &state::state::State;
    let mut _121: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _122: u64;
    let mut _123: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _124: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _125: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _126: bool;
    let mut _127: &state::spot_market::SpotMarket;
    let _128: &state::spot_market::SpotMarket;
    let mut _129: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _130: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _136: ();
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _138: std::result::Result<(), anchor_lang::error::Error>;
    let mut _139: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _145: i64;
    let mut _146: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _147: std::result::Result<i64, error::ErrorCode>;
    let mut _148: &state::spot_market::SpotMarket;
    let _149: &state::spot_market::SpotMarket;
    let mut _150: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _151: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _152: u64;
    let mut _153: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _154: &anchor_spl::token_interface::TokenAccount;
    let _155: &anchor_spl::token_interface::TokenAccount;
    let mut _156: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _157: isize;
    let mut _159: !;
    let mut _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _162: ();
    let mut _163: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>;
    let mut _164: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _165: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _166: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>;
    let mut _167: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _168: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>;
    let mut _169: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>;
    let mut _170: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>;
    let mut _171: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _172: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>;
    let mut _173: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _174: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>;
    let mut _175: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _176: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>;
    let mut _177: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _178: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>;
    let mut _179: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: *const [u16; 1];
    let mut _212: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _213: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _214: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _215: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _216: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _217: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _218: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug state => _4;
        let _5: anchor_lang::prelude::Clock;
        let _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _12: anchor_lang::prelude::Clock;
        scope 2 {
            debug clock => _5;
            let _13: i64;
            scope 7 {
                debug now => _13;
                let _14: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                scope 8 {
                    debug remaining_accounts => _14;
                    let _18: state::spot_market_map::SpotMarketMap<'_>;
                    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _46: instructions::optional_accounts::AccountMaps<'_>;
                    let mut _219: *const ();
                    let mut _220: usize;
                    let mut _221: usize;
                    let mut _222: usize;
                    let mut _223: usize;
                    let mut _224: bool;
                    scope 9 {
                        debug spot_market_map => _18;
                        let _47: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _55: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        scope 15 {
                            debug mint => _47;
                            let mut _56: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _66: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                            scope 20 {
                                debug spot_market => _56;
                                let _67: u64;
                                scope 25 {
                                    debug insurance_fund_amount_before => _67;
                                    let mut _72: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
                                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _80: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
                                    scope 26 {
                                        debug if_rebalance_config => _72;
                                        let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _99: ();
                                        let _132: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _135: ();
                                        let _141: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _144: ();
                                        let _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _161: i64;
                                        scope 31 {
                                            debug residual => _96;
                                            scope 32 {
                                            }
                                        }
                                        scope 33 {
                                            debug val => _99;
                                            scope 34 {
                                            }
                                        }
                                        scope 35 {
                                            debug residual => _132;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _135;
                                            scope 38 {
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _141;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _144;
                                            scope 42 {
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _158;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _161;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 27 {
                                        debug residual => _77;
                                        scope 28 {
                                        }
                                    }
                                    scope 29 {
                                        debug val => _80;
                                        scope 30 {
                                        }
                                    }
                                }
                            }
                            scope 21 {
                                debug residual => _63;
                                scope 22 {
                                }
                            }
                            scope 23 {
                                debug val => _66;
                                scope 24 {
                                }
                            }
                        }
                        scope 16 {
                            debug residual => _52;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _55;
                            scope 19 {
                            }
                        }
                    }
                    scope 10 {
                    }
                    scope 11 {
                        debug residual => _43;
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug val => _46;
                        scope 14 {
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _12;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _163 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>);
        _4 = &((*_163).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _7) -> [return: bb2, unwind: bb102];
    }

    bb2: {
        StorageDead(_7);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_6 as Continue).0: anchor_lang::prelude::Clock);
        _5 = move _12;
        StorageDead(_12);
        _180 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_13);
        _13 = (_5.4: i64);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _164 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _17 = &(*_164);
        _16 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _11) -> [return: bb6, unwind: bb111];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _202 = discriminant(_6);
        StorageDead(_6);
        goto -> bb90;
    }

    bb7: {
        StorageDead(_17);
        _15 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        _14 = &mut _15;
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &mut (*_14);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = BTreeSet::<u16>::new() -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = &_25;
        _23 = &(*_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _32 = SizeOf([u16; 1]);
        _33 = AlignOf([u16; 1]);
        _34 = alloc::alloc::exchange_malloc(move _32, move _33) -> [return: bb10, unwind: bb101];
    }

    bb10: {
        StorageLive(_35);
        _35 = ShallowInitBox(move _34, [u16; 1]);
        StorageLive(_36);
        _36 = _2;
        _211 = (((_35.0: std::ptr::Unique<[u16; 1]>).0: std::ptr::NonNull<[u16; 1]>).0: *const [u16; 1]);
        _219 = _211 as *const () (PtrToPtr);
        _220 = _219 as usize (Transmute);
        _221 = AlignOf([u16; 1]);
        _222 = Sub(_221, const 1_usize);
        _223 = BitAnd(_220, _222);
        _224 = Eq(_223, const 0_usize);
        assert(_224, "misaligned pointer dereference: address must be a multiple of {} but is {}", _221, _220) -> [success: bb112, unwind unreachable];
    }

    bb11: {
        StorageDead(_30);
        _28 = get_writable_spot_market_set_from_many(move _29) -> [return: bb12, unwind: bb101];
    }

    bb12: {
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        StorageLive(_37);
        _37 = (_5.0: u64);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _165 = deref_copy (*_4);
        _212 = (((_165.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _41 = &(*_212);
        _40 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _41) -> [return: bb13, unwind: bb100];
    }

    bb13: {
        StorageDead(_41);
        _39 = ((*_40).7: state::state::OracleGuardRails);
        _38 = Option::<state::state::OracleGuardRails>::Some(move _39);
        StorageDead(_39);
        _21 = load_maps(move _22, move _23, move _26, move _37, move _38) -> [return: bb14, unwind: bb100];
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _21) -> [return: bb15, unwind: bb100];
    }

    bb15: {
        StorageDead(_21);
        _42 = discriminant(_20);
        switchInt(move _42) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_46);
        _46 = move ((_20 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _19 = move _46;
        StorageDead(_46);
        StorageLive(_18);
        _18 = move (_19.1: state::spot_market_map::SpotMarketMap<'_>);
        drop((_19.0: state::perp_market_map::PerpMarketMap<'_>)) -> [return: bb105, unwind: bb104];
    }

    bb17: {
        StorageLive(_43);
        _43 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb18, unwind: bb110];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_43);
        _182 = discriminant(_20);
        StorageDead(_40);
        drop(_28) -> [return: bb87, unwind: bb101];
    }

    bb19: {
        StorageDead(_28);
        StorageDead(_27);
        drop(_25) -> [return: bb20, unwind: bb99];
    }

    bb20: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &mut (*_14);
        _49 = get_token_mint(move _50) -> [return: bb21, unwind: bb99];
    }

    bb21: {
        StorageDead(_50);
        _48 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _49) -> [return: bb22, unwind: bb99];
    }

    bb22: {
        StorageDead(_49);
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_55);
        _55 = move ((_48 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _47 = move _55;
        StorageDead(_55);
        StorageDead(_48);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_18;
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_2;
        _60 = &(*_61);
        _58 = SpotMarketMap::<'_>::get_ref_mut(move _59, move _60) -> [return: bb26, unwind: bb99];
    }

    bb24: {
        StorageLive(_52);
        _52 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb25, unwind: bb99];
    }

    bb25: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_48);
        goto -> bb85;
    }

    bb26: {
        StorageDead(_60);
        StorageDead(_59);
        _57 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _58) -> [return: bb27, unwind: bb99];
    }

    bb27: {
        StorageDead(_58);
        _62 = discriminant(_57);
        switchInt(move _62) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_66);
        _66 = move ((_57 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _56 = move _66;
        StorageDead(_66);
        _188 = discriminant(_57);
        StorageDead(_61);
        StorageDead(_57);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _166 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>);
        _167 = deref_copy ((*_166).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _213 = (((_167.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _71 = &(*_213);
        _70 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _71) -> [return: bb31, unwind: bb96];
    }

    bb29: {
        StorageLive(_63);
        _63 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb30, unwind: bb109];
    }

    bb30: {
        StorageDead(_65);
        StorageDead(_63);
        _186 = discriminant(_57);
        StorageDead(_61);
        StorageDead(_57);
        goto -> bb84;
    }

    bb31: {
        _69 = &(*_70);
        _68 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _69) -> [return: bb32, unwind: bb96];
    }

    bb32: {
        StorageDead(_71);
        StorageDead(_69);
        _67 = ((*_68).2: u64);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _168 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>);
        _75 = &((*_168).4: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _74 = anchor_lang::prelude::AccountLoader::<'_, IfRebalanceConfig>::load_mut(move _75) -> [return: bb33, unwind: bb96];
    }

    bb33: {
        StorageDead(_75);
        _73 = <std::result::Result<RefMut<'_, IfRebalanceConfig>, anchor_lang::error::Error> as Try>::branch(move _74) -> [return: bb34, unwind: bb96];
    }

    bb34: {
        StorageDead(_74);
        _76 = discriminant(_73);
        switchInt(move _76) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_80);
        _80 = move ((_73 as Continue).0: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _72 = move _80;
        StorageDead(_80);
        _190 = discriminant(_73);
        StorageDead(_73);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &mut _72;
        _86 = &mut (*_87);
        _85 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _86) -> [return: bb38, unwind: bb95];
    }

    bb36: {
        StorageLive(_77);
        _77 = move ((_73 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb37, unwind: bb108];
    }

    bb37: {
        StorageDead(_79);
        StorageDead(_77);
        _200 = discriminant(_73);
        StorageDead(_73);
        goto -> bb83;
    }

    bb38: {
        _84 = &mut (*_85);
        StorageDead(_86);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &mut _56;
        _90 = &mut (*_91);
        _89 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _90) -> [return: bb39, unwind: bb95];
    }

    bb39: {
        _88 = &mut (*_89);
        StorageDead(_90);
        StorageLive(_92);
        _92 = _67;
        StorageLive(_93);
        _93 = _3;
        StorageLive(_94);
        _94 = _13;
        _83 = controller::insurance::transfer_protocol_if_shares_to_revenue_pool(move _84, move _88, move _92, move _93, move _94) -> [return: bb40, unwind: bb95];
    }

    bb40: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_88);
        StorageDead(_84);
        _82 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _83) -> [return: bb41, unwind: bb95];
    }

    bb41: {
        StorageDead(_83);
        _95 = discriminant(_82);
        switchInt(move _95) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_99);
        _99 = ((_82 as Continue).0: ());
        _81 = _99;
        StorageDead(_99);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _169 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>);
        _106 = &((*_169).5: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _105 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Clone>::clone(move _106) -> [return: bb45, unwind: bb95];
    }

    bb43: {
        StorageLive(_96);
        _96 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb44, unwind: bb95];
    }

    bb44: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb82;
    }

    bb45: {
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _170 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>);
        _110 = &((*_170).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _109 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _110) -> [return: bb46, unwind: bb95];
    }

    bb46: {
        StorageDead(_110);
        _108 = &_109;
        _171 = deref_copy (*_108);
        _214 = (((_171.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _107 = &(*_214);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _172 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>);
        _114 = &((*_172).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _113 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _114) -> [return: bb47, unwind: bb94];
    }

    bb47: {
        StorageDead(_114);
        _112 = &_113;
        _173 = deref_copy (*_112);
        _215 = (((_173.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _111 = &(*_215);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _174 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>);
        _118 = &((*_174).6: anchor_lang::prelude::AccountInfo<'_>);
        _117 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _118) -> [return: bb48, unwind: bb93];
    }

    bb48: {
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _175 = deref_copy (*_4);
        _216 = (((_175.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _121 = &(*_216);
        _120 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _121) -> [return: bb49, unwind: bb92];
    }

    bb49: {
        StorageDead(_121);
        _119 = ((*_120).15: u8);
        StorageLive(_122);
        _122 = _3;
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_47;
        _123 = &(*_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_56;
        _128 = <RefMut<'_, SpotMarket> as Deref>::deref(move _129) -> [return: bb50, unwind: bb92];
    }

    bb50: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = SpotMarket::has_transfer_hook(move _127) -> [return: bb51, unwind: bb92];
    }

    bb51: {
        switchInt(move _126) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_130);
        _130 = &mut (*_14);
        _125 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _130);
        StorageDead(_130);
        goto -> bb54;
    }

    bb53: {
        StorageDead(_128);
        StorageDead(_127);
        _125 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb54;
    }

    bb54: {
        StorageDead(_126);
        _102 = send_from_program_vault(move _103, move _107, move _111, move _115, move _119, move _122, move _123, move _125) -> [return: bb55, unwind: bb92];
    }

    bb55: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_115);
        StorageDead(_111);
        StorageDead(_107);
        StorageDead(_103);
        _101 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _102) -> [return: bb56, unwind: bb92];
    }

    bb56: {
        StorageDead(_102);
        _131 = discriminant(_101);
        switchInt(move _131) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_135);
        _135 = ((_101 as Continue).0: ());
        _100 = _135;
        StorageDead(_135);
        _192 = discriminant(_101);
        StorageDead(_124);
        StorageDead(_120);
        drop(_117) -> [return: bb60, unwind: bb93];
    }

    bb58: {
        StorageLive(_132);
        _132 = move ((_101 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_134);
        _134 = move _132;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _134) -> [return: bb59, unwind: bb107];
    }

    bb59: {
        StorageDead(_134);
        StorageDead(_132);
        _198 = discriminant(_101);
        StorageDead(_124);
        StorageDead(_120);
        drop(_117) -> [return: bb79, unwind: bb93];
    }

    bb60: {
        StorageDead(_117);
        StorageDead(_116);
        drop(_113) -> [return: bb61, unwind: bb94];
    }

    bb61: {
        StorageDead(_113);
        StorageDead(_112);
        drop(_109) -> [return: bb62, unwind: bb95];
    }

    bb62: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _176 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>);
        _177 = deref_copy ((*_176).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _217 = (((_177.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _139 = &mut (*_217);
        _138 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _139) -> [return: bb63, unwind: bb95];
    }

    bb63: {
        StorageDead(_139);
        _137 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _138) -> [return: bb64, unwind: bb95];
    }

    bb64: {
        StorageDead(_138);
        _140 = discriminant(_137);
        switchInt(move _140) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_144);
        _144 = ((_137 as Continue).0: ());
        _136 = _144;
        StorageDead(_144);
        _194 = discriminant(_137);
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_56;
        _150 = &(*_151);
        _149 = <RefMut<'_, SpotMarket> as Deref>::deref(move _150) -> [return: bb68, unwind: bb95];
    }

    bb66: {
        StorageLive(_141);
        _141 = move ((_137 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_143);
        _143 = move _141;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _143) -> [return: bb67, unwind: bb106];
    }

    bb67: {
        StorageDead(_143);
        StorageDead(_141);
        _196 = discriminant(_137);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb82;
    }

    bb68: {
        _148 = &(*_149);
        StorageDead(_150);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _178 = deref_copy (_1.1: &mut instructions::if_staker::TransferProtocolIfSharesToRevenuePool<'_>);
        _179 = deref_copy ((*_178).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _218 = (((_179.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _156 = &(*_218);
        _155 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _156) -> [return: bb69, unwind: bb95];
    }

    bb69: {
        _154 = &(*_155);
        _153 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _154) -> [return: bb70, unwind: bb95];
    }

    bb70: {
        StorageDead(_156);
        StorageDead(_154);
        _152 = ((*_153).2: u64);
        _147 = validate_spot_market_vault_amount(move _148, move _152) -> [return: bb71, unwind: bb95];
    }

    bb71: {
        StorageDead(_152);
        StorageDead(_148);
        _146 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _147) -> [return: bb72, unwind: bb95];
    }

    bb72: {
        StorageDead(_147);
        _157 = discriminant(_146);
        switchInt(move _157) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_161);
        _161 = ((_146 as Continue).0: i64);
        _145 = _161;
        StorageDead(_161);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_162);
        _162 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _162);
        StorageDead(_162);
        drop(_72) -> [return: bb76, unwind: bb96];
    }

    bb74: {
        StorageLive(_158);
        _158 = ((_146 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_160);
        _160 = _158;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _160) -> [return: bb75, unwind: bb95];
    }

    bb75: {
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb82;
    }

    bb76: {
        StorageDead(_72);
        StorageDead(_67);
        drop(_56) -> [return: bb77, unwind: bb99];
    }

    bb77: {
        StorageDead(_56);
        StorageDead(_47);
        drop(_18) -> [return: bb78, unwind: bb102];
    }

    bb78: {
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb91;
    }

    bb79: {
        StorageDead(_117);
        StorageDead(_116);
        drop(_113) -> [return: bb80, unwind: bb94];
    }

    bb80: {
        StorageDead(_113);
        StorageDead(_112);
        drop(_109) -> [return: bb81, unwind: bb95];
    }

    bb81: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb82;
    }

    bb82: {
        drop(_72) -> [return: bb83, unwind: bb96];
    }

    bb83: {
        StorageDead(_72);
        StorageDead(_67);
        drop(_56) -> [return: bb84, unwind: bb99];
    }

    bb84: {
        StorageDead(_56);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_47);
        drop(_18) -> [return: bb86, unwind: bb102];
    }

    bb86: {
        StorageDead(_18);
        goto -> bb89;
    }

    bb87: {
        StorageDead(_28);
        StorageDead(_27);
        drop(_25) -> [return: bb88, unwind: bb102];
    }

    bb88: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb91;
    }

    bb91: {
        return;
    }

    bb92 (cleanup): {
        drop(_117) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_113) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_109) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_72) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_56) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        _208 = discriminant(_20);
        drop(_28) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_25) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_18) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_28) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_25) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        resume;
    }

    bb103: {
        _184 = discriminant(_20);
        StorageDead(_40);
        drop(_28) -> [return: bb19, unwind: bb98];
    }

    bb104 (cleanup): {
        drop((_19.2: state::oracle_map::OracleMap<'_>)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb105: {
        drop((_19.2: state::oracle_map::OracleMap<'_>)) -> [return: bb103, unwind: bb97];
    }

    bb106 (cleanup): {
        _204 = discriminant(_137);
        goto -> bb95;
    }

    bb107 (cleanup): {
        _205 = discriminant(_101);
        goto -> bb92;
    }

    bb108 (cleanup): {
        _206 = discriminant(_73);
        goto -> bb96;
    }

    bb109 (cleanup): {
        _207 = discriminant(_57);
        goto -> bb99;
    }

    bb110 (cleanup): {
        _209 = discriminant(_20);
        goto -> bb100;
    }

    bb111 (cleanup): {
        _210 = discriminant(_6);
        goto -> bb102;
    }

    bb112: {
        (*_211) = [move _36];
        StorageDead(_36);
        _31 = move _35;
        _30 = move _31 as std::boxed::Box<[u16]> (PointerCoercion(Unsize));
        StorageDead(_35);
        StorageDead(_31);
        _29 = std::slice::<impl [u16]>::into_vec::<std::alloc::Global>(move _30) -> [return: bb11, unwind: bb101];
    }
}
