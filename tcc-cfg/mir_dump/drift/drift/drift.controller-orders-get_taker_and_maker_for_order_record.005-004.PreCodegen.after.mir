// MIR for `get_taker_and_maker_for_order_record` after PreCodegen

fn get_taker_and_maker_for_order_record(_1: &anchor_lang::prelude::Pubkey, _2: &Order) -> (Option<anchor_lang::prelude::Pubkey>, Option<Order>, Option<anchor_lang::prelude::Pubkey>, Option<Order>) {
    debug user_key => _1;
    debug user_order => _2;
    let mut _0: (std::option::Option<anchor_lang::prelude::Pubkey>, std::option::Option<state::user::Order>, std::option::Option<anchor_lang::prelude::Pubkey>, std::option::Option<state::user::Order>);
    let mut _3: bool;
    let mut _4: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _5: std::option::Option<state::user::Order>;
    let mut _6: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _7: anchor_lang::prelude::Pubkey;
    let mut _8: std::option::Option<state::user::Order>;
    let mut _9: state::user::Order;
    let mut _10: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _11: anchor_lang::prelude::Pubkey;
    let mut _12: std::option::Option<state::user::Order>;
    let mut _13: state::user::Order;
    let mut _14: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _15: std::option::Option<state::user::Order>;

    bb0: {
        StorageLive(_3);
        _3 = ((*_2).19: bool);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageLive(_4);
        _4 = Option::<anchor_lang::prelude::Pubkey>::None;
        StorageLive(_5);
        _5 = Option::<Order>::None;
        StorageLive(_6);
        StorageLive(_7);
        _7 = (*_1);
        _6 = Option::<anchor_lang::prelude::Pubkey>::Some(move _7);
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = (*_2);
        _8 = Option::<Order>::Some(move _9);
        StorageDead(_9);
        _0 = (move _4, move _5, move _6, move _8);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb3;
    }

    bb2: {
        StorageLive(_10);
        StorageLive(_11);
        _11 = (*_1);
        _10 = Option::<anchor_lang::prelude::Pubkey>::Some(move _11);
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = (*_2);
        _12 = Option::<Order>::Some(move _13);
        StorageDead(_13);
        StorageLive(_14);
        _14 = Option::<anchor_lang::prelude::Pubkey>::None;
        StorageLive(_15);
        _15 = Option::<Order>::None;
        _0 = (move _10, move _12, move _14, move _15);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        goto -> bb3;
    }

    bb3: {
        StorageDead(_3);
        return;
    }
}
