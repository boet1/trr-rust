// MIR for `admin::handle_update_spot_market_status` after PreCodegen

fn admin::handle_update_spot_market_status(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: state::perp_market::MarketStatus) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug status => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _15: std::result::Result<(), error::ErrorCode>;
    let mut _16: &state::perp_market::MarketStatus;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: ();
    let _22: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _23: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _25: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _26: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _27: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _28: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _34: ();
    let mut _35: &str;
    let _36: &str;
    let mut _37: &std::string::String;
    let _38: &std::string::String;
    let _39: std::string::String;
    let mut _41: std::fmt::Arguments<'_>;
    let mut _42: &[&str];
    let mut _43: &[&str; 1];
    let _44: &[&str; 1];
    let _45: [&str; 1];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let mut _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: [core::fmt::rt::Argument<'_>; 1];
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &u16;
    let _52: &u16;
    let _53: &state::spot_market::SpotMarket;
    let mut _54: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _55: ();
    let mut _56: &str;
    let _57: &str;
    let mut _58: &std::string::String;
    let _59: &std::string::String;
    let _60: std::string::String;
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[&str; 2];
    let _65: &[&str; 2];
    let _66: [&str; 2];
    let mut _67: &[core::fmt::rt::Argument<'_>];
    let mut _68: &[core::fmt::rt::Argument<'_>; 2];
    let _69: &[core::fmt::rt::Argument<'_>; 2];
    let _70: [core::fmt::rt::Argument<'_>; 2];
    let mut _71: core::fmt::rt::Argument<'_>;
    let mut _72: &state::perp_market::MarketStatus;
    let _73: &state::perp_market::MarketStatus;
    let _74: &state::spot_market::SpotMarket;
    let mut _75: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _76: core::fmt::rt::Argument<'_>;
    let mut _77: &state::perp_market::MarketStatus;
    let _78: &state::perp_market::MarketStatus;
    let mut _79: state::perp_market::MarketStatus;
    let mut _80: &mut state::spot_market::SpotMarket;
    let mut _81: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _82: ();
    let mut _85: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _86: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _18;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _21;
        scope 8 {
        }
    }
    scope 9 {
        debug spot_market => _22;
        let _40: std::string::String;
        let _61: std::string::String;
        let mut _83: &[&str; 2];
        let mut _84: &[&str; 1];
        scope 14 {
            debug res => _40;
        }
        scope 15 {
            debug res => _61;
        }
    }
    scope 10 {
        debug residual => _30;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _33;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _85 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _7 = &((*_85).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _6 = &(*_7);
        _5 = constraints::spot_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb39];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _87 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_2;
        _15 = state::perp_market::MarketStatus::validate_not_deprecated(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb41];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _93 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb35;
    }

    bb7: {
        StorageDead(_16);
        _14 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: ());
        _13 = _21;
        StorageDead(_21);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _86 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _27 = &((*_86).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _26 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb35;
    }

    bb12: {
        StorageDead(_27);
        StorageLive(_28);
        _28 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _25 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _26, move _28) -> [return: bb13, unwind: bb39];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_26);
        _24 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _25) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        StorageDead(_25);
        _29 = discriminant(_24);
        switchInt(move _29) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_33);
        _33 = move ((_24 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _23 = move _33;
        StorageDead(_33);
        _22 = &mut _23;
        _91 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _84 = const _;
        _44 = &(*_84);
        _43 = &(*_44);
        _42 = move _43 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_22);
        _53 = <RefMut<'_, SpotMarket> as Deref>::deref(move _54) -> [return: bb18, unwind: bb38];
    }

    bb16: {
        StorageLive(_30);
        _30 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb17, unwind: bb40];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_30);
        _89 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb35;
    }

    bb18: {
        StorageDead(_54);
        _52 = &((*_53).42: u16);
        _51 = &(*_52);
        _50 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _51) -> [return: bb19, unwind: bb38];
    }

    bb19: {
        StorageDead(_51);
        _49 = [move _50];
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = move _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_47);
        _41 = Arguments::<'_>::new_v1(move _42, move _46) -> [return: bb20, unwind: bb38];
    }

    bb20: {
        StorageDead(_46);
        StorageDead(_42);
        _40 = format(move _41) -> [return: bb21, unwind: bb38];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_44);
        _39 = move _40;
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = <String as Deref>::deref(move _37) -> [return: bb22, unwind: bb37];
    }

    bb22: {
        _35 = &(*_36);
        StorageDead(_37);
        _34 = solana_program::log::sol_log(move _35) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        StorageDead(_35);
        drop(_39) -> [return: bb24, unwind: bb38];
    }

    bb24: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _83 = const _;
        _65 = &(*_83);
        _64 = &(*_65);
        _63 = move _64 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &(*_22);
        _74 = <RefMut<'_, SpotMarket> as Deref>::deref(move _75) -> [return: bb25, unwind: bb38];
    }

    bb25: {
        StorageDead(_75);
        _73 = &((*_74).45: state::perp_market::MarketStatus);
        _72 = &(*_73);
        _71 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::MarketStatus>(move _72) -> [return: bb26, unwind: bb38];
    }

    bb26: {
        StorageDead(_72);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_2;
        _77 = &(*_78);
        _76 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::MarketStatus>(move _77) -> [return: bb27, unwind: bb38];
    }

    bb27: {
        StorageDead(_77);
        _70 = [move _71, move _76];
        StorageDead(_76);
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = move _68 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_68);
        _62 = Arguments::<'_>::new_v1(move _63, move _67) -> [return: bb28, unwind: bb38];
    }

    bb28: {
        StorageDead(_67);
        StorageDead(_63);
        _61 = format(move _62) -> [return: bb29, unwind: bb38];
    }

    bb29: {
        StorageDead(_62);
        StorageDead(_78);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_65);
        _60 = move _61;
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = <String as Deref>::deref(move _58) -> [return: bb30, unwind: bb36];
    }

    bb30: {
        _56 = &(*_57);
        StorageDead(_58);
        _55 = solana_program::log::sol_log(move _56) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        StorageDead(_56);
        drop(_60) -> [return: bb32, unwind: bb38];
    }

    bb32: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageLive(_79);
        _79 = _2;
        StorageLive(_80);
        StorageLive(_81);
        _81 = &mut (*_22);
        _80 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _81) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        StorageDead(_81);
        ((*_80).45: state::perp_market::MarketStatus) = move _79;
        StorageDead(_79);
        StorageDead(_80);
        StorageLive(_82);
        _82 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _82);
        StorageDead(_82);
        drop(_23) -> [return: bb34, unwind: bb39];
    }

    bb34: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_60) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_39) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_23) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }

    bb40 (cleanup): {
        _95 = discriminant(_24);
        goto -> bb39;
    }

    bb41 (cleanup): {
        _96 = discriminant(_4);
        goto -> bb39;
    }
}
