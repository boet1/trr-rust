// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::derive_oracle_order_auction_params` after PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::derive_oracle_order_auction_params(_1: &PerpMarket, _2: controller::position::PositionDirection, _3: i64, _4: Option<i32>, _5: i64) -> std::result::Result<(i64, i64, u8), error::ErrorCode> {
    debug perp_market => _1;
    debug direction => _2;
    debug oracle_price => _3;
    debug oracle_price_offset => _4;
    debug start_buffer => _5;
    let mut _0: std::result::Result<(i64, i64, u8), error::ErrorCode>;
    let mut _6: i64;
    let mut _7: i64;
    let mut _8: (i64, i64);
    let mut _9: isize;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _13: std::result::Result<i64, error::ErrorCode>;
    let mut _14: &state::perp_market::PerpMarket;
    let mut _15: controller::position::PositionDirection;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: i32;
    let _23: ();
    let mut _24: bool;
    let mut _25: &controller::position::PositionDirection;
    let mut _26: &controller::position::PositionDirection;
    let _27: controller::position::PositionDirection;
    let mut _28: i64;
    let mut _29: i64;
    let mut _30: i64;
    let mut _31: i64;
    let mut _32: i64;
    let mut _33: i64;
    let mut _34: i64;
    let mut _35: i64;
    let _36: i64;
    let _37: i64;
    let mut _38: (i64, i64);
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64)>;
    let mut _40: std::result::Result<(i64, i64), error::ErrorCode>;
    let mut _41: &state::perp_market::PerpMarket;
    let mut _42: controller::position::PositionDirection;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: (i64, i64);
    let mut _48: i64;
    let mut _49: i64;
    let _50: ();
    let mut _51: bool;
    let mut _52: i64;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _55: std::result::Result<i64, error::ErrorCode>;
    let mut _56: i64;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _58: std::result::Result<i64, error::ErrorCode>;
    let mut _59: i64;
    let mut _60: i64;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: ();
    let mut _72: bool;
    let mut _73: &controller::position::PositionDirection;
    let mut _74: &controller::position::PositionDirection;
    let _75: controller::position::PositionDirection;
    let mut _76: i64;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _78: std::result::Result<i64, error::ErrorCode>;
    let mut _79: i64;
    let mut _80: i64;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: i64;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _88: std::result::Result<i64, error::ErrorCode>;
    let mut _89: i64;
    let mut _90: i64;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _96: bool;
    let mut _97: i64;
    let mut _98: bool;
    let mut _99: &controller::position::PositionDirection;
    let mut _100: &controller::position::PositionDirection;
    let _101: controller::position::PositionDirection;
    let mut _102: i64;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _104: std::result::Result<i64, error::ErrorCode>;
    let mut _105: i64;
    let mut _106: i64;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: i64;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _114: std::result::Result<i64, error::ErrorCode>;
    let mut _115: i64;
    let mut _116: i64;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _124: std::result::Result<u8, error::ErrorCode>;
    let mut _125: u64;
    let mut _126: i64;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _128: std::result::Result<i64, error::ErrorCode>;
    let mut _129: i64;
    let mut _130: i64;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: u64;
    let mut _137: i64;
    let mut _138: state::perp_market::ContractTier;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _144: (i64, i64, u8);
    let mut _145: i64;
    let mut _146: i64;
    let mut _147: u8;
    scope 1 {
        debug auction_start_price => _6;
        debug auction_end_price => _7;
        let _53: i64;
        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _65: i64;
        let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _70: i64;
        let _122: u8;
        let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _135: i64;
        let _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _143: u8;
        scope 14 {
            debug start_buffer_price => _53;
            let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _85: i64;
            let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _95: i64;
            let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _111: i64;
            let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _121: i64;
            let mut _148: &controller::position::PositionDirection;
            let mut _149: &controller::position::PositionDirection;
            scope 23 {
                debug residual => _82;
                scope 24 {
                }
            }
            scope 25 {
                debug val => _85;
                scope 26 {
                }
            }
            scope 27 {
                debug residual => _92;
                scope 28 {
                }
            }
            scope 29 {
                debug val => _95;
                scope 30 {
                }
            }
            scope 31 {
                debug residual => _108;
                scope 32 {
                }
            }
            scope 33 {
                debug val => _111;
                scope 34 {
                }
            }
            scope 35 {
                debug residual => _118;
                scope 36 {
                }
            }
            scope 37 {
                debug val => _121;
                scope 38 {
                }
            }
        }
        scope 15 {
            debug residual => _62;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _65;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _67;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _70;
            scope 22 {
            }
        }
        scope 39 {
            debug auction_duration => _122;
        }
        scope 40 {
            debug residual => _132;
            scope 41 {
            }
        }
        scope 42 {
            debug val => _135;
            scope 43 {
            }
        }
        scope 44 {
            debug residual => _140;
            scope 45 {
            }
        }
        scope 46 {
            debug val => _143;
            scope 47 {
            }
        }
    }
    scope 2 {
        debug oracle_price_offset => _10;
        let _10: i32;
        let mut _11: i64;
        let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _20: i64;
        scope 3 {
            debug auction_start_price_offset => _11;
            let _21: i64;
            scope 8 {
                debug oracle_price_offset => _21;
                let mut _150: &controller::position::PositionDirection;
            }
        }
        scope 4 {
            debug residual => _17;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _20;
            scope 7 {
            }
        }
    }
    scope 9 {
        debug auction_start_price_offset => _36;
        debug auction_end_price_offset => _37;
    }
    scope 10 {
        debug residual => _44;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _47;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_8);
        _9 = discriminant(_4);
        switchInt(move _9) -> [1: bb1, otherwise: bb14];
    }

    bb1: {
        StorageLive(_10);
        _10 = ((_4 as Some).0: i32);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_1);
        StorageLive(_15);
        _15 = _2;
        _13 = order_params::OrderParams::get_perp_baseline_start_price_offset(move _14, move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = ((_12 as Continue).0: i64);
        _11 = _20;
        StorageDead(_20);
        StorageDead(_12);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _10;
        _21 = move _22 as i64 (IntToInt);
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_2;
        StorageLive(_26);
        _150 = const _;
        _26 = &(*_150);
        _24 = <controller::position::PositionDirection as PartialEq>::eq(move _25, move _26) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb83;
    }

    bb8: {
        switchInt(move _24) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _11;
        StorageLive(_30);
        _30 = _21;
        _28 = <i64 as Ord>::min(move _29, move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_30);
        StorageDead(_29);
        _11 = move _28;
        _23 = const ();
        StorageDead(_28);
        goto -> bb13;
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _11;
        StorageLive(_33);
        _33 = _21;
        _31 = <i64 as Ord>::max(move _32, move _33) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_33);
        StorageDead(_32);
        _11 = move _31;
        _23 = const ();
        StorageDead(_31);
        goto -> bb13;
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_34);
        _34 = _11;
        StorageLive(_35);
        _35 = _21;
        _8 = (move _34, move _35);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_21);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb20;
    }

    bb14: {
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_1);
        StorageLive(_42);
        _42 = _2;
        _40 = order_params::OrderParams::get_perp_baseline_start_end_price_offset(move _41, move _42, const 1_u64) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<(i64, i64), error::ErrorCode> as Try>::branch(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        _43 = discriminant(_39);
        switchInt(move _43) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_47);
        _47 = ((_39 as Continue).0: (i64, i64));
        _38 = _47;
        StorageDead(_47);
        StorageLive(_36);
        _36 = (_38.0: i64);
        StorageLive(_37);
        _37 = (_38.1: i64);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_48);
        _48 = _36;
        StorageLive(_49);
        _49 = _37;
        _8 = (move _48, move _49);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb20;
    }

    bb18: {
        StorageLive(_44);
        _44 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb83;
    }

    bb20: {
        StorageLive(_6);
        _6 = (_8.0: i64);
        StorageLive(_7);
        _7 = (_8.1: i64);
        StorageDead(_8);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _5;
        _51 = Ne(move _52, const 0_i64);
        switchInt(move _51) -> [0: bb63, otherwise: bb21];
    }

    bb21: {
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = _3;
        StorageLive(_60);
        _60 = _5;
        _58 = <i64 as SafeMath>::safe_mul(move _59, move _60) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_60);
        StorageDead(_59);
        _57 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _58) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_58);
        _61 = discriminant(_57);
        switchInt(move _61) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_65);
        _65 = ((_57 as Continue).0: i64);
        _56 = _65;
        StorageDead(_65);
        _55 = <i64 as SafeMath>::safe_div(move _56, const _) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_62);
        _62 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb80;
    }

    bb27: {
        StorageDead(_56);
        _54 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _55) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_55);
        _66 = discriminant(_54);
        switchInt(move _66) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_70);
        _70 = ((_54 as Continue).0: i64);
        _53 = _70;
        StorageDead(_70);
        StorageDead(_57);
        StorageDead(_54);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_2;
        StorageLive(_74);
        _149 = const _;
        _74 = &(*_149);
        _72 = <controller::position::PositionDirection as PartialEq>::eq(move _73, move _74) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_67);
        _67 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_69);
        StorageDead(_67);
        goto -> bb80;
    }

    bb32: {
        switchInt(move _72) -> [0: bb39, otherwise: bb33];
    }

    bb33: {
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _6;
        StorageLive(_80);
        _80 = _53;
        _78 = <i64 as SafeMath>::safe_sub(move _79, move _80) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_80);
        StorageDead(_79);
        _77 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _78) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_78);
        _81 = discriminant(_77);
        switchInt(move _81) -> [0: bb36, 1: bb37, otherwise: bb5];
    }

    bb36: {
        StorageLive(_85);
        _85 = ((_77 as Continue).0: i64);
        _76 = _85;
        StorageDead(_85);
        _6 = move _76;
        StorageDead(_76);
        StorageDead(_77);
        _71 = const ();
        goto -> bb45;
    }

    bb37: {
        StorageLive(_82);
        _82 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_76);
        StorageDead(_77);
        goto -> bb79;
    }

    bb39: {
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _6;
        StorageLive(_90);
        _90 = _53;
        _88 = <i64 as SafeMath>::safe_add(move _89, move _90) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_90);
        StorageDead(_89);
        _87 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _88) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_88);
        _91 = discriminant(_87);
        switchInt(move _91) -> [0: bb42, 1: bb43, otherwise: bb5];
    }

    bb42: {
        StorageLive(_95);
        _95 = ((_87 as Continue).0: i64);
        _86 = _95;
        StorageDead(_95);
        _6 = move _86;
        StorageDead(_86);
        StorageDead(_87);
        _71 = const ();
        goto -> bb45;
    }

    bb43: {
        StorageLive(_92);
        _92 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_86);
        StorageDead(_87);
        goto -> bb79;
    }

    bb45: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_96);
        StorageLive(_97);
        _97 = _5;
        _96 = Lt(move _97, const 0_i64);
        switchInt(move _96) -> [0: bb61, otherwise: bb46];
    }

    bb46: {
        StorageDead(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_2;
        StorageLive(_100);
        _148 = const _;
        _100 = &(*_148);
        _98 = <controller::position::PositionDirection as PartialEq>::eq(move _99, move _100) -> [return: bb47, unwind continue];
    }

    bb47: {
        switchInt(move _98) -> [0: bb54, otherwise: bb48];
    }

    bb48: {
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _7;
        StorageLive(_106);
        _106 = _53;
        _104 = <i64 as SafeMath>::safe_sub(move _105, move _106) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_106);
        StorageDead(_105);
        _103 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _104) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_104);
        _107 = discriminant(_103);
        switchInt(move _107) -> [0: bb51, 1: bb52, otherwise: bb5];
    }

    bb51: {
        StorageLive(_111);
        _111 = ((_103 as Continue).0: i64);
        _102 = _111;
        StorageDead(_111);
        _7 = move _102;
        StorageDead(_102);
        StorageDead(_103);
        _50 = const ();
        goto -> bb60;
    }

    bb52: {
        StorageLive(_108);
        _108 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_102);
        StorageDead(_103);
        goto -> bb78;
    }

    bb54: {
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = _7;
        StorageLive(_116);
        _116 = _53;
        _114 = <i64 as SafeMath>::safe_add(move _115, move _116) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_116);
        StorageDead(_115);
        _113 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _114) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_114);
        _117 = discriminant(_113);
        switchInt(move _117) -> [0: bb57, 1: bb58, otherwise: bb5];
    }

    bb57: {
        StorageLive(_121);
        _121 = ((_113 as Continue).0: i64);
        _112 = _121;
        StorageDead(_121);
        _7 = move _112;
        StorageDead(_112);
        StorageDead(_113);
        _50 = const ();
        goto -> bb60;
    }

    bb58: {
        StorageLive(_118);
        _118 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_112);
        StorageDead(_113);
        goto -> bb78;
    }

    bb60: {
        StorageDead(_98);
        goto -> bb62;
    }

    bb61: {
        StorageDead(_97);
        _50 = const ();
        goto -> bb62;
    }

    bb62: {
        StorageDead(_96);
        StorageDead(_53);
        goto -> bb64;
    }

    bb63: {
        StorageDead(_52);
        _50 = const ();
        goto -> bb64;
    }

    bb64: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _7;
        StorageLive(_130);
        _130 = _6;
        _128 = <i64 as SafeMath>::safe_sub(move _129, move _130) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_130);
        StorageDead(_129);
        _127 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _128) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_128);
        _131 = discriminant(_127);
        switchInt(move _131) -> [0: bb67, 1: bb68, otherwise: bb5];
    }

    bb67: {
        StorageLive(_135);
        _135 = ((_127 as Continue).0: i64);
        _126 = _135;
        StorageDead(_135);
        _125 = core::num::<impl i64>::unsigned_abs(move _126) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_132);
        _132 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb77;
    }

    bb70: {
        StorageDead(_126);
        StorageLive(_136);
        StorageLive(_137);
        _137 = _3;
        _136 = core::num::<impl i64>::unsigned_abs(move _137) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_137);
        StorageLive(_138);
        _138 = ((*_1).24: state::perp_market::ContractTier);
        _124 = get_auction_duration(move _125, move _136, move _138) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_125);
        _123 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _124) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_124);
        _139 = discriminant(_123);
        switchInt(move _139) -> [0: bb74, 1: bb75, otherwise: bb5];
    }

    bb74: {
        StorageLive(_143);
        _143 = ((_123 as Continue).0: u8);
        _122 = _143;
        StorageDead(_143);
        StorageDead(_127);
        StorageDead(_123);
        StorageLive(_144);
        StorageLive(_145);
        _145 = _6;
        StorageLive(_146);
        _146 = _7;
        StorageLive(_147);
        _147 = _122;
        _144 = (move _145, move _146, move _147);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        _0 = std::result::Result::<(i64, i64, u8), error::ErrorCode>::Ok(move _144);
        StorageDead(_144);
        StorageDead(_122);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb84;
    }

    bb75: {
        StorageLive(_140);
        _140 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_142);
        _142 = _140;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _142) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_142);
        StorageDead(_140);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_127);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb82;
    }

    bb78: {
        StorageDead(_98);
        StorageDead(_96);
        goto -> bb81;
    }

    bb79: {
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb81;
    }

    bb80: {
        StorageDead(_57);
        StorageDead(_54);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb84;
    }

    bb83: {
        StorageDead(_8);
        goto -> bb84;
    }

    bb84: {
        return;
    }
}
