digraph Mir_0_332 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn controller::liquidation::liquidate_perp_with_fill(_1: u16, _2: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, _3: &amp;ReErased anchor_lang::prelude::Pubkey, _4: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;, _5: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, _6: &amp;ReErased anchor_lang::prelude::Pubkey, _7: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;, _8: &amp;ReErased state::user_map::UserMap&lt;ReErased&gt;, _9: &amp;ReErased state::user_map::UserStatsMap&lt;ReErased&gt;, _10: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _11: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _12: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _13: &amp;ReErased anchor_lang::prelude::Clock, _14: &amp;ReErased state::state::State) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _15: i64;<br align="left"/>let _16: u64;<br align="left"/>let mut _17: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _19: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _20: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _21: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _22: Closure(DefId(0:4698 ~ drift[d311]::controller::liquidation::liquidate_perp_with_fill::{closure#1}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _23: isize;<br align="left"/>let _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _25: !;<br align="left"/>let mut _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _27: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _28: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _29: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _30: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _31: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _32: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _33: Closure(DefId(0:4699 ~ drift[d311]::controller::liquidation::liquidate_perp_with_fill::{closure#2}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _34: isize;<br align="left"/>let _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _36: !;<br align="left"/>let mut _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _38: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _39: u32;<br align="left"/>let _40: u128;<br align="left"/>let mut _41: u16;<br align="left"/>let _42: u128;<br align="left"/>let mut _43: u8;<br align="left"/>let _44: ();<br align="left"/>let mut _45: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _46: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: &amp;ReErased state::user::User;<br align="left"/>let _49: &amp;ReErased state::user::User;<br align="left"/>let mut _50: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _51: ();<br align="left"/>let _52: error::ErrorCode;<br align="left"/>let _53: ();<br align="left"/>let mut _54: &amp;ReErased str;<br align="left"/>let _55: &amp;ReErased str;<br align="left"/>let mut _56: &amp;ReErased std::string::String;<br align="left"/>let _57: &amp;ReErased std::string::String;<br align="left"/>let _58: std::string::String;<br align="left"/>let _59: std::string::String;<br align="left"/>let mut _60: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _61: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _62: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _63: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _64: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _65: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _66: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _67: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _68: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _69: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _70: &amp;ReErased error::ErrorCode;<br align="left"/>let _71: &amp;ReErased error::ErrorCode;<br align="left"/>let _72: ();<br align="left"/>let mut _73: &amp;ReErased str;<br align="left"/>let _74: &amp;ReErased str;<br align="left"/>let mut _75: &amp;ReErased std::string::String;<br align="left"/>let _76: &amp;ReErased std::string::String;<br align="left"/>let _77: std::string::String;<br align="left"/>let _78: std::string::String;<br align="left"/>let mut _79: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _80: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _81: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _82: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _83: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _84: error::ErrorCode;<br align="left"/>let mut _85: isize;<br align="left"/>let _86: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _87: !;<br align="left"/>let mut _88: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _89: ();<br align="left"/>let _90: ();<br align="left"/>let mut _91: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _92: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _93: bool;<br align="left"/>let mut _94: u8;<br align="left"/>let mut _95: &amp;ReErased state::user::User;<br align="left"/>let mut _96: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _97: ();<br align="left"/>let _98: error::ErrorCode;<br align="left"/>let _99: ();<br align="left"/>let mut _100: &amp;ReErased str;<br align="left"/>let _101: &amp;ReErased str;<br align="left"/>let mut _102: &amp;ReErased std::string::String;<br align="left"/>let _103: &amp;ReErased std::string::String;<br align="left"/>let _104: std::string::String;<br align="left"/>let _105: std::string::String;<br align="left"/>let mut _106: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _107: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _108: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _109: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _110: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _111: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _112: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _113: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _114: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _115: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _116: &amp;ReErased error::ErrorCode;<br align="left"/>let _117: &amp;ReErased error::ErrorCode;<br align="left"/>let _118: ();<br align="left"/>let mut _119: &amp;ReErased str;<br align="left"/>let _120: &amp;ReErased str;<br align="left"/>let mut _121: &amp;ReErased std::string::String;<br align="left"/>let _122: &amp;ReErased std::string::String;<br align="left"/>let _123: std::string::String;<br align="left"/>let _124: std::string::String;<br align="left"/>let mut _125: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _126: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _127: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _128: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _129: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _130: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _131: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _132: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _133: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _134: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _135: &amp;ReErased u8;<br align="left"/>let _136: &amp;ReErased u8;<br align="left"/>let _137: &amp;ReErased state::user::User;<br align="left"/>let mut _138: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _139: error::ErrorCode;<br align="left"/>let mut _140: isize;<br align="left"/>let _141: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _142: !;<br align="left"/>let mut _143: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _144: ();<br align="left"/>let _145: ();<br align="left"/>let mut _146: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _147: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _148: bool;<br align="left"/>let mut _149: &amp;ReErased state::user::User;<br align="left"/>let _150: &amp;ReErased state::user::User;<br align="left"/>let mut _151: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _152: ();<br align="left"/>let _153: error::ErrorCode;<br align="left"/>let _154: ();<br align="left"/>let mut _155: &amp;ReErased str;<br align="left"/>let _156: &amp;ReErased str;<br align="left"/>let mut _157: &amp;ReErased std::string::String;<br align="left"/>let _158: &amp;ReErased std::string::String;<br align="left"/>let _159: std::string::String;<br align="left"/>let _160: std::string::String;<br align="left"/>let mut _161: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _162: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _163: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _164: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _165: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _166: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _167: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _168: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _169: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _170: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _171: &amp;ReErased error::ErrorCode;<br align="left"/>let _172: &amp;ReErased error::ErrorCode;<br align="left"/>let _173: ();<br align="left"/>let mut _174: &amp;ReErased str;<br align="left"/>let _175: &amp;ReErased str;<br align="left"/>let mut _176: &amp;ReErased std::string::String;<br align="left"/>let _177: &amp;ReErased std::string::String;<br align="left"/>let _178: std::string::String;<br align="left"/>let _179: std::string::String;<br align="left"/>let mut _180: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _181: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _182: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _183: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _184: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _185: error::ErrorCode;<br align="left"/>let mut _186: isize;<br align="left"/>let _187: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _188: !;<br align="left"/>let mut _189: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _190: ();<br align="left"/>let _191: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _192: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _193: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _194: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _195: &amp;ReErased u16;<br align="left"/>let _196: &amp;ReErased u16;<br align="left"/>let mut _197: isize;<br align="left"/>let _198: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _199: !;<br align="left"/>let mut _200: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _201: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _202: ();<br align="left"/>let mut _203: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _204: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _205: bool;<br align="left"/>let mut _206: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _207: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _208: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _209: state::paused_operations::PerpOperation;<br align="left"/>let mut _210: ();<br align="left"/>let _211: error::ErrorCode;<br align="left"/>let _212: ();<br align="left"/>let mut _213: &amp;ReErased str;<br align="left"/>let _214: &amp;ReErased str;<br align="left"/>let mut _215: &amp;ReErased std::string::String;<br align="left"/>let _216: &amp;ReErased std::string::String;<br align="left"/>let _217: std::string::String;<br align="left"/>let _218: std::string::String;<br align="left"/>let mut _219: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _220: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _221: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _222: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _223: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _224: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _225: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _226: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _227: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _228: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _229: &amp;ReErased error::ErrorCode;<br align="left"/>let _230: &amp;ReErased error::ErrorCode;<br align="left"/>let _231: ();<br align="left"/>let mut _232: &amp;ReErased str;<br align="left"/>let _233: &amp;ReErased str;<br align="left"/>let mut _234: &amp;ReErased std::string::String;<br align="left"/>let _235: &amp;ReErased std::string::String;<br align="left"/>let _236: std::string::String;<br align="left"/>let _237: std::string::String;<br align="left"/>let mut _238: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _239: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _240: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _241: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _242: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _243: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _244: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _245: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _246: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _247: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _248: &amp;ReErased u16;<br align="left"/>let _249: &amp;ReErased u16;<br align="left"/>let mut _250: error::ErrorCode;<br align="left"/>let mut _251: isize;<br align="left"/>let _252: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _253: !;<br align="left"/>let mut _254: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _255: ();<br align="left"/>let _256: ();<br align="left"/>let mut _257: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _258: ();<br align="left"/>let mut _259: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _260: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _261: &amp;ReErased mut state::user::User;<br align="left"/>let mut _262: &amp;ReErased mut state::user::User;<br align="left"/>let mut _263: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _264: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _265: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _266: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _267: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _268: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _269: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _270: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _271: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _272: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _273: &amp;ReErased u16;<br align="left"/>let _274: &amp;ReErased u16;<br align="left"/>let mut _275: isize;<br align="left"/>let _276: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _277: !;<br align="left"/>let mut _278: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _279: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _280: i64;<br align="left"/>let mut _281: isize;<br align="left"/>let _282: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _283: !;<br align="left"/>let mut _284: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _285: ();<br align="left"/>let _286: ();<br align="left"/>let mut _287: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _288: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _289: &amp;ReErased mut state::user::User;<br align="left"/>let mut _290: &amp;ReErased mut state::user::User;<br align="left"/>let mut _291: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _292: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _293: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _294: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _295: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _296: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _297: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _298: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _299: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _300: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _301: &amp;ReErased u16;<br align="left"/>let _302: &amp;ReErased u16;<br align="left"/>let mut _303: isize;<br align="left"/>let _304: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _305: !;<br align="left"/>let mut _306: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _307: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _308: i64;<br align="left"/>let mut _309: isize;<br align="left"/>let _310: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _311: !;<br align="left"/>let mut _312: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _313: ();<br align="left"/>let _314: state::margin_calculation::MarginCalculation;<br align="left"/>let mut _315: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::margin_calculation::MarginCalculation&gt;;<br align="left"/>let mut _316: std::result::Result&lt;state::margin_calculation::MarginCalculation, error::ErrorCode&gt;;<br align="left"/>let mut _317: &amp;ReErased state::user::User;<br align="left"/>let _318: &amp;ReErased state::user::User;<br align="left"/>let mut _319: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _320: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _321: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _322: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _323: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _324: state::margin_calculation::MarginContext;<br align="left"/>let mut _325: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::margin_calculation::MarginContext&gt;;<br align="left"/>let mut _326: std::result::Result&lt;state::margin_calculation::MarginContext, error::ErrorCode&gt;;<br align="left"/>let mut _327: state::margin_calculation::MarginContext;<br align="left"/>let mut _328: u32;<br align="left"/>let mut _329: state::margin_calculation::MarketIdentifier;<br align="left"/>let mut _330: u16;<br align="left"/>let mut _331: isize;<br align="left"/>let _332: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _333: !;<br align="left"/>let mut _334: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _335: state::margin_calculation::MarginContext;<br align="left"/>let mut _336: isize;<br align="left"/>let _337: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _338: !;<br align="left"/>let mut _339: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _340: state::margin_calculation::MarginCalculation;<br align="left"/>let _341: ();<br align="left"/>let mut _342: bool;<br align="left"/>let mut _343: &amp;ReErased state::user::User;<br align="left"/>let _344: &amp;ReErased state::user::User;<br align="left"/>let mut _345: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _346: bool;<br align="left"/>let mut _347: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _348: !;<br align="left"/>let _349: ();<br align="left"/>let mut _350: &amp;ReErased str;<br align="left"/>let _351: &amp;ReErased str;<br align="left"/>let mut _352: &amp;ReErased std::string::String;<br align="left"/>let _353: &amp;ReErased std::string::String;<br align="left"/>let _354: std::string::String;<br align="left"/>let _355: std::string::String;<br align="left"/>let mut _356: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _357: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _358: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _359: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _360: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _361: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _362: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _363: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _364: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _365: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _366: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let _367: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _368: error::ErrorCode;<br align="left"/>let mut _369: bool;<br align="left"/>let mut _370: &amp;ReErased state::user::User;<br align="left"/>let _371: &amp;ReErased state::user::User;<br align="left"/>let mut _372: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _373: bool;<br align="left"/>let mut _374: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _375: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _376: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _377: isize;<br align="left"/>let _378: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _379: !;<br align="left"/>let mut _380: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _381: bool;<br align="left"/>let mut _382: !;<br align="left"/>let _383: ();<br align="left"/>let mut _384: &amp;ReErased mut state::user::User;<br align="left"/>let mut _385: &amp;ReErased mut state::user::User;<br align="left"/>let mut _386: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _387: ();<br align="left"/>let _388: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _389: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::user::PerpPosition&gt;;<br align="left"/>let mut _390: std::result::Result&lt;&amp;ReErased state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _391: std::result::Result&lt;&amp;ReErased state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _392: &amp;ReErased state::user::User;<br align="left"/>let _393: &amp;ReErased state::user::User;<br align="left"/>let mut _394: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _395: u16;<br align="left"/>let mut _396: Closure(DefId(0:333 ~ drift[d311]::controller::liquidation::liquidate_perp_with_fill::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((error::ErrorCode,)) -&gt; error::ErrorCode, []), (&amp;ReErased u16,)]);<br align="left"/>let mut _397: &amp;ReErased u16;<br align="left"/>let mut _398: isize;<br align="left"/>let _399: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _400: !;<br align="left"/>let mut _401: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _402: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _403: u16;<br align="left"/>let mut _404: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u16&gt;;<br align="left"/>let mut _405: std::result::Result&lt;u16, error::ErrorCode&gt;;<br align="left"/>let mut _406: &amp;ReErased mut state::user::User;<br align="left"/>let mut _407: &amp;ReErased mut state::user::User;<br align="left"/>let mut _408: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _409: u64;<br align="left"/>let mut _410: isize;<br align="left"/>let _411: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _412: !;<br align="left"/>let mut _413: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _414: u16;<br align="left"/>let mut _415: u64;<br align="left"/>let _416: usize;<br align="left"/>let mut _417: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _418: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _419: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _420: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _421: &amp;ReErased state::user::User;<br align="left"/>let mut _422: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _423: u16;<br align="left"/>let mut _424: isize;<br align="left"/>let _425: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _426: !;<br align="left"/>let mut _427: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _428: usize;<br align="left"/>let _429: ();<br align="left"/>let mut _430: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _431: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _432: bool;<br align="left"/>let mut _433: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _434: &amp;ReErased state::user::User;<br align="left"/>let mut _435: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _436: usize;<br align="left"/>let mut _437: usize;<br align="left"/>let mut _438: bool;<br align="left"/>let mut _439: bool;<br align="left"/>let mut _440: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _441: &amp;ReErased state::user::User;<br align="left"/>let mut _442: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _443: usize;<br align="left"/>let mut _444: usize;<br align="left"/>let mut _445: bool;<br align="left"/>let mut _446: ();<br align="left"/>let _447: error::ErrorCode;<br align="left"/>let _448: ();<br align="left"/>let mut _449: &amp;ReErased str;<br align="left"/>let _450: &amp;ReErased str;<br align="left"/>let mut _451: &amp;ReErased std::string::String;<br align="left"/>let _452: &amp;ReErased std::string::String;<br align="left"/>let _453: std::string::String;<br align="left"/>let _454: std::string::String;<br align="left"/>let mut _455: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _456: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _457: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _458: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _459: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _460: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _461: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _462: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _463: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _464: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _465: &amp;ReErased error::ErrorCode;<br align="left"/>let _466: &amp;ReErased error::ErrorCode;<br align="left"/>let mut _467: error::ErrorCode;<br align="left"/>let mut _468: isize;<br align="left"/>let _469: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _470: !;<br align="left"/>let mut _471: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _472: ();<br align="left"/>let _473: std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let mut _474: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::vec::Vec&lt;u32, std::alloc::Global&gt;&gt;;<br align="left"/>let mut _475: std::result::Result&lt;std::vec::Vec&lt;u32, std::alloc::Global&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _476: &amp;ReErased mut state::user::User;<br align="left"/>let mut _477: &amp;ReErased mut state::user::User;<br align="left"/>let mut _478: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _479: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _480: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _481: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _482: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _483: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _484: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _485: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _486: i64;<br align="left"/>let mut _487: u64;<br align="left"/>let mut _488: state::events::OrderActionExplanation;<br align="left"/>let mut _489: std::option::Option&lt;state::user::MarketType&gt;;<br align="left"/>let mut _490: std::option::Option&lt;u16&gt;;<br align="left"/>let mut _491: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _492: isize;<br align="left"/>let _493: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _494: !;<br align="left"/>let mut _495: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _496: std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let mut _497: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _498: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _499: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _500: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _501: &amp;ReErased u16;<br align="left"/>let _502: &amp;ReErased u16;<br align="left"/>let mut _503: isize;<br align="left"/>let _504: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _505: !;<br align="left"/>let mut _506: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _507: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _508: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _509: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _510: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _511: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _512: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _513: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _514: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _515: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _516: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _517: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _518: isize;<br align="left"/>let _519: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _520: !;<br align="left"/>let mut _521: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _522: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _523: state::oracle::MMOraclePriceData;<br align="left"/>let mut _524: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::MMOraclePriceData&gt;;<br align="left"/>let mut _525: std::result::Result&lt;state::oracle::MMOraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _526: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _527: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _528: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _529: state::oracle::OraclePriceData;<br align="left"/>let mut _530: u64;<br align="left"/>let mut _531: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let _532: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let mut _533: isize;<br align="left"/>let _534: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _535: !;<br align="left"/>let mut _536: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _537: state::oracle::MMOraclePriceData;<br align="left"/>let _538: ();<br align="left"/>let mut _539: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _540: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _541: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _542: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _543: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _544: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _545: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let _546: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let mut _547: &amp;ReErased state::state::State;<br align="left"/>let mut _548: i64;<br align="left"/>let mut _549: u64;<br align="left"/>let mut _550: std::option::Option&lt;math::oracle::DriftAction&gt;;<br align="left"/>let mut _551: math::oracle::DriftAction;<br align="left"/>let mut _552: isize;<br align="left"/>let _553: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _554: !;<br align="left"/>let mut _555: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _556: ();<br align="left"/>let _557: i64;<br align="left"/>let mut _558: bool;<br align="left"/>let mut _559: &amp;ReErased state::perp_market::MarketStatus;<br align="left"/>let _560: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _561: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _562: &amp;ReErased state::perp_market::MarketStatus;<br align="left"/>let _563: state::perp_market::MarketStatus;<br align="left"/>let mut _564: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _565: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _566: ();<br align="left"/>let mut _567: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _568: u64;<br align="left"/>let _569: state::margin_calculation::MarginCalculation;<br align="left"/>let mut _570: bool;<br align="left"/>let mut _571: &amp;ReErased std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let mut _572: bool;<br align="left"/>let mut _573: u64;<br align="left"/>let _574: state::margin_calculation::MarginCalculation;<br align="left"/>let mut _575: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::margin_calculation::MarginCalculation&gt;;<br align="left"/>let mut _576: std::result::Result&lt;state::margin_calculation::MarginCalculation, error::ErrorCode&gt;;<br align="left"/>let mut _577: &amp;ReErased state::user::User;<br align="left"/>let _578: &amp;ReErased state::user::User;<br align="left"/>let mut _579: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _580: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _581: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _582: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _583: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _584: state::margin_calculation::MarginContext;<br align="left"/>let mut _585: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::margin_calculation::MarginContext&gt;;<br align="left"/>let mut _586: std::result::Result&lt;state::margin_calculation::MarginContext, error::ErrorCode&gt;;<br align="left"/>let mut _587: state::margin_calculation::MarginContext;<br align="left"/>let mut _588: u32;<br align="left"/>let mut _589: state::margin_calculation::MarketIdentifier;<br align="left"/>let mut _590: u16;<br align="left"/>let mut _591: isize;<br align="left"/>let _592: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _593: !;<br align="left"/>let mut _594: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _595: state::margin_calculation::MarginContext;<br align="left"/>let mut _596: isize;<br align="left"/>let _597: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _598: !;<br align="left"/>let mut _599: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _600: state::margin_calculation::MarginCalculation;<br align="left"/>let _601: u128;<br align="left"/>let mut _602: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _603: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _604: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _605: isize;<br align="left"/>let _606: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _607: !;<br align="left"/>let mut _608: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _609: u128;<br align="left"/>let _610: u128;<br align="left"/>let mut _611: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _612: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _613: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _614: isize;<br align="left"/>let _615: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _616: !;<br align="left"/>let mut _617: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _618: u128;<br align="left"/>let mut _619: u64;<br align="left"/>let mut _620: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _621: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _622: u128;<br align="left"/>let mut _623: u128;<br align="left"/>let mut _624: u128;<br align="left"/>let mut _625: isize;<br align="left"/>let _626: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _627: !;<br align="left"/>let mut _628: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _629: u64;<br align="left"/>let _630: ();<br align="left"/>let mut _631: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _632: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _633: &amp;ReErased mut state::user::User;<br align="left"/>let mut _634: &amp;ReErased mut state::user::User;<br align="left"/>let mut _635: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _636: u64;<br align="left"/>let mut _637: isize;<br align="left"/>let _638: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _639: !;<br align="left"/>let mut _640: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _641: ();<br align="left"/>let _642: ();<br align="left"/>let mut _643: bool;<br align="left"/>let mut _644: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _645: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _646: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _647: isize;<br align="left"/>let _648: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _649: !;<br align="left"/>let mut _650: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _651: bool;<br align="left"/>let mut _652: !;<br align="left"/>let _653: ();<br align="left"/>let _654: ();<br align="left"/>let mut _655: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _656: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _657: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _658: [&amp;ReErased [u8]; 1_usize];<br align="left"/>let mut _659: &amp;ReErased [u8];<br align="left"/>let _660: &amp;ReErased [u8];<br align="left"/>let mut _661: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _662: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _663: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _664: &amp;ReErased state::events::LiquidationRecord;<br align="left"/>let _665: &amp;ReErased state::events::LiquidationRecord;<br align="left"/>let _666: state::events::LiquidationRecord;<br align="left"/>let mut _667: i64;<br align="left"/>let mut _668: u16;<br align="left"/>let mut _669: state::events::LiquidationType;<br align="left"/>let mut _670: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _671: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _672: u128;<br align="left"/>let mut _673: i128;<br align="left"/>let mut _674: bool;<br align="left"/>let mut _675: &amp;ReErased state::user::User;<br align="left"/>let _676: &amp;ReErased state::user::User;<br align="left"/>let mut _677: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _678: std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let mut _679: u64;<br align="left"/>let mut _680: state::events::LiquidatePerpRecord;<br align="left"/>let mut _681: u16;<br align="left"/>let mut _682: i64;<br align="left"/>let mut _683: u64;<br align="left"/>let mut _684: state::events::LiquidatePerpRecord;<br align="left"/>let mut _685: state::events::LiquidationRecord;<br align="left"/>let _686: ();<br align="left"/>let mut _687: &amp;ReErased mut state::user::User;<br align="left"/>let mut _688: &amp;ReErased mut state::user::User;<br align="left"/>let mut _689: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _690: ();<br align="left"/>let _691: ();<br align="left"/>let mut _692: bool;<br align="left"/>let mut _693: i64;<br align="left"/>let mut _694: &amp;ReErased state::user::User;<br align="left"/>let mut _695: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _696: usize;<br align="left"/>let mut _697: usize;<br align="left"/>let mut _698: bool;<br align="left"/>let mut _699: !;<br align="left"/>let _700: ();<br align="left"/>let mut _701: &amp;ReErased str;<br align="left"/>let _702: &amp;ReErased str;<br align="left"/>let mut _703: ();<br align="left"/>let _704: bool;<br align="left"/>let mut _705: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _706: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _707: i64;<br align="left"/>let mut _708: i64;<br align="left"/>let mut _709: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _710: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _711: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _712: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _713: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _714: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _715: &amp;ReErased u16;<br align="left"/>let _716: &amp;ReErased u16;<br align="left"/>let mut _717: isize;<br align="left"/>let _718: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _719: !;<br align="left"/>let mut _720: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _721: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _722: i64;<br align="left"/>let mut _723: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _724: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _725: u64;<br align="left"/>let mut _726: &amp;ReErased state::state::OracleGuardRails;<br align="left"/>let mut _727: isize;<br align="left"/>let _728: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _729: !;<br align="left"/>let mut _730: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _731: i64;<br align="left"/>let mut _732: isize;<br align="left"/>let _733: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _734: !;<br align="left"/>let mut _735: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _736: bool;<br align="left"/>let _737: ();<br align="left"/>let mut _738: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _739: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _740: bool;<br align="left"/>let mut _741: ();<br align="left"/>let _742: error::ErrorCode;<br align="left"/>let _743: ();<br align="left"/>let mut _744: &amp;ReErased str;<br align="left"/>let _745: &amp;ReErased str;<br align="left"/>let mut _746: &amp;ReErased std::string::String;<br align="left"/>let _747: &amp;ReErased std::string::String;<br align="left"/>let _748: std::string::String;<br align="left"/>let _749: std::string::String;<br align="left"/>let mut _750: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _751: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _752: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _753: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _754: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _755: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _756: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _757: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _758: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _759: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _760: &amp;ReErased error::ErrorCode;<br align="left"/>let _761: &amp;ReErased error::ErrorCode;<br align="left"/>let mut _762: error::ErrorCode;<br align="left"/>let mut _763: isize;<br align="left"/>let _764: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _765: !;<br align="left"/>let mut _766: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _767: ();<br align="left"/>let _768: u64;<br align="left"/>let mut _769: i64;<br align="left"/>let mut _770: &amp;ReErased state::user::User;<br align="left"/>let mut _771: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _772: usize;<br align="left"/>let mut _773: usize;<br align="left"/>let mut _774: bool;<br align="left"/>let _775: u32;<br align="left"/>let mut _776: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _777: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _778: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _779: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _780: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _781: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _782: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _783: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _784: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _785: &amp;ReErased u16;<br align="left"/>let _786: &amp;ReErased u16;<br align="left"/>let mut _787: isize;<br align="left"/>let _788: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _789: !;<br align="left"/>let mut _790: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _791: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _792: u128;<br align="left"/>let mut _793: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _794: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _795: u64;<br align="left"/>let mut _796: isize;<br align="left"/>let _797: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _798: !;<br align="left"/>let mut _799: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _800: u128;<br align="left"/>let mut _801: math::margin::MarginRequirementType;<br align="left"/>let mut _802: bool;<br align="left"/>let mut _803: &amp;ReErased state::user::User;<br align="left"/>let _804: &amp;ReErased state::user::User;<br align="left"/>let mut _805: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _806: math::margin::MarginRequirementType;<br align="left"/>let mut _807: isize;<br align="left"/>let _808: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _809: !;<br align="left"/>let mut _810: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _811: u32;<br align="left"/>let _812: u32;<br align="left"/>let mut _813: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _814: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _815: u32;<br align="left"/>let mut _816: u32;<br align="left"/>let mut _817: isize;<br align="left"/>let _818: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _819: !;<br align="left"/>let mut _820: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _821: u32;<br align="left"/>let _822: u128;<br align="left"/>let mut _823: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _824: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _825: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _826: isize;<br align="left"/>let _827: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _828: !;<br align="left"/>let mut _829: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _830: u128;<br align="left"/>let _831: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _832: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _833: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _834: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _835: &amp;ReErased u16;<br align="left"/>let _836: &amp;ReErased u16;<br align="left"/>let mut _837: isize;<br align="left"/>let _838: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _839: !;<br align="left"/>let mut _840: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _841: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _842: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _843: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;&gt;;<br align="left"/>let mut _844: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _845: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _846: &amp;ReErased u16;<br align="left"/>let _847: &amp;ReErased u16;<br align="left"/>let _848: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _849: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _850: isize;<br align="left"/>let _851: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _852: !;<br align="left"/>let mut _853: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _854: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _855: i64;<br align="left"/>let mut _856: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _857: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _858: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _859: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _860: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _861: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _862: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _863: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let _864: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _865: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _866: isize;<br align="left"/>let _867: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _868: !;<br align="left"/>let mut _869: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _870: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _871: u32;<br align="left"/>let mut _872: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _873: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _874: u32;<br align="left"/>let mut _875: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _876: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _877: u128;<br align="left"/>let mut _878: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _879: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _880: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _881: u128;<br align="left"/>let mut _882: isize;<br align="left"/>let _883: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _884: !;<br align="left"/>let mut _885: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _886: u128;<br align="left"/>let mut _887: u64;<br align="left"/>let mut _888: u32;<br align="left"/>let mut _889: u32;<br align="left"/>let mut _890: i64;<br align="left"/>let mut _891: i64;<br align="left"/>let mut _892: u32;<br align="left"/>let mut _893: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _894: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _895: isize;<br align="left"/>let _896: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _897: !;<br align="left"/>let mut _898: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _899: u32;<br align="left"/>let _900: u64;<br align="left"/>let mut _901: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _902: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _903: u64;<br align="left"/>let mut _904: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _905: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _906: u128;<br align="left"/>let mut _907: u32;<br align="left"/>let mut _908: u32;<br align="left"/>let mut _909: u32;<br align="left"/>let mut _910: i64;<br align="left"/>let mut _911: i64;<br align="left"/>let mut _912: isize;<br align="left"/>let _913: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _914: !;<br align="left"/>let mut _915: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _916: u64;<br align="left"/>let mut _917: u64;<br align="left"/>let mut _918: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _919: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _920: isize;<br align="left"/>let _921: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _922: !;<br align="left"/>let mut _923: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _924: u64;<br align="left"/>let _925: ();<br align="left"/>let mut _926: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _927: ();<br align="left"/>let mut _928: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _929: u128;<br align="left"/>let mut _930: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _931: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _932: &amp;ReErased state::user::User;<br align="left"/>let _933: &amp;ReErased state::user::User;<br align="left"/>let mut _934: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _935: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _936: u128;<br align="left"/>let mut _937: u64;<br align="left"/>let mut _938: u128;<br align="left"/>let mut _939: u128;<br align="left"/>let mut _940: isize;<br align="left"/>let _941: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _942: !;<br align="left"/>let mut _943: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _944: u128;<br align="left"/>let _945: u64;<br align="left"/>let mut _946: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _947: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _948: u128;<br align="left"/>let mut _949: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _950: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _951: u128;<br align="left"/>let mut _952: u128;<br align="left"/>let mut _953: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _954: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _955: u64;<br align="left"/>let mut _956: isize;<br align="left"/>let _957: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _958: !;<br align="left"/>let mut _959: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _960: u128;<br align="left"/>let mut _961: u128;<br align="left"/>let mut _962: isize;<br align="left"/>let _963: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _964: !;<br align="left"/>let mut _965: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _966: u128;<br align="left"/>let mut _967: isize;<br align="left"/>let _968: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _969: !;<br align="left"/>let mut _970: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _971: u64;<br align="left"/>let _972: ();<br align="left"/>let mut _973: bool;<br align="left"/>let mut _974: u64;<br align="left"/>let mut _975: !;<br align="left"/>let _976: ();<br align="left"/>let mut _977: &amp;ReErased str;<br align="left"/>let _978: &amp;ReErased str;<br align="left"/>let mut _979: ();<br align="left"/>let _980: u64;<br align="left"/>let mut _981: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _982: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _983: u128;<br align="left"/>let mut _984: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _985: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _986: i128;<br align="left"/>let mut _987: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _988: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _989: u64;<br align="left"/>let mut _990: isize;<br align="left"/>let _991: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _992: !;<br align="left"/>let mut _993: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _994: i128;<br align="left"/>let mut _995: i64;<br align="left"/>let mut _996: isize;<br align="left"/>let _997: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _998: !;<br align="left"/>let mut _999: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1000: u128;<br align="left"/>let mut _1001: isize;<br align="left"/>let _1002: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1003: !;<br align="left"/>let mut _1004: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1005: u64;<br align="left"/>let _1006: u64;<br align="left"/>let mut _1007: bool;<br align="left"/>let mut _1008: u64;<br align="left"/>let mut _1009: u64;<br align="left"/>let mut _1010: (u64, bool);<br align="left"/>let _1011: u64;<br align="left"/>let mut _1012: u64;<br align="left"/>let mut _1013: u64;<br align="left"/>let mut _1014: u64;<br align="left"/>let mut _1015: u64;<br align="left"/>let _1016: u64;<br align="left"/>let mut _1017: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1018: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1019: u64;<br align="left"/>let mut _1020: u64;<br align="left"/>let mut _1021: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1022: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1023: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1024: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _1025: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1026: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1027: &amp;ReErased u16;<br align="left"/>let _1028: &amp;ReErased u16;<br align="left"/>let mut _1029: isize;<br align="left"/>let _1030: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1031: !;<br align="left"/>let mut _1032: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1033: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1034: isize;<br align="left"/>let _1035: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1036: !;<br align="left"/>let mut _1037: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1038: u64;<br align="left"/>let _1039: controller::position::PositionDirection;<br align="left"/>let mut _1040: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _1041: &amp;ReErased state::user::User;<br align="left"/>let mut _1042: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1043: usize;<br align="left"/>let mut _1044: usize;<br align="left"/>let mut _1045: bool;<br align="left"/>let _1046: u32;<br align="left"/>let mut _1047: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _1048: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _1049: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _1050: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1051: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1052: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1053: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _1054: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1055: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1056: &amp;ReErased u16;<br align="left"/>let _1057: &amp;ReErased u16;<br align="left"/>let mut _1058: isize;<br align="left"/>let _1059: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1060: !;<br align="left"/>let mut _1061: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1062: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1063: isize;<br align="left"/>let _1064: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1065: !;<br align="left"/>let mut _1066: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1067: u32;<br align="left"/>let _1068: u32;<br align="left"/>let mut _1069: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _1070: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _1071: u32;<br align="left"/>let mut _1072: u32;<br align="left"/>let mut _1073: u64;<br align="left"/>let mut _1074: &amp;ReErased state::user::User;<br align="left"/>let mut _1075: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1076: u64;<br align="left"/>let mut _1077: isize;<br align="left"/>let _1078: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1079: !;<br align="left"/>let mut _1080: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1081: u32;<br align="left"/>let _1082: state::order_params::OrderParams;<br align="left"/>let mut _1083: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::order_params::OrderParams&gt;;<br align="left"/>let mut _1084: std::result::Result&lt;state::order_params::OrderParams, error::ErrorCode&gt;;<br align="left"/>let mut _1085: u16;<br align="left"/>let mut _1086: controller::position::PositionDirection;<br align="left"/>let mut _1087: u64;<br align="left"/>let mut _1088: i64;<br align="left"/>let mut _1089: u32;<br align="left"/>let mut _1090: isize;<br align="left"/>let _1091: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1092: !;<br align="left"/>let mut _1093: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1094: state::order_params::OrderParams;<br align="left"/>let _1095: u32;<br align="left"/>let mut _1096: &amp;ReErased state::user::User;<br align="left"/>let mut _1097: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1098: u64;<br align="left"/>let mut _1099: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1100: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1101: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1102: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _1103: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1104: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1105: &amp;ReErased u16;<br align="left"/>let _1106: &amp;ReErased u16;<br align="left"/>let mut _1107: isize;<br align="left"/>let _1108: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1109: !;<br align="left"/>let mut _1110: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1111: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1112: ();<br align="left"/>let mut _1113: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1114: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1115: &amp;ReErased state::state::State;<br align="left"/>let mut _1116: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1117: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1118: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1119: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1120: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1121: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1122: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1123: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1124: &amp;ReErased std::option::Option&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::high_leverage_mode_config::HighLeverageModeConfig&gt;&gt;;<br align="left"/>let _1125: &amp;ReErased std::option::Option&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::high_leverage_mode_config::HighLeverageModeConfig&gt;&gt;;<br align="left"/>let _1126: std::option::Option&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::high_leverage_mode_config::HighLeverageModeConfig&gt;&gt;;<br align="left"/>let mut _1127: &amp;ReErased anchor_lang::prelude::Clock;<br align="left"/>let mut _1128: state::order_params::OrderParams;<br align="left"/>let mut _1129: state::order_params::PlaceOrderOptions;<br align="left"/>let mut _1130: state::order_params::PlaceOrderOptions;<br align="left"/>let mut _1131: state::events::OrderActionExplanation;<br align="left"/>let mut _1132: isize;<br align="left"/>let _1133: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1134: !;<br align="left"/>let mut _1135: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1136: ();<br align="left"/>let _1137: ();<br align="left"/>let mut _1138: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1139: ();<br align="left"/>let mut _1140: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1141: u64;<br align="left"/>let _1142: u64;<br align="left"/>let mut _1143: (u64, u64);<br align="left"/>let mut _1144: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _1145: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _1146: u32;<br align="left"/>let mut _1147: &amp;ReErased state::state::State;<br align="left"/>let mut _1148: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1149: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _1150: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1151: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1152: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1153: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1154: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _1155: &amp;ReErased state::user_map::UserMap&lt;ReErased&gt;;<br align="left"/>let mut _1156: &amp;ReErased state::user_map::UserStatsMap&lt;ReErased&gt;;<br align="left"/>let mut _1157: std::option::Option&lt;u32&gt;;<br align="left"/>let mut _1158: &amp;ReErased anchor_lang::prelude::Clock;<br align="left"/>let mut _1159: state::fill_mode::FillMode;<br align="left"/>let mut _1160: isize;<br align="left"/>let _1161: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1162: !;<br align="left"/>let mut _1163: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1164: (u64, u64);<br align="left"/>let mut _1165: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1166: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _1167: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1168: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _1169: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1170: Closure(DefId(0:4700 ~ drift[d311]::controller::liquidation::liquidate_perp_with_fill::{closure#3}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _1171: isize;<br align="left"/>let _1172: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1173: !;<br align="left"/>let mut _1174: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1175: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1176: ();<br align="left"/>let mut _1177: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _1178: &amp;ReErased state::user::User;<br align="left"/>let _1179: &amp;ReErased state::user::User;<br align="left"/>let mut _1180: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1181: u32;<br align="left"/>let mut _1182: isize;<br align="left"/>let _1183: usize;<br align="left"/>let _1184: ();<br align="left"/>let mut _1185: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1186: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1187: usize;<br align="left"/>let mut _1188: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1189: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1190: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1191: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1192: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1193: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1194: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1195: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1196: i64;<br align="left"/>let mut _1197: u64;<br align="left"/>let mut _1198: state::events::OrderActionExplanation;<br align="left"/>let mut _1199: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _1200: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1201: isize;<br align="left"/>let _1202: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1203: !;<br align="left"/>let mut _1204: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1205: ();<br align="left"/>let _1206: ();<br align="left"/>let mut _1207: bool;<br align="left"/>let mut _1208: u64;<br align="left"/>let mut _1209: !;<br align="left"/>let mut _1210: error::ErrorCode;<br align="left"/>let _1211: i64;<br align="left"/>let mut _1212: i64;<br align="left"/>let mut _1213: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _1214: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _1215: u128;<br align="left"/>let mut _1216: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _1217: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _1218: u128;<br align="left"/>let mut _1219: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _1220: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _1221: u128;<br align="left"/>let mut _1222: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _1223: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _1224: u64;<br align="left"/>let mut _1225: isize;<br align="left"/>let _1226: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1227: !;<br align="left"/>let mut _1228: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1229: u128;<br align="left"/>let mut _1230: u128;<br align="left"/>let mut _1231: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _1232: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _1233: u32;<br align="left"/>let mut _1234: isize;<br align="left"/>let _1235: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1236: !;<br align="left"/>let mut _1237: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1238: u128;<br align="left"/>let mut _1239: isize;<br align="left"/>let _1240: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1241: !;<br align="left"/>let mut _1242: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1243: u128;<br align="left"/>let mut _1244: isize;<br align="left"/>let _1245: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1246: !;<br align="left"/>let mut _1247: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1248: u128;<br align="left"/>let mut _1249: isize;<br align="left"/>let _1250: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1251: !;<br align="left"/>let mut _1252: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1253: i64;<br align="left"/>let mut _1254: bool;<br align="left"/>let _1255: ();<br align="left"/>let mut _1256: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1257: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _1258: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _1259: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1260: &amp;ReErased u16;<br align="left"/>let _1261: &amp;ReErased u16;<br align="left"/>let mut _1262: isize;<br align="left"/>let _1263: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1264: !;<br align="left"/>let mut _1265: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1266: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1267: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _1268: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased mut state::user::PerpPosition&gt;;<br align="left"/>let mut _1269: std::result::Result&lt;&amp;ReErased mut state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _1270: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1271: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1272: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1273: u16;<br align="left"/>let mut _1274: isize;<br align="left"/>let _1275: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1276: !;<br align="left"/>let mut _1277: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1278: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _1279: ();<br align="left"/>let mut _1280: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1281: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1282: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _1283: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _1284: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _1285: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1286: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1287: i64;<br align="left"/>let mut _1288: isize;<br align="left"/>let _1289: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1290: !;<br align="left"/>let mut _1291: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1292: ();<br align="left"/>let mut _1293: u128;<br align="left"/>let mut _1294: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _1295: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _1296: u128;<br align="left"/>let mut _1297: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1298: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _1299: u128;<br align="left"/>let mut _1300: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _1301: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _1302: u64;<br align="left"/>let mut _1303: i64;<br align="left"/>let mut _1304: isize;<br align="left"/>let _1305: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1306: !;<br align="left"/>let mut _1307: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1308: u128;<br align="left"/>let mut _1309: isize;<br align="left"/>let _1310: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1311: !;<br align="left"/>let mut _1312: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1313: u128;<br align="left"/>let mut _1314: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _1315: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _1316: u64;<br align="left"/>let _1317: state::margin_calculation::MarginCalculation;<br align="left"/>let mut _1318: (u64, state::margin_calculation::MarginCalculation);<br align="left"/>let mut _1319: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, state::margin_calculation::MarginCalculation)&gt;;<br align="left"/>let mut _1320: std::result::Result&lt;(u64, state::margin_calculation::MarginCalculation), error::ErrorCode&gt;;<br align="left"/>let mut _1321: &amp;ReErased state::user::User;<br align="left"/>let _1322: &amp;ReErased state::user::User;<br align="left"/>let mut _1323: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1324: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1325: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1326: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _1327: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1328: u32;<br align="left"/>let mut _1329: u128;<br align="left"/>let mut _1330: isize;<br align="left"/>let _1331: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1332: !;<br align="left"/>let mut _1333: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1334: (u64, state::margin_calculation::MarginCalculation);<br align="left"/>let mut _1335: u64;<br align="left"/>let mut _1336: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1337: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1338: u64;<br align="left"/>let mut _1339: u64;<br align="left"/>let mut _1340: isize;<br align="left"/>let _1341: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1342: !;<br align="left"/>let mut _1343: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1344: u64;<br align="left"/>let _1345: ();<br align="left"/>let mut _1346: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1347: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1348: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1349: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1350: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1351: u64;<br align="left"/>let mut _1352: isize;<br align="left"/>let _1353: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1354: !;<br align="left"/>let mut _1355: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1356: ();<br align="left"/>let _1357: ();<br align="left"/>let mut _1358: bool;<br align="left"/>let mut _1359: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let _1360: ();<br align="left"/>let mut _1361: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1362: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1363: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1364: bool;<br align="left"/>let mut _1365: &amp;ReErased state::user::User;<br align="left"/>let _1366: &amp;ReErased state::user::User;<br align="left"/>let mut _1367: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1368: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1369: ();<br align="left"/>let mut _1370: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1371: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1372: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _1373: controller::position::PositionDelta;<br align="left"/>let mut _1374: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, controller::position::PositionDelta&gt;;<br align="left"/>let mut _1375: std::result::Result&lt;controller::position::PositionDelta, error::ErrorCode&gt;;<br align="left"/>let mut _1376: u64;<br align="left"/>let mut _1377: u64;<br align="left"/>let mut _1378: controller::position::PositionDirection;<br align="left"/>let mut _1379: isize;<br align="left"/>let _1380: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1381: !;<br align="left"/>let mut _1382: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1383: controller::position::PositionDelta;<br align="left"/>let _1384: ();<br align="left"/>let _1385: ();<br align="left"/>let mut _1386: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _1387: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _1388: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _1389: [&amp;ReErased [u8]; 1_usize];<br align="left"/>let mut _1390: &amp;ReErased [u8];<br align="left"/>let _1391: &amp;ReErased [u8];<br align="left"/>let mut _1392: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _1393: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _1394: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _1395: &amp;ReErased state::events::LiquidationRecord;<br align="left"/>let _1396: &amp;ReErased state::events::LiquidationRecord;<br align="left"/>let _1397: state::events::LiquidationRecord;<br align="left"/>let mut _1398: i64;<br align="left"/>let mut _1399: u16;<br align="left"/>let mut _1400: state::events::LiquidationType;<br align="left"/>let mut _1401: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1402: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1403: u128;<br align="left"/>let mut _1404: i128;<br align="left"/>let mut _1405: bool;<br align="left"/>let mut _1406: &amp;ReErased state::user::User;<br align="left"/>let _1407: &amp;ReErased state::user::User;<br align="left"/>let mut _1408: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _1409: std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let mut _1410: u64;<br align="left"/>let mut _1411: state::events::LiquidatePerpRecord;<br align="left"/>let mut _1412: u16;<br align="left"/>let mut _1413: i64;<br align="left"/>let mut _1414: i64;<br align="left"/>let mut _1415: i64;<br align="left"/>let mut _1416: u64;<br align="left"/>let mut _1417: u32;<br align="left"/>let mut _1418: u64;<br align="left"/>let mut _1419: u64;<br align="left"/>let mut _1420: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1421: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1422: i64;<br align="left"/>let mut _1423: i64;<br align="left"/>let mut _1424: isize;<br align="left"/>let _1425: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1426: !;<br align="left"/>let mut _1427: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1428: u64;<br align="left"/>let mut _1429: state::events::LiquidationRecord;<br align="left"/>let mut _1430: ();<br align="left"/>let mut _1431: &amp;ReErased std::option::Option&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::high_leverage_mode_config::HighLeverageModeConfig&gt;&gt;;<br align="left"/>let mut _1432: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1433: &amp;ReErased state::perp_market::MarketStatus;<br align="left"/>let mut _1434: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1435: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1436: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1437: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1438: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1439: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1440: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1441: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1442: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _1443: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1444: bool;<br align="left"/>let mut _1445: bool;<br align="left"/>let mut _1446: bool;<br align="left"/>let mut _1447: bool;<br align="left"/>let mut _1448: bool;<br align="left"/>let mut _1449: bool;<br align="left"/>let mut _1450: bool;<br align="left"/>let mut _1451: bool;<br align="left"/>let mut _1452: bool;<br align="left"/>let mut _1453: bool;<br align="left"/>let mut _1454: bool;<br align="left"/>let mut _1455: bool;<br align="left"/>let mut _1456: bool;<br align="left"/>let mut _1457: bool;<br align="left"/>let mut _1458: isize;<br align="left"/>let mut _1459: isize;<br align="left"/>let mut _1460: isize;<br align="left"/>let mut _1461: isize;<br align="left"/>let mut _1462: isize;<br align="left"/>let mut _1463: isize;<br align="left"/>let mut _1464: isize;<br align="left"/>let mut _1465: isize;<br align="left"/>let mut _1466: isize;<br align="left"/>let mut _1467: isize;<br align="left"/>let mut _1468: isize;<br align="left"/>let mut _1469: isize;<br align="left"/>let mut _1470: isize;<br align="left"/>let mut _1471: isize;<br align="left"/>let mut _1472: isize;<br align="left"/>let mut _1473: isize;<br align="left"/>let mut _1474: isize;<br align="left"/>let mut _1475: isize;<br align="left"/>let mut _1476: isize;<br align="left"/>let mut _1477: isize;<br align="left"/>let mut _1478: isize;<br align="left"/>let mut _1479: isize;<br align="left"/>let mut _1480: isize;<br align="left"/>let mut _1481: isize;<br align="left"/>let mut _1482: isize;<br align="left"/>let mut _1483: isize;<br align="left"/>let mut _1484: isize;<br align="left"/>let mut _1485: isize;<br align="left"/>let mut _1486: isize;<br align="left"/>let mut _1487: isize;<br align="left"/>let mut _1488: isize;<br align="left"/>let mut _1489: isize;<br align="left"/>let mut _1490: isize;<br align="left"/>let mut _1491: isize;<br align="left"/>let mut _1492: isize;<br align="left"/>let mut _1493: isize;<br align="left"/>let mut _1494: isize;<br align="left"/>let mut _1495: isize;<br align="left"/>let mut _1496: isize;<br align="left"/>let mut _1497: isize;<br align="left"/>let mut _1498: isize;<br align="left"/>let mut _1499: isize;<br align="left"/>let mut _1500: isize;<br align="left"/>let mut _1501: isize;<br align="left"/>let mut _1502: isize;<br align="left"/>let mut _1503: isize;<br align="left"/>let mut _1504: isize;<br align="left"/>let mut _1505: isize;<br align="left"/>let mut _1506: isize;<br align="left"/>let mut _1507: isize;<br align="left"/>let mut _1508: isize;<br align="left"/>let mut _1509: isize;<br align="left"/>let mut _1510: isize;<br align="left"/>let mut _1511: isize;<br align="left"/>let mut _1512: isize;<br align="left"/>let mut _1513: isize;<br align="left"/>let mut _1514: isize;<br align="left"/>let mut _1515: isize;<br align="left"/>let mut _1516: isize;<br align="left"/>let mut _1517: isize;<br align="left"/>let mut _1518: isize;<br align="left"/>let mut _1519: isize;<br align="left"/>let mut _1520: isize;<br align="left"/>let mut _1521: isize;<br align="left"/>let mut _1522: isize;<br align="left"/>let mut _1523: isize;<br align="left"/>let mut _1524: isize;<br align="left"/>let mut _1525: isize;<br align="left"/>let mut _1526: isize;<br align="left"/>let mut _1527: isize;<br align="left"/>let mut _1528: isize;<br align="left"/>let mut _1529: isize;<br align="left"/>let mut _1530: isize;<br align="left"/>let mut _1531: isize;<br align="left"/>let mut _1532: isize;<br align="left"/>let mut _1533: isize;<br align="left"/>let mut _1534: isize;<br align="left"/>let mut _1535: isize;<br align="left"/>let mut _1536: isize;<br align="left"/>let mut _1537: isize;<br align="left"/>debug market_index =&gt; _1;<br align="left"/>debug user_loader =&gt; _2;<br align="left"/>debug user_key =&gt; _3;<br align="left"/>debug user_stats_loader =&gt; _4;<br align="left"/>debug liquidator_loader =&gt; _5;<br align="left"/>debug liquidator_key =&gt; _6;<br align="left"/>debug liquidator_stats_loader =&gt; _7;<br align="left"/>debug makers_and_referrer =&gt; _8;<br align="left"/>debug makers_and_referrer_stats =&gt; _9;<br align="left"/>debug perp_market_map =&gt; _10;<br align="left"/>debug spot_market_map =&gt; _11;<br align="left"/>debug oracle_map =&gt; _12;<br align="left"/>debug clock =&gt; _13;<br align="left"/>debug state =&gt; _14;<br align="left"/>debug now =&gt; _15;<br align="left"/>debug slot =&gt; _16;<br align="left"/>debug user =&gt; _17;<br align="left"/>debug residual =&gt; _24;<br align="left"/>debug val =&gt; _27;<br align="left"/>debug liquidator =&gt; _28;<br align="left"/>debug residual =&gt; _35;<br align="left"/>debug val =&gt; _38;<br align="left"/>debug liquidation_margin_buffer_ratio =&gt; _39;<br align="left"/>debug initial_pct_to_liquidate =&gt; _40;<br align="left"/>debug liquidation_duration =&gt; _42;<br align="left"/>debug error_code =&gt; _52;<br align="left"/>debug res =&gt; _59;<br align="left"/>debug res =&gt; _78;<br align="left"/>debug residual =&gt; _86;<br align="left"/>debug val =&gt; _89;<br align="left"/>debug error_code =&gt; _98;<br align="left"/>debug res =&gt; _105;<br align="left"/>debug res =&gt; _124;<br align="left"/>debug residual =&gt; _141;<br align="left"/>debug val =&gt; _144;<br align="left"/>debug error_code =&gt; _153;<br align="left"/>debug res =&gt; _160;<br align="left"/>debug res =&gt; _179;<br align="left"/>debug residual =&gt; _187;<br align="left"/>debug val =&gt; _190;<br align="left"/>debug market =&gt; _191;<br align="left"/>debug residual =&gt; _198;<br align="left"/>debug val =&gt; _201;<br align="left"/>debug error_code =&gt; _211;<br align="left"/>debug res =&gt; _218;<br align="left"/>debug res =&gt; _237;<br align="left"/>debug residual =&gt; _252;<br align="left"/>debug val =&gt; _255;<br align="left"/>debug residual =&gt; _276;<br align="left"/>debug val =&gt; _279;<br align="left"/>debug residual =&gt; _282;<br align="left"/>debug val =&gt; _285;<br align="left"/>debug residual =&gt; _304;<br align="left"/>debug val =&gt; _307;<br align="left"/>debug residual =&gt; _310;<br align="left"/>debug val =&gt; _313;<br align="left"/>debug margin_calculation =&gt; _314;<br align="left"/>debug residual =&gt; _332;<br align="left"/>debug val =&gt; _335;<br align="left"/>debug residual =&gt; _337;<br align="left"/>debug val =&gt; _340;<br align="left"/>debug res =&gt; _355;<br align="left"/>debug residual =&gt; _378;<br align="left"/>debug val =&gt; _381;<br align="left"/>debug residual =&gt; _399;<br align="left"/>debug val =&gt; _402;<br align="left"/>debug liquidation_id =&gt; _403;<br align="left"/>debug residual =&gt; _411;<br align="left"/>debug val =&gt; _414;<br align="left"/>debug margin_freed =&gt; _415;<br align="left"/>debug position_index =&gt; _416;<br align="left"/>debug residual =&gt; _425;<br align="left"/>debug val =&gt; _428;<br align="left"/>debug error_code =&gt; _447;<br align="left"/>debug res =&gt; _454;<br align="left"/>debug residual =&gt; _469;<br align="left"/>debug val =&gt; _472;<br align="left"/>debug canceled_order_ids =&gt; _473;<br align="left"/>debug residual =&gt; _493;<br align="left"/>debug val =&gt; _496;<br align="left"/>debug market =&gt; _497;<br align="left"/>debug residual =&gt; _504;<br align="left"/>debug val =&gt; _507;<br align="left"/>debug oracle_price_data =&gt; _508;<br align="left"/>debug residual =&gt; _519;<br align="left"/>debug val =&gt; _522;<br align="left"/>debug mm_oracle_price_data =&gt; _523;<br align="left"/>debug residual =&gt; _534;<br align="left"/>debug val =&gt; _537;<br align="left"/>debug residual =&gt; _553;<br align="left"/>debug val =&gt; _556;<br align="left"/>debug oracle_price =&gt; _557;<br align="left"/>debug lp_shares =&gt; _568;<br align="left"/>debug intermediate_margin_calculation =&gt; _569;<br align="left"/>debug intermediate_margin_calculation =&gt; _574;<br align="left"/>debug residual =&gt; _592;<br align="left"/>debug val =&gt; _595;<br align="left"/>debug residual =&gt; _597;<br align="left"/>debug val =&gt; _600;<br align="left"/>debug initial_margin_shortage =&gt; _601;<br align="left"/>debug residual =&gt; _606;<br align="left"/>debug val =&gt; _609;<br align="left"/>debug new_margin_shortage =&gt; _610;<br align="left"/>debug residual =&gt; _615;<br align="left"/>debug val =&gt; _618;<br align="left"/>debug residual =&gt; _626;<br align="left"/>debug val =&gt; _629;<br align="left"/>debug residual =&gt; _638;<br align="left"/>debug val =&gt; _641;<br align="left"/>debug residual =&gt; _648;<br align="left"/>debug val =&gt; _651;<br align="left"/>debug oracle_price_too_divergent =&gt; _704;<br align="left"/>debug residual =&gt; _718;<br align="left"/>debug val =&gt; _721;<br align="left"/>debug residual =&gt; _728;<br align="left"/>debug val =&gt; _731;<br align="left"/>debug residual =&gt; _733;<br align="left"/>debug val =&gt; _736;<br align="left"/>debug error_code =&gt; _742;<br align="left"/>debug res =&gt; _749;<br align="left"/>debug residual =&gt; _764;<br align="left"/>debug val =&gt; _767;<br align="left"/>debug user_base_asset_amount =&gt; _768;<br align="left"/>debug margin_ratio =&gt; _775;<br align="left"/>debug residual =&gt; _788;<br align="left"/>debug val =&gt; _791;<br align="left"/>debug residual =&gt; _797;<br align="left"/>debug val =&gt; _800;<br align="left"/>debug residual =&gt; _808;<br align="left"/>debug val =&gt; _811;<br align="left"/>debug margin_ratio_with_buffer =&gt; _812;<br align="left"/>debug residual =&gt; _818;<br align="left"/>debug val =&gt; _821;<br align="left"/>debug margin_shortage =&gt; _822;<br align="left"/>debug residual =&gt; _827;<br align="left"/>debug val =&gt; _830;<br align="left"/>debug market =&gt; _831;<br align="left"/>debug residual =&gt; _838;<br align="left"/>debug val =&gt; _841;<br align="left"/>debug quote_spot_market =&gt; _842;<br align="left"/>debug residual =&gt; _851;<br align="left"/>debug val =&gt; _854;<br align="left"/>debug quote_oracle_price =&gt; _855;<br align="left"/>debug residual =&gt; _867;<br align="left"/>debug val =&gt; _870;<br align="left"/>debug liquidator_fee =&gt; _871;<br align="left"/>debug if_liquidation_fee =&gt; _874;<br align="left"/>debug residual =&gt; _883;<br align="left"/>debug val =&gt; _886;<br align="left"/>debug residual =&gt; _896;<br align="left"/>debug val =&gt; _899;<br align="left"/>debug base_asset_amount_to_cover_margin_shortage =&gt; _900;<br align="left"/>debug residual =&gt; _913;<br align="left"/>debug val =&gt; _916;<br align="left"/>debug residual =&gt; _921;<br align="left"/>debug val =&gt; _924;<br align="left"/>debug max_pct_allowed =&gt; _929;<br align="left"/>debug residual =&gt; _941;<br align="left"/>debug val =&gt; _944;<br align="left"/>debug max_base_asset_amount_allowed_to_be_transferred =&gt; _945;<br align="left"/>debug residual =&gt; _957;<br align="left"/>debug val =&gt; _960;<br align="left"/>debug residual =&gt; _963;<br align="left"/>debug val =&gt; _966;<br align="left"/>debug residual =&gt; _968;<br align="left"/>debug val =&gt; _971;<br align="left"/>debug base_asset_value =&gt; _980;<br align="left"/>debug residual =&gt; _991;<br align="left"/>debug val =&gt; _994;<br align="left"/>debug residual =&gt; _997;<br align="left"/>debug val =&gt; _1000;<br align="left"/>debug residual =&gt; _1002;<br align="left"/>debug val =&gt; _1005;<br align="left"/>debug min_base_asset_amount =&gt; _1006;<br align="left"/>debug base_asset_amount =&gt; _1011;<br align="left"/>debug base_asset_amount =&gt; _1016;<br align="left"/>debug residual =&gt; _1030;<br align="left"/>debug val =&gt; _1033;<br align="left"/>debug residual =&gt; _1035;<br align="left"/>debug val =&gt; _1038;<br align="left"/>debug existing_direction =&gt; _1039;<br align="left"/>debug max_liquidation_fee =&gt; _1046;<br align="left"/>debug residual =&gt; _1059;<br align="left"/>debug val =&gt; _1062;<br align="left"/>debug residual =&gt; _1064;<br align="left"/>debug val =&gt; _1067;<br align="left"/>debug liquidator_fee_adjusted =&gt; _1068;<br align="left"/>debug residual =&gt; _1078;<br align="left"/>debug val =&gt; _1081;<br align="left"/>debug order_params =&gt; _1082;<br align="left"/>debug residual =&gt; _1091;<br align="left"/>debug val =&gt; _1094;<br align="left"/>debug order_id =&gt; _1095;<br align="left"/>debug fill_record_id =&gt; _1098;<br align="left"/>debug residual =&gt; _1108;<br align="left"/>debug val =&gt; _1111;<br align="left"/>debug residual =&gt; _1133;<br align="left"/>debug val =&gt; _1136;<br align="left"/>debug fill_base_asset_amount =&gt; _1141;<br align="left"/>debug fill_quote_asset_amount =&gt; _1142;<br align="left"/>debug residual =&gt; _1161;<br align="left"/>debug val =&gt; _1164;<br align="left"/>debug user =&gt; _1165;<br align="left"/>debug residual =&gt; _1172;<br align="left"/>debug val =&gt; _1175;<br align="left"/>debug order_index =&gt; _1183;<br align="left"/>debug residual =&gt; _1202;<br align="left"/>debug val =&gt; _1205;<br align="left"/>debug if_fee =&gt; _1211;<br align="left"/>debug residual =&gt; _1226;<br align="left"/>debug val =&gt; _1229;<br align="left"/>debug residual =&gt; _1235;<br align="left"/>debug val =&gt; _1238;<br align="left"/>debug residual =&gt; _1240;<br align="left"/>debug val =&gt; _1243;<br align="left"/>debug residual =&gt; _1245;<br align="left"/>debug val =&gt; _1248;<br align="left"/>debug residual =&gt; _1250;<br align="left"/>debug val =&gt; _1253;<br align="left"/>debug market =&gt; _1256;<br align="left"/>debug residual =&gt; _1263;<br align="left"/>debug val =&gt; _1266;<br align="left"/>debug user_position =&gt; _1267;<br align="left"/>debug residual =&gt; _1275;<br align="left"/>debug val =&gt; _1278;<br align="left"/>debug residual =&gt; _1289;<br align="left"/>debug val =&gt; _1292;<br align="left"/>debug residual =&gt; _1305;<br align="left"/>debug val =&gt; _1308;<br align="left"/>debug residual =&gt; _1310;<br align="left"/>debug val =&gt; _1313;<br align="left"/>debug margin_freed_for_perp_position =&gt; _1316;<br align="left"/>debug margin_calculation_after =&gt; _1317;<br align="left"/>debug residual =&gt; _1331;<br align="left"/>debug val =&gt; _1334;<br align="left"/>debug residual =&gt; _1341;<br align="left"/>debug val =&gt; _1344;<br align="left"/>debug residual =&gt; _1353;<br align="left"/>debug val =&gt; _1356;<br align="left"/>debug user_position_delta =&gt; _1373;<br align="left"/>debug residual =&gt; _1380;<br align="left"/>debug val =&gt; _1383;<br align="left"/>debug residual =&gt; _1425;<br align="left"/>debug val =&gt; _1428;<br align="left"/>>;
    bb0__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_1456 = const false<br/>_1455 = const false<br/>_1454 = const false<br/>_1451 = const false<br/>_1450 = const false<br/>_1447 = const false<br/>_1446 = const false<br/>_1453 = const false<br/>_1452 = const false<br/>_1449 = const false<br/>_1448 = const false<br/>_1445 = const false<br/>_1444 = const false<br/>_1457 = const false<br/>StorageLive(_15)<br/>_15 = ((*_13).4: i64)<br/>StorageLive(_16)<br/>_16 = ((*_13).0: u64)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;(*_2)<br/></td></tr><tr><td align="left">_20 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _21)</td></tr></table>>];
    bb1__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageLive(_22)<br/>_22 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_19 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _20, move _22)</td></tr></table>>];
    bb2__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb3__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_23 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb4__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = move ((_18 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_1456 = const true<br/>_17 = move _27<br/>StorageDead(_27)<br/>_1460 = discriminant(_18)<br/>StorageDead(_18)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;(*_5)<br/></td></tr><tr><td align="left">_31 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _32)</td></tr></table>>];
    bb5__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_26)<br/>_26 = _24<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _26)</td></tr></table>>];
    bb7__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/>_1458 = discriminant(_18)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageLive(_33)<br/>_33 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_30 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _31, move _33)</td></tr></table>>];
    bb9__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">_29 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _30)</td></tr></table>>];
    bb10__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_34 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb11__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = move ((_29 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_1455 = const true<br/>_28 = move _38<br/>StorageDead(_38)<br/>_1464 = discriminant(_29)<br/>StorageDead(_29)<br/>StorageLive(_39)<br/>_39 = ((*_14).11: u32)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = ((*_14).21: u16)<br/>_40 = move _41 as u128 (IntToInt)<br/>StorageDead(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = ((*_14).20: u8)<br/>_42 = move _43 as u128 (IntToInt)<br/>StorageDead(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = &amp;_17<br/></td></tr><tr><td align="left">_49 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _50)</td></tr></table>>];
    bb12__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_29 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_37)<br/>_37 = _35<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _37)</td></tr></table>>];
    bb13__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_35)<br/>_1462 = discriminant(_29)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_48 = &amp;(*_49)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">_47 = User::is_bankrupt(move _48)</td></tr></table>>];
    bb15__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb16__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_49)<br/>StorageLive(_52)<br/>_52 = error::ErrorCode::UserBankrupt<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_1443 = const _<br/>_63 = &amp;(*_1443)<br/>_62 = &amp;(*_63)<br/>_61 = move _62 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_62)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;_52<br/>_70 = &amp;(*_71)<br/></td></tr><tr><td align="left">_69 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _70)</td></tr></table>>];
    bb17__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_49)<br/>StorageLive(_51)<br/>_51 = ()<br/>_46 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _51)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_68 = [move _69]<br/>StorageDead(_69)<br/>_67 = &amp;_68<br/>_66 = &amp;(*_67)<br/>_65 = move _66 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_60 = Arguments::&lt;'_&gt;::new_v1(move _61, move _65)</td></tr></table>>];
    bb19__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">_59 = format(move _60)</td></tr></table>>];
    bb20__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_71)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageDead(_63)<br/>_58 = move _59<br/>StorageDead(_59)<br/>_57 = &amp;_58<br/>_56 = &amp;(*_57)<br/></td></tr><tr><td align="left">_55 = &lt;String as Deref&gt;::deref(move _56)</td></tr></table>>];
    bb21__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_54 = &amp;(*_55)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">_53 = solana_program::log::sol_log(move _54)</td></tr></table>>];
    bb22__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/></td></tr><tr><td align="left">drop(_58)</td></tr></table>>];
    bb23__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_55)<br/>StorageDead(_53)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>_1442 = const _<br/>_82 = &amp;(*_1442)<br/>_81 = &amp;(*_82)<br/>_80 = move _81 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">_79 = Arguments::&lt;'_&gt;::new_const(move _80)</td></tr></table>>];
    bb24__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/></td></tr><tr><td align="left">_78 = format(move _79)</td></tr></table>>];
    bb25__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageDead(_82)<br/>_77 = move _78<br/>StorageDead(_78)<br/>_76 = &amp;_77<br/>_75 = &amp;(*_76)<br/></td></tr><tr><td align="left">_74 = &lt;String as Deref&gt;::deref(move _75)</td></tr></table>>];
    bb26__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_73 = &amp;(*_74)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">_72 = solana_program::log::sol_log(move _73)</td></tr></table>>];
    bb27__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/></td></tr><tr><td align="left">drop(_77)</td></tr></table>>];
    bb28__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_76)<br/>StorageDead(_74)<br/>StorageDead(_72)<br/>StorageLive(_84)<br/>_84 = _52<br/>_46 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _84)<br/>StorageDead(_84)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/></td></tr><tr><td align="left">_45 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _46)</td></tr></table>>];
    bb30__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>_85 = discriminant(_45)<br/></td></tr><tr><td align="left">switchInt(move _85)</td></tr></table>>];
    bb31__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_89)<br/>_89 = ((_45 as Continue).0: ())<br/>_44 = _89<br/>StorageDead(_89)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = &amp;_28<br/></td></tr><tr><td align="left">_95 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _96)</td></tr></table>>];
    bb32__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_86)<br/>_86 = ((_45 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_88)<br/>_88 = _86<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _88)</td></tr></table>>];
    bb33__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_86)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/>_94 = ((*_95).27: u8)<br/>_93 = Eq(move _94, const 0_u8)<br/></td></tr><tr><td align="left">switchInt(move _93)</td></tr></table>>];
    bb35__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>StorageDead(_94)<br/>StorageLive(_97)<br/>_97 = ()<br/>_92 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _97)<br/>StorageDead(_97)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>StorageDead(_94)<br/>StorageLive(_98)<br/>_98 = error::ErrorCode::InvalidPoolId<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>_1441 = const _<br/>_109 = &amp;(*_1441)<br/>_108 = &amp;(*_109)<br/>_107 = move _108 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_108)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>_117 = &amp;_98<br/>_116 = &amp;(*_117)<br/></td></tr><tr><td align="left">_115 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _116)</td></tr></table>>];
    bb37__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_116)<br/>_114 = [move _115]<br/>StorageDead(_115)<br/>_113 = &amp;_114<br/>_112 = &amp;(*_113)<br/>_111 = move _112 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_112)<br/></td></tr><tr><td align="left">_106 = Arguments::&lt;'_&gt;::new_v1(move _107, move _111)</td></tr></table>>];
    bb38__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_107)<br/></td></tr><tr><td align="left">_105 = format(move _106)</td></tr></table>>];
    bb39__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>StorageDead(_117)<br/>StorageDead(_114)<br/>StorageDead(_113)<br/>StorageDead(_109)<br/>_104 = move _105<br/>StorageDead(_105)<br/>_103 = &amp;_104<br/>_102 = &amp;(*_103)<br/></td></tr><tr><td align="left">_101 = &lt;String as Deref&gt;::deref(move _102)</td></tr></table>>];
    bb40__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_100 = &amp;(*_101)<br/>StorageDead(_102)<br/></td></tr><tr><td align="left">_99 = solana_program::log::sol_log(move _100)</td></tr></table>>];
    bb41__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/></td></tr><tr><td align="left">drop(_104)</td></tr></table>>];
    bb42__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/>StorageDead(_103)<br/>StorageDead(_101)<br/>StorageDead(_99)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>_1440 = const _<br/>_128 = &amp;(*_1440)<br/>_127 = &amp;(*_128)<br/>_126 = move _127 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_127)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>StorageLive(_134)<br/>StorageLive(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>StorageLive(_138)<br/>_138 = &amp;_28<br/></td></tr><tr><td align="left">_137 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _138)</td></tr></table>>];
    bb43__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>_136 = &amp;((*_137).27: u8)<br/>_135 = &amp;(*_136)<br/></td></tr><tr><td align="left">_134 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u8&gt;(move _135)</td></tr></table>>];
    bb44__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_135)<br/>_133 = [move _134]<br/>StorageDead(_134)<br/>_132 = &amp;_133<br/>_131 = &amp;(*_132)<br/>_130 = move _131 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_131)<br/></td></tr><tr><td align="left">_125 = Arguments::&lt;'_&gt;::new_v1(move _126, move _130)</td></tr></table>>];
    bb45__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_130)<br/>StorageDead(_126)<br/></td></tr><tr><td align="left">_124 = format(move _125)</td></tr></table>>];
    bb46__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/>StorageDead(_137)<br/>StorageDead(_136)<br/>StorageDead(_133)<br/>StorageDead(_132)<br/>StorageDead(_128)<br/>_123 = move _124<br/>StorageDead(_124)<br/>_122 = &amp;_123<br/>_121 = &amp;(*_122)<br/></td></tr><tr><td align="left">_120 = &lt;String as Deref&gt;::deref(move _121)</td></tr></table>>];
    bb47__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">_119 = &amp;(*_120)<br/>StorageDead(_121)<br/></td></tr><tr><td align="left">_118 = solana_program::log::sol_log(move _119)</td></tr></table>>];
    bb48__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/></td></tr><tr><td align="left">drop(_123)</td></tr></table>>];
    bb49__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>StorageDead(_122)<br/>StorageDead(_120)<br/>StorageDead(_118)<br/>StorageLive(_139)<br/>_139 = _98<br/>_92 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _139)<br/>StorageDead(_139)<br/>StorageDead(_98)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/></td></tr><tr><td align="left">_91 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _92)</td></tr></table>>];
    bb51__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>_140 = discriminant(_91)<br/></td></tr><tr><td align="left">switchInt(move _140)</td></tr></table>>];
    bb52__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageLive(_144)<br/>_144 = ((_91 as Continue).0: ())<br/>_90 = _144<br/>StorageDead(_144)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageLive(_145)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>_151 = &amp;_28<br/></td></tr><tr><td align="left">_150 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _151)</td></tr></table>>];
    bb53__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_141)<br/>_141 = ((_91 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_143)<br/>_143 = _141<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _143)</td></tr></table>>];
    bb54__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_143)<br/>StorageDead(_141)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">_149 = &amp;(*_150)<br/>StorageDead(_151)<br/></td></tr><tr><td align="left">_148 = User::is_bankrupt(move _149)</td></tr></table>>];
    bb56__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left">switchInt(move _148)</td></tr></table>>];
    bb57__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_150)<br/>StorageLive(_153)<br/>_153 = error::ErrorCode::UserBankrupt<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>StorageLive(_156)<br/>StorageLive(_157)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>_1439 = const _<br/>_164 = &amp;(*_1439)<br/>_163 = &amp;(*_164)<br/>_162 = move _163 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_163)<br/>StorageLive(_166)<br/>StorageLive(_167)<br/>StorageLive(_168)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>_172 = &amp;_153<br/>_171 = &amp;(*_172)<br/></td></tr><tr><td align="left">_170 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _171)</td></tr></table>>];
    bb58__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_150)<br/>StorageLive(_152)<br/>_152 = ()<br/>_147 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _152)<br/>StorageDead(_152)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_171)<br/>_169 = [move _170]<br/>StorageDead(_170)<br/>_168 = &amp;_169<br/>_167 = &amp;(*_168)<br/>_166 = move _167 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_167)<br/></td></tr><tr><td align="left">_161 = Arguments::&lt;'_&gt;::new_v1(move _162, move _166)</td></tr></table>>];
    bb60__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_166)<br/>StorageDead(_162)<br/></td></tr><tr><td align="left">_160 = format(move _161)</td></tr></table>>];
    bb61__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_161)<br/>StorageDead(_172)<br/>StorageDead(_169)<br/>StorageDead(_168)<br/>StorageDead(_164)<br/>_159 = move _160<br/>StorageDead(_160)<br/>_158 = &amp;_159<br/>_157 = &amp;(*_158)<br/></td></tr><tr><td align="left">_156 = &lt;String as Deref&gt;::deref(move _157)</td></tr></table>>];
    bb62__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">_155 = &amp;(*_156)<br/>StorageDead(_157)<br/></td></tr><tr><td align="left">_154 = solana_program::log::sol_log(move _155)</td></tr></table>>];
    bb63__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_155)<br/></td></tr><tr><td align="left">drop(_159)</td></tr></table>>];
    bb64__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>StorageDead(_158)<br/>StorageDead(_156)<br/>StorageDead(_154)<br/>StorageLive(_173)<br/>StorageLive(_174)<br/>StorageLive(_175)<br/>StorageLive(_176)<br/>StorageLive(_177)<br/>StorageLive(_178)<br/>StorageLive(_179)<br/>StorageLive(_180)<br/>StorageLive(_181)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>_1438 = const _<br/>_183 = &amp;(*_1438)<br/>_182 = &amp;(*_183)<br/>_181 = move _182 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_182)<br/></td></tr><tr><td align="left">_180 = Arguments::&lt;'_&gt;::new_const(move _181)</td></tr></table>>];
    bb65__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_181)<br/></td></tr><tr><td align="left">_179 = format(move _180)</td></tr></table>>];
    bb66__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_180)<br/>StorageDead(_183)<br/>_178 = move _179<br/>StorageDead(_179)<br/>_177 = &amp;_178<br/>_176 = &amp;(*_177)<br/></td></tr><tr><td align="left">_175 = &lt;String as Deref&gt;::deref(move _176)</td></tr></table>>];
    bb67__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">_174 = &amp;(*_175)<br/>StorageDead(_176)<br/></td></tr><tr><td align="left">_173 = solana_program::log::sol_log(move _174)</td></tr></table>>];
    bb68__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_174)<br/></td></tr><tr><td align="left">drop(_178)</td></tr></table>>];
    bb69__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_178)<br/>StorageDead(_177)<br/>StorageDead(_175)<br/>StorageDead(_173)<br/>StorageLive(_185)<br/>_185 = _153<br/>_147 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _185)<br/>StorageDead(_185)<br/>StorageDead(_153)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/></td></tr><tr><td align="left">_146 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _147)</td></tr></table>>];
    bb71__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_147)<br/>_186 = discriminant(_146)<br/></td></tr><tr><td align="left">switchInt(move _186)</td></tr></table>>];
    bb72__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageLive(_190)<br/>_190 = ((_146 as Continue).0: ())<br/>_145 = _190<br/>StorageDead(_190)<br/>StorageDead(_146)<br/>StorageDead(_145)<br/>StorageLive(_191)<br/>StorageLive(_192)<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>_194 = &amp;(*_10)<br/>StorageLive(_195)<br/>StorageLive(_196)<br/>_196 = &amp;_1<br/>_195 = &amp;(*_196)<br/></td></tr><tr><td align="left">_193 = PerpMarketMap::&lt;'_&gt;::get_ref(move _194, move _195)</td></tr></table>>];
    bb73__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageLive(_187)<br/>_187 = ((_146 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_189)<br/>_189 = _187<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _189)</td></tr></table>>];
    bb74__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_189)<br/>StorageDead(_187)<br/>StorageDead(_146)<br/>StorageDead(_145)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_195)<br/>StorageDead(_194)<br/></td></tr><tr><td align="left">_192 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _193)</td></tr></table>>];
    bb76__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_193)<br/>_197 = discriminant(_192)<br/></td></tr><tr><td align="left">switchInt(move _197)</td></tr></table>>];
    bb77__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageLive(_201)<br/>_201 = move ((_192 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1454 = const true<br/>_191 = move _201<br/>StorageDead(_201)<br/>_1468 = discriminant(_192)<br/>StorageDead(_196)<br/>StorageDead(_192)<br/>StorageLive(_202)<br/>StorageLive(_203)<br/>StorageLive(_204)<br/>StorageLive(_205)<br/>StorageLive(_206)<br/>StorageLive(_207)<br/>StorageLive(_208)<br/>_208 = &amp;_191<br/></td></tr><tr><td align="left">_207 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _208)</td></tr></table>>];
    bb78__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageLive(_198)<br/>_198 = ((_192 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_200)<br/>_200 = _198<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _200)</td></tr></table>>];
    bb79__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_200)<br/>StorageDead(_198)<br/>_1466 = discriminant(_192)<br/>StorageDead(_196)<br/>StorageDead(_192)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb80__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">_206 = &amp;(*_207)<br/>StorageDead(_208)<br/>StorageLive(_209)<br/>_209 = PerpOperation::Liquidation<br/></td></tr><tr><td align="left">_205 = PerpMarket::is_operation_paused(move _206, move _209)</td></tr></table>>];
    bb81__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left">switchInt(move _205)</td></tr></table>>];
    bb82__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_209)<br/>StorageDead(_206)<br/>StorageDead(_207)<br/>StorageLive(_211)<br/>_211 = error::ErrorCode::InvalidLiquidation<br/>StorageLive(_212)<br/>StorageLive(_213)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>StorageLive(_216)<br/>StorageLive(_217)<br/>StorageLive(_218)<br/>StorageLive(_219)<br/>StorageLive(_220)<br/>StorageLive(_221)<br/>StorageLive(_222)<br/>_1437 = const _<br/>_222 = &amp;(*_1437)<br/>_221 = &amp;(*_222)<br/>_220 = move _221 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_221)<br/>StorageLive(_224)<br/>StorageLive(_225)<br/>StorageLive(_226)<br/>StorageLive(_227)<br/>StorageLive(_228)<br/>StorageLive(_229)<br/>StorageLive(_230)<br/>_230 = &amp;_211<br/>_229 = &amp;(*_230)<br/></td></tr><tr><td align="left">_228 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _229)</td></tr></table>>];
    bb83__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_209)<br/>StorageDead(_206)<br/>StorageDead(_207)<br/>StorageLive(_210)<br/>_210 = ()<br/>_204 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _210)<br/>StorageDead(_210)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb84__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_229)<br/>_227 = [move _228]<br/>StorageDead(_228)<br/>_226 = &amp;_227<br/>_225 = &amp;(*_226)<br/>_224 = move _225 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_225)<br/></td></tr><tr><td align="left">_219 = Arguments::&lt;'_&gt;::new_v1(move _220, move _224)</td></tr></table>>];
    bb85__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_224)<br/>StorageDead(_220)<br/></td></tr><tr><td align="left">_218 = format(move _219)</td></tr></table>>];
    bb86__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_219)<br/>StorageDead(_230)<br/>StorageDead(_227)<br/>StorageDead(_226)<br/>StorageDead(_222)<br/>_217 = move _218<br/>StorageDead(_218)<br/>_216 = &amp;_217<br/>_215 = &amp;(*_216)<br/></td></tr><tr><td align="left">_214 = &lt;String as Deref&gt;::deref(move _215)</td></tr></table>>];
    bb87__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">_213 = &amp;(*_214)<br/>StorageDead(_215)<br/></td></tr><tr><td align="left">_212 = solana_program::log::sol_log(move _213)</td></tr></table>>];
    bb88__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_213)<br/></td></tr><tr><td align="left">drop(_217)</td></tr></table>>];
    bb89__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_217)<br/>StorageDead(_216)<br/>StorageDead(_214)<br/>StorageDead(_212)<br/>StorageLive(_231)<br/>StorageLive(_232)<br/>StorageLive(_233)<br/>StorageLive(_234)<br/>StorageLive(_235)<br/>StorageLive(_236)<br/>StorageLive(_237)<br/>StorageLive(_238)<br/>StorageLive(_239)<br/>StorageLive(_240)<br/>StorageLive(_241)<br/>_1436 = const _<br/>_241 = &amp;(*_1436)<br/>_240 = &amp;(*_241)<br/>_239 = move _240 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_240)<br/>StorageLive(_243)<br/>StorageLive(_244)<br/>StorageLive(_245)<br/>StorageLive(_246)<br/>StorageLive(_247)<br/>StorageLive(_248)<br/>StorageLive(_249)<br/>_249 = &amp;_1<br/>_248 = &amp;(*_249)<br/></td></tr><tr><td align="left">_247 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _248)</td></tr></table>>];
    bb90__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_248)<br/>_246 = [move _247]<br/>StorageDead(_247)<br/>_245 = &amp;_246<br/>_244 = &amp;(*_245)<br/>_243 = move _244 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_244)<br/></td></tr><tr><td align="left">_238 = Arguments::&lt;'_&gt;::new_v1(move _239, move _243)</td></tr></table>>];
    bb91__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_243)<br/>StorageDead(_239)<br/></td></tr><tr><td align="left">_237 = format(move _238)</td></tr></table>>];
    bb92__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_238)<br/>StorageDead(_249)<br/>StorageDead(_246)<br/>StorageDead(_245)<br/>StorageDead(_241)<br/>_236 = move _237<br/>StorageDead(_237)<br/>_235 = &amp;_236<br/>_234 = &amp;(*_235)<br/></td></tr><tr><td align="left">_233 = &lt;String as Deref&gt;::deref(move _234)</td></tr></table>>];
    bb93__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">_232 = &amp;(*_233)<br/>StorageDead(_234)<br/></td></tr><tr><td align="left">_231 = solana_program::log::sol_log(move _232)</td></tr></table>>];
    bb94__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_232)<br/></td></tr><tr><td align="left">drop(_236)</td></tr></table>>];
    bb95__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_236)<br/>StorageDead(_235)<br/>StorageDead(_233)<br/>StorageDead(_231)<br/>StorageLive(_250)<br/>_250 = _211<br/>_204 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _250)<br/>StorageDead(_250)<br/>StorageDead(_211)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb96__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_205)<br/></td></tr><tr><td align="left">_203 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _204)</td></tr></table>>];
    bb97__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_204)<br/>_251 = discriminant(_203)<br/></td></tr><tr><td align="left">switchInt(move _251)</td></tr></table>>];
    bb98__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageLive(_255)<br/>_255 = ((_203 as Continue).0: ())<br/>_202 = _255<br/>StorageDead(_255)<br/>StorageDead(_203)<br/>StorageDead(_202)<br/>StorageLive(_256)<br/>StorageLive(_257)<br/>_1454 = const false<br/>_257 = move _191<br/></td></tr><tr><td align="left">_256 = std::mem::drop::&lt;Ref&lt;'_, PerpMarket&gt;&gt;(move _257)</td></tr></table>>];
    bb99__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageLive(_252)<br/>_252 = ((_203 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_254)<br/>_254 = _252<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _254)</td></tr></table>>];
    bb100__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_254)<br/>StorageDead(_252)<br/>StorageDead(_203)<br/>StorageDead(_202)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb101__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_257)<br/>StorageDead(_256)<br/>StorageLive(_258)<br/>StorageLive(_259)<br/>StorageLive(_260)<br/>StorageLive(_261)<br/>StorageLive(_262)<br/>StorageLive(_263)<br/>StorageLive(_264)<br/>_264 = &amp;mut _17<br/>_263 = &amp;mut (*_264)<br/></td></tr><tr><td align="left">_262 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _263)</td></tr></table>>];
    bb102__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">_261 = &amp;mut (*_262)<br/>StorageDead(_263)<br/>StorageLive(_265)<br/>_265 = &amp;(*_3)<br/>StorageLive(_266)<br/>StorageLive(_267)<br/>StorageLive(_268)<br/>StorageLive(_269)<br/>StorageLive(_270)<br/>StorageLive(_271)<br/>StorageLive(_272)<br/>_272 = &amp;(*_10)<br/>StorageLive(_273)<br/>StorageLive(_274)<br/>_274 = &amp;_1<br/>_273 = &amp;(*_274)<br/></td></tr><tr><td align="left">_271 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _272, move _273)</td></tr></table>>];
    bb103__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_273)<br/>StorageDead(_272)<br/></td></tr><tr><td align="left">_270 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _271)</td></tr></table>>];
    bb104__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">_1453 = const true<br/>StorageDead(_271)<br/>_275 = discriminant(_270)<br/></td></tr><tr><td align="left">switchInt(move _275)</td></tr></table>>];
    bb105__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageLive(_279)<br/>_279 = move ((_270 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_269 = move _279<br/>StorageDead(_279)<br/>_268 = &amp;mut _269<br/></td></tr><tr><td align="left">_267 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _268)</td></tr></table>>];
    bb106__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageLive(_276)<br/>_276 = ((_270 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_278)<br/>_278 = _276<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _278)</td></tr></table>>];
    bb107__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_278)<br/>StorageDead(_276)<br/>StorageDead(_268)<br/>StorageDead(_266)<br/>StorageDead(_265)<br/>StorageDead(_261)<br/>StorageDead(_260)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb108__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">_266 = &amp;mut (*_267)<br/>StorageDead(_268)<br/>StorageLive(_280)<br/>_280 = _15<br/></td></tr><tr><td align="left">_260 = controller::funding::settle_funding_payment(move _261, move _265, move _266, move _280)</td></tr></table>>];
    bb109__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_280)<br/>StorageDead(_266)<br/>StorageDead(_265)<br/>StorageDead(_261)<br/></td></tr><tr><td align="left">_259 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _260)</td></tr></table>>];
    bb110__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_260)<br/>_281 = discriminant(_259)<br/></td></tr><tr><td align="left">switchInt(move _281)</td></tr></table>>];
    bb111__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageLive(_285)<br/>_285 = ((_259 as Continue).0: ())<br/>_258 = _285<br/>StorageDead(_285)<br/></td></tr><tr><td align="left">drop(_269)</td></tr></table>>];
    bb112__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageLive(_282)<br/>_282 = ((_259 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_284)<br/>_284 = _282<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _284)</td></tr></table>>];
    bb113__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_284)<br/>StorageDead(_282)<br/></td></tr><tr><td align="left">drop(_269)</td></tr></table>>];
    bb114__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">_289 = &amp;mut (*_290)<br/>StorageDead(_291)<br/>StorageLive(_293)<br/>_293 = &amp;(*_6)<br/>StorageLive(_294)<br/>StorageLive(_295)<br/>StorageLive(_296)<br/>StorageLive(_297)<br/>StorageLive(_298)<br/>StorageLive(_299)<br/>StorageLive(_300)<br/>_300 = &amp;(*_10)<br/>StorageLive(_301)<br/>StorageLive(_302)<br/>_302 = &amp;_1<br/>_301 = &amp;(*_302)<br/></td></tr><tr><td align="left">_299 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _300, move _301)</td></tr></table>>];
    bb115__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_301)<br/>StorageDead(_300)<br/></td></tr><tr><td align="left">_298 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _299)</td></tr></table>>];
    bb116__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">_1452 = const true<br/>StorageDead(_299)<br/>_303 = discriminant(_298)<br/></td></tr><tr><td align="left">switchInt(move _303)</td></tr></table>>];
    bb117__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageLive(_307)<br/>_307 = move ((_298 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_297 = move _307<br/>StorageDead(_307)<br/>_296 = &amp;mut _297<br/></td></tr><tr><td align="left">_295 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _296)</td></tr></table>>];
    bb118__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageLive(_304)<br/>_304 = ((_298 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_306)<br/>_306 = _304<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _306)</td></tr></table>>];
    bb119__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_306)<br/>StorageDead(_304)<br/>StorageDead(_296)<br/>StorageDead(_294)<br/>StorageDead(_293)<br/>StorageDead(_289)<br/>StorageDead(_288)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb120__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">_294 = &amp;mut (*_295)<br/>StorageDead(_296)<br/>StorageLive(_308)<br/>_308 = _15<br/></td></tr><tr><td align="left">_288 = controller::funding::settle_funding_payment(move _289, move _293, move _294, move _308)</td></tr></table>>];
    bb121__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_308)<br/>StorageDead(_294)<br/>StorageDead(_293)<br/>StorageDead(_289)<br/></td></tr><tr><td align="left">_287 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _288)</td></tr></table>>];
    bb122__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_288)<br/>_309 = discriminant(_287)<br/></td></tr><tr><td align="left">switchInt(move _309)</td></tr></table>>];
    bb123__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageLive(_313)<br/>_313 = ((_287 as Continue).0: ())<br/>_286 = _313<br/>StorageDead(_313)<br/></td></tr><tr><td align="left">drop(_297)</td></tr></table>>];
    bb124__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageLive(_310)<br/>_310 = ((_287 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_312)<br/>_312 = _310<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _312)</td></tr></table>>];
    bb125__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_312)<br/>StorageDead(_310)<br/></td></tr><tr><td align="left">drop(_297)</td></tr></table>>];
    bb126__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">_317 = &amp;(*_318)<br/>StorageDead(_319)<br/>StorageLive(_321)<br/>_321 = &amp;(*_10)<br/>StorageLive(_322)<br/>_322 = &amp;(*_11)<br/>StorageLive(_323)<br/>_323 = &amp;mut (*_12)<br/>StorageLive(_324)<br/>StorageLive(_325)<br/>StorageLive(_326)<br/>StorageLive(_327)<br/>StorageLive(_328)<br/>_328 = _39<br/></td></tr><tr><td align="left">_327 = MarginContext::liquidation(move _328)</td></tr></table>>];
    bb127__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_328)<br/>StorageLive(_329)<br/>StorageLive(_330)<br/>_330 = _1<br/></td></tr><tr><td align="left">_329 = MarketIdentifier::perp(move _330)</td></tr></table>>];
    bb128__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_330)<br/></td></tr><tr><td align="left">_326 = MarginContext::track_market_margin_requirement(move _327, move _329)</td></tr></table>>];
    bb129__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageDead(_329)<br/>StorageDead(_327)<br/></td></tr><tr><td align="left">_325 = &lt;std::result::Result&lt;MarginContext, error::ErrorCode&gt; as Try&gt;::branch(move _326)</td></tr></table>>];
    bb130__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageDead(_326)<br/>_331 = discriminant(_325)<br/></td></tr><tr><td align="left">switchInt(move _331)</td></tr></table>>];
    bb131__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageLive(_335)<br/>_335 = ((_325 as Continue).0: state::margin_calculation::MarginContext)<br/>_324 = _335<br/>StorageDead(_335)<br/></td></tr><tr><td align="left">_316 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _317, move _321, move _322, move _323, move _324)</td></tr></table>>];
    bb132__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageLive(_332)<br/>_332 = ((_325 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_334)<br/>_334 = _332<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _334)</td></tr></table>>];
    bb133__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageDead(_334)<br/>StorageDead(_332)<br/>StorageDead(_324)<br/>StorageDead(_323)<br/>StorageDead(_322)<br/>StorageDead(_321)<br/>StorageDead(_317)<br/>StorageDead(_316)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb134__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageDead(_324)<br/>StorageDead(_323)<br/>StorageDead(_322)<br/>StorageDead(_321)<br/>StorageDead(_317)<br/></td></tr><tr><td align="left">_315 = &lt;std::result::Result&lt;MarginCalculation, error::ErrorCode&gt; as Try&gt;::branch(move _316)</td></tr></table>>];
    bb135__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageDead(_316)<br/>_336 = discriminant(_315)<br/></td></tr><tr><td align="left">switchInt(move _336)</td></tr></table>>];
    bb136__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageLive(_340)<br/>_340 = ((_315 as Continue).0: state::margin_calculation::MarginCalculation)<br/>_314 = _340<br/>StorageDead(_340)<br/>StorageDead(_325)<br/>StorageDead(_320)<br/>StorageDead(_318)<br/>StorageDead(_315)<br/>StorageLive(_341)<br/>StorageLive(_342)<br/>StorageLive(_343)<br/>StorageLive(_344)<br/>StorageLive(_345)<br/>_345 = &amp;_17<br/></td></tr><tr><td align="left">_344 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _345)</td></tr></table>>];
    bb137__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageLive(_337)<br/>_337 = ((_315 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_339)<br/>_339 = _337<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _339)</td></tr></table>>];
    bb138__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_339)<br/>StorageDead(_337)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb139__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">_343 = &amp;(*_344)<br/>StorageDead(_345)<br/></td></tr><tr><td align="left">_342 = User::is_being_liquidated(move _343)</td></tr></table>>];
    bb140__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left">switchInt(move _342)</td></tr></table>>];
    bb141__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_343)<br/>StorageDead(_344)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb142__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageDead(_343)<br/>StorageDead(_344)<br/>StorageLive(_346)<br/>StorageLive(_347)<br/>_347 = &amp;_314<br/></td></tr><tr><td align="left">_346 = MarginCalculation::meets_margin_requirement(move _347)</td></tr></table>>];
    bb143__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left">switchInt(move _346)</td></tr></table>>];
    bb144__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_347)<br/>StorageLive(_349)<br/>StorageLive(_350)<br/>StorageLive(_351)<br/>StorageLive(_352)<br/>StorageLive(_353)<br/>StorageLive(_354)<br/>StorageLive(_355)<br/>StorageLive(_356)<br/>StorageLive(_357)<br/>StorageLive(_358)<br/>StorageLive(_359)<br/>_1435 = const _<br/>_359 = &amp;(*_1435)<br/>_358 = &amp;(*_359)<br/>_357 = move _358 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_358)<br/>StorageLive(_361)<br/>StorageLive(_362)<br/>StorageLive(_363)<br/>StorageLive(_364)<br/>StorageLive(_365)<br/>StorageLive(_366)<br/>StorageLive(_367)<br/>_367 = &amp;_314<br/>_366 = &amp;(*_367)<br/></td></tr><tr><td align="left">_365 = core::fmt::rt::Argument::&lt;'_&gt;::new_debug::&lt;MarginCalculation&gt;(move _366)</td></tr></table>>];
    bb145__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageDead(_366)<br/>_364 = [move _365]<br/>StorageDead(_365)<br/>_363 = &amp;_364<br/>_362 = &amp;(*_363)<br/>_361 = move _362 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_362)<br/></td></tr><tr><td align="left">_356 = Arguments::&lt;'_&gt;::new_v1(move _357, move _361)</td></tr></table>>];
    bb146__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageDead(_361)<br/>StorageDead(_357)<br/></td></tr><tr><td align="left">_355 = format(move _356)</td></tr></table>>];
    bb147__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageDead(_356)<br/>StorageDead(_367)<br/>StorageDead(_364)<br/>StorageDead(_363)<br/>StorageDead(_359)<br/>_354 = move _355<br/>StorageDead(_355)<br/>_353 = &amp;_354<br/>_352 = &amp;(*_353)<br/></td></tr><tr><td align="left">_351 = &lt;String as Deref&gt;::deref(move _352)</td></tr></table>>];
    bb148__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">_350 = &amp;(*_351)<br/>StorageDead(_352)<br/></td></tr><tr><td align="left">_349 = solana_program::log::sol_log(move _350)</td></tr></table>>];
    bb149__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageDead(_350)<br/></td></tr><tr><td align="left">drop(_354)</td></tr></table>>];
    bb150__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageDead(_354)<br/>StorageDead(_353)<br/>StorageDead(_351)<br/>StorageDead(_349)<br/>StorageLive(_368)<br/>_368 = error::ErrorCode::SufficientCollateral<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _368)<br/>StorageDead(_368)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb151__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_347)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb152__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageLive(_369)<br/>StorageLive(_370)<br/>StorageLive(_371)<br/>StorageLive(_372)<br/>_372 = &amp;_17<br/></td></tr><tr><td align="left">_371 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _372)</td></tr></table>>];
    bb153__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">_370 = &amp;(*_371)<br/>StorageDead(_372)<br/></td></tr><tr><td align="left">_369 = User::is_being_liquidated(move _370)</td></tr></table>>];
    bb154__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left">switchInt(move _369)</td></tr></table>>];
    bb155__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageDead(_371)<br/>StorageDead(_370)<br/>StorageLive(_373)<br/>StorageLive(_374)<br/>StorageLive(_375)<br/>StorageLive(_376)<br/>_376 = &amp;_314<br/></td></tr><tr><td align="left">_375 = MarginCalculation::can_exit_liquidation(move _376)</td></tr></table>>];
    bb156__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_376)<br/></td></tr><tr><td align="left">_374 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _375)</td></tr></table>>];
    bb157__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_375)<br/>_377 = discriminant(_374)<br/></td></tr><tr><td align="left">switchInt(move _377)</td></tr></table>>];
    bb158__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageLive(_381)<br/>_381 = ((_374 as Continue).0: bool)<br/>_373 = _381<br/>StorageDead(_381)<br/></td></tr><tr><td align="left">switchInt(move _373)</td></tr></table>>];
    bb159__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageLive(_378)<br/>_378 = ((_374 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_380)<br/>_380 = _378<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _380)</td></tr></table>>];
    bb160__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageDead(_380)<br/>StorageDead(_378)<br/>StorageDead(_374)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb161__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_374)<br/>StorageLive(_383)<br/>StorageLive(_384)<br/>StorageLive(_385)<br/>StorageLive(_386)<br/>_386 = &amp;mut _17<br/></td></tr><tr><td align="left">_385 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _386)</td></tr></table>>];
    bb162__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">StorageDead(_374)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb163__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">_384 = &amp;mut (*_385)<br/>StorageDead(_386)<br/></td></tr><tr><td align="left">_383 = User::exit_liquidation(move _384)</td></tr></table>>];
    bb164__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageDead(_384)<br/>StorageDead(_385)<br/>StorageDead(_383)<br/>StorageLive(_387)<br/>_387 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _387)<br/>StorageDead(_387)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb165__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageDead(_371)<br/>StorageDead(_370)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb166__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">_341 = const ()<br/>StorageDead(_373)<br/>StorageDead(_369)<br/>StorageDead(_346)<br/>StorageDead(_342)<br/>StorageDead(_341)<br/>StorageLive(_388)<br/>StorageLive(_389)<br/>StorageLive(_390)<br/>StorageLive(_391)<br/>StorageLive(_392)<br/>StorageLive(_393)<br/>StorageLive(_394)<br/>_394 = &amp;_17<br/></td></tr><tr><td align="left">_393 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _394)</td></tr></table>>];
    bb167__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">_392 = &amp;(*_393)<br/>StorageDead(_394)<br/>StorageLive(_395)<br/>_395 = _1<br/></td></tr><tr><td align="left">_391 = User::get_perp_position(move _392, move _395)</td></tr></table>>];
    bb168__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageDead(_395)<br/>StorageDead(_392)<br/>StorageLive(_396)<br/>StorageLive(_397)<br/>_397 = &amp;_1<br/>_396 = {closure@programs/drift/src/controller/liquidation.rs:799:50: 799:53} { market_index: move _397 }<br/>StorageDead(_397)<br/></td></tr><tr><td align="left">_390 = std::result::Result::&lt;&amp;PerpPosition, error::ErrorCode&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:799:50: 799:53}&gt;(move _391, move _396)</td></tr></table>>];
    bb169__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageDead(_396)<br/>StorageDead(_391)<br/></td></tr><tr><td align="left">_389 = &lt;std::result::Result&lt;&amp;PerpPosition, error::ErrorCode&gt; as Try&gt;::branch(move _390)</td></tr></table>>];
    bb170__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageDead(_390)<br/>_398 = discriminant(_389)<br/></td></tr><tr><td align="left">switchInt(move _398)</td></tr></table>>];
    bb171__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageLive(_402)<br/>_402 = ((_389 as Continue).0: &amp;state::user::PerpPosition)<br/>_388 = _402<br/>StorageDead(_402)<br/>StorageDead(_393)<br/>StorageDead(_389)<br/>StorageDead(_388)<br/>StorageLive(_403)<br/>StorageLive(_404)<br/>StorageLive(_405)<br/>StorageLive(_406)<br/>StorageLive(_407)<br/>StorageLive(_408)<br/>_408 = &amp;mut _17<br/></td></tr><tr><td align="left">_407 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _408)</td></tr></table>>];
    bb172__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageLive(_399)<br/>_399 = ((_389 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_401)<br/>_401 = _399<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _401)</td></tr></table>>];
    bb173__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageDead(_401)<br/>StorageDead(_399)<br/>StorageDead(_393)<br/>StorageDead(_389)<br/>StorageDead(_388)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb174__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">_406 = &amp;mut (*_407)<br/>StorageDead(_408)<br/>StorageLive(_409)<br/>_409 = _16<br/></td></tr><tr><td align="left">_405 = User::enter_liquidation(move _406, move _409)</td></tr></table>>];
    bb175__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageDead(_409)<br/>StorageDead(_406)<br/></td></tr><tr><td align="left">_404 = &lt;std::result::Result&lt;u16, error::ErrorCode&gt; as Try&gt;::branch(move _405)</td></tr></table>>];
    bb176__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageDead(_405)<br/>_410 = discriminant(_404)<br/></td></tr><tr><td align="left">switchInt(move _410)</td></tr></table>>];
    bb177__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">StorageLive(_414)<br/>_414 = ((_404 as Continue).0: u16)<br/>_403 = _414<br/>StorageDead(_414)<br/>StorageDead(_407)<br/>StorageDead(_404)<br/>StorageLive(_415)<br/>_415 = const 0_u64<br/>StorageLive(_416)<br/>StorageLive(_417)<br/>StorageLive(_418)<br/>StorageLive(_419)<br/>StorageLive(_420)<br/>StorageLive(_421)<br/>StorageLive(_422)<br/>_422 = &amp;_17<br/></td></tr><tr><td align="left">_421 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _422)</td></tr></table>>];
    bb178__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageLive(_411)<br/>_411 = ((_404 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_413)<br/>_413 = _411<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _413)</td></tr></table>>];
    bb179__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">StorageDead(_413)<br/>StorageDead(_411)<br/>StorageDead(_407)<br/>StorageDead(_404)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb180__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_422)<br/>_420 = &amp;((*_421).4: [state::user::PerpPosition; 8])<br/>_419 = &amp;(*_420)<br/>StorageLive(_423)<br/>_423 = _1<br/></td></tr><tr><td align="left">_418 = get_position_index(move _419, move _423)</td></tr></table>>];
    bb181__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageDead(_423)<br/>StorageDead(_419)<br/></td></tr><tr><td align="left">_417 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _418)</td></tr></table>>];
    bb182__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">StorageDead(_418)<br/>_424 = discriminant(_417)<br/></td></tr><tr><td align="left">switchInt(move _424)</td></tr></table>>];
    bb183__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageLive(_428)<br/>_428 = ((_417 as Continue).0: usize)<br/>_416 = _428<br/>StorageDead(_428)<br/>StorageDead(_421)<br/>StorageDead(_420)<br/>StorageDead(_417)<br/>StorageLive(_429)<br/>StorageLive(_430)<br/>StorageLive(_431)<br/>StorageLive(_432)<br/>StorageLive(_433)<br/>StorageLive(_434)<br/>StorageLive(_435)<br/>_435 = &amp;_17<br/></td></tr><tr><td align="left">_434 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _435)</td></tr></table>>];
    bb184__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageLive(_425)<br/>_425 = ((_417 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_427)<br/>_427 = _425<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _427)</td></tr></table>>];
    bb185__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_427)<br/>StorageDead(_425)<br/>StorageDead(_421)<br/>StorageDead(_420)<br/>StorageDead(_417)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb186__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageDead(_435)<br/>StorageLive(_436)<br/>_436 = _416<br/>_437 = Len(((*_434).4: [state::user::PerpPosition; 8]))<br/>_438 = Lt(_436, _437)<br/></td></tr><tr><td align="left">assert(move _438, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _437, _436)</td></tr></table>>];
    bb187__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">_433 = &amp;((*_434).4: [state::user::PerpPosition; 8])[_436]<br/></td></tr><tr><td align="left">_432 = PerpPosition::is_open_position(move _433)</td></tr></table>>];
    bb188__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left">switchInt(move _432)</td></tr></table>>];
    bb189__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageDead(_436)<br/>StorageDead(_434)<br/>StorageDead(_433)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb190__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageDead(_436)<br/>StorageDead(_434)<br/>StorageDead(_433)<br/>StorageLive(_439)<br/>StorageLive(_440)<br/>StorageLive(_441)<br/>StorageLive(_442)<br/>_442 = &amp;_17<br/></td></tr><tr><td align="left">_441 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _442)</td></tr></table>>];
    bb191__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageDead(_442)<br/>StorageLive(_443)<br/>_443 = _416<br/>_444 = Len(((*_441).4: [state::user::PerpPosition; 8]))<br/>_445 = Lt(_443, _444)<br/></td></tr><tr><td align="left">assert(move _445, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _444, _443)</td></tr></table>>];
    bb192__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">_440 = &amp;((*_441).4: [state::user::PerpPosition; 8])[_443]<br/></td></tr><tr><td align="left">_439 = PerpPosition::has_open_order(move _440)</td></tr></table>>];
    bb193__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left">switchInt(move _439)</td></tr></table>>];
    bb194__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageDead(_443)<br/>StorageDead(_441)<br/>StorageDead(_440)<br/>StorageLive(_446)<br/>_446 = ()<br/>_431 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _446)<br/>StorageDead(_446)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb195__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageDead(_443)<br/>StorageDead(_441)<br/>StorageDead(_440)<br/>StorageLive(_447)<br/>_447 = error::ErrorCode::PositionDoesntHaveOpenPositionOrOrders<br/>StorageLive(_448)<br/>StorageLive(_449)<br/>StorageLive(_450)<br/>StorageLive(_451)<br/>StorageLive(_452)<br/>StorageLive(_453)<br/>StorageLive(_454)<br/>StorageLive(_455)<br/>StorageLive(_456)<br/>StorageLive(_457)<br/>StorageLive(_458)<br/>_1434 = const _<br/>_458 = &amp;(*_1434)<br/>_457 = &amp;(*_458)<br/>_456 = move _457 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_457)<br/>StorageLive(_460)<br/>StorageLive(_461)<br/>StorageLive(_462)<br/>StorageLive(_463)<br/>StorageLive(_464)<br/>StorageLive(_465)<br/>StorageLive(_466)<br/>_466 = &amp;_447<br/>_465 = &amp;(*_466)<br/></td></tr><tr><td align="left">_464 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _465)</td></tr></table>>];
    bb196__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageDead(_465)<br/>_463 = [move _464]<br/>StorageDead(_464)<br/>_462 = &amp;_463<br/>_461 = &amp;(*_462)<br/>_460 = move _461 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_461)<br/></td></tr><tr><td align="left">_455 = Arguments::&lt;'_&gt;::new_v1(move _456, move _460)</td></tr></table>>];
    bb197__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageDead(_460)<br/>StorageDead(_456)<br/></td></tr><tr><td align="left">_454 = format(move _455)</td></tr></table>>];
    bb198__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">StorageDead(_455)<br/>StorageDead(_466)<br/>StorageDead(_463)<br/>StorageDead(_462)<br/>StorageDead(_458)<br/>_453 = move _454<br/>StorageDead(_454)<br/>_452 = &amp;_453<br/>_451 = &amp;(*_452)<br/></td></tr><tr><td align="left">_450 = &lt;String as Deref&gt;::deref(move _451)</td></tr></table>>];
    bb199__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">_449 = &amp;(*_450)<br/>StorageDead(_451)<br/></td></tr><tr><td align="left">_448 = solana_program::log::sol_log(move _449)</td></tr></table>>];
    bb200__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageDead(_449)<br/></td></tr><tr><td align="left">drop(_453)</td></tr></table>>];
    bb201__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">StorageDead(_453)<br/>StorageDead(_452)<br/>StorageDead(_450)<br/>StorageDead(_448)<br/>StorageLive(_467)<br/>_467 = _447<br/>_431 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _467)<br/>StorageDead(_467)<br/>StorageDead(_447)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb202__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageDead(_439)<br/>StorageDead(_432)<br/></td></tr><tr><td align="left">_430 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _431)</td></tr></table>>];
    bb203__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageDead(_431)<br/>_468 = discriminant(_430)<br/></td></tr><tr><td align="left">switchInt(move _468)</td></tr></table>>];
    bb204__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageLive(_472)<br/>_472 = ((_430 as Continue).0: ())<br/>_429 = _472<br/>StorageDead(_472)<br/>StorageDead(_430)<br/>StorageDead(_429)<br/>StorageLive(_473)<br/>StorageLive(_474)<br/>StorageLive(_475)<br/>StorageLive(_476)<br/>StorageLive(_477)<br/>StorageLive(_478)<br/>StorageLive(_479)<br/>_479 = &amp;mut _17<br/>_478 = &amp;mut (*_479)<br/></td></tr><tr><td align="left">_477 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _478)</td></tr></table>>];
    bb205__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageLive(_469)<br/>_469 = ((_430 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_471)<br/>_471 = _469<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _471)</td></tr></table>>];
    bb206__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageDead(_471)<br/>StorageDead(_469)<br/>StorageDead(_430)<br/>StorageDead(_429)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb207__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">_476 = &amp;mut (*_477)<br/>StorageDead(_478)<br/>StorageLive(_480)<br/>_480 = &amp;(*_3)<br/>StorageLive(_481)<br/>StorageLive(_482)<br/>_482 = &amp;(*_6)<br/>_481 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::Some(move _482)<br/>StorageDead(_482)<br/>StorageLive(_483)<br/>_483 = &amp;(*_10)<br/>StorageLive(_484)<br/>_484 = &amp;(*_11)<br/>StorageLive(_485)<br/>_485 = &amp;mut (*_12)<br/>StorageLive(_486)<br/>_486 = _15<br/>StorageLive(_487)<br/>_487 = _16<br/>StorageLive(_488)<br/>_488 = OrderActionExplanation::Liquidation<br/>StorageLive(_489)<br/>_489 = Option::&lt;state::user::MarketType&gt;::None<br/>StorageLive(_490)<br/>_490 = Option::&lt;u16&gt;::None<br/>StorageLive(_491)<br/>_491 = Option::&lt;controller::position::PositionDirection&gt;::None<br/></td></tr><tr><td align="left">_475 = controller::orders::cancel_orders(move _476, move _480, move _481, move _483, move _484, move _485, move _486, move _487, move _488, move _489, move _490, move _491)</td></tr></table>>];
    bb208__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageDead(_491)<br/>StorageDead(_490)<br/>StorageDead(_489)<br/>StorageDead(_488)<br/>StorageDead(_487)<br/>StorageDead(_486)<br/>StorageDead(_485)<br/>StorageDead(_484)<br/>StorageDead(_483)<br/>StorageDead(_481)<br/>StorageDead(_480)<br/>StorageDead(_476)<br/></td></tr><tr><td align="left">_474 = &lt;std::result::Result&lt;Vec&lt;u32&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _475)</td></tr></table>>];
    bb209__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageDead(_475)<br/>_492 = discriminant(_474)<br/></td></tr><tr><td align="left">switchInt(move _492)</td></tr></table>>];
    bb210__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageLive(_496)<br/>_496 = move ((_474 as Continue).0: std::vec::Vec&lt;u32&gt;)<br/>_1451 = const true<br/>_473 = move _496<br/>StorageDead(_496)<br/>_1476 = discriminant(_474)<br/>StorageDead(_479)<br/>StorageDead(_477)<br/>StorageDead(_474)<br/>StorageLive(_497)<br/>StorageLive(_498)<br/>StorageLive(_499)<br/>StorageLive(_500)<br/>_500 = &amp;(*_10)<br/>StorageLive(_501)<br/>StorageLive(_502)<br/>_502 = &amp;_1<br/>_501 = &amp;(*_502)<br/></td></tr><tr><td align="left">_499 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _500, move _501)</td></tr></table>>];
    bb211__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageLive(_493)<br/>_493 = ((_474 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_495)<br/>_495 = _493<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _495)</td></tr></table>>];
    bb212__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_495)<br/>StorageDead(_493)<br/>_1474 = discriminant(_474)<br/>StorageDead(_479)<br/>StorageDead(_477)<br/>StorageDead(_474)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb213__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_501)<br/>StorageDead(_500)<br/></td></tr><tr><td align="left">_498 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _499)</td></tr></table>>];
    bb214__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">StorageDead(_499)<br/>_503 = discriminant(_498)<br/></td></tr><tr><td align="left">switchInt(move _503)</td></tr></table>>];
    bb215__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">StorageLive(_507)<br/>_507 = move ((_498 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1450 = const true<br/>_497 = move _507<br/>StorageDead(_507)<br/>_1480 = discriminant(_498)<br/>StorageDead(_502)<br/>StorageDead(_498)<br/>StorageLive(_508)<br/>StorageLive(_509)<br/>StorageLive(_510)<br/>StorageLive(_511)<br/>_511 = &amp;mut (*_12)<br/>StorageLive(_512)<br/>StorageLive(_513)<br/>StorageLive(_514)<br/>StorageLive(_515)<br/>StorageLive(_516)<br/>StorageLive(_517)<br/>_517 = &amp;_497<br/></td></tr><tr><td align="left">_516 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _517)</td></tr></table>>];
    bb216__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageLive(_504)<br/>_504 = ((_498 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_506)<br/>_506 = _504<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _506)</td></tr></table>>];
    bb217__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageDead(_506)<br/>StorageDead(_504)<br/>_1478 = discriminant(_498)<br/>StorageDead(_502)<br/>StorageDead(_498)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb218__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">_515 = &amp;(*_516)<br/>StorageDead(_517)<br/></td></tr><tr><td align="left">_514 = PerpMarket::oracle_id(move _515)</td></tr></table>>];
    bb219__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageDead(_515)<br/>_513 = &amp;_514<br/>_512 = &amp;(*_513)<br/></td></tr><tr><td align="left">_510 = OracleMap::&lt;'_&gt;::get_price_data(move _511, move _512)</td></tr></table>>];
    bb220__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageDead(_512)<br/>StorageDead(_511)<br/></td></tr><tr><td align="left">_509 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _510)</td></tr></table>>];
    bb221__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageDead(_510)<br/>_518 = discriminant(_509)<br/></td></tr><tr><td align="left">switchInt(move _518)</td></tr></table>>];
    bb222__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">StorageLive(_522)<br/>_522 = ((_509 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_508 = _522<br/>StorageDead(_522)<br/>StorageDead(_516)<br/>StorageDead(_514)<br/>StorageDead(_513)<br/>StorageDead(_509)<br/>StorageLive(_523)<br/>StorageLive(_524)<br/>StorageLive(_525)<br/>StorageLive(_526)<br/>StorageLive(_527)<br/>StorageLive(_528)<br/>_528 = &amp;_497<br/></td></tr><tr><td align="left">_527 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _528)</td></tr></table>>];
    bb223__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">StorageLive(_519)<br/>_519 = ((_509 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_521)<br/>_521 = _519<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _521)</td></tr></table>>];
    bb224__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageDead(_521)<br/>StorageDead(_519)<br/>StorageDead(_516)<br/>StorageDead(_514)<br/>StorageDead(_513)<br/>StorageDead(_509)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb225__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">_526 = &amp;(*_527)<br/>StorageDead(_528)<br/>StorageLive(_529)<br/>_529 = (*_508)<br/>StorageLive(_530)<br/>_530 = _16<br/>StorageLive(_531)<br/>StorageLive(_532)<br/>_532 = &amp;(((*_14).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails)<br/>_531 = &amp;(*_532)<br/></td></tr><tr><td align="left">_525 = PerpMarket::get_mm_oracle_price_data(move _526, move _529, move _530, move _531)</td></tr></table>>];
    bb226__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageDead(_531)<br/>StorageDead(_530)<br/>StorageDead(_529)<br/>StorageDead(_526)<br/></td></tr><tr><td align="left">_524 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _525)</td></tr></table>>];
    bb227__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageDead(_525)<br/>_533 = discriminant(_524)<br/></td></tr><tr><td align="left">switchInt(move _533)</td></tr></table>>];
    bb228__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageLive(_537)<br/>_537 = ((_524 as Continue).0: state::oracle::MMOraclePriceData)<br/>_523 = _537<br/>StorageDead(_537)<br/>StorageDead(_532)<br/>StorageDead(_527)<br/>StorageDead(_524)<br/>StorageLive(_538)<br/>StorageLive(_539)<br/>StorageLive(_540)<br/>StorageLive(_541)<br/>StorageLive(_542)<br/>StorageLive(_543)<br/>StorageLive(_544)<br/>_544 = &amp;mut _497<br/>_543 = &amp;mut (*_544)<br/></td></tr><tr><td align="left">_542 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _543)</td></tr></table>>];
    bb229__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageLive(_534)<br/>_534 = ((_524 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_536)<br/>_536 = _534<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _536)</td></tr></table>>];
    bb230__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">StorageDead(_536)<br/>StorageDead(_534)<br/>StorageDead(_532)<br/>StorageDead(_527)<br/>StorageDead(_524)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb231__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">_541 = &amp;mut (*_542)<br/>StorageDead(_543)<br/>StorageLive(_545)<br/>StorageLive(_546)<br/>_546 = &amp;_523<br/>_545 = &amp;(*_546)<br/>StorageLive(_547)<br/>_547 = &amp;(*_14)<br/>StorageLive(_548)<br/>_548 = _15<br/>StorageLive(_549)<br/>_549 = _16<br/>StorageLive(_550)<br/>StorageLive(_551)<br/>_551 = DriftAction::Liquidate<br/>_550 = Option::&lt;DriftAction&gt;::Some(move _551)<br/>StorageDead(_551)<br/></td></tr><tr><td align="left">_540 = update_amm_and_check_validity(move _541, move _545, move _547, move _548, move _549, move _550)</td></tr></table>>];
    bb232__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">StorageDead(_550)<br/>StorageDead(_549)<br/>StorageDead(_548)<br/>StorageDead(_547)<br/>StorageDead(_545)<br/>StorageDead(_541)<br/></td></tr><tr><td align="left">_539 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _540)</td></tr></table>>];
    bb233__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageDead(_540)<br/>_552 = discriminant(_539)<br/></td></tr><tr><td align="left">switchInt(move _552)</td></tr></table>>];
    bb234__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">StorageLive(_556)<br/>_556 = ((_539 as Continue).0: ())<br/>_538 = _556<br/>StorageDead(_556)<br/>StorageDead(_546)<br/>StorageDead(_544)<br/>StorageDead(_542)<br/>StorageDead(_539)<br/>StorageDead(_538)<br/>StorageLive(_557)<br/>StorageLive(_558)<br/>StorageLive(_559)<br/>StorageLive(_560)<br/>StorageLive(_561)<br/>_561 = &amp;_497<br/></td></tr><tr><td align="left">_560 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _561)</td></tr></table>>];
    bb235__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageLive(_553)<br/>_553 = ((_539 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_555)<br/>_555 = _553<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _555)</td></tr></table>>];
    bb236__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageDead(_555)<br/>StorageDead(_553)<br/>StorageDead(_546)<br/>StorageDead(_544)<br/>StorageDead(_542)<br/>StorageDead(_539)<br/>StorageDead(_538)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb237__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">StorageDead(_561)<br/>_559 = &amp;((*_560).22: state::perp_market::MarketStatus)<br/>StorageLive(_562)<br/>_1433 = const _<br/>_562 = &amp;(*_1433)<br/></td></tr><tr><td align="left">_558 = &lt;state::perp_market::MarketStatus as PartialEq&gt;::eq(move _559, move _562)</td></tr></table>>];
    bb238__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left">switchInt(move _558)</td></tr></table>>];
    bb239__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageDead(_562)<br/>StorageDead(_560)<br/>StorageDead(_559)<br/>StorageLive(_564)<br/>StorageLive(_565)<br/>_565 = &amp;_497<br/></td></tr><tr><td align="left">_564 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _565)</td></tr></table>>];
    bb240__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left" balign="left">StorageDead(_565)<br/>_557 = ((*_564).7: i64)<br/>StorageDead(_564)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb241__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageDead(_562)<br/>StorageDead(_560)<br/>StorageDead(_559)<br/>_557 = ((*_508).0: i64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb242__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">StorageDead(_558)<br/>StorageLive(_566)<br/>StorageLive(_567)<br/>_1450 = const false<br/>_567 = move _497<br/></td></tr><tr><td align="left">_566 = std::mem::drop::&lt;RefMut&lt;'_, PerpMarket&gt;&gt;(move _567)</td></tr></table>>];
    bb243__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageDead(_567)<br/>StorageDead(_566)<br/>StorageLive(_568)<br/>_568 = const 0_u64<br/>StorageLive(_569)<br/>StorageLive(_570)<br/>StorageLive(_571)<br/>_571 = &amp;_473<br/></td></tr><tr><td align="left">_570 = Vec::&lt;u32&gt;::is_empty(move _571)</td></tr></table>>];
    bb244__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left">switchInt(move _570)</td></tr></table>>];
    bb245__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">StorageDead(_571)<br/>StorageLive(_572)<br/>StorageLive(_573)<br/>_573 = _568<br/>_572 = Gt(move _573, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _572)</td></tr></table>>];
    bb246__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">StorageDead(_571)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb247__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">StorageDead(_573)<br/>StorageLive(_574)<br/>StorageLive(_575)<br/>StorageLive(_576)<br/>StorageLive(_577)<br/>StorageLive(_578)<br/>StorageLive(_579)<br/>StorageLive(_580)<br/>_580 = &amp;_17<br/>_579 = &amp;(*_580)<br/></td></tr><tr><td align="left">_578 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _579)</td></tr></table>>];
    bb248__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">StorageDead(_573)<br/>_569 = _314<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb249__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">_577 = &amp;(*_578)<br/>StorageDead(_579)<br/>StorageLive(_581)<br/>_581 = &amp;(*_10)<br/>StorageLive(_582)<br/>_582 = &amp;(*_11)<br/>StorageLive(_583)<br/>_583 = &amp;mut (*_12)<br/>StorageLive(_584)<br/>StorageLive(_585)<br/>StorageLive(_586)<br/>StorageLive(_587)<br/>StorageLive(_588)<br/>_588 = _39<br/></td></tr><tr><td align="left">_587 = MarginContext::liquidation(move _588)</td></tr></table>>];
    bb250__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageDead(_588)<br/>StorageLive(_589)<br/>StorageLive(_590)<br/>_590 = _1<br/></td></tr><tr><td align="left">_589 = MarketIdentifier::perp(move _590)</td></tr></table>>];
    bb251__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">StorageDead(_590)<br/></td></tr><tr><td align="left">_586 = MarginContext::track_market_margin_requirement(move _587, move _589)</td></tr></table>>];
    bb252__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageDead(_589)<br/>StorageDead(_587)<br/></td></tr><tr><td align="left">_585 = &lt;std::result::Result&lt;MarginContext, error::ErrorCode&gt; as Try&gt;::branch(move _586)</td></tr></table>>];
    bb253__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageDead(_586)<br/>_591 = discriminant(_585)<br/></td></tr><tr><td align="left">switchInt(move _591)</td></tr></table>>];
    bb254__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageLive(_595)<br/>_595 = ((_585 as Continue).0: state::margin_calculation::MarginContext)<br/>_584 = _595<br/>StorageDead(_595)<br/></td></tr><tr><td align="left">_576 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _577, move _581, move _582, move _583, move _584)</td></tr></table>>];
    bb255__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">StorageLive(_592)<br/>_592 = ((_585 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_594)<br/>_594 = _592<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _594)</td></tr></table>>];
    bb256__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageDead(_594)<br/>StorageDead(_592)<br/>StorageDead(_584)<br/>StorageDead(_583)<br/>StorageDead(_582)<br/>StorageDead(_581)<br/>StorageDead(_577)<br/>StorageDead(_576)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb257__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">StorageDead(_584)<br/>StorageDead(_583)<br/>StorageDead(_582)<br/>StorageDead(_581)<br/>StorageDead(_577)<br/></td></tr><tr><td align="left">_575 = &lt;std::result::Result&lt;MarginCalculation, error::ErrorCode&gt; as Try&gt;::branch(move _576)</td></tr></table>>];
    bb258__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageDead(_576)<br/>_596 = discriminant(_575)<br/></td></tr><tr><td align="left">switchInt(move _596)</td></tr></table>>];
    bb259__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">StorageLive(_600)<br/>_600 = ((_575 as Continue).0: state::margin_calculation::MarginCalculation)<br/>_574 = _600<br/>StorageDead(_600)<br/>StorageDead(_585)<br/>StorageDead(_580)<br/>StorageDead(_578)<br/>StorageDead(_575)<br/>StorageLive(_601)<br/>StorageLive(_602)<br/>StorageLive(_603)<br/>StorageLive(_604)<br/>_604 = &amp;_314<br/></td></tr><tr><td align="left">_603 = MarginCalculation::margin_shortage(move _604)</td></tr></table>>];
    bb260__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left" balign="left">StorageLive(_597)<br/>_597 = ((_575 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_599)<br/>_599 = _597<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _599)</td></tr></table>>];
    bb261__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageDead(_599)<br/>StorageDead(_597)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb262__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">StorageDead(_604)<br/></td></tr><tr><td align="left">_602 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _603)</td></tr></table>>];
    bb263__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">StorageDead(_603)<br/>_605 = discriminant(_602)<br/></td></tr><tr><td align="left">switchInt(move _605)</td></tr></table>>];
    bb264__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">StorageLive(_609)<br/>_609 = ((_602 as Continue).0: u128)<br/>_601 = _609<br/>StorageDead(_609)<br/>StorageDead(_602)<br/>StorageLive(_610)<br/>StorageLive(_611)<br/>StorageLive(_612)<br/>StorageLive(_613)<br/>_613 = &amp;_574<br/></td></tr><tr><td align="left">_612 = MarginCalculation::margin_shortage(move _613)</td></tr></table>>];
    bb265__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">StorageLive(_606)<br/>_606 = ((_602 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_608)<br/>_608 = _606<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _608)</td></tr></table>>];
    bb266__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">StorageDead(_608)<br/>StorageDead(_606)<br/>StorageDead(_602)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb267__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left" balign="left">StorageDead(_613)<br/></td></tr><tr><td align="left">_611 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _612)</td></tr></table>>];
    bb268__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">268</td></tr><tr><td align="left" balign="left">StorageDead(_612)<br/>_614 = discriminant(_611)<br/></td></tr><tr><td align="left">switchInt(move _614)</td></tr></table>>];
    bb269__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">269</td></tr><tr><td align="left" balign="left">StorageLive(_618)<br/>_618 = ((_611 as Continue).0: u128)<br/>_610 = _618<br/>StorageDead(_618)<br/>StorageDead(_611)<br/>StorageLive(_619)<br/>StorageLive(_620)<br/>StorageLive(_621)<br/>StorageLive(_622)<br/>StorageLive(_623)<br/>_623 = _601<br/>StorageLive(_624)<br/>_624 = _610<br/></td></tr><tr><td align="left">_622 = core::num::&lt;impl u128&gt;::saturating_sub(move _623, move _624)</td></tr></table>>];
    bb270__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">270</td></tr><tr><td align="left" balign="left">StorageLive(_615)<br/>_615 = ((_611 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_617)<br/>_617 = _615<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _617)</td></tr></table>>];
    bb271__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">271</td></tr><tr><td align="left" balign="left">StorageDead(_617)<br/>StorageDead(_615)<br/>StorageDead(_611)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb272__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">272</td></tr><tr><td align="left" balign="left">StorageDead(_624)<br/>StorageDead(_623)<br/></td></tr><tr><td align="left">_621 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _622)</td></tr></table>>];
    bb273__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">273</td></tr><tr><td align="left" balign="left">StorageDead(_622)<br/></td></tr><tr><td align="left">_620 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _621)</td></tr></table>>];
    bb274__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">274</td></tr><tr><td align="left" balign="left">StorageDead(_621)<br/>_625 = discriminant(_620)<br/></td></tr><tr><td align="left">switchInt(move _625)</td></tr></table>>];
    bb275__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">275</td></tr><tr><td align="left" balign="left">StorageLive(_629)<br/>_629 = ((_620 as Continue).0: u64)<br/>_619 = _629<br/>StorageDead(_629)<br/>_415 = move _619<br/>StorageDead(_619)<br/>StorageDead(_620)<br/>StorageLive(_630)<br/>StorageLive(_631)<br/>StorageLive(_632)<br/>StorageLive(_633)<br/>StorageLive(_634)<br/>StorageLive(_635)<br/>_635 = &amp;mut _17<br/></td></tr><tr><td align="left">_634 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _635)</td></tr></table>>];
    bb276__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">276</td></tr><tr><td align="left" balign="left">StorageLive(_626)<br/>_626 = ((_620 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_628)<br/>_628 = _626<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _628)</td></tr></table>>];
    bb277__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">277</td></tr><tr><td align="left" balign="left">StorageDead(_628)<br/>StorageDead(_626)<br/>StorageDead(_619)<br/>StorageDead(_620)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb278__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">278</td></tr><tr><td align="left" balign="left">_633 = &amp;mut (*_634)<br/>StorageDead(_635)<br/>StorageLive(_636)<br/>_636 = _415<br/></td></tr><tr><td align="left">_632 = User::increment_margin_freed(move _633, move _636)</td></tr></table>>];
    bb279__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">279</td></tr><tr><td align="left" balign="left">StorageDead(_636)<br/>StorageDead(_633)<br/></td></tr><tr><td align="left">_631 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _632)</td></tr></table>>];
    bb280__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">280</td></tr><tr><td align="left" balign="left">StorageDead(_632)<br/>_637 = discriminant(_631)<br/></td></tr><tr><td align="left">switchInt(move _637)</td></tr></table>>];
    bb281__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">281</td></tr><tr><td align="left" balign="left">StorageLive(_641)<br/>_641 = ((_631 as Continue).0: ())<br/>_630 = _641<br/>StorageDead(_641)<br/>StorageDead(_634)<br/>StorageDead(_631)<br/>StorageDead(_630)<br/>StorageLive(_642)<br/>StorageLive(_643)<br/>StorageLive(_644)<br/>StorageLive(_645)<br/>StorageLive(_646)<br/>_646 = &amp;_574<br/></td></tr><tr><td align="left">_645 = MarginCalculation::can_exit_liquidation(move _646)</td></tr></table>>];
    bb282__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">StorageLive(_638)<br/>_638 = ((_631 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_640)<br/>_640 = _638<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _640)</td></tr></table>>];
    bb283__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">StorageDead(_640)<br/>StorageDead(_638)<br/>StorageDead(_634)<br/>StorageDead(_631)<br/>StorageDead(_630)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb284__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">284</td></tr><tr><td align="left" balign="left">StorageDead(_646)<br/></td></tr><tr><td align="left">_644 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _645)</td></tr></table>>];
    bb285__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">285</td></tr><tr><td align="left" balign="left">StorageDead(_645)<br/>_647 = discriminant(_644)<br/></td></tr><tr><td align="left">switchInt(move _647)</td></tr></table>>];
    bb286__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">286</td></tr><tr><td align="left" balign="left">StorageLive(_651)<br/>_651 = ((_644 as Continue).0: bool)<br/>_643 = _651<br/>StorageDead(_651)<br/></td></tr><tr><td align="left">switchInt(move _643)</td></tr></table>>];
    bb287__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">287</td></tr><tr><td align="left" balign="left">StorageLive(_648)<br/>_648 = ((_644 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_650)<br/>_650 = _648<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _650)</td></tr></table>>];
    bb288__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">288</td></tr><tr><td align="left" balign="left">StorageDead(_650)<br/>StorageDead(_648)<br/>StorageDead(_644)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb289__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">289</td></tr><tr><td align="left" balign="left">StorageDead(_644)<br/>StorageLive(_653)<br/>StorageLive(_654)<br/>StorageLive(_655)<br/>StorageLive(_656)<br/>StorageLive(_657)<br/>StorageLive(_658)<br/>StorageLive(_659)<br/>StorageLive(_660)<br/>StorageLive(_661)<br/>StorageLive(_662)<br/>StorageLive(_663)<br/>StorageLive(_664)<br/>StorageLive(_665)<br/>StorageLive(_666)<br/>StorageLive(_667)<br/>_667 = _15<br/>StorageLive(_668)<br/>_668 = _403<br/>StorageLive(_669)<br/>_669 = LiquidationType::LiquidatePerp<br/>StorageLive(_670)<br/>_670 = (*_3)<br/>StorageLive(_671)<br/>_671 = (*_6)<br/>StorageLive(_672)<br/>_672 = (_314.3: u128)<br/>StorageLive(_673)<br/>_673 = (_314.1: i128)<br/>StorageLive(_674)<br/>StorageLive(_675)<br/>StorageLive(_676)<br/>StorageLive(_677)<br/>_677 = &amp;_17<br/></td></tr><tr><td align="left">_676 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _677)</td></tr></table>>];
    bb290__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">290</td></tr><tr><td align="left" balign="left">StorageDead(_644)<br/>_642 = const ()<br/>StorageDead(_643)<br/>StorageDead(_642)<br/>_569 = _574<br/>StorageDead(_610)<br/>StorageDead(_601)<br/>StorageDead(_574)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb291__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">291</td></tr><tr><td align="left" balign="left">_675 = &amp;(*_676)<br/>StorageDead(_677)<br/></td></tr><tr><td align="left">_674 = User::is_bankrupt(move _675)</td></tr></table>>];
    bb292__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">292</td></tr><tr><td align="left" balign="left">StorageDead(_675)<br/>StorageLive(_678)<br/>_1451 = const false<br/>_678 = move _473<br/>StorageLive(_679)<br/>_679 = _415<br/>StorageLive(_680)<br/>StorageLive(_681)<br/>_681 = _1<br/>StorageLive(_682)<br/>_682 = _557<br/>StorageLive(_683)<br/>_683 = _568<br/>StorageLive(_684)<br/></td></tr><tr><td align="left">_684 = &lt;LiquidatePerpRecord as Default&gt;::default()</td></tr></table>>];
    bb293__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">293</td></tr><tr><td align="left" balign="left">_680 = LiquidatePerpRecord { market_index: move _681, oracle_price: move _682, base_asset_amount: (_684.2: i64), quote_asset_amount: (_684.3: i64), lp_shares: move _683, fill_record_id: (_684.5: u64), user_order_id: (_684.6: u32), liquidator_order_id: (_684.7: u32), liquidator_fee: (_684.8: u64), if_fee: (_684.9: u64) }<br/>StorageDead(_683)<br/>StorageDead(_682)<br/>StorageDead(_681)<br/>StorageLive(_685)<br/></td></tr><tr><td align="left">_685 = &lt;LiquidationRecord as Default&gt;::default()</td></tr></table>>];
    bb294__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">294</td></tr><tr><td align="left" balign="left">_666 = LiquidationRecord { ts: move _667, liquidation_type: move _669, user: move _670, liquidator: move _671, margin_requirement: move _672, total_collateral: move _673, margin_freed: move _679, liquidation_id: move _668, bankrupt: move _674, canceled_order_ids: move _678, liquidate_perp: move _680, liquidate_spot: move (_685.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move (_685.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move (_685.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_685.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_685.15: state::events::SpotBankruptcyRecord) }<br/>StorageDead(_680)<br/>StorageDead(_679)<br/>StorageDead(_678)<br/>StorageDead(_674)<br/>StorageDead(_673)<br/>StorageDead(_672)<br/>StorageDead(_671)<br/>StorageDead(_670)<br/>StorageDead(_669)<br/>StorageDead(_668)<br/>StorageDead(_667)<br/>_665 = &amp;_666<br/>_664 = &amp;(*_665)<br/></td></tr><tr><td align="left">_663 = &lt;LiquidationRecord as anchor_lang::Event&gt;::data(move _664)</td></tr></table>>];
    bb295__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">295</td></tr><tr><td align="left" balign="left">StorageDead(_664)<br/>_662 = &amp;_663<br/>_661 = &amp;(*_662)<br/></td></tr><tr><td align="left">_660 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _661)</td></tr></table>>];
    bb296__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">296</td></tr><tr><td align="left" balign="left">_659 = &amp;(*_660)<br/>StorageDead(_661)<br/>_658 = [move _659]<br/>StorageDead(_659)<br/>_657 = &amp;_658<br/>_656 = &amp;(*_657)<br/>_655 = move _656 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_656)<br/></td></tr><tr><td align="left">_654 = solana_program::log::sol_log_data(move _655)</td></tr></table>>];
    bb297__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">297</td></tr><tr><td align="left" balign="left">StorageDead(_655)<br/></td></tr><tr><td align="left">drop(_663)</td></tr></table>>];
    bb298__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">298</td></tr><tr><td align="left">drop(_666)</td></tr></table>>];
    bb299__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">299</td></tr><tr><td align="left">drop(_685)</td></tr></table>>];
    bb300__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">300</td></tr><tr><td align="left" balign="left">StorageDead(_685)<br/>StorageDead(_684)<br/>StorageDead(_676)<br/>StorageDead(_666)<br/>StorageDead(_665)<br/>StorageDead(_663)<br/>StorageDead(_662)<br/>StorageDead(_660)<br/>StorageDead(_658)<br/>StorageDead(_657)<br/>StorageDead(_654)<br/>_653 = const ()<br/>StorageDead(_653)<br/>StorageLive(_686)<br/>StorageLive(_687)<br/>StorageLive(_688)<br/>StorageLive(_689)<br/>_689 = &amp;mut _17<br/></td></tr><tr><td align="left">_688 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _689)</td></tr></table>>];
    bb301__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">301</td></tr><tr><td align="left" balign="left">_687 = &amp;mut (*_688)<br/>StorageDead(_689)<br/></td></tr><tr><td align="left">_686 = User::exit_liquidation(move _687)</td></tr></table>>];
    bb302__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">302</td></tr><tr><td align="left" balign="left">StorageDead(_687)<br/>StorageDead(_688)<br/>StorageDead(_686)<br/>StorageLive(_690)<br/>_690 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _690)<br/>StorageDead(_690)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb303__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">303</td></tr><tr><td align="left" balign="left">StorageDead(_572)<br/>StorageDead(_570)<br/>StorageLive(_691)<br/>StorageLive(_692)<br/>StorageLive(_693)<br/>StorageLive(_694)<br/>StorageLive(_695)<br/>_695 = &amp;_17<br/></td></tr><tr><td align="left">_694 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _695)</td></tr></table>>];
    bb304__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">304</td></tr><tr><td align="left" balign="left">StorageDead(_695)<br/>StorageLive(_696)<br/>_696 = _416<br/>_697 = Len(((*_694).4: [state::user::PerpPosition; 8]))<br/>_698 = Lt(_696, _697)<br/></td></tr><tr><td align="left">assert(move _698, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _697, _696)</td></tr></table>>];
    bb305__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">305</td></tr><tr><td align="left" balign="left">_693 = (((*_694).4: [state::user::PerpPosition; 8])[_696].1: i64)<br/>_692 = Eq(move _693, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _692)</td></tr></table>>];
    bb306__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">306</td></tr><tr><td align="left" balign="left">StorageDead(_696)<br/>StorageDead(_694)<br/>StorageDead(_693)<br/>StorageLive(_700)<br/>StorageLive(_701)<br/>StorageLive(_702)<br/>_702 = const &quot;User has no base asset amount&quot;<br/>_701 = &amp;(*_702)<br/></td></tr><tr><td align="left">_700 = solana_program::log::sol_log(move _701)</td></tr></table>>];
    bb307__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">307</td></tr><tr><td align="left" balign="left">StorageDead(_701)<br/>StorageDead(_702)<br/>StorageDead(_700)<br/>StorageLive(_703)<br/>_703 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _703)<br/>StorageDead(_703)<br/>StorageDead(_692)<br/>StorageDead(_691)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb308__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">308</td></tr><tr><td align="left" balign="left">StorageDead(_696)<br/>StorageDead(_694)<br/>StorageDead(_693)<br/>_691 = const ()<br/>StorageDead(_692)<br/>StorageDead(_691)<br/>StorageLive(_704)<br/>StorageLive(_705)<br/>StorageLive(_706)<br/>StorageLive(_707)<br/>_707 = _557<br/>StorageLive(_708)<br/>StorageLive(_709)<br/>StorageLive(_710)<br/>StorageLive(_711)<br/>StorageLive(_712)<br/>StorageLive(_713)<br/>StorageLive(_714)<br/>_714 = &amp;(*_10)<br/>StorageLive(_715)<br/>StorageLive(_716)<br/>_716 = &amp;_1<br/>_715 = &amp;(*_716)<br/></td></tr><tr><td align="left">_713 = PerpMarketMap::&lt;'_&gt;::get_ref(move _714, move _715)</td></tr></table>>];
    bb309__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">309</td></tr><tr><td align="left" balign="left">StorageDead(_715)<br/>StorageDead(_714)<br/></td></tr><tr><td align="left">_712 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _713)</td></tr></table>>];
    bb310__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">310</td></tr><tr><td align="left" balign="left">_1449 = const true<br/>StorageDead(_713)<br/>_717 = discriminant(_712)<br/></td></tr><tr><td align="left">switchInt(move _717)</td></tr></table>>];
    bb311__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">311</td></tr><tr><td align="left" balign="left">StorageLive(_721)<br/>_721 = move ((_712 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_711 = move _721<br/>StorageDead(_721)<br/>_710 = &amp;_711<br/></td></tr><tr><td align="left">_709 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _710)</td></tr></table>>];
    bb312__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">312</td></tr><tr><td align="left" balign="left">StorageLive(_718)<br/>_718 = ((_712 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_720)<br/>_720 = _718<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _720)</td></tr></table>>];
    bb313__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">313</td></tr><tr><td align="left" balign="left">StorageDead(_720)<br/>StorageDead(_718)<br/>StorageDead(_710)<br/>StorageDead(_708)<br/>StorageDead(_707)<br/>StorageDead(_706)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb314__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">314</td></tr><tr><td align="left" balign="left">StorageDead(_710)<br/>_708 = ((((*_709).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64)<br/>StorageLive(_722)<br/>StorageLive(_723)<br/>StorageLive(_724)<br/>StorageLive(_725)<br/>StorageLive(_726)<br/>_726 = &amp;((*_14).7: state::state::OracleGuardRails)<br/></td></tr><tr><td align="left">_725 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _726)</td></tr></table>>];
    bb315__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">315</td></tr><tr><td align="left" balign="left">StorageDead(_726)<br/></td></tr><tr><td align="left">_724 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _725)</td></tr></table>>];
    bb316__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">316</td></tr><tr><td align="left" balign="left">StorageDead(_725)<br/></td></tr><tr><td align="left">_723 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _724)</td></tr></table>>];
    bb317__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">317</td></tr><tr><td align="left" balign="left">StorageDead(_724)<br/>_727 = discriminant(_723)<br/></td></tr><tr><td align="left">switchInt(move _727)</td></tr></table>>];
    bb318__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">318</td></tr><tr><td align="left" balign="left">StorageLive(_731)<br/>_731 = ((_723 as Continue).0: i64)<br/>_722 = _731<br/>StorageDead(_731)<br/></td></tr><tr><td align="left">_706 = math::orders::is_oracle_too_divergent_with_twap_5min(move _707, move _708, move _722)</td></tr></table>>];
    bb319__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">319</td></tr><tr><td align="left" balign="left">StorageLive(_728)<br/>_728 = ((_723 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_730)<br/>_730 = _728<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _730)</td></tr></table>>];
    bb320__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">320</td></tr><tr><td align="left" balign="left">StorageDead(_730)<br/>StorageDead(_728)<br/>StorageDead(_722)<br/>StorageDead(_708)<br/>StorageDead(_707)<br/>StorageDead(_706)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb321__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">321</td></tr><tr><td align="left" balign="left">StorageDead(_722)<br/>StorageDead(_708)<br/>StorageDead(_707)<br/></td></tr><tr><td align="left">_705 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _706)</td></tr></table>>];
    bb322__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">322</td></tr><tr><td align="left" balign="left">StorageDead(_706)<br/>_732 = discriminant(_705)<br/></td></tr><tr><td align="left">switchInt(move _732)</td></tr></table>>];
    bb323__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">323</td></tr><tr><td align="left" balign="left">StorageLive(_736)<br/>_736 = ((_705 as Continue).0: bool)<br/>_704 = _736<br/>StorageDead(_736)<br/>StorageDead(_723)<br/></td></tr><tr><td align="left">drop(_711)</td></tr></table>>];
    bb324__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">324</td></tr><tr><td align="left" balign="left">StorageLive(_733)<br/>_733 = ((_705 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_735)<br/>_735 = _733<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _735)</td></tr></table>>];
    bb325__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">325</td></tr><tr><td align="left" balign="left">StorageDead(_735)<br/>StorageDead(_733)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb326__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">326</td></tr><tr><td align="left" balign="left">StorageLive(_741)<br/>_741 = ()<br/>_739 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _741)<br/>StorageDead(_741)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb327__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">327</td></tr><tr><td align="left" balign="left">StorageLive(_742)<br/>_742 = error::ErrorCode::PriceBandsBreached<br/>StorageLive(_743)<br/>StorageLive(_744)<br/>StorageLive(_745)<br/>StorageLive(_746)<br/>StorageLive(_747)<br/>StorageLive(_748)<br/>StorageLive(_749)<br/>StorageLive(_750)<br/>StorageLive(_751)<br/>StorageLive(_752)<br/>StorageLive(_753)<br/>_1432 = const _<br/>_753 = &amp;(*_1432)<br/>_752 = &amp;(*_753)<br/>_751 = move _752 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_752)<br/>StorageLive(_755)<br/>StorageLive(_756)<br/>StorageLive(_757)<br/>StorageLive(_758)<br/>StorageLive(_759)<br/>StorageLive(_760)<br/>StorageLive(_761)<br/>_761 = &amp;_742<br/>_760 = &amp;(*_761)<br/></td></tr><tr><td align="left">_759 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _760)</td></tr></table>>];
    bb328__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">328</td></tr><tr><td align="left" balign="left">StorageDead(_760)<br/>_758 = [move _759]<br/>StorageDead(_759)<br/>_757 = &amp;_758<br/>_756 = &amp;(*_757)<br/>_755 = move _756 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_756)<br/></td></tr><tr><td align="left">_750 = Arguments::&lt;'_&gt;::new_v1(move _751, move _755)</td></tr></table>>];
    bb329__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">329</td></tr><tr><td align="left" balign="left">StorageDead(_755)<br/>StorageDead(_751)<br/></td></tr><tr><td align="left">_749 = format(move _750)</td></tr></table>>];
    bb330__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">330</td></tr><tr><td align="left" balign="left">StorageDead(_750)<br/>StorageDead(_761)<br/>StorageDead(_758)<br/>StorageDead(_757)<br/>StorageDead(_753)<br/>_748 = move _749<br/>StorageDead(_749)<br/>_747 = &amp;_748<br/>_746 = &amp;(*_747)<br/></td></tr><tr><td align="left">_745 = &lt;String as Deref&gt;::deref(move _746)</td></tr></table>>];
    bb331__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">331</td></tr><tr><td align="left" balign="left">_744 = &amp;(*_745)<br/>StorageDead(_746)<br/></td></tr><tr><td align="left">_743 = solana_program::log::sol_log(move _744)</td></tr></table>>];
    bb332__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">332</td></tr><tr><td align="left" balign="left">StorageDead(_744)<br/></td></tr><tr><td align="left">drop(_748)</td></tr></table>>];
    bb333__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">333</td></tr><tr><td align="left" balign="left">StorageDead(_748)<br/>StorageDead(_747)<br/>StorageDead(_745)<br/>StorageDead(_743)<br/>StorageLive(_762)<br/>_762 = _742<br/>_739 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _762)<br/>StorageDead(_762)<br/>StorageDead(_742)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb334__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">334</td></tr><tr><td align="left" balign="left">StorageDead(_740)<br/></td></tr><tr><td align="left">_738 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _739)</td></tr></table>>];
    bb335__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">335</td></tr><tr><td align="left" balign="left">StorageDead(_739)<br/>_763 = discriminant(_738)<br/></td></tr><tr><td align="left">switchInt(move _763)</td></tr></table>>];
    bb336__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">336</td></tr><tr><td align="left" balign="left">StorageLive(_767)<br/>_767 = ((_738 as Continue).0: ())<br/>_737 = _767<br/>StorageDead(_767)<br/>StorageDead(_738)<br/>StorageDead(_737)<br/>StorageLive(_768)<br/>StorageLive(_769)<br/>StorageLive(_770)<br/>StorageLive(_771)<br/>_771 = &amp;_17<br/></td></tr><tr><td align="left">_770 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _771)</td></tr></table>>];
    bb337__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">337</td></tr><tr><td align="left" balign="left">StorageLive(_764)<br/>_764 = ((_738 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_766)<br/>_766 = _764<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _766)</td></tr></table>>];
    bb338__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">338</td></tr><tr><td align="left" balign="left">StorageDead(_766)<br/>StorageDead(_764)<br/>StorageDead(_738)<br/>StorageDead(_737)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb339__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">339</td></tr><tr><td align="left" balign="left">StorageDead(_771)<br/>StorageLive(_772)<br/>_772 = _416<br/>_773 = Len(((*_770).4: [state::user::PerpPosition; 8]))<br/>_774 = Lt(_772, _773)<br/></td></tr><tr><td align="left">assert(move _774, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _773, _772)</td></tr></table>>];
    bb340__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">340</td></tr><tr><td align="left" balign="left">_769 = (((*_770).4: [state::user::PerpPosition; 8])[_772].1: i64)<br/></td></tr><tr><td align="left">_768 = core::num::&lt;impl i64&gt;::unsigned_abs(move _769)</td></tr></table>>];
    bb341__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">341</td></tr><tr><td align="left" balign="left">StorageDead(_769)<br/>StorageDead(_772)<br/>StorageDead(_770)<br/>StorageLive(_775)<br/>StorageLive(_776)<br/>StorageLive(_777)<br/>StorageLive(_778)<br/>StorageLive(_779)<br/>StorageLive(_780)<br/>StorageLive(_781)<br/>StorageLive(_782)<br/>StorageLive(_783)<br/>StorageLive(_784)<br/>_784 = &amp;(*_10)<br/>StorageLive(_785)<br/>StorageLive(_786)<br/>_786 = &amp;_1<br/>_785 = &amp;(*_786)<br/></td></tr><tr><td align="left">_783 = PerpMarketMap::&lt;'_&gt;::get_ref(move _784, move _785)</td></tr></table>>];
    bb342__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">342</td></tr><tr><td align="left" balign="left">StorageDead(_785)<br/>StorageDead(_784)<br/></td></tr><tr><td align="left">_782 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _783)</td></tr></table>>];
    bb343__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">343</td></tr><tr><td align="left" balign="left">_1448 = const true<br/>StorageDead(_783)<br/>_787 = discriminant(_782)<br/></td></tr><tr><td align="left">switchInt(move _787)</td></tr></table>>];
    bb344__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">344</td></tr><tr><td align="left" balign="left">StorageLive(_791)<br/>_791 = move ((_782 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_781 = move _791<br/>StorageDead(_791)<br/>_780 = &amp;_781<br/></td></tr><tr><td align="left">_779 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _780)</td></tr></table>>];
    bb345__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">345</td></tr><tr><td align="left" balign="left">StorageLive(_788)<br/>_788 = ((_782 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_790)<br/>_790 = _788<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _790)</td></tr></table>>];
    bb346__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">346</td></tr><tr><td align="left" balign="left">StorageDead(_790)<br/>StorageDead(_788)<br/>StorageDead(_780)<br/>StorageDead(_778)<br/>StorageDead(_777)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb347__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">347</td></tr><tr><td align="left" balign="left">_778 = &amp;(*_779)<br/>StorageDead(_780)<br/>StorageLive(_792)<br/>StorageLive(_793)<br/>StorageLive(_794)<br/>StorageLive(_795)<br/>_795 = _768<br/></td></tr><tr><td align="left">_794 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _795)</td></tr></table>>];
    bb348__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">348</td></tr><tr><td align="left" balign="left">StorageDead(_795)<br/></td></tr><tr><td align="left">_793 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _794)</td></tr></table>>];
    bb349__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">349</td></tr><tr><td align="left" balign="left">StorageDead(_794)<br/>_796 = discriminant(_793)<br/></td></tr><tr><td align="left">switchInt(move _796)</td></tr></table>>];
    bb350__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">350</td></tr><tr><td align="left" balign="left">StorageLive(_800)<br/>_800 = ((_793 as Continue).0: u128)<br/>_792 = _800<br/>StorageDead(_800)<br/>StorageLive(_801)<br/>_801 = math::margin::MarginRequirementType::Maintenance<br/>StorageLive(_802)<br/>StorageLive(_803)<br/>StorageLive(_804)<br/>StorageLive(_805)<br/>_805 = &amp;_17<br/></td></tr><tr><td align="left">_804 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _805)</td></tr></table>>];
    bb351__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">351</td></tr><tr><td align="left" balign="left">StorageLive(_797)<br/>_797 = ((_793 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_799)<br/>_799 = _797<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _799)</td></tr></table>>];
    bb352__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">352</td></tr><tr><td align="left" balign="left">StorageDead(_799)<br/>StorageDead(_797)<br/>StorageDead(_792)<br/>StorageDead(_778)<br/>StorageDead(_777)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb353__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">353</td></tr><tr><td align="left" balign="left">_803 = &amp;(*_804)<br/>StorageDead(_805)<br/>StorageLive(_806)<br/>_806 = math::margin::MarginRequirementType::Maintenance<br/></td></tr><tr><td align="left">_802 = User::is_high_leverage_mode(move _803, move _806)</td></tr></table>>];
    bb354__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">354</td></tr><tr><td align="left" balign="left">StorageDead(_806)<br/>StorageDead(_803)<br/></td></tr><tr><td align="left">_777 = PerpMarket::get_margin_ratio(move _778, move _792, move _801, move _802)</td></tr></table>>];
    bb355__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">355</td></tr><tr><td align="left" balign="left">StorageDead(_802)<br/>StorageDead(_801)<br/>StorageDead(_792)<br/>StorageDead(_778)<br/></td></tr><tr><td align="left">_776 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _777)</td></tr></table>>];
    bb356__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">356</td></tr><tr><td align="left" balign="left">StorageDead(_777)<br/>_807 = discriminant(_776)<br/></td></tr><tr><td align="left">switchInt(move _807)</td></tr></table>>];
    bb357__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">357</td></tr><tr><td align="left" balign="left">StorageLive(_811)<br/>_811 = ((_776 as Continue).0: u32)<br/>_775 = _811<br/>StorageDead(_811)<br/>StorageDead(_804)<br/>StorageDead(_793)<br/></td></tr><tr><td align="left">drop(_781)</td></tr></table>>];
    bb358__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">358</td></tr><tr><td align="left" balign="left">StorageLive(_808)<br/>_808 = ((_776 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_810)<br/>_810 = _808<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _810)</td></tr></table>>];
    bb359__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">359</td></tr><tr><td align="left" balign="left">StorageDead(_810)<br/>StorageDead(_808)<br/>StorageDead(_804)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb360__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">360</td></tr><tr><td align="left" balign="left">StorageDead(_816)<br/>StorageDead(_815)<br/></td></tr><tr><td align="left">_813 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _814)</td></tr></table>>];
    bb361__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">361</td></tr><tr><td align="left" balign="left">StorageDead(_814)<br/>_817 = discriminant(_813)<br/></td></tr><tr><td align="left">switchInt(move _817)</td></tr></table>>];
    bb362__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">362</td></tr><tr><td align="left" balign="left">StorageLive(_821)<br/>_821 = ((_813 as Continue).0: u32)<br/>_812 = _821<br/>StorageDead(_821)<br/>StorageDead(_813)<br/>StorageLive(_822)<br/>StorageLive(_823)<br/>StorageLive(_824)<br/>StorageLive(_825)<br/>_825 = &amp;_569<br/></td></tr><tr><td align="left">_824 = MarginCalculation::margin_shortage(move _825)</td></tr></table>>];
    bb363__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">363</td></tr><tr><td align="left" balign="left">StorageLive(_818)<br/>_818 = ((_813 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_820)<br/>_820 = _818<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _820)</td></tr></table>>];
    bb364__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">364</td></tr><tr><td align="left" balign="left">StorageDead(_820)<br/>StorageDead(_818)<br/>StorageDead(_813)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb365__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">365</td></tr><tr><td align="left" balign="left">StorageDead(_825)<br/></td></tr><tr><td align="left">_823 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _824)</td></tr></table>>];
    bb366__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">366</td></tr><tr><td align="left" balign="left">StorageDead(_824)<br/>_826 = discriminant(_823)<br/></td></tr><tr><td align="left">switchInt(move _826)</td></tr></table>>];
    bb367__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">367</td></tr><tr><td align="left" balign="left">StorageLive(_830)<br/>_830 = ((_823 as Continue).0: u128)<br/>_822 = _830<br/>StorageDead(_830)<br/>StorageDead(_823)<br/>StorageLive(_831)<br/>StorageLive(_832)<br/>StorageLive(_833)<br/>StorageLive(_834)<br/>_834 = &amp;(*_10)<br/>StorageLive(_835)<br/>StorageLive(_836)<br/>_836 = &amp;_1<br/>_835 = &amp;(*_836)<br/></td></tr><tr><td align="left">_833 = PerpMarketMap::&lt;'_&gt;::get_ref(move _834, move _835)</td></tr></table>>];
    bb368__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">368</td></tr><tr><td align="left" balign="left">StorageLive(_827)<br/>_827 = ((_823 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_829)<br/>_829 = _827<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _829)</td></tr></table>>];
    bb369__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">369</td></tr><tr><td align="left" balign="left">StorageDead(_829)<br/>StorageDead(_827)<br/>StorageDead(_823)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb370__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">370</td></tr><tr><td align="left" balign="left">StorageDead(_835)<br/>StorageDead(_834)<br/></td></tr><tr><td align="left">_832 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _833)</td></tr></table>>];
    bb371__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">371</td></tr><tr><td align="left" balign="left">StorageDead(_833)<br/>_837 = discriminant(_832)<br/></td></tr><tr><td align="left">switchInt(move _837)</td></tr></table>>];
    bb372__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">372</td></tr><tr><td align="left" balign="left">StorageLive(_841)<br/>_841 = move ((_832 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1447 = const true<br/>_831 = move _841<br/>StorageDead(_841)<br/>_1488 = discriminant(_832)<br/>StorageDead(_836)<br/>StorageDead(_832)<br/>StorageLive(_842)<br/>StorageLive(_843)<br/>StorageLive(_844)<br/>StorageLive(_845)<br/>_845 = &amp;(*_11)<br/>StorageLive(_846)<br/>StorageLive(_847)<br/>StorageLive(_848)<br/>StorageLive(_849)<br/>_849 = &amp;_831<br/></td></tr><tr><td align="left">_848 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _849)</td></tr></table>>];
    bb373__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">373</td></tr><tr><td align="left" balign="left">StorageLive(_838)<br/>_838 = ((_832 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_840)<br/>_840 = _838<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _840)</td></tr></table>>];
    bb374__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">374</td></tr><tr><td align="left" balign="left">StorageDead(_840)<br/>StorageDead(_838)<br/>_1486 = discriminant(_832)<br/>StorageDead(_836)<br/>StorageDead(_832)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb375__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">375</td></tr><tr><td align="left" balign="left">StorageDead(_849)<br/>_847 = &amp;((*_848).26: u16)<br/>_846 = &amp;(*_847)<br/></td></tr><tr><td align="left">_844 = SpotMarketMap::&lt;'_&gt;::get_ref(move _845, move _846)</td></tr></table>>];
    bb376__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">376</td></tr><tr><td align="left" balign="left">StorageDead(_846)<br/>StorageDead(_845)<br/></td></tr><tr><td align="left">_843 = &lt;std::result::Result&lt;Ref&lt;'_, SpotMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _844)</td></tr></table>>];
    bb377__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">377</td></tr><tr><td align="left" balign="left">StorageDead(_844)<br/>_850 = discriminant(_843)<br/></td></tr><tr><td align="left">switchInt(move _850)</td></tr></table>>];
    bb378__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">378</td></tr><tr><td align="left" balign="left">StorageLive(_854)<br/>_854 = move ((_843 as Continue).0: std::cell::Ref&lt;'_, state::spot_market::SpotMarket&gt;)<br/>_1446 = const true<br/>_842 = move _854<br/>StorageDead(_854)<br/>_1492 = discriminant(_843)<br/>StorageDead(_848)<br/>StorageDead(_847)<br/>StorageDead(_843)<br/>StorageLive(_855)<br/>StorageLive(_856)<br/>StorageLive(_857)<br/>StorageLive(_858)<br/>StorageLive(_859)<br/>_859 = &amp;mut (*_12)<br/>StorageLive(_860)<br/>StorageLive(_861)<br/>StorageLive(_862)<br/>StorageLive(_863)<br/>StorageLive(_864)<br/>StorageLive(_865)<br/>_865 = &amp;_842<br/></td></tr><tr><td align="left">_864 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _865)</td></tr></table>>];
    bb379__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">379</td></tr><tr><td align="left" balign="left">StorageLive(_851)<br/>_851 = ((_843 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_853)<br/>_853 = _851<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _853)</td></tr></table>>];
    bb380__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">380</td></tr><tr><td align="left" balign="left">StorageDead(_853)<br/>StorageDead(_851)<br/>_1490 = discriminant(_843)<br/>StorageDead(_848)<br/>StorageDead(_847)<br/>StorageDead(_843)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb381__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">381</td></tr><tr><td align="left" balign="left">_863 = &amp;(*_864)<br/>StorageDead(_865)<br/></td></tr><tr><td align="left">_862 = SpotMarket::oracle_id(move _863)</td></tr></table>>];
    bb382__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">382</td></tr><tr><td align="left" balign="left">StorageDead(_863)<br/>_861 = &amp;_862<br/>_860 = &amp;(*_861)<br/></td></tr><tr><td align="left">_858 = OracleMap::&lt;'_&gt;::get_price_data(move _859, move _860)</td></tr></table>>];
    bb383__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">383</td></tr><tr><td align="left" balign="left">StorageDead(_860)<br/>StorageDead(_859)<br/></td></tr><tr><td align="left">_857 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _858)</td></tr></table>>];
    bb384__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">384</td></tr><tr><td align="left" balign="left">StorageDead(_858)<br/>_866 = discriminant(_857)<br/></td></tr><tr><td align="left">switchInt(move _866)</td></tr></table>>];
    bb385__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">385</td></tr><tr><td align="left" balign="left">StorageLive(_870)<br/>_870 = ((_857 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_856 = _870<br/>StorageDead(_870)<br/>_855 = ((*_856).0: i64)<br/>StorageDead(_864)<br/>StorageDead(_862)<br/>StorageDead(_861)<br/>StorageDead(_857)<br/>StorageDead(_856)<br/>StorageLive(_871)<br/>StorageLive(_872)<br/>StorageLive(_873)<br/>_873 = &amp;_831<br/></td></tr><tr><td align="left">_872 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _873)</td></tr></table>>];
    bb386__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">386</td></tr><tr><td align="left" balign="left">StorageLive(_867)<br/>_867 = ((_857 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_869)<br/>_869 = _867<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _869)</td></tr></table>>];
    bb387__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">387</td></tr><tr><td align="left" balign="left">StorageDead(_869)<br/>StorageDead(_867)<br/>StorageDead(_864)<br/>StorageDead(_862)<br/>StorageDead(_861)<br/>StorageDead(_857)<br/>StorageDead(_856)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb388__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">388</td></tr><tr><td align="left" balign="left">StorageDead(_873)<br/>_871 = ((*_872).13: u32)<br/>StorageDead(_872)<br/>StorageLive(_874)<br/>StorageLive(_875)<br/>StorageLive(_876)<br/>StorageLive(_877)<br/>StorageLive(_878)<br/>StorageLive(_879)<br/>StorageLive(_880)<br/>_880 = &amp;_569<br/>StorageLive(_881)<br/>_881 = _822<br/></td></tr><tr><td align="left">_879 = MarginCalculation::tracked_market_margin_shortage(move _880, move _881)</td></tr></table>>];
    bb389__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">389</td></tr><tr><td align="left" balign="left">StorageDead(_881)<br/>StorageDead(_880)<br/></td></tr><tr><td align="left">_878 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _879)</td></tr></table>>];
    bb390__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">390</td></tr><tr><td align="left" balign="left">StorageDead(_879)<br/>_882 = discriminant(_878)<br/></td></tr><tr><td align="left">switchInt(move _882)</td></tr></table>>];
    bb391__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">391</td></tr><tr><td align="left" balign="left">StorageLive(_886)<br/>_886 = ((_878 as Continue).0: u128)<br/>_877 = _886<br/>StorageDead(_886)<br/>StorageLive(_887)<br/>_887 = _768<br/>StorageLive(_888)<br/>_888 = _812<br/>StorageLive(_889)<br/>_889 = _871<br/>StorageLive(_890)<br/>_890 = _557<br/>StorageLive(_891)<br/>_891 = _855<br/>StorageLive(_892)<br/>StorageLive(_893)<br/>StorageLive(_894)<br/>_894 = &amp;_831<br/></td></tr><tr><td align="left">_893 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _894)</td></tr></table>>];
    bb392__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">392</td></tr><tr><td align="left" balign="left">StorageLive(_883)<br/>_883 = ((_878 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_885)<br/>_885 = _883<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _885)</td></tr></table>>];
    bb393__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">393</td></tr><tr><td align="left" balign="left">StorageDead(_885)<br/>StorageDead(_883)<br/>StorageDead(_877)<br/>StorageDead(_876)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb394__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">394</td></tr><tr><td align="left" balign="left">StorageDead(_894)<br/>_892 = ((*_893).14: u32)<br/></td></tr><tr><td align="left">_876 = calculate_perp_if_fee(move _877, move _887, move _888, move _889, move _890, move _891, move _892)</td></tr></table>>];
    bb395__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">395</td></tr><tr><td align="left" balign="left">StorageDead(_892)<br/>StorageDead(_891)<br/>StorageDead(_890)<br/>StorageDead(_889)<br/>StorageDead(_888)<br/>StorageDead(_887)<br/>StorageDead(_877)<br/></td></tr><tr><td align="left">_875 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _876)</td></tr></table>>];
    bb396__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">396</td></tr><tr><td align="left" balign="left">StorageDead(_876)<br/>_895 = discriminant(_875)<br/></td></tr><tr><td align="left">switchInt(move _895)</td></tr></table>>];
    bb397__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">397</td></tr><tr><td align="left" balign="left">StorageLive(_899)<br/>_899 = ((_875 as Continue).0: u32)<br/>_874 = _899<br/>StorageDead(_899)<br/>StorageDead(_893)<br/>StorageDead(_878)<br/>StorageDead(_875)<br/>StorageLive(_900)<br/>StorageLive(_901)<br/>StorageLive(_902)<br/>StorageLive(_903)<br/>StorageLive(_904)<br/>StorageLive(_905)<br/>StorageLive(_906)<br/>_906 = _822<br/>StorageLive(_907)<br/>_907 = _812<br/>StorageLive(_908)<br/>_908 = _871<br/>StorageLive(_909)<br/>_909 = _874<br/>StorageLive(_910)<br/>_910 = _557<br/>StorageLive(_911)<br/>_911 = _855<br/></td></tr><tr><td align="left">_905 = calculate_base_asset_amount_to_cover_margin_shortage(move _906, move _907, move _908, move _909, move _910, move _911)</td></tr></table>>];
    bb398__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">398</td></tr><tr><td align="left" balign="left">StorageLive(_896)<br/>_896 = ((_875 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_898)<br/>_898 = _896<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _898)</td></tr></table>>];
    bb399__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">399</td></tr><tr><td align="left" balign="left">StorageDead(_898)<br/>StorageDead(_896)<br/>StorageDead(_893)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb400__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">400</td></tr><tr><td align="left" balign="left">StorageDead(_911)<br/>StorageDead(_910)<br/>StorageDead(_909)<br/>StorageDead(_908)<br/>StorageDead(_907)<br/>StorageDead(_906)<br/></td></tr><tr><td align="left">_904 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _905)</td></tr></table>>];
    bb401__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">401</td></tr><tr><td align="left" balign="left">StorageDead(_905)<br/>_912 = discriminant(_904)<br/></td></tr><tr><td align="left">switchInt(move _912)</td></tr></table>>];
    bb402__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">402</td></tr><tr><td align="left" balign="left">StorageLive(_916)<br/>_916 = ((_904 as Continue).0: u64)<br/>_903 = _916<br/>StorageDead(_916)<br/>StorageLive(_917)<br/>StorageLive(_918)<br/>StorageLive(_919)<br/>_919 = &amp;_831<br/></td></tr><tr><td align="left">_918 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _919)</td></tr></table>>];
    bb403__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">403</td></tr><tr><td align="left" balign="left">StorageLive(_913)<br/>_913 = ((_904 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_915)<br/>_915 = _913<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _915)</td></tr></table>>];
    bb404__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">404</td></tr><tr><td align="left" balign="left">StorageDead(_915)<br/>StorageDead(_913)<br/>StorageDead(_903)<br/>StorageDead(_902)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb405__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">405</td></tr><tr><td align="left" balign="left">StorageDead(_919)<br/>_917 = (((*_918).1: state::perp_market::AMM).52: u64)<br/></td></tr><tr><td align="left">_902 = standardize_base_asset_amount_ceil(move _903, move _917)</td></tr></table>>];
    bb406__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">406</td></tr><tr><td align="left" balign="left">StorageDead(_917)<br/>StorageDead(_903)<br/></td></tr><tr><td align="left">_901 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _902)</td></tr></table>>];
    bb407__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">407</td></tr><tr><td align="left" balign="left">StorageDead(_902)<br/>_920 = discriminant(_901)<br/></td></tr><tr><td align="left">switchInt(move _920)</td></tr></table>>];
    bb408__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">408</td></tr><tr><td align="left" balign="left">StorageLive(_924)<br/>_924 = ((_901 as Continue).0: u64)<br/>_900 = _924<br/>StorageDead(_924)<br/>StorageDead(_918)<br/>StorageDead(_904)<br/>StorageDead(_901)<br/>StorageLive(_925)<br/>StorageLive(_926)<br/>_1447 = const false<br/>_926 = move _831<br/></td></tr><tr><td align="left">_925 = std::mem::drop::&lt;Ref&lt;'_, PerpMarket&gt;&gt;(move _926)</td></tr></table>>];
    bb409__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">409</td></tr><tr><td align="left" balign="left">StorageLive(_921)<br/>_921 = ((_901 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_923)<br/>_923 = _921<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _923)</td></tr></table>>];
    bb410__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">410</td></tr><tr><td align="left" balign="left">StorageDead(_923)<br/>StorageDead(_921)<br/>StorageDead(_918)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb411__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">411</td></tr><tr><td align="left" balign="left">StorageDead(_926)<br/>StorageDead(_925)<br/>StorageLive(_927)<br/>StorageLive(_928)<br/>_1446 = const false<br/>_928 = move _842<br/></td></tr><tr><td align="left">_927 = std::mem::drop::&lt;Ref&lt;'_, SpotMarket&gt;&gt;(move _928)</td></tr></table>>];
    bb412__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">412</td></tr><tr><td align="left" balign="left">StorageDead(_928)<br/>StorageDead(_927)<br/>StorageLive(_929)<br/>StorageLive(_930)<br/>StorageLive(_931)<br/>StorageLive(_932)<br/>StorageLive(_933)<br/>StorageLive(_934)<br/>StorageLive(_935)<br/>_935 = &amp;_17<br/>_934 = &amp;(*_935)<br/></td></tr><tr><td align="left">_933 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _934)</td></tr></table>>];
    bb413__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">413</td></tr><tr><td align="left" balign="left">_932 = &amp;(*_933)<br/>StorageDead(_934)<br/>StorageLive(_936)<br/>_936 = _822<br/>StorageLive(_937)<br/>_937 = _16<br/>StorageLive(_938)<br/>_938 = _40<br/>StorageLive(_939)<br/>_939 = _42<br/></td></tr><tr><td align="left">_931 = calculate_max_pct_to_liquidate(move _932, move _936, move _937, move _938, move _939)</td></tr></table>>];
    bb414__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">414</td></tr><tr><td align="left" balign="left">StorageDead(_939)<br/>StorageDead(_938)<br/>StorageDead(_937)<br/>StorageDead(_936)<br/>StorageDead(_932)<br/></td></tr><tr><td align="left">_930 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _931)</td></tr></table>>];
    bb415__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">415</td></tr><tr><td align="left" balign="left">StorageDead(_931)<br/>_940 = discriminant(_930)<br/></td></tr><tr><td align="left">switchInt(move _940)</td></tr></table>>];
    bb416__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">416</td></tr><tr><td align="left" balign="left">StorageLive(_944)<br/>_944 = ((_930 as Continue).0: u128)<br/>_929 = _944<br/>StorageDead(_944)<br/>StorageDead(_935)<br/>StorageDead(_933)<br/>StorageDead(_930)<br/>StorageLive(_945)<br/>StorageLive(_946)<br/>StorageLive(_947)<br/>StorageLive(_948)<br/>StorageLive(_949)<br/>StorageLive(_950)<br/>StorageLive(_951)<br/>StorageLive(_952)<br/>StorageLive(_953)<br/>StorageLive(_954)<br/>StorageLive(_955)<br/>_955 = _900<br/></td></tr><tr><td align="left">_954 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _955)</td></tr></table>>];
    bb417__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">417</td></tr><tr><td align="left" balign="left">StorageLive(_941)<br/>_941 = ((_930 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_943)<br/>_943 = _941<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _943)</td></tr></table>>];
    bb418__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">418</td></tr><tr><td align="left" balign="left">StorageDead(_943)<br/>StorageDead(_941)<br/>StorageDead(_935)<br/>StorageDead(_933)<br/>StorageDead(_930)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb419__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">419</td></tr><tr><td align="left" balign="left">StorageDead(_955)<br/></td></tr><tr><td align="left">_953 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _954)</td></tr></table>>];
    bb420__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">420</td></tr><tr><td align="left" balign="left">StorageDead(_954)<br/>_956 = discriminant(_953)<br/></td></tr><tr><td align="left">switchInt(move _956)</td></tr></table>>];
    bb421__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">421</td></tr><tr><td align="left" balign="left">StorageLive(_960)<br/>_960 = ((_953 as Continue).0: u128)<br/>_952 = _960<br/>StorageDead(_960)<br/>StorageLive(_961)<br/>_961 = _929<br/></td></tr><tr><td align="left">_951 = core::num::&lt;impl u128&gt;::saturating_mul(move _952, move _961)</td></tr></table>>];
    bb422__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">422</td></tr><tr><td align="left" balign="left">StorageLive(_957)<br/>_957 = ((_953 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_959)<br/>_959 = _957<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _959)</td></tr></table>>];
    bb423__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">423</td></tr><tr><td align="left" balign="left">StorageDead(_959)<br/>StorageDead(_957)<br/>StorageDead(_952)<br/>StorageDead(_951)<br/>StorageDead(_950)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb424__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">424</td></tr><tr><td align="left" balign="left">StorageDead(_961)<br/>StorageDead(_952)<br/></td></tr><tr><td align="left">_950 = &lt;u128 as SafeMath&gt;::safe_div(move _951, const _)</td></tr></table>>];
    bb425__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">425</td></tr><tr><td align="left" balign="left">StorageDead(_951)<br/></td></tr><tr><td align="left">_949 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _950)</td></tr></table>>];
    bb426__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">426</td></tr><tr><td align="left" balign="left">StorageDead(_950)<br/>_962 = discriminant(_949)<br/></td></tr><tr><td align="left">switchInt(move _962)</td></tr></table>>];
    bb427__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">427</td></tr><tr><td align="left" balign="left">StorageLive(_966)<br/>_966 = ((_949 as Continue).0: u128)<br/>_948 = _966<br/>StorageDead(_966)<br/></td></tr><tr><td align="left">_947 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _948)</td></tr></table>>];
    bb428__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">428</td></tr><tr><td align="left" balign="left">StorageLive(_963)<br/>_963 = ((_949 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_965)<br/>_965 = _963<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _965)</td></tr></table>>];
    bb429__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">429</td></tr><tr><td align="left" balign="left">StorageDead(_965)<br/>StorageDead(_963)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb430__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">430</td></tr><tr><td align="left" balign="left">StorageDead(_948)<br/></td></tr><tr><td align="left">_946 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _947)</td></tr></table>>];
    bb431__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">431</td></tr><tr><td align="left" balign="left">StorageDead(_947)<br/>_967 = discriminant(_946)<br/></td></tr><tr><td align="left">switchInt(move _967)</td></tr></table>>];
    bb432__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">432</td></tr><tr><td align="left" balign="left">StorageLive(_971)<br/>_971 = ((_946 as Continue).0: u64)<br/>_945 = _971<br/>StorageDead(_971)<br/>StorageDead(_953)<br/>StorageDead(_949)<br/>StorageDead(_946)<br/>StorageLive(_972)<br/>StorageLive(_973)<br/>StorageLive(_974)<br/>_974 = _945<br/>_973 = Eq(move _974, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _973)</td></tr></table>>];
    bb433__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">433</td></tr><tr><td align="left" balign="left">StorageLive(_968)<br/>_968 = ((_946 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_970)<br/>_970 = _968<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _970)</td></tr></table>>];
    bb434__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">434</td></tr><tr><td align="left" balign="left">StorageDead(_970)<br/>StorageDead(_968)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb435__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">435</td></tr><tr><td align="left" balign="left">StorageDead(_974)<br/>StorageLive(_976)<br/>StorageLive(_977)<br/>StorageLive(_978)<br/>_978 = const &quot;max_base_asset_amount_allowed_to_be_transferred == 0&quot;<br/>_977 = &amp;(*_978)<br/></td></tr><tr><td align="left">_976 = solana_program::log::sol_log(move _977)</td></tr></table>>];
    bb436__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">436</td></tr><tr><td align="left" balign="left">StorageDead(_974)<br/>_972 = const ()<br/>StorageDead(_973)<br/>StorageDead(_972)<br/>StorageLive(_980)<br/>StorageLive(_981)<br/>StorageLive(_982)<br/>StorageLive(_983)<br/>StorageLive(_984)<br/>StorageLive(_985)<br/>StorageLive(_986)<br/>StorageLive(_987)<br/>StorageLive(_988)<br/>StorageLive(_989)<br/>_989 = _768<br/></td></tr><tr><td align="left">_988 = &lt;u64 as Cast&gt;::cast::&lt;i128&gt;(move _989)</td></tr></table>>];
    bb437__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">437</td></tr><tr><td align="left" balign="left">StorageDead(_977)<br/>StorageDead(_978)<br/>StorageDead(_976)<br/>StorageLive(_979)<br/>_979 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _979)<br/>StorageDead(_979)<br/>StorageDead(_973)<br/>StorageDead(_972)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb438__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">438</td></tr><tr><td align="left" balign="left">StorageDead(_989)<br/></td></tr><tr><td align="left">_987 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _988)</td></tr></table>>];
    bb439__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">439</td></tr><tr><td align="left" balign="left">StorageDead(_988)<br/>_990 = discriminant(_987)<br/></td></tr><tr><td align="left">switchInt(move _990)</td></tr></table>>];
    bb440__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">440</td></tr><tr><td align="left" balign="left">StorageLive(_994)<br/>_994 = ((_987 as Continue).0: i128)<br/>_986 = _994<br/>StorageDead(_994)<br/>StorageLive(_995)<br/>_995 = _557<br/></td></tr><tr><td align="left">_985 = calculate_base_asset_value_with_oracle_price(move _986, move _995)</td></tr></table>>];
    bb441__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">441</td></tr><tr><td align="left" balign="left">StorageLive(_991)<br/>_991 = ((_987 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_993)<br/>_993 = _991<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _993)</td></tr></table>>];
    bb442__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">442</td></tr><tr><td align="left" balign="left">StorageDead(_993)<br/>StorageDead(_991)<br/>StorageDead(_986)<br/>StorageDead(_985)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb443__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">443</td></tr><tr><td align="left" balign="left">StorageDead(_995)<br/>StorageDead(_986)<br/></td></tr><tr><td align="left">_984 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _985)</td></tr></table>>];
    bb444__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">444</td></tr><tr><td align="left" balign="left">StorageDead(_985)<br/>_996 = discriminant(_984)<br/></td></tr><tr><td align="left">switchInt(move _996)</td></tr></table>>];
    bb445__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">445</td></tr><tr><td align="left" balign="left">StorageLive(_1000)<br/>_1000 = ((_984 as Continue).0: u128)<br/>_983 = _1000<br/>StorageDead(_1000)<br/></td></tr><tr><td align="left">_982 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _983)</td></tr></table>>];
    bb446__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">446</td></tr><tr><td align="left" balign="left">StorageLive(_997)<br/>_997 = ((_984 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_999)<br/>_999 = _997<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _999)</td></tr></table>>];
    bb447__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">447</td></tr><tr><td align="left" balign="left">StorageDead(_999)<br/>StorageDead(_997)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb448__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">448</td></tr><tr><td align="left" balign="left">StorageDead(_983)<br/></td></tr><tr><td align="left">_981 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _982)</td></tr></table>>];
    bb449__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">449</td></tr><tr><td align="left" balign="left">StorageDead(_982)<br/>_1001 = discriminant(_981)<br/></td></tr><tr><td align="left">switchInt(move _1001)</td></tr></table>>];
    bb450__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">450</td></tr><tr><td align="left" balign="left">StorageLive(_1005)<br/>_1005 = ((_981 as Continue).0: u64)<br/>_980 = _1005<br/>StorageDead(_1005)<br/>StorageDead(_987)<br/>StorageDead(_984)<br/>StorageDead(_981)<br/>StorageLive(_1006)<br/>StorageLive(_1007)<br/>StorageLive(_1008)<br/>_1008 = _980<br/>StorageLive(_1009)<br/>_1010 = CheckedMul(const 50_u64, const _)<br/></td></tr><tr><td align="left">assert(!move (_1010.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 50_u64, const _)</td></tr></table>>];
    bb451__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">451</td></tr><tr><td align="left" balign="left">StorageLive(_1002)<br/>_1002 = ((_981 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1004)<br/>_1004 = _1002<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1004)</td></tr></table>>];
    bb452__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">452</td></tr><tr><td align="left" balign="left">StorageDead(_1004)<br/>StorageDead(_1002)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb453__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">453</td></tr><tr><td align="left" balign="left">_1009 = move (_1010.0: u64)<br/>_1007 = Gt(move _1008, move _1009)<br/></td></tr><tr><td align="left">switchInt(move _1007)</td></tr></table>>];
    bb454__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">454</td></tr><tr><td align="left" balign="left">StorageDead(_1009)<br/>StorageDead(_1008)<br/>_1006 = const 0_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb455__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">455</td></tr><tr><td align="left" balign="left">StorageDead(_1009)<br/>StorageDead(_1008)<br/>_1006 = _768<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb456__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">456</td></tr><tr><td align="left" balign="left">StorageDead(_1007)<br/>StorageLive(_1011)<br/>StorageLive(_1012)<br/>_1012 = _768<br/>StorageLive(_1013)<br/>StorageLive(_1014)<br/>_1014 = _945<br/>StorageLive(_1015)<br/>_1015 = _1006<br/></td></tr><tr><td align="left">_1013 = &lt;u64 as Ord&gt;::max(move _1014, move _1015)</td></tr></table>>];
    bb457__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">457</td></tr><tr><td align="left" balign="left">StorageDead(_1015)<br/>StorageDead(_1014)<br/></td></tr><tr><td align="left">_1011 = &lt;u64 as Ord&gt;::min(move _1012, move _1013)</td></tr></table>>];
    bb458__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">458</td></tr><tr><td align="left" balign="left">StorageDead(_1013)<br/>StorageDead(_1012)<br/>StorageLive(_1016)<br/>StorageLive(_1017)<br/>StorageLive(_1018)<br/>StorageLive(_1019)<br/>_1019 = _1011<br/>StorageLive(_1020)<br/>StorageLive(_1021)<br/>StorageLive(_1022)<br/>StorageLive(_1023)<br/>StorageLive(_1024)<br/>StorageLive(_1025)<br/>StorageLive(_1026)<br/>_1026 = &amp;(*_10)<br/>StorageLive(_1027)<br/>StorageLive(_1028)<br/>_1028 = &amp;_1<br/>_1027 = &amp;(*_1028)<br/></td></tr><tr><td align="left">_1025 = PerpMarketMap::&lt;'_&gt;::get_ref(move _1026, move _1027)</td></tr></table>>];
    bb459__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">459</td></tr><tr><td align="left" balign="left">StorageDead(_1027)<br/>StorageDead(_1026)<br/></td></tr><tr><td align="left">_1024 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1025)</td></tr></table>>];
    bb460__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">460</td></tr><tr><td align="left" balign="left">_1445 = const true<br/>StorageDead(_1025)<br/>_1029 = discriminant(_1024)<br/></td></tr><tr><td align="left">switchInt(move _1029)</td></tr></table>>];
    bb461__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">461</td></tr><tr><td align="left" balign="left">StorageLive(_1033)<br/>_1033 = move ((_1024 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1023 = move _1033<br/>StorageDead(_1033)<br/>_1022 = &amp;_1023<br/></td></tr><tr><td align="left">_1021 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1022)</td></tr></table>>];
    bb462__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">462</td></tr><tr><td align="left" balign="left">StorageLive(_1030)<br/>_1030 = ((_1024 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1032)<br/>_1032 = _1030<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1032)</td></tr></table>>];
    bb463__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">463</td></tr><tr><td align="left" balign="left">StorageDead(_1032)<br/>StorageDead(_1030)<br/>StorageDead(_1022)<br/>StorageDead(_1020)<br/>StorageDead(_1019)<br/>StorageDead(_1018)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb464__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">464</td></tr><tr><td align="left" balign="left">StorageDead(_1022)<br/>_1020 = (((*_1021).1: state::perp_market::AMM).52: u64)<br/></td></tr><tr><td align="left">_1018 = standardize_base_asset_amount_ceil(move _1019, move _1020)</td></tr></table>>];
    bb465__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">465</td></tr><tr><td align="left" balign="left">StorageDead(_1020)<br/>StorageDead(_1019)<br/></td></tr><tr><td align="left">_1017 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1018)</td></tr></table>>];
    bb466__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">466</td></tr><tr><td align="left" balign="left">StorageDead(_1018)<br/>_1034 = discriminant(_1017)<br/></td></tr><tr><td align="left">switchInt(move _1034)</td></tr></table>>];
    bb467__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">467</td></tr><tr><td align="left" balign="left">StorageLive(_1038)<br/>_1038 = ((_1017 as Continue).0: u64)<br/>_1016 = _1038<br/>StorageDead(_1038)<br/></td></tr><tr><td align="left">drop(_1023)</td></tr></table>>];
    bb468__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">468</td></tr><tr><td align="left" balign="left">StorageLive(_1035)<br/>_1035 = ((_1017 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1037)<br/>_1037 = _1035<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1037)</td></tr></table>>];
    bb469__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">469</td></tr><tr><td align="left" balign="left">StorageDead(_1037)<br/>StorageDead(_1035)<br/></td></tr><tr><td align="left">drop(_1023)</td></tr></table>>];
    bb470__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">470</td></tr><tr><td align="left" balign="left">StorageDead(_1042)<br/>StorageLive(_1043)<br/>_1043 = _416<br/>_1044 = Len(((*_1041).4: [state::user::PerpPosition; 8]))<br/>_1045 = Lt(_1043, _1044)<br/></td></tr><tr><td align="left">assert(move _1045, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1044, _1043)</td></tr></table>>];
    bb471__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">471</td></tr><tr><td align="left" balign="left">_1040 = &amp;((*_1041).4: [state::user::PerpPosition; 8])[_1043]<br/></td></tr><tr><td align="left">_1039 = PerpPosition::get_direction(move _1040)</td></tr></table>>];
    bb472__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">472</td></tr><tr><td align="left" balign="left">StorageDead(_1040)<br/>StorageDead(_1043)<br/>StorageDead(_1041)<br/>StorageLive(_1046)<br/>StorageLive(_1047)<br/>StorageLive(_1048)<br/>StorageLive(_1049)<br/>StorageLive(_1050)<br/>StorageLive(_1051)<br/>StorageLive(_1052)<br/>StorageLive(_1053)<br/>StorageLive(_1054)<br/>StorageLive(_1055)<br/>_1055 = &amp;(*_10)<br/>StorageLive(_1056)<br/>StorageLive(_1057)<br/>_1057 = &amp;_1<br/>_1056 = &amp;(*_1057)<br/></td></tr><tr><td align="left">_1054 = PerpMarketMap::&lt;'_&gt;::get_ref(move _1055, move _1056)</td></tr></table>>];
    bb473__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">473</td></tr><tr><td align="left" balign="left">StorageDead(_1056)<br/>StorageDead(_1055)<br/></td></tr><tr><td align="left">_1053 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1054)</td></tr></table>>];
    bb474__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">474</td></tr><tr><td align="left" balign="left">_1444 = const true<br/>StorageDead(_1054)<br/>_1058 = discriminant(_1053)<br/></td></tr><tr><td align="left">switchInt(move _1058)</td></tr></table>>];
    bb475__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">475</td></tr><tr><td align="left" balign="left">StorageLive(_1062)<br/>_1062 = move ((_1053 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1052 = move _1062<br/>StorageDead(_1062)<br/>_1051 = &amp;_1052<br/></td></tr><tr><td align="left">_1050 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1051)</td></tr></table>>];
    bb476__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">476</td></tr><tr><td align="left" balign="left">StorageLive(_1059)<br/>_1059 = ((_1053 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1061)<br/>_1061 = _1059<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1061)</td></tr></table>>];
    bb477__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">477</td></tr><tr><td align="left" balign="left">StorageDead(_1061)<br/>StorageDead(_1059)<br/>StorageDead(_1051)<br/>StorageDead(_1049)<br/>StorageDead(_1048)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb478__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">478</td></tr><tr><td align="left" balign="left">_1049 = &amp;(*_1050)<br/>StorageDead(_1051)<br/></td></tr><tr><td align="left">_1048 = PerpMarket::get_max_liquidation_fee(move _1049)</td></tr></table>>];
    bb479__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">479</td></tr><tr><td align="left" balign="left">StorageDead(_1049)<br/></td></tr><tr><td align="left">_1047 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _1048)</td></tr></table>>];
    bb480__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">480</td></tr><tr><td align="left" balign="left">StorageDead(_1048)<br/>_1063 = discriminant(_1047)<br/></td></tr><tr><td align="left">switchInt(move _1063)</td></tr></table>>];
    bb481__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">481</td></tr><tr><td align="left" balign="left">StorageLive(_1067)<br/>_1067 = ((_1047 as Continue).0: u32)<br/>_1046 = _1067<br/>StorageDead(_1067)<br/></td></tr><tr><td align="left">drop(_1052)</td></tr></table>>];
    bb482__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">482</td></tr><tr><td align="left" balign="left">StorageLive(_1064)<br/>_1064 = ((_1047 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1066)<br/>_1066 = _1064<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1066)</td></tr></table>>];
    bb483__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">483</td></tr><tr><td align="left" balign="left">StorageDead(_1066)<br/>StorageDead(_1064)<br/></td></tr><tr><td align="left">drop(_1052)</td></tr></table>>];
    bb484__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">484</td></tr><tr><td align="left" balign="left">StorageDead(_1075)<br/>_1073 = ((*_1074).14: u64)<br/>StorageLive(_1076)<br/>_1076 = _16<br/></td></tr><tr><td align="left">_1070 = get_liquidation_fee(move _1071, move _1072, move _1073, move _1076)</td></tr></table>>];
    bb485__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">485</td></tr><tr><td align="left" balign="left">StorageDead(_1076)<br/>StorageDead(_1073)<br/>StorageDead(_1072)<br/>StorageDead(_1071)<br/></td></tr><tr><td align="left">_1069 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _1070)</td></tr></table>>];
    bb486__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">486</td></tr><tr><td align="left" balign="left">StorageDead(_1070)<br/>_1077 = discriminant(_1069)<br/></td></tr><tr><td align="left">switchInt(move _1077)</td></tr></table>>];
    bb487__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">487</td></tr><tr><td align="left" balign="left">StorageLive(_1081)<br/>_1081 = ((_1069 as Continue).0: u32)<br/>_1068 = _1081<br/>StorageDead(_1081)<br/>StorageDead(_1074)<br/>StorageDead(_1069)<br/>StorageLive(_1082)<br/>StorageLive(_1083)<br/>StorageLive(_1084)<br/>StorageLive(_1085)<br/>_1085 = _1<br/>StorageLive(_1086)<br/>_1086 = _1039<br/>StorageLive(_1087)<br/>_1087 = _1016<br/>StorageLive(_1088)<br/>_1088 = _557<br/>StorageLive(_1089)<br/>_1089 = _1068<br/></td></tr><tr><td align="left">_1084 = get_liquidation_order_params(move _1085, move _1086, move _1087, move _1088, move _1089)</td></tr></table>>];
    bb488__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">488</td></tr><tr><td align="left" balign="left">StorageLive(_1078)<br/>_1078 = ((_1069 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1080)<br/>_1080 = _1078<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1080)</td></tr></table>>];
    bb489__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">489</td></tr><tr><td align="left" balign="left">StorageDead(_1080)<br/>StorageDead(_1078)<br/>StorageDead(_1074)<br/>StorageDead(_1069)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb490__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">490</td></tr><tr><td align="left" balign="left">StorageDead(_1089)<br/>StorageDead(_1088)<br/>StorageDead(_1087)<br/>StorageDead(_1086)<br/>StorageDead(_1085)<br/></td></tr><tr><td align="left">_1083 = &lt;std::result::Result&lt;order_params::OrderParams, error::ErrorCode&gt; as Try&gt;::branch(move _1084)</td></tr></table>>];
    bb491__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">491</td></tr><tr><td align="left" balign="left">StorageDead(_1084)<br/>_1090 = discriminant(_1083)<br/></td></tr><tr><td align="left">switchInt(move _1090)</td></tr></table>>];
    bb492__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">492</td></tr><tr><td align="left" balign="left">StorageLive(_1094)<br/>_1094 = ((_1083 as Continue).0: state::order_params::OrderParams)<br/>_1082 = _1094<br/>StorageDead(_1094)<br/>StorageDead(_1083)<br/>StorageLive(_1095)<br/>StorageLive(_1096)<br/>StorageLive(_1097)<br/>_1097 = &amp;_17<br/></td></tr><tr><td align="left">_1096 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _1097)</td></tr></table>>];
    bb493__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">493</td></tr><tr><td align="left" balign="left">StorageLive(_1091)<br/>_1091 = ((_1083 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1093)<br/>_1093 = _1091<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1093)</td></tr></table>>];
    bb494__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">494</td></tr><tr><td align="left" balign="left">StorageDead(_1093)<br/>StorageDead(_1091)<br/>StorageDead(_1083)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb495__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">495</td></tr><tr><td align="left" balign="left">StorageDead(_1097)<br/>_1095 = ((*_1096).15: u32)<br/>StorageDead(_1096)<br/>StorageLive(_1098)<br/>StorageLive(_1099)<br/>StorageLive(_1100)<br/>StorageLive(_1101)<br/>StorageLive(_1102)<br/>StorageLive(_1103)<br/>StorageLive(_1104)<br/>_1104 = &amp;(*_10)<br/>StorageLive(_1105)<br/>StorageLive(_1106)<br/>_1106 = &amp;_1<br/>_1105 = &amp;(*_1106)<br/></td></tr><tr><td align="left">_1103 = PerpMarketMap::&lt;'_&gt;::get_ref(move _1104, move _1105)</td></tr></table>>];
    bb496__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">496</td></tr><tr><td align="left" balign="left">StorageDead(_1105)<br/>StorageDead(_1104)<br/></td></tr><tr><td align="left">_1102 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1103)</td></tr></table>>];
    bb497__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">497</td></tr><tr><td align="left" balign="left">_1457 = const true<br/>StorageDead(_1103)<br/>_1107 = discriminant(_1102)<br/></td></tr><tr><td align="left">switchInt(move _1107)</td></tr></table>>];
    bb498__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">498</td></tr><tr><td align="left" balign="left">StorageLive(_1111)<br/>_1111 = move ((_1102 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1101 = move _1111<br/>StorageDead(_1111)<br/>_1100 = &amp;_1101<br/></td></tr><tr><td align="left">_1099 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1100)</td></tr></table>>];
    bb499__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">499</td></tr><tr><td align="left" balign="left">StorageLive(_1108)<br/>_1108 = ((_1102 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1110)<br/>_1110 = _1108<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1110)</td></tr></table>>];
    bb500__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">500</td></tr><tr><td align="left" balign="left">StorageDead(_1110)<br/>StorageDead(_1108)<br/>StorageDead(_1100)<br/>_1498 = discriminant(_1102)<br/>StorageDead(_1106)<br/>_1457 = const false<br/>StorageDead(_1102)<br/>StorageDead(_1101)<br/>StorageDead(_1099)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb501__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">501</td></tr><tr><td align="left" balign="left">StorageDead(_1100)<br/>_1098 = ((*_1099).8: u64)<br/></td></tr><tr><td align="left">drop(_1101)</td></tr></table>>];
    bb502__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">502</td></tr><tr><td align="left" balign="left">_1116 = &amp;mut (*_1117)<br/>StorageDead(_1118)<br/>StorageLive(_1120)<br/>_1120 = (*_3)<br/>StorageLive(_1121)<br/>_1121 = &amp;(*_10)<br/>StorageLive(_1122)<br/>_1122 = &amp;(*_11)<br/>StorageLive(_1123)<br/>_1123 = &amp;mut (*_12)<br/>StorageLive(_1124)<br/>StorageLive(_1125)<br/>_1431 = const _<br/>_1125 = &amp;(*_1431)<br/>_1124 = &amp;(*_1125)<br/>StorageLive(_1127)<br/>_1127 = &amp;(*_13)<br/>StorageLive(_1128)<br/>_1128 = _1082<br/>StorageLive(_1129)<br/>StorageLive(_1130)<br/></td></tr><tr><td align="left">_1130 = &lt;PlaceOrderOptions as Default&gt;::default()</td></tr></table>>];
    bb503__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">503</td></tr><tr><td align="left" balign="left">StorageLive(_1131)<br/>_1131 = OrderActionExplanation::Liquidation<br/></td></tr><tr><td align="left">_1129 = PlaceOrderOptions::explanation(move _1130, move _1131)</td></tr></table>>];
    bb504__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">504</td></tr><tr><td align="left" balign="left">StorageDead(_1131)<br/>StorageDead(_1130)<br/></td></tr><tr><td align="left">_1114 = controller::orders::place_perp_order(move _1115, move _1116, move _1120, move _1121, move _1122, move _1123, move _1124, move _1127, move _1128, move _1129)</td></tr></table>>];
    bb505__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">505</td></tr><tr><td align="left" balign="left">StorageDead(_1129)<br/>StorageDead(_1128)<br/>StorageDead(_1127)<br/>StorageDead(_1124)<br/>StorageDead(_1123)<br/>StorageDead(_1122)<br/>StorageDead(_1121)<br/>StorageDead(_1120)<br/>StorageDead(_1116)<br/>StorageDead(_1115)<br/></td></tr><tr><td align="left">_1113 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1114)</td></tr></table>>];
    bb506__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">506</td></tr><tr><td align="left" balign="left">StorageDead(_1114)<br/>_1132 = discriminant(_1113)<br/></td></tr><tr><td align="left">switchInt(move _1132)</td></tr></table>>];
    bb507__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">507</td></tr><tr><td align="left" balign="left">StorageLive(_1136)<br/>_1136 = ((_1113 as Continue).0: ())<br/>_1112 = _1136<br/>StorageDead(_1136)<br/>StorageDead(_1125)<br/>StorageDead(_1119)<br/>StorageDead(_1117)<br/>StorageDead(_1113)<br/>StorageDead(_1112)<br/>StorageLive(_1137)<br/>StorageLive(_1138)<br/>_1456 = const false<br/>_1138 = move _17<br/></td></tr><tr><td align="left">_1137 = std::mem::drop::&lt;RefMut&lt;'_, User&gt;&gt;(move _1138)</td></tr></table>>];
    bb508__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">508</td></tr><tr><td align="left" balign="left">StorageLive(_1133)<br/>_1133 = ((_1113 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1135)<br/>_1135 = _1133<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1135)</td></tr></table>>];
    bb509__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">509</td></tr><tr><td align="left" balign="left">StorageDead(_1135)<br/>StorageDead(_1133)<br/>StorageDead(_1125)<br/>StorageDead(_1119)<br/>StorageDead(_1117)<br/>StorageDead(_1113)<br/>StorageDead(_1112)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb510__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">510</td></tr><tr><td align="left" balign="left">StorageDead(_1138)<br/>StorageDead(_1137)<br/>StorageLive(_1139)<br/>StorageLive(_1140)<br/>_1455 = const false<br/>_1140 = move _28<br/></td></tr><tr><td align="left">_1139 = std::mem::drop::&lt;RefMut&lt;'_, User&gt;&gt;(move _1140)</td></tr></table>>];
    bb511__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">511</td></tr><tr><td align="left" balign="left">StorageDead(_1140)<br/>StorageDead(_1139)<br/>StorageLive(_1143)<br/>StorageLive(_1144)<br/>StorageLive(_1145)<br/>StorageLive(_1146)<br/>_1146 = _1095<br/>StorageLive(_1147)<br/>_1147 = &amp;(*_14)<br/>StorageLive(_1148)<br/>_1148 = &amp;(*_2)<br/>StorageLive(_1149)<br/>_1149 = &amp;(*_4)<br/>StorageLive(_1150)<br/>_1150 = &amp;(*_11)<br/>StorageLive(_1151)<br/>_1151 = &amp;(*_10)<br/>StorageLive(_1152)<br/>_1152 = &amp;mut (*_12)<br/>StorageLive(_1153)<br/>_1153 = &amp;(*_5)<br/>StorageLive(_1154)<br/>_1154 = &amp;(*_7)<br/>StorageLive(_1155)<br/>_1155 = &amp;(*_8)<br/>StorageLive(_1156)<br/>_1156 = &amp;(*_9)<br/>StorageLive(_1157)<br/>_1157 = Option::&lt;u32&gt;::None<br/>StorageLive(_1158)<br/>_1158 = &amp;(*_13)<br/>StorageLive(_1159)<br/>_1159 = FillMode::Liquidation<br/></td></tr><tr><td align="left">_1145 = controller::orders::fill_perp_order(move _1146, move _1147, move _1148, move _1149, move _1150, move _1151, move _1152, move _1153, move _1154, move _1155, move _1156, move _1157, move _1158, move _1159)</td></tr></table>>];
    bb512__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">512</td></tr><tr><td align="left" balign="left">StorageDead(_1159)<br/>StorageDead(_1158)<br/>StorageDead(_1157)<br/>StorageDead(_1156)<br/>StorageDead(_1155)<br/>StorageDead(_1154)<br/>StorageDead(_1153)<br/>StorageDead(_1152)<br/>StorageDead(_1151)<br/>StorageDead(_1150)<br/>StorageDead(_1149)<br/>StorageDead(_1148)<br/>StorageDead(_1147)<br/>StorageDead(_1146)<br/></td></tr><tr><td align="left">_1144 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _1145)</td></tr></table>>];
    bb513__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">513</td></tr><tr><td align="left" balign="left">StorageDead(_1145)<br/>_1160 = discriminant(_1144)<br/></td></tr><tr><td align="left">switchInt(move _1160)</td></tr></table>>];
    bb514__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">514</td></tr><tr><td align="left" balign="left">StorageLive(_1164)<br/>_1164 = ((_1144 as Continue).0: (u64, u64))<br/>_1143 = _1164<br/>StorageDead(_1164)<br/>StorageLive(_1141)<br/>_1141 = (_1143.0: u64)<br/>StorageLive(_1142)<br/>_1142 = (_1143.1: u64)<br/>StorageDead(_1144)<br/>StorageDead(_1143)<br/>StorageLive(_1165)<br/>StorageLive(_1166)<br/>StorageLive(_1167)<br/>StorageLive(_1168)<br/>StorageLive(_1169)<br/>_1169 = &amp;(*_2)<br/></td></tr><tr><td align="left">_1168 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _1169)</td></tr></table>>];
    bb515__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">515</td></tr><tr><td align="left" balign="left">StorageLive(_1161)<br/>_1161 = ((_1144 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1163)<br/>_1163 = _1161<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1163)</td></tr></table>>];
    bb516__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">516</td></tr><tr><td align="left" balign="left">StorageDead(_1163)<br/>StorageDead(_1161)<br/>StorageDead(_1144)<br/>StorageDead(_1143)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb517__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">517</td></tr><tr><td align="left" balign="left">StorageDead(_1169)<br/>StorageLive(_1170)<br/>_1170 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_1167 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _1168, move _1170)</td></tr></table>>];
    bb518__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">518</td></tr><tr><td align="left" balign="left">StorageDead(_1170)<br/>StorageDead(_1168)<br/></td></tr><tr><td align="left">_1166 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1167)</td></tr></table>>];
    bb519__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">519</td></tr><tr><td align="left" balign="left">StorageDead(_1167)<br/>_1171 = discriminant(_1166)<br/></td></tr><tr><td align="left">switchInt(move _1171)</td></tr></table>>];
    bb520__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">520</td></tr><tr><td align="left" balign="left">StorageLive(_1175)<br/>_1175 = move ((_1166 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_1165 = move _1175<br/>StorageDead(_1175)<br/>_1504 = discriminant(_1166)<br/>StorageDead(_1166)<br/>StorageLive(_1176)<br/>StorageLive(_1177)<br/>StorageLive(_1178)<br/>StorageLive(_1179)<br/>StorageLive(_1180)<br/>_1180 = &amp;_1165<br/></td></tr><tr><td align="left">_1179 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _1180)</td></tr></table>>];
    bb521__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">521</td></tr><tr><td align="left" balign="left">StorageLive(_1172)<br/>_1172 = ((_1166 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1174)<br/>_1174 = _1172<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1174)</td></tr></table>>];
    bb522__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">522</td></tr><tr><td align="left" balign="left">StorageDead(_1174)<br/>StorageDead(_1172)<br/>_1502 = discriminant(_1166)<br/>StorageDead(_1166)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb523__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">523</td></tr><tr><td align="left" balign="left">_1178 = &amp;(*_1179)<br/>StorageDead(_1180)<br/>StorageLive(_1181)<br/>_1181 = _1095<br/></td></tr><tr><td align="left">_1177 = User::get_order_index(move _1178, move _1181)</td></tr></table>>];
    bb524__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">524</td></tr><tr><td align="left" balign="left">StorageDead(_1181)<br/>StorageDead(_1178)<br/>_1182 = discriminant(_1177)<br/></td></tr><tr><td align="left">switchInt(move _1182)</td></tr></table>>];
    bb525__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">525</td></tr><tr><td align="left" balign="left">StorageLive(_1183)<br/>_1183 = ((_1177 as Ok).0: usize)<br/>StorageLive(_1184)<br/>StorageLive(_1185)<br/>StorageLive(_1186)<br/>StorageLive(_1187)<br/>_1187 = _1183<br/>StorageLive(_1188)<br/>StorageLive(_1189)<br/>StorageLive(_1190)<br/>StorageLive(_1191)<br/>_1191 = &amp;mut _1165<br/>_1190 = &amp;mut (*_1191)<br/></td></tr><tr><td align="left">_1189 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1190)</td></tr></table>>];
    bb526__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">526</td></tr><tr><td align="left" balign="left">_1188 = &amp;mut (*_1189)<br/>StorageDead(_1190)<br/>StorageLive(_1192)<br/>_1192 = &amp;(*_3)<br/>StorageLive(_1193)<br/>_1193 = &amp;(*_10)<br/>StorageLive(_1194)<br/>_1194 = &amp;(*_11)<br/>StorageLive(_1195)<br/>_1195 = &amp;mut (*_12)<br/>StorageLive(_1196)<br/>_1196 = ((*_13).4: i64)<br/>StorageLive(_1197)<br/>_1197 = ((*_13).0: u64)<br/>StorageLive(_1198)<br/>_1198 = OrderActionExplanation::None<br/>StorageLive(_1199)<br/>StorageLive(_1200)<br/>_1200 = &amp;(*_6)<br/>_1199 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::Some(move _1200)<br/>StorageDead(_1200)<br/></td></tr><tr><td align="left">_1186 = controller::orders::cancel_order(move _1187, move _1188, move _1192, move _1193, move _1194, move _1195, move _1196, move _1197, move _1198, move _1199, const 0_u64, const false)</td></tr></table>>];
    bb527__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">527</td></tr><tr><td align="left" balign="left">StorageDead(_1199)<br/>StorageDead(_1198)<br/>StorageDead(_1197)<br/>StorageDead(_1196)<br/>StorageDead(_1195)<br/>StorageDead(_1194)<br/>StorageDead(_1193)<br/>StorageDead(_1192)<br/>StorageDead(_1188)<br/>StorageDead(_1187)<br/></td></tr><tr><td align="left">_1185 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1186)</td></tr></table>>];
    bb528__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">528</td></tr><tr><td align="left" balign="left">StorageDead(_1186)<br/>_1201 = discriminant(_1185)<br/></td></tr><tr><td align="left">switchInt(move _1201)</td></tr></table>>];
    bb529__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">529</td></tr><tr><td align="left" balign="left">StorageLive(_1205)<br/>_1205 = ((_1185 as Continue).0: ())<br/>_1184 = _1205<br/>StorageDead(_1205)<br/>StorageDead(_1191)<br/>StorageDead(_1189)<br/>StorageDead(_1185)<br/>StorageDead(_1184)<br/>_1176 = const ()<br/>StorageDead(_1183)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb530__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">530</td></tr><tr><td align="left" balign="left">StorageLive(_1202)<br/>_1202 = ((_1185 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1204)<br/>_1204 = _1202<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1204)</td></tr></table>>];
    bb531__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">531</td></tr><tr><td align="left" balign="left">StorageDead(_1204)<br/>StorageDead(_1202)<br/>StorageDead(_1191)<br/>StorageDead(_1189)<br/>StorageDead(_1185)<br/>StorageDead(_1184)<br/>StorageDead(_1183)<br/>StorageDead(_1179)<br/>StorageDead(_1177)<br/>StorageDead(_1176)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb532__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">532</td></tr><tr><td align="left" balign="left">_1176 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb533__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">533</td></tr><tr><td align="left" balign="left">StorageDead(_1179)<br/>StorageDead(_1177)<br/>StorageDead(_1176)<br/>StorageLive(_1206)<br/>StorageLive(_1207)<br/>StorageLive(_1208)<br/>_1208 = _1141<br/>_1207 = Eq(move _1208, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _1207)</td></tr></table>>];
    bb534__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">534</td></tr><tr><td align="left" balign="left">StorageDead(_1208)<br/>StorageLive(_1210)<br/>_1210 = error::ErrorCode::LiquidationOrderFailedToFill<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _1210)<br/>StorageDead(_1210)<br/>StorageDead(_1207)<br/>StorageDead(_1206)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb535__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">535</td></tr><tr><td align="left" balign="left">StorageDead(_1208)<br/>_1206 = const ()<br/>StorageDead(_1207)<br/>StorageDead(_1206)<br/>StorageLive(_1211)<br/>StorageLive(_1212)<br/>StorageLive(_1213)<br/>StorageLive(_1214)<br/>StorageLive(_1215)<br/>StorageLive(_1216)<br/>StorageLive(_1217)<br/>StorageLive(_1218)<br/>StorageLive(_1219)<br/>StorageLive(_1220)<br/>StorageLive(_1221)<br/>StorageLive(_1222)<br/>StorageLive(_1223)<br/>StorageLive(_1224)<br/>_1224 = _1142<br/></td></tr><tr><td align="left">_1223 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _1224)</td></tr></table>>];
    bb536__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">536</td></tr><tr><td align="left" balign="left">StorageDead(_1224)<br/></td></tr><tr><td align="left">_1222 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _1223)</td></tr></table>>];
    bb537__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">537</td></tr><tr><td align="left" balign="left">StorageDead(_1223)<br/>_1225 = discriminant(_1222)<br/></td></tr><tr><td align="left">switchInt(move _1225)</td></tr></table>>];
    bb538__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">538</td></tr><tr><td align="left" balign="left">StorageLive(_1229)<br/>_1229 = ((_1222 as Continue).0: u128)<br/>_1221 = _1229<br/>StorageDead(_1229)<br/>StorageLive(_1230)<br/>StorageLive(_1231)<br/>StorageLive(_1232)<br/>StorageLive(_1233)<br/>_1233 = _874<br/></td></tr><tr><td align="left">_1232 = &lt;u32 as Cast&gt;::cast::&lt;u128&gt;(move _1233)</td></tr></table>>];
    bb539__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">539</td></tr><tr><td align="left" balign="left">StorageLive(_1226)<br/>_1226 = ((_1222 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1228)<br/>_1228 = _1226<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1228)</td></tr></table>>];
    bb540__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">540</td></tr><tr><td align="left" balign="left">StorageDead(_1228)<br/>StorageDead(_1226)<br/>StorageDead(_1221)<br/>StorageDead(_1220)<br/>StorageDead(_1218)<br/>StorageDead(_1217)<br/>StorageDead(_1215)<br/>StorageDead(_1214)<br/>StorageDead(_1212)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb541__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">541</td></tr><tr><td align="left" balign="left">StorageDead(_1233)<br/></td></tr><tr><td align="left">_1231 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _1232)</td></tr></table>>];
    bb542__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">542</td></tr><tr><td align="left" balign="left">StorageDead(_1232)<br/>_1234 = discriminant(_1231)<br/></td></tr><tr><td align="left">switchInt(move _1234)</td></tr></table>>];
    bb543__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">543</td></tr><tr><td align="left" balign="left">StorageLive(_1238)<br/>_1238 = ((_1231 as Continue).0: u128)<br/>_1230 = _1238<br/>StorageDead(_1238)<br/></td></tr><tr><td align="left">_1220 = &lt;u128 as SafeMath&gt;::safe_mul(move _1221, move _1230)</td></tr></table>>];
    bb544__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">544</td></tr><tr><td align="left" balign="left">StorageLive(_1235)<br/>_1235 = ((_1231 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1237)<br/>_1237 = _1235<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1237)</td></tr></table>>];
    bb545__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">545</td></tr><tr><td align="left" balign="left">StorageDead(_1237)<br/>StorageDead(_1235)<br/>StorageDead(_1230)<br/>StorageDead(_1221)<br/>StorageDead(_1220)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb546__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">546</td></tr><tr><td align="left" balign="left">StorageDead(_1230)<br/>StorageDead(_1221)<br/></td></tr><tr><td align="left">_1219 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _1220)</td></tr></table>>];
    bb547__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">547</td></tr><tr><td align="left" balign="left">StorageDead(_1220)<br/>_1239 = discriminant(_1219)<br/></td></tr><tr><td align="left">switchInt(move _1239)</td></tr></table>>];
    bb548__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">548</td></tr><tr><td align="left" balign="left">StorageLive(_1243)<br/>_1243 = ((_1219 as Continue).0: u128)<br/>_1218 = _1243<br/>StorageDead(_1243)<br/></td></tr><tr><td align="left">_1217 = &lt;u128 as SafeMath&gt;::safe_div(move _1218, const _)</td></tr></table>>];
    bb549__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">549</td></tr><tr><td align="left" balign="left">StorageLive(_1240)<br/>_1240 = ((_1219 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1242)<br/>_1242 = _1240<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1242)</td></tr></table>>];
    bb550__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">550</td></tr><tr><td align="left" balign="left">StorageDead(_1242)<br/>StorageDead(_1240)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb551__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">551</td></tr><tr><td align="left" balign="left">StorageDead(_1218)<br/></td></tr><tr><td align="left">_1216 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _1217)</td></tr></table>>];
    bb552__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">552</td></tr><tr><td align="left" balign="left">StorageDead(_1217)<br/>_1244 = discriminant(_1216)<br/></td></tr><tr><td align="left">switchInt(move _1244)</td></tr></table>>];
    bb553__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">553</td></tr><tr><td align="left" balign="left">StorageLive(_1248)<br/>_1248 = ((_1216 as Continue).0: u128)<br/>_1215 = _1248<br/>StorageDead(_1248)<br/></td></tr><tr><td align="left">_1214 = &lt;u128 as Cast&gt;::cast::&lt;i64&gt;(move _1215)</td></tr></table>>];
    bb554__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">554</td></tr><tr><td align="left" balign="left">StorageLive(_1245)<br/>_1245 = ((_1216 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1247)<br/>_1247 = _1245<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1247)</td></tr></table>>];
    bb555__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">555</td></tr><tr><td align="left" balign="left">StorageDead(_1247)<br/>StorageDead(_1245)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb556__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">556</td></tr><tr><td align="left" balign="left">StorageDead(_1215)<br/></td></tr><tr><td align="left">_1213 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _1214)</td></tr></table>>];
    bb557__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">557</td></tr><tr><td align="left" balign="left">StorageDead(_1214)<br/>_1249 = discriminant(_1213)<br/></td></tr><tr><td align="left">switchInt(move _1249)</td></tr></table>>];
    bb558__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">558</td></tr><tr><td align="left" balign="left">StorageLive(_1253)<br/>_1253 = ((_1213 as Continue).0: i64)<br/>_1212 = _1253<br/>StorageDead(_1253)<br/>_1254 = Eq(_1212, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _1254, &quot;attempt to negate `{}`, which would overflow&quot;, _1212)</td></tr></table>>];
    bb559__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">559</td></tr><tr><td align="left" balign="left">StorageLive(_1250)<br/>_1250 = ((_1213 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1252)<br/>_1252 = _1250<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1252)</td></tr></table>>];
    bb560__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">560</td></tr><tr><td align="left" balign="left">StorageDead(_1252)<br/>StorageDead(_1250)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb561__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">561</td></tr><tr><td align="left" balign="left">_1211 = Neg(move _1212)<br/>StorageDead(_1212)<br/>StorageDead(_1231)<br/>StorageDead(_1222)<br/>StorageDead(_1219)<br/>StorageDead(_1216)<br/>StorageDead(_1213)<br/>StorageLive(_1255)<br/>StorageLive(_1256)<br/>StorageLive(_1257)<br/>StorageLive(_1258)<br/>StorageLive(_1259)<br/>_1259 = &amp;(*_10)<br/>StorageLive(_1260)<br/>StorageLive(_1261)<br/>_1261 = &amp;_1<br/>_1260 = &amp;(*_1261)<br/></td></tr><tr><td align="left">_1258 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _1259, move _1260)</td></tr></table>>];
    bb562__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">562</td></tr><tr><td align="left" balign="left">StorageDead(_1260)<br/>StorageDead(_1259)<br/></td></tr><tr><td align="left">_1257 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _1258)</td></tr></table>>];
    bb563__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">563</td></tr><tr><td align="left" balign="left">StorageDead(_1258)<br/>_1262 = discriminant(_1257)<br/></td></tr><tr><td align="left">switchInt(move _1262)</td></tr></table>>];
    bb564__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">564</td></tr><tr><td align="left" balign="left">StorageLive(_1266)<br/>_1266 = move ((_1257 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_1256 = move _1266<br/>StorageDead(_1266)<br/>_1508 = discriminant(_1257)<br/>StorageDead(_1261)<br/>StorageDead(_1257)<br/>StorageLive(_1267)<br/>StorageLive(_1268)<br/>StorageLive(_1269)<br/>StorageLive(_1270)<br/>StorageLive(_1271)<br/>StorageLive(_1272)<br/>_1272 = &amp;mut _1165<br/></td></tr><tr><td align="left">_1271 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1272)</td></tr></table>>];
    bb565__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">565</td></tr><tr><td align="left" balign="left">StorageLive(_1263)<br/>_1263 = ((_1257 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1265)<br/>_1265 = _1263<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1265)</td></tr></table>>];
    bb566__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">566</td></tr><tr><td align="left" balign="left">StorageDead(_1265)<br/>StorageDead(_1263)<br/>_1506 = discriminant(_1257)<br/>StorageDead(_1261)<br/>StorageDead(_1257)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb567__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">567</td></tr><tr><td align="left" balign="left">_1270 = &amp;mut (*_1271)<br/>StorageDead(_1272)<br/>StorageLive(_1273)<br/>_1273 = _1<br/></td></tr><tr><td align="left">_1269 = User::get_perp_position_mut(move _1270, move _1273)</td></tr></table>>];
    bb568__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">568</td></tr><tr><td align="left" balign="left">StorageDead(_1273)<br/>StorageDead(_1270)<br/></td></tr><tr><td align="left">_1268 = &lt;std::result::Result&lt;&amp;mut PerpPosition, error::ErrorCode&gt; as Try&gt;::branch(move _1269)</td></tr></table>>];
    bb569__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">569</td></tr><tr><td align="left" balign="left">StorageDead(_1269)<br/>_1274 = discriminant(_1268)<br/></td></tr><tr><td align="left">switchInt(move _1274)</td></tr></table>>];
    bb570__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">570</td></tr><tr><td align="left" balign="left">StorageLive(_1278)<br/>_1278 = move ((_1268 as Continue).0: &amp;mut state::user::PerpPosition)<br/>_1267 = move _1278<br/>StorageDead(_1278)<br/>StorageDead(_1271)<br/>StorageDead(_1268)<br/>StorageLive(_1279)<br/>StorageLive(_1280)<br/>StorageLive(_1281)<br/>StorageLive(_1282)<br/>_1282 = &amp;mut (*_1267)<br/>StorageLive(_1283)<br/>StorageLive(_1284)<br/>StorageLive(_1285)<br/>StorageLive(_1286)<br/>_1286 = &amp;mut _1256<br/>_1285 = &amp;mut (*_1286)<br/></td></tr><tr><td align="left">_1284 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _1285)</td></tr></table>>];
    bb571__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">571</td></tr><tr><td align="left" balign="left">StorageLive(_1275)<br/>_1275 = ((_1268 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1277)<br/>_1277 = _1275<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1277)</td></tr></table>>];
    bb572__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">572</td></tr><tr><td align="left" balign="left">StorageDead(_1277)<br/>StorageDead(_1275)<br/>StorageDead(_1271)<br/>StorageDead(_1268)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb573__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">573</td></tr><tr><td align="left" balign="left">_1283 = &amp;mut (*_1284)<br/>StorageDead(_1285)<br/>StorageLive(_1287)<br/>_1287 = _1211<br/></td></tr><tr><td align="left">_1281 = update_quote_asset_and_break_even_amount(move _1282, move _1283, move _1287)</td></tr></table>>];
    bb574__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">574</td></tr><tr><td align="left" balign="left">StorageDead(_1287)<br/>StorageDead(_1283)<br/>StorageDead(_1282)<br/></td></tr><tr><td align="left">_1280 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1281)</td></tr></table>>];
    bb575__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">575</td></tr><tr><td align="left" balign="left">StorageDead(_1281)<br/>_1288 = discriminant(_1280)<br/></td></tr><tr><td align="left">switchInt(move _1288)</td></tr></table>>];
    bb576__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">576</td></tr><tr><td align="left" balign="left">StorageLive(_1292)<br/>_1292 = ((_1280 as Continue).0: ())<br/>_1279 = _1292<br/>StorageDead(_1292)<br/>StorageDead(_1286)<br/>StorageDead(_1284)<br/>StorageDead(_1280)<br/>StorageDead(_1279)<br/>StorageLive(_1293)<br/>StorageLive(_1294)<br/>StorageLive(_1295)<br/>StorageLive(_1296)<br/>StorageLive(_1297)<br/>StorageLive(_1298)<br/>_1298 = &amp;_1256<br/></td></tr><tr><td align="left">_1297 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _1298)</td></tr></table>>];
    bb577__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">577</td></tr><tr><td align="left" balign="left">StorageLive(_1289)<br/>_1289 = ((_1280 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1291)<br/>_1291 = _1289<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1291)</td></tr></table>>];
    bb578__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">578</td></tr><tr><td align="left" balign="left">StorageDead(_1291)<br/>StorageDead(_1289)<br/>StorageDead(_1286)<br/>StorageDead(_1284)<br/>StorageDead(_1280)<br/>StorageDead(_1279)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb579__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">579</td></tr><tr><td align="left" balign="left">StorageDead(_1298)<br/>_1296 = (((*_1297).1: state::perp_market::AMM).33: u128)<br/>StorageLive(_1299)<br/>StorageLive(_1300)<br/>StorageLive(_1301)<br/>StorageLive(_1302)<br/>StorageLive(_1303)<br/>_1303 = _1211<br/></td></tr><tr><td align="left">_1302 = core::num::&lt;impl i64&gt;::unsigned_abs(move _1303)</td></tr></table>>];
    bb580__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">580</td></tr><tr><td align="left" balign="left">StorageDead(_1303)<br/></td></tr><tr><td align="left">_1301 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _1302)</td></tr></table>>];
    bb581__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">581</td></tr><tr><td align="left" balign="left">StorageDead(_1302)<br/></td></tr><tr><td align="left">_1300 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _1301)</td></tr></table>>];
    bb582__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">582</td></tr><tr><td align="left" balign="left">StorageDead(_1301)<br/>_1304 = discriminant(_1300)<br/></td></tr><tr><td align="left">switchInt(move _1304)</td></tr></table>>];
    bb583__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">583</td></tr><tr><td align="left" balign="left">StorageLive(_1308)<br/>_1308 = ((_1300 as Continue).0: u128)<br/>_1299 = _1308<br/>StorageDead(_1308)<br/></td></tr><tr><td align="left">_1295 = &lt;u128 as SafeMath&gt;::safe_add(move _1296, move _1299)</td></tr></table>>];
    bb584__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">584</td></tr><tr><td align="left" balign="left">StorageLive(_1305)<br/>_1305 = ((_1300 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1307)<br/>_1307 = _1305<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1307)</td></tr></table>>];
    bb585__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">585</td></tr><tr><td align="left" balign="left">StorageDead(_1307)<br/>StorageDead(_1305)<br/>StorageDead(_1299)<br/>StorageDead(_1296)<br/>StorageDead(_1295)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb586__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">586</td></tr><tr><td align="left" balign="left">StorageDead(_1299)<br/>StorageDead(_1296)<br/></td></tr><tr><td align="left">_1294 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _1295)</td></tr></table>>];
    bb587__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">587</td></tr><tr><td align="left" balign="left">StorageDead(_1295)<br/>_1309 = discriminant(_1294)<br/></td></tr><tr><td align="left">switchInt(move _1309)</td></tr></table>>];
    bb588__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">588</td></tr><tr><td align="left" balign="left">StorageLive(_1313)<br/>_1313 = ((_1294 as Continue).0: u128)<br/>_1293 = _1313<br/>StorageDead(_1313)<br/>StorageLive(_1314)<br/>StorageLive(_1315)<br/>_1315 = &amp;mut _1256<br/></td></tr><tr><td align="left">_1314 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _1315)</td></tr></table>>];
    bb589__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">589</td></tr><tr><td align="left" balign="left">StorageLive(_1310)<br/>_1310 = ((_1294 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1312)<br/>_1312 = _1310<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1312)</td></tr></table>>];
    bb590__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">590</td></tr><tr><td align="left" balign="left">StorageDead(_1312)<br/>StorageDead(_1310)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb591__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">591</td></tr><tr><td align="left" balign="left">StorageDead(_1315)<br/>(((*_1314).1: state::perp_market::AMM).33: u128) = move _1293<br/>StorageDead(_1293)<br/>StorageDead(_1314)<br/>StorageDead(_1300)<br/>StorageDead(_1297)<br/>StorageDead(_1294)<br/>_1255 = const ()<br/>StorageDead(_1267)<br/></td></tr><tr><td align="left">drop(_1256)</td></tr></table>>];
    bb592__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">592</td></tr><tr><td align="left" balign="left">StorageDead(_1256)<br/>StorageDead(_1255)<br/>StorageLive(_1318)<br/>StorageLive(_1319)<br/>StorageLive(_1320)<br/>StorageLive(_1321)<br/>StorageLive(_1322)<br/>StorageLive(_1323)<br/>StorageLive(_1324)<br/>_1324 = &amp;_1165<br/>_1323 = &amp;(*_1324)<br/></td></tr><tr><td align="left">_1322 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _1323)</td></tr></table>>];
    bb593__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">593</td></tr><tr><td align="left" balign="left">_1321 = &amp;(*_1322)<br/>StorageDead(_1323)<br/>StorageLive(_1325)<br/>_1325 = &amp;(*_10)<br/>StorageLive(_1326)<br/>_1326 = &amp;(*_11)<br/>StorageLive(_1327)<br/>_1327 = &amp;mut (*_12)<br/>StorageLive(_1328)<br/>_1328 = _39<br/>StorageLive(_1329)<br/>_1329 = _822<br/></td></tr><tr><td align="left">_1320 = calculate_margin_freed(move _1321, move _1325, move _1326, move _1327, move _1328, move _1329)</td></tr></table>>];
    bb594__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">594</td></tr><tr><td align="left" balign="left">StorageDead(_1329)<br/>StorageDead(_1328)<br/>StorageDead(_1327)<br/>StorageDead(_1326)<br/>StorageDead(_1325)<br/>StorageDead(_1321)<br/></td></tr><tr><td align="left">_1319 = &lt;std::result::Result&lt;(u64, MarginCalculation), error::ErrorCode&gt; as Try&gt;::branch(move _1320)</td></tr></table>>];
    bb595__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">595</td></tr><tr><td align="left" balign="left">StorageDead(_1320)<br/>_1330 = discriminant(_1319)<br/></td></tr><tr><td align="left">switchInt(move _1330)</td></tr></table>>];
    bb596__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">596</td></tr><tr><td align="left" balign="left">StorageLive(_1334)<br/>_1334 = ((_1319 as Continue).0: (u64, state::margin_calculation::MarginCalculation))<br/>_1318 = _1334<br/>StorageDead(_1334)<br/>StorageLive(_1316)<br/>_1316 = (_1318.0: u64)<br/>StorageLive(_1317)<br/>_1317 = (_1318.1: state::margin_calculation::MarginCalculation)<br/>StorageDead(_1324)<br/>StorageDead(_1322)<br/>StorageDead(_1319)<br/>StorageDead(_1318)<br/>StorageLive(_1335)<br/>StorageLive(_1336)<br/>StorageLive(_1337)<br/>StorageLive(_1338)<br/>_1338 = _415<br/>StorageLive(_1339)<br/>_1339 = _1316<br/></td></tr><tr><td align="left">_1337 = &lt;u64 as SafeMath&gt;::safe_add(move _1338, move _1339)</td></tr></table>>];
    bb597__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">597</td></tr><tr><td align="left" balign="left">StorageLive(_1331)<br/>_1331 = ((_1319 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1333)<br/>_1333 = _1331<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1333)</td></tr></table>>];
    bb598__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">598</td></tr><tr><td align="left" balign="left">StorageDead(_1333)<br/>StorageDead(_1331)<br/>StorageDead(_1324)<br/>StorageDead(_1322)<br/>StorageDead(_1319)<br/>StorageDead(_1318)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb599__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">599</td></tr><tr><td align="left" balign="left">StorageDead(_1339)<br/>StorageDead(_1338)<br/></td></tr><tr><td align="left">_1336 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1337)</td></tr></table>>];
    bb600__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">600</td></tr><tr><td align="left" balign="left">StorageDead(_1337)<br/>_1340 = discriminant(_1336)<br/></td></tr><tr><td align="left">switchInt(move _1340)</td></tr></table>>];
    bb601__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">601</td></tr><tr><td align="left" balign="left">StorageLive(_1344)<br/>_1344 = ((_1336 as Continue).0: u64)<br/>_1335 = _1344<br/>StorageDead(_1344)<br/>_415 = move _1335<br/>StorageDead(_1335)<br/>StorageDead(_1336)<br/>StorageLive(_1345)<br/>StorageLive(_1346)<br/>StorageLive(_1347)<br/>StorageLive(_1348)<br/>StorageLive(_1349)<br/>StorageLive(_1350)<br/>_1350 = &amp;mut _1165<br/></td></tr><tr><td align="left">_1349 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1350)</td></tr></table>>];
    bb602__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">602</td></tr><tr><td align="left" balign="left">StorageLive(_1341)<br/>_1341 = ((_1336 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1343)<br/>_1343 = _1341<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1343)</td></tr></table>>];
    bb603__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">603</td></tr><tr><td align="left" balign="left">StorageDead(_1343)<br/>StorageDead(_1341)<br/>StorageDead(_1335)<br/>StorageDead(_1336)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb604__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">604</td></tr><tr><td align="left" balign="left">_1348 = &amp;mut (*_1349)<br/>StorageDead(_1350)<br/>StorageLive(_1351)<br/>_1351 = _1316<br/></td></tr><tr><td align="left">_1347 = User::increment_margin_freed(move _1348, move _1351)</td></tr></table>>];
    bb605__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">605</td></tr><tr><td align="left" balign="left">StorageDead(_1351)<br/>StorageDead(_1348)<br/></td></tr><tr><td align="left">_1346 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1347)</td></tr></table>>];
    bb606__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">606</td></tr><tr><td align="left" balign="left">StorageDead(_1347)<br/>_1352 = discriminant(_1346)<br/></td></tr><tr><td align="left">switchInt(move _1352)</td></tr></table>>];
    bb607__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">607</td></tr><tr><td align="left" balign="left">StorageLive(_1356)<br/>_1356 = ((_1346 as Continue).0: ())<br/>_1345 = _1356<br/>StorageDead(_1356)<br/>StorageDead(_1349)<br/>StorageDead(_1346)<br/>StorageDead(_1345)<br/>StorageLive(_1357)<br/>StorageLive(_1358)<br/>StorageLive(_1359)<br/>_1359 = &amp;_1317<br/></td></tr><tr><td align="left">_1358 = MarginCalculation::meets_margin_requirement(move _1359)</td></tr></table>>];
    bb608__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">608</td></tr><tr><td align="left" balign="left">StorageLive(_1353)<br/>_1353 = ((_1346 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1355)<br/>_1355 = _1353<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1355)</td></tr></table>>];
    bb609__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">609</td></tr><tr><td align="left" balign="left">StorageDead(_1355)<br/>StorageDead(_1353)<br/>StorageDead(_1349)<br/>StorageDead(_1346)<br/>StorageDead(_1345)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb610__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">610</td></tr><tr><td align="left">switchInt(move _1358)</td></tr></table>>];
    bb611__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">611</td></tr><tr><td align="left" balign="left">StorageDead(_1359)<br/>StorageLive(_1360)<br/>StorageLive(_1361)<br/>StorageLive(_1362)<br/>StorageLive(_1363)<br/>_1363 = &amp;mut _1165<br/></td></tr><tr><td align="left">_1362 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1363)</td></tr></table>>];
    bb612__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">612</td></tr><tr><td align="left" balign="left">_1361 = &amp;mut (*_1362)<br/>StorageDead(_1363)<br/></td></tr><tr><td align="left">_1360 = User::exit_liquidation(move _1361)</td></tr></table>>];
    bb613__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">613</td></tr><tr><td align="left" balign="left">StorageDead(_1361)<br/>StorageDead(_1362)<br/>StorageDead(_1360)<br/>_1357 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb614__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">614</td></tr><tr><td align="left" balign="left">StorageDead(_1359)<br/>StorageLive(_1364)<br/>StorageLive(_1365)<br/>StorageLive(_1366)<br/>StorageLive(_1367)<br/>StorageLive(_1368)<br/>_1368 = &amp;_1165<br/>_1367 = &amp;(*_1368)<br/></td></tr><tr><td align="left">_1366 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _1367)</td></tr></table>>];
    bb615__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">615</td></tr><tr><td align="left" balign="left">_1365 = &amp;(*_1366)<br/>StorageDead(_1367)<br/></td></tr><tr><td align="left">_1364 = is_user_bankrupt(move _1365)</td></tr></table>>];
    bb616__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">616</td></tr><tr><td align="left">switchInt(move _1364)</td></tr></table>>];
    bb617__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">617</td></tr><tr><td align="left" balign="left">StorageDead(_1368)<br/>StorageDead(_1366)<br/>StorageDead(_1365)<br/>StorageLive(_1369)<br/>StorageLive(_1370)<br/>StorageLive(_1371)<br/>StorageLive(_1372)<br/>_1372 = &amp;mut _1165<br/></td></tr><tr><td align="left">_1371 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1372)</td></tr></table>>];
    bb618__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">618</td></tr><tr><td align="left" balign="left">_1370 = &amp;mut (*_1371)<br/>StorageDead(_1372)<br/></td></tr><tr><td align="left">_1369 = User::enter_bankruptcy(move _1370)</td></tr></table>>];
    bb619__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">619</td></tr><tr><td align="left" balign="left">StorageDead(_1370)<br/>StorageDead(_1371)<br/>StorageDead(_1369)<br/>_1357 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb620__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">620</td></tr><tr><td align="left" balign="left">StorageDead(_1368)<br/>StorageDead(_1366)<br/>StorageDead(_1365)<br/>_1357 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb621__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">621</td></tr><tr><td align="left" balign="left">StorageDead(_1364)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb622__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">622</td></tr><tr><td align="left" balign="left">StorageDead(_1358)<br/>StorageDead(_1357)<br/>StorageLive(_1373)<br/>StorageLive(_1374)<br/>StorageLive(_1375)<br/>StorageLive(_1376)<br/>_1376 = _1141<br/>StorageLive(_1377)<br/>_1377 = _1142<br/>StorageLive(_1378)<br/>_1378 = _1039<br/></td></tr><tr><td align="left">_1375 = math::orders::get_position_delta_for_fill(move _1376, move _1377, move _1378)</td></tr></table>>];
    bb623__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">623</td></tr><tr><td align="left" balign="left">StorageDead(_1378)<br/>StorageDead(_1377)<br/>StorageDead(_1376)<br/></td></tr><tr><td align="left">_1374 = &lt;std::result::Result&lt;PositionDelta, error::ErrorCode&gt; as Try&gt;::branch(move _1375)</td></tr></table>>];
    bb624__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">624</td></tr><tr><td align="left" balign="left">StorageDead(_1375)<br/>_1379 = discriminant(_1374)<br/></td></tr><tr><td align="left">switchInt(move _1379)</td></tr></table>>];
    bb625__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">625</td></tr><tr><td align="left" balign="left">StorageLive(_1383)<br/>_1383 = move ((_1374 as Continue).0: controller::position::PositionDelta)<br/>_1373 = move _1383<br/>StorageDead(_1383)<br/>StorageDead(_1374)<br/>StorageLive(_1384)<br/>StorageLive(_1385)<br/>StorageLive(_1386)<br/>StorageLive(_1387)<br/>StorageLive(_1388)<br/>StorageLive(_1389)<br/>StorageLive(_1390)<br/>StorageLive(_1391)<br/>StorageLive(_1392)<br/>StorageLive(_1393)<br/>StorageLive(_1394)<br/>StorageLive(_1395)<br/>StorageLive(_1396)<br/>StorageLive(_1397)<br/>StorageLive(_1398)<br/>_1398 = _15<br/>StorageLive(_1399)<br/>_1399 = _403<br/>StorageLive(_1400)<br/>_1400 = LiquidationType::LiquidatePerp<br/>StorageLive(_1401)<br/>_1401 = (*_3)<br/>StorageLive(_1402)<br/>_1402 = (*_6)<br/>StorageLive(_1403)<br/>_1403 = (_314.3: u128)<br/>StorageLive(_1404)<br/>_1404 = (_314.1: i128)<br/>StorageLive(_1405)<br/>StorageLive(_1406)<br/>StorageLive(_1407)<br/>StorageLive(_1408)<br/>_1408 = &amp;_1165<br/></td></tr><tr><td align="left">_1407 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _1408)</td></tr></table>>];
    bb626__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">626</td></tr><tr><td align="left" balign="left">StorageLive(_1380)<br/>_1380 = ((_1374 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1382)<br/>_1382 = _1380<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1382)</td></tr></table>>];
    bb627__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">627</td></tr><tr><td align="left" balign="left">StorageDead(_1382)<br/>StorageDead(_1380)<br/>StorageDead(_1374)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb628__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">628</td></tr><tr><td align="left" balign="left">_1406 = &amp;(*_1407)<br/>StorageDead(_1408)<br/></td></tr><tr><td align="left">_1405 = User::is_bankrupt(move _1406)</td></tr></table>>];
    bb629__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">629</td></tr><tr><td align="left" balign="left">StorageDead(_1406)<br/>StorageLive(_1409)<br/>_1451 = const false<br/>_1409 = move _473<br/>StorageLive(_1410)<br/>_1410 = _415<br/>StorageLive(_1411)<br/>StorageLive(_1412)<br/>_1412 = _1<br/>StorageLive(_1413)<br/>_1413 = _557<br/>StorageLive(_1414)<br/>_1414 = (_1373.1: i64)<br/>StorageLive(_1415)<br/>_1415 = (_1373.0: i64)<br/>StorageLive(_1416)<br/>_1416 = _568<br/>StorageLive(_1417)<br/>_1417 = _1095<br/>StorageLive(_1418)<br/>_1418 = _1098<br/>StorageLive(_1419)<br/>StorageLive(_1420)<br/>StorageLive(_1421)<br/>StorageLive(_1422)<br/>StorageLive(_1423)<br/>_1423 = _1211<br/></td></tr><tr><td align="left">_1422 = core::num::&lt;impl i64&gt;::abs(move _1423)</td></tr></table>>];
    bb630__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">630</td></tr><tr><td align="left" balign="left">StorageDead(_1423)<br/></td></tr><tr><td align="left">_1421 = &lt;i64 as Cast&gt;::cast::&lt;u64&gt;(move _1422)</td></tr></table>>];
    bb631__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">631</td></tr><tr><td align="left" balign="left">StorageDead(_1422)<br/></td></tr><tr><td align="left">_1420 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1421)</td></tr></table>>];
    bb632__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">632</td></tr><tr><td align="left" balign="left">StorageDead(_1421)<br/>_1424 = discriminant(_1420)<br/></td></tr><tr><td align="left">switchInt(move _1424)</td></tr></table>>];
    bb633__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">633</td></tr><tr><td align="left" balign="left">StorageLive(_1428)<br/>_1428 = ((_1420 as Continue).0: u64)<br/>_1419 = _1428<br/>StorageDead(_1428)<br/>_1411 = LiquidatePerpRecord { market_index: move _1412, oracle_price: move _1413, base_asset_amount: move _1414, quote_asset_amount: move _1415, lp_shares: move _1416, fill_record_id: move _1418, user_order_id: move _1417, liquidator_order_id: const 0_u32, liquidator_fee: const 0_u64, if_fee: move _1419 }<br/>StorageDead(_1419)<br/>StorageDead(_1418)<br/>StorageDead(_1417)<br/>StorageDead(_1416)<br/>StorageDead(_1415)<br/>StorageDead(_1414)<br/>StorageDead(_1413)<br/>StorageDead(_1412)<br/>StorageLive(_1429)<br/></td></tr><tr><td align="left">_1429 = &lt;LiquidationRecord as Default&gt;::default()</td></tr></table>>];
    bb634__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">634</td></tr><tr><td align="left" balign="left">StorageLive(_1425)<br/>_1425 = ((_1420 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1427)<br/>_1427 = _1425<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1427)</td></tr></table>>];
    bb635__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">635</td></tr><tr><td align="left" balign="left">StorageDead(_1427)<br/>StorageDead(_1425)<br/>StorageDead(_1419)<br/>StorageDead(_1418)<br/>StorageDead(_1417)<br/>StorageDead(_1416)<br/>StorageDead(_1415)<br/>StorageDead(_1414)<br/>StorageDead(_1413)<br/>StorageDead(_1412)<br/>StorageDead(_1411)<br/>StorageDead(_1410)<br/></td></tr><tr><td align="left">drop(_1409)</td></tr></table>>];
    bb636__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">636</td></tr><tr><td align="left" balign="left">_1397 = LiquidationRecord { ts: move _1398, liquidation_type: move _1400, user: move _1401, liquidator: move _1402, margin_requirement: move _1403, total_collateral: move _1404, margin_freed: move _1410, liquidation_id: move _1399, bankrupt: move _1405, canceled_order_ids: move _1409, liquidate_perp: move _1411, liquidate_spot: move (_1429.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move (_1429.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move (_1429.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_1429.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_1429.15: state::events::SpotBankruptcyRecord) }<br/>StorageDead(_1411)<br/>StorageDead(_1410)<br/>StorageDead(_1409)<br/>StorageDead(_1405)<br/>StorageDead(_1404)<br/>StorageDead(_1403)<br/>StorageDead(_1402)<br/>StorageDead(_1401)<br/>StorageDead(_1400)<br/>StorageDead(_1399)<br/>StorageDead(_1398)<br/>_1396 = &amp;_1397<br/>_1395 = &amp;(*_1396)<br/></td></tr><tr><td align="left">_1394 = &lt;LiquidationRecord as anchor_lang::Event&gt;::data(move _1395)</td></tr></table>>];
    bb637__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">637</td></tr><tr><td align="left" balign="left">StorageDead(_1395)<br/>_1393 = &amp;_1394<br/>_1392 = &amp;(*_1393)<br/></td></tr><tr><td align="left">_1391 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _1392)</td></tr></table>>];
    bb638__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">638</td></tr><tr><td align="left" balign="left">_1390 = &amp;(*_1391)<br/>StorageDead(_1392)<br/>_1389 = [move _1390]<br/>StorageDead(_1390)<br/>_1388 = &amp;_1389<br/>_1387 = &amp;(*_1388)<br/>_1386 = move _1387 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_1387)<br/></td></tr><tr><td align="left">_1385 = solana_program::log::sol_log_data(move _1386)</td></tr></table>>];
    bb639__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">639</td></tr><tr><td align="left" balign="left">StorageDead(_1386)<br/></td></tr><tr><td align="left">drop(_1394)</td></tr></table>>];
    bb640__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">640</td></tr><tr><td align="left">drop(_1397)</td></tr></table>>];
    bb641__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">641</td></tr><tr><td align="left">drop(_1429)</td></tr></table>>];
    bb642__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">642</td></tr><tr><td align="left" balign="left">StorageDead(_1429)<br/>StorageDead(_1420)<br/>StorageDead(_1407)<br/>StorageDead(_1397)<br/>StorageDead(_1396)<br/>StorageDead(_1394)<br/>StorageDead(_1393)<br/>StorageDead(_1391)<br/>StorageDead(_1389)<br/>StorageDead(_1388)<br/>StorageDead(_1385)<br/>_1384 = const ()<br/>StorageDead(_1384)<br/>StorageLive(_1430)<br/>_1430 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _1430)<br/>StorageDead(_1430)<br/>StorageDead(_1373)<br/>StorageDead(_1317)<br/>StorageDead(_1316)<br/>StorageDead(_1211)<br/></td></tr><tr><td align="left">drop(_1165)</td></tr></table>>];
    bb643__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">643</td></tr><tr><td align="left" balign="left">StorageDead(_1165)<br/>StorageDead(_1142)<br/>StorageDead(_1141)<br/>StorageDead(_1098)<br/>StorageDead(_1095)<br/>StorageDead(_1082)<br/>StorageDead(_1068)<br/>StorageDead(_1046)<br/>StorageDead(_1039)<br/>StorageDead(_1016)<br/>StorageDead(_1011)<br/>StorageDead(_1006)<br/>StorageDead(_980)<br/>StorageDead(_945)<br/>StorageDead(_929)<br/>StorageDead(_900)<br/>StorageDead(_874)<br/>StorageDead(_871)<br/>StorageDead(_855)<br/>_1446 = const false<br/>StorageDead(_842)<br/>_1447 = const false<br/>StorageDead(_831)<br/>StorageDead(_822)<br/>StorageDead(_812)<br/>StorageDead(_775)<br/>StorageDead(_768)<br/>StorageDead(_704)<br/>StorageDead(_569)<br/>StorageDead(_568)<br/>StorageDead(_557)<br/>StorageDead(_523)<br/>StorageDead(_508)<br/>_1450 = const false<br/>StorageDead(_497)<br/>_1451 = const false<br/>StorageDead(_473)<br/>StorageDead(_416)<br/>StorageDead(_415)<br/>StorageDead(_403)<br/>StorageDead(_314)<br/>_1454 = const false<br/>StorageDead(_191)<br/>StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>_1455 = const false<br/>StorageDead(_28)<br/>_1456 = const false<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb644__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">644</td></tr><tr><td align="left" balign="left">StorageDead(_1409)<br/>StorageDead(_1405)<br/>StorageDead(_1404)<br/>StorageDead(_1403)<br/>StorageDead(_1402)<br/>StorageDead(_1401)<br/>StorageDead(_1400)<br/>StorageDead(_1399)<br/>StorageDead(_1398)<br/>StorageDead(_1395)<br/>StorageDead(_1392)<br/>StorageDead(_1390)<br/>StorageDead(_1387)<br/>StorageDead(_1386)<br/>StorageDead(_1420)<br/>StorageDead(_1407)<br/>StorageDead(_1397)<br/>StorageDead(_1396)<br/>StorageDead(_1394)<br/>StorageDead(_1393)<br/>StorageDead(_1391)<br/>StorageDead(_1389)<br/>StorageDead(_1388)<br/>StorageDead(_1385)<br/>StorageDead(_1384)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb645__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">645</td></tr><tr><td align="left" balign="left">StorageDead(_1373)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb646__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">646</td></tr><tr><td align="left" balign="left">StorageDead(_1317)<br/>StorageDead(_1316)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb647__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">647</td></tr><tr><td align="left" balign="left">StorageDead(_1293)<br/>StorageDead(_1300)<br/>StorageDead(_1297)<br/>StorageDead(_1294)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb648__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">648</td></tr><tr><td align="left" balign="left">StorageDead(_1267)<br/></td></tr><tr><td align="left">drop(_1256)</td></tr></table>>];
    bb649__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">649</td></tr><tr><td align="left" balign="left">StorageDead(_1256)<br/>StorageDead(_1255)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb650__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">650</td></tr><tr><td align="left" balign="left">StorageDead(_1218)<br/>StorageDead(_1217)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb651__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">651</td></tr><tr><td align="left" balign="left">StorageDead(_1215)<br/>StorageDead(_1214)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb652__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">652</td></tr><tr><td align="left" balign="left">StorageDead(_1212)<br/>StorageDead(_1231)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb653__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">653</td></tr><tr><td align="left" balign="left">StorageDead(_1222)<br/>StorageDead(_1219)<br/>StorageDead(_1216)<br/>StorageDead(_1213)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb654__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">654</td></tr><tr><td align="left" balign="left">StorageDead(_1211)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb655__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">655</td></tr><tr><td align="left">drop(_1165)</td></tr></table>>];
    bb656__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">656</td></tr><tr><td align="left" balign="left">StorageDead(_1165)<br/>StorageDead(_1142)<br/>StorageDead(_1141)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb657__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">657</td></tr><tr><td align="left" balign="left">StorageDead(_1098)<br/>StorageDead(_1095)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb658__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">658</td></tr><tr><td align="left" balign="left">StorageDead(_1082)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb659__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">659</td></tr><tr><td align="left" balign="left">StorageDead(_1068)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb660__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">660</td></tr><tr><td align="left" balign="left">StorageDead(_1046)<br/>StorageDead(_1039)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb661__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">661</td></tr><tr><td align="left" balign="left">StorageDead(_1016)<br/>StorageDead(_1011)<br/>StorageDead(_1006)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb662__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">662</td></tr><tr><td align="left" balign="left">StorageDead(_983)<br/>StorageDead(_982)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb663__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">663</td></tr><tr><td align="left" balign="left">StorageDead(_987)<br/>StorageDead(_984)<br/>StorageDead(_981)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb664__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">664</td></tr><tr><td align="left" balign="left">StorageDead(_980)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb665__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">665</td></tr><tr><td align="left" balign="left">StorageDead(_948)<br/>StorageDead(_947)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb666__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">666</td></tr><tr><td align="left" balign="left">StorageDead(_953)<br/>StorageDead(_949)<br/>StorageDead(_946)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb667__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">667</td></tr><tr><td align="left" balign="left">StorageDead(_945)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb668__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">668</td></tr><tr><td align="left" balign="left">StorageDead(_929)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb669__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">669</td></tr><tr><td align="left" balign="left">StorageDead(_904)<br/>StorageDead(_901)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb670__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">670</td></tr><tr><td align="left" balign="left">StorageDead(_900)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb671__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">671</td></tr><tr><td align="left" balign="left">StorageDead(_878)<br/>StorageDead(_875)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb672__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">672</td></tr><tr><td align="left" balign="left">StorageDead(_874)<br/>StorageDead(_871)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb673__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">673</td></tr><tr><td align="left" balign="left">StorageDead(_855)<br/></td></tr><tr><td align="left">switchInt(_1446)</td></tr></table>>];
    bb674__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">674</td></tr><tr><td align="left" balign="left">_1446 = const false<br/>StorageDead(_842)<br/></td></tr><tr><td align="left">switchInt(_1447)</td></tr></table>>];
    bb675__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">675</td></tr><tr><td align="left" balign="left">_1447 = const false<br/>StorageDead(_831)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb676__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">676</td></tr><tr><td align="left" balign="left">StorageDead(_822)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb677__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">677</td></tr><tr><td align="left" balign="left">StorageDead(_812)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb678__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">678</td></tr><tr><td align="left" balign="left">StorageDead(_793)<br/></td></tr><tr><td align="left">drop(_781)</td></tr></table>>];
    bb679__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">679</td></tr><tr><td align="left" balign="left">StorageDead(_775)<br/>StorageDead(_768)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb680__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">680</td></tr><tr><td align="left" balign="left">StorageDead(_723)<br/></td></tr><tr><td align="left">drop(_711)</td></tr></table>>];
    bb681__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">681</td></tr><tr><td align="left" balign="left">StorageDead(_704)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb682__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">682</td></tr><tr><td align="left" balign="left">StorageDead(_643)<br/>StorageDead(_642)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb683__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">683</td></tr><tr><td align="left" balign="left">StorageDead(_610)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb684__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">684</td></tr><tr><td align="left" balign="left">StorageDead(_601)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb685__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">685</td></tr><tr><td align="left" balign="left">StorageDead(_585)<br/>StorageDead(_580)<br/>StorageDead(_578)<br/>StorageDead(_575)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb686__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">686</td></tr><tr><td align="left" balign="left">StorageDead(_574)<br/>StorageDead(_572)<br/>StorageDead(_570)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb687__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">687</td></tr><tr><td align="left" balign="left">StorageDead(_569)<br/>StorageDead(_568)<br/>StorageDead(_557)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb688__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">688</td></tr><tr><td align="left" balign="left">StorageDead(_523)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb689__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">689</td></tr><tr><td align="left" balign="left">StorageDead(_508)<br/></td></tr><tr><td align="left">switchInt(_1450)</td></tr></table>>];
    bb690__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">690</td></tr><tr><td align="left" balign="left">_1450 = const false<br/>StorageDead(_497)<br/></td></tr><tr><td align="left">switchInt(_1451)</td></tr></table>>];
    bb691__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">691</td></tr><tr><td align="left" balign="left">_1451 = const false<br/>StorageDead(_473)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb692__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">692</td></tr><tr><td align="left" balign="left">StorageDead(_416)<br/>StorageDead(_415)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb693__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">693</td></tr><tr><td align="left" balign="left">StorageDead(_403)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb694__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">694</td></tr><tr><td align="left" balign="left">StorageDead(_373)<br/>StorageDead(_369)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb695__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">695</td></tr><tr><td align="left" balign="left">StorageDead(_346)<br/>StorageDead(_342)<br/>StorageDead(_341)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb696__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">696</td></tr><tr><td align="left" balign="left">StorageDead(_325)<br/>StorageDead(_320)<br/>StorageDead(_318)<br/>StorageDead(_315)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb697__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">697</td></tr><tr><td align="left" balign="left">StorageDead(_314)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb698__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">698</td></tr><tr><td align="left" balign="left">_1454 = const false<br/>StorageDead(_191)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb699__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">699</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">switchInt(_1455)</td></tr></table>>];
    bb700__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">700</td></tr><tr><td align="left" balign="left">_1455 = const false<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">switchInt(_1456)</td></tr></table>>];
    bb701__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">701</td></tr><tr><td align="left" balign="left">_1456 = const false<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb702__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">702</td></tr><tr><td align="left">return</td></tr></table>>];
    bb703__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">703 (cleanup)</td></tr><tr><td align="left">drop(_1394)</td></tr></table>>];
    bb704__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">704 (cleanup)</td></tr><tr><td align="left">drop(_1397)</td></tr></table>>];
    bb705__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">705 (cleanup)</td></tr><tr><td align="left">drop(_1429)</td></tr></table>>];
    bb706__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">706 (cleanup)</td></tr><tr><td align="left">drop(_1409)</td></tr></table>>];
    bb707__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">707 (cleanup)</td></tr><tr><td align="left">drop(_1256)</td></tr></table>>];
    bb708__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">708 (cleanup)</td></tr><tr><td align="left">drop(_1165)</td></tr></table>>];
    bb709__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">709 (cleanup)</td></tr><tr><td align="left">drop(_1101)</td></tr></table>>];
    bb710__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">710 (cleanup)</td></tr><tr><td align="left">drop(_1052)</td></tr></table>>];
    bb711__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">711 (cleanup)</td></tr><tr><td align="left">drop(_1023)</td></tr></table>>];
    bb712__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">712 (cleanup)</td></tr><tr><td align="left">drop(_781)</td></tr></table>>];
    bb713__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">713 (cleanup)</td></tr><tr><td align="left">drop(_748)</td></tr></table>>];
    bb714__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">714 (cleanup)</td></tr><tr><td align="left">drop(_711)</td></tr></table>>];
    bb715__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">715 (cleanup)</td></tr><tr><td align="left">drop(_663)</td></tr></table>>];
    bb716__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">716 (cleanup)</td></tr><tr><td align="left">drop(_666)</td></tr></table>>];
    bb717__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">717 (cleanup)</td></tr><tr><td align="left">drop(_685)</td></tr></table>>];
    bb718__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">718 (cleanup)</td></tr><tr><td align="left">drop(_678)</td></tr></table>>];
    bb719__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">719 (cleanup)</td></tr><tr><td align="left">drop(_453)</td></tr></table>>];
    bb720__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">720 (cleanup)</td></tr><tr><td align="left">drop(_354)</td></tr></table>>];
    bb721__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">721 (cleanup)</td></tr><tr><td align="left">drop(_297)</td></tr></table>>];
    bb722__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">722 (cleanup)</td></tr><tr><td align="left">drop(_269)</td></tr></table>>];
    bb723__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">723 (cleanup)</td></tr><tr><td align="left">drop(_236)</td></tr></table>>];
    bb724__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">724 (cleanup)</td></tr><tr><td align="left">drop(_217)</td></tr></table>>];
    bb725__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">725 (cleanup)</td></tr><tr><td align="left">drop(_178)</td></tr></table>>];
    bb726__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">726 (cleanup)</td></tr><tr><td align="left">drop(_159)</td></tr></table>>];
    bb727__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">727 (cleanup)</td></tr><tr><td align="left">drop(_123)</td></tr></table>>];
    bb728__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">728 (cleanup)</td></tr><tr><td align="left">drop(_104)</td></tr></table>>];
    bb729__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">729 (cleanup)</td></tr><tr><td align="left">drop(_77)</td></tr></table>>];
    bb730__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">730 (cleanup)</td></tr><tr><td align="left">drop(_58)</td></tr></table>>];
    bb731__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">731 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb732__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">732</td></tr><tr><td align="left" balign="left">_1470 = discriminant(_270)<br/>StorageDead(_274)<br/>_1453 = const false<br/>StorageDead(_270)<br/>StorageDead(_269)<br/>StorageDead(_267)<br/>StorageDead(_264)<br/>StorageDead(_262)<br/>StorageDead(_259)<br/>StorageDead(_258)<br/>StorageLive(_286)<br/>StorageLive(_287)<br/>StorageLive(_288)<br/>StorageLive(_289)<br/>StorageLive(_290)<br/>StorageLive(_291)<br/>StorageLive(_292)<br/>_292 = &amp;mut _28<br/>_291 = &amp;mut (*_292)<br/></td></tr><tr><td align="left">_290 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _291)</td></tr></table>>];
    bb733__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">733</td></tr><tr><td align="left" balign="left">_1472 = discriminant(_298)<br/>StorageDead(_302)<br/>_1452 = const false<br/>StorageDead(_298)<br/>StorageDead(_297)<br/>StorageDead(_295)<br/>StorageDead(_292)<br/>StorageDead(_290)<br/>StorageDead(_287)<br/>StorageDead(_286)<br/>StorageLive(_314)<br/>StorageLive(_315)<br/>StorageLive(_316)<br/>StorageLive(_317)<br/>StorageLive(_318)<br/>StorageLive(_319)<br/>StorageLive(_320)<br/>_320 = &amp;_17<br/>_319 = &amp;(*_320)<br/></td></tr><tr><td align="left">_318 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _319)</td></tr></table>>];
    bb734__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">734</td></tr><tr><td align="left" balign="left">_1482 = discriminant(_712)<br/>StorageDead(_716)<br/>_1449 = const false<br/>StorageDead(_712)<br/>StorageDead(_711)<br/>StorageDead(_709)<br/>StorageDead(_705)<br/>StorageLive(_737)<br/>StorageLive(_738)<br/>StorageLive(_739)<br/>StorageLive(_740)<br/>_740 = _704<br/></td></tr><tr><td align="left">switchInt(move _740)</td></tr></table>>];
    bb735__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">735</td></tr><tr><td align="left" balign="left">_1484 = discriminant(_782)<br/>StorageDead(_786)<br/>_1448 = const false<br/>StorageDead(_782)<br/>StorageDead(_781)<br/>StorageDead(_779)<br/>StorageDead(_776)<br/>StorageLive(_812)<br/>StorageLive(_813)<br/>StorageLive(_814)<br/>StorageLive(_815)<br/>_815 = _775<br/>StorageLive(_816)<br/>_816 = _39<br/></td></tr><tr><td align="left">_814 = &lt;u32 as SafeMath&gt;::safe_add(move _815, move _816)</td></tr></table>>];
    bb736__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">736</td></tr><tr><td align="left" balign="left">_1494 = discriminant(_1024)<br/>StorageDead(_1028)<br/>_1445 = const false<br/>StorageDead(_1024)<br/>StorageDead(_1023)<br/>StorageDead(_1021)<br/>StorageDead(_1017)<br/>StorageLive(_1039)<br/>StorageLive(_1040)<br/>StorageLive(_1041)<br/>StorageLive(_1042)<br/>_1042 = &amp;_17<br/></td></tr><tr><td align="left">_1041 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _1042)</td></tr></table>>];
    bb737__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">737</td></tr><tr><td align="left" balign="left">_1496 = discriminant(_1053)<br/>StorageDead(_1057)<br/>_1444 = const false<br/>StorageDead(_1053)<br/>StorageDead(_1052)<br/>StorageDead(_1050)<br/>StorageDead(_1047)<br/>StorageLive(_1068)<br/>StorageLive(_1069)<br/>StorageLive(_1070)<br/>StorageLive(_1071)<br/>_1071 = _871<br/>StorageLive(_1072)<br/>_1072 = _1046<br/>StorageLive(_1073)<br/>StorageLive(_1074)<br/>StorageLive(_1075)<br/>_1075 = &amp;_17<br/></td></tr><tr><td align="left">_1074 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _1075)</td></tr></table>>];
    bb738__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">738</td></tr><tr><td align="left" balign="left">_1500 = discriminant(_1102)<br/>StorageDead(_1106)<br/>_1457 = const false<br/>StorageDead(_1102)<br/>StorageDead(_1101)<br/>StorageDead(_1099)<br/>StorageLive(_1112)<br/>StorageLive(_1113)<br/>StorageLive(_1114)<br/>StorageLive(_1115)<br/>_1115 = &amp;(*_14)<br/>StorageLive(_1116)<br/>StorageLive(_1117)<br/>StorageLive(_1118)<br/>StorageLive(_1119)<br/>_1119 = &amp;mut _17<br/>_1118 = &amp;mut (*_1119)<br/></td></tr><tr><td align="left">_1117 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _1118)</td></tr></table>>];
    bb739__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">739</td></tr><tr><td align="left" balign="left">_1510 = discriminant(_1053)<br/>StorageDead(_1057)<br/>_1444 = const false<br/>StorageDead(_1053)<br/>StorageDead(_1052)<br/>StorageDead(_1050)<br/>StorageDead(_1047)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb740__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">740</td></tr><tr><td align="left" balign="left">_1512 = discriminant(_1024)<br/>StorageDead(_1028)<br/>_1445 = const false<br/>StorageDead(_1024)<br/>StorageDead(_1023)<br/>StorageDead(_1021)<br/>StorageDead(_1017)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb741__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">741</td></tr><tr><td align="left">drop(_842)</td></tr></table>>];
    bb742__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">742</td></tr><tr><td align="left">drop(_831)</td></tr></table>>];
    bb743__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">743</td></tr><tr><td align="left" balign="left">_1514 = discriminant(_782)<br/>StorageDead(_786)<br/>_1448 = const false<br/>StorageDead(_782)<br/>StorageDead(_781)<br/>StorageDead(_779)<br/>StorageDead(_776)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb744__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">744</td></tr><tr><td align="left" balign="left">_1516 = discriminant(_712)<br/>StorageDead(_716)<br/>_1449 = const false<br/>StorageDead(_712)<br/>StorageDead(_711)<br/>StorageDead(_709)<br/>StorageDead(_705)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb745__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">745</td></tr><tr><td align="left">drop(_497)</td></tr></table>>];
    bb746__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">746</td></tr><tr><td align="left">drop(_473)</td></tr></table>>];
    bb747__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">747</td></tr><tr><td align="left" balign="left">_1518 = discriminant(_298)<br/>StorageDead(_302)<br/>_1452 = const false<br/>StorageDead(_298)<br/>StorageDead(_297)<br/>StorageDead(_295)<br/>StorageDead(_292)<br/>StorageDead(_290)<br/>StorageDead(_287)<br/>StorageDead(_286)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb748__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">748</td></tr><tr><td align="left" balign="left">_1520 = discriminant(_270)<br/>StorageDead(_274)<br/>_1453 = const false<br/>StorageDead(_270)<br/>StorageDead(_269)<br/>StorageDead(_267)<br/>StorageDead(_264)<br/>StorageDead(_262)<br/>StorageDead(_259)<br/>StorageDead(_258)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb749__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">749</td></tr><tr><td align="left">drop(_191)</td></tr></table>>];
    bb750__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">750</td></tr><tr><td align="left">switchInt(_1454)</td></tr></table>>];
    bb751__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">751</td></tr><tr><td align="left">drop(_28)</td></tr></table>>];
    bb752__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">752</td></tr><tr><td align="left">drop(_17)</td></tr></table>>];
    bb753__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">753 (cleanup)</td></tr><tr><td align="left" balign="left">_1522 = discriminant(_1257)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb754__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">754 (cleanup)</td></tr><tr><td align="left" balign="left">_1523 = discriminant(_1166)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb755__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">755 (cleanup)</td></tr><tr><td align="left" balign="left">_1524 = discriminant(_1102)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb756__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">756 (cleanup)</td></tr><tr><td align="left" balign="left">_1525 = discriminant(_1053)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb757__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">757 (cleanup)</td></tr><tr><td align="left" balign="left">_1526 = discriminant(_1024)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb758__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">758 (cleanup)</td></tr><tr><td align="left">drop(_842)</td></tr></table>>];
    bb759__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">759 (cleanup)</td></tr><tr><td align="left">switchInt(_1446)</td></tr></table>>];
    bb760__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">760 (cleanup)</td></tr><tr><td align="left" balign="left">_1527 = discriminant(_843)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb761__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">761 (cleanup)</td></tr><tr><td align="left">drop(_831)</td></tr></table>>];
    bb762__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">762 (cleanup)</td></tr><tr><td align="left">switchInt(_1447)</td></tr></table>>];
    bb763__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">763 (cleanup)</td></tr><tr><td align="left" balign="left">_1528 = discriminant(_832)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb764__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">764 (cleanup)</td></tr><tr><td align="left" balign="left">_1529 = discriminant(_782)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb765__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">765 (cleanup)</td></tr><tr><td align="left" balign="left">_1530 = discriminant(_712)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb766__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">766 (cleanup)</td></tr><tr><td align="left">drop(_497)</td></tr></table>>];
    bb767__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">767 (cleanup)</td></tr><tr><td align="left">switchInt(_1450)</td></tr></table>>];
    bb768__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">768 (cleanup)</td></tr><tr><td align="left" balign="left">_1531 = discriminant(_498)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb769__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">769 (cleanup)</td></tr><tr><td align="left">drop(_473)</td></tr></table>>];
    bb770__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">770 (cleanup)</td></tr><tr><td align="left">switchInt(_1451)</td></tr></table>>];
    bb771__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">771 (cleanup)</td></tr><tr><td align="left" balign="left">_1532 = discriminant(_474)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb772__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">772 (cleanup)</td></tr><tr><td align="left" balign="left">_1533 = discriminant(_298)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb773__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">773 (cleanup)</td></tr><tr><td align="left" balign="left">_1534 = discriminant(_270)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb774__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">774 (cleanup)</td></tr><tr><td align="left">drop(_191)</td></tr></table>>];
    bb775__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">775 (cleanup)</td></tr><tr><td align="left">switchInt(_1454)</td></tr></table>>];
    bb776__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">776 (cleanup)</td></tr><tr><td align="left" balign="left">_1535 = discriminant(_192)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb777__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">777 (cleanup)</td></tr><tr><td align="left">drop(_28)</td></tr></table>>];
    bb778__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">778 (cleanup)</td></tr><tr><td align="left">switchInt(_1455)</td></tr></table>>];
    bb779__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">779 (cleanup)</td></tr><tr><td align="left" balign="left">_1536 = discriminant(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb780__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">780 (cleanup)</td></tr><tr><td align="left">drop(_17)</td></tr></table>>];
    bb781__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">781 (cleanup)</td></tr><tr><td align="left">switchInt(_1456)</td></tr></table>>];
    bb782__0_332 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">782 (cleanup)</td></tr><tr><td align="left" balign="left">_1537 = discriminant(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_332 -> bb1__0_332 [label="return"];
    bb1__0_332 -> bb2__0_332 [label="return"];
    bb1__0_332 -> bb731__0_332 [label="unwind"];
    bb2__0_332 -> bb3__0_332 [label="return"];
    bb2__0_332 -> bb731__0_332 [label="unwind"];
    bb3__0_332 -> bb4__0_332 [label="0"];
    bb3__0_332 -> bb6__0_332 [label="1"];
    bb3__0_332 -> bb5__0_332 [label="otherwise"];
    bb4__0_332 -> bb8__0_332 [label="return"];
    bb4__0_332 -> bb781__0_332 [label="unwind"];
    bb6__0_332 -> bb7__0_332 [label="return"];
    bb6__0_332 -> bb782__0_332 [label="unwind"];
    bb7__0_332 -> bb701__0_332 [label=""];
    bb8__0_332 -> bb9__0_332 [label="return"];
    bb8__0_332 -> bb781__0_332 [label="unwind"];
    bb9__0_332 -> bb10__0_332 [label="return"];
    bb9__0_332 -> bb781__0_332 [label="unwind"];
    bb10__0_332 -> bb11__0_332 [label="0"];
    bb10__0_332 -> bb12__0_332 [label="1"];
    bb10__0_332 -> bb5__0_332 [label="otherwise"];
    bb11__0_332 -> bb14__0_332 [label="return"];
    bb11__0_332 -> bb778__0_332 [label="unwind"];
    bb12__0_332 -> bb13__0_332 [label="return"];
    bb12__0_332 -> bb779__0_332 [label="unwind"];
    bb13__0_332 -> bb700__0_332 [label=""];
    bb14__0_332 -> bb15__0_332 [label="return"];
    bb14__0_332 -> bb778__0_332 [label="unwind"];
    bb15__0_332 -> bb17__0_332 [label="0"];
    bb15__0_332 -> bb16__0_332 [label="otherwise"];
    bb16__0_332 -> bb18__0_332 [label="return"];
    bb16__0_332 -> bb778__0_332 [label="unwind"];
    bb17__0_332 -> bb29__0_332 [label=""];
    bb18__0_332 -> bb19__0_332 [label="return"];
    bb18__0_332 -> bb778__0_332 [label="unwind"];
    bb19__0_332 -> bb20__0_332 [label="return"];
    bb19__0_332 -> bb778__0_332 [label="unwind"];
    bb20__0_332 -> bb21__0_332 [label="return"];
    bb20__0_332 -> bb730__0_332 [label="unwind"];
    bb21__0_332 -> bb22__0_332 [label="return"];
    bb21__0_332 -> bb730__0_332 [label="unwind"];
    bb22__0_332 -> bb23__0_332 [label="return"];
    bb22__0_332 -> bb778__0_332 [label="unwind"];
    bb23__0_332 -> bb24__0_332 [label="return"];
    bb23__0_332 -> bb778__0_332 [label="unwind"];
    bb24__0_332 -> bb25__0_332 [label="return"];
    bb24__0_332 -> bb778__0_332 [label="unwind"];
    bb25__0_332 -> bb26__0_332 [label="return"];
    bb25__0_332 -> bb729__0_332 [label="unwind"];
    bb26__0_332 -> bb27__0_332 [label="return"];
    bb26__0_332 -> bb729__0_332 [label="unwind"];
    bb27__0_332 -> bb28__0_332 [label="return"];
    bb27__0_332 -> bb778__0_332 [label="unwind"];
    bb28__0_332 -> bb29__0_332 [label=""];
    bb29__0_332 -> bb30__0_332 [label="return"];
    bb29__0_332 -> bb778__0_332 [label="unwind"];
    bb30__0_332 -> bb31__0_332 [label="0"];
    bb30__0_332 -> bb32__0_332 [label="1"];
    bb30__0_332 -> bb5__0_332 [label="otherwise"];
    bb31__0_332 -> bb34__0_332 [label="return"];
    bb31__0_332 -> bb778__0_332 [label="unwind"];
    bb32__0_332 -> bb33__0_332 [label="return"];
    bb32__0_332 -> bb778__0_332 [label="unwind"];
    bb33__0_332 -> bb699__0_332 [label=""];
    bb34__0_332 -> bb36__0_332 [label="0"];
    bb34__0_332 -> bb35__0_332 [label="otherwise"];
    bb35__0_332 -> bb50__0_332 [label=""];
    bb36__0_332 -> bb37__0_332 [label="return"];
    bb36__0_332 -> bb778__0_332 [label="unwind"];
    bb37__0_332 -> bb38__0_332 [label="return"];
    bb37__0_332 -> bb778__0_332 [label="unwind"];
    bb38__0_332 -> bb39__0_332 [label="return"];
    bb38__0_332 -> bb778__0_332 [label="unwind"];
    bb39__0_332 -> bb40__0_332 [label="return"];
    bb39__0_332 -> bb728__0_332 [label="unwind"];
    bb40__0_332 -> bb41__0_332 [label="return"];
    bb40__0_332 -> bb728__0_332 [label="unwind"];
    bb41__0_332 -> bb42__0_332 [label="return"];
    bb41__0_332 -> bb778__0_332 [label="unwind"];
    bb42__0_332 -> bb43__0_332 [label="return"];
    bb42__0_332 -> bb778__0_332 [label="unwind"];
    bb43__0_332 -> bb44__0_332 [label="return"];
    bb43__0_332 -> bb778__0_332 [label="unwind"];
    bb44__0_332 -> bb45__0_332 [label="return"];
    bb44__0_332 -> bb778__0_332 [label="unwind"];
    bb45__0_332 -> bb46__0_332 [label="return"];
    bb45__0_332 -> bb778__0_332 [label="unwind"];
    bb46__0_332 -> bb47__0_332 [label="return"];
    bb46__0_332 -> bb727__0_332 [label="unwind"];
    bb47__0_332 -> bb48__0_332 [label="return"];
    bb47__0_332 -> bb727__0_332 [label="unwind"];
    bb48__0_332 -> bb49__0_332 [label="return"];
    bb48__0_332 -> bb778__0_332 [label="unwind"];
    bb49__0_332 -> bb50__0_332 [label=""];
    bb50__0_332 -> bb51__0_332 [label="return"];
    bb50__0_332 -> bb778__0_332 [label="unwind"];
    bb51__0_332 -> bb52__0_332 [label="0"];
    bb51__0_332 -> bb53__0_332 [label="1"];
    bb51__0_332 -> bb5__0_332 [label="otherwise"];
    bb52__0_332 -> bb55__0_332 [label="return"];
    bb52__0_332 -> bb778__0_332 [label="unwind"];
    bb53__0_332 -> bb54__0_332 [label="return"];
    bb53__0_332 -> bb778__0_332 [label="unwind"];
    bb54__0_332 -> bb699__0_332 [label=""];
    bb55__0_332 -> bb56__0_332 [label="return"];
    bb55__0_332 -> bb778__0_332 [label="unwind"];
    bb56__0_332 -> bb58__0_332 [label="0"];
    bb56__0_332 -> bb57__0_332 [label="otherwise"];
    bb57__0_332 -> bb59__0_332 [label="return"];
    bb57__0_332 -> bb778__0_332 [label="unwind"];
    bb58__0_332 -> bb70__0_332 [label=""];
    bb59__0_332 -> bb60__0_332 [label="return"];
    bb59__0_332 -> bb778__0_332 [label="unwind"];
    bb60__0_332 -> bb61__0_332 [label="return"];
    bb60__0_332 -> bb778__0_332 [label="unwind"];
    bb61__0_332 -> bb62__0_332 [label="return"];
    bb61__0_332 -> bb726__0_332 [label="unwind"];
    bb62__0_332 -> bb63__0_332 [label="return"];
    bb62__0_332 -> bb726__0_332 [label="unwind"];
    bb63__0_332 -> bb64__0_332 [label="return"];
    bb63__0_332 -> bb778__0_332 [label="unwind"];
    bb64__0_332 -> bb65__0_332 [label="return"];
    bb64__0_332 -> bb778__0_332 [label="unwind"];
    bb65__0_332 -> bb66__0_332 [label="return"];
    bb65__0_332 -> bb778__0_332 [label="unwind"];
    bb66__0_332 -> bb67__0_332 [label="return"];
    bb66__0_332 -> bb725__0_332 [label="unwind"];
    bb67__0_332 -> bb68__0_332 [label="return"];
    bb67__0_332 -> bb725__0_332 [label="unwind"];
    bb68__0_332 -> bb69__0_332 [label="return"];
    bb68__0_332 -> bb778__0_332 [label="unwind"];
    bb69__0_332 -> bb70__0_332 [label=""];
    bb70__0_332 -> bb71__0_332 [label="return"];
    bb70__0_332 -> bb778__0_332 [label="unwind"];
    bb71__0_332 -> bb72__0_332 [label="0"];
    bb71__0_332 -> bb73__0_332 [label="1"];
    bb71__0_332 -> bb5__0_332 [label="otherwise"];
    bb72__0_332 -> bb75__0_332 [label="return"];
    bb72__0_332 -> bb778__0_332 [label="unwind"];
    bb73__0_332 -> bb74__0_332 [label="return"];
    bb73__0_332 -> bb778__0_332 [label="unwind"];
    bb74__0_332 -> bb699__0_332 [label=""];
    bb75__0_332 -> bb76__0_332 [label="return"];
    bb75__0_332 -> bb778__0_332 [label="unwind"];
    bb76__0_332 -> bb77__0_332 [label="0"];
    bb76__0_332 -> bb78__0_332 [label="1"];
    bb76__0_332 -> bb5__0_332 [label="otherwise"];
    bb77__0_332 -> bb80__0_332 [label="return"];
    bb77__0_332 -> bb775__0_332 [label="unwind"];
    bb78__0_332 -> bb79__0_332 [label="return"];
    bb78__0_332 -> bb776__0_332 [label="unwind"];
    bb79__0_332 -> bb698__0_332 [label=""];
    bb80__0_332 -> bb81__0_332 [label="return"];
    bb80__0_332 -> bb775__0_332 [label="unwind"];
    bb81__0_332 -> bb83__0_332 [label="0"];
    bb81__0_332 -> bb82__0_332 [label="otherwise"];
    bb82__0_332 -> bb84__0_332 [label="return"];
    bb82__0_332 -> bb775__0_332 [label="unwind"];
    bb83__0_332 -> bb96__0_332 [label=""];
    bb84__0_332 -> bb85__0_332 [label="return"];
    bb84__0_332 -> bb775__0_332 [label="unwind"];
    bb85__0_332 -> bb86__0_332 [label="return"];
    bb85__0_332 -> bb775__0_332 [label="unwind"];
    bb86__0_332 -> bb87__0_332 [label="return"];
    bb86__0_332 -> bb724__0_332 [label="unwind"];
    bb87__0_332 -> bb88__0_332 [label="return"];
    bb87__0_332 -> bb724__0_332 [label="unwind"];
    bb88__0_332 -> bb89__0_332 [label="return"];
    bb88__0_332 -> bb775__0_332 [label="unwind"];
    bb89__0_332 -> bb90__0_332 [label="return"];
    bb89__0_332 -> bb775__0_332 [label="unwind"];
    bb90__0_332 -> bb91__0_332 [label="return"];
    bb90__0_332 -> bb775__0_332 [label="unwind"];
    bb91__0_332 -> bb92__0_332 [label="return"];
    bb91__0_332 -> bb775__0_332 [label="unwind"];
    bb92__0_332 -> bb93__0_332 [label="return"];
    bb92__0_332 -> bb723__0_332 [label="unwind"];
    bb93__0_332 -> bb94__0_332 [label="return"];
    bb93__0_332 -> bb723__0_332 [label="unwind"];
    bb94__0_332 -> bb95__0_332 [label="return"];
    bb94__0_332 -> bb775__0_332 [label="unwind"];
    bb95__0_332 -> bb96__0_332 [label=""];
    bb96__0_332 -> bb97__0_332 [label="return"];
    bb96__0_332 -> bb775__0_332 [label="unwind"];
    bb97__0_332 -> bb98__0_332 [label="0"];
    bb97__0_332 -> bb99__0_332 [label="1"];
    bb97__0_332 -> bb5__0_332 [label="otherwise"];
    bb98__0_332 -> bb101__0_332 [label="return"];
    bb98__0_332 -> bb775__0_332 [label="unwind"];
    bb99__0_332 -> bb100__0_332 [label="return"];
    bb99__0_332 -> bb775__0_332 [label="unwind"];
    bb100__0_332 -> bb750__0_332 [label=""];
    bb101__0_332 -> bb102__0_332 [label="return"];
    bb101__0_332 -> bb775__0_332 [label="unwind"];
    bb102__0_332 -> bb103__0_332 [label="return"];
    bb102__0_332 -> bb775__0_332 [label="unwind"];
    bb103__0_332 -> bb104__0_332 [label="return"];
    bb103__0_332 -> bb775__0_332 [label="unwind"];
    bb104__0_332 -> bb105__0_332 [label="0"];
    bb104__0_332 -> bb106__0_332 [label="1"];
    bb104__0_332 -> bb5__0_332 [label="otherwise"];
    bb105__0_332 -> bb108__0_332 [label="return"];
    bb105__0_332 -> bb722__0_332 [label="unwind"];
    bb106__0_332 -> bb107__0_332 [label="return"];
    bb106__0_332 -> bb773__0_332 [label="unwind"];
    bb107__0_332 -> bb748__0_332 [label=""];
    bb108__0_332 -> bb109__0_332 [label="return"];
    bb108__0_332 -> bb722__0_332 [label="unwind"];
    bb109__0_332 -> bb110__0_332 [label="return"];
    bb109__0_332 -> bb722__0_332 [label="unwind"];
    bb110__0_332 -> bb111__0_332 [label="0"];
    bb110__0_332 -> bb112__0_332 [label="1"];
    bb110__0_332 -> bb5__0_332 [label="otherwise"];
    bb111__0_332 -> bb732__0_332 [label="return"];
    bb111__0_332 -> bb773__0_332 [label="unwind"];
    bb112__0_332 -> bb113__0_332 [label="return"];
    bb112__0_332 -> bb722__0_332 [label="unwind"];
    bb113__0_332 -> bb748__0_332 [label="return"];
    bb113__0_332 -> bb773__0_332 [label="unwind"];
    bb114__0_332 -> bb115__0_332 [label="return"];
    bb114__0_332 -> bb775__0_332 [label="unwind"];
    bb115__0_332 -> bb116__0_332 [label="return"];
    bb115__0_332 -> bb775__0_332 [label="unwind"];
    bb116__0_332 -> bb117__0_332 [label="0"];
    bb116__0_332 -> bb118__0_332 [label="1"];
    bb116__0_332 -> bb5__0_332 [label="otherwise"];
    bb117__0_332 -> bb120__0_332 [label="return"];
    bb117__0_332 -> bb721__0_332 [label="unwind"];
    bb118__0_332 -> bb119__0_332 [label="return"];
    bb118__0_332 -> bb772__0_332 [label="unwind"];
    bb119__0_332 -> bb747__0_332 [label=""];
    bb120__0_332 -> bb121__0_332 [label="return"];
    bb120__0_332 -> bb721__0_332 [label="unwind"];
    bb121__0_332 -> bb122__0_332 [label="return"];
    bb121__0_332 -> bb721__0_332 [label="unwind"];
    bb122__0_332 -> bb123__0_332 [label="0"];
    bb122__0_332 -> bb124__0_332 [label="1"];
    bb122__0_332 -> bb5__0_332 [label="otherwise"];
    bb123__0_332 -> bb733__0_332 [label="return"];
    bb123__0_332 -> bb772__0_332 [label="unwind"];
    bb124__0_332 -> bb125__0_332 [label="return"];
    bb124__0_332 -> bb721__0_332 [label="unwind"];
    bb125__0_332 -> bb747__0_332 [label="return"];
    bb125__0_332 -> bb772__0_332 [label="unwind"];
    bb126__0_332 -> bb127__0_332 [label="return"];
    bb126__0_332 -> bb775__0_332 [label="unwind"];
    bb127__0_332 -> bb128__0_332 [label="return"];
    bb127__0_332 -> bb775__0_332 [label="unwind"];
    bb128__0_332 -> bb129__0_332 [label="return"];
    bb128__0_332 -> bb775__0_332 [label="unwind"];
    bb129__0_332 -> bb130__0_332 [label="return"];
    bb129__0_332 -> bb775__0_332 [label="unwind"];
    bb130__0_332 -> bb131__0_332 [label="0"];
    bb130__0_332 -> bb132__0_332 [label="1"];
    bb130__0_332 -> bb5__0_332 [label="otherwise"];
    bb131__0_332 -> bb134__0_332 [label="return"];
    bb131__0_332 -> bb775__0_332 [label="unwind"];
    bb132__0_332 -> bb133__0_332 [label="return"];
    bb132__0_332 -> bb775__0_332 [label="unwind"];
    bb133__0_332 -> bb696__0_332 [label=""];
    bb134__0_332 -> bb135__0_332 [label="return"];
    bb134__0_332 -> bb775__0_332 [label="unwind"];
    bb135__0_332 -> bb136__0_332 [label="0"];
    bb135__0_332 -> bb137__0_332 [label="1"];
    bb135__0_332 -> bb5__0_332 [label="otherwise"];
    bb136__0_332 -> bb139__0_332 [label="return"];
    bb136__0_332 -> bb775__0_332 [label="unwind"];
    bb137__0_332 -> bb138__0_332 [label="return"];
    bb137__0_332 -> bb775__0_332 [label="unwind"];
    bb138__0_332 -> bb696__0_332 [label=""];
    bb139__0_332 -> bb140__0_332 [label="return"];
    bb139__0_332 -> bb775__0_332 [label="unwind"];
    bb140__0_332 -> bb142__0_332 [label="0"];
    bb140__0_332 -> bb141__0_332 [label="otherwise"];
    bb141__0_332 -> bb152__0_332 [label=""];
    bb142__0_332 -> bb143__0_332 [label="return"];
    bb142__0_332 -> bb775__0_332 [label="unwind"];
    bb143__0_332 -> bb151__0_332 [label="0"];
    bb143__0_332 -> bb144__0_332 [label="otherwise"];
    bb144__0_332 -> bb145__0_332 [label="return"];
    bb144__0_332 -> bb775__0_332 [label="unwind"];
    bb145__0_332 -> bb146__0_332 [label="return"];
    bb145__0_332 -> bb775__0_332 [label="unwind"];
    bb146__0_332 -> bb147__0_332 [label="return"];
    bb146__0_332 -> bb775__0_332 [label="unwind"];
    bb147__0_332 -> bb148__0_332 [label="return"];
    bb147__0_332 -> bb720__0_332 [label="unwind"];
    bb148__0_332 -> bb149__0_332 [label="return"];
    bb148__0_332 -> bb720__0_332 [label="unwind"];
    bb149__0_332 -> bb150__0_332 [label="return"];
    bb149__0_332 -> bb775__0_332 [label="unwind"];
    bb150__0_332 -> bb695__0_332 [label=""];
    bb151__0_332 -> bb152__0_332 [label=""];
    bb152__0_332 -> bb153__0_332 [label="return"];
    bb152__0_332 -> bb775__0_332 [label="unwind"];
    bb153__0_332 -> bb154__0_332 [label="return"];
    bb153__0_332 -> bb775__0_332 [label="unwind"];
    bb154__0_332 -> bb165__0_332 [label="0"];
    bb154__0_332 -> bb155__0_332 [label="otherwise"];
    bb155__0_332 -> bb156__0_332 [label="return"];
    bb155__0_332 -> bb775__0_332 [label="unwind"];
    bb156__0_332 -> bb157__0_332 [label="return"];
    bb156__0_332 -> bb775__0_332 [label="unwind"];
    bb157__0_332 -> bb158__0_332 [label="0"];
    bb157__0_332 -> bb159__0_332 [label="1"];
    bb157__0_332 -> bb5__0_332 [label="otherwise"];
    bb158__0_332 -> bb162__0_332 [label="0"];
    bb158__0_332 -> bb161__0_332 [label="otherwise"];
    bb159__0_332 -> bb160__0_332 [label="return"];
    bb159__0_332 -> bb775__0_332 [label="unwind"];
    bb160__0_332 -> bb694__0_332 [label=""];
    bb161__0_332 -> bb163__0_332 [label="return"];
    bb161__0_332 -> bb775__0_332 [label="unwind"];
    bb162__0_332 -> bb166__0_332 [label=""];
    bb163__0_332 -> bb164__0_332 [label="return"];
    bb163__0_332 -> bb775__0_332 [label="unwind"];
    bb164__0_332 -> bb694__0_332 [label=""];
    bb165__0_332 -> bb166__0_332 [label=""];
    bb166__0_332 -> bb167__0_332 [label="return"];
    bb166__0_332 -> bb775__0_332 [label="unwind"];
    bb167__0_332 -> bb168__0_332 [label="return"];
    bb167__0_332 -> bb775__0_332 [label="unwind"];
    bb168__0_332 -> bb169__0_332 [label="return"];
    bb168__0_332 -> bb775__0_332 [label="unwind"];
    bb169__0_332 -> bb170__0_332 [label="return"];
    bb169__0_332 -> bb775__0_332 [label="unwind"];
    bb170__0_332 -> bb171__0_332 [label="0"];
    bb170__0_332 -> bb172__0_332 [label="1"];
    bb170__0_332 -> bb5__0_332 [label="otherwise"];
    bb171__0_332 -> bb174__0_332 [label="return"];
    bb171__0_332 -> bb775__0_332 [label="unwind"];
    bb172__0_332 -> bb173__0_332 [label="return"];
    bb172__0_332 -> bb775__0_332 [label="unwind"];
    bb173__0_332 -> bb697__0_332 [label=""];
    bb174__0_332 -> bb175__0_332 [label="return"];
    bb174__0_332 -> bb775__0_332 [label="unwind"];
    bb175__0_332 -> bb176__0_332 [label="return"];
    bb175__0_332 -> bb775__0_332 [label="unwind"];
    bb176__0_332 -> bb177__0_332 [label="0"];
    bb176__0_332 -> bb178__0_332 [label="1"];
    bb176__0_332 -> bb5__0_332 [label="otherwise"];
    bb177__0_332 -> bb180__0_332 [label="return"];
    bb177__0_332 -> bb775__0_332 [label="unwind"];
    bb178__0_332 -> bb179__0_332 [label="return"];
    bb178__0_332 -> bb775__0_332 [label="unwind"];
    bb179__0_332 -> bb693__0_332 [label=""];
    bb180__0_332 -> bb181__0_332 [label="return"];
    bb180__0_332 -> bb775__0_332 [label="unwind"];
    bb181__0_332 -> bb182__0_332 [label="return"];
    bb181__0_332 -> bb775__0_332 [label="unwind"];
    bb182__0_332 -> bb183__0_332 [label="0"];
    bb182__0_332 -> bb184__0_332 [label="1"];
    bb182__0_332 -> bb5__0_332 [label="otherwise"];
    bb183__0_332 -> bb186__0_332 [label="return"];
    bb183__0_332 -> bb775__0_332 [label="unwind"];
    bb184__0_332 -> bb185__0_332 [label="return"];
    bb184__0_332 -> bb775__0_332 [label="unwind"];
    bb185__0_332 -> bb692__0_332 [label=""];
    bb186__0_332 -> bb187__0_332 [label="success"];
    bb186__0_332 -> bb775__0_332 [label="unwind"];
    bb187__0_332 -> bb188__0_332 [label="return"];
    bb187__0_332 -> bb775__0_332 [label="unwind"];
    bb188__0_332 -> bb190__0_332 [label="0"];
    bb188__0_332 -> bb189__0_332 [label="otherwise"];
    bb189__0_332 -> bb194__0_332 [label=""];
    bb190__0_332 -> bb191__0_332 [label="return"];
    bb190__0_332 -> bb775__0_332 [label="unwind"];
    bb191__0_332 -> bb192__0_332 [label="success"];
    bb191__0_332 -> bb775__0_332 [label="unwind"];
    bb192__0_332 -> bb193__0_332 [label="return"];
    bb192__0_332 -> bb775__0_332 [label="unwind"];
    bb193__0_332 -> bb195__0_332 [label="0"];
    bb193__0_332 -> bb194__0_332 [label="otherwise"];
    bb194__0_332 -> bb202__0_332 [label=""];
    bb195__0_332 -> bb196__0_332 [label="return"];
    bb195__0_332 -> bb775__0_332 [label="unwind"];
    bb196__0_332 -> bb197__0_332 [label="return"];
    bb196__0_332 -> bb775__0_332 [label="unwind"];
    bb197__0_332 -> bb198__0_332 [label="return"];
    bb197__0_332 -> bb775__0_332 [label="unwind"];
    bb198__0_332 -> bb199__0_332 [label="return"];
    bb198__0_332 -> bb719__0_332 [label="unwind"];
    bb199__0_332 -> bb200__0_332 [label="return"];
    bb199__0_332 -> bb719__0_332 [label="unwind"];
    bb200__0_332 -> bb201__0_332 [label="return"];
    bb200__0_332 -> bb775__0_332 [label="unwind"];
    bb201__0_332 -> bb202__0_332 [label=""];
    bb202__0_332 -> bb203__0_332 [label="return"];
    bb202__0_332 -> bb775__0_332 [label="unwind"];
    bb203__0_332 -> bb204__0_332 [label="0"];
    bb203__0_332 -> bb205__0_332 [label="1"];
    bb203__0_332 -> bb5__0_332 [label="otherwise"];
    bb204__0_332 -> bb207__0_332 [label="return"];
    bb204__0_332 -> bb775__0_332 [label="unwind"];
    bb205__0_332 -> bb206__0_332 [label="return"];
    bb205__0_332 -> bb775__0_332 [label="unwind"];
    bb206__0_332 -> bb692__0_332 [label=""];
    bb207__0_332 -> bb208__0_332 [label="return"];
    bb207__0_332 -> bb775__0_332 [label="unwind"];
    bb208__0_332 -> bb209__0_332 [label="return"];
    bb208__0_332 -> bb775__0_332 [label="unwind"];
    bb209__0_332 -> bb210__0_332 [label="0"];
    bb209__0_332 -> bb211__0_332 [label="1"];
    bb209__0_332 -> bb5__0_332 [label="otherwise"];
    bb210__0_332 -> bb213__0_332 [label="return"];
    bb210__0_332 -> bb770__0_332 [label="unwind"];
    bb211__0_332 -> bb212__0_332 [label="return"];
    bb211__0_332 -> bb771__0_332 [label="unwind"];
    bb212__0_332 -> bb691__0_332 [label=""];
    bb213__0_332 -> bb214__0_332 [label="return"];
    bb213__0_332 -> bb770__0_332 [label="unwind"];
    bb214__0_332 -> bb215__0_332 [label="0"];
    bb214__0_332 -> bb216__0_332 [label="1"];
    bb214__0_332 -> bb5__0_332 [label="otherwise"];
    bb215__0_332 -> bb218__0_332 [label="return"];
    bb215__0_332 -> bb767__0_332 [label="unwind"];
    bb216__0_332 -> bb217__0_332 [label="return"];
    bb216__0_332 -> bb768__0_332 [label="unwind"];
    bb217__0_332 -> bb690__0_332 [label=""];
    bb218__0_332 -> bb219__0_332 [label="return"];
    bb218__0_332 -> bb767__0_332 [label="unwind"];
    bb219__0_332 -> bb220__0_332 [label="return"];
    bb219__0_332 -> bb767__0_332 [label="unwind"];
    bb220__0_332 -> bb221__0_332 [label="return"];
    bb220__0_332 -> bb767__0_332 [label="unwind"];
    bb221__0_332 -> bb222__0_332 [label="0"];
    bb221__0_332 -> bb223__0_332 [label="1"];
    bb221__0_332 -> bb5__0_332 [label="otherwise"];
    bb222__0_332 -> bb225__0_332 [label="return"];
    bb222__0_332 -> bb767__0_332 [label="unwind"];
    bb223__0_332 -> bb224__0_332 [label="return"];
    bb223__0_332 -> bb767__0_332 [label="unwind"];
    bb224__0_332 -> bb689__0_332 [label=""];
    bb225__0_332 -> bb226__0_332 [label="return"];
    bb225__0_332 -> bb767__0_332 [label="unwind"];
    bb226__0_332 -> bb227__0_332 [label="return"];
    bb226__0_332 -> bb767__0_332 [label="unwind"];
    bb227__0_332 -> bb228__0_332 [label="0"];
    bb227__0_332 -> bb229__0_332 [label="1"];
    bb227__0_332 -> bb5__0_332 [label="otherwise"];
    bb228__0_332 -> bb231__0_332 [label="return"];
    bb228__0_332 -> bb767__0_332 [label="unwind"];
    bb229__0_332 -> bb230__0_332 [label="return"];
    bb229__0_332 -> bb767__0_332 [label="unwind"];
    bb230__0_332 -> bb688__0_332 [label=""];
    bb231__0_332 -> bb232__0_332 [label="return"];
    bb231__0_332 -> bb767__0_332 [label="unwind"];
    bb232__0_332 -> bb233__0_332 [label="return"];
    bb232__0_332 -> bb767__0_332 [label="unwind"];
    bb233__0_332 -> bb234__0_332 [label="0"];
    bb233__0_332 -> bb235__0_332 [label="1"];
    bb233__0_332 -> bb5__0_332 [label="otherwise"];
    bb234__0_332 -> bb237__0_332 [label="return"];
    bb234__0_332 -> bb767__0_332 [label="unwind"];
    bb235__0_332 -> bb236__0_332 [label="return"];
    bb235__0_332 -> bb767__0_332 [label="unwind"];
    bb236__0_332 -> bb688__0_332 [label=""];
    bb237__0_332 -> bb238__0_332 [label="return"];
    bb237__0_332 -> bb767__0_332 [label="unwind"];
    bb238__0_332 -> bb241__0_332 [label="0"];
    bb238__0_332 -> bb239__0_332 [label="otherwise"];
    bb239__0_332 -> bb240__0_332 [label="return"];
    bb239__0_332 -> bb767__0_332 [label="unwind"];
    bb240__0_332 -> bb242__0_332 [label=""];
    bb241__0_332 -> bb242__0_332 [label=""];
    bb242__0_332 -> bb243__0_332 [label="return"];
    bb242__0_332 -> bb767__0_332 [label="unwind"];
    bb243__0_332 -> bb244__0_332 [label="return"];
    bb243__0_332 -> bb767__0_332 [label="unwind"];
    bb244__0_332 -> bb246__0_332 [label="0"];
    bb244__0_332 -> bb245__0_332 [label="otherwise"];
    bb245__0_332 -> bb248__0_332 [label="0"];
    bb245__0_332 -> bb247__0_332 [label="otherwise"];
    bb246__0_332 -> bb247__0_332 [label=""];
    bb247__0_332 -> bb249__0_332 [label="return"];
    bb247__0_332 -> bb767__0_332 [label="unwind"];
    bb248__0_332 -> bb303__0_332 [label=""];
    bb249__0_332 -> bb250__0_332 [label="return"];
    bb249__0_332 -> bb767__0_332 [label="unwind"];
    bb250__0_332 -> bb251__0_332 [label="return"];
    bb250__0_332 -> bb767__0_332 [label="unwind"];
    bb251__0_332 -> bb252__0_332 [label="return"];
    bb251__0_332 -> bb767__0_332 [label="unwind"];
    bb252__0_332 -> bb253__0_332 [label="return"];
    bb252__0_332 -> bb767__0_332 [label="unwind"];
    bb253__0_332 -> bb254__0_332 [label="0"];
    bb253__0_332 -> bb255__0_332 [label="1"];
    bb253__0_332 -> bb5__0_332 [label="otherwise"];
    bb254__0_332 -> bb257__0_332 [label="return"];
    bb254__0_332 -> bb767__0_332 [label="unwind"];
    bb255__0_332 -> bb256__0_332 [label="return"];
    bb255__0_332 -> bb767__0_332 [label="unwind"];
    bb256__0_332 -> bb685__0_332 [label=""];
    bb257__0_332 -> bb258__0_332 [label="return"];
    bb257__0_332 -> bb767__0_332 [label="unwind"];
    bb258__0_332 -> bb259__0_332 [label="0"];
    bb258__0_332 -> bb260__0_332 [label="1"];
    bb258__0_332 -> bb5__0_332 [label="otherwise"];
    bb259__0_332 -> bb262__0_332 [label="return"];
    bb259__0_332 -> bb767__0_332 [label="unwind"];
    bb260__0_332 -> bb261__0_332 [label="return"];
    bb260__0_332 -> bb767__0_332 [label="unwind"];
    bb261__0_332 -> bb685__0_332 [label=""];
    bb262__0_332 -> bb263__0_332 [label="return"];
    bb262__0_332 -> bb767__0_332 [label="unwind"];
    bb263__0_332 -> bb264__0_332 [label="0"];
    bb263__0_332 -> bb265__0_332 [label="1"];
    bb263__0_332 -> bb5__0_332 [label="otherwise"];
    bb264__0_332 -> bb267__0_332 [label="return"];
    bb264__0_332 -> bb767__0_332 [label="unwind"];
    bb265__0_332 -> bb266__0_332 [label="return"];
    bb265__0_332 -> bb767__0_332 [label="unwind"];
    bb266__0_332 -> bb684__0_332 [label=""];
    bb267__0_332 -> bb268__0_332 [label="return"];
    bb267__0_332 -> bb767__0_332 [label="unwind"];
    bb268__0_332 -> bb269__0_332 [label="0"];
    bb268__0_332 -> bb270__0_332 [label="1"];
    bb268__0_332 -> bb5__0_332 [label="otherwise"];
    bb269__0_332 -> bb272__0_332 [label="return"];
    bb269__0_332 -> bb767__0_332 [label="unwind"];
    bb270__0_332 -> bb271__0_332 [label="return"];
    bb270__0_332 -> bb767__0_332 [label="unwind"];
    bb271__0_332 -> bb683__0_332 [label=""];
    bb272__0_332 -> bb273__0_332 [label="return"];
    bb272__0_332 -> bb767__0_332 [label="unwind"];
    bb273__0_332 -> bb274__0_332 [label="return"];
    bb273__0_332 -> bb767__0_332 [label="unwind"];
    bb274__0_332 -> bb275__0_332 [label="0"];
    bb274__0_332 -> bb276__0_332 [label="1"];
    bb274__0_332 -> bb5__0_332 [label="otherwise"];
    bb275__0_332 -> bb278__0_332 [label="return"];
    bb275__0_332 -> bb767__0_332 [label="unwind"];
    bb276__0_332 -> bb277__0_332 [label="return"];
    bb276__0_332 -> bb767__0_332 [label="unwind"];
    bb277__0_332 -> bb683__0_332 [label=""];
    bb278__0_332 -> bb279__0_332 [label="return"];
    bb278__0_332 -> bb767__0_332 [label="unwind"];
    bb279__0_332 -> bb280__0_332 [label="return"];
    bb279__0_332 -> bb767__0_332 [label="unwind"];
    bb280__0_332 -> bb281__0_332 [label="0"];
    bb280__0_332 -> bb282__0_332 [label="1"];
    bb280__0_332 -> bb5__0_332 [label="otherwise"];
    bb281__0_332 -> bb284__0_332 [label="return"];
    bb281__0_332 -> bb767__0_332 [label="unwind"];
    bb282__0_332 -> bb283__0_332 [label="return"];
    bb282__0_332 -> bb767__0_332 [label="unwind"];
    bb283__0_332 -> bb683__0_332 [label=""];
    bb284__0_332 -> bb285__0_332 [label="return"];
    bb284__0_332 -> bb767__0_332 [label="unwind"];
    bb285__0_332 -> bb286__0_332 [label="0"];
    bb285__0_332 -> bb287__0_332 [label="1"];
    bb285__0_332 -> bb5__0_332 [label="otherwise"];
    bb286__0_332 -> bb290__0_332 [label="0"];
    bb286__0_332 -> bb289__0_332 [label="otherwise"];
    bb287__0_332 -> bb288__0_332 [label="return"];
    bb287__0_332 -> bb767__0_332 [label="unwind"];
    bb288__0_332 -> bb682__0_332 [label=""];
    bb289__0_332 -> bb291__0_332 [label="return"];
    bb289__0_332 -> bb767__0_332 [label="unwind"];
    bb290__0_332 -> bb303__0_332 [label=""];
    bb291__0_332 -> bb292__0_332 [label="return"];
    bb291__0_332 -> bb767__0_332 [label="unwind"];
    bb292__0_332 -> bb293__0_332 [label="return"];
    bb292__0_332 -> bb718__0_332 [label="unwind"];
    bb293__0_332 -> bb294__0_332 [label="return"];
    bb293__0_332 -> bb718__0_332 [label="unwind"];
    bb294__0_332 -> bb295__0_332 [label="return"];
    bb294__0_332 -> bb716__0_332 [label="unwind"];
    bb295__0_332 -> bb296__0_332 [label="return"];
    bb295__0_332 -> bb715__0_332 [label="unwind"];
    bb296__0_332 -> bb297__0_332 [label="return"];
    bb296__0_332 -> bb715__0_332 [label="unwind"];
    bb297__0_332 -> bb298__0_332 [label="return"];
    bb297__0_332 -> bb716__0_332 [label="unwind"];
    bb298__0_332 -> bb299__0_332 [label="return"];
    bb298__0_332 -> bb717__0_332 [label="unwind"];
    bb299__0_332 -> bb300__0_332 [label="return"];
    bb299__0_332 -> bb767__0_332 [label="unwind"];
    bb300__0_332 -> bb301__0_332 [label="return"];
    bb300__0_332 -> bb767__0_332 [label="unwind"];
    bb301__0_332 -> bb302__0_332 [label="return"];
    bb301__0_332 -> bb767__0_332 [label="unwind"];
    bb302__0_332 -> bb682__0_332 [label=""];
    bb303__0_332 -> bb304__0_332 [label="return"];
    bb303__0_332 -> bb767__0_332 [label="unwind"];
    bb304__0_332 -> bb305__0_332 [label="success"];
    bb304__0_332 -> bb767__0_332 [label="unwind"];
    bb305__0_332 -> bb308__0_332 [label="0"];
    bb305__0_332 -> bb306__0_332 [label="otherwise"];
    bb306__0_332 -> bb307__0_332 [label="return"];
    bb306__0_332 -> bb767__0_332 [label="unwind"];
    bb307__0_332 -> bb687__0_332 [label=""];
    bb308__0_332 -> bb309__0_332 [label="return"];
    bb308__0_332 -> bb767__0_332 [label="unwind"];
    bb309__0_332 -> bb310__0_332 [label="return"];
    bb309__0_332 -> bb767__0_332 [label="unwind"];
    bb310__0_332 -> bb311__0_332 [label="0"];
    bb310__0_332 -> bb312__0_332 [label="1"];
    bb310__0_332 -> bb5__0_332 [label="otherwise"];
    bb311__0_332 -> bb314__0_332 [label="return"];
    bb311__0_332 -> bb714__0_332 [label="unwind"];
    bb312__0_332 -> bb313__0_332 [label="return"];
    bb312__0_332 -> bb765__0_332 [label="unwind"];
    bb313__0_332 -> bb744__0_332 [label=""];
    bb314__0_332 -> bb315__0_332 [label="return"];
    bb314__0_332 -> bb714__0_332 [label="unwind"];
    bb315__0_332 -> bb316__0_332 [label="return"];
    bb315__0_332 -> bb714__0_332 [label="unwind"];
    bb316__0_332 -> bb317__0_332 [label="return"];
    bb316__0_332 -> bb714__0_332 [label="unwind"];
    bb317__0_332 -> bb318__0_332 [label="0"];
    bb317__0_332 -> bb319__0_332 [label="1"];
    bb317__0_332 -> bb5__0_332 [label="otherwise"];
    bb318__0_332 -> bb321__0_332 [label="return"];
    bb318__0_332 -> bb714__0_332 [label="unwind"];
    bb319__0_332 -> bb320__0_332 [label="return"];
    bb319__0_332 -> bb714__0_332 [label="unwind"];
    bb320__0_332 -> bb680__0_332 [label=""];
    bb321__0_332 -> bb322__0_332 [label="return"];
    bb321__0_332 -> bb714__0_332 [label="unwind"];
    bb322__0_332 -> bb323__0_332 [label="0"];
    bb322__0_332 -> bb324__0_332 [label="1"];
    bb322__0_332 -> bb5__0_332 [label="otherwise"];
    bb323__0_332 -> bb734__0_332 [label="return"];
    bb323__0_332 -> bb765__0_332 [label="unwind"];
    bb324__0_332 -> bb325__0_332 [label="return"];
    bb324__0_332 -> bb714__0_332 [label="unwind"];
    bb325__0_332 -> bb680__0_332 [label=""];
    bb326__0_332 -> bb334__0_332 [label=""];
    bb327__0_332 -> bb328__0_332 [label="return"];
    bb327__0_332 -> bb767__0_332 [label="unwind"];
    bb328__0_332 -> bb329__0_332 [label="return"];
    bb328__0_332 -> bb767__0_332 [label="unwind"];
    bb329__0_332 -> bb330__0_332 [label="return"];
    bb329__0_332 -> bb767__0_332 [label="unwind"];
    bb330__0_332 -> bb331__0_332 [label="return"];
    bb330__0_332 -> bb713__0_332 [label="unwind"];
    bb331__0_332 -> bb332__0_332 [label="return"];
    bb331__0_332 -> bb713__0_332 [label="unwind"];
    bb332__0_332 -> bb333__0_332 [label="return"];
    bb332__0_332 -> bb767__0_332 [label="unwind"];
    bb333__0_332 -> bb334__0_332 [label=""];
    bb334__0_332 -> bb335__0_332 [label="return"];
    bb334__0_332 -> bb767__0_332 [label="unwind"];
    bb335__0_332 -> bb336__0_332 [label="0"];
    bb335__0_332 -> bb337__0_332 [label="1"];
    bb335__0_332 -> bb5__0_332 [label="otherwise"];
    bb336__0_332 -> bb339__0_332 [label="return"];
    bb336__0_332 -> bb767__0_332 [label="unwind"];
    bb337__0_332 -> bb338__0_332 [label="return"];
    bb337__0_332 -> bb767__0_332 [label="unwind"];
    bb338__0_332 -> bb681__0_332 [label=""];
    bb339__0_332 -> bb340__0_332 [label="success"];
    bb339__0_332 -> bb767__0_332 [label="unwind"];
    bb340__0_332 -> bb341__0_332 [label="return"];
    bb340__0_332 -> bb767__0_332 [label="unwind"];
    bb341__0_332 -> bb342__0_332 [label="return"];
    bb341__0_332 -> bb767__0_332 [label="unwind"];
    bb342__0_332 -> bb343__0_332 [label="return"];
    bb342__0_332 -> bb767__0_332 [label="unwind"];
    bb343__0_332 -> bb344__0_332 [label="0"];
    bb343__0_332 -> bb345__0_332 [label="1"];
    bb343__0_332 -> bb5__0_332 [label="otherwise"];
    bb344__0_332 -> bb347__0_332 [label="return"];
    bb344__0_332 -> bb712__0_332 [label="unwind"];
    bb345__0_332 -> bb346__0_332 [label="return"];
    bb345__0_332 -> bb764__0_332 [label="unwind"];
    bb346__0_332 -> bb743__0_332 [label=""];
    bb347__0_332 -> bb348__0_332 [label="return"];
    bb347__0_332 -> bb712__0_332 [label="unwind"];
    bb348__0_332 -> bb349__0_332 [label="return"];
    bb348__0_332 -> bb712__0_332 [label="unwind"];
    bb349__0_332 -> bb350__0_332 [label="0"];
    bb349__0_332 -> bb351__0_332 [label="1"];
    bb349__0_332 -> bb5__0_332 [label="otherwise"];
    bb350__0_332 -> bb353__0_332 [label="return"];
    bb350__0_332 -> bb712__0_332 [label="unwind"];
    bb351__0_332 -> bb352__0_332 [label="return"];
    bb351__0_332 -> bb712__0_332 [label="unwind"];
    bb352__0_332 -> bb678__0_332 [label=""];
    bb353__0_332 -> bb354__0_332 [label="return"];
    bb353__0_332 -> bb712__0_332 [label="unwind"];
    bb354__0_332 -> bb355__0_332 [label="return"];
    bb354__0_332 -> bb712__0_332 [label="unwind"];
    bb355__0_332 -> bb356__0_332 [label="return"];
    bb355__0_332 -> bb712__0_332 [label="unwind"];
    bb356__0_332 -> bb357__0_332 [label="0"];
    bb356__0_332 -> bb358__0_332 [label="1"];
    bb356__0_332 -> bb5__0_332 [label="otherwise"];
    bb357__0_332 -> bb735__0_332 [label="return"];
    bb357__0_332 -> bb764__0_332 [label="unwind"];
    bb358__0_332 -> bb359__0_332 [label="return"];
    bb358__0_332 -> bb712__0_332 [label="unwind"];
    bb359__0_332 -> bb678__0_332 [label=""];
    bb360__0_332 -> bb361__0_332 [label="return"];
    bb360__0_332 -> bb767__0_332 [label="unwind"];
    bb361__0_332 -> bb362__0_332 [label="0"];
    bb361__0_332 -> bb363__0_332 [label="1"];
    bb361__0_332 -> bb5__0_332 [label="otherwise"];
    bb362__0_332 -> bb365__0_332 [label="return"];
    bb362__0_332 -> bb767__0_332 [label="unwind"];
    bb363__0_332 -> bb364__0_332 [label="return"];
    bb363__0_332 -> bb767__0_332 [label="unwind"];
    bb364__0_332 -> bb677__0_332 [label=""];
    bb365__0_332 -> bb366__0_332 [label="return"];
    bb365__0_332 -> bb767__0_332 [label="unwind"];
    bb366__0_332 -> bb367__0_332 [label="0"];
    bb366__0_332 -> bb368__0_332 [label="1"];
    bb366__0_332 -> bb5__0_332 [label="otherwise"];
    bb367__0_332 -> bb370__0_332 [label="return"];
    bb367__0_332 -> bb767__0_332 [label="unwind"];
    bb368__0_332 -> bb369__0_332 [label="return"];
    bb368__0_332 -> bb767__0_332 [label="unwind"];
    bb369__0_332 -> bb676__0_332 [label=""];
    bb370__0_332 -> bb371__0_332 [label="return"];
    bb370__0_332 -> bb767__0_332 [label="unwind"];
    bb371__0_332 -> bb372__0_332 [label="0"];
    bb371__0_332 -> bb373__0_332 [label="1"];
    bb371__0_332 -> bb5__0_332 [label="otherwise"];
    bb372__0_332 -> bb375__0_332 [label="return"];
    bb372__0_332 -> bb762__0_332 [label="unwind"];
    bb373__0_332 -> bb374__0_332 [label="return"];
    bb373__0_332 -> bb763__0_332 [label="unwind"];
    bb374__0_332 -> bb675__0_332 [label=""];
    bb375__0_332 -> bb376__0_332 [label="return"];
    bb375__0_332 -> bb762__0_332 [label="unwind"];
    bb376__0_332 -> bb377__0_332 [label="return"];
    bb376__0_332 -> bb762__0_332 [label="unwind"];
    bb377__0_332 -> bb378__0_332 [label="0"];
    bb377__0_332 -> bb379__0_332 [label="1"];
    bb377__0_332 -> bb5__0_332 [label="otherwise"];
    bb378__0_332 -> bb381__0_332 [label="return"];
    bb378__0_332 -> bb759__0_332 [label="unwind"];
    bb379__0_332 -> bb380__0_332 [label="return"];
    bb379__0_332 -> bb760__0_332 [label="unwind"];
    bb380__0_332 -> bb674__0_332 [label=""];
    bb381__0_332 -> bb382__0_332 [label="return"];
    bb381__0_332 -> bb759__0_332 [label="unwind"];
    bb382__0_332 -> bb383__0_332 [label="return"];
    bb382__0_332 -> bb759__0_332 [label="unwind"];
    bb383__0_332 -> bb384__0_332 [label="return"];
    bb383__0_332 -> bb759__0_332 [label="unwind"];
    bb384__0_332 -> bb385__0_332 [label="0"];
    bb384__0_332 -> bb386__0_332 [label="1"];
    bb384__0_332 -> bb5__0_332 [label="otherwise"];
    bb385__0_332 -> bb388__0_332 [label="return"];
    bb385__0_332 -> bb759__0_332 [label="unwind"];
    bb386__0_332 -> bb387__0_332 [label="return"];
    bb386__0_332 -> bb759__0_332 [label="unwind"];
    bb387__0_332 -> bb673__0_332 [label=""];
    bb388__0_332 -> bb389__0_332 [label="return"];
    bb388__0_332 -> bb759__0_332 [label="unwind"];
    bb389__0_332 -> bb390__0_332 [label="return"];
    bb389__0_332 -> bb759__0_332 [label="unwind"];
    bb390__0_332 -> bb391__0_332 [label="0"];
    bb390__0_332 -> bb392__0_332 [label="1"];
    bb390__0_332 -> bb5__0_332 [label="otherwise"];
    bb391__0_332 -> bb394__0_332 [label="return"];
    bb391__0_332 -> bb759__0_332 [label="unwind"];
    bb392__0_332 -> bb393__0_332 [label="return"];
    bb392__0_332 -> bb759__0_332 [label="unwind"];
    bb393__0_332 -> bb671__0_332 [label=""];
    bb394__0_332 -> bb395__0_332 [label="return"];
    bb394__0_332 -> bb759__0_332 [label="unwind"];
    bb395__0_332 -> bb396__0_332 [label="return"];
    bb395__0_332 -> bb759__0_332 [label="unwind"];
    bb396__0_332 -> bb397__0_332 [label="0"];
    bb396__0_332 -> bb398__0_332 [label="1"];
    bb396__0_332 -> bb5__0_332 [label="otherwise"];
    bb397__0_332 -> bb400__0_332 [label="return"];
    bb397__0_332 -> bb759__0_332 [label="unwind"];
    bb398__0_332 -> bb399__0_332 [label="return"];
    bb398__0_332 -> bb759__0_332 [label="unwind"];
    bb399__0_332 -> bb671__0_332 [label=""];
    bb400__0_332 -> bb401__0_332 [label="return"];
    bb400__0_332 -> bb759__0_332 [label="unwind"];
    bb401__0_332 -> bb402__0_332 [label="0"];
    bb401__0_332 -> bb403__0_332 [label="1"];
    bb401__0_332 -> bb5__0_332 [label="otherwise"];
    bb402__0_332 -> bb405__0_332 [label="return"];
    bb402__0_332 -> bb759__0_332 [label="unwind"];
    bb403__0_332 -> bb404__0_332 [label="return"];
    bb403__0_332 -> bb759__0_332 [label="unwind"];
    bb404__0_332 -> bb669__0_332 [label=""];
    bb405__0_332 -> bb406__0_332 [label="return"];
    bb405__0_332 -> bb759__0_332 [label="unwind"];
    bb406__0_332 -> bb407__0_332 [label="return"];
    bb406__0_332 -> bb759__0_332 [label="unwind"];
    bb407__0_332 -> bb408__0_332 [label="0"];
    bb407__0_332 -> bb409__0_332 [label="1"];
    bb407__0_332 -> bb5__0_332 [label="otherwise"];
    bb408__0_332 -> bb411__0_332 [label="return"];
    bb408__0_332 -> bb759__0_332 [label="unwind"];
    bb409__0_332 -> bb410__0_332 [label="return"];
    bb409__0_332 -> bb759__0_332 [label="unwind"];
    bb410__0_332 -> bb669__0_332 [label=""];
    bb411__0_332 -> bb412__0_332 [label="return"];
    bb411__0_332 -> bb759__0_332 [label="unwind"];
    bb412__0_332 -> bb413__0_332 [label="return"];
    bb412__0_332 -> bb759__0_332 [label="unwind"];
    bb413__0_332 -> bb414__0_332 [label="return"];
    bb413__0_332 -> bb759__0_332 [label="unwind"];
    bb414__0_332 -> bb415__0_332 [label="return"];
    bb414__0_332 -> bb759__0_332 [label="unwind"];
    bb415__0_332 -> bb416__0_332 [label="0"];
    bb415__0_332 -> bb417__0_332 [label="1"];
    bb415__0_332 -> bb5__0_332 [label="otherwise"];
    bb416__0_332 -> bb419__0_332 [label="return"];
    bb416__0_332 -> bb759__0_332 [label="unwind"];
    bb417__0_332 -> bb418__0_332 [label="return"];
    bb417__0_332 -> bb759__0_332 [label="unwind"];
    bb418__0_332 -> bb668__0_332 [label=""];
    bb419__0_332 -> bb420__0_332 [label="return"];
    bb419__0_332 -> bb759__0_332 [label="unwind"];
    bb420__0_332 -> bb421__0_332 [label="0"];
    bb420__0_332 -> bb422__0_332 [label="1"];
    bb420__0_332 -> bb5__0_332 [label="otherwise"];
    bb421__0_332 -> bb424__0_332 [label="return"];
    bb421__0_332 -> bb759__0_332 [label="unwind"];
    bb422__0_332 -> bb423__0_332 [label="return"];
    bb422__0_332 -> bb759__0_332 [label="unwind"];
    bb423__0_332 -> bb665__0_332 [label=""];
    bb424__0_332 -> bb425__0_332 [label="return"];
    bb424__0_332 -> bb759__0_332 [label="unwind"];
    bb425__0_332 -> bb426__0_332 [label="return"];
    bb425__0_332 -> bb759__0_332 [label="unwind"];
    bb426__0_332 -> bb427__0_332 [label="0"];
    bb426__0_332 -> bb428__0_332 [label="1"];
    bb426__0_332 -> bb5__0_332 [label="otherwise"];
    bb427__0_332 -> bb430__0_332 [label="return"];
    bb427__0_332 -> bb759__0_332 [label="unwind"];
    bb428__0_332 -> bb429__0_332 [label="return"];
    bb428__0_332 -> bb759__0_332 [label="unwind"];
    bb429__0_332 -> bb665__0_332 [label=""];
    bb430__0_332 -> bb431__0_332 [label="return"];
    bb430__0_332 -> bb759__0_332 [label="unwind"];
    bb431__0_332 -> bb432__0_332 [label="0"];
    bb431__0_332 -> bb433__0_332 [label="1"];
    bb431__0_332 -> bb5__0_332 [label="otherwise"];
    bb432__0_332 -> bb436__0_332 [label="0"];
    bb432__0_332 -> bb435__0_332 [label="otherwise"];
    bb433__0_332 -> bb434__0_332 [label="return"];
    bb433__0_332 -> bb759__0_332 [label="unwind"];
    bb434__0_332 -> bb666__0_332 [label=""];
    bb435__0_332 -> bb437__0_332 [label="return"];
    bb435__0_332 -> bb759__0_332 [label="unwind"];
    bb436__0_332 -> bb438__0_332 [label="return"];
    bb436__0_332 -> bb759__0_332 [label="unwind"];
    bb437__0_332 -> bb667__0_332 [label=""];
    bb438__0_332 -> bb439__0_332 [label="return"];
    bb438__0_332 -> bb759__0_332 [label="unwind"];
    bb439__0_332 -> bb440__0_332 [label="0"];
    bb439__0_332 -> bb441__0_332 [label="1"];
    bb439__0_332 -> bb5__0_332 [label="otherwise"];
    bb440__0_332 -> bb443__0_332 [label="return"];
    bb440__0_332 -> bb759__0_332 [label="unwind"];
    bb441__0_332 -> bb442__0_332 [label="return"];
    bb441__0_332 -> bb759__0_332 [label="unwind"];
    bb442__0_332 -> bb662__0_332 [label=""];
    bb443__0_332 -> bb444__0_332 [label="return"];
    bb443__0_332 -> bb759__0_332 [label="unwind"];
    bb444__0_332 -> bb445__0_332 [label="0"];
    bb444__0_332 -> bb446__0_332 [label="1"];
    bb444__0_332 -> bb5__0_332 [label="otherwise"];
    bb445__0_332 -> bb448__0_332 [label="return"];
    bb445__0_332 -> bb759__0_332 [label="unwind"];
    bb446__0_332 -> bb447__0_332 [label="return"];
    bb446__0_332 -> bb759__0_332 [label="unwind"];
    bb447__0_332 -> bb662__0_332 [label=""];
    bb448__0_332 -> bb449__0_332 [label="return"];
    bb448__0_332 -> bb759__0_332 [label="unwind"];
    bb449__0_332 -> bb450__0_332 [label="0"];
    bb449__0_332 -> bb451__0_332 [label="1"];
    bb449__0_332 -> bb5__0_332 [label="otherwise"];
    bb450__0_332 -> bb453__0_332 [label="success"];
    bb450__0_332 -> bb759__0_332 [label="unwind"];
    bb451__0_332 -> bb452__0_332 [label="return"];
    bb451__0_332 -> bb759__0_332 [label="unwind"];
    bb452__0_332 -> bb663__0_332 [label=""];
    bb453__0_332 -> bb455__0_332 [label="0"];
    bb453__0_332 -> bb454__0_332 [label="otherwise"];
    bb454__0_332 -> bb456__0_332 [label=""];
    bb455__0_332 -> bb456__0_332 [label=""];
    bb456__0_332 -> bb457__0_332 [label="return"];
    bb456__0_332 -> bb759__0_332 [label="unwind"];
    bb457__0_332 -> bb458__0_332 [label="return"];
    bb457__0_332 -> bb759__0_332 [label="unwind"];
    bb458__0_332 -> bb459__0_332 [label="return"];
    bb458__0_332 -> bb759__0_332 [label="unwind"];
    bb459__0_332 -> bb460__0_332 [label="return"];
    bb459__0_332 -> bb759__0_332 [label="unwind"];
    bb460__0_332 -> bb461__0_332 [label="0"];
    bb460__0_332 -> bb462__0_332 [label="1"];
    bb460__0_332 -> bb5__0_332 [label="otherwise"];
    bb461__0_332 -> bb464__0_332 [label="return"];
    bb461__0_332 -> bb711__0_332 [label="unwind"];
    bb462__0_332 -> bb463__0_332 [label="return"];
    bb462__0_332 -> bb757__0_332 [label="unwind"];
    bb463__0_332 -> bb740__0_332 [label=""];
    bb464__0_332 -> bb465__0_332 [label="return"];
    bb464__0_332 -> bb711__0_332 [label="unwind"];
    bb465__0_332 -> bb466__0_332 [label="return"];
    bb465__0_332 -> bb711__0_332 [label="unwind"];
    bb466__0_332 -> bb467__0_332 [label="0"];
    bb466__0_332 -> bb468__0_332 [label="1"];
    bb466__0_332 -> bb5__0_332 [label="otherwise"];
    bb467__0_332 -> bb736__0_332 [label="return"];
    bb467__0_332 -> bb757__0_332 [label="unwind"];
    bb468__0_332 -> bb469__0_332 [label="return"];
    bb468__0_332 -> bb711__0_332 [label="unwind"];
    bb469__0_332 -> bb740__0_332 [label="return"];
    bb469__0_332 -> bb757__0_332 [label="unwind"];
    bb470__0_332 -> bb471__0_332 [label="success"];
    bb470__0_332 -> bb759__0_332 [label="unwind"];
    bb471__0_332 -> bb472__0_332 [label="return"];
    bb471__0_332 -> bb759__0_332 [label="unwind"];
    bb472__0_332 -> bb473__0_332 [label="return"];
    bb472__0_332 -> bb759__0_332 [label="unwind"];
    bb473__0_332 -> bb474__0_332 [label="return"];
    bb473__0_332 -> bb759__0_332 [label="unwind"];
    bb474__0_332 -> bb475__0_332 [label="0"];
    bb474__0_332 -> bb476__0_332 [label="1"];
    bb474__0_332 -> bb5__0_332 [label="otherwise"];
    bb475__0_332 -> bb478__0_332 [label="return"];
    bb475__0_332 -> bb710__0_332 [label="unwind"];
    bb476__0_332 -> bb477__0_332 [label="return"];
    bb476__0_332 -> bb756__0_332 [label="unwind"];
    bb477__0_332 -> bb739__0_332 [label=""];
    bb478__0_332 -> bb479__0_332 [label="return"];
    bb478__0_332 -> bb710__0_332 [label="unwind"];
    bb479__0_332 -> bb480__0_332 [label="return"];
    bb479__0_332 -> bb710__0_332 [label="unwind"];
    bb480__0_332 -> bb481__0_332 [label="0"];
    bb480__0_332 -> bb482__0_332 [label="1"];
    bb480__0_332 -> bb5__0_332 [label="otherwise"];
    bb481__0_332 -> bb737__0_332 [label="return"];
    bb481__0_332 -> bb756__0_332 [label="unwind"];
    bb482__0_332 -> bb483__0_332 [label="return"];
    bb482__0_332 -> bb710__0_332 [label="unwind"];
    bb483__0_332 -> bb739__0_332 [label="return"];
    bb483__0_332 -> bb756__0_332 [label="unwind"];
    bb484__0_332 -> bb485__0_332 [label="return"];
    bb484__0_332 -> bb759__0_332 [label="unwind"];
    bb485__0_332 -> bb486__0_332 [label="return"];
    bb485__0_332 -> bb759__0_332 [label="unwind"];
    bb486__0_332 -> bb487__0_332 [label="0"];
    bb486__0_332 -> bb488__0_332 [label="1"];
    bb486__0_332 -> bb5__0_332 [label="otherwise"];
    bb487__0_332 -> bb490__0_332 [label="return"];
    bb487__0_332 -> bb759__0_332 [label="unwind"];
    bb488__0_332 -> bb489__0_332 [label="return"];
    bb488__0_332 -> bb759__0_332 [label="unwind"];
    bb489__0_332 -> bb659__0_332 [label=""];
    bb490__0_332 -> bb491__0_332 [label="return"];
    bb490__0_332 -> bb759__0_332 [label="unwind"];
    bb491__0_332 -> bb492__0_332 [label="0"];
    bb491__0_332 -> bb493__0_332 [label="1"];
    bb491__0_332 -> bb5__0_332 [label="otherwise"];
    bb492__0_332 -> bb495__0_332 [label="return"];
    bb492__0_332 -> bb759__0_332 [label="unwind"];
    bb493__0_332 -> bb494__0_332 [label="return"];
    bb493__0_332 -> bb759__0_332 [label="unwind"];
    bb494__0_332 -> bb658__0_332 [label=""];
    bb495__0_332 -> bb496__0_332 [label="return"];
    bb495__0_332 -> bb759__0_332 [label="unwind"];
    bb496__0_332 -> bb497__0_332 [label="return"];
    bb496__0_332 -> bb759__0_332 [label="unwind"];
    bb497__0_332 -> bb498__0_332 [label="0"];
    bb497__0_332 -> bb499__0_332 [label="1"];
    bb497__0_332 -> bb5__0_332 [label="otherwise"];
    bb498__0_332 -> bb501__0_332 [label="return"];
    bb498__0_332 -> bb709__0_332 [label="unwind"];
    bb499__0_332 -> bb500__0_332 [label="return"];
    bb499__0_332 -> bb755__0_332 [label="unwind"];
    bb500__0_332 -> bb657__0_332 [label=""];
    bb501__0_332 -> bb738__0_332 [label="return"];
    bb501__0_332 -> bb755__0_332 [label="unwind"];
    bb502__0_332 -> bb503__0_332 [label="return"];
    bb502__0_332 -> bb759__0_332 [label="unwind"];
    bb503__0_332 -> bb504__0_332 [label="return"];
    bb503__0_332 -> bb759__0_332 [label="unwind"];
    bb504__0_332 -> bb505__0_332 [label="return"];
    bb504__0_332 -> bb759__0_332 [label="unwind"];
    bb505__0_332 -> bb506__0_332 [label="return"];
    bb505__0_332 -> bb759__0_332 [label="unwind"];
    bb506__0_332 -> bb507__0_332 [label="0"];
    bb506__0_332 -> bb508__0_332 [label="1"];
    bb506__0_332 -> bb5__0_332 [label="otherwise"];
    bb507__0_332 -> bb510__0_332 [label="return"];
    bb507__0_332 -> bb759__0_332 [label="unwind"];
    bb508__0_332 -> bb509__0_332 [label="return"];
    bb508__0_332 -> bb759__0_332 [label="unwind"];
    bb509__0_332 -> bb657__0_332 [label=""];
    bb510__0_332 -> bb511__0_332 [label="return"];
    bb510__0_332 -> bb759__0_332 [label="unwind"];
    bb511__0_332 -> bb512__0_332 [label="return"];
    bb511__0_332 -> bb759__0_332 [label="unwind"];
    bb512__0_332 -> bb513__0_332 [label="return"];
    bb512__0_332 -> bb759__0_332 [label="unwind"];
    bb513__0_332 -> bb514__0_332 [label="0"];
    bb513__0_332 -> bb515__0_332 [label="1"];
    bb513__0_332 -> bb5__0_332 [label="otherwise"];
    bb514__0_332 -> bb517__0_332 [label="return"];
    bb514__0_332 -> bb759__0_332 [label="unwind"];
    bb515__0_332 -> bb516__0_332 [label="return"];
    bb515__0_332 -> bb759__0_332 [label="unwind"];
    bb516__0_332 -> bb657__0_332 [label=""];
    bb517__0_332 -> bb518__0_332 [label="return"];
    bb517__0_332 -> bb759__0_332 [label="unwind"];
    bb518__0_332 -> bb519__0_332 [label="return"];
    bb518__0_332 -> bb759__0_332 [label="unwind"];
    bb519__0_332 -> bb520__0_332 [label="0"];
    bb519__0_332 -> bb521__0_332 [label="1"];
    bb519__0_332 -> bb5__0_332 [label="otherwise"];
    bb520__0_332 -> bb523__0_332 [label="return"];
    bb520__0_332 -> bb708__0_332 [label="unwind"];
    bb521__0_332 -> bb522__0_332 [label="return"];
    bb521__0_332 -> bb754__0_332 [label="unwind"];
    bb522__0_332 -> bb656__0_332 [label=""];
    bb523__0_332 -> bb524__0_332 [label="return"];
    bb523__0_332 -> bb708__0_332 [label="unwind"];
    bb524__0_332 -> bb525__0_332 [label="0"];
    bb524__0_332 -> bb532__0_332 [label="otherwise"];
    bb525__0_332 -> bb526__0_332 [label="return"];
    bb525__0_332 -> bb708__0_332 [label="unwind"];
    bb526__0_332 -> bb527__0_332 [label="return"];
    bb526__0_332 -> bb708__0_332 [label="unwind"];
    bb527__0_332 -> bb528__0_332 [label="return"];
    bb527__0_332 -> bb708__0_332 [label="unwind"];
    bb528__0_332 -> bb529__0_332 [label="0"];
    bb528__0_332 -> bb530__0_332 [label="1"];
    bb528__0_332 -> bb5__0_332 [label="otherwise"];
    bb529__0_332 -> bb533__0_332 [label=""];
    bb530__0_332 -> bb531__0_332 [label="return"];
    bb530__0_332 -> bb708__0_332 [label="unwind"];
    bb531__0_332 -> bb655__0_332 [label=""];
    bb532__0_332 -> bb533__0_332 [label=""];
    bb533__0_332 -> bb535__0_332 [label="0"];
    bb533__0_332 -> bb534__0_332 [label="otherwise"];
    bb534__0_332 -> bb655__0_332 [label=""];
    bb535__0_332 -> bb536__0_332 [label="return"];
    bb535__0_332 -> bb708__0_332 [label="unwind"];
    bb536__0_332 -> bb537__0_332 [label="return"];
    bb536__0_332 -> bb708__0_332 [label="unwind"];
    bb537__0_332 -> bb538__0_332 [label="0"];
    bb537__0_332 -> bb539__0_332 [label="1"];
    bb537__0_332 -> bb5__0_332 [label="otherwise"];
    bb538__0_332 -> bb541__0_332 [label="return"];
    bb538__0_332 -> bb708__0_332 [label="unwind"];
    bb539__0_332 -> bb540__0_332 [label="return"];
    bb539__0_332 -> bb708__0_332 [label="unwind"];
    bb540__0_332 -> bb653__0_332 [label=""];
    bb541__0_332 -> bb542__0_332 [label="return"];
    bb541__0_332 -> bb708__0_332 [label="unwind"];
    bb542__0_332 -> bb543__0_332 [label="0"];
    bb542__0_332 -> bb544__0_332 [label="1"];
    bb542__0_332 -> bb5__0_332 [label="otherwise"];
    bb543__0_332 -> bb546__0_332 [label="return"];
    bb543__0_332 -> bb708__0_332 [label="unwind"];
    bb544__0_332 -> bb545__0_332 [label="return"];
    bb544__0_332 -> bb708__0_332 [label="unwind"];
    bb545__0_332 -> bb650__0_332 [label=""];
    bb546__0_332 -> bb547__0_332 [label="return"];
    bb546__0_332 -> bb708__0_332 [label="unwind"];
    bb547__0_332 -> bb548__0_332 [label="0"];
    bb547__0_332 -> bb549__0_332 [label="1"];
    bb547__0_332 -> bb5__0_332 [label="otherwise"];
    bb548__0_332 -> bb551__0_332 [label="return"];
    bb548__0_332 -> bb708__0_332 [label="unwind"];
    bb549__0_332 -> bb550__0_332 [label="return"];
    bb549__0_332 -> bb708__0_332 [label="unwind"];
    bb550__0_332 -> bb650__0_332 [label=""];
    bb551__0_332 -> bb552__0_332 [label="return"];
    bb551__0_332 -> bb708__0_332 [label="unwind"];
    bb552__0_332 -> bb553__0_332 [label="0"];
    bb552__0_332 -> bb554__0_332 [label="1"];
    bb552__0_332 -> bb5__0_332 [label="otherwise"];
    bb553__0_332 -> bb556__0_332 [label="return"];
    bb553__0_332 -> bb708__0_332 [label="unwind"];
    bb554__0_332 -> bb555__0_332 [label="return"];
    bb554__0_332 -> bb708__0_332 [label="unwind"];
    bb555__0_332 -> bb651__0_332 [label=""];
    bb556__0_332 -> bb557__0_332 [label="return"];
    bb556__0_332 -> bb708__0_332 [label="unwind"];
    bb557__0_332 -> bb558__0_332 [label="0"];
    bb557__0_332 -> bb559__0_332 [label="1"];
    bb557__0_332 -> bb5__0_332 [label="otherwise"];
    bb558__0_332 -> bb561__0_332 [label="success"];
    bb558__0_332 -> bb708__0_332 [label="unwind"];
    bb559__0_332 -> bb560__0_332 [label="return"];
    bb559__0_332 -> bb708__0_332 [label="unwind"];
    bb560__0_332 -> bb652__0_332 [label=""];
    bb561__0_332 -> bb562__0_332 [label="return"];
    bb561__0_332 -> bb708__0_332 [label="unwind"];
    bb562__0_332 -> bb563__0_332 [label="return"];
    bb562__0_332 -> bb708__0_332 [label="unwind"];
    bb563__0_332 -> bb564__0_332 [label="0"];
    bb563__0_332 -> bb565__0_332 [label="1"];
    bb563__0_332 -> bb5__0_332 [label="otherwise"];
    bb564__0_332 -> bb567__0_332 [label="return"];
    bb564__0_332 -> bb707__0_332 [label="unwind"];
    bb565__0_332 -> bb566__0_332 [label="return"];
    bb565__0_332 -> bb753__0_332 [label="unwind"];
    bb566__0_332 -> bb649__0_332 [label=""];
    bb567__0_332 -> bb568__0_332 [label="return"];
    bb567__0_332 -> bb707__0_332 [label="unwind"];
    bb568__0_332 -> bb569__0_332 [label="return"];
    bb568__0_332 -> bb707__0_332 [label="unwind"];
    bb569__0_332 -> bb570__0_332 [label="0"];
    bb569__0_332 -> bb571__0_332 [label="1"];
    bb569__0_332 -> bb5__0_332 [label="otherwise"];
    bb570__0_332 -> bb573__0_332 [label="return"];
    bb570__0_332 -> bb707__0_332 [label="unwind"];
    bb571__0_332 -> bb572__0_332 [label="return"];
    bb571__0_332 -> bb707__0_332 [label="unwind"];
    bb572__0_332 -> bb648__0_332 [label=""];
    bb573__0_332 -> bb574__0_332 [label="return"];
    bb573__0_332 -> bb707__0_332 [label="unwind"];
    bb574__0_332 -> bb575__0_332 [label="return"];
    bb574__0_332 -> bb707__0_332 [label="unwind"];
    bb575__0_332 -> bb576__0_332 [label="0"];
    bb575__0_332 -> bb577__0_332 [label="1"];
    bb575__0_332 -> bb5__0_332 [label="otherwise"];
    bb576__0_332 -> bb579__0_332 [label="return"];
    bb576__0_332 -> bb707__0_332 [label="unwind"];
    bb577__0_332 -> bb578__0_332 [label="return"];
    bb577__0_332 -> bb707__0_332 [label="unwind"];
    bb578__0_332 -> bb648__0_332 [label=""];
    bb579__0_332 -> bb580__0_332 [label="return"];
    bb579__0_332 -> bb707__0_332 [label="unwind"];
    bb580__0_332 -> bb581__0_332 [label="return"];
    bb580__0_332 -> bb707__0_332 [label="unwind"];
    bb581__0_332 -> bb582__0_332 [label="return"];
    bb581__0_332 -> bb707__0_332 [label="unwind"];
    bb582__0_332 -> bb583__0_332 [label="0"];
    bb582__0_332 -> bb584__0_332 [label="1"];
    bb582__0_332 -> bb5__0_332 [label="otherwise"];
    bb583__0_332 -> bb586__0_332 [label="return"];
    bb583__0_332 -> bb707__0_332 [label="unwind"];
    bb584__0_332 -> bb585__0_332 [label="return"];
    bb584__0_332 -> bb707__0_332 [label="unwind"];
    bb585__0_332 -> bb647__0_332 [label=""];
    bb586__0_332 -> bb587__0_332 [label="return"];
    bb586__0_332 -> bb707__0_332 [label="unwind"];
    bb587__0_332 -> bb588__0_332 [label="0"];
    bb587__0_332 -> bb589__0_332 [label="1"];
    bb587__0_332 -> bb5__0_332 [label="otherwise"];
    bb588__0_332 -> bb591__0_332 [label="return"];
    bb588__0_332 -> bb707__0_332 [label="unwind"];
    bb589__0_332 -> bb590__0_332 [label="return"];
    bb589__0_332 -> bb707__0_332 [label="unwind"];
    bb590__0_332 -> bb647__0_332 [label=""];
    bb591__0_332 -> bb592__0_332 [label="return"];
    bb591__0_332 -> bb708__0_332 [label="unwind"];
    bb592__0_332 -> bb593__0_332 [label="return"];
    bb592__0_332 -> bb708__0_332 [label="unwind"];
    bb593__0_332 -> bb594__0_332 [label="return"];
    bb593__0_332 -> bb708__0_332 [label="unwind"];
    bb594__0_332 -> bb595__0_332 [label="return"];
    bb594__0_332 -> bb708__0_332 [label="unwind"];
    bb595__0_332 -> bb596__0_332 [label="0"];
    bb595__0_332 -> bb597__0_332 [label="1"];
    bb595__0_332 -> bb5__0_332 [label="otherwise"];
    bb596__0_332 -> bb599__0_332 [label="return"];
    bb596__0_332 -> bb708__0_332 [label="unwind"];
    bb597__0_332 -> bb598__0_332 [label="return"];
    bb597__0_332 -> bb708__0_332 [label="unwind"];
    bb598__0_332 -> bb654__0_332 [label=""];
    bb599__0_332 -> bb600__0_332 [label="return"];
    bb599__0_332 -> bb708__0_332 [label="unwind"];
    bb600__0_332 -> bb601__0_332 [label="0"];
    bb600__0_332 -> bb602__0_332 [label="1"];
    bb600__0_332 -> bb5__0_332 [label="otherwise"];
    bb601__0_332 -> bb604__0_332 [label="return"];
    bb601__0_332 -> bb708__0_332 [label="unwind"];
    bb602__0_332 -> bb603__0_332 [label="return"];
    bb602__0_332 -> bb708__0_332 [label="unwind"];
    bb603__0_332 -> bb646__0_332 [label=""];
    bb604__0_332 -> bb605__0_332 [label="return"];
    bb604__0_332 -> bb708__0_332 [label="unwind"];
    bb605__0_332 -> bb606__0_332 [label="return"];
    bb605__0_332 -> bb708__0_332 [label="unwind"];
    bb606__0_332 -> bb607__0_332 [label="0"];
    bb606__0_332 -> bb608__0_332 [label="1"];
    bb606__0_332 -> bb5__0_332 [label="otherwise"];
    bb607__0_332 -> bb610__0_332 [label="return"];
    bb607__0_332 -> bb708__0_332 [label="unwind"];
    bb608__0_332 -> bb609__0_332 [label="return"];
    bb608__0_332 -> bb708__0_332 [label="unwind"];
    bb609__0_332 -> bb646__0_332 [label=""];
    bb610__0_332 -> bb614__0_332 [label="0"];
    bb610__0_332 -> bb611__0_332 [label="otherwise"];
    bb611__0_332 -> bb612__0_332 [label="return"];
    bb611__0_332 -> bb708__0_332 [label="unwind"];
    bb612__0_332 -> bb613__0_332 [label="return"];
    bb612__0_332 -> bb708__0_332 [label="unwind"];
    bb613__0_332 -> bb622__0_332 [label=""];
    bb614__0_332 -> bb615__0_332 [label="return"];
    bb614__0_332 -> bb708__0_332 [label="unwind"];
    bb615__0_332 -> bb616__0_332 [label="return"];
    bb615__0_332 -> bb708__0_332 [label="unwind"];
    bb616__0_332 -> bb620__0_332 [label="0"];
    bb616__0_332 -> bb617__0_332 [label="otherwise"];
    bb617__0_332 -> bb618__0_332 [label="return"];
    bb617__0_332 -> bb708__0_332 [label="unwind"];
    bb618__0_332 -> bb619__0_332 [label="return"];
    bb618__0_332 -> bb708__0_332 [label="unwind"];
    bb619__0_332 -> bb621__0_332 [label=""];
    bb620__0_332 -> bb621__0_332 [label=""];
    bb621__0_332 -> bb622__0_332 [label=""];
    bb622__0_332 -> bb623__0_332 [label="return"];
    bb622__0_332 -> bb708__0_332 [label="unwind"];
    bb623__0_332 -> bb624__0_332 [label="return"];
    bb623__0_332 -> bb708__0_332 [label="unwind"];
    bb624__0_332 -> bb625__0_332 [label="0"];
    bb624__0_332 -> bb626__0_332 [label="1"];
    bb624__0_332 -> bb5__0_332 [label="otherwise"];
    bb625__0_332 -> bb628__0_332 [label="return"];
    bb625__0_332 -> bb708__0_332 [label="unwind"];
    bb626__0_332 -> bb627__0_332 [label="return"];
    bb626__0_332 -> bb708__0_332 [label="unwind"];
    bb627__0_332 -> bb645__0_332 [label=""];
    bb628__0_332 -> bb629__0_332 [label="return"];
    bb628__0_332 -> bb708__0_332 [label="unwind"];
    bb629__0_332 -> bb630__0_332 [label="return"];
    bb629__0_332 -> bb706__0_332 [label="unwind"];
    bb630__0_332 -> bb631__0_332 [label="return"];
    bb630__0_332 -> bb706__0_332 [label="unwind"];
    bb631__0_332 -> bb632__0_332 [label="return"];
    bb631__0_332 -> bb706__0_332 [label="unwind"];
    bb632__0_332 -> bb633__0_332 [label="0"];
    bb632__0_332 -> bb634__0_332 [label="1"];
    bb632__0_332 -> bb5__0_332 [label="otherwise"];
    bb633__0_332 -> bb636__0_332 [label="return"];
    bb633__0_332 -> bb706__0_332 [label="unwind"];
    bb634__0_332 -> bb635__0_332 [label="return"];
    bb634__0_332 -> bb706__0_332 [label="unwind"];
    bb635__0_332 -> bb644__0_332 [label="return"];
    bb635__0_332 -> bb708__0_332 [label="unwind"];
    bb636__0_332 -> bb637__0_332 [label="return"];
    bb636__0_332 -> bb704__0_332 [label="unwind"];
    bb637__0_332 -> bb638__0_332 [label="return"];
    bb637__0_332 -> bb703__0_332 [label="unwind"];
    bb638__0_332 -> bb639__0_332 [label="return"];
    bb638__0_332 -> bb703__0_332 [label="unwind"];
    bb639__0_332 -> bb640__0_332 [label="return"];
    bb639__0_332 -> bb704__0_332 [label="unwind"];
    bb640__0_332 -> bb641__0_332 [label="return"];
    bb640__0_332 -> bb705__0_332 [label="unwind"];
    bb641__0_332 -> bb642__0_332 [label="return"];
    bb641__0_332 -> bb708__0_332 [label="unwind"];
    bb642__0_332 -> bb643__0_332 [label="return"];
    bb642__0_332 -> bb759__0_332 [label="unwind"];
    bb643__0_332 -> bb702__0_332 [label=""];
    bb644__0_332 -> bb645__0_332 [label=""];
    bb645__0_332 -> bb646__0_332 [label=""];
    bb646__0_332 -> bb654__0_332 [label=""];
    bb647__0_332 -> bb648__0_332 [label=""];
    bb648__0_332 -> bb649__0_332 [label="return"];
    bb648__0_332 -> bb708__0_332 [label="unwind"];
    bb649__0_332 -> bb654__0_332 [label=""];
    bb650__0_332 -> bb651__0_332 [label=""];
    bb651__0_332 -> bb652__0_332 [label=""];
    bb652__0_332 -> bb653__0_332 [label=""];
    bb653__0_332 -> bb654__0_332 [label=""];
    bb654__0_332 -> bb655__0_332 [label=""];
    bb655__0_332 -> bb656__0_332 [label="return"];
    bb655__0_332 -> bb759__0_332 [label="unwind"];
    bb656__0_332 -> bb657__0_332 [label=""];
    bb657__0_332 -> bb658__0_332 [label=""];
    bb658__0_332 -> bb659__0_332 [label=""];
    bb659__0_332 -> bb660__0_332 [label=""];
    bb660__0_332 -> bb661__0_332 [label=""];
    bb661__0_332 -> bb664__0_332 [label=""];
    bb662__0_332 -> bb663__0_332 [label=""];
    bb663__0_332 -> bb664__0_332 [label=""];
    bb664__0_332 -> bb667__0_332 [label=""];
    bb665__0_332 -> bb666__0_332 [label=""];
    bb666__0_332 -> bb667__0_332 [label=""];
    bb667__0_332 -> bb668__0_332 [label=""];
    bb668__0_332 -> bb670__0_332 [label=""];
    bb669__0_332 -> bb670__0_332 [label=""];
    bb670__0_332 -> bb672__0_332 [label=""];
    bb671__0_332 -> bb672__0_332 [label=""];
    bb672__0_332 -> bb673__0_332 [label=""];
    bb673__0_332 -> bb674__0_332 [label="0"];
    bb673__0_332 -> bb741__0_332 [label="otherwise"];
    bb674__0_332 -> bb675__0_332 [label="0"];
    bb674__0_332 -> bb742__0_332 [label="otherwise"];
    bb675__0_332 -> bb676__0_332 [label=""];
    bb676__0_332 -> bb677__0_332 [label=""];
    bb677__0_332 -> bb679__0_332 [label=""];
    bb678__0_332 -> bb743__0_332 [label="return"];
    bb678__0_332 -> bb764__0_332 [label="unwind"];
    bb679__0_332 -> bb681__0_332 [label=""];
    bb680__0_332 -> bb744__0_332 [label="return"];
    bb680__0_332 -> bb765__0_332 [label="unwind"];
    bb681__0_332 -> bb687__0_332 [label=""];
    bb682__0_332 -> bb683__0_332 [label=""];
    bb683__0_332 -> bb684__0_332 [label=""];
    bb684__0_332 -> bb686__0_332 [label=""];
    bb685__0_332 -> bb686__0_332 [label=""];
    bb686__0_332 -> bb687__0_332 [label=""];
    bb687__0_332 -> bb688__0_332 [label=""];
    bb688__0_332 -> bb689__0_332 [label=""];
    bb689__0_332 -> bb690__0_332 [label="0"];
    bb689__0_332 -> bb745__0_332 [label="otherwise"];
    bb690__0_332 -> bb691__0_332 [label="0"];
    bb690__0_332 -> bb746__0_332 [label="otherwise"];
    bb691__0_332 -> bb692__0_332 [label=""];
    bb692__0_332 -> bb693__0_332 [label=""];
    bb693__0_332 -> bb697__0_332 [label=""];
    bb694__0_332 -> bb695__0_332 [label=""];
    bb695__0_332 -> bb697__0_332 [label=""];
    bb696__0_332 -> bb697__0_332 [label=""];
    bb697__0_332 -> bb750__0_332 [label=""];
    bb698__0_332 -> bb699__0_332 [label=""];
    bb699__0_332 -> bb700__0_332 [label="0"];
    bb699__0_332 -> bb751__0_332 [label="otherwise"];
    bb700__0_332 -> bb701__0_332 [label="0"];
    bb700__0_332 -> bb752__0_332 [label="otherwise"];
    bb701__0_332 -> bb702__0_332 [label=""];
    bb703__0_332 -> bb704__0_332 [label="return"];
    bb704__0_332 -> bb705__0_332 [label="return"];
    bb705__0_332 -> bb708__0_332 [label="return"];
    bb706__0_332 -> bb708__0_332 [label="return"];
    bb707__0_332 -> bb708__0_332 [label="return"];
    bb708__0_332 -> bb759__0_332 [label="return"];
    bb709__0_332 -> bb755__0_332 [label="return"];
    bb710__0_332 -> bb756__0_332 [label="return"];
    bb711__0_332 -> bb757__0_332 [label="return"];
    bb712__0_332 -> bb764__0_332 [label="return"];
    bb713__0_332 -> bb767__0_332 [label="return"];
    bb714__0_332 -> bb765__0_332 [label="return"];
    bb715__0_332 -> bb716__0_332 [label="return"];
    bb716__0_332 -> bb717__0_332 [label="return"];
    bb717__0_332 -> bb767__0_332 [label="return"];
    bb718__0_332 -> bb767__0_332 [label="return"];
    bb719__0_332 -> bb775__0_332 [label="return"];
    bb720__0_332 -> bb775__0_332 [label="return"];
    bb721__0_332 -> bb772__0_332 [label="return"];
    bb722__0_332 -> bb773__0_332 [label="return"];
    bb723__0_332 -> bb775__0_332 [label="return"];
    bb724__0_332 -> bb775__0_332 [label="return"];
    bb725__0_332 -> bb778__0_332 [label="return"];
    bb726__0_332 -> bb778__0_332 [label="return"];
    bb727__0_332 -> bb778__0_332 [label="return"];
    bb728__0_332 -> bb778__0_332 [label="return"];
    bb729__0_332 -> bb778__0_332 [label="return"];
    bb730__0_332 -> bb778__0_332 [label="return"];
    bb732__0_332 -> bb114__0_332 [label="return"];
    bb732__0_332 -> bb775__0_332 [label="unwind"];
    bb733__0_332 -> bb126__0_332 [label="return"];
    bb733__0_332 -> bb775__0_332 [label="unwind"];
    bb734__0_332 -> bb326__0_332 [label="0"];
    bb734__0_332 -> bb327__0_332 [label="otherwise"];
    bb735__0_332 -> bb360__0_332 [label="return"];
    bb735__0_332 -> bb767__0_332 [label="unwind"];
    bb736__0_332 -> bb470__0_332 [label="return"];
    bb736__0_332 -> bb759__0_332 [label="unwind"];
    bb737__0_332 -> bb484__0_332 [label="return"];
    bb737__0_332 -> bb759__0_332 [label="unwind"];
    bb738__0_332 -> bb502__0_332 [label="return"];
    bb738__0_332 -> bb759__0_332 [label="unwind"];
    bb739__0_332 -> bb660__0_332 [label=""];
    bb740__0_332 -> bb661__0_332 [label=""];
    bb741__0_332 -> bb674__0_332 [label="return"];
    bb741__0_332 -> bb762__0_332 [label="unwind"];
    bb742__0_332 -> bb675__0_332 [label="return"];
    bb742__0_332 -> bb767__0_332 [label="unwind"];
    bb743__0_332 -> bb679__0_332 [label=""];
    bb744__0_332 -> bb681__0_332 [label=""];
    bb745__0_332 -> bb690__0_332 [label="return"];
    bb745__0_332 -> bb770__0_332 [label="unwind"];
    bb746__0_332 -> bb691__0_332 [label="return"];
    bb746__0_332 -> bb775__0_332 [label="unwind"];
    bb747__0_332 -> bb750__0_332 [label=""];
    bb748__0_332 -> bb750__0_332 [label=""];
    bb749__0_332 -> bb698__0_332 [label="return"];
    bb749__0_332 -> bb778__0_332 [label="unwind"];
    bb750__0_332 -> bb698__0_332 [label="0"];
    bb750__0_332 -> bb749__0_332 [label="otherwise"];
    bb751__0_332 -> bb700__0_332 [label="return"];
    bb751__0_332 -> bb781__0_332 [label="unwind"];
    bb752__0_332 -> bb701__0_332 [label="return"];
    bb752__0_332 -> bb731__0_332 [label="unwind"];
    bb753__0_332 -> bb708__0_332 [label=""];
    bb754__0_332 -> bb759__0_332 [label=""];
    bb755__0_332 -> bb759__0_332 [label=""];
    bb756__0_332 -> bb759__0_332 [label=""];
    bb757__0_332 -> bb759__0_332 [label=""];
    bb758__0_332 -> bb762__0_332 [label="return"];
    bb759__0_332 -> bb762__0_332 [label="0"];
    bb759__0_332 -> bb758__0_332 [label="otherwise"];
    bb760__0_332 -> bb762__0_332 [label=""];
    bb761__0_332 -> bb767__0_332 [label="return"];
    bb762__0_332 -> bb767__0_332 [label="0"];
    bb762__0_332 -> bb761__0_332 [label="otherwise"];
    bb763__0_332 -> bb767__0_332 [label=""];
    bb764__0_332 -> bb767__0_332 [label=""];
    bb765__0_332 -> bb767__0_332 [label=""];
    bb766__0_332 -> bb770__0_332 [label="return"];
    bb767__0_332 -> bb770__0_332 [label="0"];
    bb767__0_332 -> bb766__0_332 [label="otherwise"];
    bb768__0_332 -> bb770__0_332 [label=""];
    bb769__0_332 -> bb775__0_332 [label="return"];
    bb770__0_332 -> bb775__0_332 [label="0"];
    bb770__0_332 -> bb769__0_332 [label="otherwise"];
    bb771__0_332 -> bb775__0_332 [label=""];
    bb772__0_332 -> bb775__0_332 [label=""];
    bb773__0_332 -> bb775__0_332 [label=""];
    bb774__0_332 -> bb778__0_332 [label="return"];
    bb775__0_332 -> bb778__0_332 [label="0"];
    bb775__0_332 -> bb774__0_332 [label="otherwise"];
    bb776__0_332 -> bb778__0_332 [label=""];
    bb777__0_332 -> bb781__0_332 [label="return"];
    bb778__0_332 -> bb781__0_332 [label="0"];
    bb778__0_332 -> bb777__0_332 [label="otherwise"];
    bb779__0_332 -> bb781__0_332 [label=""];
    bb780__0_332 -> bb731__0_332 [label="return"];
    bb781__0_332 -> bb731__0_332 [label="0"];
    bb781__0_332 -> bb780__0_332 [label="otherwise"];
    bb782__0_332 -> bb731__0_332 [label=""];
}
