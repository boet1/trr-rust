digraph Mir_0_206 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn handle_if_begin_swap(_1: &amp;ReErased mut state::if_rebalance_config::IfRebalanceConfig, _2: u64, _3: u64, _4: &amp;ReErased mut state::spot_market::SpotMarket, _5: &amp;ReErased mut state::spot_market::SpotMarket, _6: u64, _7: i64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _8: ();<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: i64;<br align="left"/>let mut _11: i64;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _13: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _14: i64;<br align="left"/>let mut _15: i64;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: i64;<br align="left"/>let mut _21: i64;<br align="left"/>let _22: ();<br align="left"/>let mut _23: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _24: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _27: isize;<br align="left"/>let _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _29: !;<br align="left"/>let mut _30: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _31: ();<br align="left"/>let _32: ();<br align="left"/>let mut _33: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _34: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _35: u64;<br align="left"/>let mut _36: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _37: isize;<br align="left"/>let _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _39: !;<br align="left"/>let mut _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _41: ();<br align="left"/>let mut _42: ();<br align="left"/>debug if_rebalance_config =&gt; _1;<br align="left"/>debug in_insurance_fund_vault_amount =&gt; _2;<br align="left"/>debug out_insurance_fund_vault_amount =&gt; _3;<br align="left"/>debug in_spot_market =&gt; _4;<br align="left"/>debug out_spot_market =&gt; _5;<br align="left"/>debug in_amount =&gt; _6;<br align="left"/>debug now =&gt; _7;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug residual =&gt; _28;<br align="left"/>debug val =&gt; _31;<br align="left"/>debug residual =&gt; _38;<br align="left"/>debug val =&gt; _41;<br align="left"/>>;
    bb0__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _7<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = ((*_1).6: i64)<br/>StorageLive(_15)<br/>_15 = ((*_1).9: i64)<br/></td></tr><tr><td align="left">_13 = &lt;i64 as SafeMath&gt;::safe_add(move _14, move _15)</td></tr></table>>];
    bb1__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb2__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_16 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb3__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_12 as Continue).0: i64)<br/>_11 = _20<br/>StorageDead(_20)<br/>_9 = Gt(move _10, move _11)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb4__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb6__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageLive(_21)<br/>_21 = _7<br/>((*_1).6: i64) = move _21<br/>StorageDead(_21)<br/>((*_1).7: u64) = const 0_u64<br/>_8 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>_8 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = _2<br/>StorageLive(_26)<br/>_26 = &amp;mut (*_4)<br/></td></tr><tr><td align="left">_24 = apply_rebase_to_insurance_fund(move _25, move _26)</td></tr></table>>];
    bb10__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_23 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _24)</td></tr></table>>];
    bb11__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_27 = discriminant(_23)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb12__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_23 as Continue).0: ())<br/>_22 = _31<br/>StorageDead(_31)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = _3<br/>StorageLive(_36)<br/>_36 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_34 = apply_rebase_to_insurance_fund(move _35, move _36)</td></tr></table>>];
    bb13__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_23 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_30)<br/>_30 = _28<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _30)</td></tr></table>>];
    bb14__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_33 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _34)</td></tr></table>>];
    bb16__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>_37 = discriminant(_33)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb17__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_33 as Continue).0: ())<br/>_32 = _41<br/>StorageDead(_41)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageLive(_42)<br/>_42 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _42)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_33 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_40)<br/>_40 = _38<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _40)</td></tr></table>>];
    bb19__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_38)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_206 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_206 -> bb1__0_206 [label="return"];
    bb1__0_206 -> bb2__0_206 [label="return"];
    bb2__0_206 -> bb3__0_206 [label="0"];
    bb2__0_206 -> bb5__0_206 [label="1"];
    bb2__0_206 -> bb4__0_206 [label="otherwise"];
    bb3__0_206 -> bb8__0_206 [label="0"];
    bb3__0_206 -> bb7__0_206 [label="otherwise"];
    bb5__0_206 -> bb6__0_206 [label="return"];
    bb6__0_206 -> bb20__0_206 [label=""];
    bb7__0_206 -> bb9__0_206 [label=""];
    bb8__0_206 -> bb9__0_206 [label=""];
    bb9__0_206 -> bb10__0_206 [label="return"];
    bb10__0_206 -> bb11__0_206 [label="return"];
    bb11__0_206 -> bb12__0_206 [label="0"];
    bb11__0_206 -> bb13__0_206 [label="1"];
    bb11__0_206 -> bb4__0_206 [label="otherwise"];
    bb12__0_206 -> bb15__0_206 [label="return"];
    bb13__0_206 -> bb14__0_206 [label="return"];
    bb14__0_206 -> bb20__0_206 [label=""];
    bb15__0_206 -> bb16__0_206 [label="return"];
    bb16__0_206 -> bb17__0_206 [label="0"];
    bb16__0_206 -> bb18__0_206 [label="1"];
    bb16__0_206 -> bb4__0_206 [label="otherwise"];
    bb17__0_206 -> bb20__0_206 [label=""];
    bb18__0_206 -> bb19__0_206 [label="return"];
    bb19__0_206 -> bb20__0_206 [label=""];
}
