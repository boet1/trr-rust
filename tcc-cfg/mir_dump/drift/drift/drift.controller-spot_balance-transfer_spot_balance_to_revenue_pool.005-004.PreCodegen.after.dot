digraph Mir_0_798 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn transfer_spot_balance_to_revenue_pool(_1: u128, _2: &amp;ReErased mut state::spot_market::SpotMarket, _3: &amp;ReErased mut dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _6: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: u16;<br align="left"/>let mut _9: &amp;ReErased dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased;<br align="left"/>let mut _10: u16;<br align="left"/>let mut _11: ();<br align="left"/>let _12: error::ErrorCode;<br align="left"/>let _13: ();<br align="left"/>let mut _14: &amp;ReErased str;<br align="left"/>let _15: &amp;ReErased str;<br align="left"/>let mut _16: &amp;ReErased std::string::String;<br align="left"/>let _17: &amp;ReErased std::string::String;<br align="left"/>let _18: std::string::String;<br align="left"/>let _19: std::string::String;<br align="left"/>let mut _20: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _21: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _22: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _23: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _24: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _25: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _26: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _27: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _28: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _29: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _30: &amp;ReErased error::ErrorCode;<br align="left"/>let _31: &amp;ReErased error::ErrorCode;<br align="left"/>let _32: ();<br align="left"/>let mut _33: &amp;ReErased str;<br align="left"/>let _34: &amp;ReErased str;<br align="left"/>let mut _35: &amp;ReErased std::string::String;<br align="left"/>let _36: &amp;ReErased std::string::String;<br align="left"/>let _37: std::string::String;<br align="left"/>let _38: std::string::String;<br align="left"/>let mut _39: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _40: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _41: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _42: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _43: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _44: error::ErrorCode;<br align="left"/>let mut _45: isize;<br align="left"/>let _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _47: !;<br align="left"/>let mut _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _49: ();<br align="left"/>let _50: ();<br align="left"/>let mut _51: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _52: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _53: u128;<br align="left"/>let mut _54: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _55: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _56: state::spot_market::SpotBalanceType;<br align="left"/>let mut _57: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _58: &amp;ReErased mut dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased;<br align="left"/>let mut _59: &amp;ReErased mut dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased;<br align="left"/>let mut _60: isize;<br align="left"/>let _61: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _62: !;<br align="left"/>let mut _63: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _64: ();<br align="left"/>let _65: ();<br align="left"/>let mut _66: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _67: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _68: u128;<br align="left"/>let mut _69: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _70: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _71: state::spot_market::SpotBalanceType;<br align="left"/>let mut _72: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _73: isize;<br align="left"/>let _74: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _75: !;<br align="left"/>let mut _76: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _77: ();<br align="left"/>let mut _78: ();<br align="left"/>let mut _79: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _80: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _81: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _82: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>debug token_amount =&gt; _1;<br align="left"/>debug spot_market =&gt; _2;<br align="left"/>debug from_spot_balance =&gt; _3;<br align="left"/>debug error_code =&gt; _12;<br align="left"/>debug res =&gt; _19;<br align="left"/>debug res =&gt; _38;<br align="left"/>debug residual =&gt; _46;<br align="left"/>debug val =&gt; _49;<br align="left"/>debug residual =&gt; _61;<br align="left"/>debug val =&gt; _64;<br align="left"/>debug residual =&gt; _74;<br align="left"/>debug val =&gt; _77;<br align="left"/>>;
    bb0__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_3)<br/></td></tr><tr><td align="left">_8 = &lt;dyn SpotBalance as SpotBalance&gt;::market_index(move _9)</td></tr></table>>];
    bb1__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_10)<br/>_10 = ((*_2).42: u16)<br/>_7 = Eq(move _8, move _10)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb2__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>StorageLive(_11)<br/>_11 = ()<br/>_6 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _11)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>StorageLive(_12)<br/>_12 = error::ErrorCode::UnequalMarketIndexForSpotTransfer<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_82 = const _<br/>_23 = &amp;(*_82)<br/>_22 = &amp;(*_23)<br/>_21 = move _22 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_22)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = &amp;_12<br/>_30 = &amp;(*_31)<br/></td></tr><tr><td align="left">_29 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _30)</td></tr></table>>];
    bb4__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_28 = [move _29]<br/>StorageDead(_29)<br/>_27 = &amp;_28<br/>_26 = &amp;(*_27)<br/>_25 = move _26 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_20 = Arguments::&lt;'_&gt;::new_v1(move _21, move _25)</td></tr></table>>];
    bb5__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = format(move _20)</td></tr></table>>];
    bb6__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_31)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_23)<br/>_18 = move _19<br/>StorageDead(_19)<br/>_17 = &amp;_18<br/>_16 = &amp;(*_17)<br/></td></tr><tr><td align="left">_15 = &lt;String as Deref&gt;::deref(move _16)</td></tr></table>>];
    bb7__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_14 = &amp;(*_15)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_13 = solana_program::log::sol_log(move _14)</td></tr></table>>];
    bb8__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">drop(_18)</td></tr></table>>];
    bb9__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_81 = const _<br/>_42 = &amp;(*_81)<br/>_41 = &amp;(*_42)<br/>_40 = move _41 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">_39 = Arguments::&lt;'_&gt;::new_const(move _40)</td></tr></table>>];
    bb10__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/></td></tr><tr><td align="left">_38 = format(move _39)</td></tr></table>>];
    bb11__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_42)<br/>_37 = move _38<br/>StorageDead(_38)<br/>_36 = &amp;_37<br/>_35 = &amp;(*_36)<br/></td></tr><tr><td align="left">_34 = &lt;String as Deref&gt;::deref(move _35)</td></tr></table>>];
    bb12__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_33 = &amp;(*_34)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_32 = solana_program::log::sol_log(move _33)</td></tr></table>>];
    bb13__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">drop(_37)</td></tr></table>>];
    bb14__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_34)<br/>StorageDead(_32)<br/>StorageLive(_44)<br/>_44 = _12<br/>_6 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _44)<br/>StorageDead(_44)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb16__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_45 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb17__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_5 as Continue).0: ())<br/>_4 = _49<br/>StorageDead(_49)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_53 = _1<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_80 = const _<br/>_55 = &amp;(*_80)<br/>_54 = &amp;(*_55)<br/>StorageLive(_57)<br/>_57 = &amp;mut (*_2)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = &amp;mut (*_3)<br/>_58 = move _59 as &amp;mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize))<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">_52 = update_spot_balances(move _53, move _54, move _57, move _58, const false)</td></tr></table>>];
    bb18__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb19__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_48)<br/>_48 = _46<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _48)</td></tr></table>>];
    bb20__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">_51 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _52)</td></tr></table>>];
    bb22__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>_60 = discriminant(_51)<br/></td></tr><tr><td align="left">switchInt(move _60)</td></tr></table>>];
    bb23__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_64)<br/>_64 = ((_51 as Continue).0: ())<br/>_50 = _64<br/>StorageDead(_64)<br/>StorageDead(_55)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_68 = _1<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>_79 = const _<br/>_70 = &amp;(*_79)<br/>_69 = &amp;(*_70)<br/>StorageLive(_72)<br/>_72 = &amp;mut (*_2)<br/></td></tr><tr><td align="left">_67 = update_revenue_pool_balances(move _68, move _69, move _72)</td></tr></table>>];
    bb24__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = ((_51 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_63)<br/>_63 = _61<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _63)</td></tr></table>>];
    bb25__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_61)<br/>StorageDead(_55)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">_66 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _67)</td></tr></table>>];
    bb27__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>_73 = discriminant(_66)<br/></td></tr><tr><td align="left">switchInt(move _73)</td></tr></table>>];
    bb28__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_77)<br/>_77 = ((_66 as Continue).0: ())<br/>_65 = _77<br/>StorageDead(_77)<br/>StorageDead(_70)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>StorageLive(_78)<br/>_78 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _78)<br/>StorageDead(_78)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_74)<br/>_74 = ((_66 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_76)<br/>_76 = _74<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _76)</td></tr></table>>];
    bb30__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_74)<br/>StorageDead(_70)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left">return</td></tr></table>>];
    bb32__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">32 (cleanup)</td></tr><tr><td align="left">drop(_37)</td></tr></table>>];
    bb33__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">33 (cleanup)</td></tr><tr><td align="left">drop(_18)</td></tr></table>>];
    bb34__0_798 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">34 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_798 -> bb1__0_798 [label="return"];
    bb1__0_798 -> bb3__0_798 [label="0"];
    bb1__0_798 -> bb2__0_798 [label="otherwise"];
    bb2__0_798 -> bb15__0_798 [label=""];
    bb3__0_798 -> bb4__0_798 [label="return"];
    bb4__0_798 -> bb5__0_798 [label="return"];
    bb5__0_798 -> bb6__0_798 [label="return"];
    bb6__0_798 -> bb7__0_798 [label="return"];
    bb6__0_798 -> bb33__0_798 [label="unwind"];
    bb7__0_798 -> bb8__0_798 [label="return"];
    bb7__0_798 -> bb33__0_798 [label="unwind"];
    bb8__0_798 -> bb9__0_798 [label="return"];
    bb8__0_798 -> bb34__0_798 [label="unwind"];
    bb9__0_798 -> bb10__0_798 [label="return"];
    bb10__0_798 -> bb11__0_798 [label="return"];
    bb11__0_798 -> bb12__0_798 [label="return"];
    bb11__0_798 -> bb32__0_798 [label="unwind"];
    bb12__0_798 -> bb13__0_798 [label="return"];
    bb12__0_798 -> bb32__0_798 [label="unwind"];
    bb13__0_798 -> bb14__0_798 [label="return"];
    bb13__0_798 -> bb34__0_798 [label="unwind"];
    bb14__0_798 -> bb15__0_798 [label=""];
    bb15__0_798 -> bb16__0_798 [label="return"];
    bb16__0_798 -> bb17__0_798 [label="0"];
    bb16__0_798 -> bb19__0_798 [label="1"];
    bb16__0_798 -> bb18__0_798 [label="otherwise"];
    bb17__0_798 -> bb21__0_798 [label="return"];
    bb19__0_798 -> bb20__0_798 [label="return"];
    bb20__0_798 -> bb31__0_798 [label=""];
    bb21__0_798 -> bb22__0_798 [label="return"];
    bb22__0_798 -> bb23__0_798 [label="0"];
    bb22__0_798 -> bb24__0_798 [label="1"];
    bb22__0_798 -> bb18__0_798 [label="otherwise"];
    bb23__0_798 -> bb26__0_798 [label="return"];
    bb24__0_798 -> bb25__0_798 [label="return"];
    bb25__0_798 -> bb31__0_798 [label=""];
    bb26__0_798 -> bb27__0_798 [label="return"];
    bb27__0_798 -> bb28__0_798 [label="0"];
    bb27__0_798 -> bb29__0_798 [label="1"];
    bb27__0_798 -> bb18__0_798 [label="otherwise"];
    bb28__0_798 -> bb31__0_798 [label=""];
    bb29__0_798 -> bb30__0_798 [label="return"];
    bb30__0_798 -> bb31__0_798 [label=""];
    bb32__0_798 -> bb34__0_798 [label="return"];
    bb33__0_798 -> bb34__0_798 [label="return"];
}
