// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4035:10: 4035:18>::try_accounts` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4035:10: 4035:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut ChangeSignedMsgWsDelegateStatusBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _9: <instructions::user::ChangeSignedMsgWsDelegateStatus<'info> as anchor_lang::Accounts<'info, instructions::user::ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts::__Args;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::user::ChangeSignedMsgWsDelegateStatus<'info> as anchor_lang::Accounts<'info, instructions::user::ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts::__Args>;
    let mut _11: std::result::Result<<instructions::user::ChangeSignedMsgWsDelegateStatus<'info> as anchor_lang::Accounts<'info, instructions::user::ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _12: std::result::Result<<instructions::user::ChangeSignedMsgWsDelegateStatus<'info> as anchor_lang::Accounts<'info, instructions::user::ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _13: &mut &[u8];
    let mut _14: &mut &[u8];
    let mut _15: {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18};
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>>;
    let mut _23: std::result::Result<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::user::ChangeSignedMsgWsDelegateStatusBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::user::ChangeSignedMsgWsDelegateStatusBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _53: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::user::ChangeSignedMsgWsDelegateStatusBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _66: ();
    let mut _67: bool;
    let mut _68: &std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let _70: &anchor_lang::prelude::Pubkey;
    let _71: anchor_lang::prelude::Pubkey;
    let mut _72: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _73: !;
    let mut _74: anchor_lang::error::Error;
    let mut _75: anchor_lang::error::Error;
    let mut _76: anchor_lang::error::ErrorCode;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _79: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _86: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _88: &anchor_lang::prelude::Rent;
    let mut _89: usize;
    let mut _90: &state::signed_msg_user::SignedMsgWsDelegates;
    let _91: &state::signed_msg_user::SignedMsgWsDelegates;
    let mut _92: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let _93: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _94: bool;
    let mut _96: std::option::Option<isize>;
    let mut _97: isize;
    let mut _98: std::result::Result<isize, std::num::TryFromIntError>;
    let mut _99: usize;
    let mut _100: &state::signed_msg_user::SignedMsgWsDelegates;
    let _101: &state::signed_msg_user::SignedMsgWsDelegates;
    let mut _102: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let _103: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _104: bool;
    let mut _105: isize;
    let mut _106: std::result::Result<isize, std::num::TryFromIntError>;
    let mut _107: usize;
    let mut _108: &anchor_lang::prelude::AccountInfo<'_>;
    let _109: ();
    let mut _110: bool;
    let mut _111: isize;
    let _112: ();
    let mut _113: bool;
    let mut _114: isize;
    let _115: ();
    let mut _116: bool;
    let mut _117: usize;
    let mut _118: std::result::Result<usize, std::num::TryFromIntError>;
    let mut _119: isize;
    let mut _120: !;
    let mut _121: anchor_lang::error::Error;
    let mut _122: anchor_lang::error::Error;
    let mut _123: anchor_lang::error::ErrorCode;
    let mut _124: bool;
    let mut _125: u64;
    let mut _126: u64;
    let mut _127: &anchor_lang::prelude::AccountInfo<'_>;
    let _128: ();
    let mut _129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _130: std::result::Result<(), anchor_lang::error::Error>;
    let mut _131: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _132: anchor_lang::prelude::AccountInfo<'_>;
    let mut _133: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _134: anchor_lang::system_program::Transfer<'_>;
    let mut _135: anchor_lang::prelude::AccountInfo<'_>;
    let mut _136: &anchor_lang::prelude::Signer<'_>;
    let mut _137: anchor_lang::prelude::AccountInfo<'_>;
    let mut _138: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _139: u64;
    let mut _140: std::option::Option<u64>;
    let mut _141: u64;
    let mut _142: u64;
    let mut _143: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _144: isize;
    let mut _146: !;
    let mut _147: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _150: std::option::Option<u64>;
    let mut _151: u64;
    let mut _152: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _153: u64;
    let mut _154: u64;
    let mut _155: std::option::Option<u64>;
    let mut _156: u64;
    let mut _157: &anchor_lang::prelude::AccountInfo<'_>;
    let _158: anchor_lang::prelude::AccountInfo<'_>;
    let mut _159: &anchor_lang::prelude::Signer<'_>;
    let mut _160: u64;
    let mut _161: &mut &mut u64;
    let mut _162: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _163: std::cell::RefMut<'_, &mut u64>;
    let mut _164: &std::cell::RefCell<&mut u64>;
    let _165: &std::cell::RefCell<&mut u64>;
    let mut _166: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let _167: anchor_lang::prelude::AccountInfo<'_>;
    let mut _168: &anchor_lang::prelude::Signer<'_>;
    let mut _169: u64;
    let mut _170: std::option::Option<u64>;
    let mut _171: u64;
    let mut _172: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _173: u64;
    let mut _174: &mut &mut u64;
    let mut _175: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _176: std::cell::RefMut<'_, &mut u64>;
    let mut _177: &std::cell::RefCell<&mut u64>;
    let _178: &std::cell::RefCell<&mut u64>;
    let mut _179: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let _180: ();
    let mut _181: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>>;
    let mut _182: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _183: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _184: usize;
    let mut _185: &state::signed_msg_user::SignedMsgWsDelegates;
    let _186: &state::signed_msg_user::SignedMsgWsDelegates;
    let mut _187: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let _188: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _189: bool;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _195: bool;
    let mut _196: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _197: anchor_lang::prelude::Pubkey;
    let mut _198: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _201: (anchor_lang::prelude::Pubkey, u8);
    let mut _202: &[&[u8]];
    let mut _203: &[&[u8]; 2];
    let _204: &[&[u8]; 2];
    let _205: [&[u8]; 2];
    let mut _206: &[u8];
    let _207: &[u8];
    let mut _208: &str;
    let _209: &str;
    let mut _210: &[u8];
    let _211: &[u8];
    let mut _212: &anchor_lang::prelude::Pubkey;
    let _213: anchor_lang::prelude::Pubkey;
    let mut _214: &anchor_lang::prelude::Signer<'_>;
    let mut _215: &anchor_lang::prelude::Pubkey;
    let _216: &&anchor_lang::prelude::Pubkey;
    let mut _217: u8;
    let _218: ();
    let mut _219: bool;
    let mut _220: &anchor_lang::prelude::Pubkey;
    let _221: anchor_lang::prelude::Pubkey;
    let mut _222: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _223: &anchor_lang::prelude::Pubkey;
    let mut _224: !;
    let mut _225: anchor_lang::error::Error;
    let mut _226: anchor_lang::error::Error;
    let mut _227: anchor_lang::error::Error;
    let mut _228: anchor_lang::error::ErrorCode;
    let mut _229: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _230: anchor_lang::prelude::Pubkey;
    let mut _231: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _232: anchor_lang::prelude::Pubkey;
    let _233: ();
    let mut _234: bool;
    let mut _235: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _236: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let _237: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _238: !;
    let mut _239: anchor_lang::error::Error;
    let mut _240: anchor_lang::error::Error;
    let mut _241: anchor_lang::error::ErrorCode;
    let _242: ();
    let mut _243: bool;
    let mut _244: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _245: &anchor_lang::prelude::Signer<'_>;
    let _246: &anchor_lang::prelude::Signer<'_>;
    let mut _247: !;
    let mut _248: anchor_lang::error::Error;
    let mut _249: anchor_lang::error::Error;
    let mut _250: anchor_lang::error::ErrorCode;
    let mut _251: instructions::user::ChangeSignedMsgWsDelegateStatus<'_>;
    let mut _252: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _253: anchor_lang::prelude::Signer<'_>;
    let mut _254: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _255: &mut u64;
    let mut _256: &mut u64;
    let mut _257: &anchor_lang::prelude::Pubkey;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: bool;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: anchor_lang::prelude::Pubkey;
        let _8: bool;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _20: <instructions::user::ChangeSignedMsgWsDelegateStatus<'info> as anchor_lang::Accounts<'info, instructions::user::ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts::__Args;
        scope 2 {
            debug _delegate => _7;
            debug add => _8;
            let _21: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
            let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _35: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
            scope 7 {
                debug signed_msg_ws_delegates => _21;
                let _36: anchor_lang::prelude::Signer<'_>;
                let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _50: anchor_lang::prelude::Signer<'_>;
                scope 12 {
                    debug authority => _36;
                    let _51: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                    let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _65: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                    scope 17 {
                        debug system_program => _51;
                        let _77: anchor_lang::prelude::Rent;
                        let _81: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                        let _84: anchor_lang::prelude::Rent;
                        scope 22 {
                            debug __anchor_rent => _77;
                            let _85: anchor_lang::prelude::AccountInfo<'_>;
                            scope 27 {
                                debug __field_info => _85;
                                let _87: u64;
                                scope 28 {
                                    debug __new_rent_minimum => _87;
                                    let _95: isize;
                                    scope 29 {
                                        debug __delta_space => _95;
                                        let _145: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _148: ();
                                        let _149: u64;
                                        let _191: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _194: ();
                                        let _199: anchor_lang::prelude::Pubkey;
                                        let _200: u8;
                                        scope 30 {
                                            debug residual => _145;
                                            scope 31 {
                                            }
                                        }
                                        scope 32 {
                                            debug val => _148;
                                            scope 33 {
                                            }
                                        }
                                        scope 34 {
                                            debug __lamport_amt => _149;
                                        }
                                        scope 35 {
                                            debug residual => _191;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _194;
                                            scope 38 {
                                            }
                                        }
                                        scope 39 {
                                            debug __pda_address => _199;
                                            debug __bump => _200;
                                        }
                                    }
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _81;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _84;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _62;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _65;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _47;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _50;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _32;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _35;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _17;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _20;
            scope 6 {
            }
        }
    }

    bb0: {
        _261 = const false;
        _259 = const false;
        _260 = const false;
        _258 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _6;
        _13 = &mut (*_14);
        _12 = <<instructions::user::ChangeSignedMsgWsDelegateStatus<'info> as anchor_lang::Accounts<'info, ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18};
        _11 = std::result::Result::<<instructions::user::ChangeSignedMsgWsDelegateStatus<'info> as anchor_lang::Accounts<'info, ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18}>(move _12, move _15) -> [return: bb2, unwind: bb148];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_12);
        _10 = <std::result::Result<<instructions::user::ChangeSignedMsgWsDelegateStatus<'info> as anchor_lang::Accounts<'info, ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _16 = discriminant(_10);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_10 as Continue).0: <instructions::user::ChangeSignedMsgWsDelegateStatus<'info> as anchor_lang::Accounts<'info, instructions::user::ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts::__Args);
        _9 = move _20;
        StorageDead(_20);
        StorageLive(_7);
        _7 = (_9.0: anchor_lang::prelude::Pubkey);
        StorageLive(_8);
        _8 = (_9.1: bool);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_6);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as anchor_lang::Accounts<'_, ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb140;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18};
        _23 = std::result::Result::<anchor_lang::prelude::Account<'_, SignedMsgWsDelegates>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18}>(move _24, move _30) -> [return: bb9, unwind: bb148];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::Account<'_, SignedMsgWsDelegates>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb148];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>);
        _261 = const true;
        _21 = move _35;
        StorageDead(_35);
        _262 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_6);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb161];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb162];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _284 = discriminant(_22);
        StorageDead(_22);
        goto -> bb139;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18};
        _38 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18}>(move _39, move _45) -> [return: bb15, unwind: bb161];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb161];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _36 = move _50;
        StorageDead(_50);
        _264 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_6);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, ChangeSignedMsgWsDelegateStatusBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb161];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb159];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _282 = discriminant(_37);
        StorageDead(_37);
        goto -> bb138;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18};
        _53 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4035:10: 4035:18}>(move _54, move _60) -> [return: bb21, unwind: bb161];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb161];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _51 = move _65;
        StorageDead(_65);
        _266 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &(*_5);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_21;
        _71 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as anchor_lang::Key>::key(move _72) -> [return: bb26, unwind: bb161];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb158];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _280 = discriminant(_52);
        StorageDead(_52);
        goto -> bb137;
    }

    bb26: {
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _67 = BTreeSet::<anchor_lang::prelude::Pubkey>::contains::<anchor_lang::prelude::Pubkey>(move _68, move _69) -> [return: bb27, unwind: bb161];
    }

    bb27: {
        switchInt(move _67) -> [0: bb31, otherwise: bb28];
    }

    bb28: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = AccountDuplicateReallocs;
        _75 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _76) -> [return: bb29, unwind: bb161];
    }

    bb29: {
        StorageDead(_76);
        _74 = anchor_lang::error::Error::with_account_name::<&str>(move _75, const "signed_msg_ws_delegates") -> [return: bb30, unwind: bb161];
    }

    bb30: {
        StorageDead(_75);
        _0 = std::result::Result::<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error>::Err(move _74);
        StorageDead(_74);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb137;
    }

    bb31: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        _66 = const ();
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb32, unwind: bb161];
    }

    bb32: {
        _78 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _79) -> [return: bb33, unwind: bb161];
    }

    bb33: {
        StorageDead(_79);
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb34, 1: bb35, otherwise: bb5];
    }

    bb34: {
        StorageLive(_84);
        _84 = ((_78 as Continue).0: anchor_lang::prelude::Rent);
        _77 = _84;
        StorageDead(_84);
        _268 = discriminant(_78);
        StorageDead(_78);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_21;
        _85 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _86) -> [return: bb37, unwind: bb161];
    }

    bb35: {
        StorageLive(_81);
        _81 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <std::result::Result<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _83) -> [return: bb36, unwind: bb157];
    }

    bb36: {
        StorageDead(_83);
        StorageDead(_81);
        _278 = discriminant(_78);
        StorageDead(_78);
        goto -> bb136;
    }

    bb37: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_77;
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_21;
        _92 = &(*_93);
        _91 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as Deref>::deref(move _92) -> [return: bb38, unwind: bb147];
    }

    bb38: {
        _90 = &(*_91);
        StorageDead(_92);
        StorageLive(_94);
        _94 = _8;
        _89 = SignedMsgWsDelegates::space(move _90, move _94) -> [return: bb39, unwind: bb147];
    }

    bb39: {
        StorageDead(_94);
        StorageDead(_90);
        _87 = anchor_lang::prelude::Rent::minimum_balance(move _88, move _89) -> [return: bb40, unwind: bb147];
    }

    bb40: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &_21;
        _102 = &(*_103);
        _101 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as Deref>::deref(move _102) -> [return: bb41, unwind: bb147];
    }

    bb41: {
        _100 = &(*_101);
        StorageDead(_102);
        StorageLive(_104);
        _104 = _8;
        _99 = SignedMsgWsDelegates::space(move _100, move _104) -> [return: bb42, unwind: bb147];
    }

    bb42: {
        StorageDead(_104);
        StorageDead(_100);
        _98 = <usize as TryInto<isize>>::try_into(move _99) -> [return: bb43, unwind: bb147];
    }

    bb43: {
        StorageDead(_99);
        _97 = std::result::Result::<isize, TryFromIntError>::unwrap(move _98) -> [return: bb44, unwind: bb147];
    }

    bb44: {
        StorageDead(_98);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_85;
        _107 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _108) -> [return: bb45, unwind: bb147];
    }

    bb45: {
        StorageDead(_108);
        _106 = <usize as TryInto<isize>>::try_into(move _107) -> [return: bb46, unwind: bb147];
    }

    bb46: {
        StorageDead(_107);
        _105 = std::result::Result::<isize, TryFromIntError>::unwrap(move _106) -> [return: bb47, unwind: bb147];
    }

    bb47: {
        StorageDead(_106);
        _96 = core::num::<impl isize>::checked_sub(move _97, move _105) -> [return: bb48, unwind: bb147];
    }

    bb48: {
        StorageDead(_105);
        StorageDead(_97);
        _95 = Option::<isize>::unwrap(move _96) -> [return: bb49, unwind: bb147];
    }

    bb49: {
        StorageDead(_96);
        StorageDead(_103);
        StorageDead(_101);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = _95;
        _110 = Ne(move _111, const 0_isize);
        switchInt(move _110) -> [0: bb106, otherwise: bb50];
    }

    bb50: {
        StorageDead(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _95;
        _113 = Gt(move _114, const 0_isize);
        switchInt(move _113) -> [0: bb74, otherwise: bb51];
    }

    bb51: {
        StorageDead(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = _95;
        _118 = <isize as TryInto<usize>>::try_into(move _119) -> [return: bb52, unwind: bb147];
    }

    bb52: {
        StorageDead(_119);
        _117 = std::result::Result::<usize, TryFromIntError>::unwrap(move _118) -> [return: bb53, unwind: bb147];
    }

    bb53: {
        StorageDead(_118);
        _116 = Gt(move _117, const _);
        switchInt(move _116) -> [0: bb57, otherwise: bb54];
    }

    bb54: {
        StorageDead(_117);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = AccountReallocExceedsLimit;
        _122 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _123) -> [return: bb55, unwind: bb147];
    }

    bb55: {
        StorageDead(_123);
        _121 = anchor_lang::error::Error::with_account_name::<&str>(move _122, const "signed_msg_ws_delegates") -> [return: bb56, unwind: bb147];
    }

    bb56: {
        StorageDead(_122);
        _0 = std::result::Result::<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error>::Err(move _121);
        StorageDead(_121);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb132;
    }

    bb57: {
        StorageDead(_117);
        _115 = const ();
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_124);
        StorageLive(_125);
        _125 = _87;
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_85;
        _126 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _127) -> [return: bb58, unwind: bb147];
    }

    bb58: {
        StorageDead(_127);
        _124 = Gt(move _125, move _126);
        switchInt(move _124) -> [0: bb72, otherwise: bb59];
    }

    bb59: {
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &_51;
        _132 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _133) -> [return: bb60, unwind: bb147];
    }

    bb60: {
        _260 = const true;
        StorageDead(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_36;
        _135 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _136) -> [return: bb61, unwind: bb156];
    }

    bb61: {
        StorageDead(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_85;
        _137 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _138) -> [return: bb62, unwind: bb146];
    }

    bb62: {
        StorageDead(_138);
        _134 = anchor_lang::system_program::Transfer::<'_> { from: move _135, to: move _137 };
        StorageDead(_137);
        StorageDead(_135);
        _260 = const false;
        _131 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _132, move _134) -> [return: bb63, unwind: bb156];
    }

    bb63: {
        _259 = const true;
        StorageDead(_134);
        _260 = const false;
        StorageDead(_132);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = _87;
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_85;
        _142 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _143) -> [return: bb64, unwind: bb154];
    }

    bb64: {
        StorageDead(_143);
        _140 = core::num::<impl u64>::checked_sub(move _141, move _142) -> [return: bb65, unwind: bb154];
    }

    bb65: {
        StorageDead(_142);
        StorageDead(_141);
        _139 = Option::<u64>::unwrap(move _140) -> [return: bb66, unwind: bb154];
    }

    bb66: {
        StorageDead(_140);
        _259 = const false;
        _130 = anchor_lang::system_program::transfer(move _131, move _139) -> [return: bb67, unwind: bb154];
    }

    bb67: {
        StorageDead(_139);
        _259 = const false;
        StorageDead(_131);
        _129 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _130) -> [return: bb68, unwind: bb147];
    }

    bb68: {
        StorageDead(_130);
        _144 = discriminant(_129);
        switchInt(move _144) -> [0: bb69, 1: bb70, otherwise: bb5];
    }

    bb69: {
        StorageLive(_148);
        _148 = ((_129 as Continue).0: ());
        _128 = _148;
        StorageDead(_148);
        _270 = discriminant(_129);
        StorageDead(_129);
        StorageDead(_128);
        _112 = const ();
        goto -> bb73;
    }

    bb70: {
        StorageLive(_145);
        _145 = move ((_129 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_147);
        _147 = move _145;
        _0 = <std::result::Result<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _147) -> [return: bb71, unwind: bb152];
    }

    bb71: {
        StorageDead(_147);
        StorageDead(_145);
        _276 = discriminant(_129);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_124);
        goto -> bb132;
    }

    bb72: {
        StorageDead(_126);
        StorageDead(_125);
        _112 = const ();
        goto -> bb73;
    }

    bb73: {
        StorageDead(_124);
        goto -> bb96;
    }

    bb74: {
        StorageDead(_114);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_85;
        _151 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _152) -> [return: bb75, unwind: bb147];
    }

    bb75: {
        StorageDead(_152);
        StorageLive(_153);
        _153 = _87;
        _150 = core::num::<impl u64>::checked_sub(move _151, move _153) -> [return: bb76, unwind: bb147];
    }

    bb76: {
        StorageDead(_153);
        StorageDead(_151);
        _149 = Option::<u64>::unwrap(move _150) -> [return: bb77, unwind: bb147];
    }

    bb77: {
        StorageDead(_150);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &_36;
        _158 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _159) -> [return: bb78, unwind: bb147];
    }

    bb78: {
        _157 = &_158;
        StorageDead(_159);
        _156 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _157) -> [return: bb79, unwind: bb145];
    }

    bb79: {
        StorageDead(_157);
        StorageLive(_160);
        _160 = _149;
        _155 = core::num::<impl u64>::checked_add(move _156, move _160) -> [return: bb80, unwind: bb145];
    }

    bb80: {
        StorageDead(_160);
        StorageDead(_156);
        _154 = Option::<u64>::unwrap(move _155) -> [return: bb81, unwind: bb145];
    }

    bb81: {
        StorageDead(_155);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_36;
        _167 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _168) -> [return: bb82, unwind: bb145];
    }

    bb82: {
        StorageDead(_168);
        _166 = &(_167.1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _165 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _166) -> [return: bb83, unwind: bb144];
    }

    bb83: {
        _164 = &(*_165);
        StorageDead(_166);
        _163 = RefCell::<&mut u64>::borrow_mut(move _164) -> [return: bb84, unwind: bb144];
    }

    bb84: {
        _162 = &mut _163;
        StorageDead(_164);
        _161 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _162) -> [return: bb85, unwind: bb143];
    }

    bb85: {
        StorageDead(_162);
        _255 = deref_copy (*_161);
        (*_255) = move _154;
        StorageDead(_154);
        drop(_163) -> [return: bb86, unwind: bb144];
    }

    bb86: {
        drop(_167) -> [return: bb87, unwind: bb145];
    }

    bb87: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_161);
        drop(_158) -> [return: bb88, unwind: bb147];
    }

    bb88: {
        StorageDead(_158);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_85;
        _171 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _172) -> [return: bb89, unwind: bb147];
    }

    bb89: {
        StorageDead(_172);
        StorageLive(_173);
        _173 = _149;
        _170 = core::num::<impl u64>::checked_sub(move _171, move _173) -> [return: bb90, unwind: bb147];
    }

    bb90: {
        StorageDead(_173);
        StorageDead(_171);
        _169 = Option::<u64>::unwrap(move _170) -> [return: bb91, unwind: bb147];
    }

    bb91: {
        StorageDead(_170);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &(_85.1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _178 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _179) -> [return: bb92, unwind: bb147];
    }

    bb92: {
        _177 = &(*_178);
        StorageDead(_179);
        _176 = RefCell::<&mut u64>::borrow_mut(move _177) -> [return: bb93, unwind: bb147];
    }

    bb93: {
        _175 = &mut _176;
        StorageDead(_177);
        _174 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _175) -> [return: bb94, unwind: bb142];
    }

    bb94: {
        StorageDead(_175);
        _256 = deref_copy (*_174);
        (*_256) = move _169;
        StorageDead(_169);
        drop(_176) -> [return: bb95, unwind: bb147];
    }

    bb95: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_174);
        _112 = const ();
        StorageDead(_149);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &_85;
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_21;
        _187 = &(*_188);
        _186 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as Deref>::deref(move _187) -> [return: bb97, unwind: bb147];
    }

    bb97: {
        _185 = &(*_186);
        StorageDead(_187);
        StorageLive(_189);
        _189 = _8;
        _184 = SignedMsgWsDelegates::space(move _185, move _189) -> [return: bb98, unwind: bb147];
    }

    bb98: {
        StorageDead(_189);
        StorageDead(_185);
        _182 = anchor_lang::prelude::AccountInfo::<'_>::realloc(move _183, move _184, const false) -> [return: bb99, unwind: bb147];
    }

    bb99: {
        StorageDead(_184);
        StorageDead(_183);
        _181 = <std::result::Result<(), anchor_lang::prelude::ProgramError> as Try>::branch(move _182) -> [return: bb100, unwind: bb147];
    }

    bb100: {
        StorageDead(_182);
        _190 = discriminant(_181);
        switchInt(move _190) -> [0: bb101, 1: bb102, otherwise: bb5];
    }

    bb101: {
        StorageLive(_194);
        _194 = ((_181 as Continue).0: ());
        _180 = _194;
        StorageDead(_194);
        _272 = discriminant(_181);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &mut (*_5);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &_21;
        _197 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as anchor_lang::Key>::key(move _198) -> [return: bb104, unwind: bb147];
    }

    bb102: {
        StorageLive(_191);
        _191 = move ((_181 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_193);
        _193 = move _191;
        _0 = <std::result::Result<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _193) -> [return: bb103, unwind: bb151];
    }

    bb103: {
        StorageDead(_193);
        StorageDead(_191);
        _274 = discriminant(_181);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_181);
        StorageDead(_180);
        goto -> bb133;
    }

    bb104: {
        StorageDead(_198);
        _195 = BTreeSet::<anchor_lang::prelude::Pubkey>::insert(move _196, move _197) -> [return: bb105, unwind: bb147];
    }

    bb105: {
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_195);
        _109 = const ();
        goto -> bb107;
    }

    bb106: {
        StorageDead(_111);
        _109 = const ();
        goto -> bb107;
    }

    bb107: {
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = const _;
        _208 = &(*_209);
        _207 = <str as AsRef<[u8]>>::as_ref(move _208) -> [return: bb108, unwind: bb147];
    }

    bb108: {
        _206 = &(*_207);
        StorageDead(_208);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_36;
        _213 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _214) -> [return: bb109, unwind: bb147];
    }

    bb109: {
        _212 = &_213;
        StorageDead(_214);
        _211 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _212) -> [return: bb110, unwind: bb147];
    }

    bb110: {
        _210 = &(*_211);
        StorageDead(_212);
        _205 = [move _206, move _210];
        StorageDead(_210);
        StorageDead(_206);
        _204 = &_205;
        _203 = &(*_204);
        _202 = move _203 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_203);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &_1;
        _257 = deref_copy (*_216);
        _215 = &(*_257);
        _201 = anchor_lang::prelude::Pubkey::find_program_address(move _202, move _215) -> [return: bb111, unwind: bb147];
    }

    bb111: {
        StorageDead(_215);
        StorageDead(_202);
        StorageLive(_199);
        _199 = (_201.0: anchor_lang::prelude::Pubkey);
        StorageLive(_200);
        _200 = (_201.1: u8);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_201);
        StorageLive(_217);
        _217 = _200;
        ((*_4).0: u8) = move _217;
        StorageDead(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &_21;
        _221 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as anchor_lang::Key>::key(move _222) -> [return: bb112, unwind: bb147];
    }

    bb112: {
        _220 = &_221;
        StorageDead(_222);
        StorageLive(_223);
        _223 = &_199;
        _219 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _220, move _223) -> [return: bb113, unwind: bb147];
    }

    bb113: {
        switchInt(move _219) -> [0: bb119, otherwise: bb114];
    }

    bb114: {
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = ConstraintSeeds;
        _227 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _228) -> [return: bb115, unwind: bb147];
    }

    bb115: {
        StorageDead(_228);
        _226 = anchor_lang::error::Error::with_account_name::<&str>(move _227, const "signed_msg_ws_delegates") -> [return: bb116, unwind: bb147];
    }

    bb116: {
        _258 = const true;
        StorageDead(_227);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &_21;
        _230 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as anchor_lang::Key>::key(move _231) -> [return: bb117, unwind: bb150];
    }

    bb117: {
        StorageDead(_231);
        StorageLive(_232);
        _232 = _199;
        _229 = (move _230, move _232);
        StorageDead(_232);
        StorageDead(_230);
        _258 = const false;
        _225 = anchor_lang::error::Error::with_pubkeys(move _226, move _229) -> [return: bb118, unwind: bb150];
    }

    bb118: {
        StorageDead(_229);
        _258 = const false;
        StorageDead(_226);
        _0 = std::result::Result::<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error>::Err(move _225);
        StorageDead(_225);
        StorageDead(_219);
        StorageDead(_218);
        goto -> bb131;
    }

    bb119: {
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_220);
        _218 = const ();
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_21;
        _236 = &(*_237);
        _235 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _236) -> [return: bb120, unwind: bb147];
    }

    bb120: {
        StorageDead(_236);
        _234 = ((*_235).6: bool);
        switchInt(move _234) -> [0: bb121, otherwise: bb124];
    }

    bb121: {
        StorageDead(_237);
        StorageDead(_235);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = ConstraintMut;
        _240 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _241) -> [return: bb122, unwind: bb147];
    }

    bb122: {
        StorageDead(_241);
        _239 = anchor_lang::error::Error::with_account_name::<&str>(move _240, const "signed_msg_ws_delegates") -> [return: bb123, unwind: bb147];
    }

    bb123: {
        StorageDead(_240);
        _0 = std::result::Result::<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error>::Err(move _239);
        StorageDead(_239);
        StorageDead(_234);
        StorageDead(_233);
        goto -> bb131;
    }

    bb124: {
        StorageDead(_237);
        StorageDead(_235);
        _233 = const ();
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &_36;
        _245 = &(*_246);
        _244 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _245) -> [return: bb125, unwind: bb147];
    }

    bb125: {
        StorageDead(_245);
        _243 = ((*_244).6: bool);
        switchInt(move _243) -> [0: bb126, otherwise: bb129];
    }

    bb126: {
        StorageDead(_246);
        StorageDead(_244);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = ConstraintMut;
        _249 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _250) -> [return: bb127, unwind: bb147];
    }

    bb127: {
        StorageDead(_250);
        _248 = anchor_lang::error::Error::with_account_name::<&str>(move _249, const "authority") -> [return: bb128, unwind: bb147];
    }

    bb128: {
        StorageDead(_249);
        _0 = std::result::Result::<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error>::Err(move _248);
        StorageDead(_248);
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb131;
    }

    bb129: {
        StorageDead(_246);
        StorageDead(_244);
        _242 = const ();
        StorageDead(_243);
        StorageDead(_242);
        StorageLive(_251);
        StorageLive(_252);
        _261 = const false;
        _252 = move _21;
        StorageLive(_253);
        _253 = move _36;
        StorageLive(_254);
        _254 = move _51;
        _251 = instructions::user::ChangeSignedMsgWsDelegateStatus::<'_> { signed_msg_ws_delegates: move _252, authority: move _253, system_program: move _254 };
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_252);
        _0 = std::result::Result::<instructions::user::ChangeSignedMsgWsDelegateStatus<'_>, anchor_lang::error::Error>::Ok(move _251);
        StorageDead(_251);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_95);
        StorageDead(_87);
        drop(_85) -> [return: bb130, unwind: bb161];
    }

    bb130: {
        StorageDead(_85);
        StorageDead(_77);
        StorageDead(_51);
        StorageDead(_36);
        _261 = const false;
        StorageDead(_21);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb141;
    }

    bb131: {
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb134;
    }

    bb132: {
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb134;
    }

    bb134: {
        StorageDead(_95);
        StorageDead(_87);
        drop(_85) -> [return: bb135, unwind: bb161];
    }

    bb135: {
        StorageDead(_85);
        goto -> bb136;
    }

    bb136: {
        StorageDead(_77);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_51);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_36);
        drop(_21) -> [return: bb139, unwind: bb148];
    }

    bb139: {
        _261 = const false;
        StorageDead(_21);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_6);
        goto -> bb141;
    }

    bb141: {
        return;
    }

    bb142 (cleanup): {
        drop(_176) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_163) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_167) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_158) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_135) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_85) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        resume;
    }

    bb149 (cleanup): {
        drop(_226) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        switchInt(_258) -> [0: bb147, otherwise: bb149];
    }

    bb151 (cleanup): {
        _286 = discriminant(_181);
        goto -> bb147;
    }

    bb152 (cleanup): {
        _287 = discriminant(_129);
        goto -> bb147;
    }

    bb153 (cleanup): {
        drop(_131) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        switchInt(_259) -> [0: bb147, otherwise: bb153];
    }

    bb155 (cleanup): {
        drop(_132) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        switchInt(_260) -> [0: bb147, otherwise: bb155];
    }

    bb157 (cleanup): {
        _288 = discriminant(_78);
        goto -> bb161;
    }

    bb158 (cleanup): {
        _289 = discriminant(_52);
        goto -> bb161;
    }

    bb159 (cleanup): {
        _290 = discriminant(_37);
        goto -> bb161;
    }

    bb160 (cleanup): {
        drop(_21) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        switchInt(_261) -> [0: bb148, otherwise: bb160];
    }

    bb162 (cleanup): {
        _291 = discriminant(_22);
        goto -> bb148;
    }
}
