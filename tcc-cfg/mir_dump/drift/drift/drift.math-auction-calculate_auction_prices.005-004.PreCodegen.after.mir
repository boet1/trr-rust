// MIR for `calculate_auction_prices` after PreCodegen

fn calculate_auction_prices(_1: &OraclePriceData, _2: controller::position::PositionDirection, _3: u64) -> std::result::Result<(i64, i64), error::ErrorCode> {
    debug oracle_price_data => _1;
    debug direction => _2;
    debug limit_price => _3;
    let mut _0: std::result::Result<(i64, i64), error::ErrorCode>;
    let _4: i64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _7: std::result::Result<i64, error::ErrorCode>;
    let mut _8: u64;
    let mut _9: isize;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: ();
    let mut _15: bool;
    let mut _16: i64;
    let mut _17: !;
    let mut _20: (i64, i64);
    let mut _21: isize;
    let mut _22: &controller::position::PositionDirection;
    let mut _23: bool;
    let mut _24: i64;
    let mut _25: i64;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _28: std::result::Result<i64, error::ErrorCode>;
    let mut _29: i64;
    let mut _30: i64;
    let mut _31: i64;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _43: std::result::Result<i64, error::ErrorCode>;
    let mut _44: i64;
    let mut _45: i64;
    let mut _46: i64;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: i64;
    let mut _57: i64;
    let mut _58: i64;
    let mut _59: i64;
    let mut _60: bool;
    let mut _61: i64;
    let mut _62: i64;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _65: std::result::Result<i64, error::ErrorCode>;
    let mut _66: i64;
    let mut _67: i64;
    let mut _68: i64;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: i64;
    let mut _79: i64;
    let mut _80: i64;
    let mut _81: i64;
    let mut _82: bool;
    let mut _83: i64;
    let mut _84: i64;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _87: std::result::Result<i64, error::ErrorCode>;
    let mut _88: i64;
    let mut _89: i64;
    let mut _90: i64;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _102: std::result::Result<i64, error::ErrorCode>;
    let mut _103: i64;
    let mut _104: i64;
    let mut _105: i64;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: i64;
    let mut _116: i64;
    let mut _117: i64;
    let mut _118: i64;
    let mut _119: bool;
    let mut _120: i64;
    let mut _121: i64;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _124: std::result::Result<i64, error::ErrorCode>;
    let mut _125: i64;
    let mut _126: i64;
    let mut _127: i64;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _137: i64;
    let mut _138: i64;
    let mut _139: i64;
    let mut _140: i64;
    let mut _141: !;
    let mut _142: (i64, i64);
    let mut _143: i64;
    let mut _144: i64;
    let mut _146: isize;
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _148: std::result::Result<i64, error::ErrorCode>;
    let mut _149: i64;
    let mut _150: i64;
    let mut _151: i64;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _162: std::result::Result<i64, error::ErrorCode>;
    let mut _163: i64;
    let mut _164: i64;
    let mut _165: i64;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: bool;
    let mut _169: bool;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _175: (i64, i64);
    let mut _176: i64;
    let mut _177: i64;
    scope 1 {
        debug oracle_price => _4;
        let _5: i64;
        let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _13: i64;
        scope 2 {
            debug limit_price => _5;
            let _18: i64;
            let _19: i64;
            let _26: i64;
            let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _40: i64;
            let _63: i64;
            let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _77: i64;
            let _85: i64;
            let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _99: i64;
            let _122: i64;
            let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _136: i64;
            let _145: i64;
            let _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _160: i64;
            let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _174: i64;
            scope 7 {
                debug auction_start_price => _18;
                debug auction_end_price => _19;
            }
            scope 8 {
                debug limit_derive_start_price => _26;
                let _41: i64;
                let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _55: i64;
                scope 13 {
                    debug oracle_derive_start_price => _41;
                }
                scope 14 {
                    debug residual => _52;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _55;
                    scope 17 {
                    }
                }
            }
            scope 9 {
                debug residual => _37;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _40;
                scope 12 {
                }
            }
            scope 18 {
                debug oracle_derive_end_price => _63;
            }
            scope 19 {
                debug residual => _74;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _77;
                scope 22 {
                }
            }
            scope 23 {
                debug limit_derive_start_price => _85;
                let _100: i64;
                let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _114: i64;
                scope 28 {
                    debug oracle_derive_start_price => _100;
                }
                scope 29 {
                    debug residual => _111;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _114;
                    scope 32 {
                    }
                }
            }
            scope 24 {
                debug residual => _96;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _99;
                scope 27 {
                }
            }
            scope 33 {
                debug oracle_derive_end_price => _122;
            }
            scope 34 {
                debug residual => _133;
                scope 35 {
                }
            }
            scope 36 {
                debug val => _136;
                scope 37 {
                }
            }
            scope 38 {
                debug auction_end_price => _145;
            }
            scope 39 {
                debug residual => _157;
                scope 40 {
                }
            }
            scope 41 {
                debug val => _160;
                scope 42 {
                }
            }
            scope 43 {
                debug residual => _171;
                scope 44 {
                }
            }
            scope 45 {
                debug val => _174;
                scope 46 {
                }
            }
        }
        scope 3 {
            debug residual => _10;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _13;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = ((*_1).0: i64);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        _7 = <u64 as Cast>::cast::<i64>(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: i64);
        _5 = _13;
        StorageDead(_13);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _5;
        _15 = Gt(move _16, const 0_i64);
        switchInt(move _15) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_6);
        goto -> bb89;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_20);
        _21 = discriminant(_2);
        switchInt(move _21) -> [0: bb10, 1: bb38, otherwise: bb9];
    }

    bb8: {
        StorageDead(_16);
        _14 = const ();
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_145);
        _146 = discriminant(_2);
        switchInt(move _146) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb9: {
        StorageLive(_141);
        _141 = panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb10: {
        StorageLive(_23);
        StorageLive(_24);
        _24 = _5;
        StorageLive(_25);
        _25 = _4;
        _23 = Lt(move _24, move _25);
        switchInt(move _23) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _5;
        StorageLive(_30);
        StorageLive(_31);
        _31 = _5;
        _32 = Eq(const _, const 0_i64);
        assert(!move _32, "attempt to divide `{}` by zero", _31) -> [success: bb13, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _5;
        StorageLive(_62);
        _62 = _4;
        _60 = Ge(move _61, move _62);
        switchInt(move _60) -> [0: bb29, otherwise: bb28];
    }

    bb13: {
        _33 = Eq(const _, const -1_i64);
        _34 = Eq(_31, const i64::MIN);
        _35 = BitAnd(move _33, move _34);
        assert(!move _35, "attempt to compute `{} / {}`, which would overflow", _31, const _) -> [success: bb14, unwind continue];
    }

    bb14: {
        _30 = Div(move _31, const _);
        StorageDead(_31);
        _28 = <i64 as SafeMath>::safe_sub(move _29, move _30) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _28) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_28);
        _36 = discriminant(_27);
        switchInt(move _36) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_27 as Continue).0: i64);
        _26 = _40;
        StorageDead(_40);
        StorageDead(_27);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _4;
        StorageLive(_45);
        StorageLive(_46);
        _46 = _4;
        _47 = Eq(const _, const 0_i64);
        assert(!move _47, "attempt to divide `{}` by zero", _46) -> [success: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_37);
        _37 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_27);
        goto -> bb86;
    }

    bb20: {
        _48 = Eq(const _, const -1_i64);
        _49 = Eq(_46, const i64::MIN);
        _50 = BitAnd(move _48, move _49);
        assert(!move _50, "attempt to compute `{} / {}`, which would overflow", _46, const _) -> [success: bb21, unwind continue];
    }

    bb21: {
        _45 = Div(move _46, const _);
        StorageDead(_46);
        _43 = <i64 as SafeMath>::safe_sub(move _44, move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_44);
        _42 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _43) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_43);
        _51 = discriminant(_42);
        switchInt(move _51) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_55);
        _55 = ((_42 as Continue).0: i64);
        _41 = _55;
        StorageDead(_55);
        StorageDead(_42);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _26;
        StorageLive(_58);
        _58 = _41;
        _56 = <i64 as Ord>::min(move _57, move _58) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_52);
        _52 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb86;
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_59);
        _59 = _5;
        _20 = (move _56, move _59);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_41);
        StorageDead(_26);
        goto -> bb66;
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _4;
        StorageLive(_67);
        StorageLive(_68);
        _68 = _4;
        _69 = Eq(const _, const 0_i64);
        assert(!move _69, "attempt to divide `{}` by zero", _68) -> [success: bb30, unwind continue];
    }

    bb29: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb9;
    }

    bb30: {
        _70 = Eq(const _, const -1_i64);
        _71 = Eq(_68, const i64::MIN);
        _72 = BitAnd(move _70, move _71);
        assert(!move _72, "attempt to compute `{} / {}`, which would overflow", _68, const _) -> [success: bb31, unwind continue];
    }

    bb31: {
        _67 = Div(move _68, const _);
        StorageDead(_68);
        _65 = <i64 as SafeMath>::safe_add(move _66, move _67) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _65) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_65);
        _73 = discriminant(_64);
        switchInt(move _73) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_77);
        _77 = ((_64 as Continue).0: i64);
        _63 = _77;
        StorageDead(_77);
        StorageDead(_64);
        StorageLive(_78);
        _78 = _4;
        StorageLive(_79);
        StorageLive(_80);
        _80 = _5;
        StorageLive(_81);
        _81 = _63;
        _79 = <i64 as Ord>::min(move _80, move _81) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_74);
        _74 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb87;
    }

    bb37: {
        StorageDead(_81);
        StorageDead(_80);
        _20 = (move _78, move _79);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_63);
        goto -> bb66;
    }

    bb38: {
        StorageLive(_82);
        StorageLive(_83);
        _83 = _5;
        StorageLive(_84);
        _84 = _4;
        _82 = Gt(move _83, move _84);
        switchInt(move _82) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _5;
        StorageLive(_89);
        StorageLive(_90);
        _90 = _5;
        _91 = Eq(const _, const 0_i64);
        assert(!move _91, "attempt to divide `{}` by zero", _90) -> [success: bb41, unwind continue];
    }

    bb40: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_119);
        StorageLive(_120);
        _120 = _5;
        StorageLive(_121);
        _121 = _4;
        _119 = Le(move _120, move _121);
        switchInt(move _119) -> [0: bb57, otherwise: bb56];
    }

    bb41: {
        _92 = Eq(const _, const -1_i64);
        _93 = Eq(_90, const i64::MIN);
        _94 = BitAnd(move _92, move _93);
        assert(!move _94, "attempt to compute `{} / {}`, which would overflow", _90, const _) -> [success: bb42, unwind continue];
    }

    bb42: {
        _89 = Div(move _90, const _);
        StorageDead(_90);
        _87 = <i64 as SafeMath>::safe_add(move _88, move _89) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_89);
        StorageDead(_88);
        _86 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _87) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_87);
        _95 = discriminant(_86);
        switchInt(move _95) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_99);
        _99 = ((_86 as Continue).0: i64);
        _85 = _99;
        StorageDead(_99);
        StorageDead(_86);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _4;
        StorageLive(_104);
        StorageLive(_105);
        _105 = _4;
        _106 = Eq(const _, const 0_i64);
        assert(!move _106, "attempt to divide `{}` by zero", _105) -> [success: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_96);
        _96 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_86);
        goto -> bb85;
    }

    bb48: {
        _107 = Eq(const _, const -1_i64);
        _108 = Eq(_105, const i64::MIN);
        _109 = BitAnd(move _107, move _108);
        assert(!move _109, "attempt to compute `{} / {}`, which would overflow", _105, const _) -> [success: bb49, unwind continue];
    }

    bb49: {
        _104 = Div(move _105, const _);
        StorageDead(_105);
        _102 = <i64 as SafeMath>::safe_add(move _103, move _104) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_104);
        StorageDead(_103);
        _101 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _102) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_102);
        _110 = discriminant(_101);
        switchInt(move _110) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_114);
        _114 = ((_101 as Continue).0: i64);
        _100 = _114;
        StorageDead(_114);
        StorageDead(_101);
        StorageLive(_115);
        StorageLive(_116);
        _116 = _85;
        StorageLive(_117);
        _117 = _100;
        _115 = <i64 as Ord>::max(move _116, move _117) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_111);
        _111 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb85;
    }

    bb55: {
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_118);
        _118 = _5;
        _20 = (move _115, move _118);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_100);
        StorageDead(_85);
        goto -> bb66;
    }

    bb56: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_119);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = _4;
        StorageLive(_126);
        StorageLive(_127);
        _127 = _4;
        _128 = Eq(const _, const 0_i64);
        assert(!move _128, "attempt to divide `{}` by zero", _127) -> [success: bb58, unwind continue];
    }

    bb57: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb9;
    }

    bb58: {
        _129 = Eq(const _, const -1_i64);
        _130 = Eq(_127, const i64::MIN);
        _131 = BitAnd(move _129, move _130);
        assert(!move _131, "attempt to compute `{} / {}`, which would overflow", _127, const _) -> [success: bb59, unwind continue];
    }

    bb59: {
        _126 = Div(move _127, const _);
        StorageDead(_127);
        _124 = <i64 as SafeMath>::safe_sub(move _125, move _126) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_126);
        StorageDead(_125);
        _123 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _124) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_124);
        _132 = discriminant(_123);
        switchInt(move _132) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_136);
        _136 = ((_123 as Continue).0: i64);
        _122 = _136;
        StorageDead(_136);
        StorageDead(_123);
        StorageLive(_137);
        _137 = _4;
        StorageLive(_138);
        StorageLive(_139);
        _139 = _5;
        StorageLive(_140);
        _140 = _122;
        _138 = <i64 as Ord>::max(move _139, move _140) -> [return: bb65, unwind continue];
    }

    bb63: {
        StorageLive(_133);
        _133 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb87;
    }

    bb65: {
        StorageDead(_140);
        StorageDead(_139);
        _20 = (move _137, move _138);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_122);
        goto -> bb66;
    }

    bb66: {
        StorageLive(_18);
        _18 = (_20.0: i64);
        StorageLive(_19);
        _19 = (_20.1: i64);
        StorageDead(_20);
        StorageLive(_142);
        StorageLive(_143);
        _143 = _18;
        StorageLive(_144);
        _144 = _19;
        _142 = (move _143, move _144);
        StorageDead(_144);
        StorageDead(_143);
        _0 = std::result::Result::<(i64, i64), error::ErrorCode>::Ok(move _142);
        StorageDead(_142);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb88;
    }

    bb67: {
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _4;
        StorageLive(_164);
        StorageLive(_165);
        _165 = _4;
        _166 = Eq(const _, const 0_i64);
        assert(!move _166, "attempt to divide `{}` by zero", _165) -> [success: bb76, unwind continue];
    }

    bb68: {
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = _4;
        StorageLive(_150);
        StorageLive(_151);
        _151 = _4;
        _152 = Eq(const _, const 0_i64);
        assert(!move _152, "attempt to divide `{}` by zero", _151) -> [success: bb69, unwind continue];
    }

    bb69: {
        _153 = Eq(const _, const -1_i64);
        _154 = Eq(_151, const i64::MIN);
        _155 = BitAnd(move _153, move _154);
        assert(!move _155, "attempt to compute `{} / {}`, which would overflow", _151, const _) -> [success: bb70, unwind continue];
    }

    bb70: {
        _150 = Div(move _151, const _);
        StorageDead(_151);
        _148 = <i64 as SafeMath>::safe_add(move _149, move _150) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_150);
        StorageDead(_149);
        _147 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _148) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_148);
        _156 = discriminant(_147);
        switchInt(move _156) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_160);
        _160 = ((_147 as Continue).0: i64);
        _145 = _160;
        StorageDead(_160);
        StorageDead(_147);
        goto -> bb83;
    }

    bb74: {
        StorageLive(_157);
        _157 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_159);
        _159 = _157;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _159) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_147);
        goto -> bb84;
    }

    bb76: {
        _167 = Eq(const _, const -1_i64);
        _168 = Eq(_165, const i64::MIN);
        _169 = BitAnd(move _167, move _168);
        assert(!move _169, "attempt to compute `{} / {}`, which would overflow", _165, const _) -> [success: bb77, unwind continue];
    }

    bb77: {
        _164 = Div(move _165, const _);
        StorageDead(_165);
        _162 = <i64 as SafeMath>::safe_sub(move _163, move _164) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_164);
        StorageDead(_163);
        _161 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _162) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_162);
        _170 = discriminant(_161);
        switchInt(move _170) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_174);
        _174 = ((_161 as Continue).0: i64);
        _145 = _174;
        StorageDead(_174);
        StorageDead(_161);
        goto -> bb83;
    }

    bb81: {
        StorageLive(_171);
        _171 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_161);
        goto -> bb84;
    }

    bb83: {
        StorageLive(_175);
        StorageLive(_176);
        _176 = _4;
        StorageLive(_177);
        _177 = _145;
        _175 = (move _176, move _177);
        StorageDead(_177);
        StorageDead(_176);
        _0 = std::result::Result::<(i64, i64), error::ErrorCode>::Ok(move _175);
        StorageDead(_175);
        StorageDead(_145);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb90;
    }

    bb84: {
        StorageDead(_145);
        goto -> bb89;
    }

    bb85: {
        StorageDead(_85);
        goto -> bb87;
    }

    bb86: {
        StorageDead(_26);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_20);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb90;
    }

    bb90: {
        return;
    }
}
