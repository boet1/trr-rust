digraph Mir_0_2764 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_serum_max_native_pc_quantity(_1: u64, _2: u64, _3: u64) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let mut _4: u64;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _9: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _12: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _13: u64;<br align="left"/>let mut _14: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _15: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _16: u64;<br align="left"/>let mut _17: u64;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _24: u64;<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: u64;<br align="left"/>let mut _31: u64;<br align="left"/>let mut _32: isize;<br align="left"/>let _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _34: !;<br align="left"/>let mut _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _36: u64;<br align="left"/>let mut _37: isize;<br align="left"/>let _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _39: !;<br align="left"/>let mut _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _41: u64;<br align="left"/>debug serum_limit_price =&gt; _1;<br align="left"/>debug serum_coin_qty =&gt; _2;<br align="left"/>debug pc_lot_size =&gt; _3;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug residual =&gt; _33;<br align="left"/>debug val =&gt; _36;<br align="left"/>debug residual =&gt; _38;<br align="left"/>debug val =&gt; _41;<br align="left"/>>;
    bb0__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _3<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _3<br/>_19 = Eq(const 2500_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _19, &quot;attempt to divide `{}` by zero&quot;, _18)</td></tr></table>>];
    bb1__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_17 = Div(move _18, const 2500_u64)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_15 = &lt;u64 as SafeMath&gt;::safe_add(move _16, move _17)</td></tr></table>>];
    bb2__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _15)</td></tr></table>>];
    bb3__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_20 = discriminant(_14)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb4__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_14 as Continue).0: u64)<br/>_13 = _24<br/>StorageDead(_24)<br/>StorageLive(_25)<br/>_25 = _1<br/></td></tr><tr><td align="left">_12 = &lt;u64 as SafeMath&gt;::safe_mul(move _13, move _25)</td></tr></table>>];
    bb5__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_14 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_23)<br/>_23 = _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb7__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _12)</td></tr></table>>];
    bb9__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_26 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb10__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_11 as Continue).0: u64)<br/>_10 = _30<br/>StorageDead(_30)<br/>StorageLive(_31)<br/>_31 = _2<br/></td></tr><tr><td align="left">_9 = &lt;u64 as SafeMath&gt;::safe_mul(move _10, move _31)</td></tr></table>>];
    bb11__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_11 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb12__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb14__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_32 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _32)</td></tr></table>>];
    bb15__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_8 as Continue).0: u64)<br/>_7 = _36<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">_6 = &lt;u64 as SafeMath&gt;::safe_mul(move _7, const 10004_u64)</td></tr></table>>];
    bb16__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_35)<br/>_35 = _33<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _35)</td></tr></table>>];
    bb17__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb19__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_37 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb20__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_5 as Continue).0: u64)<br/>_4 = _41<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">_0 = &lt;u64 as SafeMath&gt;::safe_div(move _4, const 10000_u64)</td></tr></table>>];
    bb21__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_40)<br/>_40 = _38<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _40)</td></tr></table>>];
    bb22__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_2764 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2764 -> bb1__0_2764 [label="success"];
    bb1__0_2764 -> bb2__0_2764 [label="return"];
    bb2__0_2764 -> bb3__0_2764 [label="return"];
    bb3__0_2764 -> bb4__0_2764 [label="0"];
    bb3__0_2764 -> bb6__0_2764 [label="1"];
    bb3__0_2764 -> bb5__0_2764 [label="otherwise"];
    bb4__0_2764 -> bb8__0_2764 [label="return"];
    bb6__0_2764 -> bb7__0_2764 [label="return"];
    bb7__0_2764 -> bb24__0_2764 [label=""];
    bb8__0_2764 -> bb9__0_2764 [label="return"];
    bb9__0_2764 -> bb10__0_2764 [label="0"];
    bb9__0_2764 -> bb11__0_2764 [label="1"];
    bb9__0_2764 -> bb5__0_2764 [label="otherwise"];
    bb10__0_2764 -> bb13__0_2764 [label="return"];
    bb11__0_2764 -> bb12__0_2764 [label="return"];
    bb12__0_2764 -> bb24__0_2764 [label=""];
    bb13__0_2764 -> bb14__0_2764 [label="return"];
    bb14__0_2764 -> bb15__0_2764 [label="0"];
    bb14__0_2764 -> bb16__0_2764 [label="1"];
    bb14__0_2764 -> bb5__0_2764 [label="otherwise"];
    bb15__0_2764 -> bb18__0_2764 [label="return"];
    bb16__0_2764 -> bb17__0_2764 [label="return"];
    bb17__0_2764 -> bb25__0_2764 [label=""];
    bb18__0_2764 -> bb19__0_2764 [label="return"];
    bb19__0_2764 -> bb20__0_2764 [label="0"];
    bb19__0_2764 -> bb21__0_2764 [label="1"];
    bb19__0_2764 -> bb5__0_2764 [label="otherwise"];
    bb20__0_2764 -> bb23__0_2764 [label="return"];
    bb21__0_2764 -> bb22__0_2764 [label="return"];
    bb22__0_2764 -> bb26__0_2764 [label=""];
    bb23__0_2764 -> bb27__0_2764 [label=""];
    bb24__0_2764 -> bb25__0_2764 [label=""];
    bb25__0_2764 -> bb26__0_2764 [label=""];
    bb26__0_2764 -> bb27__0_2764 [label=""];
}
