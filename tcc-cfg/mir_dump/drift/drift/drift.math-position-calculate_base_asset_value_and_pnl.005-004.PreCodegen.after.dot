digraph Mir_0_2661 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_base_asset_value_and_pnl(_1: i128, _2: u128, _3: &amp;ReErased state::perp_market::AMM) -&gt; std::result::Result&lt;(u128, i128), error::ErrorCode&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: i128;<br align="left"/>let mut _7: !;<br align="left"/>let mut _8: (u128, i128);<br align="left"/>let _9: controller::amm::SwapDirection;<br align="left"/>let mut _10: i128;<br align="left"/>let _11: u128;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _13: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _14: i128;<br align="left"/>let mut _15: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: u128;<br align="left"/>let _21: i128;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _23: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _24: u128;<br align="left"/>let mut _25: u128;<br align="left"/>let mut _26: controller::amm::SwapDirection;<br align="left"/>let mut _27: isize;<br align="left"/>let _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _29: !;<br align="left"/>let mut _30: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _31: i128;<br align="left"/>let mut _32: (u128, i128);<br align="left"/>let mut _33: u128;<br align="left"/>let mut _34: i128;<br align="left"/>debug base_asset_amount =&gt; _1;<br align="left"/>debug quote_asset_amount =&gt; _2;<br align="left"/>debug amm =&gt; _3;<br align="left"/>debug swap_direction =&gt; _9;<br align="left"/>debug base_asset_value =&gt; _11;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug pnl =&gt; _21;<br align="left"/>debug residual =&gt; _28;<br align="left"/>debug val =&gt; _31;<br align="left"/>>;
    bb0__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _1<br/>_5 = Eq(move _6, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_8)<br/>_8 = (const 0_u128, const 0_i128)<br/>_0 = std::result::Result::&lt;(u128, i128), error::ErrorCode&gt;::Ok(move _8)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = const ()<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _1<br/></td></tr><tr><td align="left">_9 = swap_direction_to_close_position(move _10)</td></tr></table>>];
    bb3__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _1<br/>StorageLive(_15)<br/>_15 = &amp;(*_3)<br/></td></tr><tr><td align="left">_13 = calculate_base_asset_value(move _14, move _15)</td></tr></table>>];
    bb4__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb5__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_16 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb6__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_12 as Continue).0: u128)<br/>_11 = _20<br/>StorageDead(_20)<br/>StorageDead(_12)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = _11<br/>StorageLive(_25)<br/>_25 = _2<br/>StorageLive(_26)<br/>_26 = _9<br/></td></tr><tr><td align="left">_23 = calculate_pnl(move _24, move _25, move _26)</td></tr></table>>];
    bb7__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb9__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb11__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_27 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb12__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_22 as Continue).0: i128)<br/>_21 = _31<br/>StorageDead(_31)<br/>StorageDead(_22)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _11<br/>StorageLive(_34)<br/>_34 = _21<br/>_32 = (move _33, move _34)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>_0 = std::result::Result::&lt;(u128, i128), error::ErrorCode&gt;::Ok(move _32)<br/>StorageDead(_32)<br/>StorageDead(_21)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_30)<br/>_30 = _28<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _30)</td></tr></table>>];
    bb14__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_2661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2661 -> bb2__0_2661 [label="0"];
    bb0__0_2661 -> bb1__0_2661 [label="otherwise"];
    bb1__0_2661 -> bb16__0_2661 [label=""];
    bb2__0_2661 -> bb3__0_2661 [label="return"];
    bb3__0_2661 -> bb4__0_2661 [label="return"];
    bb4__0_2661 -> bb5__0_2661 [label="return"];
    bb5__0_2661 -> bb6__0_2661 [label="0"];
    bb5__0_2661 -> bb8__0_2661 [label="1"];
    bb5__0_2661 -> bb7__0_2661 [label="otherwise"];
    bb6__0_2661 -> bb10__0_2661 [label="return"];
    bb8__0_2661 -> bb9__0_2661 [label="return"];
    bb9__0_2661 -> bb15__0_2661 [label=""];
    bb10__0_2661 -> bb11__0_2661 [label="return"];
    bb11__0_2661 -> bb12__0_2661 [label="0"];
    bb11__0_2661 -> bb13__0_2661 [label="1"];
    bb11__0_2661 -> bb7__0_2661 [label="otherwise"];
    bb12__0_2661 -> bb16__0_2661 [label=""];
    bb13__0_2661 -> bb14__0_2661 [label="return"];
    bb14__0_2661 -> bb15__0_2661 [label=""];
    bb15__0_2661 -> bb16__0_2661 [label=""];
}
