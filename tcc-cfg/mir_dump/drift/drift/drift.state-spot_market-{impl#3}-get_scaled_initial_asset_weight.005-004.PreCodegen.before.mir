// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_scaled_initial_asset_weight` before PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_scaled_initial_asset_weight(_1: &SpotMarket, _2: i64) -> std::result::Result<u32, error::ErrorCode> {
    debug self => _1;
    debug oracle_price => _2;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: !;
    let mut _7: u32;
    let _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: &state::spot_market::SpotMarket;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: i128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _22: std::result::Result<i128, error::ErrorCode>;
    let mut _23: i128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _25: std::result::Result<i128, error::ErrorCode>;
    let mut _26: u128;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: u32;
    let mut _33: i64;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: bool;
    let mut _55: u128;
    let mut _56: u128;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _58: std::result::Result<u32, error::ErrorCode>;
    let mut _59: u128;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _61: std::result::Result<u128, error::ErrorCode>;
    let mut _62: u128;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _64: std::result::Result<u128, error::ErrorCode>;
    let mut _65: u128;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _67: std::result::Result<u128, error::ErrorCode>;
    let mut _68: u32;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: u128;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: u128;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: u32;
    scope 1 {
        debug deposits => _8;
        let _17: u128;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: i128;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: i128;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: u128;
        scope 6 {
            debug deposit_value => _17;
            let _44: u128;
            let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _52: u128;
            scope 19 {
                debug scale_initial_asset_weight_start => _44;
                let _53: u32;
                let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _73: u128;
                let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _79: u128;
                let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _85: u128;
                let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _90: u32;
                scope 24 {
                    debug asset_weight => _53;
                }
                scope 25 {
                    debug residual => _70;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _73;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug residual => _76;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _79;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug residual => _82;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _85;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug residual => _87;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _90;
                    scope 40 {
                    }
                }
            }
            scope 20 {
                debug residual => _49;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _52;
                scope 23 {
                }
            }
        }
        scope 7 {
            debug residual => _28;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _31;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _35;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _38;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _40;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _43;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).54: u64);
        _4 = Eq(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_7);
        _7 = ((*_1).31: u32);
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb60;
    }

    bb2: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_1);
        _10 = SpotMarket::get_deposits(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: u128);
        _8 = _16;
        StorageDead(_16);
        StorageDead(_9);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _8;
        _25 = <u128 as Cast>::cast::<i128>(move _26) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_13);
        _13 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_9);
        goto -> bb59;
    }

    bb9: {
        StorageDead(_26);
        _24 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: i128);
        _23 = _31;
        StorageDead(_31);
        StorageLive(_32);
        _32 = ((*_1).41: u32);
        StorageLive(_33);
        _33 = _2;
        _22 = get_token_value(move _23, move _32, move _33) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_28);
        _28 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb56;
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_23);
        _21 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_22);
        _34 = discriminant(_21);
        switchInt(move _34) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_38);
        _38 = ((_21 as Continue).0: i128);
        _20 = _38;
        StorageDead(_38);
        _19 = <i128 as Cast>::cast::<u128>(move _20) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_35);
        _35 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb56;
    }

    bb19: {
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_19);
        _39 = discriminant(_18);
        switchInt(move _39) -> [0: bb21, 1: bb22, otherwise: bb6];
    }

    bb21: {
        StorageLive(_43);
        _43 = ((_18 as Continue).0: u128);
        _17 = _43;
        StorageDead(_43);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_1).54: u64);
        _46 = <u64 as Cast>::cast::<u128>(move _47) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_40);
        _40 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb57;
    }

    bb24: {
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb26, 1: bb27, otherwise: bb6];
    }

    bb26: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: u128);
        _44 = _52;
        StorageDead(_52);
        StorageDead(_45);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _17;
        StorageLive(_56);
        _56 = _44;
        _54 = Lt(move _55, move _56);
        switchInt(move _54) -> [0: bb30, otherwise: bb29];
    }

    bb27: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_45);
        goto -> bb55;
    }

    bb29: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = ((*_1).31: u32);
        goto -> bb51;
    }

    bb30: {
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = ((*_1).31: u32);
        _67 = <u32 as Cast>::cast::<u128>(move _68) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_68);
        _66 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _67) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_67);
        _69 = discriminant(_66);
        switchInt(move _69) -> [0: bb33, 1: bb34, otherwise: bb6];
    }

    bb33: {
        StorageLive(_73);
        _73 = ((_66 as Continue).0: u128);
        _65 = _73;
        StorageDead(_73);
        StorageLive(_74);
        _74 = _44;
        _64 = <u128 as SafeMath>::safe_mul(move _65, move _74) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_70);
        _70 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb52;
    }

    bb36: {
        StorageDead(_74);
        StorageDead(_65);
        _63 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _64) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_64);
        _75 = discriminant(_63);
        switchInt(move _75) -> [0: bb38, 1: bb39, otherwise: bb6];
    }

    bb38: {
        StorageLive(_79);
        _79 = ((_63 as Continue).0: u128);
        _62 = _79;
        StorageDead(_79);
        StorageLive(_80);
        _80 = _17;
        _61 = <u128 as SafeMath>::safe_div(move _62, move _80) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_76);
        _76 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_78);
        StorageDead(_76);
        goto -> bb52;
    }

    bb41: {
        StorageDead(_80);
        StorageDead(_62);
        _60 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _61) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_61);
        _81 = discriminant(_60);
        switchInt(move _81) -> [0: bb43, 1: bb44, otherwise: bb6];
    }

    bb43: {
        StorageLive(_85);
        _85 = ((_60 as Continue).0: u128);
        _59 = _85;
        StorageDead(_85);
        _58 = <u128 as Cast>::cast::<u32>(move _59) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_82);
        _82 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_84);
        StorageDead(_82);
        goto -> bb53;
    }

    bb46: {
        StorageDead(_59);
        _57 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _58) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_58);
        _86 = discriminant(_57);
        switchInt(move _86) -> [0: bb48, 1: bb49, otherwise: bb6];
    }

    bb48: {
        StorageLive(_90);
        _90 = ((_57 as Continue).0: u32);
        _53 = _90;
        StorageDead(_90);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_57);
        goto -> bb51;
    }

    bb49: {
        StorageLive(_87);
        _87 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb54;
    }

    bb51: {
        StorageDead(_54);
        StorageLive(_91);
        _91 = _53;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _91);
        StorageDead(_91);
        StorageDead(_53);
        StorageDead(_44);
        StorageDead(_17);
        StorageDead(_8);
        goto -> bb60;
    }

    bb52: {
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_44);
        goto -> bb58;
    }

    bb56: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb58;
    }

    bb58: {
        StorageDead(_17);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_8);
        goto -> bb60;
    }

    bb60: {
        return;
    }
}
