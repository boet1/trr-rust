// MIR for `keeper::handle_settle_revenue_to_insurance_fund` before PreCodegen

fn keeper::handle_settle_revenue_to_insurance_fund(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::SettleRevenueToInsuranceFund<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug spot_market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _15: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _20: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _28: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _29: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _32: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _33: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _39: ();
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _41: std::result::Result<(), error::ErrorCode>;
    let mut _42: bool;
    let mut _43: u16;
    let mut _44: u16;
    let mut _45: &state::spot_market::SpotMarket;
    let mut _46: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _47: ();
    let _49: ();
    let mut _50: &str;
    let _51: &str;
    let mut _52: &std::string::String;
    let _53: &std::string::String;
    let _54: std::string::String;
    let mut _56: std::fmt::Arguments<'_>;
    let mut _57: &[&str];
    let mut _58: &[&str; 2];
    let _59: &[&str; 2];
    let _60: [&str; 2];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let mut _62: &[core::fmt::rt::Argument<'_>; 1];
    let _63: &[core::fmt::rt::Argument<'_>; 1];
    let _64: [core::fmt::rt::Argument<'_>; 1];
    let mut _65: core::fmt::rt::Argument<'_>;
    let mut _66: &error::ErrorCode;
    let _67: &error::ErrorCode;
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: error::ErrorCode;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _77: ();
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _79: std::result::Result<(), error::ErrorCode>;
    let mut _80: bool;
    let mut _81: i64;
    let mut _82: &state::spot_market::SpotMarket;
    let mut _83: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _84: ();
    let _86: ();
    let mut _87: &str;
    let _88: &str;
    let mut _89: &std::string::String;
    let _90: &std::string::String;
    let _91: std::string::String;
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let mut _95: &[&str; 2];
    let _96: &[&str; 2];
    let _97: [&str; 2];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let mut _99: &[core::fmt::rt::Argument<'_>; 1];
    let _100: &[core::fmt::rt::Argument<'_>; 1];
    let _101: [core::fmt::rt::Argument<'_>; 1];
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &error::ErrorCode;
    let _104: &error::ErrorCode;
    let _105: ();
    let mut _106: &str;
    let _107: &str;
    let mut _108: error::ErrorCode;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _116: &anchor_spl::token_interface::TokenAccount;
    let _117: &anchor_spl::token_interface::TokenAccount;
    let mut _118: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _120: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _121: &anchor_spl::token_interface::TokenAccount;
    let _122: &anchor_spl::token_interface::TokenAccount;
    let mut _123: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _126: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _135: std::result::Result<i64, error::ErrorCode>;
    let mut _136: i64;
    let mut _137: i64;
    let mut _138: &state::spot_market::SpotMarket;
    let mut _139: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _140: i64;
    let mut _141: &state::spot_market::SpotMarket;
    let mut _142: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _148: ();
    let mut _149: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _150: std::result::Result<(), error::ErrorCode>;
    let mut _151: bool;
    let mut _152: i64;
    let mut _153: ();
    let _155: ();
    let mut _156: &str;
    let _157: &str;
    let mut _158: &std::string::String;
    let _159: &std::string::String;
    let _160: std::string::String;
    let mut _162: std::fmt::Arguments<'_>;
    let mut _163: &[&str];
    let mut _164: &[&str; 2];
    let _165: &[&str; 2];
    let _166: [&str; 2];
    let mut _167: &[core::fmt::rt::Argument<'_>];
    let mut _168: &[core::fmt::rt::Argument<'_>; 1];
    let _169: &[core::fmt::rt::Argument<'_>; 1];
    let _170: [core::fmt::rt::Argument<'_>; 1];
    let mut _171: core::fmt::rt::Argument<'_>;
    let mut _172: &error::ErrorCode;
    let _173: &error::ErrorCode;
    let _174: ();
    let mut _175: &str;
    let _176: &str;
    let mut _177: &std::string::String;
    let _178: &std::string::String;
    let _179: std::string::String;
    let mut _181: std::fmt::Arguments<'_>;
    let mut _182: &[&str];
    let mut _183: &[&str; 2];
    let _184: &[&str; 2];
    let _185: [&str; 2];
    let mut _186: &[core::fmt::rt::Argument<'_>];
    let mut _187: &[core::fmt::rt::Argument<'_>; 1];
    let _188: &[core::fmt::rt::Argument<'_>; 1];
    let _189: [core::fmt::rt::Argument<'_>; 1];
    let mut _190: core::fmt::rt::Argument<'_>;
    let mut _191: &i64;
    let _192: &i64;
    let mut _193: error::ErrorCode;
    let mut _194: isize;
    let mut _196: !;
    let mut _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _201: std::result::Result<u64, error::ErrorCode>;
    let mut _202: u64;
    let mut _203: u64;
    let mut _204: &mut state::spot_market::SpotMarket;
    let mut _205: &mut state::spot_market::SpotMarket;
    let mut _206: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _207: i64;
    let mut _208: isize;
    let mut _210: !;
    let mut _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _213: i64;
    let mut _214: &mut state::spot_market::SpotMarket;
    let mut _215: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _216: ();
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _218: std::result::Result<(), anchor_lang::error::Error>;
    let mut _219: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _220: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _221: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _222: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _223: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _224: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _225: &anchor_lang::prelude::AccountInfo<'_>;
    let _226: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _227: u8;
    let mut _228: &state::state::State;
    let mut _229: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _230: u64;
    let mut _231: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _232: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _233: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _234: bool;
    let mut _235: &state::spot_market::SpotMarket;
    let _236: &state::spot_market::SpotMarket;
    let mut _237: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _238: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _244: ();
    let mut _245: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _246: std::result::Result<(), anchor_lang::error::Error>;
    let mut _247: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _248: isize;
    let mut _250: !;
    let mut _251: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _253: i64;
    let mut _254: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _255: std::result::Result<i64, error::ErrorCode>;
    let mut _256: &state::spot_market::SpotMarket;
    let _257: &state::spot_market::SpotMarket;
    let mut _258: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _259: u64;
    let mut _260: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _261: &anchor_spl::token_interface::TokenAccount;
    let _262: &anchor_spl::token_interface::TokenAccount;
    let mut _263: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _264: isize;
    let mut _266: !;
    let mut _267: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _269: ();
    let mut _274: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _275: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _276: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _277: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _278: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _279: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _280: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _281: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _282: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _283: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _284: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _285: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _286: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _287: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _288: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _289: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _290: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _291: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _292: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>;
    let mut _293: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _320: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _321: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _322: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _323: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _324: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _325: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _326: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug state => _13;
        let _14: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
        scope 6 {
            debug spot_market => _14;
            let _26: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
            scope 11 {
                debug remaining_accounts_iter => _26;
                let _30: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _38: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                scope 12 {
                    debug mint => _30;
                    let _48: error::ErrorCode;
                    let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _76: ();
                    let _85: error::ErrorCode;
                    let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _113: ();
                    let _114: u64;
                    scope 17 {
                        debug error_code => _48;
                        let _55: std::string::String;
                        let mut _273: &[&str; 2];
                        scope 18 {
                            debug res => _55;
                        }
                    }
                    scope 19 {
                        debug residual => _73;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _76;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug error_code => _85;
                        let _92: std::string::String;
                        let mut _272: &[&str; 2];
                        scope 24 {
                            debug res => _92;
                        }
                    }
                    scope 25 {
                        debug residual => _110;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _113;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug spot_vault_amount => _114;
                        let _119: u64;
                        scope 30 {
                            debug insurance_vault_amount => _119;
                            let _124: anchor_lang::prelude::Clock;
                            let _128: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _131: anchor_lang::prelude::Clock;
                            scope 31 {
                                debug clock => _124;
                                let _132: i64;
                                scope 36 {
                                    debug now => _132;
                                    let _133: i64;
                                    let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _147: i64;
                                    scope 37 {
                                        debug time_until_next_update => _133;
                                        let _154: error::ErrorCode;
                                        let _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _198: ();
                                        let _199: u64;
                                        let _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _212: u64;
                                        scope 42 {
                                            debug error_code => _154;
                                            let _161: std::string::String;
                                            let _180: std::string::String;
                                            let mut _270: &[&str; 2];
                                            let mut _271: &[&str; 2];
                                            scope 43 {
                                                debug res => _161;
                                            }
                                            scope 44 {
                                                debug res => _180;
                                            }
                                        }
                                        scope 45 {
                                            debug residual => _195;
                                            scope 46 {
                                            }
                                        }
                                        scope 47 {
                                            debug val => _198;
                                            scope 48 {
                                            }
                                        }
                                        scope 49 {
                                            debug token_amount => _199;
                                            let _240: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _243: ();
                                            let _249: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _252: ();
                                            let _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _268: i64;
                                            scope 54 {
                                                debug residual => _240;
                                                scope 55 {
                                                }
                                            }
                                            scope 56 {
                                                debug val => _243;
                                                scope 57 {
                                                }
                                            }
                                            scope 58 {
                                                debug residual => _249;
                                                scope 59 {
                                                }
                                            }
                                            scope 60 {
                                                debug val => _252;
                                                scope 61 {
                                                }
                                            }
                                            scope 62 {
                                                debug residual => _265;
                                                scope 63 {
                                                }
                                            }
                                            scope 64 {
                                                debug val => _268;
                                                scope 65 {
                                                }
                                            }
                                        }
                                        scope 50 {
                                            debug residual => _209;
                                            scope 51 {
                                            }
                                        }
                                        scope 52 {
                                            debug val => _212;
                                            scope 53 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _144;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _147;
                                        scope 41 {
                                        }
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _128;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _131;
                                scope 35 {
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _35;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _38;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _22;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _25;
            scope 10 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _274 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _7 = &((*_274).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _275 = deref_copy (*_7);
        _319 = (((_275.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_319);
        _5 = constraints::withdraw_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb128];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _294 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        _276 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _13 = &((*_276).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _277 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _19 = &((*_277).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _18 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb133];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _312 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb122;
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _17 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _18, move _20) -> [return: bb8, unwind: bb128];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb9, unwind: bb128];
    }

    bb9: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _15 = move _25;
        StorageDead(_25);
        _14 = &mut _15;
        _298 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _278 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _29 = &(*_278);
        _28 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _29) -> [return: bb13, unwind: bb127];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb12, unwind: bb132];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _296 = discriminant(_16);
        StorageDead(_16);
        goto -> bb121;
    }

    bb13: {
        StorageDead(_29);
        _27 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _28) -> [return: bb14, unwind: bb127];
    }

    bb14: {
        StorageDead(_28);
        _26 = &mut _27;
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_26);
        _32 = get_token_mint(move _33) -> [return: bb15, unwind: bb127];
    }

    bb15: {
        StorageDead(_33);
        _31 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _32) -> [return: bb16, unwind: bb127];
    }

    bb16: {
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_38);
        _38 = move ((_31 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _30 = move _38;
        StorageDead(_38);
        StorageDead(_31);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _2;
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_14);
        _45 = <RefMut<'_, SpotMarket> as Deref>::deref(move _46) -> [return: bb20, unwind: bb127];
    }

    bb18: {
        StorageLive(_35);
        _35 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb19, unwind: bb127];
    }

    bb19: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_31);
        goto -> bb120;
    }

    bb20: {
        StorageDead(_46);
        _44 = ((*_45).42: u16);
        _42 = Eq(move _43, move _44);
        switchInt(move _42) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_47);
        _47 = ();
        _41 = std::result::Result::<(), error::ErrorCode>::Ok(move _47);
        StorageDead(_47);
        goto -> bb30;
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_48);
        _48 = error::ErrorCode::InvalidSpotMarketAccount;
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _273 = const _;
        _59 = &(*_273);
        _58 = &(*_59);
        _57 = move _58 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_48;
        _66 = &(*_67);
        _65 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _66) -> [return: bb23, unwind: bb127];
    }

    bb23: {
        StorageDead(_66);
        _64 = [move _65];
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = move _62 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_62);
        _56 = Arguments::<'_>::new_v1(move _57, move _61) -> [return: bb24, unwind: bb127];
    }

    bb24: {
        StorageDead(_61);
        StorageDead(_57);
        _55 = format(move _56) -> [return: bb25, unwind: bb127];
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        _54 = move _55;
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        _51 = <String as Deref>::deref(move _52) -> [return: bb26, unwind: bb126];
    }

    bb26: {
        _50 = &(*_51);
        StorageDead(_52);
        _49 = solana_program::log::sol_log(move _50) -> [return: bb27, unwind: bb126];
    }

    bb27: {
        StorageDead(_50);
        drop(_54) -> [return: bb28, unwind: bb127];
    }

    bb28: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = const "invalid spot_market passed";
        _69 = &(*_70);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb29, unwind: bb127];
    }

    bb29: {
        StorageDead(_69);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_71);
        _71 = _48;
        _41 = std::result::Result::<(), error::ErrorCode>::Err(move _71);
        StorageDead(_71);
        StorageDead(_48);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_42);
        _40 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _41) -> [return: bb31, unwind: bb127];
    }

    bb31: {
        StorageDead(_41);
        _72 = discriminant(_40);
        switchInt(move _72) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_76);
        _76 = ((_40 as Continue).0: ());
        _39 = _76;
        StorageDead(_76);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &(*_14);
        _82 = <RefMut<'_, SpotMarket> as Deref>::deref(move _83) -> [return: bb35, unwind: bb127];
    }

    bb33: {
        StorageLive(_73);
        _73 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb34, unwind: bb127];
    }

    bb34: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb120;
    }

    bb35: {
        StorageDead(_83);
        _81 = (((*_82).9: state::spot_market::InsuranceFund).6: i64);
        _80 = Gt(move _81, const 0_i64);
        switchInt(move _80) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_84);
        _84 = ();
        _79 = std::result::Result::<(), error::ErrorCode>::Ok(move _84);
        StorageDead(_84);
        goto -> bb45;
    }

    bb37: {
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_85);
        _85 = error::ErrorCode::RevenueSettingsCannotSettleToIF;
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _272 = const _;
        _96 = &(*_272);
        _95 = &(*_96);
        _94 = move _95 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_85;
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _103) -> [return: bb38, unwind: bb127];
    }

    bb38: {
        StorageDead(_103);
        _101 = [move _102];
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = move _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_99);
        _93 = Arguments::<'_>::new_v1(move _94, move _98) -> [return: bb39, unwind: bb127];
    }

    bb39: {
        StorageDead(_98);
        StorageDead(_94);
        _92 = format(move _93) -> [return: bb40, unwind: bb127];
    }

    bb40: {
        StorageDead(_93);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_96);
        _91 = move _92;
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = <String as Deref>::deref(move _89) -> [return: bb41, unwind: bb125];
    }

    bb41: {
        _87 = &(*_88);
        StorageDead(_89);
        _86 = solana_program::log::sol_log(move _87) -> [return: bb42, unwind: bb125];
    }

    bb42: {
        StorageDead(_87);
        drop(_91) -> [return: bb43, unwind: bb127];
    }

    bb43: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = const "invalid revenue_settle_period settings on spot market";
        _106 = &(*_107);
        _105 = solana_program::log::sol_log(move _106) -> [return: bb44, unwind: bb127];
    }

    bb44: {
        StorageDead(_106);
        StorageDead(_107);
        StorageDead(_105);
        StorageLive(_108);
        _108 = _85;
        _79 = std::result::Result::<(), error::ErrorCode>::Err(move _108);
        StorageDead(_108);
        StorageDead(_85);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_80);
        _78 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _79) -> [return: bb46, unwind: bb127];
    }

    bb46: {
        StorageDead(_79);
        _109 = discriminant(_78);
        switchInt(move _109) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_113);
        _113 = ((_78 as Continue).0: ());
        _77 = _113;
        StorageDead(_113);
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _279 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _280 = deref_copy ((*_279).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _320 = (((_280.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _118 = &(*_320);
        _117 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _118) -> [return: bb50, unwind: bb127];
    }

    bb48: {
        StorageLive(_110);
        _110 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb49, unwind: bb127];
    }

    bb49: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb120;
    }

    bb50: {
        _116 = &(*_117);
        _115 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _116) -> [return: bb51, unwind: bb127];
    }

    bb51: {
        StorageDead(_118);
        StorageDead(_116);
        _114 = ((*_115).2: u64);
        StorageDead(_117);
        StorageDead(_115);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _281 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _282 = deref_copy ((*_281).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _321 = (((_282.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _123 = &(*_321);
        _122 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _123) -> [return: bb52, unwind: bb127];
    }

    bb52: {
        _121 = &(*_122);
        _120 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _121) -> [return: bb53, unwind: bb127];
    }

    bb53: {
        StorageDead(_123);
        StorageDead(_121);
        _119 = ((*_120).2: u64);
        StorageDead(_122);
        StorageDead(_120);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb54, unwind: bb127];
    }

    bb54: {
        _125 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _126) -> [return: bb55, unwind: bb127];
    }

    bb55: {
        StorageDead(_126);
        _127 = discriminant(_125);
        switchInt(move _127) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_131);
        _131 = move ((_125 as Continue).0: anchor_lang::prelude::Clock);
        _124 = move _131;
        StorageDead(_131);
        _300 = discriminant(_125);
        StorageDead(_125);
        StorageLive(_132);
        _132 = (_124.4: i64);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = _132;
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &(*_14);
        _138 = <RefMut<'_, SpotMarket> as Deref>::deref(move _139) -> [return: bb59, unwind: bb127];
    }

    bb57: {
        StorageLive(_128);
        _128 = move ((_125 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_130);
        _130 = move _128;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _130) -> [return: bb58, unwind: bb131];
    }

    bb58: {
        StorageDead(_130);
        StorageDead(_128);
        _310 = discriminant(_125);
        StorageDead(_125);
        goto -> bb119;
    }

    bb59: {
        StorageDead(_139);
        _137 = (((*_138).9: state::spot_market::InsuranceFund).5: i64);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &(*_14);
        _141 = <RefMut<'_, SpotMarket> as Deref>::deref(move _142) -> [return: bb60, unwind: bb127];
    }

    bb60: {
        StorageDead(_142);
        _140 = (((*_141).9: state::spot_market::InsuranceFund).6: i64);
        _135 = on_the_hour_update(move _136, move _137, move _140) -> [return: bb61, unwind: bb127];
    }

    bb61: {
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_136);
        _134 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _135) -> [return: bb62, unwind: bb127];
    }

    bb62: {
        StorageDead(_135);
        _143 = discriminant(_134);
        switchInt(move _143) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_147);
        _147 = ((_134 as Continue).0: i64);
        _133 = _147;
        StorageDead(_147);
        StorageDead(_141);
        StorageDead(_138);
        StorageDead(_134);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = _133;
        _151 = Eq(move _152, const 0_i64);
        switchInt(move _151) -> [0: bb67, otherwise: bb66];
    }

    bb64: {
        StorageLive(_144);
        _144 = ((_134 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb65, unwind: bb127];
    }

    bb65: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_138);
        StorageDead(_134);
        goto -> bb118;
    }

    bb66: {
        StorageDead(_152);
        StorageLive(_153);
        _153 = ();
        _150 = std::result::Result::<(), error::ErrorCode>::Ok(move _153);
        StorageDead(_153);
        goto -> bb80;
    }

    bb67: {
        StorageDead(_152);
        StorageLive(_154);
        _154 = error::ErrorCode::RevenueSettingsCannotSettleToIF;
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _271 = const _;
        _165 = &(*_271);
        _164 = &(*_165);
        _163 = move _164 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_164);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_154;
        _172 = &(*_173);
        _171 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _172) -> [return: bb68, unwind: bb127];
    }

    bb68: {
        StorageDead(_172);
        _170 = [move _171];
        StorageDead(_171);
        _169 = &_170;
        _168 = &(*_169);
        _167 = move _168 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_168);
        _162 = Arguments::<'_>::new_v1(move _163, move _167) -> [return: bb69, unwind: bb127];
    }

    bb69: {
        StorageDead(_167);
        StorageDead(_163);
        _161 = format(move _162) -> [return: bb70, unwind: bb127];
    }

    bb70: {
        StorageDead(_162);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_165);
        _160 = move _161;
        StorageDead(_161);
        _159 = &_160;
        _158 = &(*_159);
        _157 = <String as Deref>::deref(move _158) -> [return: bb71, unwind: bb124];
    }

    bb71: {
        _156 = &(*_157);
        StorageDead(_158);
        _155 = solana_program::log::sol_log(move _156) -> [return: bb72, unwind: bb124];
    }

    bb72: {
        StorageDead(_156);
        drop(_160) -> [return: bb73, unwind: bb127];
    }

    bb73: {
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_155);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _270 = const _;
        _184 = &(*_270);
        _183 = &(*_184);
        _182 = move _183 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_183);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &_133;
        _191 = &(*_192);
        _190 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _191) -> [return: bb74, unwind: bb127];
    }

    bb74: {
        StorageDead(_191);
        _189 = [move _190];
        StorageDead(_190);
        _188 = &_189;
        _187 = &(*_188);
        _186 = move _187 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_187);
        _181 = Arguments::<'_>::new_v1(move _182, move _186) -> [return: bb75, unwind: bb127];
    }

    bb75: {
        StorageDead(_186);
        StorageDead(_182);
        _180 = format(move _181) -> [return: bb76, unwind: bb127];
    }

    bb76: {
        StorageDead(_181);
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_184);
        _179 = move _180;
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        _176 = <String as Deref>::deref(move _177) -> [return: bb77, unwind: bb123];
    }

    bb77: {
        _175 = &(*_176);
        StorageDead(_177);
        _174 = solana_program::log::sol_log(move _175) -> [return: bb78, unwind: bb123];
    }

    bb78: {
        StorageDead(_175);
        drop(_179) -> [return: bb79, unwind: bb127];
    }

    bb79: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_174);
        StorageLive(_193);
        _193 = _154;
        _150 = std::result::Result::<(), error::ErrorCode>::Err(move _193);
        StorageDead(_193);
        StorageDead(_154);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_151);
        _149 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _150) -> [return: bb81, unwind: bb127];
    }

    bb81: {
        StorageDead(_150);
        _194 = discriminant(_149);
        switchInt(move _194) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_198);
        _198 = ((_149 as Continue).0: ());
        _148 = _198;
        StorageDead(_198);
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = _114;
        StorageLive(_203);
        _203 = _119;
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &mut (*_14);
        _205 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _206) -> [return: bb85, unwind: bb127];
    }

    bb83: {
        StorageLive(_195);
        _195 = ((_149 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_197);
        _197 = _195;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _197) -> [return: bb84, unwind: bb127];
    }

    bb84: {
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb118;
    }

    bb85: {
        _204 = &mut (*_205);
        StorageDead(_206);
        StorageLive(_207);
        _207 = _132;
        _201 = controller::insurance::settle_revenue_to_insurance_fund(move _202, move _203, move _204, move _207, const true) -> [return: bb86, unwind: bb127];
    }

    bb86: {
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_202);
        _200 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _201) -> [return: bb87, unwind: bb127];
    }

    bb87: {
        StorageDead(_201);
        _208 = discriminant(_200);
        switchInt(move _208) -> [0: bb88, 1: bb89, otherwise: bb4];
    }

    bb88: {
        StorageLive(_212);
        _212 = ((_200 as Continue).0: u64);
        _199 = _212;
        StorageDead(_212);
        StorageDead(_205);
        StorageDead(_200);
        StorageLive(_213);
        _213 = _132;
        StorageLive(_214);
        StorageLive(_215);
        _215 = &mut (*_14);
        _214 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _215) -> [return: bb91, unwind: bb127];
    }

    bb89: {
        StorageLive(_209);
        _209 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_211);
        _211 = _209;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _211) -> [return: bb90, unwind: bb127];
    }

    bb90: {
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_205);
        StorageDead(_200);
        goto -> bb117;
    }

    bb91: {
        StorageDead(_215);
        (((*_214).9: state::spot_market::InsuranceFund).5: i64) = move _213;
        StorageDead(_213);
        StorageDead(_214);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _283 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _220 = &((*_283).5: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _219 = &(*_220);
        StorageLive(_221);
        StorageLive(_222);
        _284 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _222 = &((*_284).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _285 = deref_copy (*_222);
        _322 = (((_285.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _221 = &(*_322);
        StorageLive(_223);
        StorageLive(_224);
        _286 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _224 = &((*_286).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _287 = deref_copy (*_224);
        _323 = (((_287.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _223 = &(*_323);
        StorageLive(_225);
        StorageLive(_226);
        _288 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _226 = &((*_288).3: anchor_lang::prelude::AccountInfo<'_>);
        _225 = &(*_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _289 = deref_copy (*_13);
        _324 = (((_289.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _229 = &(*_324);
        _228 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _229) -> [return: bb92, unwind: bb127];
    }

    bb92: {
        StorageDead(_229);
        _227 = ((*_228).15: u8);
        StorageLive(_230);
        _230 = _199;
        StorageLive(_231);
        StorageLive(_232);
        _232 = &_30;
        _231 = &(*_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &(*_14);
        _236 = <RefMut<'_, SpotMarket> as Deref>::deref(move _237) -> [return: bb93, unwind: bb127];
    }

    bb93: {
        _235 = &(*_236);
        StorageDead(_237);
        _234 = SpotMarket::has_transfer_hook(move _235) -> [return: bb94, unwind: bb127];
    }

    bb94: {
        switchInt(move _234) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_238);
        _238 = &mut (*_26);
        _233 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _238);
        StorageDead(_238);
        goto -> bb97;
    }

    bb96: {
        StorageDead(_236);
        StorageDead(_235);
        _233 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb97;
    }

    bb97: {
        StorageDead(_234);
        _218 = send_from_program_vault(move _219, move _221, move _223, move _225, move _227, move _230, move _231, move _233) -> [return: bb98, unwind: bb127];
    }

    bb98: {
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_219);
        _217 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _218) -> [return: bb99, unwind: bb127];
    }

    bb99: {
        StorageDead(_218);
        _239 = discriminant(_217);
        switchInt(move _239) -> [0: bb100, 1: bb101, otherwise: bb4];
    }

    bb100: {
        StorageLive(_243);
        _243 = ((_217 as Continue).0: ());
        _216 = _243;
        StorageDead(_243);
        _302 = discriminant(_217);
        StorageDead(_232);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _290 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _291 = deref_copy ((*_290).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _325 = (((_291.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _247 = &mut (*_325);
        _246 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _247) -> [return: bb103, unwind: bb127];
    }

    bb101: {
        StorageLive(_240);
        _240 = move ((_217 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_242);
        _242 = move _240;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _242) -> [return: bb102, unwind: bb130];
    }

    bb102: {
        StorageDead(_242);
        StorageDead(_240);
        _308 = discriminant(_217);
        StorageDead(_232);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb117;
    }

    bb103: {
        StorageDead(_247);
        _245 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _246) -> [return: bb104, unwind: bb127];
    }

    bb104: {
        StorageDead(_246);
        _248 = discriminant(_245);
        switchInt(move _248) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        StorageLive(_252);
        _252 = ((_245 as Continue).0: ());
        _244 = _252;
        StorageDead(_252);
        _304 = discriminant(_245);
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &(*_14);
        _257 = <RefMut<'_, SpotMarket> as Deref>::deref(move _258) -> [return: bb108, unwind: bb127];
    }

    bb106: {
        StorageLive(_249);
        _249 = move ((_245 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_251);
        _251 = move _249;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _251) -> [return: bb107, unwind: bb129];
    }

    bb107: {
        StorageDead(_251);
        StorageDead(_249);
        _306 = discriminant(_245);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb117;
    }

    bb108: {
        _256 = &(*_257);
        StorageDead(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _292 = deref_copy (_1.1: &mut instructions::keeper::SettleRevenueToInsuranceFund<'_>);
        _293 = deref_copy ((*_292).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _326 = (((_293.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _263 = &(*_326);
        _262 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _263) -> [return: bb109, unwind: bb127];
    }

    bb109: {
        _261 = &(*_262);
        _260 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _261) -> [return: bb110, unwind: bb127];
    }

    bb110: {
        StorageDead(_263);
        StorageDead(_261);
        _259 = ((*_260).2: u64);
        _255 = validate_spot_market_vault_amount(move _256, move _259) -> [return: bb111, unwind: bb127];
    }

    bb111: {
        StorageDead(_259);
        StorageDead(_256);
        _254 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _255) -> [return: bb112, unwind: bb127];
    }

    bb112: {
        StorageDead(_255);
        _264 = discriminant(_254);
        switchInt(move _264) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        StorageLive(_268);
        _268 = ((_254 as Continue).0: i64);
        _253 = _268;
        StorageDead(_268);
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_253);
        StorageLive(_269);
        _269 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _269);
        StorageDead(_269);
        StorageDead(_199);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_124);
        StorageDead(_119);
        StorageDead(_114);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        drop(_15) -> [return: bb116, unwind: bb128];
    }

    bb114: {
        StorageLive(_265);
        _265 = ((_254 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_267);
        _267 = _265;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _267) -> [return: bb115, unwind: bb127];
    }

    bb115: {
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb117;
    }

    bb116: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb122;
    }

    bb117: {
        StorageDead(_199);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_124);
        StorageDead(_119);
        StorageDead(_114);
        goto -> bb120;
    }

    bb120: {
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        drop(_15) -> [return: bb121, unwind: bb128];
    }

    bb121: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb122;
    }

    bb122: {
        return;
    }

    bb123 (cleanup): {
        drop(_179) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_160) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_91) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_54) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_15) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        resume;
    }

    bb129 (cleanup): {
        _314 = discriminant(_245);
        goto -> bb127;
    }

    bb130 (cleanup): {
        _315 = discriminant(_217);
        goto -> bb127;
    }

    bb131 (cleanup): {
        _316 = discriminant(_125);
        goto -> bb127;
    }

    bb132 (cleanup): {
        _317 = discriminant(_16);
        goto -> bb128;
    }

    bb133 (cleanup): {
        _318 = discriminant(_4);
        goto -> bb128;
    }
}
