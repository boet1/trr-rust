// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::get_standardized_base_asset_amount_unfilled` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::get_standardized_base_asset_amount_unfilled(_1: &Order, _2: Option<i64>, _3: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    debug existing_position => _2;
    debug step_size => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: &state::user::Order;
    let mut _8: std::option::Option<i64>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u64;
    let mut _14: u64;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = _2;
        _6 = Order::get_base_asset_amount_unfilled(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: u64);
        _4 = _13;
        StorageDead(_13);
        StorageLive(_14);
        _14 = _3;
        _0 = math::orders::standardize_base_asset_amount(move _4, move _14) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_5);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_4);
        StorageDead(_5);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
