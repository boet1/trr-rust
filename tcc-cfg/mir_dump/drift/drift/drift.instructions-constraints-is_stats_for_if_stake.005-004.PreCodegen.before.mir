// MIR for `constraints::is_stats_for_if_stake` before PreCodegen

fn constraints::is_stats_for_if_stake(_1: &anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake>, _2: &anchor_lang::prelude::AccountLoader<'_, UserStats>) -> std::result::Result<bool, anchor_lang::error::Error> {
    debug if_stake => _1;
    debug user_stats => _2;
    let mut _0: std::result::Result<bool, anchor_lang::error::Error>;
    let _3: std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _5: std::result::Result<std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::UserStats>>;
    let mut _14: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _21: bool;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let _23: &state::user::UserStats;
    let mut _24: &std::cell::Ref<'_, state::user::UserStats>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let _26: &anchor_lang::prelude::Pubkey;
    let _27: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _28: &std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    scope 1 {
        debug if_stake => _3;
        let _12: std::cell::Ref<'_, state::user::UserStats>;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _20: std::cell::Ref<'_, state::user::UserStats>;
        scope 6 {
            debug user_stats => _12;
        }
        scope 7 {
            debug residual => _17;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _20;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<Ref<'_, InsuranceFundStake>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _3 = move _11;
        StorageDead(_11);
        _29 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_2);
        _14 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load(move _15) -> [return: bb7, unwind: bb20];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<bool, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _35 = discriminant(_4);
        StorageDead(_4);
        goto -> bb17;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<Ref<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_13 as Continue).0: std::cell::Ref<'_, state::user::UserStats>);
        _12 = move _20;
        StorageDead(_20);
        _31 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_12;
        _23 = <Ref<'_, UserStats> as Deref>::deref(move _24) -> [return: bb12, unwind: bb19];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<bool, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        _33 = discriminant(_13);
        StorageDead(_13);
        StorageDead(_12);
        drop(_3) -> [return: bb17, unwind: bb21];
    }

    bb12: {
        StorageDead(_24);
        _22 = &((*_23).0: anchor_lang::prelude::Pubkey);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_3;
        _27 = <Ref<'_, InsuranceFundStake> as Deref>::deref(move _28) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        StorageDead(_28);
        _26 = &((*_27).0: anchor_lang::prelude::Pubkey);
        _25 = &(*_26);
        _21 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _22, move _25) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        StorageDead(_25);
        StorageDead(_22);
        _0 = std::result::Result::<bool, anchor_lang::error::Error>::Ok(move _21);
        StorageDead(_21);
        drop(_12) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        StorageDead(_12);
        drop(_3) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        StorageDead(_3);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_23);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_3);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_12) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        _37 = discriminant(_13);
        goto -> bb20;
    }

    bb23 (cleanup): {
        _38 = discriminant(_4);
        goto -> bb21;
    }
}
