digraph Mir_0_4187 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn state::state::FeeStructure::spot_default() -&gt; state::state::FeeStructure<br align="left"/>let mut _1: [state::state::FeeTier; 10_usize];<br align="left"/>let mut _2: state::state::FeeTier;<br align="left"/>let mut _3: state::state::FeeTier;<br align="left"/>let _4: usize;<br align="left"/>let mut _5: usize;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: [state::state::FeeTier; 10_usize];<br align="left"/>let mut _8: state::state::OrderFillerRewardStructure;<br align="left"/>debug fee_tiers =&gt; _1;<br align="left"/>>;
    bb0__0_4187 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_1)<br/>StorageLive(_2)<br/></td></tr><tr><td align="left">_2 = &lt;state::state::FeeTier as Default&gt;::default()</td></tr></table>>];
    bb1__0_4187 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_1 = [move _2; 10]<br/>StorageDead(_2)<br/>StorageLive(_3)<br/>_3 = state::state::FeeTier { fee_numerator: const 100_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 0_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 0_u32, referee_fee_denominator: const _ }<br/>StorageLive(_4)<br/>_4 = const 0_usize<br/>_5 = Len(_1)<br/>_6 = Lt(_4, _5)<br/></td></tr><tr><td align="left">assert(move _6, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _5, _4)</td></tr></table>>];
    bb2__0_4187 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_1[_4] = move _3<br/>StorageDead(_3)<br/>StorageDead(_4)<br/>StorageLive(_7)<br/>_7 = _1<br/>StorageLive(_8)<br/>_8 = OrderFillerRewardStructure { reward_numerator: const 10_u32, reward_denominator: const _, time_based_reward_lower_bound: const 10000_u128 }<br/>_0 = state::state::FeeStructure { fee_tiers: move _7, filler_reward_structure: move _8, referrer_reward_epoch_upper_bound: const _, flat_filler_fee: const 10000_u64 }<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_1)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4187 -> bb1__0_4187 [label="return"];
    bb1__0_4187 -> bb2__0_4187 [label="success"];
}
