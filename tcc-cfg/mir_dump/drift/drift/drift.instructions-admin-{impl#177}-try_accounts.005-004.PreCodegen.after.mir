// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5396:10: 5396:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5396:10: 5396:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut AdminUpdatePerpMarketOracleBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::admin::AdminUpdatePerpMarketOracleBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::admin::AdminUpdatePerpMarketOracleBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::admin::AdminUpdatePerpMarketOracleBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::admin::AdminUpdatePerpMarketOracleBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::admin::AdminUpdatePerpMarketOracleBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _83: &state::state::State;
    let mut _84: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _86: &anchor_lang::prelude::Signer<'_>;
    let mut _87: bool;
    let mut _88: &anchor_lang::prelude::Pubkey;
    let mut _89: &anchor_lang::prelude::Pubkey;
    let mut _90: !;
    let mut _91: anchor_lang::error::Error;
    let mut _92: anchor_lang::error::Error;
    let mut _93: anchor_lang::error::Error;
    let mut _94: anchor_lang::error::ErrorCode;
    let mut _95: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _96: anchor_lang::prelude::Pubkey;
    let mut _97: anchor_lang::prelude::Pubkey;
    let _98: ();
    let mut _99: bool;
    let mut _100: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _101: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _102: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _103: !;
    let mut _104: anchor_lang::error::Error;
    let mut _105: anchor_lang::error::Error;
    let mut _106: anchor_lang::error::ErrorCode;
    let mut _107: instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _108: anchor_lang::prelude::Signer<'_>;
    let mut _109: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _110: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _111: anchor_lang::prelude::AccountInfo<'_>;
    let mut _112: anchor_lang::prelude::AccountInfo<'_>;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug admin => _6;
        let _21: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 6 {
            debug state => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
            scope 11 {
                debug perp_market => _36;
                let _51: anchor_lang::prelude::AccountInfo<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountInfo<'_>;
                scope 16 {
                    debug oracle => _51;
                    let _66: anchor_lang::prelude::AccountInfo<'_>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountInfo<'_>;
                    scope 21 {
                        debug old_oracle => _66;
                        let _82: anchor_lang::prelude::Pubkey;
                        scope 26 {
                            debug my_key => _82;
                            let _85: anchor_lang::prelude::Pubkey;
                            scope 27 {
                                debug target_key => _85;
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, AdminUpdatePerpMarketOracleBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18}>(move _9, move _15) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb55];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _113 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, AdminUpdatePerpMarketOracleBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb60];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _131 = discriminant(_7);
        StorageDead(_7);
        goto -> bb50;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
        _23 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18}>(move _24, move _30) -> [return: bb9, unwind: bb55];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb55];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _21 = move _35;
        StorageDead(_35);
        _115 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as anchor_lang::Accounts<'_, AdminUpdatePerpMarketOracleBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb54];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb59];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _129 = discriminant(_22);
        StorageDead(_22);
        goto -> bb49;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18}>(move _39, move _45) -> [return: bb15, unwind: bb54];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb54];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _36 = move _50;
        StorageDead(_50);
        _117 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, AdminUpdatePerpMarketOracleBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb54];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb58];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _127 = discriminant(_37);
        StorageDead(_37);
        goto -> bb48;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18}>(move _54, move _60) -> [return: bb21, unwind: bb54];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb54];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _51 = move _65;
        StorageDead(_65);
        _119 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, AdminUpdatePerpMarketOracleBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb53];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb57];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _125 = discriminant(_52);
        StorageDead(_52);
        goto -> bb47;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5396:10: 5396:18}>(move _69, move _75) -> [return: bb27, unwind: bb53];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb53];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _66 = move _80;
        StorageDead(_80);
        _121 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _138 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _84 = &(*_138);
        _83 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _84) -> [return: bb32, unwind: bb52];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb56];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _123 = discriminant(_67);
        StorageDead(_67);
        goto -> bb46;
    }

    bb32: {
        StorageDead(_84);
        _82 = ((*_83).0: anchor_lang::prelude::Pubkey);
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_6;
        _85 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _86) -> [return: bb33, unwind: bb52];
    }

    bb33: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_82;
        StorageLive(_89);
        _89 = &_85;
        _87 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _88, move _89) -> [return: bb34, unwind: bb52];
    }

    bb34: {
        switchInt(move _87) -> [0: bb39, otherwise: bb35];
    }

    bb35: {
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = ConstraintHasOne;
        _93 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _94) -> [return: bb36, unwind: bb52];
    }

    bb36: {
        StorageDead(_94);
        _92 = anchor_lang::error::Error::with_account_name::<&str>(move _93, const "state") -> [return: bb37, unwind: bb52];
    }

    bb37: {
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _82;
        StorageLive(_97);
        _97 = _85;
        _95 = (move _96, move _97);
        StorageDead(_97);
        StorageDead(_96);
        _91 = anchor_lang::error::Error::with_pubkeys(move _92, move _95) -> [return: bb38, unwind: bb52];
    }

    bb38: {
        StorageDead(_95);
        StorageDead(_92);
        _0 = std::result::Result::<admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error>::Err(move _91);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb45;
    }

    bb39: {
        StorageDead(_89);
        StorageDead(_88);
        _81 = const ();
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_36;
        _101 = &(*_102);
        _100 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _101) -> [return: bb40, unwind: bb52];
    }

    bb40: {
        StorageDead(_101);
        _99 = ((*_100).6: bool);
        switchInt(move _99) -> [0: bb41, otherwise: bb44];
    }

    bb41: {
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = ConstraintMut;
        _105 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _106) -> [return: bb42, unwind: bb52];
    }

    bb42: {
        StorageDead(_106);
        _104 = anchor_lang::error::Error::with_account_name::<&str>(move _105, const "perp_market") -> [return: bb43, unwind: bb52];
    }

    bb43: {
        StorageDead(_105);
        _0 = std::result::Result::<admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error>::Err(move _104);
        StorageDead(_104);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb45;
    }

    bb44: {
        StorageDead(_102);
        StorageDead(_100);
        _98 = const ();
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_107);
        StorageLive(_108);
        _108 = move _6;
        StorageLive(_109);
        _109 = move _21;
        StorageLive(_110);
        _110 = move _36;
        StorageLive(_111);
        _111 = move _51;
        StorageLive(_112);
        _112 = move _66;
        _107 = admin::AdminUpdatePerpMarketOracle::<'_> { admin: move _108, state: move _109, perp_market: move _110, oracle: move _111, old_oracle: move _112 };
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_108);
        _0 = std::result::Result::<admin::AdminUpdatePerpMarketOracle<'_>, anchor_lang::error::Error>::Ok(move _107);
        StorageDead(_107);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb51;
    }

    bb45: {
        drop(_66) -> [return: bb46, unwind: bb53];
    }

    bb46: {
        StorageDead(_66);
        drop(_51) -> [return: bb47, unwind: bb54];
    }

    bb47: {
        StorageDead(_51);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_36);
        drop(_21) -> [return: bb49, unwind: bb55];
    }

    bb49: {
        StorageDead(_21);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_6);
        goto -> bb51;
    }

    bb51: {
        return;
    }

    bb52 (cleanup): {
        drop(_66) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_51) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_21) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56 (cleanup): {
        _133 = discriminant(_67);
        goto -> bb53;
    }

    bb57 (cleanup): {
        _134 = discriminant(_52);
        goto -> bb54;
    }

    bb58 (cleanup): {
        _135 = discriminant(_37);
        goto -> bb54;
    }

    bb59 (cleanup): {
        _136 = discriminant(_22);
        goto -> bb55;
    }

    bb60 (cleanup): {
        _137 = discriminant(_7);
        goto -> bb55;
    }
}
