// MIR for `math::orders::limit_price_breaches_maker_oracle_price_bands` after PreCodegen

fn math::orders::limit_price_breaches_maker_oracle_price_bands(_1: u64, _2: controller::position::PositionDirection, _3: i64, _4: u32) -> std::result::Result<bool, error::ErrorCode> {
    debug order_limit_price => _1;
    debug order_direction => _2;
    debug oracle_price => _3;
    debug margin_ratio_initial => _4;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _5: u64;
    let mut _6: i64;
    let mut _8: isize;
    let _9: ();
    let mut _10: bool;
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: !;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: u64;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _25: std::result::Result<u64, error::ErrorCode>;
    let mut _26: u64;
    let mut _27: u64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _45: std::result::Result<u128, error::ErrorCode>;
    let mut _46: u64;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: ();
    let mut _58: bool;
    let mut _59: u128;
    let mut _60: u128;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _62: std::result::Result<u128, error::ErrorCode>;
    let mut _63: u32;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: !;
    let _70: ();
    let mut _71: &str;
    let _72: &str;
    let mut _73: &std::string::String;
    let _74: &std::string::String;
    let _75: std::string::String;
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[&str; 2];
    let _80: &[&str; 2];
    let _81: [&str; 2];
    let mut _82: &[core::fmt::rt::Argument<'_>];
    let mut _83: &[core::fmt::rt::Argument<'_>; 2];
    let _84: &[core::fmt::rt::Argument<'_>; 2];
    let _85: [core::fmt::rt::Argument<'_>; 2];
    let mut _86: core::fmt::rt::Argument<'_>;
    let mut _87: &u64;
    let _88: &u64;
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &u64;
    let _91: &u64;
    let _92: ();
    let mut _93: bool;
    let mut _94: u64;
    let mut _95: u64;
    let mut _96: !;
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _99: std::result::Result<u128, error::ErrorCode>;
    let mut _100: u128;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _102: std::result::Result<u128, error::ErrorCode>;
    let mut _103: u128;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _105: std::result::Result<u128, error::ErrorCode>;
    let mut _106: u64;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _108: std::result::Result<u64, error::ErrorCode>;
    let mut _109: u64;
    let mut _110: u64;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: u128;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _128: std::result::Result<u128, error::ErrorCode>;
    let mut _129: u64;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _140: ();
    let mut _141: bool;
    let mut _142: u128;
    let mut _143: u128;
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _145: std::result::Result<u128, error::ErrorCode>;
    let mut _146: u32;
    let mut _147: isize;
    let mut _149: !;
    let mut _150: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _152: !;
    let _153: ();
    let mut _154: &str;
    let _155: &str;
    let mut _156: &std::string::String;
    let _157: &std::string::String;
    let _158: std::string::String;
    let mut _160: std::fmt::Arguments<'_>;
    let mut _161: &[&str];
    let mut _162: &[&str; 2];
    let _163: &[&str; 2];
    let _164: [&str; 2];
    let mut _165: &[core::fmt::rt::Argument<'_>];
    let mut _166: &[core::fmt::rt::Argument<'_>; 2];
    let _167: &[core::fmt::rt::Argument<'_>; 2];
    let _168: [core::fmt::rt::Argument<'_>; 2];
    let mut _169: core::fmt::rt::Argument<'_>;
    let mut _170: &u64;
    let _171: &u64;
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &u64;
    let _174: &u64;
    scope 1 {
        debug oracle_price => _5;
        let _7: u32;
        scope 2 {
            debug max_percent_diff => _7;
            let _14: u128;
            let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _32: u64;
            let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _37: u128;
            let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _42: u128;
            let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _51: u128;
            let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _56: u128;
            let _97: u128;
            let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _115: u64;
            let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _120: u128;
            let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _125: u128;
            let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _134: u128;
            let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _139: u128;
            scope 3 {
                debug percent_diff => _14;
                let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _68: u128;
                let _76: std::string::String;
                let mut _176: &[&str; 2];
                scope 24 {
                    debug residual => _65;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _68;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug res => _76;
                }
            }
            scope 4 {
                debug residual => _29;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _32;
                scope 7 {
                }
            }
            scope 8 {
                debug residual => _34;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _37;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _39;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _42;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _48;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _51;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _53;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _56;
                scope 23 {
                }
            }
            scope 29 {
                debug percent_diff => _97;
                let _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _151: u128;
                let _159: std::string::String;
                let mut _175: &[&str; 2];
                scope 50 {
                    debug residual => _148;
                    scope 51 {
                    }
                }
                scope 52 {
                    debug val => _151;
                    scope 53 {
                    }
                }
                scope 54 {
                    debug res => _159;
                }
            }
            scope 30 {
                debug residual => _112;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _115;
                scope 33 {
                }
            }
            scope 34 {
                debug residual => _117;
                scope 35 {
                }
            }
            scope 36 {
                debug val => _120;
                scope 37 {
                }
            }
            scope 38 {
                debug residual => _122;
                scope 39 {
                }
            }
            scope 40 {
                debug val => _125;
                scope 41 {
                }
            }
            scope 42 {
                debug residual => _131;
                scope 43 {
                }
            }
            scope 44 {
                debug val => _134;
                scope 45 {
                }
            }
            scope 46 {
                debug residual => _136;
                scope 47 {
                }
            }
            scope 48 {
                debug val => _139;
                scope 49 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = core::num::<impl i64>::unsigned_abs(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = _4;
        _8 = discriminant(_2);
        switchInt(move _8) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = _1;
        StorageLive(_95);
        _95 = _5;
        _93 = Ge(move _94, move _95);
        switchInt(move _93) -> [0: bb47, otherwise: bb46];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _1;
        StorageLive(_12);
        _12 = _5;
        _10 = Le(move _11, move _12);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_11);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb100;
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _1;
        StorageLive(_27);
        _27 = _5;
        _25 = <u64 as SafeMath>::safe_sub(move _26, move _27) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        _28 = discriminant(_24);
        switchInt(move _28) -> [0: bb9, 1: bb10, otherwise: bb3];
    }

    bb9: {
        StorageLive(_32);
        _32 = ((_24 as Continue).0: u64);
        _23 = _32;
        StorageDead(_32);
        _22 = <u64 as Cast>::cast::<u128>(move _23) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_29);
        _29 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb96;
    }

    bb12: {
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_22);
        _33 = discriminant(_21);
        switchInt(move _33) -> [0: bb14, 1: bb15, otherwise: bb3];
    }

    bb14: {
        StorageLive(_37);
        _37 = ((_21 as Continue).0: u128);
        _20 = _37;
        StorageDead(_37);
        _19 = <u128 as SafeMath>::safe_mul(move _20, const _) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_34);
        goto -> bb96;
    }

    bb17: {
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_19);
        _38 = discriminant(_18);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb3];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_18 as Continue).0: u128);
        _17 = _42;
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _5;
        _45 = <u64 as Cast>::cast::<u128>(move _46) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_39);
        _39 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb97;
    }

    bb22: {
        StorageDead(_46);
        _44 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb24, 1: bb25, otherwise: bb3];
    }

    bb24: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: u128);
        _43 = _51;
        StorageDead(_51);
        _16 = <u128 as SafeMath>::safe_div(move _17, move _43) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_48);
        _48 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_43);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb95;
    }

    bb27: {
        StorageDead(_43);
        StorageDead(_17);
        _15 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_16);
        _52 = discriminant(_15);
        switchInt(move _52) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        StorageLive(_56);
        _56 = ((_15 as Continue).0: u128);
        _14 = _56;
        StorageDead(_56);
        StorageDead(_44);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = _14;
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _7;
        _62 = <u32 as Cast>::cast::<u128>(move _63) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_53);
        _53 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb95;
    }

    bb32: {
        StorageDead(_63);
        _61 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _62) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_62);
        _64 = discriminant(_61);
        switchInt(move _64) -> [0: bb34, 1: bb35, otherwise: bb3];
    }

    bb34: {
        StorageLive(_68);
        _68 = ((_61 as Continue).0: u128);
        _60 = _68;
        StorageDead(_68);
        _58 = Ge(move _59, move _60);
        switchInt(move _58) -> [0: bb38, otherwise: bb37];
    }

    bb35: {
        StorageLive(_65);
        _65 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb94;
    }

    bb37: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _176 = const _;
        _80 = &(*_176);
        _79 = &(*_80);
        _78 = move _79 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_79);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_1;
        _87 = &(*_88);
        _86 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _87) -> [return: bb39, unwind continue];
    }

    bb38: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        _57 = const ();
        StorageDead(_58);
        StorageDead(_57);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_14);
        goto -> bb87;
    }

    bb39: {
        StorageDead(_87);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_5;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _90) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_90);
        _85 = [move _86, move _89];
        StorageDead(_89);
        StorageDead(_86);
        _84 = &_85;
        _83 = &(*_84);
        _82 = move _83 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_83);
        _77 = Arguments::<'_>::new_v1(move _78, move _82) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_82);
        StorageDead(_78);
        _76 = format(move _77) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_77);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_80);
        _75 = move _76;
        StorageDead(_76);
        _74 = &_75;
        _73 = &(*_74);
        _72 = <String as Deref>::deref(move _73) -> [return: bb43, unwind: bb103];
    }

    bb43: {
        _71 = &(*_72);
        StorageDead(_73);
        _70 = solana_program::log::sol_log(move _71) -> [return: bb44, unwind: bb103];
    }

    bb44: {
        StorageDead(_71);
        drop(_75) -> [return: bb45, unwind: bb104];
    }

    bb45: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        goto -> bb94;
    }

    bb46: {
        StorageDead(_95);
        StorageDead(_94);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb100;
    }

    bb47: {
        StorageDead(_95);
        StorageDead(_94);
        _92 = const ();
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = _5;
        StorageLive(_110);
        _110 = _1;
        _108 = <u64 as SafeMath>::safe_sub(move _109, move _110) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_109);
        _107 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _108) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_108);
        _111 = discriminant(_107);
        switchInt(move _111) -> [0: bb50, 1: bb51, otherwise: bb3];
    }

    bb50: {
        StorageLive(_115);
        _115 = ((_107 as Continue).0: u64);
        _106 = _115;
        StorageDead(_115);
        _105 = <u64 as Cast>::cast::<u128>(move _106) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_112);
        _112 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb90;
    }

    bb53: {
        StorageDead(_106);
        _104 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _105) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_105);
        _116 = discriminant(_104);
        switchInt(move _116) -> [0: bb55, 1: bb56, otherwise: bb3];
    }

    bb55: {
        StorageLive(_120);
        _120 = ((_104 as Continue).0: u128);
        _103 = _120;
        StorageDead(_120);
        _102 = <u128 as SafeMath>::safe_mul(move _103, const _) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_117);
        _117 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_119);
        StorageDead(_117);
        goto -> bb90;
    }

    bb58: {
        StorageDead(_103);
        _101 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _102) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_102);
        _121 = discriminant(_101);
        switchInt(move _121) -> [0: bb60, 1: bb61, otherwise: bb3];
    }

    bb60: {
        StorageLive(_125);
        _125 = ((_101 as Continue).0: u128);
        _100 = _125;
        StorageDead(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _5;
        _128 = <u64 as Cast>::cast::<u128>(move _129) -> [return: bb63, unwind continue];
    }

    bb61: {
        StorageLive(_122);
        _122 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_124);
        StorageDead(_122);
        goto -> bb91;
    }

    bb63: {
        StorageDead(_129);
        _127 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _128) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_128);
        _130 = discriminant(_127);
        switchInt(move _130) -> [0: bb65, 1: bb66, otherwise: bb3];
    }

    bb65: {
        StorageLive(_134);
        _134 = ((_127 as Continue).0: u128);
        _126 = _134;
        StorageDead(_134);
        _99 = <u128 as SafeMath>::safe_div(move _100, move _126) -> [return: bb68, unwind continue];
    }

    bb66: {
        StorageLive(_131);
        _131 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_126);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb89;
    }

    bb68: {
        StorageDead(_126);
        StorageDead(_100);
        _98 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _99) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_99);
        _135 = discriminant(_98);
        switchInt(move _135) -> [0: bb70, 1: bb71, otherwise: bb3];
    }

    bb70: {
        StorageLive(_139);
        _139 = ((_98 as Continue).0: u128);
        _97 = _139;
        StorageDead(_139);
        StorageDead(_127);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_98);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = _97;
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = _7;
        _145 = <u32 as Cast>::cast::<u128>(move _146) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_136);
        _136 = ((_98 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_138);
        StorageDead(_136);
        goto -> bb89;
    }

    bb73: {
        StorageDead(_146);
        _144 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _145) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_145);
        _147 = discriminant(_144);
        switchInt(move _147) -> [0: bb75, 1: bb76, otherwise: bb3];
    }

    bb75: {
        StorageLive(_151);
        _151 = ((_144 as Continue).0: u128);
        _143 = _151;
        StorageDead(_151);
        _141 = Ge(move _142, move _143);
        switchInt(move _141) -> [0: bb79, otherwise: bb78];
    }

    bb76: {
        StorageLive(_148);
        _148 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_150);
        _150 = _148;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _150) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        goto -> bb88;
    }

    bb78: {
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _175 = const _;
        _163 = &(*_175);
        _162 = &(*_163);
        _161 = move _162 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_162);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &_1;
        _170 = &(*_171);
        _169 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _170) -> [return: bb80, unwind continue];
    }

    bb79: {
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        _140 = const ();
        StorageDead(_141);
        StorageDead(_140);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_97);
        goto -> bb87;
    }

    bb80: {
        StorageDead(_170);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_5;
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _173) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_173);
        _168 = [move _169, move _172];
        StorageDead(_172);
        StorageDead(_169);
        _167 = &_168;
        _166 = &(*_167);
        _165 = move _166 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_166);
        _160 = Arguments::<'_>::new_v1(move _161, move _165) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_165);
        StorageDead(_161);
        _159 = format(move _160) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_160);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_163);
        _158 = move _159;
        StorageDead(_159);
        _157 = &_158;
        _156 = &(*_157);
        _155 = <String as Deref>::deref(move _156) -> [return: bb84, unwind: bb102];
    }

    bb84: {
        _154 = &(*_155);
        StorageDead(_156);
        _153 = solana_program::log::sol_log(move _154) -> [return: bb85, unwind: bb102];
    }

    bb85: {
        StorageDead(_154);
        drop(_158) -> [return: bb86, unwind: bb104];
    }

    bb86: {
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_153);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        goto -> bb88;
    }

    bb87: {
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb101;
    }

    bb88: {
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb93;
    }

    bb89: {
        StorageDead(_127);
        goto -> bb92;
    }

    bb90: {
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_98);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_97);
        goto -> bb100;
    }

    bb94: {
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb99;
    }

    bb95: {
        StorageDead(_44);
        goto -> bb98;
    }

    bb96: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_14);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb101;
    }

    bb101: {
        return;
    }

    bb102 (cleanup): {
        drop(_158) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_75) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        resume;
    }
}
