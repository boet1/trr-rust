// MIR for `keeper::handle_set_user_status_to_being_liquidated` before PreCodegen

fn keeper::handle_set_user_status_to_being_liquidated(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::SetUserStatusToBeingLiquidated<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _6: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _15: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _22: std::cell::RefMut<'_, state::user::User>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _24: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _25: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _27: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: instructions::optional_accounts::AccountMaps<'_>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _38: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _39: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _40: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _41: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _42: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _43: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _44: &std::collections::BTreeSet<u16>;
    let _45: &std::collections::BTreeSet<u16>;
    let _46: std::collections::BTreeSet<u16>;
    let mut _47: &std::collections::BTreeSet<u16>;
    let _48: &std::collections::BTreeSet<u16>;
    let _49: std::collections::BTreeSet<u16>;
    let mut _50: u64;
    let mut _51: std::option::Option<state::state::OracleGuardRails>;
    let mut _52: state::state::OracleGuardRails;
    let mut _53: &state::state::State;
    let mut _54: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: ();
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _62: std::result::Result<(), error::ErrorCode>;
    let mut _63: &mut state::user::User;
    let mut _64: &mut state::user::User;
    let mut _65: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _66: &state::perp_market_map::PerpMarketMap<'_>;
    let _67: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _68: &state::spot_market_map::SpotMarketMap<'_>;
    let _69: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _70: &mut state::oracle_map::OracleMap<'_>;
    let mut _71: &mut state::oracle_map::OracleMap<'_>;
    let mut _72: u64;
    let mut _73: &state::state::State;
    let _74: &state::state::State;
    let mut _75: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _76: &&std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: ();
    let mut _83: &mut instructions::keeper::SetUserStatusToBeingLiquidated<'_>;
    let mut _84: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _85: &mut instructions::keeper::SetUserStatusToBeingLiquidated<'_>;
    let mut _86: &mut instructions::keeper::SetUserStatusToBeingLiquidated<'_>;
    let mut _87: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _88: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _89: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _90: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _113: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _114: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug state => _12;
        let _13: anchor_lang::prelude::Clock;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _20: anchor_lang::prelude::Clock;
        scope 6 {
            debug clock => _13;
            let _21: &mut std::cell::RefMut<'_, state::user::User>;
            let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _32: std::cell::RefMut<'_, state::user::User>;
            scope 11 {
                debug user => _21;
                let _33: state::perp_market_map::PerpMarketMap<'_>;
                let _34: state::spot_market_map::SpotMarketMap<'_>;
                let mut _35: state::oracle_map::OracleMap<'_>;
                let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _59: instructions::optional_accounts::AccountMaps<'_>;
                scope 16 {
                    debug perp_market_map => _33;
                    debug spot_market_map => _34;
                    debug oracle_map => _35;
                    let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _81: ();
                    scope 21 {
                        debug residual => _78;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => _81;
                        scope 24 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _56;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _59;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _29;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _32;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _17;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _20;
            scope 10 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _83 = deref_copy (_1.1: &mut instructions::keeper::SetUserStatusToBeingLiquidated<'_>);
        _6 = &((*_83).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _84 = deref_copy (*_6);
        _112 = (((_84.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _5 = &(*_112);
        _4 = constraints::liq_not_paused(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb57];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _91 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        _85 = deref_copy (_1.1: &mut instructions::keeper::SetUserStatusToBeingLiquidated<'_>);
        _12 = &((*_85).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb61];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _105 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb49;
    }

    bb7: {
        _14 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _15) -> [return: bb8, unwind: bb57];
    }

    bb8: {
        StorageDead(_15);
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_14 as Continue).0: anchor_lang::prelude::Clock);
        _13 = move _20;
        StorageDead(_20);
        _93 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _86 = deref_copy (_1.1: &mut instructions::keeper::SetUserStatusToBeingLiquidated<'_>);
        _26 = &((*_86).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _25 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _26) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _19) -> [return: bb11, unwind: bb60];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        _103 = discriminant(_14);
        StorageDead(_14);
        goto -> bb48;
    }

    bb12: {
        StorageDead(_26);
        StorageLive(_27);
        _27 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _24 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _25, move _27) -> [return: bb13, unwind: bb57];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        _23 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _24) -> [return: bb14, unwind: bb57];
    }

    bb14: {
        StorageDead(_24);
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_32);
        _32 = move ((_23 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _22 = move _32;
        StorageDead(_32);
        _21 = &mut _22;
        _97 = discriminant(_23);
        StorageDead(_23);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _87 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _43 = &(*_87);
        _42 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _43) -> [return: bb18, unwind: bb56];
    }

    bb16: {
        StorageLive(_29);
        _29 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb17, unwind: bb59];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        _95 = discriminant(_23);
        StorageDead(_23);
        goto -> bb47;
    }

    bb18: {
        StorageDead(_43);
        _41 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _42) -> [return: bb19, unwind: bb56];
    }

    bb19: {
        StorageDead(_42);
        _40 = &mut _41;
        _39 = &mut (*_40);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = BTreeSet::<u16>::new() -> [return: bb20, unwind: bb56];
    }

    bb20: {
        _45 = &_46;
        _44 = &(*_45);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = BTreeSet::<u16>::new() -> [return: bb21, unwind: bb55];
    }

    bb21: {
        _48 = &_49;
        _47 = &(*_48);
        StorageLive(_50);
        _50 = (_13.0: u64);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _88 = deref_copy (*_12);
        _113 = (((_88.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _54 = &(*_113);
        _53 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _54) -> [return: bb22, unwind: bb54];
    }

    bb22: {
        StorageDead(_54);
        _52 = ((*_53).7: state::state::OracleGuardRails);
        _51 = Option::<state::state::OracleGuardRails>::Some(move _52);
        StorageDead(_52);
        _38 = load_maps(move _39, move _44, move _47, move _50, move _51) -> [return: bb23, unwind: bb54];
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_39);
        _37 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _38) -> [return: bb24, unwind: bb54];
    }

    bb24: {
        StorageDead(_38);
        _55 = discriminant(_37);
        switchInt(move _55) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_59);
        _59 = move ((_37 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _36 = move _59;
        StorageDead(_59);
        StorageLive(_33);
        _33 = move (_36.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_34);
        _34 = move (_36.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_35);
        _35 = move (_36.2: state::oracle_map::OracleMap<'_>);
        _101 = discriminant(_37);
        StorageDead(_53);
        drop(_49) -> [return: bb28, unwind: bb50];
    }

    bb26: {
        StorageLive(_56);
        _56 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb27, unwind: bb58];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_56);
        _99 = discriminant(_37);
        StorageDead(_53);
        drop(_49) -> [return: bb44, unwind: bb55];
    }

    bb28: {
        StorageDead(_49);
        StorageDead(_48);
        drop(_46) -> [return: bb29, unwind: bb51];
    }

    bb29: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &mut (*_21);
        _64 = <RefMut<'_, User> as DerefMut>::deref_mut(move _65) -> [return: bb30, unwind: bb51];
    }

    bb30: {
        _63 = &mut (*_64);
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_33;
        _66 = &(*_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_34;
        _68 = &(*_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &mut _35;
        _70 = &mut (*_71);
        StorageLive(_72);
        _72 = (_13.0: u64);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_12;
        _89 = deref_copy (*_76);
        _90 = deref_copy (*_89);
        _114 = (((_90.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _75 = &(*_114);
        _74 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _75) -> [return: bb31, unwind: bb51];
    }

    bb31: {
        _73 = &(*_74);
        StorageDead(_75);
        _62 = controller::liquidation::set_user_status_to_being_liquidated(move _63, move _66, move _68, move _70, move _72, move _73) -> [return: bb32, unwind: bb51];
    }

    bb32: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_63);
        _61 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _62) -> [return: bb33, unwind: bb51];
    }

    bb33: {
        StorageDead(_62);
        _77 = discriminant(_61);
        switchInt(move _77) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_81);
        _81 = ((_61 as Continue).0: ());
        _60 = _81;
        StorageDead(_81);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_82);
        _82 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _82);
        StorageDead(_82);
        drop(_35) -> [return: bb37, unwind: bb52];
    }

    bb35: {
        StorageLive(_78);
        _78 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb36, unwind: bb51];
    }

    bb36: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        drop(_35) -> [return: bb41, unwind: bb52];
    }

    bb37: {
        StorageDead(_35);
        drop(_34) -> [return: bb38, unwind: bb53];
    }

    bb38: {
        StorageDead(_34);
        drop(_33) -> [return: bb39, unwind: bb56];
    }

    bb39: {
        StorageDead(_33);
        drop(_22) -> [return: bb40, unwind: bb57];
    }

    bb40: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb49;
    }

    bb41: {
        StorageDead(_35);
        drop(_34) -> [return: bb42, unwind: bb53];
    }

    bb42: {
        StorageDead(_34);
        drop(_33) -> [return: bb43, unwind: bb56];
    }

    bb43: {
        StorageDead(_33);
        goto -> bb46;
    }

    bb44: {
        StorageDead(_49);
        StorageDead(_48);
        drop(_46) -> [return: bb45, unwind: bb56];
    }

    bb45: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb46;
    }

    bb46: {
        drop(_22) -> [return: bb47, unwind: bb57];
    }

    bb47: {
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb49;
    }

    bb49: {
        return;
    }

    bb50 (cleanup): {
        drop(_46) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_35) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_34) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_33) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_49) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_46) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_22) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }

    bb58 (cleanup): {
        _108 = discriminant(_37);
        goto -> bb54;
    }

    bb59 (cleanup): {
        _109 = discriminant(_23);
        goto -> bb57;
    }

    bb60 (cleanup): {
        _110 = discriminant(_14);
        goto -> bb57;
    }

    bb61 (cleanup): {
        _111 = discriminant(_3);
        goto -> bb57;
    }
}
