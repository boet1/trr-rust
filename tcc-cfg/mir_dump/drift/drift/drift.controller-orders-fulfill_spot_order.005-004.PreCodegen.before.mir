// MIR for `fulfill_spot_order` before PreCodegen

fn fulfill_spot_order(_1: &mut User, _2: usize, _3: &anchor_lang::prelude::Pubkey, _4: &mut UserStats, _5: &UserMap<'_>, _6: &UserStatsMap<'_>, _7: &[(anchor_lang::prelude::Pubkey, usize, u64)], _8: &mut Option<&mut User>, _9: &anchor_lang::prelude::Pubkey, _10: &mut Option<&mut UserStats>, _11: &SpotMarketMap<'_>, _12: &PerpMarketMap<'_>, _13: &mut OracleMap<'_>, _14: i64, _15: u64, _16: &state::state::FeeStructure, _17: &mut dyn SpotFulfillmentParams, _18: bool) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug user => _1;
    debug user_order_index => _2;
    debug user_key => _3;
    debug user_stats => _4;
    debug makers_and_referrer => _5;
    debug makers_and_referrer_stats => _6;
    debug maker_orders_info => _7;
    debug filler => _8;
    debug filler_key => _9;
    debug filler_stats => _10;
    debug spot_market_map => _11;
    debug perp_market_map => _12;
    debug oracle_map => _13;
    debug now => _14;
    debug slot => _15;
    debug fee_structure => _16;
    debug fulfillment_params => _17;
    debug oracle_stale_for_margin => _18;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let _19: u16;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _29: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _30: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _38: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _39: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _40: &u16;
    let _41: &u16;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: ();
    let mut _48: bool;
    let mut _49: &dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _50: bool;
    let mut _51: &controller::position::PositionDirection;
    let mut _52: &controller::position::PositionDirection;
    let _53: controller::position::PositionDirection;
    let _54: ();
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _56: std::result::Result<(), error::ErrorCode>;
    let mut _57: bool;
    let mut _58: &state::spot_market::SpotMarket;
    let _59: &state::spot_market::SpotMarket;
    let mut _60: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _61: state::paused_operations::SpotOperation;
    let mut _62: ();
    let _64: ();
    let mut _65: &str;
    let _66: &str;
    let mut _67: &std::string::String;
    let _68: &std::string::String;
    let _69: std::string::String;
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[&str; 2];
    let _74: &[&str; 2];
    let _75: [&str; 2];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let mut _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: [core::fmt::rt::Argument<'_>; 1];
    let mut _80: core::fmt::rt::Argument<'_>;
    let mut _81: &error::ErrorCode;
    let _82: &error::ErrorCode;
    let _83: ();
    let mut _84: &str;
    let _85: &str;
    let mut _86: error::ErrorCode;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _92: ();
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _94: std::result::Result<(), error::ErrorCode>;
    let mut _95: bool;
    let mut _96: &state::spot_market::SpotMarket;
    let _97: &state::spot_market::SpotMarket;
    let mut _98: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _99: state::paused_operations::SpotOperation;
    let mut _100: ();
    let _102: ();
    let mut _103: &str;
    let _104: &str;
    let mut _105: &std::string::String;
    let _106: &std::string::String;
    let _107: std::string::String;
    let mut _109: std::fmt::Arguments<'_>;
    let mut _110: &[&str];
    let mut _111: &[&str; 2];
    let _112: &[&str; 2];
    let _113: [&str; 2];
    let mut _114: &[core::fmt::rt::Argument<'_>];
    let mut _115: &[core::fmt::rt::Argument<'_>; 1];
    let _116: &[core::fmt::rt::Argument<'_>; 1];
    let _117: [core::fmt::rt::Argument<'_>; 1];
    let mut _118: core::fmt::rt::Argument<'_>;
    let mut _119: &error::ErrorCode;
    let _120: &error::ErrorCode;
    let _121: ();
    let mut _122: &str;
    let _123: &str;
    let mut _124: error::ErrorCode;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _130: ();
    let mut _131: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _132: std::result::Result<(), error::ErrorCode>;
    let mut _133: bool;
    let mut _134: &state::spot_market::SpotMarket;
    let _135: &state::spot_market::SpotMarket;
    let mut _136: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _137: state::paused_operations::SpotOperation;
    let mut _138: ();
    let _140: ();
    let mut _141: &str;
    let _142: &str;
    let mut _143: &std::string::String;
    let _144: &std::string::String;
    let _145: std::string::String;
    let mut _147: std::fmt::Arguments<'_>;
    let mut _148: &[&str];
    let mut _149: &[&str; 2];
    let _150: &[&str; 2];
    let _151: [&str; 2];
    let mut _152: &[core::fmt::rt::Argument<'_>];
    let mut _153: &[core::fmt::rt::Argument<'_>; 1];
    let _154: &[core::fmt::rt::Argument<'_>; 1];
    let _155: [core::fmt::rt::Argument<'_>; 1];
    let mut _156: core::fmt::rt::Argument<'_>;
    let mut _157: &error::ErrorCode;
    let _158: &error::ErrorCode;
    let _159: ();
    let mut _160: &str;
    let _161: &str;
    let mut _162: error::ErrorCode;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _168: ();
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _170: std::result::Result<(), error::ErrorCode>;
    let mut _171: bool;
    let mut _172: &state::spot_market::SpotMarket;
    let _173: &state::spot_market::SpotMarket;
    let mut _174: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _175: state::paused_operations::SpotOperation;
    let mut _176: ();
    let _178: ();
    let mut _179: &str;
    let _180: &str;
    let mut _181: &std::string::String;
    let _182: &std::string::String;
    let _183: std::string::String;
    let mut _185: std::fmt::Arguments<'_>;
    let mut _186: &[&str];
    let mut _187: &[&str; 2];
    let _188: &[&str; 2];
    let _189: [&str; 2];
    let mut _190: &[core::fmt::rt::Argument<'_>];
    let mut _191: &[core::fmt::rt::Argument<'_>; 1];
    let _192: &[core::fmt::rt::Argument<'_>; 1];
    let _193: [core::fmt::rt::Argument<'_>; 1];
    let mut _194: core::fmt::rt::Argument<'_>;
    let mut _195: &error::ErrorCode;
    let _196: &error::ErrorCode;
    let _197: ();
    let mut _198: &str;
    let _199: &str;
    let mut _200: error::ErrorCode;
    let mut _201: isize;
    let mut _203: !;
    let mut _204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _207: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _208: std::result::Result<i128, error::ErrorCode>;
    let mut _209: &state::user::SpotPosition;
    let _210: &state::user::SpotPosition;
    let mut _211: &state::user::User;
    let mut _212: &state::spot_market::SpotMarket;
    let _213: &state::spot_market::SpotMarket;
    let mut _214: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _215: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _216: isize;
    let mut _218: !;
    let mut _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _223: std::result::Result<i128, error::ErrorCode>;
    let mut _224: &state::user::SpotPosition;
    let _225: &mut state::user::SpotPosition;
    let mut _226: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _227: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _228: &mut state::user::User;
    let mut _229: u16;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _235: &state::spot_market::SpotMarket;
    let _236: &state::spot_market::SpotMarket;
    let mut _237: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _238: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _245: ();
    let mut _246: std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _247: &[(anchor_lang::prelude::Pubkey, usize, u64)];
    let mut _249: ();
    let _250: ();
    let mut _251: std::option::Option<&(anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _252: &mut std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _253: &mut std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _254: isize;
    let mut _255: !;
    let mut _258: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _259: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _260: &state::user_map::UserMap<'_>;
    let mut _261: &anchor_lang::prelude::Pubkey;
    let mut _262: isize;
    let mut _264: !;
    let mut _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _268: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _269: std::result::Result<i128, error::ErrorCode>;
    let mut _270: &state::user::SpotPosition;
    let _271: &state::user::SpotPosition;
    let mut _272: &state::user::User;
    let _273: &state::user::User;
    let mut _274: &std::cell::Ref<'_, state::user::User>;
    let mut _275: &state::spot_market::SpotMarket;
    let _276: &state::spot_market::SpotMarket;
    let mut _277: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _278: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _279: isize;
    let mut _281: !;
    let mut _282: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _285: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _286: std::result::Result<i128, error::ErrorCode>;
    let mut _287: &state::user::SpotPosition;
    let _288: &state::user::SpotPosition;
    let mut _289: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _290: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _291: &state::user::User;
    let _292: &state::user::User;
    let mut _293: &std::cell::Ref<'_, state::user::User>;
    let mut _294: u16;
    let mut _295: isize;
    let mut _297: !;
    let mut _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _300: &state::spot_market::SpotMarket;
    let _301: &state::spot_market::SpotMarket;
    let mut _302: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _303: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _304: isize;
    let mut _306: !;
    let mut _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _309: std::option::Option<(i128, i128)>;
    let mut _310: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, (i128, i128)>;
    let mut _311: anchor_lang::prelude::Pubkey;
    let mut _312: (i128, i128);
    let mut _313: i128;
    let mut _314: i128;
    let mut _316: &state::oracle::OraclePriceData;
    let mut _317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _318: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _319: &mut state::oracle_map::OracleMap<'_>;
    let mut _320: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _321: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _322: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _323: &state::spot_market::SpotMarket;
    let _324: &state::spot_market::SpotMarket;
    let mut _325: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _326: isize;
    let mut _328: !;
    let mut _329: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _332: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<u64>>;
    let mut _333: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _334: &state::user::Order;
    let _335: usize;
    let mut _336: usize;
    let mut _337: bool;
    let mut _338: std::option::Option<i64>;
    let mut _339: i64;
    let mut _340: std::option::Option<u64>;
    let mut _341: u64;
    let mut _342: u64;
    let mut _343: &state::spot_market::SpotMarket;
    let mut _344: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _345: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let mut _346: isize;
    let mut _348: !;
    let mut _349: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _352: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<state::fulfillment::SpotFulfillmentMethod>>;
    let mut _353: std::result::Result<std::vec::Vec<state::fulfillment::SpotFulfillmentMethod>, error::ErrorCode>;
    let mut _354: &state::user::Order;
    let _355: &state::user::Order;
    let _356: usize;
    let mut _357: usize;
    let mut _358: bool;
    let mut _359: &[(anchor_lang::prelude::Pubkey, usize, u64)];
    let mut _360: std::option::Option<u64>;
    let mut _361: bool;
    let mut _362: &dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _363: isize;
    let mut _365: !;
    let mut _366: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _372: &controller::position::PositionDirection;
    let _373: usize;
    let mut _374: usize;
    let mut _375: bool;
    let _376: ();
    let mut _377: std::slice::Iter<'_, state::fulfillment::SpotFulfillmentMethod>;
    let mut _378: std::slice::Iter<'_, state::fulfillment::SpotFulfillmentMethod>;
    let mut _379: &[state::fulfillment::SpotFulfillmentMethod];
    let _380: &[state::fulfillment::SpotFulfillmentMethod];
    let mut _381: &std::vec::Vec<state::fulfillment::SpotFulfillmentMethod>;
    let _383: ();
    let mut _384: std::option::Option<&state::fulfillment::SpotFulfillmentMethod>;
    let mut _385: &mut std::slice::Iter<'_, state::fulfillment::SpotFulfillmentMethod>;
    let mut _386: &mut std::slice::Iter<'_, state::fulfillment::SpotFulfillmentMethod>;
    let mut _387: isize;
    let mut _388: !;
    let _390: ();
    let mut _391: bool;
    let mut _392: &state::user::OrderStatus;
    let _393: usize;
    let mut _394: usize;
    let mut _395: bool;
    let mut _396: &state::user::OrderStatus;
    let _397: state::user::OrderStatus;
    let mut _398: !;
    let mut _401: (u64, u64);
    let mut _402: isize;
    let mut _406: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _407: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _408: &state::user_map::UserMap<'_>;
    let mut _409: &anchor_lang::prelude::Pubkey;
    let mut _410: isize;
    let mut _412: !;
    let mut _413: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _416: bool;
    let mut _417: &anchor_lang::prelude::Pubkey;
    let _418: &state::user::User;
    let mut _419: &std::cell::RefMut<'_, state::user::User>;
    let mut _420: &anchor_lang::prelude::Pubkey;
    let mut _421: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _422: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _423: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _424: &state::user_map::UserStatsMap<'_>;
    let mut _425: &anchor_lang::prelude::Pubkey;
    let _426: &anchor_lang::prelude::Pubkey;
    let _427: &state::user::User;
    let mut _428: &std::cell::RefMut<'_, state::user::User>;
    let mut _429: isize;
    let mut _431: !;
    let mut _432: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _436: (u64, u64);
    let mut _437: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _438: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _439: &mut state::spot_market::SpotMarket;
    let mut _440: &mut state::spot_market::SpotMarket;
    let mut _441: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _442: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _443: &mut state::spot_market::SpotMarket;
    let mut _444: &mut state::spot_market::SpotMarket;
    let mut _445: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _446: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _447: &mut state::user::User;
    let mut _448: &mut state::user::UserStats;
    let mut _449: usize;
    let mut _450: &anchor_lang::prelude::Pubkey;
    let mut _451: &mut state::user::User;
    let mut _452: &mut state::user::User;
    let mut _453: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _454: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _455: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _456: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _457: std::option::Option<&mut state::user::UserStats>;
    let mut _458: &mut std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _459: usize;
    let mut _460: u16;
    let mut _461: &anchor_lang::prelude::Pubkey;
    let mut _462: std::option::Option<&mut state::user::User>;
    let mut _463: &mut std::option::Option<&mut state::user::User>;
    let mut _464: std::option::Option<&mut state::user::UserStats>;
    let mut _465: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _466: &anchor_lang::prelude::Pubkey;
    let mut _467: i64;
    let mut _468: u64;
    let mut _469: &mut state::oracle_map::OracleMap<'_>;
    let mut _470: &state::state::FeeStructure;
    let mut _471: isize;
    let mut _473: !;
    let mut _474: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _476: ();
    let mut _477: bool;
    let mut _478: u64;
    let _479: ();
    let mut _480: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _481: std::result::Result<(), error::ErrorCode>;
    let mut _482: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, i64>;
    let mut _483: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, i64>;
    let mut _484: &anchor_lang::prelude::Pubkey;
    let mut _485: controller::position::PositionDirection;
    let mut _486: u64;
    let mut _487: isize;
    let mut _489: !;
    let mut _490: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _492: u64;
    let mut _493: u64;
    let mut _494: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _495: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _496: &mut state::spot_market::SpotMarket;
    let mut _497: &mut state::spot_market::SpotMarket;
    let mut _498: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _499: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _500: &mut state::spot_market::SpotMarket;
    let mut _501: &mut state::spot_market::SpotMarket;
    let mut _502: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _503: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _504: &mut state::user::User;
    let mut _505: &mut state::user::UserStats;
    let mut _506: usize;
    let mut _507: &anchor_lang::prelude::Pubkey;
    let mut _508: std::option::Option<&mut state::user::User>;
    let mut _509: &mut std::option::Option<&mut state::user::User>;
    let mut _510: std::option::Option<&mut state::user::UserStats>;
    let mut _511: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _512: &anchor_lang::prelude::Pubkey;
    let mut _513: i64;
    let mut _514: u64;
    let mut _515: &mut state::oracle_map::OracleMap<'_>;
    let mut _516: &state::state::FeeStructure;
    let mut _517: &mut dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _518: &mut dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _519: isize;
    let mut _521: !;
    let mut _522: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _524: u64;
    let mut _525: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _526: std::result::Result<u64, error::ErrorCode>;
    let mut _527: u64;
    let mut _528: u64;
    let mut _529: isize;
    let mut _531: !;
    let mut _532: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _534: u64;
    let mut _535: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _536: std::result::Result<u64, error::ErrorCode>;
    let mut _537: u64;
    let mut _538: u64;
    let mut _539: isize;
    let mut _541: !;
    let mut _542: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _544: ();
    let mut _545: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _546: std::result::Result<(), error::ErrorCode>;
    let mut _547: bool;
    let mut _548: bool;
    let mut _549: u64;
    let mut _550: bool;
    let mut _551: u64;
    let mut _552: ();
    let _554: ();
    let mut _555: &str;
    let _556: &str;
    let mut _557: &std::string::String;
    let _558: &std::string::String;
    let _559: std::string::String;
    let mut _561: std::fmt::Arguments<'_>;
    let mut _562: &[&str];
    let mut _563: &[&str; 2];
    let _564: &[&str; 2];
    let _565: [&str; 2];
    let mut _566: &[core::fmt::rt::Argument<'_>];
    let mut _567: &[core::fmt::rt::Argument<'_>; 1];
    let _568: &[core::fmt::rt::Argument<'_>; 1];
    let _569: [core::fmt::rt::Argument<'_>; 1];
    let mut _570: core::fmt::rt::Argument<'_>;
    let mut _571: &error::ErrorCode;
    let _572: &error::ErrorCode;
    let _573: ();
    let mut _574: &str;
    let _575: &str;
    let mut _576: &std::string::String;
    let _577: &std::string::String;
    let _578: std::string::String;
    let mut _580: std::fmt::Arguments<'_>;
    let mut _581: &[&str];
    let mut _582: &[&str; 2];
    let _583: &[&str; 2];
    let _584: [&str; 2];
    let mut _585: &[core::fmt::rt::Argument<'_>];
    let mut _586: &[core::fmt::rt::Argument<'_>; 2];
    let _587: &[core::fmt::rt::Argument<'_>; 2];
    let _588: [core::fmt::rt::Argument<'_>; 2];
    let mut _589: core::fmt::rt::Argument<'_>;
    let mut _590: &u64;
    let _591: &u64;
    let mut _592: core::fmt::rt::Argument<'_>;
    let mut _593: &u64;
    let _594: &u64;
    let mut _595: error::ErrorCode;
    let mut _596: isize;
    let mut _598: !;
    let mut _599: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _602: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _603: std::result::Result<i128, error::ErrorCode>;
    let mut _604: &state::user::SpotPosition;
    let _605: &state::user::SpotPosition;
    let mut _606: &state::user::User;
    let mut _607: &state::spot_market::SpotMarket;
    let _608: &state::spot_market::SpotMarket;
    let mut _609: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _610: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _611: isize;
    let mut _613: !;
    let mut _614: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _617: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _618: std::result::Result<i128, error::ErrorCode>;
    let mut _619: &state::user::SpotPosition;
    let _620: &mut state::user::SpotPosition;
    let mut _621: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _622: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _623: &mut state::user::User;
    let mut _624: u16;
    let mut _625: isize;
    let mut _627: !;
    let mut _628: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _630: &state::spot_market::SpotMarket;
    let _631: &state::spot_market::SpotMarket;
    let mut _632: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _633: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _634: isize;
    let mut _636: !;
    let mut _637: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _640: &state::oracle::OraclePriceData;
    let mut _641: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _642: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _643: &mut state::oracle_map::OracleMap<'_>;
    let mut _644: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _645: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _646: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _647: &state::spot_market::SpotMarket;
    let _648: &state::spot_market::SpotMarket;
    let mut _649: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _650: isize;
    let mut _652: !;
    let mut _653: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _656: &state::oracle::OraclePriceData;
    let mut _657: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _658: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _659: &mut state::oracle_map::OracleMap<'_>;
    let mut _660: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _661: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _662: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _663: &state::spot_market::SpotMarket;
    let _664: &state::spot_market::SpotMarket;
    let mut _665: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _666: isize;
    let mut _668: !;
    let mut _669: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _672: i64;
    let mut _673: i64;
    let mut _674: &state::spot_market::SpotMarket;
    let mut _675: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _677: i64;
    let mut _678: i64;
    let mut _679: &state::spot_market::SpotMarket;
    let mut _680: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _683: (math::margin::MarginRequirementType, bool);
    let mut _684: bool;
    let mut _685: &controller::position::PositionDirection;
    let mut _686: &controller::position::PositionDirection;
    let _687: controller::position::PositionDirection;
    let mut _688: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (math::margin::MarginRequirementType, bool)>;
    let mut _689: std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode>;
    let mut _690: &state::spot_market::SpotMarket;
    let _691: &state::spot_market::SpotMarket;
    let mut _692: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _693: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _694: &state::spot_market::SpotMarket;
    let _695: &state::spot_market::SpotMarket;
    let mut _696: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _697: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _698: &state::oracle::StrictOraclePrice;
    let _699: &state::oracle::StrictOraclePrice;
    let mut _700: &state::oracle::StrictOraclePrice;
    let _701: &state::oracle::StrictOraclePrice;
    let mut _702: i128;
    let mut _703: i128;
    let mut _704: i128;
    let mut _705: i128;
    let mut _706: math::margin::MarginRequirementType;
    let mut _707: isize;
    let mut _709: !;
    let mut _710: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _712: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (math::margin::MarginRequirementType, bool)>;
    let mut _713: std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode>;
    let mut _714: &state::spot_market::SpotMarket;
    let _715: &state::spot_market::SpotMarket;
    let mut _716: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _717: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _718: &state::spot_market::SpotMarket;
    let _719: &state::spot_market::SpotMarket;
    let mut _720: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _721: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _722: &state::oracle::StrictOraclePrice;
    let _723: &state::oracle::StrictOraclePrice;
    let mut _724: &state::oracle::StrictOraclePrice;
    let _725: &state::oracle::StrictOraclePrice;
    let mut _726: i128;
    let mut _727: i128;
    let mut _728: i128;
    let mut _729: i128;
    let mut _730: math::margin::MarginRequirementType;
    let mut _731: isize;
    let mut _733: !;
    let mut _734: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _736: ();
    let mut _737: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _738: ();
    let mut _739: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _741: state::margin_calculation::MarginContext;
    let mut _742: state::margin_calculation::MarginContext;
    let mut _743: math::margin::MarginRequirementType;
    let mut _744: [(u16, i128); 2];
    let mut _745: (u16, i128);
    let mut _746: u16;
    let mut _747: i128;
    let mut _748: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _749: std::result::Result<i128, error::ErrorCode>;
    let mut _750: i128;
    let mut _751: i128;
    let mut _752: isize;
    let mut _754: !;
    let mut _755: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _757: (u16, i128);
    let mut _758: i128;
    let mut _759: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _760: std::result::Result<i128, error::ErrorCode>;
    let mut _761: i128;
    let mut _762: i128;
    let mut _763: isize;
    let mut _765: !;
    let mut _766: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _768: &state::user::User;
    let mut _769: i64;
    let _770: ();
    let mut _771: bool;
    let mut _772: bool;
    let mut _773: state::margin_calculation::MarginContext;
    let mut _774: state::margin_calculation::MarginContext;
    let mut _776: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _777: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _778: &state::user::User;
    let mut _779: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _780: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _781: &mut state::oracle_map::OracleMap<'_>;
    let mut _782: state::margin_calculation::MarginContext;
    let mut _783: isize;
    let mut _785: !;
    let mut _786: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _788: ();
    let mut _789: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _790: std::result::Result<(), error::ErrorCode>;
    let mut _791: &mut state::user::UserStats;
    let mut _792: &mut state::user::User;
    let mut _793: u32;
    let mut _794: u32;
    let mut _795: u32;
    let mut _796: i64;
    let mut _797: isize;
    let mut _799: !;
    let mut _800: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _802: ();
    let mut _803: bool;
    let mut _804: &state::margin_calculation::MarginCalculation;
    let mut _805: !;
    let _806: ();
    let mut _807: &str;
    let _808: &str;
    let mut _809: &std::string::String;
    let _810: &std::string::String;
    let _811: std::string::String;
    let mut _813: std::fmt::Arguments<'_>;
    let mut _814: &[&str];
    let mut _815: &[&str; 3];
    let _816: &[&str; 3];
    let _817: [&str; 3];
    let mut _818: &[core::fmt::rt::Argument<'_>];
    let mut _819: &[core::fmt::rt::Argument<'_>; 2];
    let _820: &[core::fmt::rt::Argument<'_>; 2];
    let _821: [core::fmt::rt::Argument<'_>; 2];
    let mut _822: core::fmt::rt::Argument<'_>;
    let mut _823: &u128;
    let _824: &u128;
    let mut _825: core::fmt::rt::Argument<'_>;
    let mut _826: &i128;
    let _827: &i128;
    let mut _828: error::ErrorCode;
    let _829: ();
    let mut _830: std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64>;
    let mut _831: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, i64>;
    let _833: ();
    let mut _834: std::option::Option<(anchor_lang::prelude::Pubkey, i64)>;
    let mut _835: &mut std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64>;
    let mut _836: &mut std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64>;
    let mut _837: isize;
    let mut _838: !;
    let mut _841: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _842: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _843: &state::user_map::UserMap<'_>;
    let mut _844: &anchor_lang::prelude::Pubkey;
    let _845: &anchor_lang::prelude::Pubkey;
    let mut _846: isize;
    let mut _848: !;
    let mut _849: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _852: bool;
    let mut _853: &anchor_lang::prelude::Pubkey;
    let _854: &state::user::User;
    let mut _855: &std::cell::RefMut<'_, state::user::User>;
    let mut _856: &anchor_lang::prelude::Pubkey;
    let mut _857: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _858: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _859: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _860: &state::user_map::UserStatsMap<'_>;
    let mut _861: &anchor_lang::prelude::Pubkey;
    let _862: &anchor_lang::prelude::Pubkey;
    let _863: &state::user::User;
    let mut _864: &std::cell::RefMut<'_, state::user::User>;
    let mut _865: isize;
    let mut _867: !;
    let mut _868: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _871: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _872: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _873: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _874: isize;
    let mut _876: !;
    let mut _877: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _880: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _881: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _882: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _883: &u16;
    let _884: &u16;
    let mut _885: isize;
    let mut _887: !;
    let mut _888: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _892: &(i128, i128);
    let mut _893: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &(i128, i128)>;
    let mut _894: std::result::Result<&(i128, i128), error::ErrorCode>;
    let mut _895: std::option::Option<&(i128, i128)>;
    let mut _896: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, (i128, i128)>;
    let mut _897: &anchor_lang::prelude::Pubkey;
    let _898: &anchor_lang::prelude::Pubkey;
    let mut _899: isize;
    let mut _901: !;
    let mut _902: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _905: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _906: std::result::Result<i128, error::ErrorCode>;
    let mut _907: &state::user::SpotPosition;
    let _908: &state::user::SpotPosition;
    let mut _909: &state::user::User;
    let _910: &state::user::User;
    let mut _911: &std::cell::RefMut<'_, state::user::User>;
    let mut _912: &state::spot_market::SpotMarket;
    let _913: &state::spot_market::SpotMarket;
    let mut _914: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _915: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _916: isize;
    let mut _918: !;
    let mut _919: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _922: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _923: std::result::Result<i128, error::ErrorCode>;
    let mut _924: &state::user::SpotPosition;
    let _925: &state::user::SpotPosition;
    let mut _926: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _927: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _928: &state::user::User;
    let _929: &state::user::User;
    let mut _930: &std::cell::RefMut<'_, state::user::User>;
    let mut _931: u16;
    let mut _932: isize;
    let mut _934: !;
    let mut _935: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _937: &state::spot_market::SpotMarket;
    let _938: &state::spot_market::SpotMarket;
    let mut _939: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _940: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _941: isize;
    let mut _943: !;
    let mut _944: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _948: (math::margin::MarginRequirementType, bool);
    let mut _949: bool;
    let mut _950: &controller::position::PositionDirection;
    let mut _951: &controller::position::PositionDirection;
    let _952: controller::position::PositionDirection;
    let mut _953: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (math::margin::MarginRequirementType, bool)>;
    let mut _954: std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode>;
    let mut _955: &state::spot_market::SpotMarket;
    let _956: &state::spot_market::SpotMarket;
    let mut _957: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _958: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _959: &state::spot_market::SpotMarket;
    let _960: &state::spot_market::SpotMarket;
    let mut _961: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _962: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _963: &state::oracle::StrictOraclePrice;
    let _964: &state::oracle::StrictOraclePrice;
    let mut _965: &state::oracle::StrictOraclePrice;
    let _966: &state::oracle::StrictOraclePrice;
    let mut _967: i128;
    let mut _968: i128;
    let mut _969: i128;
    let mut _970: i128;
    let mut _971: math::margin::MarginRequirementType;
    let mut _972: isize;
    let mut _974: !;
    let mut _975: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _977: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (math::margin::MarginRequirementType, bool)>;
    let mut _978: std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode>;
    let mut _979: &state::spot_market::SpotMarket;
    let _980: &state::spot_market::SpotMarket;
    let mut _981: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _982: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _983: &state::spot_market::SpotMarket;
    let _984: &state::spot_market::SpotMarket;
    let mut _985: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _986: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _987: &state::oracle::StrictOraclePrice;
    let _988: &state::oracle::StrictOraclePrice;
    let mut _989: &state::oracle::StrictOraclePrice;
    let _990: &state::oracle::StrictOraclePrice;
    let mut _991: i128;
    let mut _992: i128;
    let mut _993: i128;
    let mut _994: i128;
    let mut _995: math::margin::MarginRequirementType;
    let mut _996: isize;
    let mut _998: !;
    let mut _999: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1001: ();
    let mut _1002: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1003: ();
    let mut _1004: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1006: state::margin_calculation::MarginContext;
    let mut _1007: state::margin_calculation::MarginContext;
    let mut _1008: math::margin::MarginRequirementType;
    let mut _1009: [(u16, i128); 2];
    let mut _1010: (u16, i128);
    let mut _1011: u16;
    let mut _1012: i128;
    let mut _1013: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1014: std::result::Result<i128, error::ErrorCode>;
    let mut _1015: i128;
    let mut _1016: i128;
    let mut _1017: isize;
    let mut _1019: !;
    let mut _1020: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1022: (u16, i128);
    let mut _1023: i128;
    let mut _1024: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1025: std::result::Result<i128, error::ErrorCode>;
    let mut _1026: i128;
    let mut _1027: i128;
    let mut _1028: isize;
    let mut _1030: !;
    let mut _1031: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1033: &state::user::User;
    let _1034: &state::user::User;
    let mut _1035: &std::cell::RefMut<'_, state::user::User>;
    let _1036: &std::cell::RefMut<'_, state::user::User>;
    let mut _1037: i64;
    let _1038: ();
    let mut _1039: bool;
    let _1040: ();
    let mut _1041: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1042: std::result::Result<(), error::ErrorCode>;
    let mut _1043: bool;
    let mut _1044: bool;
    let mut _1045: ();
    let _1047: ();
    let mut _1048: &str;
    let _1049: &str;
    let mut _1050: &std::string::String;
    let _1051: &std::string::String;
    let _1052: std::string::String;
    let mut _1054: std::fmt::Arguments<'_>;
    let mut _1055: &[&str];
    let mut _1056: &[&str; 2];
    let _1057: &[&str; 2];
    let _1058: [&str; 2];
    let mut _1059: &[core::fmt::rt::Argument<'_>];
    let mut _1060: &[core::fmt::rt::Argument<'_>; 1];
    let _1061: &[core::fmt::rt::Argument<'_>; 1];
    let _1062: [core::fmt::rt::Argument<'_>; 1];
    let mut _1063: core::fmt::rt::Argument<'_>;
    let mut _1064: &error::ErrorCode;
    let _1065: &error::ErrorCode;
    let _1066: ();
    let mut _1067: &str;
    let _1068: &str;
    let mut _1069: error::ErrorCode;
    let mut _1070: isize;
    let mut _1072: !;
    let mut _1073: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1075: bool;
    let mut _1076: state::margin_calculation::MarginContext;
    let mut _1077: state::margin_calculation::MarginContext;
    let mut _1079: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _1080: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _1081: &state::user::User;
    let _1082: &state::user::User;
    let mut _1083: &std::cell::RefMut<'_, state::user::User>;
    let _1084: &std::cell::RefMut<'_, state::user::User>;
    let mut _1085: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1086: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1087: &mut state::oracle_map::OracleMap<'_>;
    let mut _1088: state::margin_calculation::MarginContext;
    let mut _1089: isize;
    let mut _1091: !;
    let mut _1092: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1094: ();
    let mut _1095: isize;
    let _1097: ();
    let mut _1098: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1099: std::result::Result<(), error::ErrorCode>;
    let mut _1100: &mut state::user::UserStats;
    let mut _1101: &mut state::user::UserStats;
    let mut _1102: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _1103: &mut state::user::User;
    let mut _1104: &mut state::user::User;
    let mut _1105: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1106: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1107: u32;
    let mut _1108: u32;
    let mut _1109: u32;
    let mut _1110: i64;
    let mut _1111: isize;
    let mut _1113: !;
    let mut _1114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1116: bool;
    let mut _1117: &state::margin_calculation::MarginCalculation;
    let mut _1118: !;
    let _1119: ();
    let mut _1120: &str;
    let _1121: &str;
    let mut _1122: &std::string::String;
    let _1123: &std::string::String;
    let _1124: std::string::String;
    let mut _1126: std::fmt::Arguments<'_>;
    let mut _1127: &[&str];
    let mut _1128: &[&str; 4];
    let _1129: &[&str; 4];
    let _1130: [&str; 4];
    let mut _1131: &[core::fmt::rt::Argument<'_>];
    let mut _1132: &[core::fmt::rt::Argument<'_>; 3];
    let _1133: &[core::fmt::rt::Argument<'_>; 3];
    let _1134: [core::fmt::rt::Argument<'_>; 3];
    let mut _1135: core::fmt::rt::Argument<'_>;
    let mut _1136: &anchor_lang::prelude::Pubkey;
    let _1137: &anchor_lang::prelude::Pubkey;
    let mut _1138: core::fmt::rt::Argument<'_>;
    let mut _1139: &u128;
    let _1140: &u128;
    let mut _1141: core::fmt::rt::Argument<'_>;
    let mut _1142: &i128;
    let _1143: &i128;
    let mut _1144: error::ErrorCode;
    let mut _1145: (u64, u64);
    let mut _1146: u64;
    let mut _1147: u64;
    let mut _1161: &(anchor_lang::prelude::Pubkey, usize, u64);
    let mut _1162: bool;
    let mut _1163: bool;
    let mut _1164: bool;
    let mut _1165: bool;
    let mut _1166: bool;
    let mut _1167: bool;
    let mut _1168: isize;
    let mut _1169: isize;
    let mut _1170: isize;
    let mut _1171: isize;
    let mut _1172: isize;
    let mut _1173: isize;
    let mut _1174: isize;
    let mut _1175: isize;
    let mut _1176: isize;
    let mut _1177: isize;
    let mut _1178: isize;
    let mut _1179: isize;
    let mut _1180: isize;
    let mut _1181: isize;
    let mut _1182: isize;
    let mut _1183: isize;
    let mut _1184: isize;
    let mut _1185: isize;
    let mut _1186: isize;
    let mut _1187: isize;
    let mut _1188: isize;
    let mut _1189: isize;
    let mut _1190: isize;
    let mut _1191: isize;
    let mut _1192: isize;
    let mut _1193: isize;
    let mut _1194: isize;
    let mut _1195: isize;
    let mut _1196: isize;
    let mut _1197: isize;
    let mut _1198: isize;
    let mut _1199: isize;
    let mut _1200: isize;
    let mut _1201: isize;
    let mut _1202: isize;
    let mut _1203: isize;
    let mut _1204: isize;
    let mut _1205: isize;
    let mut _1206: isize;
    let mut _1207: isize;
    let mut _1208: isize;
    let mut _1209: isize;
    let mut _1210: isize;
    let mut _1211: isize;
    let mut _1212: isize;
    let mut _1213: isize;
    let mut _1214: isize;
    let mut _1215: isize;
    let mut _1216: isize;
    let mut _1217: isize;
    let mut _1218: isize;
    let mut _1219: isize;
    let mut _1220: isize;
    let mut _1221: isize;
    let mut _1222: isize;
    scope 1 {
        debug base_market_index => _19;
        let _23: controller::position::PositionDirection;
        scope 2 {
            debug order_direction => _23;
            let mut _27: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
            let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _35: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
            scope 3 {
                debug quote_market => _27;
                let mut _36: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _46: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                scope 8 {
                    debug base_market => _36;
                    let _63: error::ErrorCode;
                    let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _91: ();
                    let _101: error::ErrorCode;
                    let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _129: ();
                    let _139: error::ErrorCode;
                    let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _167: ();
                    let _177: error::ErrorCode;
                    let _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _205: ();
                    let _206: i128;
                    let _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _220: i128;
                    let mut _1160: &controller::position::PositionDirection;
                    scope 13 {
                        debug error_code => _63;
                        let _70: std::string::String;
                        let mut _1157: &[&str; 2];
                        scope 14 {
                            debug res => _70;
                        }
                    }
                    scope 15 {
                        debug residual => _88;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _91;
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug error_code => _101;
                        let _108: std::string::String;
                        let mut _1156: &[&str; 2];
                        scope 20 {
                            debug res => _108;
                        }
                    }
                    scope 21 {
                        debug residual => _126;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => _129;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug error_code => _139;
                        let _146: std::string::String;
                        let mut _1159: &[&str; 2];
                        scope 26 {
                            debug res => _146;
                        }
                    }
                    scope 27 {
                        debug residual => _164;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug val => _167;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug error_code => _177;
                        let _184: std::string::String;
                        let mut _1158: &[&str; 2];
                        scope 32 {
                            debug res => _184;
                        }
                    }
                    scope 33 {
                        debug residual => _202;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _205;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug quote_token_amount_before => _206;
                        let _221: i128;
                        let _231: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _234: &mut state::user::SpotPosition;
                        let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _243: i128;
                        scope 42 {
                            debug base_token_amount_before => _221;
                            let mut _244: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, (i128, i128)>;
                            scope 51 {
                                debug maker_token_amounts_before => _244;
                                let mut _248: std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize, u64)>;
                                let _315: i64;
                                let _327: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _330: &state::oracle::OraclePriceData;
                                scope 52 {
                                    debug iter => _248;
                                    let _256: &anchor_lang::prelude::Pubkey;
                                    scope 53 {
                                        debug maker_key => _256;
                                        let _257: std::cell::Ref<'_, state::user::User>;
                                        let _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _266: std::cell::Ref<'_, state::user::User>;
                                        scope 54 {
                                            debug maker => _257;
                                            let _267: i128;
                                            let _280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _283: i128;
                                            scope 59 {
                                                debug maker_quote_token_amount_before => _267;
                                                let _284: i128;
                                                let _296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _299: &state::user::SpotPosition;
                                                let _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _308: i128;
                                                scope 64 {
                                                    debug maker_base_token_amount_before => _284;
                                                }
                                                scope 65 {
                                                    debug residual => _296;
                                                    scope 66 {
                                                    }
                                                }
                                                scope 67 {
                                                    debug val => _299;
                                                    scope 68 {
                                                    }
                                                }
                                                scope 69 {
                                                    debug residual => _305;
                                                    scope 70 {
                                                    }
                                                }
                                                scope 71 {
                                                    debug val => _308;
                                                    scope 72 {
                                                    }
                                                }
                                            }
                                            scope 60 {
                                                debug residual => _280;
                                                scope 61 {
                                                }
                                            }
                                            scope 62 {
                                                debug val => _283;
                                                scope 63 {
                                                }
                                            }
                                        }
                                        scope 55 {
                                            debug residual => _263;
                                            scope 56 {
                                            }
                                        }
                                        scope 57 {
                                            debug val => _266;
                                            scope 58 {
                                            }
                                        }
                                    }
                                }
                                scope 73 {
                                    debug oracle_price => _315;
                                    let _331: std::option::Option<u64>;
                                    let _347: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _350: std::option::Option<u64>;
                                    scope 78 {
                                        debug limit_price => _331;
                                        let _351: std::vec::Vec<state::fulfillment::SpotFulfillmentMethod>;
                                        let _364: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _367: std::vec::Vec<state::fulfillment::SpotFulfillmentMethod>;
                                        scope 83 {
                                            debug fulfillment_methods => _351;
                                            let mut _368: u64;
                                            scope 88 {
                                                debug base_asset_amount => _368;
                                                let mut _369: u64;
                                                scope 89 {
                                                    debug quote_asset_amount => _369;
                                                    let mut _370: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, i64>;
                                                    scope 90 {
                                                        debug maker_fills => _370;
                                                        let _371: controller::position::PositionDirection;
                                                        scope 91 {
                                                            debug maker_direction => _371;
                                                            let mut _382: std::slice::Iter<'_, state::fulfillment::SpotFulfillmentMethod>;
                                                            let _553: error::ErrorCode;
                                                            let _597: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _600: ();
                                                            let _601: i128;
                                                            let _612: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _615: i128;
                                                            scope 92 {
                                                                debug iter => _382;
                                                                let _389: &state::fulfillment::SpotFulfillmentMethod;
                                                                scope 93 {
                                                                    debug fulfillment_method => _389;
                                                                    let _399: u64;
                                                                    let _400: u64;
                                                                    let _403: &anchor_lang::prelude::Pubkey;
                                                                    let _404: &u16;
                                                                    let _520: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _523: (u64, u64);
                                                                    let mut _1155: &state::user::OrderStatus;
                                                                    scope 94 {
                                                                        debug base_filled => _399;
                                                                        debug quote_filled => _400;
                                                                        let _530: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _533: u64;
                                                                        let _540: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _543: u64;
                                                                        scope 119 {
                                                                            debug residual => _530;
                                                                            scope 120 {
                                                                            }
                                                                        }
                                                                        scope 121 {
                                                                            debug val => _533;
                                                                            scope 122 {
                                                                            }
                                                                        }
                                                                        scope 123 {
                                                                            debug residual => _540;
                                                                            scope 124 {
                                                                            }
                                                                        }
                                                                        scope 125 {
                                                                            debug val => _543;
                                                                            scope 126 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 95 {
                                                                        debug maker_key => _403;
                                                                        debug maker_order_index => _404;
                                                                        let mut _405: std::cell::RefMut<'_, state::user::User>;
                                                                        let _411: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _414: std::cell::RefMut<'_, state::user::User>;
                                                                        scope 96 {
                                                                            debug maker => _405;
                                                                            let mut _415: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
                                                                            let _430: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _433: std::cell::RefMut<'_, state::user::UserStats>;
                                                                            scope 101 {
                                                                                debug maker_stats => _415;
                                                                                let _434: u64;
                                                                                let _435: u64;
                                                                                let _472: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _475: (u64, u64);
                                                                                scope 106 {
                                                                                    debug base_filled => _434;
                                                                                    debug quote_filled => _435;
                                                                                    let _488: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _491: ();
                                                                                    scope 111 {
                                                                                        debug residual => _488;
                                                                                        scope 112 {
                                                                                        }
                                                                                    }
                                                                                    scope 113 {
                                                                                        debug val => _491;
                                                                                        scope 114 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 107 {
                                                                                    debug residual => _472;
                                                                                    scope 108 {
                                                                                    }
                                                                                }
                                                                                scope 109 {
                                                                                    debug val => _475;
                                                                                    scope 110 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 102 {
                                                                                debug residual => _430;
                                                                                scope 103 {
                                                                                }
                                                                            }
                                                                            scope 104 {
                                                                                debug val => _433;
                                                                                scope 105 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 97 {
                                                                            debug residual => _411;
                                                                            scope 98 {
                                                                            }
                                                                        }
                                                                        scope 99 {
                                                                            debug val => _414;
                                                                            scope 100 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 115 {
                                                                        debug residual => _520;
                                                                        scope 116 {
                                                                        }
                                                                    }
                                                                    scope 117 {
                                                                        debug val => _523;
                                                                        scope 118 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 127 {
                                                                debug error_code => _553;
                                                                let _560: std::string::String;
                                                                let _579: std::string::String;
                                                                let mut _1153: &[&str; 2];
                                                                let mut _1154: &[&str; 2];
                                                                scope 128 {
                                                                    debug res => _560;
                                                                }
                                                                scope 129 {
                                                                    debug res => _579;
                                                                }
                                                            }
                                                            scope 130 {
                                                                debug residual => _597;
                                                                scope 131 {
                                                                }
                                                            }
                                                            scope 132 {
                                                                debug val => _600;
                                                                scope 133 {
                                                                }
                                                            }
                                                            scope 134 {
                                                                debug quote_token_amount_after => _601;
                                                                let _616: i128;
                                                                let _626: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _629: &mut state::user::SpotPosition;
                                                                let _635: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _638: i128;
                                                                scope 139 {
                                                                    debug base_token_amount_after => _616;
                                                                    let _639: i64;
                                                                    let _651: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _654: &state::oracle::OraclePriceData;
                                                                    scope 148 {
                                                                        debug quote_price => _639;
                                                                        let _655: i64;
                                                                        let _667: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _670: &state::oracle::OraclePriceData;
                                                                        scope 153 {
                                                                            debug base_price => _655;
                                                                            let _671: state::oracle::StrictOraclePrice;
                                                                            scope 158 {
                                                                                debug strict_quote_price => _671;
                                                                                let _676: state::oracle::StrictOraclePrice;
                                                                                scope 159 {
                                                                                    debug strict_base_price => _676;
                                                                                    let _681: math::margin::MarginRequirementType;
                                                                                    let _682: bool;
                                                                                    let _708: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _711: (math::margin::MarginRequirementType, bool);
                                                                                    let _732: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _735: (math::margin::MarginRequirementType, bool);
                                                                                    let mut _1152: &controller::position::PositionDirection;
                                                                                    scope 160 {
                                                                                        debug margin_type => _681;
                                                                                        debug taker_risk_increasing => _682;
                                                                                        let mut _740: state::margin_calculation::MarginContext;
                                                                                        let _753: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _756: i128;
                                                                                        let _764: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _767: i128;
                                                                                        scope 169 {
                                                                                            debug context => _740;
                                                                                            let _775: state::margin_calculation::MarginCalculation;
                                                                                            let _784: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _787: state::margin_calculation::MarginCalculation;
                                                                                            scope 178 {
                                                                                                debug taker_margin_calculation => _775;
                                                                                                let _798: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _801: ();
                                                                                                let _812: std::string::String;
                                                                                                let mut _832: std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64>;
                                                                                                let mut _1151: &[&str; 3];
                                                                                                scope 183 {
                                                                                                    debug residual => _798;
                                                                                                    scope 184 {
                                                                                                    }
                                                                                                }
                                                                                                scope 185 {
                                                                                                    debug val => _801;
                                                                                                    scope 186 {
                                                                                                    }
                                                                                                }
                                                                                                scope 187 {
                                                                                                    debug res => _812;
                                                                                                }
                                                                                                scope 188 {
                                                                                                    debug iter => _832;
                                                                                                    let _839: anchor_lang::prelude::Pubkey;
                                                                                                    scope 189 {
                                                                                                        debug maker_key => _839;
                                                                                                        let mut _840: std::cell::RefMut<'_, state::user::User>;
                                                                                                        let _847: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _850: std::cell::RefMut<'_, state::user::User>;
                                                                                                        scope 190 {
                                                                                                            debug maker => _840;
                                                                                                            let _851: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
                                                                                                            let _866: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _869: std::cell::RefMut<'_, state::user::UserStats>;
                                                                                                            scope 195 {
                                                                                                                debug maker_stats => _851;
                                                                                                                let _870: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                                let _875: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _878: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                                scope 200 {
                                                                                                                    debug quote_market => _870;
                                                                                                                    let _879: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                                    let _886: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _889: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                                    scope 205 {
                                                                                                                        debug base_market => _879;
                                                                                                                        let _890: &i128;
                                                                                                                        let _891: &i128;
                                                                                                                        let _900: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _903: &(i128, i128);
                                                                                                                        scope 210 {
                                                                                                                            debug maker_base_token_amount_before => _890;
                                                                                                                            debug maker_quote_token_amount_before => _891;
                                                                                                                            let _904: i128;
                                                                                                                            let _917: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _920: i128;
                                                                                                                            scope 215 {
                                                                                                                                debug maker_quote_token_amount_after => _904;
                                                                                                                                let _921: i128;
                                                                                                                                let _933: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _936: &state::user::SpotPosition;
                                                                                                                                let _942: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _945: i128;
                                                                                                                                scope 220 {
                                                                                                                                    debug maker_base_token_amount_after => _921;
                                                                                                                                    let _946: math::margin::MarginRequirementType;
                                                                                                                                    let _947: bool;
                                                                                                                                    let _973: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _976: (math::margin::MarginRequirementType, bool);
                                                                                                                                    let _997: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1000: (math::margin::MarginRequirementType, bool);
                                                                                                                                    let mut _1150: &controller::position::PositionDirection;
                                                                                                                                    scope 229 {
                                                                                                                                        debug margin_type => _946;
                                                                                                                                        debug maker_risk_increasing => _947;
                                                                                                                                        let mut _1005: state::margin_calculation::MarginContext;
                                                                                                                                        let _1018: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1021: i128;
                                                                                                                                        let _1029: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1032: i128;
                                                                                                                                        scope 238 {
                                                                                                                                            debug context => _1005;
                                                                                                                                            let _1046: error::ErrorCode;
                                                                                                                                            let _1071: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1074: ();
                                                                                                                                            let _1078: state::margin_calculation::MarginCalculation;
                                                                                                                                            let _1090: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1093: state::margin_calculation::MarginCalculation;
                                                                                                                                            scope 247 {
                                                                                                                                                debug error_code => _1046;
                                                                                                                                                let _1053: std::string::String;
                                                                                                                                                let mut _1149: &[&str; 2];
                                                                                                                                                scope 248 {
                                                                                                                                                    debug res => _1053;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 249 {
                                                                                                                                                debug residual => _1071;
                                                                                                                                                scope 250 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 251 {
                                                                                                                                                debug val => _1074;
                                                                                                                                                scope 252 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 253 {
                                                                                                                                                debug maker_margin_calculation => _1078;
                                                                                                                                                let _1125: std::string::String;
                                                                                                                                                let mut _1148: &[&str; 4];
                                                                                                                                                scope 258 {
                                                                                                                                                    debug maker_stats => _1096;
                                                                                                                                                    let mut _1096: std::cell::RefMut<'_, state::user::UserStats>;
                                                                                                                                                    let _1112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1115: ();
                                                                                                                                                    scope 259 {
                                                                                                                                                        debug residual => _1112;
                                                                                                                                                        scope 260 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 261 {
                                                                                                                                                        debug val => _1115;
                                                                                                                                                        scope 262 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 263 {
                                                                                                                                                    debug res => _1125;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 254 {
                                                                                                                                                debug residual => _1090;
                                                                                                                                                scope 255 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 256 {
                                                                                                                                                debug val => _1093;
                                                                                                                                                scope 257 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 239 {
                                                                                                                                            debug residual => _1018;
                                                                                                                                            scope 240 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 241 {
                                                                                                                                            debug val => _1021;
                                                                                                                                            scope 242 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 243 {
                                                                                                                                            debug residual => _1029;
                                                                                                                                            scope 244 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 245 {
                                                                                                                                            debug val => _1032;
                                                                                                                                            scope 246 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 230 {
                                                                                                                                        debug residual => _973;
                                                                                                                                        scope 231 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 232 {
                                                                                                                                        debug val => _976;
                                                                                                                                        scope 233 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 234 {
                                                                                                                                        debug residual => _997;
                                                                                                                                        scope 235 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 236 {
                                                                                                                                        debug val => _1000;
                                                                                                                                        scope 237 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 221 {
                                                                                                                                    debug residual => _933;
                                                                                                                                    scope 222 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 223 {
                                                                                                                                    debug val => _936;
                                                                                                                                    scope 224 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 225 {
                                                                                                                                    debug residual => _942;
                                                                                                                                    scope 226 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 227 {
                                                                                                                                    debug val => _945;
                                                                                                                                    scope 228 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 216 {
                                                                                                                                debug residual => _917;
                                                                                                                                scope 217 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 218 {
                                                                                                                                debug val => _920;
                                                                                                                                scope 219 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 211 {
                                                                                                                            debug residual => _900;
                                                                                                                            scope 212 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 213 {
                                                                                                                            debug val => _903;
                                                                                                                            scope 214 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 206 {
                                                                                                                        debug residual => _886;
                                                                                                                        scope 207 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 208 {
                                                                                                                        debug val => _889;
                                                                                                                        scope 209 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 201 {
                                                                                                                    debug residual => _875;
                                                                                                                    scope 202 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 203 {
                                                                                                                    debug val => _878;
                                                                                                                    scope 204 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 196 {
                                                                                                                debug residual => _866;
                                                                                                                scope 197 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 198 {
                                                                                                                debug val => _869;
                                                                                                                scope 199 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 191 {
                                                                                                            debug residual => _847;
                                                                                                            scope 192 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 193 {
                                                                                                            debug val => _850;
                                                                                                            scope 194 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 179 {
                                                                                                debug residual => _784;
                                                                                                scope 180 {
                                                                                                }
                                                                                            }
                                                                                            scope 181 {
                                                                                                debug val => _787;
                                                                                                scope 182 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 170 {
                                                                                            debug residual => _753;
                                                                                            scope 171 {
                                                                                            }
                                                                                        }
                                                                                        scope 172 {
                                                                                            debug val => _756;
                                                                                            scope 173 {
                                                                                            }
                                                                                        }
                                                                                        scope 174 {
                                                                                            debug residual => _764;
                                                                                            scope 175 {
                                                                                            }
                                                                                        }
                                                                                        scope 176 {
                                                                                            debug val => _767;
                                                                                            scope 177 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 161 {
                                                                                        debug residual => _708;
                                                                                        scope 162 {
                                                                                        }
                                                                                    }
                                                                                    scope 163 {
                                                                                        debug val => _711;
                                                                                        scope 164 {
                                                                                        }
                                                                                    }
                                                                                    scope 165 {
                                                                                        debug residual => _732;
                                                                                        scope 166 {
                                                                                        }
                                                                                    }
                                                                                    scope 167 {
                                                                                        debug val => _735;
                                                                                        scope 168 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 154 {
                                                                            debug residual => _667;
                                                                            scope 155 {
                                                                            }
                                                                        }
                                                                        scope 156 {
                                                                            debug val => _670;
                                                                            scope 157 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 149 {
                                                                        debug residual => _651;
                                                                        scope 150 {
                                                                        }
                                                                    }
                                                                    scope 151 {
                                                                        debug val => _654;
                                                                        scope 152 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 140 {
                                                                    debug residual => _626;
                                                                    scope 141 {
                                                                    }
                                                                }
                                                                scope 142 {
                                                                    debug val => _629;
                                                                    scope 143 {
                                                                    }
                                                                }
                                                                scope 144 {
                                                                    debug residual => _635;
                                                                    scope 145 {
                                                                    }
                                                                }
                                                                scope 146 {
                                                                    debug val => _638;
                                                                    scope 147 {
                                                                    }
                                                                }
                                                            }
                                                            scope 135 {
                                                                debug residual => _612;
                                                                scope 136 {
                                                                }
                                                            }
                                                            scope 137 {
                                                                debug val => _615;
                                                                scope 138 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 84 {
                                            debug residual => _364;
                                            scope 85 {
                                            }
                                        }
                                        scope 86 {
                                            debug val => _367;
                                            scope 87 {
                                            }
                                        }
                                    }
                                    scope 79 {
                                        debug residual => _347;
                                        scope 80 {
                                        }
                                    }
                                    scope 81 {
                                        debug val => _350;
                                        scope 82 {
                                        }
                                    }
                                }
                                scope 74 {
                                    debug residual => _327;
                                    scope 75 {
                                    }
                                }
                                scope 76 {
                                    debug val => _330;
                                    scope 77 {
                                    }
                                }
                            }
                        }
                        scope 43 {
                            debug residual => _231;
                            scope 44 {
                            }
                        }
                        scope 45 {
                            debug val => _234;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug residual => _240;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug val => _243;
                            scope 50 {
                            }
                        }
                    }
                    scope 38 {
                        debug residual => _217;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug val => _220;
                        scope 41 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _43;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _46;
                    scope 12 {
                    }
                }
            }
            scope 4 {
                debug residual => _32;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _35;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _1167 = const false;
        _1166 = const false;
        _1165 = const false;
        _1164 = const false;
        _1163 = const false;
        _1162 = const false;
        StorageLive(_19);
        StorageLive(_20);
        _20 = _2;
        _21 = Len(((*_1).5: [state::user::Order; 32]));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb1, unwind continue];
    }

    bb1: {
        _19 = (((*_1).5: [state::user::Order; 32])[_20].11: u16);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _2;
        _25 = Len(((*_1).5: [state::user::Order; 32]));
        _26 = Lt(_24, _25);
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> [success: bb2, unwind continue];
    }

    bb2: {
        _23 = (((*_1).5: [state::user::Order; 32])[_24].17: controller::position::PositionDirection);
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_11);
        _29 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _30) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_30);
        _28 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _29) -> [return: bb4, unwind: bb554];
    }

    bb4: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_35);
        _35 = move ((_28 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1167 = const true;
        _27 = move _35;
        StorageDead(_35);
        _1170 = discriminant(_28);
        StorageDead(_28);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_11);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_19;
        _40 = &(*_41);
        _38 = SpotMarketMap::<'_>::get_ref_mut(move _39, move _40) -> [return: bb9, unwind: bb588];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_32);
        _32 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb8, unwind: bb589];
    }

    bb8: {
        StorageDead(_34);
        StorageDead(_32);
        _1168 = discriminant(_28);
        StorageDead(_28);
        goto -> bb535;
    }

    bb9: {
        StorageDead(_40);
        StorageDead(_39);
        _37 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _38) -> [return: bb10, unwind: bb588];
    }

    bb10: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_46);
        _46 = move ((_37 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1166 = const true;
        _36 = move _46;
        StorageDead(_46);
        _1174 = discriminant(_37);
        StorageDead(_41);
        StorageDead(_37);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_17);
        _48 = <dyn SpotFulfillmentParams as SpotFulfillmentParams>::is_external(move _49) -> [return: bb14, unwind: bb585];
    }

    bb12: {
        StorageLive(_43);
        _43 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb13, unwind: bb586];
    }

    bb13: {
        StorageDead(_45);
        StorageDead(_43);
        _1172 = discriminant(_37);
        StorageDead(_41);
        StorageDead(_37);
        goto -> bb534;
    }

    bb14: {
        switchInt(move _48) -> [0: bb84, otherwise: bb15];
    }

    bb15: {
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_23;
        StorageLive(_52);
        _1160 = const _;
        _52 = &(*_1160);
        _50 = <controller::position::PositionDirection as PartialEq>::eq(move _51, move _52) -> [return: bb16, unwind: bb585];
    }

    bb16: {
        switchInt(move _50) -> [0: bb50, otherwise: bb17];
    }

    bb17: {
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &_27;
        _59 = <RefMut<'_, SpotMarket> as Deref>::deref(move _60) -> [return: bb18, unwind: bb585];
    }

    bb18: {
        _58 = &(*_59);
        StorageDead(_60);
        StorageLive(_61);
        _61 = SpotOperation::Withdraw;
        _57 = SpotMarket::is_operation_paused(move _58, move _61) -> [return: bb19, unwind: bb585];
    }

    bb19: {
        switchInt(move _57) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_59);
        StorageLive(_63);
        _63 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _1157 = const _;
        _74 = &(*_1157);
        _73 = &(*_74);
        _72 = move _73 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_73);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_63;
        _81 = &(*_82);
        _80 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _81) -> [return: bb22, unwind: bb585];
    }

    bb21: {
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_59);
        StorageLive(_62);
        _62 = ();
        _56 = std::result::Result::<(), error::ErrorCode>::Ok(move _62);
        StorageDead(_62);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_81);
        _79 = [move _80];
        StorageDead(_80);
        _78 = &_79;
        _77 = &(*_78);
        _76 = move _77 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_77);
        _71 = Arguments::<'_>::new_v1(move _72, move _76) -> [return: bb23, unwind: bb585];
    }

    bb23: {
        StorageDead(_76);
        StorageDead(_72);
        _70 = format(move _71) -> [return: bb24, unwind: bb585];
    }

    bb24: {
        StorageDead(_71);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_74);
        _69 = move _70;
        StorageDead(_70);
        _68 = &_69;
        _67 = &(*_68);
        _66 = <String as Deref>::deref(move _67) -> [return: bb25, unwind: bb553];
    }

    bb25: {
        _65 = &(*_66);
        StorageDead(_67);
        _64 = solana_program::log::sol_log(move _65) -> [return: bb26, unwind: bb553];
    }

    bb26: {
        StorageDead(_65);
        drop(_69) -> [return: bb27, unwind: bb585];
    }

    bb27: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = const "withdraw from quote market paused";
        _84 = &(*_85);
        _83 = solana_program::log::sol_log(move _84) -> [return: bb28, unwind: bb585];
    }

    bb28: {
        StorageDead(_84);
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_86);
        _86 = _63;
        _56 = std::result::Result::<(), error::ErrorCode>::Err(move _86);
        StorageDead(_86);
        StorageDead(_63);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_57);
        _55 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _56) -> [return: bb30, unwind: bb585];
    }

    bb30: {
        StorageDead(_56);
        _87 = discriminant(_55);
        switchInt(move _87) -> [0: bb31, 1: bb32, otherwise: bb6];
    }

    bb31: {
        StorageLive(_91);
        _91 = ((_55 as Continue).0: ());
        _54 = _91;
        StorageDead(_91);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_36;
        _97 = <RefMut<'_, SpotMarket> as Deref>::deref(move _98) -> [return: bb34, unwind: bb585];
    }

    bb32: {
        StorageLive(_88);
        _88 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb33, unwind: bb585];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb533;
    }

    bb34: {
        _96 = &(*_97);
        StorageDead(_98);
        StorageLive(_99);
        _99 = SpotOperation::Deposit;
        _95 = SpotMarket::is_operation_paused(move _96, move _99) -> [return: bb35, unwind: bb585];
    }

    bb35: {
        switchInt(move _95) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_97);
        StorageLive(_101);
        _101 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _1156 = const _;
        _112 = &(*_1156);
        _111 = &(*_112);
        _110 = move _111 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_111);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_101;
        _119 = &(*_120);
        _118 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _119) -> [return: bb38, unwind: bb585];
    }

    bb37: {
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_97);
        StorageLive(_100);
        _100 = ();
        _94 = std::result::Result::<(), error::ErrorCode>::Ok(move _100);
        StorageDead(_100);
        goto -> bb45;
    }

    bb38: {
        StorageDead(_119);
        _117 = [move _118];
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = move _115 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_115);
        _109 = Arguments::<'_>::new_v1(move _110, move _114) -> [return: bb39, unwind: bb585];
    }

    bb39: {
        StorageDead(_114);
        StorageDead(_110);
        _108 = format(move _109) -> [return: bb40, unwind: bb585];
    }

    bb40: {
        StorageDead(_109);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_112);
        _107 = move _108;
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = <String as Deref>::deref(move _105) -> [return: bb41, unwind: bb552];
    }

    bb41: {
        _103 = &(*_104);
        StorageDead(_105);
        _102 = solana_program::log::sol_log(move _103) -> [return: bb42, unwind: bb552];
    }

    bb42: {
        StorageDead(_103);
        drop(_107) -> [return: bb43, unwind: bb585];
    }

    bb43: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = const "deposit to base market paused";
        _122 = &(*_123);
        _121 = solana_program::log::sol_log(move _122) -> [return: bb44, unwind: bb585];
    }

    bb44: {
        StorageDead(_122);
        StorageDead(_123);
        StorageDead(_121);
        StorageLive(_124);
        _124 = _101;
        _94 = std::result::Result::<(), error::ErrorCode>::Err(move _124);
        StorageDead(_124);
        StorageDead(_101);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_95);
        _93 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _94) -> [return: bb46, unwind: bb585];
    }

    bb46: {
        StorageDead(_94);
        _125 = discriminant(_93);
        switchInt(move _125) -> [0: bb47, 1: bb48, otherwise: bb6];
    }

    bb47: {
        StorageLive(_129);
        _129 = ((_93 as Continue).0: ());
        _92 = _129;
        StorageDead(_129);
        StorageDead(_93);
        StorageDead(_92);
        _47 = const ();
        goto -> bb83;
    }

    bb48: {
        StorageLive(_126);
        _126 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb49, unwind: bb585];
    }

    bb49: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb533;
    }

    bb50: {
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_27;
        _135 = <RefMut<'_, SpotMarket> as Deref>::deref(move _136) -> [return: bb51, unwind: bb585];
    }

    bb51: {
        _134 = &(*_135);
        StorageDead(_136);
        StorageLive(_137);
        _137 = SpotOperation::Deposit;
        _133 = SpotMarket::is_operation_paused(move _134, move _137) -> [return: bb52, unwind: bb585];
    }

    bb52: {
        switchInt(move _133) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        StorageDead(_137);
        StorageDead(_134);
        StorageDead(_135);
        StorageLive(_139);
        _139 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _1159 = const _;
        _150 = &(*_1159);
        _149 = &(*_150);
        _148 = move _149 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_149);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_139;
        _157 = &(*_158);
        _156 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _157) -> [return: bb55, unwind: bb585];
    }

    bb54: {
        StorageDead(_137);
        StorageDead(_134);
        StorageDead(_135);
        StorageLive(_138);
        _138 = ();
        _132 = std::result::Result::<(), error::ErrorCode>::Ok(move _138);
        StorageDead(_138);
        goto -> bb62;
    }

    bb55: {
        StorageDead(_157);
        _155 = [move _156];
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = move _153 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_153);
        _147 = Arguments::<'_>::new_v1(move _148, move _152) -> [return: bb56, unwind: bb585];
    }

    bb56: {
        StorageDead(_152);
        StorageDead(_148);
        _146 = format(move _147) -> [return: bb57, unwind: bb585];
    }

    bb57: {
        StorageDead(_147);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_150);
        _145 = move _146;
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = <String as Deref>::deref(move _143) -> [return: bb58, unwind: bb551];
    }

    bb58: {
        _141 = &(*_142);
        StorageDead(_143);
        _140 = solana_program::log::sol_log(move _141) -> [return: bb59, unwind: bb551];
    }

    bb59: {
        StorageDead(_141);
        drop(_145) -> [return: bb60, unwind: bb585];
    }

    bb60: {
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = const "deposit to quote market paused";
        _160 = &(*_161);
        _159 = solana_program::log::sol_log(move _160) -> [return: bb61, unwind: bb585];
    }

    bb61: {
        StorageDead(_160);
        StorageDead(_161);
        StorageDead(_159);
        StorageLive(_162);
        _162 = _139;
        _132 = std::result::Result::<(), error::ErrorCode>::Err(move _162);
        StorageDead(_162);
        StorageDead(_139);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_133);
        _131 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _132) -> [return: bb63, unwind: bb585];
    }

    bb63: {
        StorageDead(_132);
        _163 = discriminant(_131);
        switchInt(move _163) -> [0: bb64, 1: bb65, otherwise: bb6];
    }

    bb64: {
        StorageLive(_167);
        _167 = ((_131 as Continue).0: ());
        _130 = _167;
        StorageDead(_167);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_36;
        _173 = <RefMut<'_, SpotMarket> as Deref>::deref(move _174) -> [return: bb67, unwind: bb585];
    }

    bb65: {
        StorageLive(_164);
        _164 = ((_131 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb66, unwind: bb585];
    }

    bb66: {
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb533;
    }

    bb67: {
        _172 = &(*_173);
        StorageDead(_174);
        StorageLive(_175);
        _175 = SpotOperation::Withdraw;
        _171 = SpotMarket::is_operation_paused(move _172, move _175) -> [return: bb68, unwind: bb585];
    }

    bb68: {
        switchInt(move _171) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_173);
        StorageLive(_177);
        _177 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _1158 = const _;
        _188 = &(*_1158);
        _187 = &(*_188);
        _186 = move _187 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_187);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &_177;
        _195 = &(*_196);
        _194 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _195) -> [return: bb71, unwind: bb585];
    }

    bb70: {
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_173);
        StorageLive(_176);
        _176 = ();
        _170 = std::result::Result::<(), error::ErrorCode>::Ok(move _176);
        StorageDead(_176);
        goto -> bb78;
    }

    bb71: {
        StorageDead(_195);
        _193 = [move _194];
        StorageDead(_194);
        _192 = &_193;
        _191 = &(*_192);
        _190 = move _191 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_191);
        _185 = Arguments::<'_>::new_v1(move _186, move _190) -> [return: bb72, unwind: bb585];
    }

    bb72: {
        StorageDead(_190);
        StorageDead(_186);
        _184 = format(move _185) -> [return: bb73, unwind: bb585];
    }

    bb73: {
        StorageDead(_185);
        StorageDead(_196);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_188);
        _183 = move _184;
        StorageDead(_184);
        _182 = &_183;
        _181 = &(*_182);
        _180 = <String as Deref>::deref(move _181) -> [return: bb74, unwind: bb550];
    }

    bb74: {
        _179 = &(*_180);
        StorageDead(_181);
        _178 = solana_program::log::sol_log(move _179) -> [return: bb75, unwind: bb550];
    }

    bb75: {
        StorageDead(_179);
        drop(_183) -> [return: bb76, unwind: bb585];
    }

    bb76: {
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_178);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = const "withdraw from base market paused";
        _198 = &(*_199);
        _197 = solana_program::log::sol_log(move _198) -> [return: bb77, unwind: bb585];
    }

    bb77: {
        StorageDead(_198);
        StorageDead(_199);
        StorageDead(_197);
        StorageLive(_200);
        _200 = _177;
        _170 = std::result::Result::<(), error::ErrorCode>::Err(move _200);
        StorageDead(_200);
        StorageDead(_177);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_171);
        _169 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _170) -> [return: bb79, unwind: bb585];
    }

    bb79: {
        StorageDead(_170);
        _201 = discriminant(_169);
        switchInt(move _201) -> [0: bb80, 1: bb81, otherwise: bb6];
    }

    bb80: {
        StorageLive(_205);
        _205 = ((_169 as Continue).0: ());
        _168 = _205;
        StorageDead(_205);
        StorageDead(_169);
        StorageDead(_168);
        _47 = const ();
        goto -> bb83;
    }

    bb81: {
        StorageLive(_202);
        _202 = ((_169 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_204);
        _204 = _202;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _204) -> [return: bb82, unwind: bb585];
    }

    bb82: {
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb533;
    }

    bb83: {
        StorageDead(_50);
        goto -> bb85;
    }

    bb84: {
        StorageDead(_49);
        _47 = const ();
        goto -> bb85;
    }

    bb85: {
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &(*_1);
        _210 = User::get_quote_spot_position(move _211) -> [return: bb86, unwind: bb585];
    }

    bb86: {
        _209 = &(*_210);
        StorageDead(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &_27;
        _214 = &(*_215);
        _213 = <RefMut<'_, SpotMarket> as Deref>::deref(move _214) -> [return: bb87, unwind: bb585];
    }

    bb87: {
        _212 = &(*_213);
        StorageDead(_214);
        _208 = SpotPosition::get_signed_token_amount(move _209, move _212) -> [return: bb88, unwind: bb585];
    }

    bb88: {
        StorageDead(_212);
        StorageDead(_209);
        _207 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _208) -> [return: bb89, unwind: bb585];
    }

    bb89: {
        StorageDead(_208);
        _216 = discriminant(_207);
        switchInt(move _216) -> [0: bb90, 1: bb91, otherwise: bb6];
    }

    bb90: {
        StorageLive(_220);
        _220 = ((_207 as Continue).0: i128);
        _206 = _220;
        StorageDead(_220);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_207);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &mut (*_1);
        StorageLive(_229);
        _229 = _19;
        _227 = User::force_get_spot_position_mut(move _228, move _229) -> [return: bb93, unwind: bb585];
    }

    bb91: {
        StorageLive(_217);
        _217 = ((_207 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_219);
        _219 = _217;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _219) -> [return: bb92, unwind: bb585];
    }

    bb92: {
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_207);
        goto -> bb532;
    }

    bb93: {
        StorageDead(_229);
        StorageDead(_228);
        _226 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _227) -> [return: bb94, unwind: bb585];
    }

    bb94: {
        StorageDead(_227);
        _230 = discriminant(_226);
        switchInt(move _230) -> [0: bb95, 1: bb96, otherwise: bb6];
    }

    bb95: {
        StorageLive(_234);
        _234 = move ((_226 as Continue).0: &mut state::user::SpotPosition);
        _225 = move _234;
        StorageDead(_234);
        _224 = &(*_225);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &_36;
        _237 = &(*_238);
        _236 = <RefMut<'_, SpotMarket> as Deref>::deref(move _237) -> [return: bb98, unwind: bb585];
    }

    bb96: {
        StorageLive(_231);
        _231 = ((_226 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_233);
        _233 = _231;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _233) -> [return: bb97, unwind: bb585];
    }

    bb97: {
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_224);
        StorageDead(_223);
        goto -> bb530;
    }

    bb98: {
        _235 = &(*_236);
        StorageDead(_237);
        _223 = SpotPosition::get_signed_token_amount(move _224, move _235) -> [return: bb99, unwind: bb585];
    }

    bb99: {
        StorageDead(_235);
        StorageDead(_224);
        _222 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _223) -> [return: bb100, unwind: bb585];
    }

    bb100: {
        StorageDead(_223);
        _239 = discriminant(_222);
        switchInt(move _239) -> [0: bb101, 1: bb102, otherwise: bb6];
    }

    bb101: {
        StorageLive(_243);
        _243 = ((_222 as Continue).0: i128);
        _221 = _243;
        StorageDead(_243);
        StorageDead(_238);
        StorageDead(_236);
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_222);
        StorageLive(_244);
        _244 = BTreeMap::<anchor_lang::prelude::Pubkey, (i128, i128)>::new() -> [return: bb104, unwind: bb585];
    }

    bb102: {
        StorageLive(_240);
        _240 = ((_222 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb103, unwind: bb585];
    }

    bb103: {
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_236);
        goto -> bb530;
    }

    bb104: {
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = _7;
        _246 = <&[(anchor_lang::prelude::Pubkey, usize, u64)] as IntoIterator>::into_iter(move _247) -> [return: bb105, unwind: bb549];
    }

    bb105: {
        StorageDead(_247);
        StorageLive(_248);
        _248 = move _246;
        goto -> bb106;
    }

    bb106: {
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &mut _248;
        _252 = &mut (*_253);
        _251 = <std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize, u64)> as Iterator>::next(move _252) -> [return: bb107, unwind: bb549];
    }

    bb107: {
        StorageDead(_252);
        _254 = discriminant(_251);
        switchInt(move _254) -> [0: bb109, 1: bb108, otherwise: bb6];
    }

    bb108: {
        StorageLive(_256);
        _1161 = deref_copy ((_251 as Some).0: &(anchor_lang::prelude::Pubkey, usize, u64));
        _256 = &((*_1161).0: anchor_lang::prelude::Pubkey);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &(*_5);
        StorageLive(_261);
        _261 = &(*_256);
        _259 = UserMap::<'_>::get_ref(move _260, move _261) -> [return: bb110, unwind: bb549];
    }

    bb109: {
        _245 = const ();
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &mut (*_13);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = &_36;
        _324 = <RefMut<'_, SpotMarket> as Deref>::deref(move _325) -> [return: bb137, unwind: bb549];
    }

    bb110: {
        StorageDead(_261);
        StorageDead(_260);
        _258 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _259) -> [return: bb111, unwind: bb549];
    }

    bb111: {
        StorageDead(_259);
        _262 = discriminant(_258);
        switchInt(move _262) -> [0: bb112, 1: bb113, otherwise: bb6];
    }

    bb112: {
        StorageLive(_266);
        _266 = move ((_258 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _257 = move _266;
        StorageDead(_266);
        _1178 = discriminant(_258);
        StorageDead(_258);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &_257;
        _273 = <Ref<'_, User> as Deref>::deref(move _274) -> [return: bb115, unwind: bb548];
    }

    bb113: {
        StorageLive(_263);
        _263 = ((_258 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_265);
        _265 = _263;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _265) -> [return: bb114, unwind: bb583];
    }

    bb114: {
        StorageDead(_265);
        StorageDead(_263);
        _1176 = discriminant(_258);
        StorageDead(_258);
        goto -> bb527;
    }

    bb115: {
        _272 = &(*_273);
        StorageDead(_274);
        _271 = User::get_quote_spot_position(move _272) -> [return: bb116, unwind: bb548];
    }

    bb116: {
        _270 = &(*_271);
        StorageDead(_272);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &_27;
        _277 = &(*_278);
        _276 = <RefMut<'_, SpotMarket> as Deref>::deref(move _277) -> [return: bb117, unwind: bb548];
    }

    bb117: {
        _275 = &(*_276);
        StorageDead(_277);
        _269 = SpotPosition::get_signed_token_amount(move _270, move _275) -> [return: bb118, unwind: bb548];
    }

    bb118: {
        StorageDead(_275);
        StorageDead(_270);
        _268 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _269) -> [return: bb119, unwind: bb548];
    }

    bb119: {
        StorageDead(_269);
        _279 = discriminant(_268);
        switchInt(move _279) -> [0: bb120, 1: bb121, otherwise: bb6];
    }

    bb120: {
        StorageLive(_283);
        _283 = ((_268 as Continue).0: i128);
        _267 = _283;
        StorageDead(_283);
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_268);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_257;
        _292 = <Ref<'_, User> as Deref>::deref(move _293) -> [return: bb123, unwind: bb548];
    }

    bb121: {
        StorageLive(_280);
        _280 = ((_268 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_282);
        _282 = _280;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _282) -> [return: bb122, unwind: bb548];
    }

    bb122: {
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_268);
        goto -> bb526;
    }

    bb123: {
        _291 = &(*_292);
        StorageDead(_293);
        StorageLive(_294);
        _294 = _19;
        _290 = User::get_spot_position(move _291, move _294) -> [return: bb124, unwind: bb548];
    }

    bb124: {
        StorageDead(_294);
        StorageDead(_291);
        _289 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _290) -> [return: bb125, unwind: bb548];
    }

    bb125: {
        StorageDead(_290);
        _295 = discriminant(_289);
        switchInt(move _295) -> [0: bb126, 1: bb127, otherwise: bb6];
    }

    bb126: {
        StorageLive(_299);
        _299 = ((_289 as Continue).0: &state::user::SpotPosition);
        _288 = _299;
        StorageDead(_299);
        _287 = &(*_288);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &_36;
        _302 = &(*_303);
        _301 = <RefMut<'_, SpotMarket> as Deref>::deref(move _302) -> [return: bb129, unwind: bb548];
    }

    bb127: {
        StorageLive(_296);
        _296 = ((_289 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_298);
        _298 = _296;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _298) -> [return: bb128, unwind: bb548];
    }

    bb128: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_287);
        StorageDead(_286);
        goto -> bb525;
    }

    bb129: {
        _300 = &(*_301);
        StorageDead(_302);
        _286 = SpotPosition::get_signed_token_amount(move _287, move _300) -> [return: bb130, unwind: bb548];
    }

    bb130: {
        StorageDead(_300);
        StorageDead(_287);
        _285 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _286) -> [return: bb131, unwind: bb548];
    }

    bb131: {
        StorageDead(_286);
        _304 = discriminant(_285);
        switchInt(move _304) -> [0: bb132, 1: bb133, otherwise: bb6];
    }

    bb132: {
        StorageLive(_308);
        _308 = ((_285 as Continue).0: i128);
        _284 = _308;
        StorageDead(_308);
        StorageDead(_303);
        StorageDead(_301);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_285);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &mut _244;
        StorageLive(_311);
        _311 = (*_256);
        StorageLive(_312);
        StorageLive(_313);
        _313 = _284;
        StorageLive(_314);
        _314 = _267;
        _312 = (move _313, move _314);
        StorageDead(_314);
        StorageDead(_313);
        _309 = BTreeMap::<anchor_lang::prelude::Pubkey, (i128, i128)>::insert(move _310, move _311, move _312) -> [return: bb135, unwind: bb548];
    }

    bb133: {
        StorageLive(_305);
        _305 = ((_285 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_307);
        _307 = _305;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _307) -> [return: bb134, unwind: bb548];
    }

    bb134: {
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_301);
        goto -> bb525;
    }

    bb135: {
        StorageDead(_312);
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_309);
        _250 = const ();
        StorageDead(_284);
        StorageDead(_267);
        drop(_257) -> [return: bb136, unwind: bb549];
    }

    bb136: {
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        _249 = const ();
        goto -> bb106;
    }

    bb137: {
        _323 = &(*_324);
        StorageDead(_325);
        _322 = SpotMarket::oracle_id(move _323) -> [return: bb138, unwind: bb549];
    }

    bb138: {
        StorageDead(_323);
        _321 = &_322;
        _320 = &(*_321);
        _318 = OracleMap::<'_>::get_price_data(move _319, move _320) -> [return: bb139, unwind: bb549];
    }

    bb139: {
        StorageDead(_320);
        StorageDead(_319);
        _317 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _318) -> [return: bb140, unwind: bb549];
    }

    bb140: {
        StorageDead(_318);
        _326 = discriminant(_317);
        switchInt(move _326) -> [0: bb141, 1: bb142, otherwise: bb6];
    }

    bb141: {
        StorageLive(_330);
        _330 = ((_317 as Continue).0: &state::oracle::OraclePriceData);
        _316 = _330;
        StorageDead(_330);
        _315 = ((*_316).0: i64);
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = _2;
        _336 = Len(((*_1).5: [state::user::Order; 32]));
        _337 = Lt(_335, _336);
        assert(move _337, "index out of bounds: the length is {} but the index is {}", move _336, _335) -> [success: bb144, unwind: bb549];
    }

    bb142: {
        StorageLive(_327);
        _327 = ((_317 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_329);
        _329 = _327;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _329) -> [return: bb143, unwind: bb549];
    }

    bb143: {
        StorageDead(_329);
        StorageDead(_327);
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_317);
        StorageDead(_316);
        goto -> bb524;
    }

    bb144: {
        _334 = &((*_1).5: [state::user::Order; 32])[_335];
        StorageLive(_338);
        StorageLive(_339);
        _339 = _315;
        _338 = Option::<i64>::Some(move _339);
        StorageDead(_339);
        StorageLive(_340);
        _340 = Option::<u64>::None;
        StorageLive(_341);
        _341 = _15;
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = &_36;
        _343 = <RefMut<'_, SpotMarket> as Deref>::deref(move _344) -> [return: bb145, unwind: bb549];
    }

    bb145: {
        StorageDead(_344);
        _342 = ((*_343).26: u64);
        StorageLive(_345);
        _345 = Option::<ProtectedMakerParams>::None;
        _333 = Order::get_limit_price(move _334, move _338, move _340, move _341, move _342, const false, move _345) -> [return: bb146, unwind: bb549];
    }

    bb146: {
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_341);
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_334);
        _332 = <std::result::Result<Option<u64>, error::ErrorCode> as Try>::branch(move _333) -> [return: bb147, unwind: bb549];
    }

    bb147: {
        StorageDead(_333);
        _346 = discriminant(_332);
        switchInt(move _346) -> [0: bb148, 1: bb149, otherwise: bb6];
    }

    bb148: {
        StorageLive(_350);
        _350 = ((_332 as Continue).0: std::option::Option<u64>);
        _331 = _350;
        StorageDead(_350);
        StorageDead(_343);
        StorageDead(_335);
        StorageDead(_332);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = _2;
        _357 = Len(((*_1).5: [state::user::Order; 32]));
        _358 = Lt(_356, _357);
        assert(move _358, "index out of bounds: the length is {} but the index is {}", move _357, _356) -> [success: bb151, unwind: bb549];
    }

    bb149: {
        StorageLive(_347);
        _347 = ((_332 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_349);
        _349 = _347;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _349) -> [return: bb150, unwind: bb549];
    }

    bb150: {
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_343);
        StorageDead(_335);
        StorageDead(_332);
        goto -> bb523;
    }

    bb151: {
        _355 = &((*_1).5: [state::user::Order; 32])[_356];
        _354 = &(*_355);
        StorageLive(_359);
        _359 = &(*_7);
        StorageLive(_360);
        _360 = _331;
        StorageLive(_361);
        StorageLive(_362);
        _362 = &(*_17);
        _361 = <dyn SpotFulfillmentParams as SpotFulfillmentParams>::is_external(move _362) -> [return: bb152, unwind: bb549];
    }

    bb152: {
        StorageDead(_362);
        _353 = determine_spot_fulfillment_methods(move _354, move _359, move _360, move _361) -> [return: bb153, unwind: bb549];
    }

    bb153: {
        StorageDead(_361);
        StorageDead(_360);
        StorageDead(_359);
        StorageDead(_354);
        _352 = <std::result::Result<Vec<SpotFulfillmentMethod>, error::ErrorCode> as Try>::branch(move _353) -> [return: bb154, unwind: bb549];
    }

    bb154: {
        StorageDead(_353);
        _363 = discriminant(_352);
        switchInt(move _363) -> [0: bb155, 1: bb156, otherwise: bb6];
    }

    bb155: {
        StorageLive(_367);
        _367 = move ((_352 as Continue).0: std::vec::Vec<state::fulfillment::SpotFulfillmentMethod>);
        _351 = move _367;
        StorageDead(_367);
        _1182 = discriminant(_352);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_352);
        StorageLive(_368);
        _368 = const 0_u64;
        StorageLive(_369);
        _369 = const 0_u64;
        StorageLive(_370);
        _370 = BTreeMap::<anchor_lang::prelude::Pubkey, i64>::new() -> [return: bb158, unwind: bb547];
    }

    bb156: {
        StorageLive(_364);
        _364 = ((_352 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_366);
        _366 = _364;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _366) -> [return: bb157, unwind: bb582];
    }

    bb157: {
        StorageDead(_366);
        StorageDead(_364);
        _1180 = discriminant(_352);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_352);
        goto -> bb522;
    }

    bb158: {
        _1165 = const true;
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        _373 = _2;
        _374 = Len(((*_1).5: [state::user::Order; 32]));
        _375 = Lt(_373, _374);
        assert(move _375, "index out of bounds: the length is {} but the index is {}", move _374, _373) -> [success: bb159, unwind: bb581];
    }

    bb159: {
        _372 = &(((*_1).5: [state::user::Order; 32])[_373].17: controller::position::PositionDirection);
        _371 = controller::position::PositionDirection::opposite(move _372) -> [return: bb160, unwind: bb581];
    }

    bb160: {
        StorageDead(_372);
        StorageDead(_373);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &_351;
        _380 = <Vec<SpotFulfillmentMethod> as Deref>::deref(move _381) -> [return: bb161, unwind: bb581];
    }

    bb161: {
        _379 = &(*_380);
        StorageDead(_381);
        _378 = core::slice::<impl [SpotFulfillmentMethod]>::iter(move _379) -> [return: bb162, unwind: bb581];
    }

    bb162: {
        StorageDead(_379);
        _377 = <std::slice::Iter<'_, SpotFulfillmentMethod> as IntoIterator>::into_iter(move _378) -> [return: bb163, unwind: bb581];
    }

    bb163: {
        StorageDead(_378);
        StorageLive(_382);
        _382 = move _377;
        goto -> bb164;
    }

    bb164: {
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        _386 = &mut _382;
        _385 = &mut (*_386);
        _384 = <std::slice::Iter<'_, SpotFulfillmentMethod> as Iterator>::next(move _385) -> [return: bb165, unwind: bb581];
    }

    bb165: {
        StorageDead(_385);
        _387 = discriminant(_384);
        switchInt(move _387) -> [0: bb167, 1: bb166, otherwise: bb6];
    }

    bb166: {
        StorageLive(_389);
        _389 = ((_384 as Some).0: &state::fulfillment::SpotFulfillmentMethod);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = _2;
        _394 = Len(((*_1).5: [state::user::Order; 32]));
        _395 = Lt(_393, _394);
        assert(move _395, "index out of bounds: the length is {} but the index is {}", move _394, _393) -> [success: bb168, unwind: bb581];
    }

    bb167: {
        _376 = const ();
        goto -> bb231;
    }

    bb168: {
        _392 = &(((*_1).5: [state::user::Order; 32])[_393].12: state::user::OrderStatus);
        StorageLive(_396);
        _1155 = const _;
        _396 = &(*_1155);
        _391 = <OrderStatus as PartialEq>::ne(move _392, move _396) -> [return: bb169, unwind: bb581];
    }

    bb169: {
        switchInt(move _391) -> [0: bb171, otherwise: bb170];
    }

    bb170: {
        StorageDead(_396);
        StorageDead(_393);
        StorageDead(_392);
        _376 = const ();
        StorageDead(_391);
        StorageDead(_390);
        StorageDead(_389);
        goto -> bb231;
    }

    bb171: {
        StorageDead(_396);
        StorageDead(_393);
        StorageDead(_392);
        _390 = const ();
        StorageDead(_391);
        StorageDead(_390);
        StorageLive(_401);
        _402 = discriminant((*_389));
        switchInt(move _402) -> [0: bb172, 1: bb173, otherwise: bb6];
    }

    bb172: {
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = &mut _36;
        _498 = &mut (*_499);
        _497 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _498) -> [return: bb211, unwind: bb581];
    }

    bb173: {
        StorageLive(_403);
        _403 = &(((*_389) as Match).0: anchor_lang::prelude::Pubkey);
        StorageLive(_404);
        _404 = &(((*_389) as Match).1: u16);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &(*_5);
        StorageLive(_409);
        _409 = &(*_403);
        _407 = UserMap::<'_>::get_ref_mut(move _408, move _409) -> [return: bb174, unwind: bb581];
    }

    bb174: {
        StorageDead(_409);
        StorageDead(_408);
        _406 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _407) -> [return: bb175, unwind: bb581];
    }

    bb175: {
        StorageDead(_407);
        _410 = discriminant(_406);
        switchInt(move _410) -> [0: bb176, 1: bb177, otherwise: bb6];
    }

    bb176: {
        StorageLive(_414);
        _414 = move ((_406 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _405 = move _414;
        StorageDead(_414);
        _1186 = discriminant(_406);
        StorageDead(_406);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = &_405;
        _418 = <RefMut<'_, User> as Deref>::deref(move _419) -> [return: bb179, unwind: bb546];
    }

    bb177: {
        StorageLive(_411);
        _411 = ((_406 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_413);
        _413 = _411;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _413) -> [return: bb178, unwind: bb579];
    }

    bb178: {
        StorageDead(_413);
        StorageDead(_411);
        _1184 = discriminant(_406);
        StorageDead(_406);
        goto -> bb517;
    }

    bb179: {
        StorageDead(_419);
        _417 = &((*_418).0: anchor_lang::prelude::Pubkey);
        StorageLive(_420);
        _420 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _416 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _417, move _420) -> [return: bb180, unwind: bb546];
    }

    bb180: {
        switchInt(move _416) -> [0: bb182, otherwise: bb181];
    }

    bb181: {
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_417);
        _415 = Option::<RefMut<'_, UserStats>>::None;
        goto -> bb189;
    }

    bb182: {
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_417);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _424 = &(*_6);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        _428 = &_405;
        _427 = <RefMut<'_, User> as Deref>::deref(move _428) -> [return: bb183, unwind: bb546];
    }

    bb183: {
        StorageDead(_428);
        _426 = &((*_427).0: anchor_lang::prelude::Pubkey);
        _425 = &(*_426);
        _423 = UserStatsMap::<'_>::get_ref_mut(move _424, move _425) -> [return: bb184, unwind: bb546];
    }

    bb184: {
        StorageDead(_425);
        StorageDead(_424);
        _422 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _423) -> [return: bb185, unwind: bb546];
    }

    bb185: {
        StorageDead(_423);
        _429 = discriminant(_422);
        switchInt(move _429) -> [0: bb186, 1: bb187, otherwise: bb6];
    }

    bb186: {
        StorageLive(_433);
        _433 = move ((_422 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _421 = move _433;
        StorageDead(_433);
        _415 = Option::<RefMut<'_, UserStats>>::Some(move _421);
        StorageDead(_421);
        _1190 = discriminant(_422);
        StorageDead(_427);
        StorageDead(_426);
        StorageDead(_422);
        goto -> bb189;
    }

    bb187: {
        StorageLive(_430);
        _430 = ((_422 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_432);
        _432 = _430;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _432) -> [return: bb188, unwind: bb578];
    }

    bb188: {
        StorageDead(_432);
        StorageDead(_430);
        StorageDead(_421);
        _1188 = discriminant(_422);
        StorageDead(_427);
        StorageDead(_426);
        StorageDead(_422);
        StorageDead(_416);
        goto -> bb516;
    }

    bb189: {
        StorageDead(_416);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _442 = &mut _36;
        _441 = &mut (*_442);
        _440 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _441) -> [return: bb190, unwind: bb545];
    }

    bb190: {
        _439 = &mut (*_440);
        StorageDead(_441);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = &mut _27;
        _445 = &mut (*_446);
        _444 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _445) -> [return: bb191, unwind: bb545];
    }

    bb191: {
        _443 = &mut (*_444);
        StorageDead(_445);
        StorageLive(_447);
        _447 = &mut (*_1);
        StorageLive(_448);
        _448 = &mut (*_4);
        StorageLive(_449);
        _449 = _2;
        StorageLive(_450);
        _450 = &(*_3);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = &mut _405;
        _453 = &mut (*_454);
        _452 = <RefMut<'_, User> as DerefMut>::deref_mut(move _453) -> [return: bb192, unwind: bb545];
    }

    bb192: {
        _451 = &mut (*_452);
        StorageDead(_453);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = &mut _415;
        _457 = Option::<RefMut<'_, UserStats>>::as_deref_mut(move _458) -> [return: bb193, unwind: bb545];
    }

    bb193: {
        StorageDead(_458);
        _456 = &mut _457;
        _455 = &mut (*_456);
        StorageLive(_459);
        StorageLive(_460);
        _460 = (*_404);
        _459 = move _460 as usize (IntToInt);
        StorageDead(_460);
        StorageLive(_461);
        _461 = &(*_403);
        StorageLive(_462);
        StorageLive(_463);
        _463 = &mut (*_8);
        _462 = Option::<&mut User>::as_deref_mut(move _463) -> [return: bb194, unwind: bb545];
    }

    bb194: {
        StorageDead(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &mut (*_10);
        _464 = Option::<&mut UserStats>::as_deref_mut(move _465) -> [return: bb195, unwind: bb545];
    }

    bb195: {
        StorageDead(_465);
        StorageLive(_466);
        _466 = &(*_9);
        StorageLive(_467);
        _467 = _14;
        StorageLive(_468);
        _468 = _15;
        StorageLive(_469);
        _469 = &mut (*_13);
        StorageLive(_470);
        _470 = &(*_16);
        _438 = fulfill_spot_order_with_match(move _439, move _443, move _447, move _448, move _449, move _450, move _451, move _455, move _459, move _461, move _462, move _464, move _466, move _467, move _468, move _469, move _470) -> [return: bb196, unwind: bb545];
    }

    bb196: {
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_468);
        StorageDead(_467);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_462);
        StorageDead(_461);
        StorageDead(_459);
        StorageDead(_455);
        StorageDead(_451);
        StorageDead(_450);
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_443);
        StorageDead(_439);
        _437 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _438) -> [return: bb197, unwind: bb545];
    }

    bb197: {
        StorageDead(_438);
        _471 = discriminant(_437);
        switchInt(move _471) -> [0: bb198, 1: bb199, otherwise: bb6];
    }

    bb198: {
        StorageLive(_475);
        _475 = ((_437 as Continue).0: (u64, u64));
        _436 = _475;
        StorageDead(_475);
        StorageLive(_434);
        _434 = (_436.0: u64);
        StorageLive(_435);
        _435 = (_436.1: u64);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_452);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_440);
        StorageDead(_437);
        StorageDead(_436);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        _478 = _434;
        _477 = Ne(move _478, const 0_u64);
        switchInt(move _477) -> [0: bb202, otherwise: bb201];
    }

    bb199: {
        StorageLive(_472);
        _472 = ((_437 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_474);
        _474 = _472;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _474) -> [return: bb200, unwind: bb545];
    }

    bb200: {
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_452);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_440);
        StorageDead(_437);
        StorageDead(_436);
        goto -> bb515;
    }

    bb201: {
        StorageDead(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        _483 = &mut _370;
        _482 = &mut (*_483);
        StorageLive(_484);
        _484 = &(*_403);
        StorageLive(_485);
        _485 = _371;
        StorageLive(_486);
        _486 = _434;
        _481 = update_maker_fills_map(move _482, move _484, move _485, move _486) -> [return: bb203, unwind: bb545];
    }

    bb202: {
        StorageDead(_478);
        _476 = const ();
        goto -> bb208;
    }

    bb203: {
        StorageDead(_486);
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_482);
        _480 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _481) -> [return: bb204, unwind: bb545];
    }

    bb204: {
        StorageDead(_481);
        _487 = discriminant(_480);
        switchInt(move _487) -> [0: bb205, 1: bb206, otherwise: bb6];
    }

    bb205: {
        StorageLive(_491);
        _491 = ((_480 as Continue).0: ());
        _479 = _491;
        StorageDead(_491);
        StorageDead(_483);
        StorageDead(_480);
        StorageDead(_479);
        _476 = const ();
        goto -> bb208;
    }

    bb206: {
        StorageLive(_488);
        _488 = ((_480 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_490);
        _490 = _488;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _490) -> [return: bb207, unwind: bb545];
    }

    bb207: {
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_483);
        StorageDead(_480);
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_435);
        StorageDead(_434);
        goto -> bb515;
    }

    bb208: {
        StorageDead(_477);
        StorageDead(_476);
        StorageLive(_492);
        _492 = _434;
        StorageLive(_493);
        _493 = _435;
        _401 = (move _492, move _493);
        StorageDead(_493);
        StorageDead(_492);
        StorageDead(_435);
        StorageDead(_434);
        drop(_415) -> [return: bb209, unwind: bb546];
    }

    bb209: {
        StorageDead(_415);
        drop(_405) -> [return: bb210, unwind: bb581];
    }

    bb210: {
        StorageDead(_405);
        StorageDead(_404);
        StorageDead(_403);
        goto -> bb220;
    }

    bb211: {
        _496 = &mut (*_497);
        StorageDead(_498);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = &mut _27;
        _502 = &mut (*_503);
        _501 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _502) -> [return: bb212, unwind: bb581];
    }

    bb212: {
        _500 = &mut (*_501);
        StorageDead(_502);
        StorageLive(_504);
        _504 = &mut (*_1);
        StorageLive(_505);
        _505 = &mut (*_4);
        StorageLive(_506);
        _506 = _2;
        StorageLive(_507);
        _507 = &(*_3);
        StorageLive(_508);
        StorageLive(_509);
        _509 = &mut (*_8);
        _508 = Option::<&mut User>::as_deref_mut(move _509) -> [return: bb213, unwind: bb581];
    }

    bb213: {
        StorageDead(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &mut (*_10);
        _510 = Option::<&mut UserStats>::as_deref_mut(move _511) -> [return: bb214, unwind: bb581];
    }

    bb214: {
        StorageDead(_511);
        StorageLive(_512);
        _512 = &(*_9);
        StorageLive(_513);
        _513 = _14;
        StorageLive(_514);
        _514 = _15;
        StorageLive(_515);
        _515 = &mut (*_13);
        StorageLive(_516);
        _516 = &(*_16);
        StorageLive(_517);
        StorageLive(_518);
        _518 = &mut (*_17);
        _517 = move _518 as &mut dyn state::spot_fulfillment_params::SpotFulfillmentParams (PointerCoercion(Unsize));
        StorageDead(_518);
        _495 = fulfill_spot_order_with_external_market(move _496, move _500, move _504, move _505, move _506, move _507, move _508, move _510, move _512, move _513, move _514, move _515, move _516, move _517) -> [return: bb215, unwind: bb581];
    }

    bb215: {
        StorageDead(_517);
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_514);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_506);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_500);
        StorageDead(_496);
        _494 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _495) -> [return: bb216, unwind: bb581];
    }

    bb216: {
        StorageDead(_495);
        _519 = discriminant(_494);
        switchInt(move _519) -> [0: bb217, 1: bb218, otherwise: bb6];
    }

    bb217: {
        StorageLive(_523);
        _523 = ((_494 as Continue).0: (u64, u64));
        _401 = _523;
        StorageDead(_523);
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_499);
        StorageDead(_497);
        StorageDead(_494);
        goto -> bb220;
    }

    bb218: {
        StorageLive(_520);
        _520 = ((_494 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_522);
        _522 = _520;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _522) -> [return: bb219, unwind: bb581];
    }

    bb219: {
        StorageDead(_522);
        StorageDead(_520);
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_499);
        StorageDead(_497);
        StorageDead(_494);
        goto -> bb518;
    }

    bb220: {
        StorageLive(_399);
        _399 = (_401.0: u64);
        StorageLive(_400);
        _400 = (_401.1: u64);
        StorageDead(_401);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = _368;
        StorageLive(_528);
        _528 = _399;
        _526 = <u64 as SafeMath>::safe_add(move _527, move _528) -> [return: bb221, unwind: bb581];
    }

    bb221: {
        StorageDead(_528);
        StorageDead(_527);
        _525 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _526) -> [return: bb222, unwind: bb581];
    }

    bb222: {
        StorageDead(_526);
        _529 = discriminant(_525);
        switchInt(move _529) -> [0: bb223, 1: bb224, otherwise: bb6];
    }

    bb223: {
        StorageLive(_533);
        _533 = ((_525 as Continue).0: u64);
        _524 = _533;
        StorageDead(_533);
        _368 = move _524;
        StorageDead(_524);
        StorageDead(_525);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _537 = _369;
        StorageLive(_538);
        _538 = _400;
        _536 = <u64 as SafeMath>::safe_add(move _537, move _538) -> [return: bb226, unwind: bb581];
    }

    bb224: {
        StorageLive(_530);
        _530 = ((_525 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_532);
        _532 = _530;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _532) -> [return: bb225, unwind: bb581];
    }

    bb225: {
        StorageDead(_532);
        StorageDead(_530);
        StorageDead(_524);
        StorageDead(_525);
        goto -> bb514;
    }

    bb226: {
        StorageDead(_538);
        StorageDead(_537);
        _535 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _536) -> [return: bb227, unwind: bb581];
    }

    bb227: {
        StorageDead(_536);
        _539 = discriminant(_535);
        switchInt(move _539) -> [0: bb228, 1: bb229, otherwise: bb6];
    }

    bb228: {
        StorageLive(_543);
        _543 = ((_535 as Continue).0: u64);
        _534 = _543;
        StorageDead(_543);
        _369 = move _534;
        StorageDead(_534);
        StorageDead(_535);
        _383 = const ();
        StorageDead(_400);
        StorageDead(_399);
        StorageDead(_389);
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_383);
        _249 = const ();
        goto -> bb164;
    }

    bb229: {
        StorageLive(_540);
        _540 = ((_535 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_542);
        _542 = _540;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _542) -> [return: bb230, unwind: bb581];
    }

    bb230: {
        StorageDead(_542);
        StorageDead(_540);
        StorageDead(_534);
        StorageDead(_535);
        goto -> bb514;
    }

    bb231: {
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_377);
        StorageDead(_376);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        _549 = _368;
        _548 = Gt(move _549, const 0_u64);
        StorageDead(_549);
        StorageLive(_550);
        StorageLive(_551);
        _551 = _369;
        _550 = Gt(move _551, const 0_u64);
        StorageDead(_551);
        _547 = Eq(move _548, move _550);
        switchInt(move _547) -> [0: bb233, otherwise: bb232];
    }

    bb232: {
        StorageDead(_550);
        StorageDead(_548);
        StorageLive(_552);
        _552 = ();
        _546 = std::result::Result::<(), error::ErrorCode>::Ok(move _552);
        StorageDead(_552);
        goto -> bb247;
    }

    bb233: {
        StorageDead(_550);
        StorageDead(_548);
        StorageLive(_553);
        _553 = error::ErrorCode::DefaultError;
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _1154 = const _;
        _564 = &(*_1154);
        _563 = &(*_564);
        _562 = move _563 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_563);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _572 = &_553;
        _571 = &(*_572);
        _570 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _571) -> [return: bb234, unwind: bb581];
    }

    bb234: {
        StorageDead(_571);
        _569 = [move _570];
        StorageDead(_570);
        _568 = &_569;
        _567 = &(*_568);
        _566 = move _567 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_567);
        _561 = Arguments::<'_>::new_v1(move _562, move _566) -> [return: bb235, unwind: bb581];
    }

    bb235: {
        StorageDead(_566);
        StorageDead(_562);
        _560 = format(move _561) -> [return: bb236, unwind: bb581];
    }

    bb236: {
        StorageDead(_561);
        StorageDead(_572);
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_564);
        _559 = move _560;
        StorageDead(_560);
        _558 = &_559;
        _557 = &(*_558);
        _556 = <String as Deref>::deref(move _557) -> [return: bb237, unwind: bb544];
    }

    bb237: {
        _555 = &(*_556);
        StorageDead(_557);
        _554 = solana_program::log::sol_log(move _555) -> [return: bb238, unwind: bb544];
    }

    bb238: {
        StorageDead(_555);
        drop(_559) -> [return: bb239, unwind: bb581];
    }

    bb239: {
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_554);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        _1153 = const _;
        _583 = &(*_1153);
        _582 = &(*_583);
        _581 = move _582 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_582);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        _591 = &_368;
        _590 = &(*_591);
        _589 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _590) -> [return: bb240, unwind: bb581];
    }

    bb240: {
        StorageDead(_590);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        _594 = &_369;
        _593 = &(*_594);
        _592 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _593) -> [return: bb241, unwind: bb581];
    }

    bb241: {
        StorageDead(_593);
        _588 = [move _589, move _592];
        StorageDead(_592);
        StorageDead(_589);
        _587 = &_588;
        _586 = &(*_587);
        _585 = move _586 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_586);
        _580 = Arguments::<'_>::new_v1(move _581, move _585) -> [return: bb242, unwind: bb581];
    }

    bb242: {
        StorageDead(_585);
        StorageDead(_581);
        _579 = format(move _580) -> [return: bb243, unwind: bb581];
    }

    bb243: {
        StorageDead(_580);
        StorageDead(_594);
        StorageDead(_591);
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_583);
        _578 = move _579;
        StorageDead(_579);
        _577 = &_578;
        _576 = &(*_577);
        _575 = <String as Deref>::deref(move _576) -> [return: bb244, unwind: bb543];
    }

    bb244: {
        _574 = &(*_575);
        StorageDead(_576);
        _573 = solana_program::log::sol_log(move _574) -> [return: bb245, unwind: bb543];
    }

    bb245: {
        StorageDead(_574);
        drop(_578) -> [return: bb246, unwind: bb581];
    }

    bb246: {
        StorageDead(_578);
        StorageDead(_577);
        StorageDead(_575);
        StorageDead(_573);
        StorageLive(_595);
        _595 = _553;
        _546 = std::result::Result::<(), error::ErrorCode>::Err(move _595);
        StorageDead(_595);
        StorageDead(_553);
        goto -> bb247;
    }

    bb247: {
        StorageDead(_547);
        _545 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _546) -> [return: bb248, unwind: bb581];
    }

    bb248: {
        StorageDead(_546);
        _596 = discriminant(_545);
        switchInt(move _596) -> [0: bb249, 1: bb250, otherwise: bb6];
    }

    bb249: {
        StorageLive(_600);
        _600 = ((_545 as Continue).0: ());
        _544 = _600;
        StorageDead(_600);
        StorageDead(_545);
        StorageDead(_544);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        _606 = &(*_1);
        _605 = User::get_quote_spot_position(move _606) -> [return: bb252, unwind: bb581];
    }

    bb250: {
        StorageLive(_597);
        _597 = ((_545 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_599);
        _599 = _597;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _599) -> [return: bb251, unwind: bb581];
    }

    bb251: {
        StorageDead(_599);
        StorageDead(_597);
        StorageDead(_545);
        StorageDead(_544);
        goto -> bb520;
    }

    bb252: {
        _604 = &(*_605);
        StorageDead(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        _610 = &_27;
        _609 = &(*_610);
        _608 = <RefMut<'_, SpotMarket> as Deref>::deref(move _609) -> [return: bb253, unwind: bb581];
    }

    bb253: {
        _607 = &(*_608);
        StorageDead(_609);
        _603 = SpotPosition::get_signed_token_amount(move _604, move _607) -> [return: bb254, unwind: bb581];
    }

    bb254: {
        StorageDead(_607);
        StorageDead(_604);
        _602 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _603) -> [return: bb255, unwind: bb581];
    }

    bb255: {
        StorageDead(_603);
        _611 = discriminant(_602);
        switchInt(move _611) -> [0: bb256, 1: bb257, otherwise: bb6];
    }

    bb256: {
        StorageLive(_615);
        _615 = ((_602 as Continue).0: i128);
        _601 = _615;
        StorageDead(_615);
        StorageDead(_610);
        StorageDead(_608);
        StorageDead(_605);
        StorageDead(_602);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = &mut (*_1);
        StorageLive(_624);
        _624 = _19;
        _622 = User::force_get_spot_position_mut(move _623, move _624) -> [return: bb259, unwind: bb581];
    }

    bb257: {
        StorageLive(_612);
        _612 = ((_602 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_614);
        _614 = _612;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _614) -> [return: bb258, unwind: bb581];
    }

    bb258: {
        StorageDead(_614);
        StorageDead(_612);
        StorageDead(_610);
        StorageDead(_608);
        StorageDead(_605);
        StorageDead(_602);
        goto -> bb513;
    }

    bb259: {
        StorageDead(_624);
        StorageDead(_623);
        _621 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _622) -> [return: bb260, unwind: bb581];
    }

    bb260: {
        StorageDead(_622);
        _625 = discriminant(_621);
        switchInt(move _625) -> [0: bb261, 1: bb262, otherwise: bb6];
    }

    bb261: {
        StorageLive(_629);
        _629 = move ((_621 as Continue).0: &mut state::user::SpotPosition);
        _620 = move _629;
        StorageDead(_629);
        _619 = &(*_620);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        _633 = &_36;
        _632 = &(*_633);
        _631 = <RefMut<'_, SpotMarket> as Deref>::deref(move _632) -> [return: bb264, unwind: bb581];
    }

    bb262: {
        StorageLive(_626);
        _626 = ((_621 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_628);
        _628 = _626;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _628) -> [return: bb263, unwind: bb581];
    }

    bb263: {
        StorageDead(_628);
        StorageDead(_626);
        StorageDead(_619);
        StorageDead(_618);
        goto -> bb511;
    }

    bb264: {
        _630 = &(*_631);
        StorageDead(_632);
        _618 = SpotPosition::get_signed_token_amount(move _619, move _630) -> [return: bb265, unwind: bb581];
    }

    bb265: {
        StorageDead(_630);
        StorageDead(_619);
        _617 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _618) -> [return: bb266, unwind: bb581];
    }

    bb266: {
        StorageDead(_618);
        _634 = discriminant(_617);
        switchInt(move _634) -> [0: bb267, 1: bb268, otherwise: bb6];
    }

    bb267: {
        StorageLive(_638);
        _638 = ((_617 as Continue).0: i128);
        _616 = _638;
        StorageDead(_638);
        StorageDead(_633);
        StorageDead(_631);
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_617);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        _643 = &mut (*_13);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        _649 = &_27;
        _648 = <RefMut<'_, SpotMarket> as Deref>::deref(move _649) -> [return: bb270, unwind: bb581];
    }

    bb268: {
        StorageLive(_635);
        _635 = ((_617 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_637);
        _637 = _635;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _637) -> [return: bb269, unwind: bb581];
    }

    bb269: {
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_633);
        StorageDead(_631);
        goto -> bb511;
    }

    bb270: {
        _647 = &(*_648);
        StorageDead(_649);
        _646 = SpotMarket::oracle_id(move _647) -> [return: bb271, unwind: bb581];
    }

    bb271: {
        StorageDead(_647);
        _645 = &_646;
        _644 = &(*_645);
        _642 = OracleMap::<'_>::get_price_data(move _643, move _644) -> [return: bb272, unwind: bb581];
    }

    bb272: {
        StorageDead(_644);
        StorageDead(_643);
        _641 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _642) -> [return: bb273, unwind: bb581];
    }

    bb273: {
        StorageDead(_642);
        _650 = discriminant(_641);
        switchInt(move _650) -> [0: bb274, 1: bb275, otherwise: bb6];
    }

    bb274: {
        StorageLive(_654);
        _654 = ((_641 as Continue).0: &state::oracle::OraclePriceData);
        _640 = _654;
        StorageDead(_654);
        _639 = ((*_640).0: i64);
        StorageDead(_648);
        StorageDead(_646);
        StorageDead(_645);
        StorageDead(_641);
        StorageDead(_640);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        _659 = &mut (*_13);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        _665 = &_36;
        _664 = <RefMut<'_, SpotMarket> as Deref>::deref(move _665) -> [return: bb277, unwind: bb581];
    }

    bb275: {
        StorageLive(_651);
        _651 = ((_641 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_653);
        _653 = _651;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _653) -> [return: bb276, unwind: bb581];
    }

    bb276: {
        StorageDead(_653);
        StorageDead(_651);
        StorageDead(_648);
        StorageDead(_646);
        StorageDead(_645);
        StorageDead(_641);
        StorageDead(_640);
        goto -> bb510;
    }

    bb277: {
        _663 = &(*_664);
        StorageDead(_665);
        _662 = SpotMarket::oracle_id(move _663) -> [return: bb278, unwind: bb581];
    }

    bb278: {
        StorageDead(_663);
        _661 = &_662;
        _660 = &(*_661);
        _658 = OracleMap::<'_>::get_price_data(move _659, move _660) -> [return: bb279, unwind: bb581];
    }

    bb279: {
        StorageDead(_660);
        StorageDead(_659);
        _657 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _658) -> [return: bb280, unwind: bb581];
    }

    bb280: {
        StorageDead(_658);
        _666 = discriminant(_657);
        switchInt(move _666) -> [0: bb281, 1: bb282, otherwise: bb6];
    }

    bb281: {
        StorageLive(_670);
        _670 = ((_657 as Continue).0: &state::oracle::OraclePriceData);
        _656 = _670;
        StorageDead(_670);
        _655 = ((*_656).0: i64);
        StorageDead(_664);
        StorageDead(_662);
        StorageDead(_661);
        StorageDead(_657);
        StorageDead(_656);
        StorageLive(_671);
        StorageLive(_672);
        _672 = _639;
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        _675 = &_27;
        _674 = <RefMut<'_, SpotMarket> as Deref>::deref(move _675) -> [return: bb284, unwind: bb581];
    }

    bb282: {
        StorageLive(_667);
        _667 = ((_657 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_669);
        _669 = _667;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _669) -> [return: bb283, unwind: bb581];
    }

    bb283: {
        StorageDead(_669);
        StorageDead(_667);
        StorageDead(_664);
        StorageDead(_662);
        StorageDead(_661);
        StorageDead(_657);
        StorageDead(_656);
        goto -> bb509;
    }

    bb284: {
        StorageDead(_675);
        _673 = (((*_674).5: state::oracle::HistoricalOracleData).4: i64);
        _671 = StrictOraclePrice::new(move _672, move _673, const true) -> [return: bb285, unwind: bb581];
    }

    bb285: {
        StorageDead(_673);
        StorageDead(_672);
        StorageDead(_674);
        StorageLive(_676);
        StorageLive(_677);
        _677 = _655;
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        _680 = &_36;
        _679 = <RefMut<'_, SpotMarket> as Deref>::deref(move _680) -> [return: bb286, unwind: bb581];
    }

    bb286: {
        StorageDead(_680);
        _678 = (((*_679).5: state::oracle::HistoricalOracleData).4: i64);
        _676 = StrictOraclePrice::new(move _677, move _678, const true) -> [return: bb287, unwind: bb581];
    }

    bb287: {
        StorageDead(_678);
        StorageDead(_677);
        StorageDead(_679);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        _685 = &_23;
        StorageLive(_686);
        _1152 = const _;
        _686 = &(*_1152);
        _684 = <controller::position::PositionDirection as PartialEq>::eq(move _685, move _686) -> [return: bb288, unwind: bb581];
    }

    bb288: {
        switchInt(move _684) -> [0: bb297, otherwise: bb289];
    }

    bb289: {
        StorageDead(_686);
        StorageDead(_685);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        _693 = &_27;
        _692 = &(*_693);
        _691 = <RefMut<'_, SpotMarket> as Deref>::deref(move _692) -> [return: bb290, unwind: bb581];
    }

    bb290: {
        _690 = &(*_691);
        StorageDead(_692);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        _697 = &_36;
        _696 = &(*_697);
        _695 = <RefMut<'_, SpotMarket> as Deref>::deref(move _696) -> [return: bb291, unwind: bb581];
    }

    bb291: {
        _694 = &(*_695);
        StorageDead(_696);
        StorageLive(_698);
        StorageLive(_699);
        _699 = &_671;
        _698 = &(*_699);
        StorageLive(_700);
        StorageLive(_701);
        _701 = &_676;
        _700 = &(*_701);
        StorageLive(_702);
        _702 = _206;
        StorageLive(_703);
        _703 = _221;
        StorageLive(_704);
        _704 = _601;
        StorageLive(_705);
        _705 = _616;
        StorageLive(_706);
        _706 = math::margin::MarginRequirementType::Fill;
        _689 = select_margin_type_for_swap(move _690, move _694, move _698, move _700, move _702, move _703, move _704, move _705, move _706) -> [return: bb292, unwind: bb581];
    }

    bb292: {
        StorageDead(_706);
        StorageDead(_705);
        StorageDead(_704);
        StorageDead(_703);
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_698);
        StorageDead(_694);
        StorageDead(_690);
        _688 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as Try>::branch(move _689) -> [return: bb293, unwind: bb581];
    }

    bb293: {
        StorageDead(_689);
        _707 = discriminant(_688);
        switchInt(move _707) -> [0: bb294, 1: bb295, otherwise: bb6];
    }

    bb294: {
        StorageLive(_711);
        _711 = ((_688 as Continue).0: (math::margin::MarginRequirementType, bool));
        _683 = _711;
        StorageDead(_711);
        StorageDead(_701);
        StorageDead(_699);
        StorageDead(_697);
        StorageDead(_695);
        StorageDead(_693);
        StorageDead(_691);
        StorageDead(_688);
        goto -> bb305;
    }

    bb295: {
        StorageLive(_708);
        _708 = ((_688 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_710);
        _710 = _708;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _710) -> [return: bb296, unwind: bb581];
    }

    bb296: {
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_701);
        StorageDead(_699);
        StorageDead(_697);
        StorageDead(_695);
        StorageDead(_693);
        StorageDead(_691);
        StorageDead(_688);
        goto -> bb507;
    }

    bb297: {
        StorageDead(_686);
        StorageDead(_685);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        _717 = &_36;
        _716 = &(*_717);
        _715 = <RefMut<'_, SpotMarket> as Deref>::deref(move _716) -> [return: bb298, unwind: bb581];
    }

    bb298: {
        _714 = &(*_715);
        StorageDead(_716);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        _721 = &_27;
        _720 = &(*_721);
        _719 = <RefMut<'_, SpotMarket> as Deref>::deref(move _720) -> [return: bb299, unwind: bb581];
    }

    bb299: {
        _718 = &(*_719);
        StorageDead(_720);
        StorageLive(_722);
        StorageLive(_723);
        _723 = &_676;
        _722 = &(*_723);
        StorageLive(_724);
        StorageLive(_725);
        _725 = &_671;
        _724 = &(*_725);
        StorageLive(_726);
        _726 = _221;
        StorageLive(_727);
        _727 = _206;
        StorageLive(_728);
        _728 = _616;
        StorageLive(_729);
        _729 = _601;
        StorageLive(_730);
        _730 = math::margin::MarginRequirementType::Fill;
        _713 = select_margin_type_for_swap(move _714, move _718, move _722, move _724, move _726, move _727, move _728, move _729, move _730) -> [return: bb300, unwind: bb581];
    }

    bb300: {
        StorageDead(_730);
        StorageDead(_729);
        StorageDead(_728);
        StorageDead(_727);
        StorageDead(_726);
        StorageDead(_724);
        StorageDead(_722);
        StorageDead(_718);
        StorageDead(_714);
        _712 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as Try>::branch(move _713) -> [return: bb301, unwind: bb581];
    }

    bb301: {
        StorageDead(_713);
        _731 = discriminant(_712);
        switchInt(move _731) -> [0: bb302, 1: bb303, otherwise: bb6];
    }

    bb302: {
        StorageLive(_735);
        _735 = ((_712 as Continue).0: (math::margin::MarginRequirementType, bool));
        _683 = _735;
        StorageDead(_735);
        StorageDead(_725);
        StorageDead(_723);
        StorageDead(_721);
        StorageDead(_719);
        StorageDead(_717);
        StorageDead(_715);
        StorageDead(_712);
        goto -> bb305;
    }

    bb303: {
        StorageLive(_732);
        _732 = ((_712 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_734);
        _734 = _732;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _734) -> [return: bb304, unwind: bb581];
    }

    bb304: {
        StorageDead(_734);
        StorageDead(_732);
        StorageDead(_725);
        StorageDead(_723);
        StorageDead(_721);
        StorageDead(_719);
        StorageDead(_717);
        StorageDead(_715);
        StorageDead(_712);
        goto -> bb507;
    }

    bb305: {
        StorageDead(_684);
        StorageLive(_681);
        _681 = (_683.0: math::margin::MarginRequirementType);
        StorageLive(_682);
        _682 = (_683.1: bool);
        StorageDead(_683);
        StorageLive(_736);
        StorageLive(_737);
        _1166 = const false;
        _737 = move _36;
        _736 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _737) -> [return: bb306, unwind: bb581];
    }

    bb306: {
        StorageDead(_737);
        StorageDead(_736);
        StorageLive(_738);
        StorageLive(_739);
        _1167 = const false;
        _739 = move _27;
        _738 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _739) -> [return: bb307, unwind: bb581];
    }

    bb307: {
        StorageDead(_739);
        StorageDead(_738);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        _743 = _681;
        _742 = MarginContext::standard(move _743) -> [return: bb308, unwind: bb581];
    }

    bb308: {
        StorageDead(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        _746 = _19;
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        _750 = _221;
        StorageLive(_751);
        _751 = _616;
        _749 = <i128 as SafeMath>::safe_sub(move _750, move _751) -> [return: bb309, unwind: bb581];
    }

    bb309: {
        StorageDead(_751);
        StorageDead(_750);
        _748 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _749) -> [return: bb310, unwind: bb581];
    }

    bb310: {
        StorageDead(_749);
        _752 = discriminant(_748);
        switchInt(move _752) -> [0: bb311, 1: bb312, otherwise: bb6];
    }

    bb311: {
        StorageLive(_756);
        _756 = ((_748 as Continue).0: i128);
        _747 = _756;
        StorageDead(_756);
        _745 = (move _746, move _747);
        StorageDead(_747);
        StorageDead(_746);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        _761 = _206;
        StorageLive(_762);
        _762 = _601;
        _760 = <i128 as SafeMath>::safe_sub(move _761, move _762) -> [return: bb314, unwind: bb581];
    }

    bb312: {
        StorageLive(_753);
        _753 = ((_748 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_755);
        _755 = _753;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _755) -> [return: bb313, unwind: bb581];
    }

    bb313: {
        StorageDead(_755);
        StorageDead(_753);
        StorageDead(_747);
        StorageDead(_746);
        StorageDead(_745);
        StorageDead(_744);
        StorageDead(_742);
        StorageDead(_741);
        goto -> bb505;
    }

    bb314: {
        StorageDead(_762);
        StorageDead(_761);
        _759 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _760) -> [return: bb315, unwind: bb581];
    }

    bb315: {
        StorageDead(_760);
        _763 = discriminant(_759);
        switchInt(move _763) -> [0: bb316, 1: bb317, otherwise: bb6];
    }

    bb316: {
        StorageLive(_767);
        _767 = ((_759 as Continue).0: i128);
        _758 = _767;
        StorageDead(_767);
        _757 = (const _, move _758);
        StorageDead(_758);
        _744 = [move _745, move _757];
        StorageDead(_757);
        StorageDead(_745);
        _741 = MarginContext::fuel_spot_deltas(move _742, move _744) -> [return: bb319, unwind: bb581];
    }

    bb317: {
        StorageLive(_764);
        _764 = ((_759 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_766);
        _766 = _764;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _766) -> [return: bb318, unwind: bb581];
    }

    bb318: {
        StorageDead(_766);
        StorageDead(_764);
        StorageDead(_758);
        StorageDead(_757);
        StorageDead(_745);
        StorageDead(_744);
        StorageDead(_742);
        StorageDead(_741);
        StorageDead(_759);
        goto -> bb505;
    }

    bb319: {
        StorageDead(_744);
        StorageDead(_742);
        StorageLive(_768);
        _768 = &(*_1);
        StorageLive(_769);
        _769 = _14;
        _740 = MarginContext::fuel_numerator(move _741, move _768, move _769) -> [return: bb320, unwind: bb581];
    }

    bb320: {
        StorageDead(_769);
        StorageDead(_768);
        StorageDead(_741);
        StorageDead(_759);
        StorageDead(_748);
        StorageLive(_770);
        StorageLive(_771);
        _771 = _18;
        switchInt(move _771) -> [0: bb324, otherwise: bb321];
    }

    bb321: {
        StorageLive(_772);
        _772 = _682;
        switchInt(move _772) -> [0: bb324, otherwise: bb322];
    }

    bb322: {
        StorageLive(_773);
        StorageLive(_774);
        _774 = _740;
        _773 = MarginContext::margin_ratio_override(move _774, const _) -> [return: bb323, unwind: bb581];
    }

    bb323: {
        StorageDead(_774);
        _740 = move _773;
        StorageDead(_773);
        _770 = const ();
        goto -> bb325;
    }

    bb324: {
        _770 = const ();
        goto -> bb325;
    }

    bb325: {
        StorageDead(_772);
        StorageDead(_771);
        StorageDead(_770);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        _778 = &(*_1);
        StorageLive(_779);
        _779 = &(*_12);
        StorageLive(_780);
        _780 = &(*_11);
        StorageLive(_781);
        _781 = &mut (*_13);
        StorageLive(_782);
        _782 = _740;
        _777 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _778, move _779, move _780, move _781, move _782) -> [return: bb326, unwind: bb581];
    }

    bb326: {
        StorageDead(_782);
        StorageDead(_781);
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_778);
        _776 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _777) -> [return: bb327, unwind: bb581];
    }

    bb327: {
        StorageDead(_777);
        _783 = discriminant(_776);
        switchInt(move _783) -> [0: bb328, 1: bb329, otherwise: bb6];
    }

    bb328: {
        StorageLive(_787);
        _787 = ((_776 as Continue).0: state::margin_calculation::MarginCalculation);
        _775 = _787;
        StorageDead(_787);
        StorageDead(_776);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        _791 = &mut (*_4);
        StorageLive(_792);
        _792 = &mut (*_1);
        StorageLive(_793);
        _793 = (_775.17: u32);
        StorageLive(_794);
        _794 = (_775.18: u32);
        StorageLive(_795);
        _795 = (_775.19: u32);
        StorageLive(_796);
        _796 = _14;
        _790 = UserStats::update_fuel_bonus(move _791, move _792, move _793, move _794, move _795, move _796) -> [return: bb331, unwind: bb581];
    }

    bb329: {
        StorageLive(_784);
        _784 = ((_776 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_786);
        _786 = _784;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _786) -> [return: bb330, unwind: bb581];
    }

    bb330: {
        StorageDead(_786);
        StorageDead(_784);
        StorageDead(_776);
        goto -> bb504;
    }

    bb331: {
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_794);
        StorageDead(_793);
        StorageDead(_792);
        StorageDead(_791);
        _789 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _790) -> [return: bb332, unwind: bb581];
    }

    bb332: {
        StorageDead(_790);
        _797 = discriminant(_789);
        switchInt(move _797) -> [0: bb333, 1: bb334, otherwise: bb6];
    }

    bb333: {
        StorageLive(_801);
        _801 = ((_789 as Continue).0: ());
        _788 = _801;
        StorageDead(_801);
        StorageDead(_789);
        StorageDead(_788);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        _804 = &_775;
        _803 = MarginCalculation::meets_margin_requirement(move _804) -> [return: bb336, unwind: bb581];
    }

    bb334: {
        StorageLive(_798);
        _798 = ((_789 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_800);
        _800 = _798;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _800) -> [return: bb335, unwind: bb581];
    }

    bb335: {
        StorageDead(_800);
        StorageDead(_798);
        StorageDead(_789);
        StorageDead(_788);
        goto -> bb504;
    }

    bb336: {
        switchInt(move _803) -> [0: bb338, otherwise: bb337];
    }

    bb337: {
        StorageDead(_804);
        _802 = const ();
        StorageDead(_803);
        StorageDead(_802);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        _1165 = const false;
        _831 = move _370;
        _830 = <BTreeMap<anchor_lang::prelude::Pubkey, i64> as IntoIterator>::into_iter(move _831) -> [return: bb346, unwind: bb581];
    }

    bb338: {
        StorageDead(_804);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        _1151 = const _;
        _816 = &(*_1151);
        _815 = &(*_816);
        _814 = move _815 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_815);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        StorageLive(_824);
        _824 = &(_775.3: u128);
        _823 = &(*_824);
        _822 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _823) -> [return: bb339, unwind: bb581];
    }

    bb339: {
        StorageDead(_823);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        _827 = &(_775.1: i128);
        _826 = &(*_827);
        _825 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _826) -> [return: bb340, unwind: bb581];
    }

    bb340: {
        StorageDead(_826);
        _821 = [move _822, move _825];
        StorageDead(_825);
        StorageDead(_822);
        _820 = &_821;
        _819 = &(*_820);
        _818 = move _819 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_819);
        _813 = Arguments::<'_>::new_v1(move _814, move _818) -> [return: bb341, unwind: bb581];
    }

    bb341: {
        StorageDead(_818);
        StorageDead(_814);
        _812 = format(move _813) -> [return: bb342, unwind: bb581];
    }

    bb342: {
        StorageDead(_813);
        StorageDead(_827);
        StorageDead(_824);
        StorageDead(_821);
        StorageDead(_820);
        StorageDead(_816);
        _811 = move _812;
        StorageDead(_812);
        _810 = &_811;
        _809 = &(*_810);
        _808 = <String as Deref>::deref(move _809) -> [return: bb343, unwind: bb542];
    }

    bb343: {
        _807 = &(*_808);
        StorageDead(_809);
        _806 = solana_program::log::sol_log(move _807) -> [return: bb344, unwind: bb542];
    }

    bb344: {
        StorageDead(_807);
        drop(_811) -> [return: bb345, unwind: bb581];
    }

    bb345: {
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_808);
        StorageDead(_806);
        StorageLive(_828);
        _828 = error::ErrorCode::InsufficientCollateral;
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Err(move _828);
        StorageDead(_828);
        StorageDead(_803);
        StorageDead(_802);
        goto -> bb504;
    }

    bb346: {
        StorageDead(_831);
        StorageLive(_832);
        _832 = move _830;
        goto -> bb347;
    }

    bb347: {
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        _836 = &mut _832;
        _835 = &mut (*_836);
        _834 = <std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64> as Iterator>::next(move _835) -> [return: bb348, unwind: bb541];
    }

    bb348: {
        StorageDead(_835);
        _837 = discriminant(_834);
        switchInt(move _837) -> [0: bb350, 1: bb349, otherwise: bb6];
    }

    bb349: {
        StorageLive(_839);
        _839 = (((_834 as Some).0: (anchor_lang::prelude::Pubkey, i64)).0: anchor_lang::prelude::Pubkey);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        _843 = &(*_5);
        StorageLive(_844);
        StorageLive(_845);
        _845 = &_839;
        _844 = &(*_845);
        _842 = UserMap::<'_>::get_ref_mut(move _843, move _844) -> [return: bb351, unwind: bb541];
    }

    bb350: {
        _829 = const ();
        StorageDead(_836);
        StorageDead(_834);
        StorageDead(_833);
        drop(_832) -> [return: bb488, unwind: bb581];
    }

    bb351: {
        StorageDead(_844);
        StorageDead(_843);
        _841 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _842) -> [return: bb352, unwind: bb541];
    }

    bb352: {
        StorageDead(_842);
        _846 = discriminant(_841);
        switchInt(move _846) -> [0: bb353, 1: bb354, otherwise: bb6];
    }

    bb353: {
        StorageLive(_850);
        _850 = move ((_841 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _840 = move _850;
        StorageDead(_850);
        _1194 = discriminant(_841);
        StorageDead(_845);
        StorageDead(_841);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        _855 = &_840;
        _854 = <RefMut<'_, User> as Deref>::deref(move _855) -> [return: bb356, unwind: bb540];
    }

    bb354: {
        StorageLive(_847);
        _847 = ((_841 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_849);
        _849 = _847;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _849) -> [return: bb355, unwind: bb577];
    }

    bb355: {
        StorageDead(_849);
        StorageDead(_847);
        _1192 = discriminant(_841);
        StorageDead(_845);
        StorageDead(_841);
        goto -> bb502;
    }

    bb356: {
        StorageDead(_855);
        _853 = &((*_854).0: anchor_lang::prelude::Pubkey);
        StorageLive(_856);
        _856 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _852 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _853, move _856) -> [return: bb357, unwind: bb540];
    }

    bb357: {
        switchInt(move _852) -> [0: bb359, otherwise: bb358];
    }

    bb358: {
        StorageDead(_856);
        StorageDead(_854);
        StorageDead(_853);
        _1162 = const true;
        _851 = Option::<RefMut<'_, UserStats>>::None;
        goto -> bb366;
    }

    bb359: {
        StorageDead(_856);
        StorageDead(_854);
        StorageDead(_853);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        _860 = &(*_6);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        StorageLive(_864);
        _864 = &_840;
        _863 = <RefMut<'_, User> as Deref>::deref(move _864) -> [return: bb360, unwind: bb540];
    }

    bb360: {
        StorageDead(_864);
        _862 = &((*_863).0: anchor_lang::prelude::Pubkey);
        _861 = &(*_862);
        _859 = UserStatsMap::<'_>::get_ref_mut(move _860, move _861) -> [return: bb361, unwind: bb540];
    }

    bb361: {
        StorageDead(_861);
        StorageDead(_860);
        _858 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _859) -> [return: bb362, unwind: bb540];
    }

    bb362: {
        StorageDead(_859);
        _865 = discriminant(_858);
        switchInt(move _865) -> [0: bb363, 1: bb364, otherwise: bb6];
    }

    bb363: {
        StorageLive(_869);
        _869 = move ((_858 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _857 = move _869;
        StorageDead(_869);
        _1162 = const true;
        _851 = Option::<RefMut<'_, UserStats>>::Some(move _857);
        StorageDead(_857);
        _1198 = discriminant(_858);
        StorageDead(_863);
        StorageDead(_862);
        StorageDead(_858);
        goto -> bb366;
    }

    bb364: {
        StorageLive(_866);
        _866 = ((_858 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_868);
        _868 = _866;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _868) -> [return: bb365, unwind: bb576];
    }

    bb365: {
        StorageDead(_868);
        StorageDead(_866);
        StorageDead(_857);
        _1196 = discriminant(_858);
        StorageDead(_863);
        StorageDead(_862);
        StorageDead(_858);
        StorageDead(_852);
        goto -> bb501;
    }

    bb366: {
        StorageDead(_852);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        _873 = &(*_11);
        _872 = SpotMarketMap::<'_>::get_quote_spot_market(move _873) -> [return: bb367, unwind: bb575];
    }

    bb367: {
        StorageDead(_873);
        _871 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _872) -> [return: bb368, unwind: bb575];
    }

    bb368: {
        StorageDead(_872);
        _874 = discriminant(_871);
        switchInt(move _874) -> [0: bb369, 1: bb370, otherwise: bb6];
    }

    bb369: {
        StorageLive(_878);
        _878 = move ((_871 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1164 = const true;
        _870 = move _878;
        StorageDead(_878);
        _1202 = discriminant(_871);
        StorageDead(_871);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        _882 = &(*_11);
        StorageLive(_883);
        StorageLive(_884);
        _884 = &_19;
        _883 = &(*_884);
        _881 = SpotMarketMap::<'_>::get_ref(move _882, move _883) -> [return: bb372, unwind: bb571];
    }

    bb370: {
        StorageLive(_875);
        _875 = ((_871 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_877);
        _877 = _875;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _877) -> [return: bb371, unwind: bb572];
    }

    bb371: {
        StorageDead(_877);
        StorageDead(_875);
        _1200 = discriminant(_871);
        StorageDead(_871);
        goto -> bb500;
    }

    bb372: {
        StorageDead(_883);
        StorageDead(_882);
        _880 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _881) -> [return: bb373, unwind: bb571];
    }

    bb373: {
        StorageDead(_881);
        _885 = discriminant(_880);
        switchInt(move _885) -> [0: bb374, 1: bb375, otherwise: bb6];
    }

    bb374: {
        StorageLive(_889);
        _889 = move ((_880 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1163 = const true;
        _879 = move _889;
        StorageDead(_889);
        _1206 = discriminant(_880);
        StorageDead(_884);
        StorageDead(_880);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        _896 = &_244;
        StorageLive(_897);
        StorageLive(_898);
        _898 = &_839;
        _897 = &(*_898);
        _895 = BTreeMap::<anchor_lang::prelude::Pubkey, (i128, i128)>::get::<anchor_lang::prelude::Pubkey>(move _896, move _897) -> [return: bb377, unwind: bb568];
    }

    bb375: {
        StorageLive(_886);
        _886 = ((_880 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_888);
        _888 = _886;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _888) -> [return: bb376, unwind: bb569];
    }

    bb376: {
        StorageDead(_888);
        StorageDead(_886);
        _1204 = discriminant(_880);
        StorageDead(_884);
        StorageDead(_880);
        goto -> bb499;
    }

    bb377: {
        StorageDead(_897);
        StorageDead(_896);
        _894 = <Option<&(i128, i128)> as SafeUnwrap>::safe_unwrap(move _895) -> [return: bb378, unwind: bb568];
    }

    bb378: {
        StorageDead(_895);
        _893 = <std::result::Result<&(i128, i128), error::ErrorCode> as Try>::branch(move _894) -> [return: bb379, unwind: bb568];
    }

    bb379: {
        StorageDead(_894);
        _899 = discriminant(_893);
        switchInt(move _899) -> [0: bb380, 1: bb381, otherwise: bb6];
    }

    bb380: {
        StorageLive(_903);
        _903 = ((_893 as Continue).0: &(i128, i128));
        _892 = _903;
        StorageDead(_903);
        StorageLive(_890);
        _890 = &((*_892).0: i128);
        StorageLive(_891);
        _891 = &((*_892).1: i128);
        StorageDead(_898);
        StorageDead(_893);
        StorageDead(_892);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        _911 = &_840;
        _910 = <RefMut<'_, User> as Deref>::deref(move _911) -> [return: bb383, unwind: bb568];
    }

    bb381: {
        StorageLive(_900);
        _900 = ((_893 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_902);
        _902 = _900;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _902) -> [return: bb382, unwind: bb568];
    }

    bb382: {
        StorageDead(_902);
        StorageDead(_900);
        StorageDead(_898);
        StorageDead(_893);
        StorageDead(_892);
        goto -> bb559;
    }

    bb383: {
        _909 = &(*_910);
        StorageDead(_911);
        _908 = User::get_quote_spot_position(move _909) -> [return: bb384, unwind: bb568];
    }

    bb384: {
        _907 = &(*_908);
        StorageDead(_909);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        _915 = &_870;
        _914 = &(*_915);
        _913 = <Ref<'_, SpotMarket> as Deref>::deref(move _914) -> [return: bb385, unwind: bb568];
    }

    bb385: {
        _912 = &(*_913);
        StorageDead(_914);
        _906 = SpotPosition::get_signed_token_amount(move _907, move _912) -> [return: bb386, unwind: bb568];
    }

    bb386: {
        StorageDead(_912);
        StorageDead(_907);
        _905 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _906) -> [return: bb387, unwind: bb568];
    }

    bb387: {
        StorageDead(_906);
        _916 = discriminant(_905);
        switchInt(move _916) -> [0: bb388, 1: bb389, otherwise: bb6];
    }

    bb388: {
        StorageLive(_920);
        _920 = ((_905 as Continue).0: i128);
        _904 = _920;
        StorageDead(_920);
        StorageDead(_915);
        StorageDead(_913);
        StorageDead(_910);
        StorageDead(_908);
        StorageDead(_905);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        _930 = &_840;
        _929 = <RefMut<'_, User> as Deref>::deref(move _930) -> [return: bb391, unwind: bb568];
    }

    bb389: {
        StorageLive(_917);
        _917 = ((_905 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_919);
        _919 = _917;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _919) -> [return: bb390, unwind: bb568];
    }

    bb390: {
        StorageDead(_919);
        StorageDead(_917);
        StorageDead(_915);
        StorageDead(_913);
        StorageDead(_910);
        StorageDead(_908);
        StorageDead(_905);
        goto -> bb498;
    }

    bb391: {
        _928 = &(*_929);
        StorageDead(_930);
        StorageLive(_931);
        _931 = _19;
        _927 = User::get_spot_position(move _928, move _931) -> [return: bb392, unwind: bb568];
    }

    bb392: {
        StorageDead(_931);
        StorageDead(_928);
        _926 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _927) -> [return: bb393, unwind: bb568];
    }

    bb393: {
        StorageDead(_927);
        _932 = discriminant(_926);
        switchInt(move _932) -> [0: bb394, 1: bb395, otherwise: bb6];
    }

    bb394: {
        StorageLive(_936);
        _936 = ((_926 as Continue).0: &state::user::SpotPosition);
        _925 = _936;
        StorageDead(_936);
        _924 = &(*_925);
        StorageLive(_937);
        StorageLive(_938);
        StorageLive(_939);
        StorageLive(_940);
        _940 = &_879;
        _939 = &(*_940);
        _938 = <Ref<'_, SpotMarket> as Deref>::deref(move _939) -> [return: bb397, unwind: bb568];
    }

    bb395: {
        StorageLive(_933);
        _933 = ((_926 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_935);
        _935 = _933;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _935) -> [return: bb396, unwind: bb568];
    }

    bb396: {
        StorageDead(_935);
        StorageDead(_933);
        StorageDead(_924);
        StorageDead(_923);
        goto -> bb496;
    }

    bb397: {
        _937 = &(*_938);
        StorageDead(_939);
        _923 = SpotPosition::get_signed_token_amount(move _924, move _937) -> [return: bb398, unwind: bb568];
    }

    bb398: {
        StorageDead(_937);
        StorageDead(_924);
        _922 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _923) -> [return: bb399, unwind: bb568];
    }

    bb399: {
        StorageDead(_923);
        _941 = discriminant(_922);
        switchInt(move _941) -> [0: bb400, 1: bb401, otherwise: bb6];
    }

    bb400: {
        StorageLive(_945);
        _945 = ((_922 as Continue).0: i128);
        _921 = _945;
        StorageDead(_945);
        StorageDead(_940);
        StorageDead(_938);
        StorageDead(_929);
        StorageDead(_926);
        StorageDead(_925);
        StorageDead(_922);
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        _950 = &_371;
        StorageLive(_951);
        _1150 = const _;
        _951 = &(*_1150);
        _949 = <controller::position::PositionDirection as PartialEq>::eq(move _950, move _951) -> [return: bb403, unwind: bb568];
    }

    bb401: {
        StorageLive(_942);
        _942 = ((_922 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_944);
        _944 = _942;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _944) -> [return: bb402, unwind: bb568];
    }

    bb402: {
        StorageDead(_944);
        StorageDead(_942);
        StorageDead(_940);
        StorageDead(_938);
        goto -> bb496;
    }

    bb403: {
        switchInt(move _949) -> [0: bb412, otherwise: bb404];
    }

    bb404: {
        StorageDead(_951);
        StorageDead(_950);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        StorageLive(_958);
        _958 = &_870;
        _957 = &(*_958);
        _956 = <Ref<'_, SpotMarket> as Deref>::deref(move _957) -> [return: bb405, unwind: bb568];
    }

    bb405: {
        _955 = &(*_956);
        StorageDead(_957);
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        _962 = &_879;
        _961 = &(*_962);
        _960 = <Ref<'_, SpotMarket> as Deref>::deref(move _961) -> [return: bb406, unwind: bb568];
    }

    bb406: {
        _959 = &(*_960);
        StorageDead(_961);
        StorageLive(_963);
        StorageLive(_964);
        _964 = &_671;
        _963 = &(*_964);
        StorageLive(_965);
        StorageLive(_966);
        _966 = &_676;
        _965 = &(*_966);
        StorageLive(_967);
        _967 = (*_891);
        StorageLive(_968);
        _968 = (*_890);
        StorageLive(_969);
        _969 = _904;
        StorageLive(_970);
        _970 = _921;
        StorageLive(_971);
        _971 = math::margin::MarginRequirementType::Fill;
        _954 = select_margin_type_for_swap(move _955, move _959, move _963, move _965, move _967, move _968, move _969, move _970, move _971) -> [return: bb407, unwind: bb568];
    }

    bb407: {
        StorageDead(_971);
        StorageDead(_970);
        StorageDead(_969);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_965);
        StorageDead(_963);
        StorageDead(_959);
        StorageDead(_955);
        _953 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as Try>::branch(move _954) -> [return: bb408, unwind: bb568];
    }

    bb408: {
        StorageDead(_954);
        _972 = discriminant(_953);
        switchInt(move _972) -> [0: bb409, 1: bb410, otherwise: bb6];
    }

    bb409: {
        StorageLive(_976);
        _976 = ((_953 as Continue).0: (math::margin::MarginRequirementType, bool));
        _948 = _976;
        StorageDead(_976);
        StorageDead(_966);
        StorageDead(_964);
        StorageDead(_962);
        StorageDead(_960);
        StorageDead(_958);
        StorageDead(_956);
        StorageDead(_953);
        goto -> bb420;
    }

    bb410: {
        StorageLive(_973);
        _973 = ((_953 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_975);
        _975 = _973;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _975) -> [return: bb411, unwind: bb568];
    }

    bb411: {
        StorageDead(_975);
        StorageDead(_973);
        StorageDead(_966);
        StorageDead(_964);
        StorageDead(_962);
        StorageDead(_960);
        StorageDead(_958);
        StorageDead(_956);
        StorageDead(_953);
        goto -> bb495;
    }

    bb412: {
        StorageDead(_951);
        StorageDead(_950);
        StorageLive(_977);
        StorageLive(_978);
        StorageLive(_979);
        StorageLive(_980);
        StorageLive(_981);
        StorageLive(_982);
        _982 = &_879;
        _981 = &(*_982);
        _980 = <Ref<'_, SpotMarket> as Deref>::deref(move _981) -> [return: bb413, unwind: bb568];
    }

    bb413: {
        _979 = &(*_980);
        StorageDead(_981);
        StorageLive(_983);
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        _986 = &_870;
        _985 = &(*_986);
        _984 = <Ref<'_, SpotMarket> as Deref>::deref(move _985) -> [return: bb414, unwind: bb568];
    }

    bb414: {
        _983 = &(*_984);
        StorageDead(_985);
        StorageLive(_987);
        StorageLive(_988);
        _988 = &_676;
        _987 = &(*_988);
        StorageLive(_989);
        StorageLive(_990);
        _990 = &_671;
        _989 = &(*_990);
        StorageLive(_991);
        _991 = (*_890);
        StorageLive(_992);
        _992 = (*_891);
        StorageLive(_993);
        _993 = _921;
        StorageLive(_994);
        _994 = _904;
        StorageLive(_995);
        _995 = math::margin::MarginRequirementType::Fill;
        _978 = select_margin_type_for_swap(move _979, move _983, move _987, move _989, move _991, move _992, move _993, move _994, move _995) -> [return: bb415, unwind: bb568];
    }

    bb415: {
        StorageDead(_995);
        StorageDead(_994);
        StorageDead(_993);
        StorageDead(_992);
        StorageDead(_991);
        StorageDead(_989);
        StorageDead(_987);
        StorageDead(_983);
        StorageDead(_979);
        _977 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as Try>::branch(move _978) -> [return: bb416, unwind: bb568];
    }

    bb416: {
        StorageDead(_978);
        _996 = discriminant(_977);
        switchInt(move _996) -> [0: bb417, 1: bb418, otherwise: bb6];
    }

    bb417: {
        StorageLive(_1000);
        _1000 = ((_977 as Continue).0: (math::margin::MarginRequirementType, bool));
        _948 = _1000;
        StorageDead(_1000);
        StorageDead(_990);
        StorageDead(_988);
        StorageDead(_986);
        StorageDead(_984);
        StorageDead(_982);
        StorageDead(_980);
        StorageDead(_977);
        goto -> bb420;
    }

    bb418: {
        StorageLive(_997);
        _997 = ((_977 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_999);
        _999 = _997;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _999) -> [return: bb419, unwind: bb568];
    }

    bb419: {
        StorageDead(_999);
        StorageDead(_997);
        StorageDead(_990);
        StorageDead(_988);
        StorageDead(_986);
        StorageDead(_984);
        StorageDead(_982);
        StorageDead(_980);
        StorageDead(_977);
        goto -> bb495;
    }

    bb420: {
        StorageDead(_949);
        StorageLive(_946);
        _946 = (_948.0: math::margin::MarginRequirementType);
        StorageLive(_947);
        _947 = (_948.1: bool);
        StorageDead(_948);
        StorageLive(_1001);
        StorageLive(_1002);
        _1163 = const false;
        _1002 = move _879;
        _1001 = std::mem::drop::<Ref<'_, SpotMarket>>(move _1002) -> [return: bb421, unwind: bb568];
    }

    bb421: {
        StorageDead(_1002);
        StorageDead(_1001);
        StorageLive(_1003);
        StorageLive(_1004);
        _1164 = const false;
        _1004 = move _870;
        _1003 = std::mem::drop::<Ref<'_, SpotMarket>>(move _1004) -> [return: bb422, unwind: bb568];
    }

    bb422: {
        StorageDead(_1004);
        StorageDead(_1003);
        StorageLive(_1005);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        _1008 = _946;
        _1007 = MarginContext::standard(move _1008) -> [return: bb423, unwind: bb568];
    }

    bb423: {
        StorageDead(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        StorageLive(_1011);
        _1011 = _19;
        StorageLive(_1012);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        _1015 = (*_890);
        StorageLive(_1016);
        _1016 = _921;
        _1014 = <i128 as SafeMath>::safe_sub(move _1015, move _1016) -> [return: bb424, unwind: bb568];
    }

    bb424: {
        StorageDead(_1016);
        StorageDead(_1015);
        _1013 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1014) -> [return: bb425, unwind: bb568];
    }

    bb425: {
        StorageDead(_1014);
        _1017 = discriminant(_1013);
        switchInt(move _1017) -> [0: bb426, 1: bb427, otherwise: bb6];
    }

    bb426: {
        StorageLive(_1021);
        _1021 = ((_1013 as Continue).0: i128);
        _1012 = _1021;
        StorageDead(_1021);
        _1010 = (move _1011, move _1012);
        StorageDead(_1012);
        StorageDead(_1011);
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        _1026 = (*_891);
        StorageLive(_1027);
        _1027 = _904;
        _1025 = <i128 as SafeMath>::safe_sub(move _1026, move _1027) -> [return: bb429, unwind: bb568];
    }

    bb427: {
        StorageLive(_1018);
        _1018 = ((_1013 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1020);
        _1020 = _1018;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1020) -> [return: bb428, unwind: bb568];
    }

    bb428: {
        StorageDead(_1020);
        StorageDead(_1018);
        StorageDead(_1012);
        StorageDead(_1011);
        StorageDead(_1010);
        StorageDead(_1009);
        StorageDead(_1007);
        StorageDead(_1006);
        goto -> bb493;
    }

    bb429: {
        StorageDead(_1027);
        StorageDead(_1026);
        _1024 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1025) -> [return: bb430, unwind: bb568];
    }

    bb430: {
        StorageDead(_1025);
        _1028 = discriminant(_1024);
        switchInt(move _1028) -> [0: bb431, 1: bb432, otherwise: bb6];
    }

    bb431: {
        StorageLive(_1032);
        _1032 = ((_1024 as Continue).0: i128);
        _1023 = _1032;
        StorageDead(_1032);
        _1022 = (const _, move _1023);
        StorageDead(_1023);
        _1009 = [move _1010, move _1022];
        StorageDead(_1022);
        StorageDead(_1010);
        _1006 = MarginContext::fuel_spot_deltas(move _1007, move _1009) -> [return: bb434, unwind: bb568];
    }

    bb432: {
        StorageLive(_1029);
        _1029 = ((_1024 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1031);
        _1031 = _1029;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1031) -> [return: bb433, unwind: bb568];
    }

    bb433: {
        StorageDead(_1031);
        StorageDead(_1029);
        StorageDead(_1023);
        StorageDead(_1022);
        StorageDead(_1010);
        StorageDead(_1009);
        StorageDead(_1007);
        StorageDead(_1006);
        StorageDead(_1024);
        goto -> bb493;
    }

    bb434: {
        StorageDead(_1009);
        StorageDead(_1007);
        StorageLive(_1033);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        _1036 = &_840;
        _1035 = &(*_1036);
        _1034 = <RefMut<'_, User> as Deref>::deref(move _1035) -> [return: bb435, unwind: bb568];
    }

    bb435: {
        _1033 = &(*_1034);
        StorageDead(_1035);
        StorageLive(_1037);
        _1037 = _14;
        _1005 = MarginContext::fuel_numerator(move _1006, move _1033, move _1037) -> [return: bb436, unwind: bb568];
    }

    bb436: {
        StorageDead(_1037);
        StorageDead(_1033);
        StorageDead(_1006);
        StorageDead(_1036);
        StorageDead(_1034);
        StorageDead(_1024);
        StorageDead(_1013);
        StorageLive(_1038);
        StorageLive(_1039);
        _1039 = _18;
        switchInt(move _1039) -> [0: bb457, otherwise: bb437];
    }

    bb437: {
        StorageLive(_1040);
        StorageLive(_1041);
        StorageLive(_1042);
        StorageLive(_1043);
        _1043 = _947;
        switchInt(move _1043) -> [0: bb439, otherwise: bb438];
    }

    bb438: {
        StorageLive(_1044);
        _1044 = _682;
        switchInt(move _1044) -> [0: bb439, otherwise: bb440];
    }

    bb439: {
        StorageLive(_1045);
        _1045 = ();
        _1042 = std::result::Result::<(), error::ErrorCode>::Ok(move _1045);
        StorageDead(_1045);
        goto -> bb448;
    }

    bb440: {
        StorageLive(_1046);
        _1046 = error::ErrorCode::InvalidOracle;
        StorageLive(_1047);
        StorageLive(_1048);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        StorageLive(_1055);
        StorageLive(_1056);
        StorageLive(_1057);
        _1149 = const _;
        _1057 = &(*_1149);
        _1056 = &(*_1057);
        _1055 = move _1056 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1056);
        StorageLive(_1059);
        StorageLive(_1060);
        StorageLive(_1061);
        StorageLive(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        _1065 = &_1046;
        _1064 = &(*_1065);
        _1063 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1064) -> [return: bb441, unwind: bb568];
    }

    bb441: {
        StorageDead(_1064);
        _1062 = [move _1063];
        StorageDead(_1063);
        _1061 = &_1062;
        _1060 = &(*_1061);
        _1059 = move _1060 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1060);
        _1054 = Arguments::<'_>::new_v1(move _1055, move _1059) -> [return: bb442, unwind: bb568];
    }

    bb442: {
        StorageDead(_1059);
        StorageDead(_1055);
        _1053 = format(move _1054) -> [return: bb443, unwind: bb568];
    }

    bb443: {
        StorageDead(_1054);
        StorageDead(_1065);
        StorageDead(_1062);
        StorageDead(_1061);
        StorageDead(_1057);
        _1052 = move _1053;
        StorageDead(_1053);
        _1051 = &_1052;
        _1050 = &(*_1051);
        _1049 = <String as Deref>::deref(move _1050) -> [return: bb444, unwind: bb539];
    }

    bb444: {
        _1048 = &(*_1049);
        StorageDead(_1050);
        _1047 = solana_program::log::sol_log(move _1048) -> [return: bb445, unwind: bb539];
    }

    bb445: {
        StorageDead(_1048);
        drop(_1052) -> [return: bb446, unwind: bb568];
    }

    bb446: {
        StorageDead(_1052);
        StorageDead(_1051);
        StorageDead(_1049);
        StorageDead(_1047);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        _1068 = const "maker or taker must be reducing position if oracle stale for margin";
        _1067 = &(*_1068);
        _1066 = solana_program::log::sol_log(move _1067) -> [return: bb447, unwind: bb568];
    }

    bb447: {
        StorageDead(_1067);
        StorageDead(_1068);
        StorageDead(_1066);
        StorageLive(_1069);
        _1069 = _1046;
        _1042 = std::result::Result::<(), error::ErrorCode>::Err(move _1069);
        StorageDead(_1069);
        StorageDead(_1046);
        goto -> bb448;
    }

    bb448: {
        StorageDead(_1044);
        StorageDead(_1043);
        _1041 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1042) -> [return: bb449, unwind: bb568];
    }

    bb449: {
        StorageDead(_1042);
        _1070 = discriminant(_1041);
        switchInt(move _1070) -> [0: bb450, 1: bb451, otherwise: bb6];
    }

    bb450: {
        StorageLive(_1074);
        _1074 = ((_1041 as Continue).0: ());
        _1040 = _1074;
        StorageDead(_1074);
        StorageDead(_1041);
        StorageDead(_1040);
        StorageLive(_1075);
        _1075 = _947;
        switchInt(move _1075) -> [0: bb454, otherwise: bb453];
    }

    bb451: {
        StorageLive(_1071);
        _1071 = ((_1041 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1073);
        _1073 = _1071;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1073) -> [return: bb452, unwind: bb568];
    }

    bb452: {
        StorageDead(_1073);
        StorageDead(_1071);
        StorageDead(_1041);
        StorageDead(_1040);
        StorageDead(_1039);
        StorageDead(_1038);
        goto -> bb494;
    }

    bb453: {
        StorageLive(_1076);
        StorageLive(_1077);
        _1077 = _1005;
        _1076 = MarginContext::margin_ratio_override(move _1077, const _) -> [return: bb455, unwind: bb568];
    }

    bb454: {
        _1038 = const ();
        goto -> bb456;
    }

    bb455: {
        StorageDead(_1077);
        _1005 = move _1076;
        StorageDead(_1076);
        _1038 = const ();
        goto -> bb456;
    }

    bb456: {
        StorageDead(_1075);
        goto -> bb458;
    }

    bb457: {
        _1038 = const ();
        goto -> bb458;
    }

    bb458: {
        StorageDead(_1039);
        StorageDead(_1038);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        _1084 = &_840;
        _1083 = &(*_1084);
        _1082 = <RefMut<'_, User> as Deref>::deref(move _1083) -> [return: bb459, unwind: bb568];
    }

    bb459: {
        _1081 = &(*_1082);
        StorageDead(_1083);
        StorageLive(_1085);
        _1085 = &(*_12);
        StorageLive(_1086);
        _1086 = &(*_11);
        StorageLive(_1087);
        _1087 = &mut (*_13);
        StorageLive(_1088);
        _1088 = _1005;
        _1080 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _1081, move _1085, move _1086, move _1087, move _1088) -> [return: bb460, unwind: bb568];
    }

    bb460: {
        StorageDead(_1088);
        StorageDead(_1087);
        StorageDead(_1086);
        StorageDead(_1085);
        StorageDead(_1081);
        _1079 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _1080) -> [return: bb461, unwind: bb568];
    }

    bb461: {
        StorageDead(_1080);
        _1089 = discriminant(_1079);
        switchInt(move _1089) -> [0: bb462, 1: bb463, otherwise: bb6];
    }

    bb462: {
        StorageLive(_1093);
        _1093 = ((_1079 as Continue).0: state::margin_calculation::MarginCalculation);
        _1078 = _1093;
        StorageDead(_1093);
        StorageDead(_1084);
        StorageDead(_1082);
        StorageDead(_1079);
        StorageLive(_1094);
        _1095 = discriminant(_851);
        switchInt(move _1095) -> [1: bb466, otherwise: bb465];
    }

    bb463: {
        StorageLive(_1090);
        _1090 = ((_1079 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1092);
        _1092 = _1090;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1092) -> [return: bb464, unwind: bb568];
    }

    bb464: {
        StorageDead(_1092);
        StorageDead(_1090);
        StorageDead(_1084);
        StorageDead(_1082);
        StorageDead(_1079);
        goto -> bb492;
    }

    bb465: {
        _1094 = const ();
        goto -> bb475;
    }

    bb466: {
        StorageLive(_1096);
        _1162 = const false;
        _1096 = move ((_851 as Some).0: std::cell::RefMut<'_, state::user::UserStats>);
        StorageLive(_1097);
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        StorageLive(_1101);
        StorageLive(_1102);
        _1102 = &mut _1096;
        _1101 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _1102) -> [return: bb467, unwind: bb538];
    }

    bb467: {
        _1100 = &mut (*_1101);
        StorageDead(_1102);
        StorageLive(_1103);
        StorageLive(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        _1106 = &mut _840;
        _1105 = &mut (*_1106);
        _1104 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1105) -> [return: bb468, unwind: bb538];
    }

    bb468: {
        _1103 = &mut (*_1104);
        StorageDead(_1105);
        StorageLive(_1107);
        _1107 = (_1078.17: u32);
        StorageLive(_1108);
        _1108 = (_1078.18: u32);
        StorageLive(_1109);
        _1109 = (_1078.19: u32);
        StorageLive(_1110);
        _1110 = _14;
        _1099 = UserStats::update_fuel_bonus(move _1100, move _1103, move _1107, move _1108, move _1109, move _1110) -> [return: bb469, unwind: bb538];
    }

    bb469: {
        StorageDead(_1110);
        StorageDead(_1109);
        StorageDead(_1108);
        StorageDead(_1107);
        StorageDead(_1103);
        StorageDead(_1100);
        _1098 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1099) -> [return: bb470, unwind: bb538];
    }

    bb470: {
        StorageDead(_1099);
        _1111 = discriminant(_1098);
        switchInt(move _1111) -> [0: bb471, 1: bb472, otherwise: bb6];
    }

    bb471: {
        StorageLive(_1115);
        _1115 = ((_1098 as Continue).0: ());
        _1097 = _1115;
        StorageDead(_1115);
        StorageDead(_1106);
        StorageDead(_1104);
        StorageDead(_1101);
        StorageDead(_1098);
        StorageDead(_1097);
        _1094 = const ();
        drop(_1096) -> [return: bb474, unwind: bb568];
    }

    bb472: {
        StorageLive(_1112);
        _1112 = ((_1098 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1114);
        _1114 = _1112;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1114) -> [return: bb473, unwind: bb538];
    }

    bb473: {
        StorageDead(_1114);
        StorageDead(_1112);
        StorageDead(_1106);
        StorageDead(_1104);
        StorageDead(_1101);
        StorageDead(_1098);
        StorageDead(_1097);
        drop(_1096) -> [return: bb491, unwind: bb568];
    }

    bb474: {
        StorageDead(_1096);
        goto -> bb475;
    }

    bb475: {
        StorageDead(_1094);
        StorageLive(_1116);
        StorageLive(_1117);
        _1117 = &_1078;
        _1116 = MarginCalculation::meets_margin_requirement(move _1117) -> [return: bb476, unwind: bb568];
    }

    bb476: {
        switchInt(move _1116) -> [0: bb478, otherwise: bb477];
    }

    bb477: {
        StorageDead(_1117);
        _833 = const ();
        StorageDead(_1116);
        StorageDead(_1078);
        StorageDead(_1005);
        StorageDead(_947);
        StorageDead(_946);
        StorageDead(_921);
        StorageDead(_904);
        StorageDead(_891);
        StorageDead(_890);
        _1163 = const false;
        StorageDead(_879);
        _1164 = const false;
        StorageDead(_870);
        _1208 = discriminant(_851);
        switchInt(move _1208) -> [1: bb556, otherwise: bb555];
    }

    bb478: {
        StorageDead(_1117);
        StorageLive(_1119);
        StorageLive(_1120);
        StorageLive(_1121);
        StorageLive(_1122);
        StorageLive(_1123);
        StorageLive(_1124);
        StorageLive(_1125);
        StorageLive(_1126);
        StorageLive(_1127);
        StorageLive(_1128);
        StorageLive(_1129);
        _1148 = const _;
        _1129 = &(*_1148);
        _1128 = &(*_1129);
        _1127 = move _1128 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1128);
        StorageLive(_1131);
        StorageLive(_1132);
        StorageLive(_1133);
        StorageLive(_1134);
        StorageLive(_1135);
        StorageLive(_1136);
        StorageLive(_1137);
        _1137 = &_839;
        _1136 = &(*_1137);
        _1135 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _1136) -> [return: bb479, unwind: bb568];
    }

    bb479: {
        StorageDead(_1136);
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        _1140 = &(_1078.3: u128);
        _1139 = &(*_1140);
        _1138 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1139) -> [return: bb480, unwind: bb568];
    }

    bb480: {
        StorageDead(_1139);
        StorageLive(_1141);
        StorageLive(_1142);
        StorageLive(_1143);
        _1143 = &(_1078.1: i128);
        _1142 = &(*_1143);
        _1141 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _1142) -> [return: bb481, unwind: bb568];
    }

    bb481: {
        StorageDead(_1142);
        _1134 = [move _1135, move _1138, move _1141];
        StorageDead(_1141);
        StorageDead(_1138);
        StorageDead(_1135);
        _1133 = &_1134;
        _1132 = &(*_1133);
        _1131 = move _1132 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1132);
        _1126 = Arguments::<'_>::new_v1(move _1127, move _1131) -> [return: bb482, unwind: bb568];
    }

    bb482: {
        StorageDead(_1131);
        StorageDead(_1127);
        _1125 = format(move _1126) -> [return: bb483, unwind: bb568];
    }

    bb483: {
        StorageDead(_1126);
        StorageDead(_1143);
        StorageDead(_1140);
        StorageDead(_1137);
        StorageDead(_1134);
        StorageDead(_1133);
        StorageDead(_1129);
        _1124 = move _1125;
        StorageDead(_1125);
        _1123 = &_1124;
        _1122 = &(*_1123);
        _1121 = <String as Deref>::deref(move _1122) -> [return: bb484, unwind: bb537];
    }

    bb484: {
        _1120 = &(*_1121);
        StorageDead(_1122);
        _1119 = solana_program::log::sol_log(move _1120) -> [return: bb485, unwind: bb537];
    }

    bb485: {
        StorageDead(_1120);
        drop(_1124) -> [return: bb486, unwind: bb568];
    }

    bb486: {
        StorageDead(_1124);
        StorageDead(_1123);
        StorageDead(_1121);
        StorageDead(_1119);
        StorageLive(_1144);
        _1144 = error::ErrorCode::InsufficientCollateral;
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Err(move _1144);
        StorageDead(_1144);
        StorageDead(_1116);
        goto -> bb492;
    }

    bb487: {
        StorageDead(_840);
        StorageDead(_839);
        StorageDead(_836);
        StorageDead(_834);
        StorageDead(_833);
        _249 = const ();
        goto -> bb347;
    }

    bb488: {
        StorageDead(_832);
        StorageDead(_830);
        StorageDead(_829);
        StorageLive(_1145);
        StorageLive(_1146);
        _1146 = _368;
        StorageLive(_1147);
        _1147 = _369;
        _1145 = (move _1146, move _1147);
        StorageDead(_1147);
        StorageDead(_1146);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _1145);
        StorageDead(_1145);
        StorageDead(_775);
        StorageDead(_740);
        StorageDead(_682);
        StorageDead(_681);
        StorageDead(_676);
        StorageDead(_671);
        StorageDead(_655);
        StorageDead(_639);
        StorageDead(_616);
        StorageDead(_601);
        StorageDead(_371);
        _1165 = const false;
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_368);
        drop(_351) -> [return: bb489, unwind: bb549];
    }

    bb489: {
        StorageDead(_351);
        StorageDead(_331);
        StorageDead(_315);
        drop(_244) -> [return: bb490, unwind: bb585];
    }

    bb490: {
        StorageDead(_244);
        StorageDead(_221);
        StorageDead(_206);
        _1166 = const false;
        StorageDead(_36);
        _1167 = const false;
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_19);
        goto -> bb536;
    }

    bb491: {
        StorageDead(_1096);
        StorageDead(_1094);
        goto -> bb492;
    }

    bb492: {
        StorageDead(_1078);
        goto -> bb494;
    }

    bb493: {
        StorageDead(_1013);
        goto -> bb494;
    }

    bb494: {
        StorageDead(_1005);
        StorageDead(_947);
        StorageDead(_946);
        goto -> bb497;
    }

    bb495: {
        StorageDead(_949);
        StorageDead(_948);
        goto -> bb497;
    }

    bb496: {
        StorageDead(_929);
        StorageDead(_926);
        StorageDead(_925);
        StorageDead(_922);
        goto -> bb497;
    }

    bb497: {
        StorageDead(_921);
        goto -> bb498;
    }

    bb498: {
        StorageDead(_904);
        StorageDead(_891);
        StorageDead(_890);
        goto -> bb559;
    }

    bb499: {
        _1163 = const false;
        StorageDead(_879);
        switchInt(_1164) -> [0: bb500, otherwise: bb560];
    }

    bb500: {
        _1164 = const false;
        StorageDead(_870);
        _1210 = discriminant(_851);
        switchInt(move _1210) -> [1: bb561, otherwise: bb501];
    }

    bb501: {
        _1162 = const false;
        StorageDead(_851);
        drop(_840) -> [return: bb502, unwind: bb541];
    }

    bb502: {
        StorageDead(_840);
        StorageDead(_839);
        StorageDead(_836);
        StorageDead(_834);
        StorageDead(_833);
        drop(_832) -> [return: bb503, unwind: bb581];
    }

    bb503: {
        StorageDead(_832);
        StorageDead(_830);
        StorageDead(_829);
        goto -> bb504;
    }

    bb504: {
        StorageDead(_775);
        goto -> bb506;
    }

    bb505: {
        StorageDead(_748);
        goto -> bb506;
    }

    bb506: {
        StorageDead(_740);
        StorageDead(_682);
        StorageDead(_681);
        goto -> bb508;
    }

    bb507: {
        StorageDead(_684);
        StorageDead(_683);
        goto -> bb508;
    }

    bb508: {
        StorageDead(_676);
        StorageDead(_671);
        goto -> bb509;
    }

    bb509: {
        StorageDead(_655);
        goto -> bb510;
    }

    bb510: {
        StorageDead(_639);
        goto -> bb512;
    }

    bb511: {
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_617);
        goto -> bb512;
    }

    bb512: {
        StorageDead(_616);
        goto -> bb513;
    }

    bb513: {
        StorageDead(_601);
        goto -> bb520;
    }

    bb514: {
        StorageDead(_400);
        StorageDead(_399);
        goto -> bb519;
    }

    bb515: {
        drop(_415) -> [return: bb516, unwind: bb546];
    }

    bb516: {
        StorageDead(_415);
        drop(_405) -> [return: bb517, unwind: bb581];
    }

    bb517: {
        StorageDead(_405);
        StorageDead(_404);
        StorageDead(_403);
        goto -> bb518;
    }

    bb518: {
        StorageDead(_401);
        goto -> bb519;
    }

    bb519: {
        StorageDead(_389);
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_377);
        StorageDead(_376);
        goto -> bb520;
    }

    bb520: {
        StorageDead(_371);
        switchInt(_1165) -> [0: bb521, otherwise: bb563];
    }

    bb521: {
        _1165 = const false;
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_368);
        drop(_351) -> [return: bb522, unwind: bb549];
    }

    bb522: {
        StorageDead(_351);
        goto -> bb523;
    }

    bb523: {
        StorageDead(_331);
        goto -> bb524;
    }

    bb524: {
        StorageDead(_315);
        goto -> bb528;
    }

    bb525: {
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_284);
        goto -> bb526;
    }

    bb526: {
        StorageDead(_267);
        drop(_257) -> [return: bb527, unwind: bb549];
    }

    bb527: {
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_245);
        goto -> bb528;
    }

    bb528: {
        drop(_244) -> [return: bb529, unwind: bb585];
    }

    bb529: {
        StorageDead(_244);
        goto -> bb531;
    }

    bb530: {
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_222);
        goto -> bb531;
    }

    bb531: {
        StorageDead(_221);
        goto -> bb532;
    }

    bb532: {
        StorageDead(_206);
        goto -> bb565;
    }

    bb533: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb565;
    }

    bb534: {
        _1166 = const false;
        StorageDead(_36);
        switchInt(_1167) -> [0: bb535, otherwise: bb566];
    }

    bb535: {
        _1167 = const false;
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_19);
        goto -> bb536;
    }

    bb536: {
        return;
    }

    bb537 (cleanup): {
        drop(_1124) -> [return: bb568, unwind terminate(cleanup)];
    }

    bb538 (cleanup): {
        drop(_1096) -> [return: bb568, unwind terminate(cleanup)];
    }

    bb539 (cleanup): {
        drop(_1052) -> [return: bb568, unwind terminate(cleanup)];
    }

    bb540 (cleanup): {
        drop(_840) -> [return: bb541, unwind terminate(cleanup)];
    }

    bb541 (cleanup): {
        drop(_832) -> [return: bb581, unwind terminate(cleanup)];
    }

    bb542 (cleanup): {
        drop(_811) -> [return: bb581, unwind terminate(cleanup)];
    }

    bb543 (cleanup): {
        drop(_578) -> [return: bb581, unwind terminate(cleanup)];
    }

    bb544 (cleanup): {
        drop(_559) -> [return: bb581, unwind terminate(cleanup)];
    }

    bb545 (cleanup): {
        drop(_415) -> [return: bb546, unwind terminate(cleanup)];
    }

    bb546 (cleanup): {
        drop(_405) -> [return: bb581, unwind terminate(cleanup)];
    }

    bb547 (cleanup): {
        drop(_351) -> [return: bb549, unwind terminate(cleanup)];
    }

    bb548 (cleanup): {
        drop(_257) -> [return: bb549, unwind terminate(cleanup)];
    }

    bb549 (cleanup): {
        drop(_244) -> [return: bb585, unwind terminate(cleanup)];
    }

    bb550 (cleanup): {
        drop(_183) -> [return: bb585, unwind terminate(cleanup)];
    }

    bb551 (cleanup): {
        drop(_145) -> [return: bb585, unwind terminate(cleanup)];
    }

    bb552 (cleanup): {
        drop(_107) -> [return: bb585, unwind terminate(cleanup)];
    }

    bb553 (cleanup): {
        drop(_69) -> [return: bb585, unwind terminate(cleanup)];
    }

    bb554 (cleanup): {
        resume;
    }

    bb555: {
        _1162 = const false;
        StorageDead(_851);
        drop(_840) -> [return: bb487, unwind: bb541];
    }

    bb556: {
        switchInt(_1162) -> [0: bb555, otherwise: bb557];
    }

    bb557: {
        drop(((_851 as Some).0: std::cell::RefMut<'_, state::user::UserStats>)) -> [return: bb555, unwind: bb540];
    }

    bb558: {
        drop(_879) -> [return: bb499, unwind: bb571];
    }

    bb559: {
        switchInt(_1163) -> [0: bb499, otherwise: bb558];
    }

    bb560: {
        drop(_870) -> [return: bb500, unwind: bb575];
    }

    bb561: {
        switchInt(_1162) -> [0: bb501, otherwise: bb562];
    }

    bb562: {
        drop(((_851 as Some).0: std::cell::RefMut<'_, state::user::UserStats>)) -> [return: bb501, unwind: bb540];
    }

    bb563: {
        drop(_370) -> [return: bb521, unwind: bb547];
    }

    bb564: {
        drop(_36) -> [return: bb534, unwind: bb588];
    }

    bb565: {
        switchInt(_1166) -> [0: bb534, otherwise: bb564];
    }

    bb566: {
        drop(_27) -> [return: bb535, unwind: bb554];
    }

    bb567 (cleanup): {
        drop(_879) -> [return: bb571, unwind terminate(cleanup)];
    }

    bb568 (cleanup): {
        switchInt(_1163) -> [0: bb571, otherwise: bb567];
    }

    bb569 (cleanup): {
        _1212 = discriminant(_880);
        goto -> bb571;
    }

    bb570 (cleanup): {
        drop(_870) -> [return: bb575, unwind terminate(cleanup)];
    }

    bb571 (cleanup): {
        switchInt(_1164) -> [0: bb575, otherwise: bb570];
    }

    bb572 (cleanup): {
        _1213 = discriminant(_871);
        goto -> bb575;
    }

    bb573 (cleanup): {
        switchInt(_1162) -> [0: bb540, otherwise: bb574];
    }

    bb574 (cleanup): {
        drop(((_851 as Some).0: std::cell::RefMut<'_, state::user::UserStats>)) -> [return: bb540, unwind terminate(cleanup)];
    }

    bb575 (cleanup): {
        _1214 = discriminant(_851);
        switchInt(move _1214) -> [1: bb573, otherwise: bb540];
    }

    bb576 (cleanup): {
        _1215 = discriminant(_858);
        goto -> bb540;
    }

    bb577 (cleanup): {
        _1216 = discriminant(_841);
        goto -> bb541;
    }

    bb578 (cleanup): {
        _1217 = discriminant(_422);
        goto -> bb546;
    }

    bb579 (cleanup): {
        _1218 = discriminant(_406);
        goto -> bb581;
    }

    bb580 (cleanup): {
        drop(_370) -> [return: bb547, unwind terminate(cleanup)];
    }

    bb581 (cleanup): {
        switchInt(_1165) -> [0: bb547, otherwise: bb580];
    }

    bb582 (cleanup): {
        _1219 = discriminant(_352);
        goto -> bb549;
    }

    bb583 (cleanup): {
        _1220 = discriminant(_258);
        goto -> bb549;
    }

    bb584 (cleanup): {
        drop(_36) -> [return: bb588, unwind terminate(cleanup)];
    }

    bb585 (cleanup): {
        switchInt(_1166) -> [0: bb588, otherwise: bb584];
    }

    bb586 (cleanup): {
        _1221 = discriminant(_37);
        goto -> bb588;
    }

    bb587 (cleanup): {
        drop(_27) -> [return: bb554, unwind terminate(cleanup)];
    }

    bb588 (cleanup): {
        switchInt(_1167) -> [0: bb554, otherwise: bb587];
    }

    bb589 (cleanup): {
        _1222 = discriminant(_28);
        goto -> bb554;
    }
}
