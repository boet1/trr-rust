digraph Mir_0_1128 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn admin::handle_update_mm_oracle_native(_1: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;], _2: &amp;ReErased [u8]) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let _4: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _5: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let _6: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _7: &amp;ReErased std::rc::Rc&lt;std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;, std::alloc::Global&gt;;<br align="left"/>let _8: usize;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: bool;<br align="left"/>let _11: ();<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: u8;<br align="left"/>let mut _14: u8;<br align="left"/>let mut _15: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _16: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: !;<br align="left"/>let _21: !;<br align="left"/>let _22: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _23: usize;<br align="left"/>let mut _24: usize;<br align="left"/>let mut _25: bool;<br align="left"/>let _26: ();<br align="left"/>let mut _27: bool;<br align="left"/>let mut _28: bool;<br align="left"/>let mut _29: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _30: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _31: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _32: !;<br align="left"/>let _33: !;<br align="left"/>let mut _34: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _35: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _36: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _37: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _38: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _39: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _40: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _41: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _42: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _43: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _44: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _45: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _46: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _47: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _48: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _49: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _50: std::cell::RefMut&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _51: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let _52: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _53: &amp;ReErased std::rc::Rc&lt;std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;, std::alloc::Global&gt;;<br align="left"/>let _54: usize;<br align="left"/>let mut _55: usize;<br align="left"/>let mut _56: bool;<br align="left"/>let _57: u64;<br align="left"/>let mut _58: [u8; 8_usize];<br align="left"/>let mut _59: std::result::Result&lt;[u8; 8_usize], std::array::TryFromSliceError&gt;;<br align="left"/>let mut _60: &amp;ReErased [u8];<br align="left"/>let _61: &amp;ReErased [u8];<br align="left"/>let mut _62: &amp;ReErased [u8];<br align="left"/>let _63: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _64: &amp;ReErased std::cell::RefMut&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _65: std::ops::Range&lt;usize&gt;;<br align="left"/>let _66: u64;<br align="left"/>let mut _67: [u8; 8_usize];<br align="left"/>let mut _68: std::result::Result&lt;[u8; 8_usize], std::array::TryFromSliceError&gt;;<br align="left"/>let mut _69: &amp;ReErased [u8];<br align="left"/>let _70: &amp;ReErased [u8];<br align="left"/>let mut _71: &amp;ReErased [u8];<br align="left"/>let mut _72: std::ops::Range&lt;usize&gt;;<br align="left"/>let _73: ();<br align="left"/>let mut _74: bool;<br align="left"/>let mut _75: u64;<br align="left"/>let mut _76: u64;<br align="left"/>let _77: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _78: usize;<br align="left"/>let mut _79: usize;<br align="left"/>let mut _80: bool;<br align="left"/>let _81: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _82: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let _83: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _84: &amp;ReErased std::rc::Rc&lt;std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;, std::alloc::Global&gt;;<br align="left"/>let _85: ();<br align="left"/>let mut _86: &amp;ReErased mut [u8];<br align="left"/>let mut _87: &amp;ReErased mut [u8];<br align="left"/>let mut _88: &amp;ReErased mut [u8];<br align="left"/>let mut _89: &amp;ReErased mut &amp;ReErased mut [u8];<br align="left"/>let mut _90: &amp;ReErased mut std::cell::RefMut&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _91: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _92: &amp;ReErased [u8];<br align="left"/>let _93: &amp;ReErased [u8];<br align="left"/>let _94: &amp;ReErased [u8];<br align="left"/>let mut _95: &amp;ReErased [u8];<br align="left"/>let _96: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _97: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _98: std::ops::Range&lt;usize&gt;;<br align="left"/>let _99: ();<br align="left"/>let mut _100: &amp;ReErased mut [u8];<br align="left"/>let mut _101: &amp;ReErased mut [u8];<br align="left"/>let mut _102: &amp;ReErased mut [u8];<br align="left"/>let mut _103: &amp;ReErased mut &amp;ReErased mut [u8];<br align="left"/>let mut _104: &amp;ReErased mut std::cell::RefMut&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _105: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _106: &amp;ReErased [u8];<br align="left"/>let _107: &amp;ReErased [u8];<br align="left"/>let _108: &amp;ReErased [u8];<br align="left"/>let mut _109: &amp;ReErased [u8];<br align="left"/>let mut _110: std::ops::Range&lt;usize&gt;;<br align="left"/>let _111: ();<br align="left"/>let mut _112: &amp;ReErased mut [u8];<br align="left"/>let mut _113: &amp;ReErased mut [u8];<br align="left"/>let mut _114: &amp;ReErased mut [u8];<br align="left"/>let mut _115: &amp;ReErased mut &amp;ReErased mut [u8];<br align="left"/>let mut _116: &amp;ReErased mut std::cell::RefMut&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _117: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _118: &amp;ReErased [u8];<br align="left"/>let _119: &amp;ReErased [u8];<br align="left"/>let _120: &amp;ReErased [u8];<br align="left"/>let mut _121: &amp;ReErased [u8];<br align="left"/>let mut _122: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _123: ();<br align="left"/>let mut _124: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _125: &amp;ReErased mut [u8];<br align="left"/>let mut _126: &amp;ReErased mut [u8];<br align="left"/>let mut _127: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _128: &amp;ReErased mut [u8];<br align="left"/>let mut _129: &amp;ReErased mut [u8];<br align="left"/>let mut _130: &amp;ReErased mut [u8];<br align="left"/>let mut _131: &amp;ReErased mut [u8];<br align="left"/>let mut _132: &amp;ReErased mut [u8];<br align="left"/>debug accounts =&gt; _1;<br align="left"/>debug data =&gt; _2;<br align="left"/>debug state =&gt; _3;<br align="left"/>debug signer_account =&gt; _22;<br align="left"/>debug perp_market =&gt; _50;<br align="left"/>debug perp_market_sequence_id =&gt; _57;<br align="left"/>debug incoming_sequence_id =&gt; _66;<br align="left"/>debug clock_account =&gt; _77;<br align="left"/>debug clock_data =&gt; _81;<br align="left"/>>;
    bb0__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = const 3_usize<br/>_9 = Len((*_1))<br/>_10 = Lt(_8, _9)<br/></td></tr><tr><td align="left">assert(move _10, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _9, _8)</td></tr></table>>];
    bb1__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = &amp;((*_1)[_8].2: std::rc::Rc&lt;std::cell::RefCell&lt;&amp;mut [u8]&gt;&gt;)<br/></td></tr><tr><td align="left">_6 = &lt;Rc&lt;RefCell&lt;&amp;mut [u8]&gt;&gt; as Deref&gt;::deref(move _7)</td></tr></table>>];
    bb2__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = &amp;(*_6)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_4 = RefCell::&lt;&amp;mut [u8]&gt;::borrow(move _5)</td></tr></table>>];
    bb3__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = &amp;_4<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;(*_3)<br/></td></tr><tr><td align="left">_15 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _16)</td></tr></table>>];
    bb4__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_17)<br/>_17 = const 982_usize<br/>_125 = deref_copy (*_15)<br/>_18 = Len((*_125))<br/>_19 = Lt(_17, _18)<br/></td></tr><tr><td align="left">assert(move _19, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _18, _17)</td></tr></table>>];
    bb5__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_126 = deref_copy (*_15)<br/>_14 = (*_126)[_17]<br/>_13 = BitAnd(move _14, const 1_u8)<br/>StorageDead(_14)<br/>_12 = Gt(move _13, const 0_u8)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb6__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>_11 = const ()<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = const 1_usize<br/>_24 = Len((*_1))<br/>_25 = Lt(_23, _24)<br/></td></tr><tr><td align="left">assert(move _25, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _24, _23)</td></tr></table>>];
    bb7__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageLive(_21)<br/></td></tr><tr><td align="left">_21 = begin_panic::&lt;&amp;str&gt;(const &quot;ix disabled by admin state&quot;)</td></tr></table>>];
    bb8__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_22 = &amp;(*_1)[_23]<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = ((*_22).5: bool)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb9__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>StorageLive(_29)<br/>_127 = deref_copy ((*_22).0: &amp;anchor_lang::prelude::Pubkey)<br/>_29 = &amp;(*_127)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/></td></tr><tr><td align="left">_31 = mm_oracle_crank_wallet::id()</td></tr></table>>];
    bb10__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_30 = &amp;_31<br/></td></tr><tr><td align="left">_28 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _29, move _30)</td></tr></table>>];
    bb11__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb12__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>_26 = const ()<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = const 0_usize<br/>_55 = Len((*_1))<br/>_56 = Lt(_54, _55)<br/></td></tr><tr><td align="left">assert(move _56, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _55, _54)</td></tr></table>>];
    bb13__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_124 = const _<br/>_37 = &amp;(*_124)<br/>_36 = &amp;(*_37)<br/>_35 = move _36 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_36)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = &amp;((*_22).0: &amp;anchor_lang::prelude::Pubkey)<br/>_44 = &amp;(*_45)<br/></td></tr><tr><td align="left">_43 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;&amp;anchor_lang::prelude::Pubkey&gt;(move _44)</td></tr></table>>];
    bb15__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/></td></tr><tr><td align="left">_49 = mm_oracle_crank_wallet::id()</td></tr></table>>];
    bb16__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_48 = &amp;_49<br/>_47 = &amp;(*_48)<br/></td></tr><tr><td align="left">_46 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;anchor_lang::prelude::Pubkey&gt;(move _47)</td></tr></table>>];
    bb17__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>_42 = [move _43, move _46]<br/>StorageDead(_46)<br/>StorageDead(_43)<br/>_41 = &amp;_42<br/>_40 = &amp;(*_41)<br/>_39 = move _40 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">_34 = Arguments::&lt;'_&gt;::new_v1(move _35, move _39)</td></tr></table>>];
    bb18__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_33 = panic_fmt(move _34)</td></tr></table>>];
    bb19__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_53 = &amp;((*_1)[_54].2: std::rc::Rc&lt;std::cell::RefCell&lt;&amp;mut [u8]&gt;&gt;)<br/></td></tr><tr><td align="left">_52 = &lt;Rc&lt;RefCell&lt;&amp;mut [u8]&gt;&gt; as Deref&gt;::deref(move _53)</td></tr></table>>];
    bb20__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_51 = &amp;(*_52)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">_50 = RefCell::&lt;&amp;mut [u8]&gt;::borrow_mut(move _51)</td></tr></table>>];
    bb21__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_54)<br/>StorageDead(_52)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = &amp;_50<br/></td></tr><tr><td align="left">_63 = &lt;RefMut&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _64)</td></tr></table>>];
    bb22__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_128 = deref_copy (*_63)<br/>_62 = &amp;(*_128)<br/>StorageDead(_64)<br/>StorageLive(_65)<br/>_65 = std::ops::Range::&lt;usize&gt; { start: const 936_usize, end: const 944_usize }<br/></td></tr><tr><td align="left">_61 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _62, move _65)</td></tr></table>>];
    bb23__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_60 = &amp;(*_61)<br/>StorageDead(_65)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">_59 = &lt;&amp;[u8] as TryInto&lt;[u8; 8]&gt;&gt;::try_into(move _60)</td></tr></table>>];
    bb24__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/></td></tr><tr><td align="left">_58 = std::result::Result::&lt;[u8; 8], TryFromSliceError&gt;::unwrap(move _59)</td></tr></table>>];
    bb25__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/></td></tr><tr><td align="left">_57 = core::num::&lt;impl u64&gt;::from_le_bytes(move _58)</td></tr></table>>];
    bb26__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_63)<br/>StorageDead(_61)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;(*_2)<br/>StorageLive(_72)<br/>_72 = std::ops::Range::&lt;usize&gt; { start: const 8_usize, end: const 16_usize }<br/></td></tr><tr><td align="left">_70 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _71, move _72)</td></tr></table>>];
    bb27__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_69 = &amp;(*_70)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">_68 = &lt;&amp;[u8] as TryInto&lt;[u8; 8]&gt;&gt;::try_into(move _69)</td></tr></table>>];
    bb28__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/></td></tr><tr><td align="left">_67 = std::result::Result::&lt;[u8; 8], TryFromSliceError&gt;::unwrap(move _68)</td></tr></table>>];
    bb29__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/></td></tr><tr><td align="left">_66 = core::num::&lt;impl u64&gt;::from_le_bytes(move _67)</td></tr></table>>];
    bb30__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_70)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>_75 = _66<br/>StorageLive(_76)<br/>_76 = _57<br/>_74 = Gt(move _75, move _76)<br/></td></tr><tr><td align="left">switchInt(move _74)</td></tr></table>>];
    bb31__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_75)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>_78 = const 2_usize<br/>_79 = Len((*_1))<br/>_80 = Lt(_78, _79)<br/></td></tr><tr><td align="left">assert(move _80, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _79, _78)</td></tr></table>>];
    bb32__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_77 = &amp;(*_1)[_78]<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>_84 = &amp;((*_77).2: std::rc::Rc&lt;std::cell::RefCell&lt;&amp;mut [u8]&gt;&gt;)<br/></td></tr><tr><td align="left">_83 = &lt;Rc&lt;RefCell&lt;&amp;mut [u8]&gt;&gt; as Deref&gt;::deref(move _84)</td></tr></table>>];
    bb33__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_82 = &amp;(*_83)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">_81 = RefCell::&lt;&amp;mut [u8]&gt;::borrow(move _82)</td></tr></table>>];
    bb34__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageDead(_83)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>_90 = &amp;mut _50<br/></td></tr><tr><td align="left">_89 = &lt;RefMut&lt;'_, &amp;mut [u8]&gt; as DerefMut&gt;::deref_mut(move _90)</td></tr></table>>];
    bb35__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_129 = deref_copy (*_89)<br/>_88 = &amp;mut (*_129)<br/>StorageDead(_90)<br/>StorageLive(_91)<br/>_91 = std::ops::Range::&lt;usize&gt; { start: const 832_usize, end: const 840_usize }<br/></td></tr><tr><td align="left">_87 = &lt;[u8] as IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _88, move _91)</td></tr></table>>];
    bb36__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_86 = &amp;mut (*_87)<br/>StorageDead(_91)<br/>StorageDead(_88)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>_97 = &amp;_81<br/></td></tr><tr><td align="left">_96 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _97)</td></tr></table>>];
    bb37__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_130 = deref_copy (*_96)<br/>_95 = &amp;(*_130)<br/>StorageDead(_97)<br/>StorageLive(_98)<br/>_98 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 8_usize }<br/></td></tr><tr><td align="left">_94 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _95, move _98)</td></tr></table>>];
    bb38__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_95)<br/>_93 = &amp;(*_94)<br/>_92 = &amp;(*_93)<br/></td></tr><tr><td align="left">_85 = core::slice::&lt;impl [u8]&gt;::copy_from_slice(move _86, move _92)</td></tr></table>>];
    bb39__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>StorageDead(_86)<br/>StorageDead(_96)<br/>StorageDead(_94)<br/>StorageDead(_93)<br/>StorageDead(_89)<br/>StorageDead(_87)<br/>StorageDead(_85)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>_104 = &amp;mut _50<br/></td></tr><tr><td align="left">_103 = &lt;RefMut&lt;'_, &amp;mut [u8]&gt; as DerefMut&gt;::deref_mut(move _104)</td></tr></table>>];
    bb40__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_131 = deref_copy (*_103)<br/>_102 = &amp;mut (*_131)<br/>StorageDead(_104)<br/>StorageLive(_105)<br/>_105 = std::ops::Range::&lt;usize&gt; { start: const 912_usize, end: const 920_usize }<br/></td></tr><tr><td align="left">_101 = &lt;[u8] as IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _102, move _105)</td></tr></table>>];
    bb41__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">_100 = &amp;mut (*_101)<br/>StorageDead(_105)<br/>StorageDead(_102)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>_109 = &amp;(*_2)<br/>StorageLive(_110)<br/>_110 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 8_usize }<br/></td></tr><tr><td align="left">_108 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _109, move _110)</td></tr></table>>];
    bb42__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_109)<br/>_107 = &amp;(*_108)<br/>_106 = &amp;(*_107)<br/></td></tr><tr><td align="left">_99 = core::slice::&lt;impl [u8]&gt;::copy_from_slice(move _100, move _106)</td></tr></table>>];
    bb43__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>StorageDead(_100)<br/>StorageDead(_108)<br/>StorageDead(_107)<br/>StorageDead(_103)<br/>StorageDead(_101)<br/>StorageDead(_99)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>_116 = &amp;mut _50<br/></td></tr><tr><td align="left">_115 = &lt;RefMut&lt;'_, &amp;mut [u8]&gt; as DerefMut&gt;::deref_mut(move _116)</td></tr></table>>];
    bb44__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">_132 = deref_copy (*_115)<br/>_114 = &amp;mut (*_132)<br/>StorageDead(_116)<br/>StorageLive(_117)<br/>_117 = std::ops::Range::&lt;usize&gt; { start: const 936_usize, end: const 944_usize }<br/></td></tr><tr><td align="left">_113 = &lt;[u8] as IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _114, move _117)</td></tr></table>>];
    bb45__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">_112 = &amp;mut (*_113)<br/>StorageDead(_117)<br/>StorageDead(_114)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>_121 = &amp;(*_2)<br/>StorageLive(_122)<br/>_122 = std::ops::Range::&lt;usize&gt; { start: const 8_usize, end: const 16_usize }<br/></td></tr><tr><td align="left">_120 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _121, move _122)</td></tr></table>>];
    bb46__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_122)<br/>StorageDead(_121)<br/>_119 = &amp;(*_120)<br/>_118 = &amp;(*_119)<br/></td></tr><tr><td align="left">_111 = core::slice::&lt;impl [u8]&gt;::copy_from_slice(move _112, move _118)</td></tr></table>>];
    bb47__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>StorageDead(_112)<br/>StorageDead(_120)<br/>StorageDead(_119)<br/>StorageDead(_115)<br/>StorageDead(_113)<br/>StorageDead(_111)<br/>_73 = const ()<br/></td></tr><tr><td align="left">drop(_81)</td></tr></table>>];
    bb48__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_78)<br/>StorageDead(_77)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_75)<br/>_73 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageDead(_73)<br/>StorageLive(_123)<br/>_123 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _123)<br/>StorageDead(_123)<br/>StorageDead(_66)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">drop(_50)</td></tr></table>>];
    bb51__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb52__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb53__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">53 (cleanup)</td></tr><tr><td align="left">drop(_81)</td></tr></table>>];
    bb54__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">54 (cleanup)</td></tr><tr><td align="left">drop(_50)</td></tr></table>>];
    bb55__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">55 (cleanup)</td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb56__0_1128 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">56 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1128 -> bb1__0_1128 [label="success"];
    bb1__0_1128 -> bb2__0_1128 [label="return"];
    bb2__0_1128 -> bb3__0_1128 [label="return"];
    bb3__0_1128 -> bb4__0_1128 [label="return"];
    bb3__0_1128 -> bb55__0_1128 [label="unwind"];
    bb4__0_1128 -> bb5__0_1128 [label="success"];
    bb4__0_1128 -> bb55__0_1128 [label="unwind"];
    bb5__0_1128 -> bb7__0_1128 [label="0"];
    bb5__0_1128 -> bb6__0_1128 [label="otherwise"];
    bb6__0_1128 -> bb8__0_1128 [label="success"];
    bb6__0_1128 -> bb55__0_1128 [label="unwind"];
    bb7__0_1128 -> bb55__0_1128 [label="unwind"];
    bb8__0_1128 -> bb14__0_1128 [label="0"];
    bb8__0_1128 -> bb9__0_1128 [label="otherwise"];
    bb9__0_1128 -> bb10__0_1128 [label="return"];
    bb9__0_1128 -> bb55__0_1128 [label="unwind"];
    bb10__0_1128 -> bb11__0_1128 [label="return"];
    bb10__0_1128 -> bb55__0_1128 [label="unwind"];
    bb11__0_1128 -> bb13__0_1128 [label="0"];
    bb11__0_1128 -> bb12__0_1128 [label="otherwise"];
    bb12__0_1128 -> bb19__0_1128 [label="success"];
    bb12__0_1128 -> bb55__0_1128 [label="unwind"];
    bb13__0_1128 -> bb14__0_1128 [label=""];
    bb14__0_1128 -> bb15__0_1128 [label="return"];
    bb14__0_1128 -> bb55__0_1128 [label="unwind"];
    bb15__0_1128 -> bb16__0_1128 [label="return"];
    bb15__0_1128 -> bb55__0_1128 [label="unwind"];
    bb16__0_1128 -> bb17__0_1128 [label="return"];
    bb16__0_1128 -> bb55__0_1128 [label="unwind"];
    bb17__0_1128 -> bb18__0_1128 [label="return"];
    bb17__0_1128 -> bb55__0_1128 [label="unwind"];
    bb18__0_1128 -> bb55__0_1128 [label="unwind"];
    bb19__0_1128 -> bb20__0_1128 [label="return"];
    bb19__0_1128 -> bb55__0_1128 [label="unwind"];
    bb20__0_1128 -> bb21__0_1128 [label="return"];
    bb20__0_1128 -> bb55__0_1128 [label="unwind"];
    bb21__0_1128 -> bb22__0_1128 [label="return"];
    bb21__0_1128 -> bb54__0_1128 [label="unwind"];
    bb22__0_1128 -> bb23__0_1128 [label="return"];
    bb22__0_1128 -> bb54__0_1128 [label="unwind"];
    bb23__0_1128 -> bb24__0_1128 [label="return"];
    bb23__0_1128 -> bb54__0_1128 [label="unwind"];
    bb24__0_1128 -> bb25__0_1128 [label="return"];
    bb24__0_1128 -> bb54__0_1128 [label="unwind"];
    bb25__0_1128 -> bb26__0_1128 [label="return"];
    bb25__0_1128 -> bb54__0_1128 [label="unwind"];
    bb26__0_1128 -> bb27__0_1128 [label="return"];
    bb26__0_1128 -> bb54__0_1128 [label="unwind"];
    bb27__0_1128 -> bb28__0_1128 [label="return"];
    bb27__0_1128 -> bb54__0_1128 [label="unwind"];
    bb28__0_1128 -> bb29__0_1128 [label="return"];
    bb28__0_1128 -> bb54__0_1128 [label="unwind"];
    bb29__0_1128 -> bb30__0_1128 [label="return"];
    bb29__0_1128 -> bb54__0_1128 [label="unwind"];
    bb30__0_1128 -> bb49__0_1128 [label="0"];
    bb30__0_1128 -> bb31__0_1128 [label="otherwise"];
    bb31__0_1128 -> bb32__0_1128 [label="success"];
    bb31__0_1128 -> bb54__0_1128 [label="unwind"];
    bb32__0_1128 -> bb33__0_1128 [label="return"];
    bb32__0_1128 -> bb54__0_1128 [label="unwind"];
    bb33__0_1128 -> bb34__0_1128 [label="return"];
    bb33__0_1128 -> bb54__0_1128 [label="unwind"];
    bb34__0_1128 -> bb35__0_1128 [label="return"];
    bb34__0_1128 -> bb53__0_1128 [label="unwind"];
    bb35__0_1128 -> bb36__0_1128 [label="return"];
    bb35__0_1128 -> bb53__0_1128 [label="unwind"];
    bb36__0_1128 -> bb37__0_1128 [label="return"];
    bb36__0_1128 -> bb53__0_1128 [label="unwind"];
    bb37__0_1128 -> bb38__0_1128 [label="return"];
    bb37__0_1128 -> bb53__0_1128 [label="unwind"];
    bb38__0_1128 -> bb39__0_1128 [label="return"];
    bb38__0_1128 -> bb53__0_1128 [label="unwind"];
    bb39__0_1128 -> bb40__0_1128 [label="return"];
    bb39__0_1128 -> bb53__0_1128 [label="unwind"];
    bb40__0_1128 -> bb41__0_1128 [label="return"];
    bb40__0_1128 -> bb53__0_1128 [label="unwind"];
    bb41__0_1128 -> bb42__0_1128 [label="return"];
    bb41__0_1128 -> bb53__0_1128 [label="unwind"];
    bb42__0_1128 -> bb43__0_1128 [label="return"];
    bb42__0_1128 -> bb53__0_1128 [label="unwind"];
    bb43__0_1128 -> bb44__0_1128 [label="return"];
    bb43__0_1128 -> bb53__0_1128 [label="unwind"];
    bb44__0_1128 -> bb45__0_1128 [label="return"];
    bb44__0_1128 -> bb53__0_1128 [label="unwind"];
    bb45__0_1128 -> bb46__0_1128 [label="return"];
    bb45__0_1128 -> bb53__0_1128 [label="unwind"];
    bb46__0_1128 -> bb47__0_1128 [label="return"];
    bb46__0_1128 -> bb53__0_1128 [label="unwind"];
    bb47__0_1128 -> bb48__0_1128 [label="return"];
    bb47__0_1128 -> bb54__0_1128 [label="unwind"];
    bb48__0_1128 -> bb50__0_1128 [label=""];
    bb49__0_1128 -> bb50__0_1128 [label=""];
    bb50__0_1128 -> bb51__0_1128 [label="return"];
    bb50__0_1128 -> bb55__0_1128 [label="unwind"];
    bb51__0_1128 -> bb52__0_1128 [label="return"];
    bb51__0_1128 -> bb56__0_1128 [label="unwind"];
    bb53__0_1128 -> bb54__0_1128 [label="return"];
    bb54__0_1128 -> bb55__0_1128 [label="return"];
    bb55__0_1128 -> bb56__0_1128 [label="return"];
}
