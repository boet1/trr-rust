// MIR for `state::fulfillment::<impl at programs/drift/src/state/fulfillment.rs:3:10: 3:15>::fmt` after PreCodegen

fn state::fulfillment::<impl at programs/drift/src/state/fulfillment.rs:3:10: 3:15>::fmt(_1: &PerpFulfillmentMethod, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &std::option::Option<u64>;
    let mut _5: &mut std::fmt::Formatter<'_>;
    let mut _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let mut _9: &&std::option::Option<u64>;
    let _10: &&std::option::Option<u64>;
    let _11: &anchor_lang::prelude::Pubkey;
    let _12: &u16;
    let _13: &u64;
    let mut _14: &mut std::fmt::Formatter<'_>;
    let mut _15: &str;
    let _16: &str;
    let mut _17: &dyn std::fmt::Debug;
    let mut _18: &anchor_lang::prelude::Pubkey;
    let mut _19: &dyn std::fmt::Debug;
    let mut _20: &u16;
    let mut _21: &dyn std::fmt::Debug;
    let mut _22: &&u64;
    let _23: &&u64;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _11;
        debug __self_1 => _12;
        debug __self_2 => _13;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_11);
        _11 = &(((*_1) as Match).0: anchor_lang::prelude::Pubkey);
        StorageLive(_12);
        _12 = &(((*_1) as Match).1: u16);
        StorageLive(_13);
        _13 = &(((*_1) as Match).2: u64);
        StorageLive(_14);
        _14 = &mut (*_2);
        StorageLive(_15);
        StorageLive(_16);
        _16 = const "Match";
        _15 = &(*_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_11);
        _17 = move _18 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_12);
        _19 = move _20 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &_13;
        _22 = &(*_23);
        _21 = move _22 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_22);
        _0 = Formatter::<'_>::debug_tuple_field3_finish(move _14, move _15, move _17, move _19, move _21) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_4);
        _4 = &(((*_1) as AMM).0: std::option::Option<u64>);
        StorageLive(_5);
        _5 = &mut (*_2);
        StorageLive(_6);
        StorageLive(_7);
        _7 = const "AMM";
        _6 = &(*_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_4;
        _9 = &(*_10);
        _8 = move _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_9);
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb6;
    }

    bb5: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}
