// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4307:10: 4307:18>::try_accounts` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4307:10: 4307:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut TransferPerpPositionBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _8: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::user::TransferPerpPositionBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::user::TransferPerpPositionBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::user::TransferPerpPositionBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::user::TransferPerpPositionBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _68: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::user::TransferPerpPositionBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _82: bool;
    let mut _83: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _84: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _85: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _86: !;
    let mut _87: anchor_lang::error::Error;
    let mut _88: anchor_lang::error::Error;
    let mut _89: anchor_lang::error::ErrorCode;
    let _90: ();
    let mut _91: bool;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _93: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _94: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _95: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _96: &anchor_lang::prelude::Signer<'_>;
    let _97: &anchor_lang::prelude::Signer<'_>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _103: bool;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _105: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _106: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _107: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _108: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _109: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _115: !;
    let mut _116: anchor_lang::error::Error;
    let mut _117: anchor_lang::error::Error;
    let mut _118: anchor_lang::error::ErrorCode;
    let _119: ();
    let mut _120: bool;
    let mut _121: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _122: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _123: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _124: !;
    let mut _125: anchor_lang::error::Error;
    let mut _126: anchor_lang::error::Error;
    let mut _127: anchor_lang::error::ErrorCode;
    let _128: ();
    let mut _129: bool;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _131: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _132: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _133: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _134: &anchor_lang::prelude::Signer<'_>;
    let _135: &anchor_lang::prelude::Signer<'_>;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _141: bool;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _143: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _144: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _145: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _146: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _147: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _153: !;
    let mut _154: anchor_lang::error::Error;
    let mut _155: anchor_lang::error::Error;
    let mut _156: anchor_lang::error::ErrorCode;
    let _157: ();
    let mut _158: bool;
    let mut _159: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _160: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _161: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _162: !;
    let mut _163: anchor_lang::error::Error;
    let mut _164: anchor_lang::error::Error;
    let mut _165: anchor_lang::error::ErrorCode;
    let mut _166: instructions::user::TransferPerpPosition<'_>;
    let mut _167: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _168: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _169: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _170: anchor_lang::prelude::Signer<'_>;
    let mut _171: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    scope 1 {
        debug from_user => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
        scope 6 {
            debug to_user => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
            scope 11 {
                debug user_stats => _36;
                let _51: anchor_lang::prelude::Signer<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::Signer<'_>;
                scope 16 {
                    debug authority => _51;
                    let _66: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    scope 21 {
                        debug state => _66;
                        let _99: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _102: bool;
                        let _111: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _114: bool;
                        let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _140: bool;
                        let _149: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _152: bool;
                        scope 26 {
                            debug residual => _99;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => _102;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug residual => _111;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _114;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug residual => _137;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _140;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug residual => _149;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _152;
                            scope 41 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, TransferPerpPositionBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
        _8 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18}>(move _9, move _15) -> [return: bb2, unwind: bb85];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb85];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _6 = move _20;
        StorageDead(_20);
        _172 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, TransferPerpPositionBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb102];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _214 = discriminant(_7);
        StorageDead(_7);
        goto -> bb82;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18}>(move _24, move _30) -> [return: bb9, unwind: bb85];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb85];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _21 = move _35;
        StorageDead(_35);
        _174 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, TransferPerpPositionBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb101];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _212 = discriminant(_22);
        StorageDead(_22);
        goto -> bb81;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18}>(move _39, move _45) -> [return: bb15, unwind: bb85];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb85];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _36 = move _50;
        StorageDead(_50);
        _176 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, TransferPerpPositionBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb100];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _210 = discriminant(_37);
        StorageDead(_37);
        goto -> bb80;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
        _53 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18}>(move _54, move _60) -> [return: bb21, unwind: bb85];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb85];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _51 = move _65;
        StorageDead(_65);
        _178 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, TransferPerpPositionBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb99];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _208 = discriminant(_52);
        StorageDead(_52);
        goto -> bb79;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18};
        _68 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4307:10: 4307:18}>(move _69, move _75) -> [return: bb27, unwind: bb85];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb85];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _66 = move _80;
        StorageDead(_80);
        _180 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_6;
        _84 = &(*_85);
        _83 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _84) -> [return: bb32, unwind: bb84];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb98];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _206 = discriminant(_67);
        StorageDead(_67);
        goto -> bb78;
    }

    bb32: {
        StorageDead(_84);
        _82 = ((*_83).6: bool);
        switchInt(move _82) -> [0: bb33, otherwise: bb36];
    }

    bb33: {
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = ConstraintMut;
        _88 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _89) -> [return: bb34, unwind: bb84];
    }

    bb34: {
        StorageDead(_89);
        _87 = anchor_lang::error::Error::with_account_name::<&str>(move _88, const "from_user") -> [return: bb35, unwind: bb84];
    }

    bb35: {
        StorageDead(_88);
        _0 = std::result::Result::<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error>::Err(move _87);
        StorageDead(_87);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb77;
    }

    bb36: {
        StorageDead(_85);
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &_6;
        _94 = &(*_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_51;
        _96 = &(*_97);
        _93 = constraints::can_sign_for_user(move _94, move _96) -> [return: bb37, unwind: bb84];
    }

    bb37: {
        StorageDead(_96);
        StorageDead(_94);
        _92 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _93) -> [return: bb38, unwind: bb84];
    }

    bb38: {
        StorageDead(_93);
        _98 = discriminant(_92);
        switchInt(move _98) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_102);
        _102 = ((_92 as Continue).0: bool);
        _91 = _102;
        StorageDead(_102);
        switchInt(move _91) -> [0: bb87, otherwise: bb86];
    }

    bb40: {
        StorageLive(_99);
        _99 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_101);
        _101 = move _99;
        _0 = <std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _101) -> [return: bb41, unwind: bb97];
    }

    bb41: {
        StorageDead(_101);
        StorageDead(_99);
        _204 = discriminant(_92);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_92);
        goto -> bb76;
    }

    bb42: {
        StorageDead(_108);
        StorageDead(_106);
        _104 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _105) -> [return: bb43, unwind: bb84];
    }

    bb43: {
        StorageDead(_105);
        _110 = discriminant(_104);
        switchInt(move _110) -> [0: bb44, 1: bb45, otherwise: bb5];
    }

    bb44: {
        StorageLive(_114);
        _114 = ((_104 as Continue).0: bool);
        _103 = _114;
        StorageDead(_114);
        switchInt(move _103) -> [0: bb89, otherwise: bb88];
    }

    bb45: {
        StorageLive(_111);
        _111 = move ((_104 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_113);
        _113 = move _111;
        _0 = <std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _113) -> [return: bb46, unwind: bb96];
    }

    bb46: {
        StorageDead(_113);
        StorageDead(_111);
        _202 = discriminant(_104);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_104);
        goto -> bb75;
    }

    bb47: {
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = ConstraintRaw;
        _117 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _118) -> [return: bb48, unwind: bb84];
    }

    bb48: {
        StorageDead(_118);
        _116 = anchor_lang::error::Error::with_account_name::<&str>(move _117, const "from_user") -> [return: bb49, unwind: bb84];
    }

    bb49: {
        StorageDead(_117);
        _0 = std::result::Result::<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error>::Err(move _116);
        StorageDead(_116);
        goto -> bb75;
    }

    bb50: {
        StorageDead(_122);
        _120 = ((*_121).6: bool);
        switchInt(move _120) -> [0: bb51, otherwise: bb54];
    }

    bb51: {
        StorageDead(_123);
        StorageDead(_121);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = ConstraintMut;
        _126 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _127) -> [return: bb52, unwind: bb84];
    }

    bb52: {
        StorageDead(_127);
        _125 = anchor_lang::error::Error::with_account_name::<&str>(move _126, const "to_user") -> [return: bb53, unwind: bb84];
    }

    bb53: {
        StorageDead(_126);
        _0 = std::result::Result::<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error>::Err(move _125);
        StorageDead(_125);
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb77;
    }

    bb54: {
        StorageDead(_123);
        StorageDead(_121);
        _119 = const ();
        StorageDead(_120);
        StorageDead(_119);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &_21;
        _132 = &(*_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &_51;
        _134 = &(*_135);
        _131 = constraints::can_sign_for_user(move _132, move _134) -> [return: bb55, unwind: bb84];
    }

    bb55: {
        StorageDead(_134);
        StorageDead(_132);
        _130 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _131) -> [return: bb56, unwind: bb84];
    }

    bb56: {
        StorageDead(_131);
        _136 = discriminant(_130);
        switchInt(move _136) -> [0: bb57, 1: bb58, otherwise: bb5];
    }

    bb57: {
        StorageLive(_140);
        _140 = ((_130 as Continue).0: bool);
        _129 = _140;
        StorageDead(_140);
        switchInt(move _129) -> [0: bb91, otherwise: bb90];
    }

    bb58: {
        StorageLive(_137);
        _137 = move ((_130 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb59, unwind: bb95];
    }

    bb59: {
        StorageDead(_139);
        StorageDead(_137);
        _200 = discriminant(_130);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_130);
        goto -> bb74;
    }

    bb60: {
        StorageDead(_146);
        StorageDead(_144);
        _142 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb61, unwind: bb84];
    }

    bb61: {
        StorageDead(_143);
        _148 = discriminant(_142);
        switchInt(move _148) -> [0: bb62, 1: bb63, otherwise: bb5];
    }

    bb62: {
        StorageLive(_152);
        _152 = ((_142 as Continue).0: bool);
        _141 = _152;
        StorageDead(_152);
        switchInt(move _141) -> [0: bb93, otherwise: bb92];
    }

    bb63: {
        StorageLive(_149);
        _149 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_151);
        _151 = move _149;
        _0 = <std::result::Result<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _151) -> [return: bb64, unwind: bb94];
    }

    bb64: {
        StorageDead(_151);
        StorageDead(_149);
        _198 = discriminant(_142);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_142);
        goto -> bb73;
    }

    bb65: {
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = ConstraintRaw;
        _155 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _156) -> [return: bb66, unwind: bb84];
    }

    bb66: {
        StorageDead(_156);
        _154 = anchor_lang::error::Error::with_account_name::<&str>(move _155, const "to_user") -> [return: bb67, unwind: bb84];
    }

    bb67: {
        StorageDead(_155);
        _0 = std::result::Result::<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error>::Err(move _154);
        StorageDead(_154);
        goto -> bb73;
    }

    bb68: {
        StorageDead(_160);
        _158 = ((*_159).6: bool);
        switchInt(move _158) -> [0: bb69, otherwise: bb72];
    }

    bb69: {
        StorageDead(_161);
        StorageDead(_159);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = ConstraintMut;
        _164 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _165) -> [return: bb70, unwind: bb84];
    }

    bb70: {
        StorageDead(_165);
        _163 = anchor_lang::error::Error::with_account_name::<&str>(move _164, const "user_stats") -> [return: bb71, unwind: bb84];
    }

    bb71: {
        StorageDead(_164);
        _0 = std::result::Result::<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error>::Err(move _163);
        StorageDead(_163);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb77;
    }

    bb72: {
        StorageDead(_161);
        StorageDead(_159);
        _157 = const ();
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_166);
        StorageLive(_167);
        _167 = move _6;
        StorageLive(_168);
        _168 = move _21;
        StorageLive(_169);
        _169 = move _36;
        StorageLive(_170);
        _170 = move _51;
        StorageLive(_171);
        _171 = move _66;
        _166 = instructions::user::TransferPerpPosition::<'_> { from_user: move _167, to_user: move _168, user_stats: move _169, authority: move _170, state: move _171 };
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_167);
        _0 = std::result::Result::<instructions::user::TransferPerpPosition<'_>, anchor_lang::error::Error>::Ok(move _166);
        StorageDead(_166);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb83;
    }

    bb73: {
        StorageDead(_141);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb77;
    }

    bb75: {
        StorageDead(_103);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb77;
    }

    bb77: {
        drop(_66) -> [return: bb78, unwind: bb85];
    }

    bb78: {
        StorageDead(_66);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_51);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_36);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_21);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_6);
        goto -> bb83;
    }

    bb83: {
        return;
    }

    bb84 (cleanup): {
        drop(_66) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        resume;
    }

    bb86: {
        _182 = discriminant(_92);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_92);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_6;
        _106 = &(*_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &_36;
        _108 = &(*_109);
        _105 = constraints::is_stats_for_user(move _106, move _108) -> [return: bb42, unwind: bb84];
    }

    bb87: {
        _184 = discriminant(_92);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_92);
        goto -> bb47;
    }

    bb88: {
        _186 = discriminant(_104);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_104);
        _90 = const ();
        StorageDead(_103);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_21;
        _122 = &(*_123);
        _121 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _122) -> [return: bb50, unwind: bb84];
    }

    bb89: {
        _188 = discriminant(_104);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_104);
        goto -> bb47;
    }

    bb90: {
        _190 = discriminant(_130);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_130);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_21;
        _144 = &(*_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_36;
        _146 = &(*_147);
        _143 = constraints::is_stats_for_user(move _144, move _146) -> [return: bb60, unwind: bb84];
    }

    bb91: {
        _192 = discriminant(_130);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_130);
        goto -> bb65;
    }

    bb92: {
        _194 = discriminant(_142);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_142);
        _128 = const ();
        StorageDead(_141);
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_36;
        _160 = &(*_161);
        _159 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _160) -> [return: bb68, unwind: bb84];
    }

    bb93: {
        _196 = discriminant(_142);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_142);
        goto -> bb65;
    }

    bb94 (cleanup): {
        _216 = discriminant(_142);
        goto -> bb84;
    }

    bb95 (cleanup): {
        _217 = discriminant(_130);
        goto -> bb84;
    }

    bb96 (cleanup): {
        _218 = discriminant(_104);
        goto -> bb84;
    }

    bb97 (cleanup): {
        _219 = discriminant(_92);
        goto -> bb84;
    }

    bb98 (cleanup): {
        _220 = discriminant(_67);
        goto -> bb85;
    }

    bb99 (cleanup): {
        _221 = discriminant(_52);
        goto -> bb85;
    }

    bb100 (cleanup): {
        _222 = discriminant(_37);
        goto -> bb85;
    }

    bb101 (cleanup): {
        _223 = discriminant(_22);
        goto -> bb85;
    }

    bb102 (cleanup): {
        _224 = discriminant(_7);
        goto -> bb85;
    }
}
