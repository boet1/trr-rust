// MIR for `insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:36:1: 36:24>::update_if_shares` before PreCodegen

fn insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:36:1: 36:24>::update_if_shares(_1: &mut InsuranceFundStake, _2: u128, _3: &SpotMarket) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug new_shares => _2;
    debug spot_market => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _8: &state::spot_market::SpotMarket;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: ();
    let mut _14: u128;
    let mut _15: ();
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = &(*_3);
        _6 = InsuranceFundStake::validate_base(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        _14 = _2;
        ((*_1).1: u128) = move _14;
        StorageDead(_14);
        StorageLive(_15);
        _15 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _15);
        StorageDead(_15);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}
