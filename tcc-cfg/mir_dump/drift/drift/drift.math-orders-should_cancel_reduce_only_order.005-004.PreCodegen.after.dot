digraph Mir_0_2601 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn math::orders::should_cancel_reduce_only_order(_1: &amp;ReErased state::user::Order, _2: i64, _3: u64) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _4: bool;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _7: &amp;ReErased state::user::OrderStatus;<br align="left"/>let _8: state::user::OrderStatus;<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _12: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _13: &amp;ReErased state::user::Order;<br align="left"/>let mut _14: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _15: i64;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: u64;<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: &amp;ReErased state::user::OrderStatus;<br align="left"/>debug order =&gt; _1;<br align="left"/>debug existing_base_asset_amount =&gt; _2;<br align="left"/>debug step_size =&gt; _3;<br align="left"/>debug should_cancel =&gt; _4;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>>;
    bb0__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;((*_1).12: state::user::OrderStatus)<br/>StorageLive(_7)<br/>_23 = const _<br/>_7 = &amp;(*_23)<br/></td></tr><tr><td align="left">_5 = &lt;OrderStatus as PartialEq&gt;::eq(move _6, move _7)</td></tr></table>>];
    bb1__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb2__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_9)<br/>_9 = ((*_1).18: bool)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;(*_1)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = _2<br/>_14 = Option::&lt;i64&gt;::Some(move _15)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_12 = Order::get_base_asset_amount_unfilled(move _13, move _14)</td></tr></table>>];
    bb4__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_4 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _12)</td></tr></table>>];
    bb7__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_16 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb8__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_11 as Continue).0: u64)<br/>_10 = _20<br/>StorageDead(_20)<br/>StorageLive(_21)<br/>_21 = _3<br/>_4 = Lt(move _10, move _21)<br/>StorageDead(_21)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb10__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_11 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb11__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_5)<br/>StorageLive(_22)<br/>_22 = _4<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(move _22)<br/>StorageDead(_22)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2601 -> bb1__0_2601 [label="return"];
    bb1__0_2601 -> bb4__0_2601 [label="0"];
    bb1__0_2601 -> bb2__0_2601 [label="otherwise"];
    bb2__0_2601 -> bb5__0_2601 [label="0"];
    bb2__0_2601 -> bb3__0_2601 [label="otherwise"];
    bb3__0_2601 -> bb6__0_2601 [label="return"];
    bb4__0_2601 -> bb5__0_2601 [label=""];
    bb5__0_2601 -> bb12__0_2601 [label=""];
    bb6__0_2601 -> bb7__0_2601 [label="return"];
    bb7__0_2601 -> bb8__0_2601 [label="0"];
    bb7__0_2601 -> bb10__0_2601 [label="1"];
    bb7__0_2601 -> bb9__0_2601 [label="otherwise"];
    bb8__0_2601 -> bb12__0_2601 [label=""];
    bb10__0_2601 -> bb11__0_2601 [label="return"];
    bb11__0_2601 -> bb13__0_2601 [label=""];
    bb12__0_2601 -> bb13__0_2601 [label=""];
}
