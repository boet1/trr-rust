digraph Mir_0_4170 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn state::state::State::get_init_user_fee(_1: &amp;ReErased state::state::State) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _2: u64;<br align="left"/>let mut _3: u64;<br align="left"/>let mut _4: u64;<br align="left"/>let mut _5: u16;<br align="left"/>let mut _6: (u64, bool);<br align="left"/>let mut _7: bool;<br align="left"/>let _8: u64;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: (u64, bool);<br align="left"/>let mut _11: bool;<br align="left"/>let _12: u64;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _14: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _15: u64;<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _17: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _23: u64;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: &amp;ReErased state::state::State;<br align="left"/>let mut _27: isize;<br align="left"/>let _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _29: !;<br align="left"/>let mut _30: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _31: u64;<br align="left"/>let _32: u64;<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: u64;<br align="left"/>let mut _35: u64;<br align="left"/>let mut _36: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _37: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _40: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _41: u64;<br align="left"/>let mut _42: u64;<br align="left"/>let mut _43: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _44: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _45: u64;<br align="left"/>let mut _46: u64;<br align="left"/>let mut _47: isize;<br align="left"/>let _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _49: !;<br align="left"/>let mut _50: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _51: u64;<br align="left"/>let mut _52: isize;<br align="left"/>let _53: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _56: u64;<br align="left"/>let mut _57: u64;<br align="left"/>let mut _58: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _59: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _60: u64;<br align="left"/>let mut _61: isize;<br align="left"/>let _62: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _63: !;<br align="left"/>let mut _64: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _65: u64;<br align="left"/>let mut _66: isize;<br align="left"/>let _67: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _68: !;<br align="left"/>let mut _69: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _70: u64;<br align="left"/>let mut _71: u64;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug max_init_fee =&gt; _2;<br align="left"/>debug target_utilization =&gt; _8;<br align="left"/>debug account_space_utilization =&gt; _12;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>debug residual =&gt; _28;<br align="left"/>debug val =&gt; _31;<br align="left"/>debug init_fee =&gt; _32;<br align="left"/>debug residual =&gt; _48;<br align="left"/>debug val =&gt; _51;<br align="left"/>debug residual =&gt; _53;<br align="left"/>debug val =&gt; _56;<br align="left"/>debug residual =&gt; _62;<br align="left"/>debug val =&gt; _65;<br align="left"/>debug residual =&gt; _67;<br align="left"/>debug val =&gt; _70;<br align="left"/>>;
    bb0__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = ((*_1).23: u16)<br/>_4 = move _5 as u64 (IntToInt)<br/>StorageDead(_5)<br/>_6 = CheckedMul(_4, const _)<br/></td></tr><tr><td align="left">assert(!move (_6.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _4, const _)</td></tr></table>>];
    bb1__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = move (_6.0: u64)<br/>StorageDead(_4)<br/>_7 = Eq(const 100_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _7, &quot;attempt to divide `{}` by zero&quot;, _3)</td></tr></table>>];
    bb2__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_2 = Div(move _3, const 100_u64)<br/>StorageDead(_3)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_10 = CheckedMul(const 8_u64, const _)<br/></td></tr><tr><td align="left">assert(!move (_10.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 8_u64, const _)</td></tr></table>>];
    bb3__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_9 = move (_10.0: u64)<br/>_11 = Eq(const 10_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _11, &quot;attempt to divide `{}` by zero&quot;, _9)</td></tr></table>>];
    bb4__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_8 = Div(move _9, const 10_u64)<br/>StorageDead(_9)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = ((*_1).9: u64)<br/></td></tr><tr><td align="left">_17 = &lt;u64 as SafeMath&gt;::safe_mul(move _18, const _)</td></tr></table>>];
    bb5__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb6__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_19 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb7__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_16 as Continue).0: u64)<br/>_15 = _23<br/>StorageDead(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = &amp;(*_1)<br/></td></tr><tr><td align="left">_25 = state::state::State::max_number_of_sub_accounts(move _26)</td></tr></table>>];
    bb8__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_22)<br/>_22 = _20<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb10__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/></td></tr><tr><td align="left">_24 = &lt;u64 as Ord&gt;::max(move _25, const 1_u64)</td></tr></table>>];
    bb12__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/></td></tr><tr><td align="left">_14 = &lt;u64 as SafeMath&gt;::safe_div(move _15, move _24)</td></tr></table>>];
    bb13__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb14__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_27 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb15__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_13 as Continue).0: u64)<br/>_12 = _31<br/>StorageDead(_31)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _12<br/>StorageLive(_35)<br/>_35 = _8<br/>_33 = Gt(move _34, move _35)<br/></td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb16__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_30)<br/>_30 = _28<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _30)</td></tr></table>>];
    bb17__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = _2<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = _12<br/>StorageLive(_46)<br/>_46 = _8<br/></td></tr><tr><td align="left">_44 = &lt;u64 as SafeMath&gt;::safe_sub(move _45, move _46)</td></tr></table>>];
    bb19__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/>_32 = const 0_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">_43 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _44)</td></tr></table>>];
    bb21__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_47 = discriminant(_43)<br/></td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb22__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = ((_43 as Continue).0: u64)<br/>_42 = _51<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">_40 = &lt;u64 as SafeMath&gt;::safe_mul(move _41, move _42)</td></tr></table>>];
    bb23__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = ((_43 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_50)<br/>_50 = _48<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _50)</td></tr></table>>];
    bb24__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_48)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">_39 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _40)</td></tr></table>>];
    bb26__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>_52 = discriminant(_39)<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb27__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_39 as Continue).0: u64)<br/>_38 = _56<br/>StorageDead(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_60 = _8<br/></td></tr><tr><td align="left">_59 = &lt;u64 as SafeMath&gt;::safe_sub(const _, move _60)</td></tr></table>>];
    bb28__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_39 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_55)<br/>_55 = _53<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _55)</td></tr></table>>];
    bb29__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/></td></tr><tr><td align="left">_58 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _59)</td></tr></table>>];
    bb31__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>_61 = discriminant(_58)<br/></td></tr><tr><td align="left">switchInt(move _61)</td></tr></table>>];
    bb32__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_65)<br/>_65 = ((_58 as Continue).0: u64)<br/>_57 = _65<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">_37 = &lt;u64 as SafeMath&gt;::safe_div(move _38, move _57)</td></tr></table>>];
    bb33__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = ((_58 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_64)<br/>_64 = _62<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _64)</td></tr></table>>];
    bb34__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageDead(_62)<br/>StorageDead(_57)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_36 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _37)</td></tr></table>>];
    bb36__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_66 = discriminant(_36)<br/></td></tr><tr><td align="left">switchInt(move _66)</td></tr></table>>];
    bb37__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_70)<br/>_70 = ((_36 as Continue).0: u64)<br/>_32 = _70<br/>StorageDead(_70)<br/>StorageDead(_58)<br/>StorageDead(_43)<br/>StorageDead(_39)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_67)<br/>_67 = ((_36 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_69)<br/>_69 = _67<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _69)</td></tr></table>>];
    bb39__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageLive(_71)<br/>_71 = _32<br/>_0 = std::result::Result::&lt;u64, error::ErrorCode&gt;::Ok(move _71)<br/>StorageDead(_71)<br/>StorageDead(_32)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_39)<br/>StorageDead(_36)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_8)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_4170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4170 -> bb1__0_4170 [label="success"];
    bb1__0_4170 -> bb2__0_4170 [label="success"];
    bb2__0_4170 -> bb3__0_4170 [label="success"];
    bb3__0_4170 -> bb4__0_4170 [label="success"];
    bb4__0_4170 -> bb5__0_4170 [label="return"];
    bb5__0_4170 -> bb6__0_4170 [label="return"];
    bb6__0_4170 -> bb7__0_4170 [label="0"];
    bb6__0_4170 -> bb9__0_4170 [label="1"];
    bb6__0_4170 -> bb8__0_4170 [label="otherwise"];
    bb7__0_4170 -> bb11__0_4170 [label="return"];
    bb9__0_4170 -> bb10__0_4170 [label="return"];
    bb10__0_4170 -> bb44__0_4170 [label=""];
    bb11__0_4170 -> bb12__0_4170 [label="return"];
    bb12__0_4170 -> bb13__0_4170 [label="return"];
    bb13__0_4170 -> bb14__0_4170 [label="return"];
    bb14__0_4170 -> bb15__0_4170 [label="0"];
    bb14__0_4170 -> bb16__0_4170 [label="1"];
    bb14__0_4170 -> bb8__0_4170 [label="otherwise"];
    bb15__0_4170 -> bb19__0_4170 [label="0"];
    bb15__0_4170 -> bb18__0_4170 [label="otherwise"];
    bb16__0_4170 -> bb17__0_4170 [label="return"];
    bb17__0_4170 -> bb44__0_4170 [label=""];
    bb18__0_4170 -> bb20__0_4170 [label="return"];
    bb19__0_4170 -> bb40__0_4170 [label=""];
    bb20__0_4170 -> bb21__0_4170 [label="return"];
    bb21__0_4170 -> bb22__0_4170 [label="0"];
    bb21__0_4170 -> bb23__0_4170 [label="1"];
    bb21__0_4170 -> bb8__0_4170 [label="otherwise"];
    bb22__0_4170 -> bb25__0_4170 [label="return"];
    bb23__0_4170 -> bb24__0_4170 [label="return"];
    bb24__0_4170 -> bb42__0_4170 [label=""];
    bb25__0_4170 -> bb26__0_4170 [label="return"];
    bb26__0_4170 -> bb27__0_4170 [label="0"];
    bb26__0_4170 -> bb28__0_4170 [label="1"];
    bb26__0_4170 -> bb8__0_4170 [label="otherwise"];
    bb27__0_4170 -> bb30__0_4170 [label="return"];
    bb28__0_4170 -> bb29__0_4170 [label="return"];
    bb29__0_4170 -> bb42__0_4170 [label=""];
    bb30__0_4170 -> bb31__0_4170 [label="return"];
    bb31__0_4170 -> bb32__0_4170 [label="0"];
    bb31__0_4170 -> bb33__0_4170 [label="1"];
    bb31__0_4170 -> bb8__0_4170 [label="otherwise"];
    bb32__0_4170 -> bb35__0_4170 [label="return"];
    bb33__0_4170 -> bb34__0_4170 [label="return"];
    bb34__0_4170 -> bb41__0_4170 [label=""];
    bb35__0_4170 -> bb36__0_4170 [label="return"];
    bb36__0_4170 -> bb37__0_4170 [label="0"];
    bb36__0_4170 -> bb38__0_4170 [label="1"];
    bb36__0_4170 -> bb8__0_4170 [label="otherwise"];
    bb37__0_4170 -> bb40__0_4170 [label=""];
    bb38__0_4170 -> bb39__0_4170 [label="return"];
    bb39__0_4170 -> bb41__0_4170 [label=""];
    bb40__0_4170 -> bb46__0_4170 [label=""];
    bb41__0_4170 -> bb43__0_4170 [label=""];
    bb42__0_4170 -> bb43__0_4170 [label=""];
    bb43__0_4170 -> bb45__0_4170 [label=""];
    bb44__0_4170 -> bb45__0_4170 [label=""];
    bb45__0_4170 -> bb46__0_4170 [label=""];
}
