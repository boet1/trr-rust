// MIR for `insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:109:1: 109:36>::update_epoch` after PreCodegen

fn insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:109:1: 109:36>::update_epoch(_1: &mut ProtocolIfSharesTransferConfig, _2: i64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug now => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: i64;
    let mut _6: i64;
    let _7: i64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _9: std::result::Result<i64, error::ErrorCode>;
    let mut _10: i64;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _12: std::result::Result<i64, error::ErrorCode>;
    let mut _13: i64;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _15: std::result::Result<i64, error::ErrorCode>;
    let mut _16: i64;
    let mut _17: i64;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: i64;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: i64;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: i64;
    let mut _33: i64;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _35: std::result::Result<i64, error::ErrorCode>;
    let mut _36: i64;
    let mut _37: i64;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _39: std::result::Result<i64, error::ErrorCode>;
    let mut _40: i64;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: ();
    scope 1 {
        debug n_epoch_durations => _7;
        let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _45: i64;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: i64;
        scope 14 {
            debug residual => _42;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _45;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _47;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _50;
            scope 21 {
            }
        }
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _24;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _27;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _29;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _32;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        StorageLive(_6);
        _6 = ((*_1).3: i64);
        _4 = Gt(move _5, move _6);
        switchInt(move _4) -> [0: bb28, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _2;
        StorageLive(_17);
        _17 = ((*_1).3: i64);
        _15 = <i64 as SafeMath>::safe_sub(move _16, move _17) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        _18 = discriminant(_14);
        switchInt(move _18) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_22);
        _22 = ((_14 as Continue).0: i64);
        _13 = _22;
        StorageDead(_22);
        _12 = <i64 as SafeMath>::safe_div(move _13, const _) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_19);
        _19 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb31;
    }

    bb8: {
        StorageDead(_13);
        _11 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _12) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_12);
        _23 = discriminant(_11);
        switchInt(move _23) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_11 as Continue).0: i64);
        _10 = _27;
        StorageDead(_27);
        _9 = <i64 as SafeMath>::safe_add(move _10, const 1_i64) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_24);
        _24 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_24);
        goto -> bb31;
    }

    bb13: {
        StorageDead(_10);
        _8 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_9);
        _28 = discriminant(_8);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_8 as Continue).0: i64);
        _7 = _32;
        StorageDead(_32);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_1).3: i64);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _7;
        _39 = <i64 as SafeMath>::safe_mul(const _, move _40) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_29);
        _29 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        goto -> bb32;
    }

    bb18: {
        StorageDead(_40);
        _38 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        _41 = discriminant(_38);
        switchInt(move _41) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_45);
        _45 = ((_38 as Continue).0: i64);
        _37 = _45;
        StorageDead(_45);
        _35 = <i64 as SafeMath>::safe_add(move _36, move _37) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_42);
        _42 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb30;
    }

    bb23: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _35) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_35);
        _46 = discriminant(_34);
        switchInt(move _46) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_50);
        _50 = ((_34 as Continue).0: i64);
        _33 = _50;
        StorageDead(_50);
        ((*_1).3: i64) = move _33;
        StorageDead(_33);
        StorageDead(_38);
        StorageDead(_34);
        ((*_1).2: u128) = const 0_u128;
        _3 = const ();
        StorageDead(_7);
        goto -> bb29;
    }

    bb26: {
        StorageLive(_47);
        _47 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb30;
    }

    bb28: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        goto -> bb29;
    }

    bb29: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_51);
        _51 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _51);
        StorageDead(_51);
        goto -> bb34;
    }

    bb30: {
        StorageDead(_33);
        StorageDead(_38);
        StorageDead(_34);
        goto -> bb33;
    }

    bb31: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb34;
    }

    bb34: {
        return;
    }
}
